#!/usr/bin/env -S node --enable-source-maps

// scripts/extract-demo-apps-to-sandpack-file-object.ts
import { writeFileSync, readFileSync, statSync, readdirSync } from "fs";
import path from "path";
import url from "url";
import * as prettier from "prettier";
var demoNames = [
  "canvas-new",
  "document",
  "dashboard",
  "video-player"
];
var getFilesRecursively = (directory, result, demoName) => {
  const filesInDirectory = readdirSync(directory);
  const foldersToIgnore = ["node_modules", "_common", "CORD-playground"];
  const filesToIgnore = [".gitignore", ".DS_Store"];
  const fileTypeToIgnore = [".png"];
  for (const file of filesInDirectory) {
    const absolute = path.join(directory, file);
    const sampleAppDirectoryString = `opensource/sample-apps/${demoName}/`;
    if (statSync(absolute).isDirectory()) {
      getFilesRecursively(absolute, result, demoName);
    } else if (foldersToIgnore.some((folder) => absolute.includes(folder)) || filesToIgnore.some((fileName) => file.includes(fileName)) || fileTypeToIgnore.some((fileName) => file.endsWith(fileName))) {
      continue;
    } else {
      const sampleAppStringIndex = absolute.indexOf(sampleAppDirectoryString);
      const fileDirectory = absolute.slice(
        sampleAppStringIndex + sampleAppDirectoryString.length
      );
      const fileContents = readFileSync(absolute, "utf-8");
      const cleanedFileContents = fileContents.replaceAll(/(<InformationHeader)[\s\S]*?(\/>)/g, "").replaceAll(
        /(import { InformationHeader })[\s\S]*?(InformationHeader';)/g,
        ""
      );
      result[fileDirectory] = cleanedFileContents;
    }
  }
};
var main = async () => {
  const resultObj = {};
  const opensourcePath = path.join(
    path.dirname(url.fileURLToPath(import.meta.url)),
    "../../opensource/sample-apps/"
  );
  for (const demoName of demoNames) {
    const demoResult = {};
    getFilesRecursively(opensourcePath + demoName, demoResult, demoName);
    resultObj[demoName] = demoResult;
  }
  const sandpackFileObject = `// @generated by scripts/extract-demo-apps-to-sandpack-file-object.ts
// npm run extract-demo-apps-to-sandpack-object
/* eslint-disable */

  export default 
  ${JSON.stringify(resultObj)}

  `;
  const resultFilePath = opensourcePath + "/_common/sandpackDemoFileObject.ts";
  writeFileSync(
    resultFilePath,
    await prettier.format(sandpackFileObject, {
      filepath: resultFilePath,
      ...await prettier.resolveConfig(resultFilePath)
    })
  );
};
main().catch((err) => {
  console.error(err);
  process.exit(1);
});

//# sourceMappingURL=extract-demo-apps-to-sandpack-file-object.js.map
