{
  "version": 3,
  "sources": ["scripts/partial-database-dump.ts", "server/src/admin/databaseDump/index.ts", "common/const/Urls.ts", "common/const/Ids.ts", "server/src/logging/Logger.ts", "server/src/entity/application/ApplicationEntity.ts", "server/src/featureflags/index.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts", "common/const/FeatureFlags.ts", "server/src/email/index.ts", "common/types/index.ts", "server/src/entity/email_notification/EmailOutboundNotificationEntity.ts", "server/src/email/utils.ts", "server/src/entity/event/EventEntity.ts", "common/const/Sizes.ts", "server/src/entity/customer/CustomerEntity.ts", "server/src/logging/flatFormat.ts", "package.json", "server/src/logging/prometheus.ts", "server/src/auth/index.ts", "server/src/util/CordError.ts", "server/src/entity/org_members/OrgMembersEntity.ts", "server/src/util/readReplicaDatabase.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\r\n\r\n// This script connects to the radical database and\r\n// creates a partial dump of it.\r\n//\r\n// Please look at `server/src/admin/databaseDump/index.ts` for more information.\r\n//\r\n// This script can be run without running a server instance. Instead of\r\n// downloading the database dump using `curl`, run this script like this\r\n//\r\n// Typical use:\r\n// # build/index.mjs --target=scripts\r\n// # dist/scripts/partial-database-dump.js --envFile .env >dump.sql\r\n// # psql -f dump.sql new_radical_db_local\r\n//\r\n// The above assumes that:\r\n// * there is a file called \".env\" which has the POSTGRES_* variables in it,\r\n//   pointing to the PostgreSQL database from which you want to create the\r\n//   partial dump.\r\n// * you have a local database server, which has a database called\r\n//   `new_radical_db_local` on it\r\n// * if there is any data in `new_radical_db_local`, you are ready to wipe all\r\n//   of it.\r\n//\r\n// Please look at `server/src/admin/databaseDump/index.ts` for more information.\r\n\r\nimport { promises as fs } from 'fs';\r\nimport * as path from 'path';\r\nimport yargs from 'yargs';\r\nimport * as dotenv from 'dotenv';\r\n\r\nimport { streamPartialDump } from 'server/src/admin/databaseDump/index.ts';\r\nimport { getReadReplicaDbConfigFromEnv } from 'server/src/util/readReplicaDatabase.ts';\r\n\r\nasync function main() {\r\n  const argv = yargs(process.argv.slice(2))\r\n    .option({\r\n      envFile: {\r\n        description: 'path to the .env file with database configuration',\r\n        default: '.env',\r\n        type: 'string',\r\n      },\r\n    })\r\n    .help().argv;\r\n\r\n  const env = dotenv.parse(\r\n    await fs.readFile(path.resolve(process.cwd(), argv.envFile), {\r\n      encoding: 'utf8',\r\n    }),\r\n  );\r\n\r\n  await streamPartialDump(process.stdout, getReadReplicaDbConfigFromEnv(env));\r\n}\r\n\r\nmain().then(\r\n  () => {\r\n    process.exit(0);\r\n  },\r\n  (error) => {\r\n    console.error(error);\r\n    process.exit(1);\r\n  },\r\n);\r\n", "// This function connects to the radical database (the same as Sequelize\r\n// connects to) and streams a partial dump of it to the given WritableStream.\r\n// The stream contains all the SQL commands to create the Cord tables, indexes,\r\n// types, functions etc., and then loads data into those tables. The data is\r\n// partial in the sense that the `orgs` table will only contain one entry: our\r\n// own org (as defined by `RADICAL_ORG_ID`). All the other tables will contain\r\n// only those rows that do not reference an org other than ours in any way.\r\n//\r\n// Typical use:\r\n// ```\r\n// # curl --header \"Authorization: TOKEN\" \\\r\n//       https://admin.cord.com/partial-database-dump >dump.sql\r\n// # psql -f dump.sql radical_db_local\r\n// ```\r\n// (`TOKEN` needs to be replaced with the authorization token of a logged-in\r\n// admin user. You can copy and paste it from the sidebar: go to the Hacks\r\n// panel and copy all contents of the 'Authorization Header' field, beginning\r\n// with and including \"Bearer\".)\r\n//\r\n// The above assumes that:\r\n// * you have a local database server, which has a database called\r\n//   `radical_db_local` on it\r\n// * you are ready to wipe all the data that is currently stored in\r\n//   `radical_db_local`\r\n//\r\n// What it does:\r\n// * the first command contacts admin.api.cord which runs this function, and\r\n//   the output is saved locally into a file called `dump.sql`\r\n// * the second command starts the PostgreSQL command line client, asks it to\r\n//   connect to your database `radical_db_local` and execute all the statements\r\n//   in `dump.sql` in it. This will wipe all the contents of `radical_db_local`\r\n//   (well, of the `cord` schema), and then recreates all the tables, types,\r\n//   functions etc., loads data into the tables, and then finalises the database\r\n//   schema (creates indexes, sets up constraints etc.)\r\n//\r\n// What you have afterwards:\r\n// The `radical_db_local` database will have a `cord` schema that will have\r\n// exactly the same structure as the production database. In terms of database\r\n// migration, it is in an identical state to the production database. It also\r\n// has a subset of data, namely all data that does not reference in any way\r\n// an org other than our own (as defined as RADICAL_ORG_ID in common/const/Ids).\r\n//\r\n// BE CAREFUL!!!\r\n// Make sure you never execute `dump.sql` in the production database, as it\r\n// would also wipe all data and then only recreate the data belonging to our\r\n// org.\r\n//\r\n// When you run this script, it connects to the database  and immediately\r\n// begins a read-only transaction, thus making sure that it does not make any\r\n// changes whatsoever to the database it is connected to. The transaction is\r\n// configured such that it operates on a snapshot of the database, and it does\r\n// not interfere at all with the production traffic (i.e. it will never block\r\n// any other database connection). As a result, the dump created contains a\r\n// consistent set of data.\r\n//\r\n// The output of this function is a SQL text file, i.e. a file containing a\r\n// series of (very many) SQL statements. Feel free to inspect the file. Again:\r\n// executing this file in a database means first wiping all Cord tables, before\r\n// recreating them and loading some data into them.\r\n//\r\n// While you should never execute the created dump on the prod db, it is very\r\n// safe to execute it on your local database: the whole file is also\r\n// encapsulated in a transaction. Meaning that, if any of the statements fails,\r\n// all changes to your local database (including the wipe at the beginning) are\r\n// rolled back. So, if replaying the dump fails, you keep your existing\r\n// database.\r\n//\r\n// Q & A\r\n//\r\n// Q: do I need to modify this file if I make changes to our database schema\r\n// (like a database migration)?\r\n// A: you shouldn't need to. This code in this file is very smart at inspecting\r\n// the database it connects to, so if you create a new table, it will also\r\n// include that in future runs. If, however, you want to exclude your table\r\n// from being included in the dumps this file creates, you will have to add the\r\n// name of the table in the `additionalConstraints` object defined below in the\r\n// code.  If you give it a value of `false`, no data will be loaded for the\r\n// given table. Alternatively, you can load _some_ data by specifying a\r\n// constraint (like in a WHERE clause). For example, we don't copy all the data\r\n// from the very big `events` table, but only the last 3 days of data (as per\r\n// the `serverTimestamp` column). If you want similar treatment of your new\r\n// table, add a constraint there.\r\n//\r\n// Q: is there anything at all I need to keep in mind when I write database\r\n// migrations, with regards to these partial database dumps?\r\n// A: always declare your foreign key relationships! There are many reasons to\r\n// do this, and this file adds one more. The code in here inspects declared\r\n// foreign key relationships to figure out what data belongs to orgs other than\r\n// our own org. If you don't declare foreign keys, this script might include\r\n// data it shouldn't.\r\n//\r\n// Q: I'm working on something that includes a database migration. During\r\n// development, I applied my new migration, but I have changed it since. I\r\n// forgot to run `npm run migrate-down` before I made changes, so I'm not even\r\n// quite sure what exact state my database is in. Anyway, I'd quite like to\r\n// get back to a known state, from which I can apply my migration again. Can\r\n// a partial database dump from this code help me?\r\n// A: yeah sure, just run the procedure described at the top. Bootstrapping your\r\n// local database from prod means that you have the exact same database schema\r\n// that prod has right now. That won't have your migration in it at all. So\r\n// you can just run `npm run migrate` afterwards to have your work-in-progress\r\n// migratation applied.\r\n//\r\n// Q: when bootstrapping my local database from prod, will my local database\r\n// look like the one in prod, or like the `migrations` folder of my local\r\n// checkout.\r\n// A: strictly the former. This code gets all information from the database it\r\n// connects to, and no information from checked-in database migrations or your\r\n// local checkout.\r\n\r\nimport * as child_process from 'child_process';\r\nimport Pg from 'pg';\r\nimport { to as copyTo } from 'pg-copy-streams';\r\n\r\nimport {\r\n  CORD_CUSTOMER_ID,\r\n  CORD_PLATFORM_ORG_ID,\r\n  CORD_SDK_TEST_ORG_ID,\r\n  RADICAL_ORG_ID,\r\n  RADICAL_TEST_ORG_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { DatabaseConfig } from 'server/src/util/readReplicaDatabase.ts';\r\n\r\nconst { escapeLiteral, escapeIdentifier } = Pg.Client.prototype;\r\n\r\n// Add ids of orgs here that you want to have included in the partial dumps.\r\nconst includedOrgIDs = [\r\n  RADICAL_ORG_ID,\r\n  RADICAL_TEST_ORG_ID,\r\n  CORD_PLATFORM_ORG_ID,\r\n  CORD_SDK_TEST_ORG_ID,\r\n  '084f65aa-5de9-48af-a297-32a17c7fd6f4', // clack_all (public channels),\r\n  '644c0620-4799-4469-a202-eb092f76181b', // clack_utility_users (users needed for Clack to work)\r\n];\r\nconst orgIDsLiteral = `(${includedOrgIDs.map(escapeLiteral).join(',')})`;\r\n\r\n// Additional constraints.\r\n// Some tables are very big and the data in them not very important. Let's\r\n// get _some_ data, but not all.\r\n// If a table is set to `false`, no data is copied at all.\r\nconst additionalConstraints: Record<\r\n  string,\r\n  ((alias: string) => string) | false | undefined\r\n> = {\r\n  // This script was written pre-SDK and so uses the org as the basis of what\r\n  // information to include, \"down\" from there. Since the application is \"above\"\r\n  // that in the heirarchy, we should quickly limit ourselves to just our own\r\n  // customer ID. Someday we should rewrite this script to go \"down\" from\r\n  // certain app IDs, but this is good enough for now.\r\n  applications: (alias) => `${alias}.\"customerID\" = '${CORD_CUSTOMER_ID}'`,\r\n  console_users: (alias) => `${alias}.\"customerID\" = '${CORD_CUSTOMER_ID}'`,\r\n\r\n  // The `users` table does not contain a foreign key. What we want is include\r\n  // only those users that are referenced by a profile in the org_members table\r\n  // in our org.\r\n  users: (alias) =>\r\n    `${alias}.id IN (\r\n      SELECT DISTINCT \"userID\" FROM \"org_members\"\r\n      WHERE \"orgID\" IN ${orgIDsLiteral}\r\n    )`,\r\n\r\n  // Contains customer secrets for their s3_buckets, don't include\r\n  s3_buckets: false,\r\n\r\n  // Big tables that we don't need.\r\n  events: false,\r\n  application_usage_metrics: false,\r\n  sessions: false,\r\n};\r\n\r\nexport function streamPartialDump(\r\n  output: NodeJS.WritableStream,\r\n  dbconfig: DatabaseConfig,\r\n) {\r\n  return beginDump(dbconfig, output, (pg) => streamPartialDumpImpl(output, pg));\r\n}\r\n\r\nexport async function beginDump<T>(\r\n  dbconfig: DatabaseConfig,\r\n  output: NodeJS.WritableStream,\r\n  func: (pg: Pg.Client) => Promise<T>,\r\n) {\r\n  // Connect to the database\r\n  const pg = new Pg.Client(dbconfig);\r\n  await pg.connect();\r\n\r\n  try {\r\n    // This is the process environment we pass to the `pg_dump` command line tool.\r\n    const psqlClientEnv = {\r\n      ...process.env,\r\n      PGDATABASE: dbconfig.database,\r\n      PGHOST: dbconfig.host,\r\n      PGPORT: dbconfig.port?.toString(),\r\n      PGUSER: dbconfig.user,\r\n      PGPASSWORD: dbconfig.password,\r\n    };\r\n\r\n    // Make sure all commands see the contents of both the `cord` and the `public`\r\n    // schema\r\n    await pg.query('SET search_path=cord,public;');\r\n\r\n    // Start a read-only transaction. The specific type of transaction is one\r\n    // suited for long-running backup operations, like this one.\r\n    // From `https://www.postgresql.org/docs/12/sql-set-transaction.html`:\r\n    // > The DEFERRABLE transaction property has no effect unless the transaction\r\n    // > is also SERIALIZABLE and READ ONLY. When all three of these properties\r\n    // > are selected for a transaction, the transaction may block when first\r\n    // > acquiring its snapshot, after which it is able to run without the normal\r\n    // > overhead of a SERIALIZABLE transaction and without any risk of\r\n    // > contributing to or being canceled by a serialization failure. This mode\r\n    // > is well suited for long-running reports or backups.\r\n    //\r\n    // If we are configured to hit a read-only Aurora replica, it will not let us\r\n    // use SERIALIZABLE transactions. Being connected to a read-only endpoint, we\r\n    // don't need to worry about serialization failures, so a REPEATABLE READ\r\n    // transaction is fine.\r\n    await pg\r\n      .query(\r\n        'BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE;',\r\n      )\r\n      .catch((error) => {\r\n        if (\r\n          error.toString() ===\r\n          'error: cannot use serializable mode in a hot standby'\r\n        ) {\r\n          return pg.query(\r\n            'BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ READ ONLY;',\r\n          );\r\n        } else {\r\n          return Promise.reject(error);\r\n        }\r\n      });\r\n\r\n    // Get the id of the snapshot we're working on, so we can pass it to pg_dump\r\n    // below. This means that pg_dump will work like if it was executed within\r\n    // this transaction. So its output will be guaranteed to be perfectly\r\n    // consistent with all the data we extract from the database.\r\n    const snapshotId = (await pg.query('SELECT pg_export_snapshot() AS id;'))\r\n      .rows[0].id;\r\n\r\n    // First start a transaction.\r\n    let preData = 'BEGIN;\\n\\n';\r\n    // Remove the whole `cord` schema, if it exists. This will wipe all Cord\r\n    // tables, types, functions etc. and all Cord data from the database in which\r\n    // this file will be executed.\r\n    preData += 'DROP SCHEMA IF EXISTS cord CASCADE;\\n';\r\n\r\n    // This gets us all the Postgresql statements to create tables, functions,\r\n    // data types etc. Everything we need to have before we can insert data.\r\n    preData += await spawn(\r\n      'pg_dump',\r\n      [\r\n        `--snapshot=${snapshotId}`,\r\n        '--section=pre-data',\r\n        '--no-owner',\r\n        '--no-acl',\r\n        '--schema=cord',\r\n      ],\r\n      psqlClientEnv,\r\n    );\r\n\r\n    // This gets us all the Postgresql statements to create indexes, add\r\n    // constraints on tables etc. Everything we need to do to have the complete\r\n    // database schema. Inserting data is easier before this has happened, so\r\n    // that's why we have separate preData and postData parts of the database\r\n    // schema.\r\n    let postData = await spawn(\r\n      'pg_dump',\r\n      [\r\n        `--snapshot=${snapshotId}`,\r\n        '--section=post-data',\r\n        '--no-owner',\r\n        '--no-acl',\r\n        '--schema=cord',\r\n      ],\r\n      psqlClientEnv,\r\n    );\r\n\r\n    // Make sure, the rest of the SQL file will look for tables in both `cord`\r\n    // and `public` schemas.\r\n    preData += '\\nSET search_path = cord, public;\\n';\r\n\r\n    // SequelizeMeta table\r\n    // * create the table if it doesn't exist\r\n    // * remove all rows from it\r\n    // * copy over all rows from the source database\r\n    preData += `\r\n      CREATE TABLE IF NOT EXISTS public.\"SequelizeMeta\" (\r\n          name character varying(255) NOT NULL\r\n      );\r\n      TRUNCATE public.\"SequelizeMeta\";`;\r\n\r\n    const migrationNames = (\r\n      await pg.query('SELECT name FROM public.\"SequelizeMeta\" ORDER BY name;')\r\n    ).rows.map((row) => row.name);\r\n    if (migrationNames.length) {\r\n      preData += `\r\n      INSERT INTO public.\"SequelizeMeta\" (name) VALUES ${migrationNames\r\n        .map((name) => `(${pg.escapeLiteral(name)})`)\r\n        .join(', ')};\\n\\n`;\r\n    }\r\n\r\n    // Just one more thing: in `migrations/20201019134849-pg-boss.js` we created\r\n    // one function in the \"public\" schema (`gen_random_uuid`). It is used by\r\n    // pgboss, and normally it would come from the `pgcrypto` extension. By\r\n    // providing this shim function, we got rid of the dependence on\r\n    // `pgcrypto`.  Our database schema dump only included the `cord` schema,\r\n    // so we still have to add that one function.\r\n    preData += `CREATE OR REPLACE FUNCTION public.gen_random_uuid()\r\n                RETURNS uuid AS 'SELECT uuid_generate_v4();' LANGUAGE SQL;\\n\\n`;\r\n\r\n    // If all of the above executed without an error, commit everything to the\r\n    // database!\r\n    postData += '\\n\\nCOMMIT;\\n';\r\n\r\n    output.write(preData);\r\n    const result = await func(pg);\r\n    output.write(postData);\r\n\r\n    return result;\r\n  } finally {\r\n    pg.end().catch(\r\n      anonymousLogger().exceptionLogger('pg.end() threw exception'),\r\n    );\r\n  }\r\n}\r\n\r\nasync function streamPartialDumpImpl(\r\n  output: NodeJS.WritableStream,\r\n  pg: Pg.Client,\r\n) {\r\n  // Get a list of tables in the cord schema. The `tables` map will contain\r\n  // values with fields `oid` (numerical identifier of the table), `name`,\r\n  // `columns` (list of column name strings). We also put an empty list of\r\n  // foreign keys in those objects (`fkeys`), which we will populate in the next\r\n  // step. And we copy over the `additionalConstraint` if there is one defined\r\n  // for this table at the top of this file.\r\n  const tables = new Map<number, Table>();\r\n  for (const row of (\r\n    await pg.query(`\r\n      WITH \"attributes\" AS (\r\n          SELECT\r\n              attrelid,\r\n              jsonb_agg(attname::text ORDER BY attnum) AS attributes\r\n          FROM pg_catalog.pg_attribute\r\n          WHERE attnum >= 1\r\n          AND NOT attisdropped\r\n          AND attgenerated != 's'\r\n          GROUP BY attrelid\r\n      )\r\n      SELECT\r\n          cls.oid::int4 AS oid,\r\n          cls.relname AS name,\r\n          COALESCE(attributes.attributes, '[]'::jsonb) AS columns\r\n      FROM pg_catalog.pg_class cls\r\n      LEFT OUTER JOIN attributes ON cls.oid = attributes.attrelid\r\n      WHERE relnamespace='cord'::regnamespace AND relkind='r';`)\r\n  ).rows) {\r\n    tables.set(row.oid, {\r\n      ...row,\r\n      fkeys: [],\r\n      additionalConstraint: additionalConstraints[row.name] ?? null,\r\n    });\r\n  }\r\n\r\n  // Get all foreign keys. For each declared foreign key relationship, we add\r\n  // one `ForeignKey` object to the `Table.fkeys` array, which contains the\r\n  // referenced table, the names of the columns containing the foreign key\r\n  // fields in this table, the corresponding column names in the referenced\r\n  // table, and also the comparison\r\n  // operator (typically `=`).\r\n  for (const row of (\r\n    await pg.query(`\r\n      SELECT\r\n          conrelid AS \"tableOid\",\r\n          confrelid AS \"referencedTableOid\",\r\n          array_to_json(ARRAY(\r\n              SELECT jsonb_build_object(\r\n                  'column', att.attname::text,\r\n                  'nullable', NOT att.attnotnull\r\n                )\r\n              FROM unnest(conkey) k\r\n              LEFT OUTER JOIN pg_catalog.pg_attribute att\r\n              ON att.attnum=k AND att.attrelid=conrelid\r\n          )) AS fkey,\r\n          ARRAY(\r\n              SELECT att.attname::text\r\n              FROM unnest(confkey) k\r\n              LEFT OUTER JOIN pg_catalog.pg_attribute att\r\n              ON att.attnum=k AND att.attrelid=confrelid\r\n          ) AS rkey,\r\n          ARRAY(\r\n              SELECT opr.oprname::text\r\n              FROM unnest(conpfeqop) k\r\n              LEFT OUTER JOIN pg_catalog.pg_operator opr ON opr.oid=k\r\n          ) AS ops\r\n          FROM pg_catalog.pg_constraint WHERE contype='f';`)\r\n  ).rows) {\r\n    const table = tables.get(row.tableOid);\r\n    const referencedTable = tables.get(row.referencedTableOid);\r\n    if (table && referencedTable) {\r\n      const keys = (\r\n        row.fkey as Array<{\r\n          column: string;\r\n          nullable: boolean;\r\n        }>\r\n      ).map(({ column, nullable }, idx) => ({\r\n        column,\r\n        nullable,\r\n        referencedColumn: row.rkey[idx] as string,\r\n        operator: row.ops[idx] as string,\r\n      }));\r\n      if (keys.length) {\r\n        const nullable =\r\n          keys.some(({ nullable: keyIsNullable }) => keyIsNullable) &&\r\n          // HACK: the notifications table has complex checks that this script\r\n          // doesn't understand to know what rows to pull. However, those checks\r\n          // more-or-less have the property that if an fkey column is non-null,\r\n          // it needs to remain non-null, so we can just treat all of the notif\r\n          // table's fkeys as non-nullable.\r\n          table.name !== 'notifications';\r\n\r\n        table.fkeys.push({\r\n          referencedTable,\r\n          nullable,\r\n          keys,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Now copy the table data!\r\n  for (const table of tables.values()) {\r\n    await dumpTable(output, pg, table);\r\n  }\r\n\r\n  // We don't need the database anymore. Close the transaction.\r\n  await pg.query('ROLLBACK');\r\n\r\n  // When foreign key columns are nullable, we don't restrict the rows of a\r\n  // table to those that reference rows that are also copied. Instead we now set\r\n  // those columns to NULL for rows that reference foreign rows we did not copy.\r\n  for (const table of tables.values()) {\r\n    for (const fkey of table.fkeys) {\r\n      if (fkey.nullable) {\r\n        output.write(\r\n          `\\\\echo Fixing dangling foreign keys in ${table.name} (${fkey.keys\r\n            .map(({ column }) => column)\r\n            .join(', ')})\\n`,\r\n        );\r\n        output.write(`UPDATE ${escapeIdentifier(table.name)} AS _t SET `);\r\n        output.write(\r\n          fkey.keys\r\n            .filter(({ nullable }) => nullable)\r\n            .map(({ column }) => `${escapeIdentifier(column)}=NULL`)\r\n            .join(', '),\r\n        );\r\n        output.write(` WHERE NOT (${foreignKeyNullCheck('_t', fkey.keys)})`);\r\n        output.write(\r\n          ` AND (${fkey.keys\r\n            .map(({ column }) => `_t.${escapeIdentifier(column)}`)\r\n            .join(', ')}) NOT IN (SELECT ${fkey.keys\r\n            .map(({ referencedColumn }) => escapeIdentifier(referencedColumn))\r\n            .join(', ')} FROM ${escapeIdentifier(\r\n            fkey.referencedTable.name,\r\n          )});\\n`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // Our work is done.\r\n}\r\n\r\ntype Table = {\r\n  oid: number;\r\n  name: string;\r\n  columns: string[];\r\n  fkeys: ForeignKey[];\r\n  additionalConstraint: ((alias: string) => string) | false | null;\r\n};\r\ntype ForeignKey = {\r\n  referencedTable: Table;\r\n  keys: ForeignKeyColumn[];\r\n  nullable: boolean;\r\n};\r\ntype ForeignKeyColumn = {\r\n  column: string;\r\n  nullable: boolean;\r\n  referencedColumn: string;\r\n  operator: string;\r\n};\r\n\r\nlet serial = 0;\r\nasync function dumpTable(\r\n  output: NodeJS.WritableStream,\r\n  pg: Pg.Client,\r\n  table: Table,\r\n) {\r\n  const alias = `t_${serial++}`;\r\n  const { joins, where } = resolveForeignKeys(table, alias, []);\r\n\r\n  const query = `SELECT\r\n     ${table.columns.map((n) => `${alias}.${escapeIdentifier(n)}`).join(', ')}\r\n     FROM ${escapeIdentifier(table.name)} ${alias}\r\n     ${joins.join('\\n')}\r\n     ${where ? 'WHERE ' : ''}${where}`;\r\n\r\n  output.write(\r\n    `\\\\echo Loading data into table ${table.name}...\r\n-- ${query.replace(/\\n/g, '\\n-- ')};\r\n     \\n\\nCOPY ${escapeIdentifier(table.name)} (${table.columns\r\n       .map(escapeIdentifier)\r\n       .join(', ')}) FROM stdin;\\n`,\r\n  );\r\n\r\n  await dumpData(pg, query, output);\r\n\r\n  output.write('\\\\.\\n\\n\\n');\r\n}\r\n\r\nfunction resolveForeignKeys(\r\n  table: Table,\r\n  alias: string,\r\n  visitedTables: Table[],\r\n): { joins: string[]; where: string } {\r\n  if (table.additionalConstraint === false) {\r\n    return { joins: [], where: 'FALSE' };\r\n  }\r\n\r\n  if (table.name === 'orgs') {\r\n    const where = `${alias}.id IN ${orgIDsLiteral}`;\r\n    return { joins: [], where };\r\n  }\r\n\r\n  if (visitedTables.includes(table)) {\r\n    console.warn(\r\n      `Foreign keys self-join: ${visitedTables\r\n        .map((t) => t.name)\r\n        .join(', ')} => ${table.name}`,\r\n    );\r\n    return { where: '', joins: [] };\r\n  }\r\n  visitedTables = [...visitedTables, table];\r\n\r\n  const where: string[] = [];\r\n  const joins: string[] = [];\r\n\r\n  if (table.additionalConstraint) {\r\n    // The user activity table is very big. As an additional condition, only\r\n    // copy over rows from the last 14 days.\r\n    where.push(`(${table.additionalConstraint(alias)})`);\r\n  }\r\n\r\n  for (const { referencedTable, keys } of table.fkeys.filter(\r\n    ({ nullable }) => !nullable,\r\n  )) {\r\n    if (\r\n      referencedTable.name === 'orgs' &&\r\n      keys.length === 1 &&\r\n      keys[0].referencedColumn === 'id'\r\n    ) {\r\n      // If the foreign key references `orgs.id`, we don't have to do the join\r\n      // at all, we can check the foreign key itself.\r\n      where.push(\r\n        `(\r\n          ${alias}.${escapeIdentifier(keys[0].column)} IS NULL OR\r\n          ${alias}.${escapeIdentifier(keys[0].column)} IN ${orgIDsLiteral})`,\r\n      );\r\n    } else if (referencedTable.additionalConstraint !== false) {\r\n      const referencedAlias = `j_${serial++}`;\r\n      const { where: fwhere, joins: fjoins } = resolveForeignKeys(\r\n        referencedTable,\r\n        referencedAlias,\r\n        visitedTables,\r\n      );\r\n      if (fwhere) {\r\n        joins.push(`LEFT OUTER JOIN ${escapeIdentifier(\r\n          referencedTable.name,\r\n        )} ${referencedAlias}\r\n    ON (${keys\r\n      .map(\r\n        ({ column, referencedColumn, operator }) =>\r\n          `${alias}.${escapeIdentifier(\r\n            column,\r\n          )} ${operator} ${referencedAlias}.${escapeIdentifier(\r\n            referencedColumn,\r\n          )}`,\r\n      )\r\n      .join(' AND ')})`);\r\n        joins.push(...fjoins);\r\n\r\n        where.push(`(${foreignKeyNullCheck(alias, keys)} OR (${fwhere}))`);\r\n      }\r\n    } else {\r\n      where.push(foreignKeyNullCheck(alias, keys));\r\n    }\r\n  }\r\n\r\n  return { where: where.join(' AND '), joins };\r\n}\r\n\r\nfunction foreignKeyNullCheck(alias: string, keys: ForeignKeyColumn[]) {\r\n  return keys.length === 0\r\n    ? 'FALSE'\r\n    : keys.length === 1\r\n    ? `${alias}.${escapeIdentifier(keys[0].column)} IS NULL`\r\n    : 'num_nulls(' +\r\n      keys\r\n        .map(({ column }) => `${alias}.${escapeIdentifier(column)}`)\r\n        .join(', ') +\r\n      ') > 0';\r\n}\r\n\r\nfunction dumpData(pg: Pg.Client, query: string, output: NodeJS.WritableStream) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const stream = pg.query(copyTo(`COPY (${query}) TO STDOUT;`));\r\n    //stream.pipe(output);\r\n    stream.on('end', resolve);\r\n    stream.on('error', reject);\r\n    stream.on('data', (chunk) => output.write(chunk));\r\n  });\r\n}\r\n\r\nfunction spawn(\r\n  command: string,\r\n  args: string[],\r\n  env: typeof process.env,\r\n): Promise<string> {\r\n  return new Promise<string>((resolve, reject) => {\r\n    const proc = child_process.spawn(command, args, {\r\n      stdio: ['ignore', 'pipe', 'inherit'],\r\n      env,\r\n    });\r\n    let stdout = '';\r\n\r\n    proc.on('error', reject);\r\n    proc.on('exit', (code) => {\r\n      if (code === 0) {\r\n        resolve(stdout);\r\n      } else {\r\n        reject(new Error(`Child process exited with status ${code}`));\r\n      }\r\n    });\r\n    proc.stdout.on('data', (data) => {\r\n      stdout += data;\r\n    });\r\n  });\r\n}\r\n", "// This is for important URLs to all kinds of services\r\n\r\nexport const TOP_SERVER_HOST = process.env.TOP_SERVER_HOST!;\r\nexport const APP_SERVER_HOST = process.env.APP_SERVER_HOST!;\r\nexport const API_SERVER_HOST = process.env.API_SERVER_HOST!;\r\nexport const API_SERVER_HOST_PRODUCTION =\r\n  process.env.API_SERVER_HOST_PRODUCTION!;\r\nexport const ADMIN_SERVER_HOST = process.env.ADMIN_SERVER_HOST!;\r\nexport const CONSOLE_SERVER_HOST = process.env.CONSOLE_SERVER_HOST!;\r\nexport const MARKETING_SERVER_HOST = process.env.MARKETING_SERVER_HOST!;\r\nexport const CORD_TO_HOST = process.env.CORD_TO_HOST!;\r\nexport const AUTH0_CUSTOM_LOGIN_DOMAIN = process.env.AUTH0_CUSTOM_LOGIN_DOMAIN!;\r\nexport const DOCS_SERVER_HOST = process.env.DOCS_SERVER_HOST!;\r\nexport const SLACK_APP_REDIRECT_HOST = process.env.SLACK_APP_REDIRECT_HOST;\r\n\r\nexport const TOP_ORIGIN = 'https://' + process.env.TOP_SERVER_HOST;\r\nexport const APP_ORIGIN = 'https://' + process.env.APP_SERVER_HOST;\r\nexport const API_ORIGIN = 'https://' + process.env.API_SERVER_HOST;\r\nexport const ADMIN_ORIGIN = 'https://' + process.env.ADMIN_SERVER_HOST;\r\nexport const CONSOLE_ORIGIN = 'https://' + process.env.CONSOLE_SERVER_HOST;\r\nexport const MARKETING_ORIGIN = 'https://' + process.env.MARKETING_SERVER_HOST;\r\nexport const CORD_TO_ORIGIN = 'https://' + process.env.CORD_TO_HOST;\r\nexport const AUTH0_ORIGIN = 'https://' + process.env.AUTH0_CUSTOM_LOGIN_DOMAIN;\r\nexport const DOCS_ORIGIN = 'https://' + process.env.DOCS_SERVER_HOST;\r\nexport const DOCS_AI_CHATBOT_SERVER_HOST =\r\n  process.env.DOCS_AI_CHATBOT_SERVER_HOST;\r\nexport const COMMUNITY_ORIGIN = 'https://' + process.env.COMMUNITY_SERVER_HOST;\r\n\r\n// See https://github.com/getcord/interactive-demos\r\nexport const DEMO_APPS_WEBHOOK_URL =\r\n  'https://cord-interactive-demos.vercel.app/events';\r\n", "import { DOCS_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nexport const SUPPORT_USER_UUID = 'c9a61e1d-7c8a-4c7e-838a-9d431cf4ed77';\r\nexport const RADICAL_ORG_ID = '6bba8678-b14e-4af7-b2f2-05ee807dfa82';\r\nexport const RADICAL_TEST_ORG_ID = '3689f86d-0c70-40de-a2f0-a4a9ea4994e3';\r\nexport const CORD_PLATFORM_ORG_ID = '746c0b57-7363-4766-9ee9-7ae8ec7531a8';\r\nexport const CORD_ADMIN_PLATFORM_ORG_ID =\r\n  '84ae9086-8414-4ed3-ab73-096e6438f095';\r\nexport const CORD_SDK_TEST_ORG_ID = 'edda098d-6db7-4202-a5ac-ff3293b78c47';\r\nexport const GILLIAN_TEST_SLACK_ORG_ID = 'f7ab9ab8-f5b2-41a4-a419-1b8076626d3f';\r\nexport const KAT_TEST_SLACK_ORG_ID = '4506fadd-f8dc-4795-9b5d-d28feda39d84';\r\nexport const CORD_SLACK_TEAM_ID = 'T012Y0TBQLW'; // radicalhqworkspace\r\nexport const CORD_TEST_SLACK_TEAM_ID = 'T015UJY6YQK'; // radicaltestorg\r\n\r\nexport const SLACK_APP_CLIENT_ID = '1100027398710.1180115520790';\r\nexport const SLACK_APP_ID = 'A015A3DFAP8';\r\nexport const SLACK_DEV_APP_CLIENT_ID = '1198644236835.1943446227956';\r\nexport const SLACK_ADMIN_LOGIN_APP_CLIENT_ID = '1100027398710.2437628320357';\r\nexport const SLACK_ADMIN_LOGIN_APP_ID = 'A02CVJG9EAH';\r\nexport const SLACK_DEV_APP_ID = 'A01TRD46PU4';\r\nexport const SLACK_INTERNAL_TOOLS_APP_ID = 'A04JKM945CM';\r\nexport const CORD_UPDATES_TEST_CHANNEL_ID = 'C0547K3V868';\r\n\r\n// As opposed to e.g. a customer's Slack app\r\nexport const CORD_SLACK_APP_IDS = [\r\n  SLACK_APP_ID,\r\n  SLACK_DEV_APP_ID,\r\n  SLACK_ADMIN_LOGIN_APP_ID,\r\n  SLACK_INTERNAL_TOOLS_APP_ID,\r\n];\r\n\r\nexport const CORD_APPLICATION_ID = '5a076ee9-8b9e-4156-9ac4-871bdc4569ec';\r\nexport const CORD_SDK_TEST_APPLICATION_ID =\r\n  'b6501bf5-46f7-4db7-9996-c42dd9f758b0';\r\nexport const CORD_SAMPLE_TOKEN_CUSTOMER_ID =\r\n  '1c367aca-37c9-4733-8bef-e9f11a7d0f17';\r\nexport const CORD_DEMO_APPS_TOKEN_CUSTOMER_ID =\r\n  '4383cf39-8b6a-4c33-9d8a-71567ed47a60';\r\nexport const CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID =\r\n  'aeb2797f-f0a3-485c-a317-4986e2c8343b';\r\nexport const CORD_AUTOMATED_TESTS_APPLICATION_ID =\r\n  'dfa86152-9e7e-4d2d-acd6-bfddef71f58e';\r\nexport const CLACK_APPLICATION_ID = '5fa22ba9-5446-4af8-bc93-7ce54a9aa0ba';\r\nexport const CORD_HOMEPAGE_APPLICATION_ID =\r\n  '29e6499a-bbed-4eb2-b057-b36d60ad76c9';\r\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID!;\r\n\r\nexport const CORD_CUSTOMER_ID = '12ed6251-28d5-4686-9a75-20a15bd31499';\r\n\r\nexport const CSS_CUSTOMIZATION_ON_DOCS_PREFIX = 'css-customization-';\r\nexport const BETA_V2_DOCS_PREFIX = 'beta2-';\r\nexport const LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX = 'live-css-docs-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX =\r\n  'live-component-docs-thread-';\r\nexport const LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-thread-';\r\nexport const LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-launcher-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX =\r\n  'live-component-docs-composer-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-content-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_PIN_THREAD_ID_PREFIX =\r\n  'live-component-docs-pin-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX =\r\n  'live-component-docs-reactions-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX =\r\n  'live-component-docs-external-notification-';\r\nexport const LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX =\r\n  'live-customization-docs-replacements-thread-';\r\nexport const DOCS_TOKEN_KEY = 'docs-token';\r\n\r\nexport const LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID = 'noavatar';\r\n\r\nexport const DOCS_LIVE_PAGE_LOCATIONS = {\r\n  cssCustomization: 'css-customization',\r\n  liveCss: 'live-css-docs',\r\n  liveThread: 'live-thread',\r\n  liveThreadList: 'live-thread-list',\r\n  livePin: 'live-pin',\r\n  livePinChartExample: 'live-pin-chart-example',\r\n  liveFloatingThreads: 'live-floating-threads',\r\n  liveSelectionComments: 'live-selection-comments',\r\n  liveSidebar: 'live-sidebar',\r\n  liveInbox: 'live-inbox',\r\n  liveInboxLauncher: 'live-inbox-launcher',\r\n  liveSidebarLauncher: 'live-sidebar-launcher',\r\n  livePagePresence: 'live-page-presence',\r\n  livePresenceFacepile: 'live-presence-facepile',\r\n  liveComposer: 'live-composer',\r\n  liveMessage: 'live-message',\r\n  liveMessageContent: 'live-message-content',\r\n  liveNotificationList: 'live-notification-list',\r\n  liveThreadedComments: 'live-threaded-comments',\r\n  liveReactions: 'live-reactions',\r\n  liveReplacementsTutorial: 'live-replacements-tutorial',\r\n  liveBetaV2Thread: 'live-beta-v2-thread',\r\n  liveBetaV2Threads: 'live-beta-v2-threads',\r\n};\r\n\r\nexport const CORD_DOCS_CLIENT_TOKEN = '__cord_docs_token__';\r\n\r\nexport const DOCS_URLS = {\r\n  tutorials: {\r\n    getProductionReady: {\r\n      addYourBranding: `${DOCS_ORIGIN}/get-started/live-css-editor`,\r\n    },\r\n    integrationGuide: `${DOCS_ORIGIN}/get-started/integration-guide`,\r\n    demoApps: `${DOCS_ORIGIN}/get-started/demo-apps`,\r\n  },\r\n  components: {\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread`,\r\n    threadList: `${DOCS_ORIGIN}/components/cord-thread-list`,\r\n    threadedComments: `${DOCS_ORIGIN}/components/cord-threaded-comments`,\r\n    sidebar: `${DOCS_ORIGIN}/components/cord-sidebar`,\r\n    inbox: `${DOCS_ORIGIN}/components/cord-inbox`,\r\n    inboxLauncher: `${DOCS_ORIGIN}/components/cord-inbox-launcher`,\r\n    sidebarLauncher: `${DOCS_ORIGIN}/components/cord-sidebar-launcher`,\r\n    composer: `${DOCS_ORIGIN}/components/cord-composer`,\r\n    message: `${DOCS_ORIGIN}/components/cord-message`,\r\n    messageContent: `${DOCS_ORIGIN}/components/cord-message-content`,\r\n    reactions: `${DOCS_ORIGIN}/components/cord-reactions`,\r\n  },\r\n  howTo: {\r\n    customThreadedComments: `${DOCS_ORIGIN}/customization/custom-threaded-comments`,\r\n    cssCustomization: `${DOCS_ORIGIN}/customization/css`,\r\n    replacements: `${DOCS_ORIGIN}/customization/custom-react-components/tutorial`,\r\n  },\r\n  getStarted: {\r\n    authenticateYourUser: `${DOCS_ORIGIN}/get-started/integration-guide/generate-an-auth-token`,\r\n  },\r\n  betaV2Components: {\r\n    threads: `${DOCS_ORIGIN}/components/cord-threads?version=2.0`,\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread?version=2.0`,\r\n  },\r\n};\r\n\r\nexport const CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID = 'C05FAVBSSN7';\r\nexport const CORD_SELF_SERVE_SLACK_CHANNEL_ID = 'C05GR4WSV5Z';\r\n\r\n// Tokens created for the sample token and demo apps environment types both\r\n// create groups with this id.  Both of them need to use the same groupID because\r\n// it is hardcoded into the demo apps client code, and while the demo apps mostly\r\n// use the demo apps environment apps, they sometimes use sample app tokens.\r\nexport const DEMO_APPS_APP_GROUP_ID = 'my-first-group';\r\n", "import { hostname, userInfo } from 'os';\r\nimport { serializeError } from 'serialize-error';\r\nimport winston from 'winston';\r\nimport WinstonCloudWatch from 'winston-cloudwatch';\r\nimport Transport from 'winston-transport';\r\nimport * as Sentry from '@sentry/node';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport '@sentry/tracing';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { flatFormat } from 'server/src/logging/flatFormat.ts';\r\nimport packageData from 'package.json';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { JsonObject } from 'common/types/index.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker') and\r\n// `BUILDCONSTANTS.sentryDSN` with either `undefined` or a string value for a\r\n// Sentry DSN\r\ndeclare const BUILDCONSTANTS: {\r\n  loggingProcessName: string;\r\n  sentryDSN: undefined | string;\r\n};\r\n\r\n// The loglevel for the console output can be specified using the environment\r\n// variable `LOGLEVEL`\r\nconst logLevel = env.LOGLEVEL;\r\n\r\nconst defaultMeta: any = {\r\n  process: BUILDCONSTANTS.loggingProcessName,\r\n  serverVersion: packageData.version,\r\n  serverGitCommit: process.env.COMMIT_HASH || process.env.npm_package_gitHead,\r\n  serverHost: hostname(),\r\n};\r\n\r\nif (process.env.CORD_WORKER_NAME) {\r\n  defaultMeta.workerName = process.env.CORD_WORKER_NAME;\r\n}\r\n\r\n// Sentry logging\r\nconst sentryLogging = !!(BUILDCONSTANTS.sentryDSN && env.SENTRY_ENVIRONMENT);\r\nif (sentryLogging) {\r\n  Sentry.init({\r\n    dsn: BUILDCONSTANTS.sentryDSN,\r\n    environment: env.SENTRY_ENVIRONMENT,\r\n    release: env.SENTRY_RELEASE,\r\n    tracesSampleRate: parseFloat(env.SENTRY_TRACE_SAMPLE_RATE ?? '0'),\r\n    attachStacktrace: true,\r\n    normalizeDepth: 10,\r\n  });\r\n}\r\n\r\n// Winston logging\r\nconst winstonLogger = winston.createLogger({ defaultMeta });\r\n\r\nwinstonLogger.add(\r\n  new winston.transports.Console({\r\n    level: logLevel,\r\n    format: winston.format.combine(winston.format.timestamp(), flatFormat()),\r\n    handleExceptions: true,\r\n  }),\r\n);\r\n\r\n// Keep track of logging in a Prometheus metric. The cleanest way to do this is\r\n// by adding a separate transport, because that allows us to set the loglevel\r\n// for this independently. No matter what `env.LOGLEVEL` is set to, the\r\n// Prometheus metric keeps track of *all* log messages, even the 'silly' ones.\r\n// ('silly' is the name of the lowest loglevel in Prometheus.)\r\nconst counter = Counter({\r\n  name: 'ServerLogging',\r\n  help: 'Number of log messages emitted by server',\r\n  labelNames: ['level'],\r\n});\r\n\r\nconst LEVEL = Symbol.for('level');\r\nclass MetricLogger extends Transport {\r\n  log(info: any, next: () => void) {\r\n    counter.inc({ level: info[LEVEL] });\r\n    next();\r\n  }\r\n}\r\n\r\nexport type LoggingTags = { [tag: string]: number | string | boolean };\r\n\r\nwinstonLogger.add(new MetricLogger({ level: 'silly' }));\r\n\r\n// CloudWatch logging is configured via the environment\r\nlet winstonCW: WinstonCloudWatch | undefined = undefined;\r\nif (env.CLOUDWATCH_LOGLEVEL && !process.env.IS_TEST) {\r\n  if (!env.CLOUDWATCH_LOG_GROUP_NAME) {\r\n    throw new Error(\r\n      `CloudWatch logging is enabled (CLOUDWATCH_LOGLEVEL is set), so\r\n       CLOUDWATCH_LOG_GROUP_NAME must be provided, too!`,\r\n    );\r\n  }\r\n\r\n  // CloudWatch stream names must not contain ':' or '*' characters\r\n  const defaultStreamName = () =>\r\n    `${new Date().toISOString().replace(/:/g, '.')} ${\r\n      userInfo().username\r\n    } ${hostname()}(${process.pid})`;\r\n\r\n  winstonCW = new WinstonCloudWatch({\r\n    // \"name\" is optional with default value \"CloudWatch\" but the\r\n    // typedefinition has name as required. See\r\n    // https://githubmemory.com/repo/lazywithclass/winston-cloudwatch/issues/155\r\n    name: 'CloudWatch',\r\n    level: env.CLOUDWATCH_LOGLEVEL,\r\n    logGroupName: env.CLOUDWATCH_LOG_GROUP_NAME,\r\n    logStreamName: env.CLOUDWATCH_LOG_STREAM_NAME || defaultStreamName(),\r\n    awsRegion: env.CLOUDWATCH_AWS_REGION,\r\n    jsonMessage: true,\r\n  });\r\n  winstonLogger.add(winstonCW);\r\n} else {\r\n  if (env.CLOUDWATCH_LOG_GROUP_NAME || env.CLOUDWATCH_LOG_STREAM_NAME) {\r\n    throw new Error(\r\n      `Some CLOUDWATCH_* variables are set, but CLOUDWATCH_LOGLEVEL is not.`,\r\n    );\r\n  }\r\n}\r\n\r\nexport function flushAndCloseWinstonCloudWatch() {\r\n  if (winstonCW) {\r\n    return new Promise<void>((resolve, _reject) => {\r\n      winstonCW!.kthxbye((_err) => resolve());\r\n    });\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst SENTRY_LOG_LEVEL: Record<string, Sentry.SeverityLevel | undefined> = {\r\n  error: 'error',\r\n  warn: 'warning',\r\n};\r\n\r\nconst cleanupSequelizeError = (error: any) => {\r\n  // remove references to the instance object as they contain deep SQL information\r\n  // like db password, etc\r\n  const suberrors = error.errors;\r\n  if (Array.isArray(suberrors)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    suberrors.forEach((error) => delete error.instance);\r\n  }\r\n};\r\n\r\nconst MAX_ORG_IDS_TO_LOG = 50;\r\n\r\nexport class Logger {\r\n  private readonly truncatedViewer: Record<string, unknown>;\r\n  private readonly metadata: JsonObject;\r\n  private appName: string | undefined;\r\n\r\n  constructor(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    this.truncatedViewer = { ...viewer };\r\n    this.metadata = { ...defaultMeta, ...additionalMeta };\r\n\r\n    if (\r\n      viewer.relevantOrgIDs &&\r\n      viewer.relevantOrgIDs.length > MAX_ORG_IDS_TO_LOG\r\n    ) {\r\n      this.truncatedViewer.relevantOrgIDs = [\r\n        ...viewer.relevantOrgIDs.slice(0, MAX_ORG_IDS_TO_LOG),\r\n        `(truncated from ${viewer.relevantOrgIDs.length} orgs)`,\r\n      ];\r\n    }\r\n\r\n    void this.addAppName(viewer);\r\n  }\r\n\r\n  public childLogger(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    return new Logger(viewer, { ...this.metadata, ...additionalMeta });\r\n  }\r\n\r\n  private viewerToLog() {\r\n    return {\r\n      ...this.truncatedViewer,\r\n      ...(this.appName && { appName: this.appName }),\r\n    };\r\n  }\r\n\r\n  public log(\r\n    level: 'debug' | 'info' | 'warn' | 'error',\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    if (sentryLogging && !process.env.IS_TEST) {\r\n      const sentryLevel = SENTRY_LOG_LEVEL[level];\r\n      if (sentryLevel) {\r\n        const sentryEventID = Sentry.captureMessage(message, {\r\n          level: sentryLevel,\r\n          extra: { ...defaultMeta, ...meta },\r\n          tags: { loggingProcessName: BUILDCONSTANTS.loggingProcessName },\r\n          fingerprint: options?.sentryFingerPrint,\r\n          user: this.viewerToLog(),\r\n        });\r\n        meta = { ...this.metadata, ...meta, sentryEventID };\r\n      }\r\n    }\r\n\r\n    winstonLogger.log(level, message, {\r\n      viewer: this.viewerToLog(),\r\n      ...this.metadata,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  public debug(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('debug', message, meta, options);\r\n  }\r\n\r\n  public info(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('info', message, meta, options);\r\n  }\r\n\r\n  public warn(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('warn', message, meta, options);\r\n  }\r\n\r\n  public error(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('error', message, meta, options);\r\n  }\r\n\r\n  public logLoggerInfo() {\r\n    this.info(\r\n      `Logging through winston. Console log level set to \"${logLevel}\", CloudWatch logging is ${\r\n        env.CLOUDWATCH_LOGLEVEL === undefined\r\n          ? 'disabled'\r\n          : `set to \"${env.CLOUDWATCH_LOGLEVEL}\"`\r\n      }`,\r\n    );\r\n  }\r\n\r\n  /**\r\n  Useful when dealing with promises:\r\n\r\n  ```\r\n  promise.catch(exceptionLogger('something broke'))\r\n  ```\r\n*/\r\n  public exceptionLogger =\r\n    (message: string, meta?: JsonObject, tags?: LoggingTags) => (error: any) =>\r\n      this.logException(\r\n        message,\r\n        error,\r\n        { ...this.metadata, ...meta },\r\n        tags,\r\n        'error',\r\n      );\r\n\r\n  /**\r\n  To be used imperatively:\r\n\r\n  ```\r\n  try {\r\n    // ...\r\n  } catch (e) {\r\n    logException('something broke', e)\r\n  }\r\n  ```\r\n*/\r\n  public logException(\r\n    message: string,\r\n    error: any,\r\n    meta?: JsonObject,\r\n    tags?: LoggingTags,\r\n    level: 'debug' | 'info' | 'warn' | 'error' = 'error',\r\n  ) {\r\n    // Make a good effort to produce a nice error log message from the given\r\n    // `message`, `error` (and optionally `meta`), but make sure that those\r\n    // efforts don't sabotage the logging, i.e. if something throws on the way,\r\n    // catch the error and make sure _something_ gets logged.\r\n    if (error.name?.startsWith('Sequelize')) {\r\n      cleanupSequelizeError(error);\r\n    }\r\n\r\n    let serializedError: any = undefined;\r\n    try {\r\n      serializedError = serializeError(error, { maxDepth: 50 });\r\n    } catch (e) {\r\n      winstonLogger.log(\r\n        level,\r\n        `logException: serializeError threw an exception (${message})`,\r\n        {\r\n          error: `${error}`,\r\n          viewer: this.viewerToLog(),\r\n          ...this.metadata,\r\n          ...meta,\r\n        },\r\n      );\r\n    }\r\n\r\n    if (serializedError !== undefined) {\r\n      // If serializing the error above failed, we have already logged a simple\r\n      // error representation to Winston above.\r\n      if (!message) {\r\n        try {\r\n          message = `${serializedError.name}: ${serializedError.message}`;\r\n        } catch (e) {\r\n          message = `${serializedError}`;\r\n        }\r\n      }\r\n\r\n      winstonLogger.log(level, message, {\r\n        error: serializedError,\r\n        viewer: this.viewerToLog(),\r\n        ...this.metadata,\r\n        ...meta,\r\n      });\r\n    }\r\n\r\n    if ((level === 'warn' || level === 'error') && !process.env.IS_TEST) {\r\n      Sentry.withScope((scope) => {\r\n        scope.setTags({\r\n          ...(error instanceof CordError && error.loggingTags),\r\n          ...tags,\r\n        });\r\n        // serializedError is undefined, if serializing failed\r\n        if (serializedError && error instanceof CordError) {\r\n          // Remove these properties, they'll get attached under other names\r\n          delete serializedError.loggingMetadata;\r\n          delete serializedError.loggingTags;\r\n        }\r\n        scope.setExtra('error', serializedError);\r\n\r\n        scope.setExtra('message', message);\r\n        scope.setExtra('meta', {\r\n          ...this.metadata,\r\n          ...(error instanceof CordError && error.loggingMetadata),\r\n          ...meta,\r\n        });\r\n        scope.setExtra('user', this.viewerToLog());\r\n\r\n        // We hand the original error object to Sentry\r\n        Sentry.captureException(error, {\r\n          level: SENTRY_LOG_LEVEL[level],\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private async addAppName(viewer: Viewer) {\r\n    if (!viewer?.platformApplicationID) {\r\n      return;\r\n    }\r\n\r\n    const app = await ApplicationEntity.findByPk(viewer.platformApplicationID);\r\n    this.appName = app?.name;\r\n  }\r\n}\r\n\r\nlet _anonymousLogger: Logger | undefined = undefined;\r\nexport function anonymousLogger() {\r\n  if (_anonymousLogger === undefined) {\r\n    _anonymousLogger = new Logger(Viewer.createAnonymousViewer());\r\n  }\r\n  return _anonymousLogger;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  UUID,\r\n  CustomLinks,\r\n  CustomNUX,\r\n  ApplicationEnvironment,\r\n} from 'common/types/index.ts';\r\nimport { getTypedFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { FeatureFlags } from 'common/const/FeatureFlags.ts';\r\n\r\nexport type CustomEmailTemplate = {\r\n  partnerName: string;\r\n  imageURL: string;\r\n  sender?: string;\r\n  logoConfig?: { height: string; width: string };\r\n};\r\n\r\nexport type ApplicationTierType = 'free' | 'starter' | 'premium';\r\n\r\nexport type CustomSlackAppDetails = {\r\n  clientID: string;\r\n  clientSecret: string;\r\n  signingSecret: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'applications',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customEmailTemplate!: CustomEmailTemplate | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: true,\r\n  })\r\n  enableEmailNotifications!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customLinks!: CustomLinks | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customS3Bucket!: UUID | null; // the s3 bucket to be used for this application\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  segmentWriteKey!: string | null; // the Segment Write key we use to write partner events\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customNUX!: CustomNUX | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  iconURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'starter', 'premium'),\r\n    defaultValue: 'free',\r\n    allowNull: false,\r\n  })\r\n  type!: ApplicationTierType;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'production',\r\n      'staging',\r\n      'sample',\r\n      'sampletoken',\r\n      'demo',\r\n    ),\r\n    defaultValue: 'production',\r\n    allowNull: false,\r\n  })\r\n  environment!: ApplicationEnvironment;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportOrgID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportBotID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  supportSlackChannelID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  redirectURI!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  slackConnectAllOrgs!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookSubscriptions!: string[] | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppDetails!: CustomSlackAppDetails | null;\r\n\r\n  public async isSupportChatEnabled(): Promise<boolean> {\r\n    const isSupportFlagEnabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.SUPPORT_CHAT_ENABLED,\r\n      {\r\n        userID: 'anonymous',\r\n        orgID: undefined,\r\n        platformApplicationID: this.id,\r\n        version: null,\r\n        customerID: this.customerID,\r\n      },\r\n    );\r\n\r\n    return Boolean(\r\n      isSupportFlagEnabled &&\r\n        this.supportBotID &&\r\n        this.supportOrgID &&\r\n        this.supportSlackChannelID,\r\n    );\r\n  }\r\n\r\n  public getCustomSlackAppDetails(): CustomSlackAppDetails | null {\r\n    const details = this.customSlackAppDetails;\r\n\r\n    if (\r\n      details &&\r\n      typeof details === 'object' &&\r\n      !Array.isArray(details) &&\r\n      typeof details.clientID === 'string' &&\r\n      typeof details.clientSecret === 'string' &&\r\n      typeof details.signingSecret === 'string'\r\n    ) {\r\n      return {\r\n        clientID: details.clientID,\r\n        clientSecret: details.clientSecret,\r\n        signingSecret: details.signingSecret,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n", "import * as LaunchDarkly from '@launchdarkly/node-server-sdk';\r\nimport type {\r\n  ApplicationEnvironment,\r\n  SimpleValue,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { FeatureFlags as CommonFeatureFlags } from 'common/const/FeatureFlags.ts';\r\nimport type { FeatureFlag } from 'common/const/FeatureFlags.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n  DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n  DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n} from 'server/src/email/index.ts';\r\n\r\nlet client: LaunchDarkly.LDClient | undefined = undefined;\r\nlet clientReady = false;\r\n\r\n// ADD NEW FLAGS HERE IF THEY ARE ONLY USED SERVER-SIDE.\r\n// If the new flag is also going to be used client side (in external/)\r\n// then add your new flag in common/const/FeatureFlags.ts\r\n//\r\n// See more explanation on how to define in flags in:\r\n// common/const/FeatureFlags.ts\r\nconst ServerOnlyFeatureFlags = {\r\n  QUERY_PARAM_DEEP_LINKS: {\r\n    key: 'query_param_deep_links',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'query_param_deep_links', boolean>,\r\n  NOTIFY_PAGE_VISITORS_OF_EVERY_MESSAGE: {\r\n    key: 'notify_page_visitors_of_every_new_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'notify_page_visitors_of_every_new_message', boolean>,\r\n  USER_IS_BLOCKED: {\r\n    key: 'user_is_blocked',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'user_is_blocked', boolean>,\r\n  SHOW_CORD_COPY_IN_TASKS: {\r\n    key: 'show-cord-copy-in-tasks',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-cord-copy-in-tasks', boolean>,\r\n  LOADER_CACHES: {\r\n    key: 'loader_caches',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'loader_caches', boolean>,\r\n  SUBSCRIBE_ALL_ORG_MEMBERS: {\r\n    key: 'subscribe_all_org_members',\r\n    defaultValue: false,\r\n  },\r\n  WRITE_TO_EVENTS_TABLE: {\r\n    key: 'write_to_events_table',\r\n    defaultValue: true,\r\n  },\r\n  ALLOW_MAGIC_GRAPHQL_ORG_ID_OVERRIDE: {\r\n    key: 'allow-magic-graph-ql-org-id-override',\r\n    defaultValue: true,\r\n  },\r\n  GRANULAR_PERMISSIONS: {\r\n    key: 'granular-permissions',\r\n    defaultValue: false,\r\n  },\r\n  SKIP_PUBLISH_USER_IDENTITY_UPDATE: {\r\n    key: 'skip_publish_user_identity_update',\r\n    defaultValue: false,\r\n  },\r\n  RATE_LIMITS: {\r\n    key: 'rate_limits',\r\n    defaultValue: { maxCount: 50000, seconds: 5 * 60 },\r\n  },\r\n  EMAIL_NOTIFICATION_TEMPLATE_ID: {\r\n    key: 'email-notification-template-id',\r\n    defaultValue: {\r\n      mention: DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n      share_to_email: DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n      thread_resolve: DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n    },\r\n  },\r\n} as const;\r\n\r\nexport const FeatureFlags = {\r\n  ...CommonFeatureFlags,\r\n  ...ServerOnlyFeatureFlags,\r\n} as const satisfies {\r\n  [key: string]: FeatureFlag<string, SimpleValue | object>;\r\n};\r\n\r\ntype MockClient =\r\n  | undefined\r\n  | ((\r\n      key: string,\r\n      user: FlagsUser,\r\n    ) => Promise<boolean | string | number | null>);\r\n// This is used in our test environments\r\nlet mockClient: MockClient;\r\n\r\nexport async function initFeatureFlags() {\r\n  if (client) {\r\n    throw new Error('Feature flags already initialized');\r\n  }\r\n  if (!env.LAUNCHDARKLY_API_KEY) {\r\n    return;\r\n  }\r\n  client = LaunchDarkly.init(env.LAUNCHDARKLY_API_KEY);\r\n  await client.waitForInitialization();\r\n  clientReady = true;\r\n}\r\n\r\nexport function closeFeatureFlags() {\r\n  if (client) {\r\n    client.close();\r\n    client = undefined;\r\n    clientReady = false;\r\n  }\r\n}\r\n\r\nexport type FlagsUser = {\r\n  userID: UUID | 'anonymous';\r\n  orgID?: UUID;\r\n  platformApplicationID: UUID | 'extension' | 'console';\r\n  version: string | null;\r\n  customerID?: UUID;\r\n  appEnvironment?: ApplicationEnvironment;\r\n};\r\n\r\n/**\r\n * Prefer flagsUserFromContext if you have a full context, as it has more info\r\n * in it.\r\n */\r\nexport function flagsUserFromViewer(viewer: Viewer): FlagsUser {\r\n  return {\r\n    userID: viewer.userID ?? 'anonymous',\r\n    orgID: viewer.orgID,\r\n    platformApplicationID: viewer.platformApplicationID ?? 'extension',\r\n    version: null,\r\n  };\r\n}\r\n\r\nexport function flagsUserFromContext(context: RequestContext): FlagsUser {\r\n  return {\r\n    ...flagsUserFromViewer(context.session.viewer),\r\n    version: context.clientVersion,\r\n    customerID: context.application?.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * For the REST API etc where there isn't a user. Prefer one of the other\r\n * functions if there is a user.\r\n */\r\nexport function flagsUserFromApplication(app: ApplicationEntity): FlagsUser {\r\n  return {\r\n    userID: 'anonymous',\r\n    platformApplicationID: app.id,\r\n    version: null,\r\n    customerID: app.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the value of the given feature flag in LaunchDarkly for the given\r\n * user, or the default value if LaunchDarkly cannot be reached for any reason.\r\n */\r\nexport async function getTypedFeatureFlagValue<\r\n  K extends (typeof FeatureFlags)[keyof typeof FeatureFlags]['key'],\r\n  T,\r\n>(feature: FeatureFlag<K, T>, user: FlagsUser): Promise<T> {\r\n  const value = (await getFeatureFlagValue(feature.key, user)) as T | null;\r\n  return value === null ? feature.defaultValue : value;\r\n}\r\n\r\nexport async function getFeatureFlagValue(key: string, user: FlagsUser) {\r\n  // To allow us to mock feature flags for our tests\r\n  if (mockClient) {\r\n    return await mockClient(key, user);\r\n  }\r\n  if (!client || !clientReady) {\r\n    return null;\r\n  }\r\n  const versionValue = versionToNumber(user.version);\r\n  const ldUser = {\r\n    // The choice of delimiter here is restricted by LaunchDarkly's website\r\n    // currently being flaky for users with a key that contains characters that\r\n    // need to be percent-encoded, so we need to choose something that doesn't\r\n    // get encoded.\r\n    key: user.orgID ? `${user.userID}_${user.orgID}` : user.userID,\r\n    custom: {\r\n      userID: user.userID,\r\n      ...(user.orgID && { orgID: user.orgID }),\r\n      platformApplicationID: user.platformApplicationID,\r\n      ...(versionValue && { version: versionValue }),\r\n      ...(user.customerID && { customerID: user.customerID }),\r\n      ...(user.appEnvironment && { appEnvironment: user.appEnvironment }),\r\n    },\r\n  };\r\n  return await (client.variation(key, ldUser, null) as Promise<\r\n    boolean | string | number | null\r\n  >);\r\n}\r\n\r\nfunction versionToNumber(version: string | null): number | null {\r\n  if (!version) {\r\n    return null;\r\n  }\r\n  if (version.startsWith('dev-')) {\r\n    return -1;\r\n  }\r\n  const match = version.match(/^(\\d+)[.](\\d+)[.](\\d+)$/);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  return 100000 * (parseInt(match[1], 10) - 1) + parseInt(match[2], 10);\r\n}\r\n\r\nexport function initMockFeatureFlagForTest(fn: MockClient) {\r\n  mockClient = fn;\r\n}\r\n", "// There is some TypeScript trickery in this file. It is optimised for making\r\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\r\n// and self-explanatory, and the type hints displayed by the IDE should be\r\n// useful.\r\n\r\n// Define types to declare variables as required, optional or having a default\r\n// value.  If these classes were empty, TypeScript would treat them as\r\n// interchangeable. By giving them different shapes (i.e. different members),\r\n// TypeScript will keep them apart.\r\nclass RequiredVariable {\r\n  public readonly req = true;\r\n}\r\nclass OptionalVariable {\r\n  public readonly opt = true;\r\n}\r\nclass VariableWithDefaultValue {\r\n  constructor(public readonly defaultValue: string) {}\r\n}\r\n\r\n// These are the helpers that are used by the caller of `magicEnv` to define\r\n// their environment fields.\r\nexport const required = new RequiredVariable();\r\nexport const optional = new OptionalVariable();\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const defaultValue = (defaultValue: string) =>\r\n  new VariableWithDefaultValue(defaultValue);\r\n\r\n// Here comes the main function of this module: `magicEnv`. It takes one\r\n// parameter: a JavaScript object with string keys and values of type\r\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\r\n//\r\n// `magicEnv` is a template function, which is quite important.\r\n// `EnvDefinitionType` is the specific type of the environment definition.\r\n// That type must comply with the restriction that it is an object with string\r\n// keys and those variable types as values.  However, we will need the\r\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\r\n// the corresponding value types. We get access to this type by templating this\r\n// function.\r\nexport function magicEnv<\r\n  EnvDefinitionType extends {\r\n    [key: string]:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue;\r\n  },\r\n>(\r\n  processEnv: { [key: string]: string | undefined },\r\n  envDefinition: EnvDefinitionType,\r\n) {\r\n  // Now start constructing the result of this function.\r\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\r\n\r\n  // And now we iterate through the `envDefinition` object, which we received\r\n  // from the callback function.\r\n  for (const key of Object.keys(envDefinition) as (string &\r\n    keyof EnvDefinitionType)[]) {\r\n    // This is the value from the process environment\r\n    const value: string | undefined = processEnv[key];\r\n\r\n    // This is the value from the definition object at the top\r\n    const fieldDefinition:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue = envDefinition[key];\r\n\r\n    if ((fieldDefinition as any).req) {\r\n      // This is a required variable.\r\n\r\n      if (value === undefined) {\r\n        throw new Error(`Missing key ${key} in environment`);\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    } else if ((fieldDefinition as any).opt) {\r\n      // This is an optional variable. `value` may be a string or undefined.\r\n\r\n      env[key] = value;\r\n    } else {\r\n      // This is a variable with a default value (the value of\r\n      // `fieldDefinition`)\r\n\r\n      if (value === undefined) {\r\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the `env` object that we have just constructed, but return with a\r\n  // special type that we define here: it is an object which contains all the\r\n  // keys that the definition object has. The value type is `string`, except\r\n  // for fields that correspond to optional variables, those have type\r\n  // `string | undefined`. All fields are declared readonly.\r\n  return env as {\r\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\r\n      ? string | undefined\r\n      : string;\r\n  };\r\n}\r\n", "import {\r\n  magicEnv,\r\n  required,\r\n  optional,\r\n  defaultValue,\r\n} from 'server/src/config/MagicEnv.ts';\r\n\r\nexport default magicEnv(process.env, {\r\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\r\n  // libraries we import, to switch between development and production mode.\r\n  // Just to make sure it is set in the process environment, we include it here.\r\n  NODE_ENV: required,\r\n\r\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\r\n  CORD_TIER: required,\r\n\r\n  // Accept connections on these ports\r\n  API_SERVER_PORT: optional,\r\n  ADMIN_SERVER_PORT: optional,\r\n  METRICS_SERVER_PORT: optional,\r\n  STATUS_SERVER_PORT: optional,\r\n  CONSOLE_SERVER_PORT: optional,\r\n  DOCS_SERVER_PORT: optional,\r\n\r\n  // PostgreSQL connection configuration - required\r\n  POSTGRES_HOST: required,\r\n  POSTGRES_PORT: required,\r\n  POSTGRES_USER: required,\r\n  POSTGRES_PASSWORD: required,\r\n  POSTGRES_DB: required,\r\n\r\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\r\n  // as above)\r\n  POSTGRES_READ_HOST: optional,\r\n  POSTGRES_READ_PORT: optional,\r\n\r\n  // Redis connection configuration\r\n  REDIS_PORT: required,\r\n  REDIS_HOST: required,\r\n  PREDIS_PORT: required,\r\n  PREDIS_HOST: required,\r\n\r\n  // URLs pointing to our own endpoints\r\n  TOP_SERVER_HOST: required,\r\n  APP_SERVER_HOST: required,\r\n  API_SERVER_HOST: required,\r\n  API_SERVER_HOST_PRODUCTION: required,\r\n  ADMIN_SERVER_HOST: required,\r\n  MARKETING_SERVER_HOST: required,\r\n  PUBLIC_UPLOADS_HOST: required,\r\n  CONSOLE_SERVER_HOST: required,\r\n  CORD_TO_HOST: required,\r\n  DOCS_SERVER_HOST: required,\r\n  CLACK_SERVER_HOST: optional,\r\n  COMMUNITY_SERVER_HOST: required,\r\n\r\n  // Slack App credentials - required\r\n  SLACK_APP_CLIENT_SECRET: required,\r\n  SLACK_DEV_APP_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\r\n  SLACK_APP_REDIRECT_HOST: optional,\r\n  SLACK_SIGNING_SECRET: required,\r\n  SLACK_ADMIN_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_SIGNING_SECRET: required,\r\n  SLACK_INTERNAL_BOT_TOKEN: required,\r\n  SLACK_INTERNAL_SIGNING_SECRET: required,\r\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\r\n\r\n  // S3 Bucket File storage\r\n  S3_ACCESS_KEY_ID: optional,\r\n  S3_ACCESS_KEY_SECRET: optional,\r\n  S3_REGION: required,\r\n  S3_BUCKET: required,\r\n  S3_PUBLIC_BUCKET: required,\r\n  S3_ENDPOINT: required,\r\n  S3_USE_PATH_BASED_URLS: required,\r\n\r\n  EMAIL_LINKS_TOKEN_SECRET: required,\r\n\r\n  // Jira App credentials - required\r\n  JIRA_APP_CLIENT_ID: required,\r\n  JIRA_APP_CLIENT_SECRET: required,\r\n\r\n  // Asana App credentials - required\r\n  ASANA_APP_CLIENT_ID: required,\r\n  ASANA_APP_CLIENT_SECRET: required,\r\n\r\n  // Linear App credentials - required\r\n  LINEAR_APP_CLIENT_ID: required,\r\n  LINEAR_APP_CLIENT_SECRET: required,\r\n\r\n  // Trello App credentials - required\r\n  TRELLO_APP_CLIENT_ID: required,\r\n  TRELLO_APP_CLIENT_SECRET: required,\r\n\r\n  // Monday App credentials - required\r\n  MONDAY_APP_CLIENT_ID: required,\r\n  MONDAY_APP_CLIENT_SECRET: required,\r\n\r\n  // Secret for session tokens - required\r\n  JWT_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\r\n  OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\r\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Log level for console logging - optional ('info' if not provided)\r\n  LOGLEVEL: defaultValue('info'),\r\n\r\n  // Post error messages to this Slack channel,\r\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post informational changes to prod setup, including deploy and db migration\r\n  // messages, to this Slack channel\r\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post security/SOC2 compliance messages to this Slack channel,\r\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post info about go redirects to this Slack channel\r\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post messages from customers to this Slack channel\r\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post client request messages to this Slack channel\r\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // For sending search queries from the docs site to Slack\r\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\r\n  // logging is disabled\r\n  CLOUDWATCH_LOGLEVEL: optional,\r\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\r\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\r\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\r\n\r\n  // Host used when developing locally but an externally accessible url is\r\n  // needed. (example: d92dd1d1fa99.ngrok.io)\r\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\r\n\r\n  // path to static files for the admin app\r\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\r\n\r\n  // path to static files for the console app\r\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\r\n\r\n  // path to static files for the docs app\r\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\r\n\r\n  // API key used to send transactional email notifications through Sendgrid.\r\n  SENDGRID_API_KEY: required,\r\n\r\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\r\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\r\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\r\n\r\n  // API key used to fetch feature flags from LaunchDarkly\r\n  LAUNCHDARKLY_API_KEY: optional,\r\n\r\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\r\n  NUM_WORKERS: optional,\r\n\r\n  // Encryption key used when storing secrets in the database\r\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\r\n\r\n  // Encryption key used when generating file permalinks\r\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\r\n\r\n  // sentry.io environment setting\r\n  SENTRY_ENVIRONMENT: optional,\r\n  SENTRY_RELEASE: optional,\r\n  SENTRY_TRACE_SAMPLE_RATE: optional,\r\n\r\n  // Auth0 Environment variables\r\n  // 1) For SPA application\r\n  AUTH0_CLIENT_ID: required,\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\r\n\r\n  // 2) For verifying incoming events\r\n  AUTH0_WEBHOOK_SECRET: required,\r\n\r\n  // 3) For server to server communication\r\n  AUTH0_MTM_CLIENT_ID: required,\r\n  AUTH0_MTM_CLIENT_SECRET: required,\r\n  AUTH0_GENERAL_DOMAIN: required,\r\n\r\n  // console.cord.com cord app credentials\r\n  DEV_CONSOLE_CORD_APP_SECRET: required,\r\n\r\n  // secret for signing admin tokens to serve as proof user is logged in to\r\n  // admin\r\n  ADMIN_TOKEN_SECRET: required,\r\n\r\n  // flag whether the SDK testbed should be built and served\r\n  INCLUDE_SDK_TESTBED: optional,\r\n\r\n  // secret for cookies on the docs web site\r\n  DOCS_COOKIE_PARSER_SECRET: optional,\r\n\r\n  // set email for all notifications when testing with users on testbed\r\n  TESTBED_USERS_EMAIL: optional,\r\n\r\n  // secret for creating searchable embeddings and generating search\r\n  // results within our docs\r\n  OPENAI_API_SECRET: required,\r\n\r\n  // secret for getting geographic information from an IP address\r\n  IPSTACK_API_SECRET: optional,\r\n\r\n  // Host for where we generate the ai chat bot in the docs\r\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\r\n\r\n  // Google analytic events\r\n  GA_MEASUREMENT_ID: required,\r\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\r\n\r\n  // secret for stripe\r\n  STRIPE_SECRET_KEY: required,\r\n  STRIPE_WEBHOOK_SECRET_KEY: required,\r\n\r\n  DEMO_APPS_SHARED_SECRET: required,\r\n\r\n  // loops.so for sending newletters\r\n  LOOPS_SO_API_KEY: required,\r\n});\r\n", "// ADD NEW FLAGS HERE ONLY IF YOU NEED THEM ON THE CLIENT-SIDE\r\n// If the new flag is only used server-side then add your new flag in:\r\n// server/src/featureflags/index.ts\r\n// If you need to use them in BOTH the client AND the server, you only need\r\n// to add them once, in this file.\r\n//\r\n// Ensure they're set up in LaunchDarkly before you add them here.  The key for\r\n// the flag must match the key in LaunchDarkly.\r\n//\r\n// The full set of valid values for a flag should be in the second type argument\r\n// to FeatureFlag, so if you have a three-state feature flag of \"yes\", \"no\", and\r\n// \"maybeso\", you should declare it as:\r\n//\r\n// MULTI_STATE_FLAG: {\r\n//   key: 'multi_state_flag',\r\n//   defaultValue: 'no',\r\n// } as FeatureFlag<'multi_state_flag', 'yes' | 'no' | 'maybeso'>\r\nexport const FeatureFlags = {\r\n  USE_NEW_CSS_COMPONENTS: {\r\n    key: 'Use_new_CSS_components',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'Use_new_CSS_components', Record<string, object>>,\r\n  SUPPORT_CHAT_ENABLED: {\r\n    key: 'support_chat_enabled',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'support_chat_enabled', boolean>,\r\n  ENABLE_ANNOTATIONS_SCREENSHOTS: {\r\n    key: 'enable_annotations_screenshots',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_screenshots', boolean>,\r\n  ENABLE_PLAINTEXT_ANNOTATIONS: {\r\n    key: 'enable_plaintext_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_plaintext_annotations', boolean>,\r\n  ENABLE_ATTACHMENTS: {\r\n    key: 'enable_attachments',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_attachments', boolean>,\r\n  EMAIL_SHARING: {\r\n    key: 'email_sharing',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'email_sharing', boolean>,\r\n  ENABLE_FORCE_REFRESH_PROVIDER: {\r\n    key: 'enable_force_refresh_provider',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_force_refresh_provider', boolean>,\r\n  MONDAY_TASKS: {\r\n    key: 'monday_tasks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'monday_tasks', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_CREATING_THREAD: {\r\n    key: 'take_screenshot_when_creating_thread',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_creating_thread', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_SENDING_MESSAGE: {\r\n    key: 'take_screenshot_when_sending_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_sending_message', boolean>,\r\n  OPEN_THREAD_SAME_PAGE: {\r\n    key: 'open_thread_same_page',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'open_thread_same_page', boolean>,\r\n  SHOW_ACTIVATION_WELCOME_MESSAGE_NUX: {\r\n    key: 'show_activation_welcome_message_nux',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show_activation_welcome_message_nux', boolean>,\r\n  ENABLE_SLACK_FEATURES: {\r\n    key: 'enable-slack-features',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable-slack-features', boolean>,\r\n  ENABLE_DEV_CONSOLE_SELF_SERVE: {\r\n    key: 'enable-dev-console-self-serve',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable-dev-console-self-serve', boolean>,\r\n  // TODO: remove - no longer used\r\n  THREAD_STYLING_TWEAKS: {\r\n    key: 'thread_styling_tweaks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'thread_styling_tweaks', boolean>,\r\n  REMOVE_TASKS_FEATURE: {\r\n    key: 'remove_tasks_feature',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'remove_tasks_feature', boolean>,\r\n  SHOW_COMMUNITY_IN_CONSOLE: {\r\n    key: 'show-community-in-console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-community-in-console', boolean>,\r\n  SHOW_CUSTOMER_ISSUES_IN_CONSOLE: {\r\n    key: 'show-customer-issues-in-console',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show-customer-issues-in-console', boolean>,\r\n  TAKE_SCREENSHOT_OF_CANVAS_ONLY: {\r\n    key: 'take_screenshot_of_canvas_only',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_of_canvas_only', boolean>,\r\n  SHOW_EVENTS_TAB_IN_CONSOLE: {\r\n    key: 'show_events_tab_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show_events_tab_in_console', boolean>,\r\n  ENABLE_TEXT_ANNOTATIONS: {\r\n    key: 'enable_text_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_text_annotations', boolean>,\r\n  ENABLE_EMAIL_NOTIFICATIONS: {\r\n    key: 'enable_email_notifications',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_email_notifications', boolean>,\r\n  ENABLE_ANNOTATIONS_OVERLAY: {\r\n    key: 'enable_annotations_overlay',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_overlay', boolean>,\r\n  ENABLE_SENTRY: {\r\n    key: 'enable_sentry',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_sentry', boolean>,\r\n  CONSOLE_WEBINAR_BANNER: {\r\n    key: 'console_webinar_banner',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'console_webinar_banner', object>,\r\n  ENABLE_VIDEO_CAPABILITIES: {\r\n    key: 'enable_video_capabilities',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_video_capabilities', boolean>,\r\n  SHOW_LINK_PREVIEWS: {\r\n    key: 'show-link-previews',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-link-previews', boolean>,\r\n  BILLING_ENABLED_IN_CONSOLE: {\r\n    key: 'billing_enabled_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'billing_enabled_in_console', boolean>,\r\n  MENTION_NOTIFICATION_EMAIL_TEMPLATE_ID: {\r\n    key: 'mention_notification_email_template_id',\r\n    defaultValue: 'd-6309e6ccb36a4a769957795f475c8130',\r\n  } as FeatureFlag<\r\n    'mention_notification_email_template_id',\r\n    | 'd-6309e6ccb36a4a769957795f475c8130'\r\n    | 'd-8f2246c657a8498394e9caf181816bc3'\r\n    | 'd-8a8088e59eed4622b2d09078de372fe8'\r\n    | 'd-bc3669c391774addb7da37f92a3f97e3'\r\n  >,\r\n  SHOW_CONSOLE_LANDING_PAGE: {\r\n    key: 'show_console_landing_page',\r\n    defaultValue: false,\r\n  },\r\n} as const;\r\n\r\n// The generic type that makes this all work.  The first type parameter is\r\n// always set to a single string, and it makes it possible to do type inference\r\n// on the useFeatureFlag() call and figure out what the return value is.\r\nexport type FeatureFlag<K, T> = {\r\n  key: K;\r\n  defaultValue: T;\r\n};\r\n\r\n// The map of feature flag keys to the default value for that flag.  We have to\r\n// use `as any` in the assignment because TypeScript will only infer that the\r\n// return type is {[key: string]: union_of_all_flag_value_types} rather than\r\n// associating the right type with the right key.\r\nconst defaults: {\r\n  [P in keyof typeof FeatureFlags as (typeof FeatureFlags)[P]['key']]: (typeof FeatureFlags)[P]['defaultValue'];\r\n} = Object.fromEntries(\r\n  Object.entries(FeatureFlags).map(([_, v]) => [v.key, v.defaultValue]),\r\n) as any;\r\n\r\n/**\r\n * Returns an object that maps from feature flag keys to their default value.\r\n */\r\nexport function featureFlagDefaults() {\r\n  return defaults;\r\n}\r\n", "import * as sgMail from '@sendgrid/mail';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ThreadDetails } from 'server/src/util/email.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { getReplyToEmailAddress } from 'server/src/email/utils.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { DEFAULT_EMAIL_LOGO_WIDTH } from 'common/const/Sizes.ts';\r\nimport {\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN,\r\n  CONSOLE_ORIGIN,\r\n} from 'common/const/Urls.ts';\r\nimport { AUTH0_CLIENT_ID } from 'common/const/Ids.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\r\n\r\nsgMail.default.setApiKey(env.SENDGRID_API_KEY);\r\nexport const DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID =\r\n  'd-6309e6ccb36a4a769957795f475c8130';\r\nexport const MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-8a8088e59eed4622b2d09078de372fe8';\r\nexport const DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID =\r\n  'd-fecc876acf684ff2bca887748d86e4e1';\r\nexport const SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-b70dc2c71ee541ee9e0c5f4cd84b32e3';\r\nexport const DEFAULT_THREAD_RESOLVE_TEMPLATE_ID =\r\n  'd-93aa618e7d0b4ba593c346f9a1f664c5';\r\nexport const THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-37c14e17cc9649afb70495f029b3833d';\r\nconst SEND_CONSOLE_USER_INVITE_TEMPLATE_ID =\r\n  'd-ab157e4f588c4a30b6304e4e062b5f88';\r\nconst ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-1bbf5f1a7a2948529de051d44eb873c9';\r\nconst ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-48ea1b657a2a4f9b95c9f81d38425306';\r\nconst REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID =\r\n  'd-bfe0627042f345f8b7877e6a97815359';\r\n\r\ntype UnsubscribeThreadTokenData = {\r\n  threadID: UUID;\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  appID: UUID | null;\r\n};\r\n\r\nexport type ActionIcon = 'mention' | 'task' | 'paperclip';\r\n\r\nexport const encodeUnsubscribeThreadToken = (\r\n  data: UnsubscribeThreadTokenData,\r\n) => jwt.sign(data, env.EMAIL_LINKS_TOKEN_SECRET, { algorithm: 'HS512' });\r\n\r\nexport const decodeUnsubscribeThreadToken = (token: string) =>\r\n  jwt.verify(token, env.EMAIL_LINKS_TOKEN_SECRET, {\r\n    algorithms: ['HS512'],\r\n  }) as UnsubscribeThreadTokenData;\r\n\r\nexport type SendActionEmailNotificationData = {\r\n  context: RequestContext;\r\n  recipientEmail: string;\r\n  actionText: string;\r\n  actionIconType: ActionIcon;\r\n  pageName: string;\r\n  pageURL: string;\r\n  providerName: string | undefined;\r\n  unsubscribeURL: string;\r\n  partnerDetails: CustomEmailTemplate | undefined;\r\n  threadDetails: ThreadDetails;\r\n  emailNotification: EmailOutboundNotificationEntity;\r\n  /** You can edit templates in SendGrid */\r\n  templateId: string;\r\n  notificationType: NotificationType;\r\n};\r\n/*\r\n  Common function used to send thread-action and reply notifications.\r\n  They are similar in that they both notify of an action eg resolving\r\n  /unresolving a thread or a reply or @mention message.\r\n  */\r\nexport async function sendActionEmailNotification({\r\n  context,\r\n  recipientEmail,\r\n  actionText,\r\n  actionIconType,\r\n  pageName,\r\n  pageURL,\r\n  providerName,\r\n  unsubscribeURL,\r\n  partnerDetails,\r\n  threadDetails,\r\n  emailNotification,\r\n  /** You can edit templates in SendGrid */\r\n  templateId,\r\n  notificationType,\r\n}: SendActionEmailNotificationData) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const {\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const threadingHeaders = await getThreadingHeaders(emailNotification);\r\n\r\n  // See https://stackoverflow.com/questions/1027395/detecting-outlook-autoreply-out-of-office-emails#comment64988838_25324691\r\n  // Request that MS Exchange does not send automated replies (like Out of Office)\r\n  // back to this email\r\n  const noAutoResponseHeader = { 'X-Auto-Response-Suppress': 'OOF' };\r\n\r\n  const unsubscribeHeaders = {\r\n    'List-Unsubscribe': `<${unsubscribeURL}>`,\r\n    'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\r\n  };\r\n\r\n  let eventType = '';\r\n  let emailType = '';\r\n  if (notificationType === 'reply') {\r\n    eventType = 'email-mention-notification-sent-v2';\r\n    emailType = 'mention v2';\r\n  } else if (notificationType === 'thread_action') {\r\n    eventType = 'email-thread-action-notification-sent';\r\n    emailType = 'thread action';\r\n  }\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: getReplyToEmailAddress(\r\n      context.logger,\r\n      partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n      emailNotification.id,\r\n    ),\r\n    templateId,\r\n    headers: {\r\n      ...threadingHeaders,\r\n      ...noAutoResponseHeader,\r\n      ...unsubscribeHeaders,\r\n    },\r\n    dynamicTemplateData: {\r\n      Action: actionText,\r\n      Action_Icon: actionIconType,\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Tool_Name: providerName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Unsubscribe_URL: unsubscribeURL,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Add_Explainer: false,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent ${emailType} email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: eventType,\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending ${emailType} email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n          from_address: mailData.from,\r\n          to_address: mailData.to,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\n// the EmailEmail repetition is intentional\r\nexport function sendShareThreadToEmailEmail(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  pageName: string,\r\n  pageURL: string,\r\n  partnerDetails: CustomEmailTemplate | undefined,\r\n  threadDetails: ThreadDetails,\r\n  emailNotification: EmailOutboundNotificationEntity | null,\r\n  templateID: string,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return true;\r\n  }\r\n\r\n  const {\r\n    senderName,\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: emailNotification\r\n      ? getReplyToEmailAddress(\r\n          context.logger,\r\n          partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n          emailNotification.id,\r\n        )\r\n      : partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n    templateId: templateID,\r\n    dynamicTemplateData: {\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Sender_Name: senderName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent shareThreadToEmail email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-share-thread-to-email-sent',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending shareThreadToEmail email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\ntype ThreadingHeaders =\r\n  | {\r\n      'Message-ID': string;\r\n    }\r\n  | {\r\n      'Message-ID': string;\r\n      'In-Reply-To': string;\r\n      References: string;\r\n    };\r\n// Returns the email headers Message-ID, In-Reply-To and References to enable\r\n// threading of emails (in the email client) for the same Cord thread.\r\n// We also use these headers when handling inbound replies in SendGridWebhookHandler\r\n// if the notificationID is not in the 'to' address.\r\nasync function getThreadingHeaders(\r\n  emailNotification: EmailOutboundNotificationEntity,\r\n): Promise<ThreadingHeaders> {\r\n  const isFirstEmail =\r\n    (await EmailOutboundNotificationEntity.count({\r\n      where: {\r\n        email: emailNotification.email,\r\n        threadID: emailNotification.threadID,\r\n      },\r\n    })) === 1;\r\n\r\n  if (isFirstEmail) {\r\n    return {\r\n      'Message-ID': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  } else {\r\n    return {\r\n      'Message-ID': `<notif-${emailNotification.id}@cord.fyi>`,\r\n      'In-Reply-To': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n      References: `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function sendEmailInviteConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  inviterName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n\r\n  const inviteLink = encodeURI(\r\n    `https://${AUTH0_CUSTOM_LOGIN_DOMAIN}/authorize?` +\r\n      'response_type=code&' +\r\n      `client_id=${AUTH0_CLIENT_ID}&` +\r\n      `redirect_uri=${CONSOLE_ORIGIN}/login&` +\r\n      'scope=openid email profile&' +\r\n      'screen_hint=signup&' +\r\n      `login_hint=${recipientEmail}`,\r\n  );\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: SEND_CONSOLE_USER_INVITE_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Invite_Link: inviteLink,\r\n      Inviter: inviterName,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to invite ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-invite-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessGrantedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access granted to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-granted-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessDeniedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login?newcustomer=true`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access denied to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-denied-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\n/**\r\n * Used for when a console user requests access to an existing customer\r\n */\r\nasync function sendRequestAccessEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  requesterEmail: string,\r\n  customerName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Sender_Email: requesterEmail,\r\n      Customer_Name: customerName,\r\n      View_Access_Requests_Link: `${CONSOLE_ORIGIN}/usermanagement`,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent request access email to ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-request-access-customer',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to, customerID },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessRequestToCustomerConsoleUsers(\r\n  context: RequestContext,\r\n  requesterEmail: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n  const approvedCustomerConsoleUsers =\r\n    await context.loaders.consoleUserLoader.loadConsoleUsersForCustomer(\r\n      customerID,\r\n    );\r\n\r\n  if (approvedCustomerConsoleUsers.length === 0) {\r\n    throw new Error('No console users in this customer');\r\n  }\r\n\r\n  return await Promise.all(\r\n    approvedCustomerConsoleUsers.map((consoleUser) =>\r\n      sendRequestAccessEmailToConsoleUser(\r\n        context,\r\n        consoleUser.email,\r\n        requesterEmail,\r\n        customer.name,\r\n        customer.id,\r\n      ),\r\n    ),\r\n  );\r\n}\r\n", "// See #8935:\r\n/// <reference lib=\"es2022\" />\r\n\r\nimport type OpenAI from 'openai';\r\n\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport type { Placement } from '@floating-ui/react-dom';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\n\r\nexport type {\r\n  DocumentAnnotationResult,\r\n  Screenshot,\r\n  DocumentLocation,\r\n  LocationTextConfig,\r\n  HighlightedTextConfig,\r\n  AdditionalTargetData,\r\n  Annotation,\r\n  AnnotationWithThreadID,\r\n  AnnotationCapturePosition,\r\n} from '@cord-sdk/types';\r\nexport { locationJson } from '@cord-sdk/types';\r\nimport { locationJson, MessageNodeType } from '@cord-sdk/types';\r\nimport type {\r\n  FlatJsonObject,\r\n  LocationFilterOptions,\r\n  ResolvedStatus,\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n  MessageContent,\r\n  MessageNode,\r\n  ViewerThreadStatus,\r\n} from '@cord-sdk/types';\r\n\r\nexport type {\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n};\r\n\r\nexport type SimpleTranslationParameters = FlatJsonObject;\r\n\r\nexport enum DataTableQueries {\r\n  ADMIN_USERS = 'admin_users',\r\n  SET_ADMIN = 'set_admin',\r\n  USER_DETAILS = 'user_details',\r\n  ORG_DETAILS = 'org_details',\r\n  APP_DETAILS = 'app_details',\r\n  THREAD_DETAILS = 'thread_details',\r\n  MESSAGE_DETAILS = 'message_details',\r\n  CUSTOMER_DETAILS = 'customer_details',\r\n  ORG_MEMBER_DETAILS = 'org_member_details',\r\n  ID_SEARCH = 'id_search',\r\n  PROD_APPLICATIONS = 'prod_applications',\r\n  STAGING_APPLICATIONS = 'staging_applications',\r\n  SAMPLE_APPLICATIONS = 'sample_applications',\r\n  VERIFIED_CUSTOMERS = 'verified_customers',\r\n  SAMPLE_CUSTOMERS = 'sample_customers',\r\n  DEPLOYS = 'deploys',\r\n  PAGE_CONTEXTS = 'page_contexts',\r\n  BROWSER_METRICS = 'browser_metrics',\r\n  OS_METRICS = 'os_metrics',\r\n  GO_REDIRECTS = 'go_redirects',\r\n}\r\n\r\nexport type NonNullableKeys<T, K extends keyof T> = T & {\r\n  [P in K]: NonNullable<T[P]>;\r\n};\r\n\r\nexport type NullableKeys<T, K extends keyof T> = Omit<T, K> & {\r\n  [P in K]: T[P] | null;\r\n};\r\n\r\nexport type ElementOf<T extends Array<any>> = T[number];\r\n\r\n/**\r\n * A mapping type that effectively combines Required<T> and NonNullable<T> to\r\n * turn { foo?: string | undefined } into { foo: string }\r\n */\r\n// NOTE(9/9/2021): This is equivalent to Required<T> if we compiled with\r\n// --strictNullChecks, but we currently don't\r\nexport type ReallyRequired<T> = {\r\n  [P in keyof T]-?: NonNullable<T[P]>;\r\n};\r\n\r\nexport type { MessageContent, MessageNode };\r\nexport { MessageNodeType };\r\n\r\nexport type UUID = string;\r\n\r\nexport type Location = {\r\n  [k: string]: string | number | boolean;\r\n};\r\n\r\nexport type SortDirection = 'ascending' | 'descending';\r\n\r\nexport function isValidFlatJsonObject(obj: any): obj is FlatJsonObject {\r\n  if (!obj) {\r\n    return false;\r\n  }\r\n  if (typeof obj !== 'object' || Array.isArray(obj)) {\r\n    return false;\r\n  }\r\n  for (const [_, value] of Object.entries(obj)) {\r\n    const t = typeof value;\r\n    if (t !== 'string' && t !== 'number' && t !== 'boolean') {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isLocation(obj: any): obj is Location {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function isValidMetadata(obj: any): obj is EntityMetadata {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function toLocation(obj: any): Location | null {\r\n  return isLocation(obj) ? obj : null;\r\n}\r\n\r\n// We receive location as either Location or LocationFilterOptions from\r\n// our apis. Since Location type can be flat object with multiple properties\r\n// we have to check the property type to make sure we're getting the right value.\r\n// eg: {value: 'foo', ...} is Location\r\n// while {value: {value: 'foo'} ...} is LocationFilterOptions\r\nexport function getLocationFilter(\r\n  obj: LocationFilterOptions | Location | undefined,\r\n): LocationFilterOptions | undefined {\r\n  if (!obj) {\r\n    return undefined;\r\n  }\r\n\r\n  if (isLocation(obj)) {\r\n    return { value: obj, partialMatch: false };\r\n  }\r\n\r\n  if (isLocation(obj.value)) {\r\n    return obj;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Function to convert our external resolvedStatus filter enum\r\n// to our internal 'resolved' boolean property\r\nexport function getResolvedFromStatus(\r\n  status: ResolvedStatus,\r\n): boolean | undefined {\r\n  // we've not included a fallback value as this will just increase the chances\r\n  // of returning the wrong data somewhere. So we make sure to pass whatever\r\n  // we've said the default is for the API that's calling this.\r\n  switch (status) {\r\n    case 'resolved': {\r\n      return true;\r\n    }\r\n    case 'unresolved': {\r\n      return false;\r\n    }\r\n    case 'any': {\r\n      return undefined;\r\n    }\r\n    default: {\r\n      const unhandledStatus: never = status;\r\n      throw new Error('Invalid resolved status type ' + unhandledStatus);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getViewerThreadFilter(\r\n  viewerStatus: ViewerThreadStatus | ViewerThreadStatus[] | undefined,\r\n): ViewerThreadStatus[] {\r\n  if (!viewerStatus) {\r\n    return [];\r\n  }\r\n  if (typeof viewerStatus === 'string') {\r\n    return [viewerStatus];\r\n  }\r\n  return viewerStatus;\r\n}\r\n\r\nexport function metadataMatches(\r\n  metadata: EntityMetadata,\r\n  matcher: EntityMetadata,\r\n): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (metadata[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationMatches(context: Location, matcher: Location): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (context[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction flatJsonObjectEqual(\r\n  a: FlatJsonObject | null,\r\n  b: FlatJsonObject | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  if (Object.keys(a).length !== Object.keys(b).length) {\r\n    return false;\r\n  }\r\n  for (const [key, value] of Object.entries(a)) {\r\n    if (b[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationEqual(a: Location | null, b: Location | null): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\nexport function metadataEqual(\r\n  a: EntityMetadata | null,\r\n  b: EntityMetadata | null,\r\n): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\n/**\r\n * Implements the canonical comparison for locations.  Currently, this sorts by\r\n * number of elements, then the JSON representation alphabetically, but we can\r\n * change that if we come up with something better.\r\n */\r\nexport function locationCompare(a: Location, b: Location): number {\r\n  const lengthA = Object.keys(a).length;\r\n  const lengthB = Object.keys(b).length;\r\n  if (lengthA !== lengthB) {\r\n    return lengthA - lengthB;\r\n  }\r\n  return locationJson(a).localeCompare(locationJson(b));\r\n}\r\n\r\nexport type PageContext = {\r\n  providerID: UUID | null;\r\n  data: Location;\r\n};\r\n\r\nexport function pageContextEqual(\r\n  a: PageContext | null,\r\n  b: PageContext | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  // Two contexts from different providers are never equal\r\n  if (a.providerID !== b.providerID) {\r\n    return false;\r\n  }\r\n  // If either has data, compare the data, otherwise compare the locations\r\n  return isEqual(a.data, b.data);\r\n}\r\n\r\n// This returns a string key that is equivalent from an equality perspective to\r\n// comparing the pageContexts.  Specifically, the intention is that\r\n// pageContextEqual(a, b) === (pageContextKey(a) === pageContextKey(b))\r\n\r\n// The functioning of this depends a lot on our specific logic of\r\n// building PageContexts, such that, for instance,\r\n// a.location === b.location => a.providerID === b.providerID.\r\n\r\n// It also needs to stay consistent with the logic in server/src/util/hash.ts.\r\nexport function pageContextKey(pageContext: PageContext): string {\r\n  return jsonStableStringify({\r\n    providerID: pageContext.providerID,\r\n    data: pageContext.data,\r\n  });\r\n}\r\n\r\n/**\r\n * Convert a PageContext-like object into an actual PageContext.\r\n *\r\n * The PageContext types that we exchange with GraphQL allow nullable fields to\r\n * be undefined as well. This function takes such objects and returns a valid\r\n * PageContext.\r\n */\r\ntype PageContextLike = {\r\n  providerID?: UUID | null;\r\n  data: Location;\r\n};\r\nexport function toPageContext(pageContext: PageContextLike): PageContext;\r\nexport function toPageContext(pageContext: null | undefined): null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null {\r\n  if (!pageContext) {\r\n    return null;\r\n  }\r\n  const { providerID, data } = pageContext;\r\n  if (!isLocation(data)) {\r\n    throw new Error('Invalid context');\r\n  }\r\n  return {\r\n    providerID: providerID ?? null,\r\n    data,\r\n  };\r\n}\r\n\r\nexport type OrgMemberState = 'active' | 'inactive' | 'deleted'; // must match the keys in OrgMemberStateEnumType\r\n\r\nexport type UserType = 'person' | 'bot'; // must match the keys in UserTypeEnumType\r\n\r\nexport type UserState = 'active' | 'deleted'; // must match the keys in UserStateEnumType\r\n\r\nexport type ImportedSlackMessageType = 'reply' | 'supportBotReply'; // must match the keys in ImportedSlackMessageTypeEnumType\r\n\r\nexport type MessageType = 'action_message' | 'user_message'; //must match the keys in MessageTypeEnumType\r\n\r\nexport interface Todo {\r\n  id: UUID;\r\n  done: boolean;\r\n}\r\n\r\nexport enum MessageAttachmentType {\r\n  FILE = 'file',\r\n  ANNOTATION = 'annotation',\r\n  SCREENSHOT = 'screenshot',\r\n}\r\n\r\nexport const MessageAnnotationAttachmentTypeName =\r\n  'MessageAnnotationAttachment';\r\n\r\nexport function parseElementIdentifierVersion(\r\n  val: string,\r\n): ElementIdentifierVersion | null {\r\n  if (val === '1' || val === '2') {\r\n    return val;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport enum ElementIdentifierMatch {\r\n  EXACT = 'exact',\r\n  PARTIAL = 'partial',\r\n  NONE = 'none',\r\n}\r\n\r\nexport enum LocationMatch {\r\n  EXACT = 'exact',\r\n  SIBLING = 'sibling',\r\n  MULTIMEDIA = 'multimedia',\r\n  CHART = 'chart',\r\n  STALE = 'stale',\r\n  MAYBE_STALE = 'maybe_stale',\r\n  NONE = 'none',\r\n  // User has old extension, and does not have the latest identifier version\r\n  INCOMPATIBLE_IDENTIFIER_VERSION = 'incompatible_identifier_version',\r\n  // Used if fallback document coordinates are included, and we don't have an exact/sibling match\r\n  DOCUMENT_COORDINATES = 'document_coordinates',\r\n  // If we weren't able to annotate, so we're instead relying on the screenshot\r\n  // Examples: annotating a pdf, annotating an iframe we can't access\r\n  UNAVAILABLE = 'unavailable',\r\n  // If the annotation was on an inaccessible cross-domain iframe. We want to\r\n  // show it while the message is being drafted, but not after it's been posted\r\n  INACCESSIBLE_CROSS_DOMAIN_IFRAME = 'inaccessible_cross_domain_iframe',\r\n  OUTSIDE_ACCESSIBLE_VIRTUALISED_LIST = 'outside_accessible_virtualised_list',\r\n  OUTSIDE_INACCESSIBLE_VIRTUALISED_LIST = 'outside_inaccessible_virtualised_list',\r\n}\r\n\r\nexport function annotationHasLocation(annotation: MessageAnnotation) {\r\n  return annotation.location !== null || annotation.customLocation !== null;\r\n}\r\n\r\nexport const ThreadCreatedTypeName = 'ThreadCreated';\r\nexport const ThreadMessageAddedTypeName = 'ThreadMessageAdded';\r\nexport const ThreadMessageUpdatedTypeName = 'ThreadMessageUpdated';\r\nexport const ThreadMessageContentAppendedTypeName =\r\n  'ThreadMessageContentAppended';\r\nexport const ThreadMessageRemovedTypeName = 'ThreadMessageRemoved';\r\nexport const ThreadParticipantsUpdatedIncrementalTypeName =\r\n  'ThreadParticipantsUpdatedIncremental';\r\nexport const ThreadTypingUsersUpdatedTypeName = 'ThreadTypingUsersUpdated';\r\nexport const ThreadShareToSlackTypeName = 'ThreadShareToSlack';\r\nexport const ThreadPropertiesUpdatedTypeName = 'ThreadPropertiesUpdated';\r\nexport const ThreadSubscriberUpdatedTypeName = 'ThreadSubscriberUpdated';\r\nexport const ThreadDeletedTypeName = 'ThreadDeleted';\r\n\r\nexport const PageThreadAddedTypeName = 'PageThreadAdded';\r\nexport const PageThreadDeletedTypename = 'PageThreadDeleted';\r\nexport const PageThreadReplyAddedTypeName = 'PageThreadReplyAdded';\r\nexport const PageVisitorsUpdatedTypeName = 'PageVisitorsUpdated';\r\nexport const PageThreadResolvedTypeName = 'PageThreadResolved';\r\nexport const PageThreadUnresolvedTypeName = 'PageThreadUnresolved';\r\nexport const ThreadFilterablePropertiesMatchTypeName =\r\n  'ThreadFilterablePropertiesMatch';\r\nexport const ThreadFilterablePropertiesUnmatchTypeName =\r\n  'ThreadFilterablePropertiesUnmatch';\r\n\r\nexport const NotificationAddedTypeName = 'NotificationAdded';\r\nexport const NotificationReadStateUpdatedTypeName =\r\n  'NotificationReadStateUpdated';\r\nexport const NotificationDeletedTypeName = 'NotificationDeleted';\r\n\r\nexport const OrgMemberAddedTypeName = 'OrgMemberAdded';\r\nexport const OrgMemberRemovedTypeName = 'OrgMemberRemoved';\r\n\r\nexport const ConsoleGettingStartedUpdatedTypeName =\r\n  'ConsoleGettingStartedUpdated';\r\n\r\nexport const CustomerSubscriptionUpdatedTypeName =\r\n  'CustomerSubscriptionUpdated';\r\n\r\nexport type FileAttachmentInput = {\r\n  id: UUID;\r\n  fileID: UUID;\r\n};\r\n\r\n// Subset of winston log levels, which can be found in NpmConfigSetLevels type in winston type file\r\nexport enum LogLevel {\r\n  ERROR = 'error',\r\n  WARN = 'warn',\r\n  INFO = 'info',\r\n  DEBUG = 'debug',\r\n}\r\n\r\nexport type PopperPosition = Placement;\r\n\r\n// called when the sidebar shows and hides, with a reference to the Cord iframe\r\n// expected to make domain-specific document adjustments to accommodate the sidebar\r\n// in its two states (expanded / not).\r\nexport type DocumentMutator = (width: number | null) => void;\r\n\r\n// called with the document to initialize any mutator-specific elements and behavior\r\n// expected to return the actual mutator function\r\nexport type DocumentMutatorInitializer = (\r\n  document: Document,\r\n) => DocumentMutator;\r\n\r\nexport type SimpleValue = string | number | boolean;\r\n\r\nexport type PreferencesValueType = JsonValue;\r\n\r\nexport type PreferencesType = JsonObject;\r\n\r\nexport enum UserReference {\r\n  MENTION = 'mention',\r\n  ASSIGNEE = 'assignee',\r\n}\r\n\r\nexport type RuleProviderInfo = {\r\n  id: UUID; // the ID of the provider, should be unique among providers\r\n  name: string; // the name of the provider\r\n  iconURL?: string | null; // URL for a favicon-like image\r\n  nuxText?: string | null; // the text to show the user teaching them how to use Radical on this specific provider\r\n  disableAnnotations?: boolean; // if annotations should be disabled for this provider. example: slack static PDFs where due to the chrome pdf viewer we don't have access to the scroll position\r\n};\r\n\r\n// a ruleset provider should export all the rules specific to a SaaS, even when\r\n// those rules span across different domain names.\r\nexport type RuleProvider = RuleProviderInfo & {\r\n  domains: string[]; // the domains that this provider's rules cover\r\n  rules: ProviderRule[]; // deny and approve rules\r\n  mergeHashWithLocation?: boolean; // a fix for providers like Snowflake who have URLs with query parameters after the # in the URL\r\n  visibleInDiscoverToolsSection: boolean; // the state of wether the tool is visible in th Discover tools section in the NUX flow, i.e. internal tools should not be included, localhost should not be included\r\n  platformApplicationID: UUID | null; // Application ID of provider, if relevant\r\n\r\n  // the functions to call to mutate the document to make room for the sidebar.\r\n  // this is a list to allow per-domain granularity.\r\n  documentMutators: ProviderDocumentMutator[];\r\n};\r\n\r\nexport type ProviderRule = {\r\n  id: UUID;\r\n  type: ProviderRuleType;\r\n  matchPatterns: ProviderRuleMatchPatterns;\r\n  nameTemplate: string | null;\r\n  contextTransformation: PageContextTransformation;\r\n  observeDOMMutations: boolean;\r\n};\r\n\r\nexport type ProviderDocumentMutator =\r\n  | { id: UUID; type: 'default_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'custom_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'fixed_elements'; config: null };\r\n\r\nexport type ProviderDocumentMutatorType = ProviderDocumentMutator['type'];\r\n\r\nexport type CSSMutatorConfig = {\r\n  cssTemplate: string;\r\n};\r\n\r\nexport type ProviderRuleType = 'allow' | 'deny';\r\n\r\nexport type ProviderRuleMatchPatterns = {\r\n  protocol?: string;\r\n  domain?: string;\r\n  path?: string;\r\n  hash?: string;\r\n  queryParams?: { [key: string]: string };\r\n  selector?: string;\r\n  contains?: string;\r\n};\r\n\r\nexport type ProviderRuleTestMatchType = 'allow' | 'deny' | 'none';\r\n\r\nexport type PageDetails = {\r\n  pageContext: PageContext;\r\n  pageName: string | null;\r\n};\r\n\r\nexport type MatchResult = (\r\n  | {\r\n      match: 'allow' | 'deny';\r\n      ruleID: UUID;\r\n    }\r\n  | {\r\n      match: 'none';\r\n    }\r\n) &\r\n  PageDetails;\r\n\r\nexport type PageContextTransformationType =\r\n  | 'default'\r\n  | 'replace'\r\n  | 'extend'\r\n  | 'metabase';\r\n\r\nexport type PageContextTransformation = {\r\n  type: PageContextTransformationType;\r\n  data: JsonObject | null;\r\n};\r\n\r\nexport type ProvidersResult = {\r\n  ruleProviders: RuleProvider[];\r\n  version: string;\r\n};\r\n\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n\r\nexport type LinearTeam = {\r\n  id: string;\r\n  name: string;\r\n  projects: {\r\n    nodes: Array<{\r\n      id: string;\r\n      name: string;\r\n    }>;\r\n  };\r\n};\r\n\r\nexport type AtlassianProject = {\r\n  // expand: 'description,lead,issueTypes,url,projectKeys,permissions,insight',\r\n  id: string; // 10000\r\n  key: string; // STLR\r\n  name: string; // 'Stellar'\r\n  issueTypes: Array<{\r\n    id: string; //'10001'\r\n    // description: 'Tasks track small, distinct pieces of work.';\r\n    name: string;\r\n    subtask: boolean;\r\n    // avatarId: 10318;\r\n    // hierarchyLevel: 0;\r\n  }>;\r\n  simplified: boolean;\r\n  style: string; // 'next-gen'\r\n  isPrivate: boolean;\r\n  entityId: UUID;\r\n  uuid: UUID;\r\n};\r\n\r\nexport type MondayBoard = {\r\n  id: string;\r\n  name: string;\r\n  subitem_board?: {\r\n    id: string;\r\n  };\r\n  groups: Array<{\r\n    id: string;\r\n    title: string;\r\n    position: string;\r\n  }>;\r\n};\r\n\r\nexport type JiraConnectionPreferences = {\r\n  projectID: string;\r\n  issueType: string;\r\n  subissueType?: string;\r\n};\r\n\r\nexport type AsanaConnectionPreferences = {\r\n  projectID: string | undefined;\r\n};\r\n\r\nexport type MondayConnectionPreferences = {\r\n  boardID: string;\r\n  groupID?: string;\r\n};\r\n\r\ntype TrelloList = {\r\n  id: UUID;\r\n  name: string;\r\n  closed?: string;\r\n  pos?: number;\r\n  softLimit?: string;\r\n  idBoard?: UUID;\r\n  subscriber: boolean;\r\n};\r\n\r\ntype TrelloBoard = {\r\n  id: UUID;\r\n  name: string;\r\n  idOrganization: UUID;\r\n  lists: TrelloList[];\r\n};\r\n\r\ntype TrelloOrg = {\r\n  id: UUID;\r\n  name: string;\r\n};\r\n\r\nexport type TrelloConnectionPreferencesType = {\r\n  id: UUID;\r\n  email: string;\r\n  boards: TrelloBoard[];\r\n  organizations: TrelloOrg[];\r\n};\r\n\r\nexport type TrelloCard = {\r\n  name: string;\r\n  desc: string;\r\n  idList: UUID;\r\n};\r\n\r\nexport type AsanaProject = {\r\n  gid: string;\r\n  name: string;\r\n};\r\n\r\nexport type JiraIssuePreviewData = {\r\n  key: string;\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  done: boolean;\r\n  priority: string;\r\n  subtasks: Array<{\r\n    id: string;\r\n    title: string;\r\n    done: boolean;\r\n  }>;\r\n};\r\n\r\nexport type AsanaTaskPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n};\r\n\r\nexport type LinearIssuePreviewData = {\r\n  title: string;\r\n  identifier: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  priority: string;\r\n  done: boolean;\r\n  orgName: string | undefined;\r\n};\r\n\r\nexport type MondayItemPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n  assigneeColumnID: string | undefined;\r\n  statusColumnID: string | undefined;\r\n};\r\n\r\nexport type TaskPreviewData =\r\n  | AsanaTaskPreviewData\r\n  | JiraIssuePreviewData\r\n  | LinearIssuePreviewData\r\n  | MondayItemPreviewData;\r\n\r\nexport enum LinearIssueStateTypes {\r\n  BACKLOG = 'backlog',\r\n  TODO = 'unstarted',\r\n  IN_PROGRESS = 'started',\r\n  DONE = 'completed',\r\n  CANCELED = 'canceled',\r\n}\r\n\r\nexport type LinearConnectionPreferences = {\r\n  teamID: string;\r\n  projectID?: string;\r\n};\r\n\r\nexport type APICordTokenData = {\r\n  session_id: UUID;\r\n};\r\n\r\nexport type AppServerAuthTokenData = {\r\n  app_id: UUID;\r\n};\r\n\r\nexport type CustomerServerAuthTokenData = {\r\n  customer_id: UUID;\r\n};\r\n\r\nexport type NotificationChannels = {\r\n  slack: boolean;\r\n  email: boolean;\r\n};\r\n\r\nexport type CustomLinks = {\r\n  learnMore?: string | null;\r\n  upgradePlan?: string | null;\r\n  leaveFeedback?: string | null;\r\n};\r\n\r\nexport type ThirdPartyAuth = 'slack' | 'google' | 'ms-teams';\r\n\r\nexport type OutboundNotificationType =\r\n  | 'slack'\r\n  | 'email'\r\n  | 'slackEmailMatched'\r\n  | 'sharedToSlackChannel'\r\n  | 'sharedToEmail';\r\n\r\nexport type { Point2D } from '@cord-sdk/types';\r\n\r\nexport type CustomNUXStepContent = {\r\n  title: string | null;\r\n  text: string | null;\r\n  imageURL: string | null;\r\n};\r\n\r\nexport type CustomNUX = {\r\n  initialOpen: CustomNUXStepContent | null;\r\n  welcome: CustomNUXStepContent | null;\r\n};\r\n\r\nexport type SlackOAuthLinkOrgState = {\r\n  data: {\r\n    userID: string;\r\n    orgID: string;\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'link_org';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthConsoleUserState = {\r\n  data: {\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'console_user';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthDecodeState =\r\n  | SlackOAuthLinkOrgState\r\n  | SlackOAuthConsoleUserState;\r\n\r\nexport type ThreadSupportStatusType = 'open' | 'closed';\r\n\r\nexport type UserWithOrgDetails = {\r\n  id: UUID;\r\n  externalID: string;\r\n  displayName: string;\r\n  fullName: string;\r\n  name: string | null;\r\n  shortName: string | null;\r\n  profilePictureURL: string | null;\r\n  metadata: EntityMetadata;\r\n  canBeNotifiedOnSlack: boolean;\r\n};\r\n\r\nexport type OutboundNotificationMetadata =\r\n  OutboundNotificationMetadataByType[OutboundNotificationType];\r\n\r\n// when adding new fields to existing metadata types, either make the new\r\n// fields optional or run a backfill migration\r\nexport type OutboundNotificationMetadataByType = {\r\n  slack: Record<string, never>;\r\n  email: Record<string, never>;\r\n  slackEmailMatched: Record<string, never>;\r\n  sharedToSlackChannel: {\r\n    type: 'sharedToSlackChannel';\r\n    targetSlackChannelID: string;\r\n  };\r\n  sharedToEmail: {\r\n    type: 'sharedToEmail';\r\n    targetEmail: string;\r\n  };\r\n};\r\n\r\n// Internal threads are the standard mirrored Slack threads\r\n// that users can share to their linked Slack org.\r\n// Support threads are the ones mirrored to a vendor's Slack org\r\n// and support channel after a support bot is mentioned.\r\nexport type ThreadMirrorType = 'internal' | 'support';\r\n\r\nexport type Tier = 'prod' | 'staging' | 'test' | 'dev';\r\n\r\nexport type SharedToSlackInfo = {\r\n  channel: string | null;\r\n  slackURL: string | null;\r\n};\r\n\r\nexport type ThreadMode =\r\n  // Only shows the first message, and optionally the number of replies\r\n  | 'collapsed'\r\n  // Can show all messages, also includes a composer to add a new message\r\n  | 'inline'\r\n  // Used in the sidebar only - thread spans across the whole page\r\n  | 'fullHeight'\r\n  // The initial state when we are creating a new thread - composer only\r\n  | 'newThread';\r\n\r\nexport type Announcement =\r\n  | 'welcome'\r\n  | 'completeProfile'\r\n  | 'connectOrgToSlack'\r\n  | 'linkProfileToSlack'\r\n  | 'slackIsConnected';\r\n\r\nexport type ReferencedUserData = { id: UUID; name: string };\r\n\r\nconst DEPLOYMENT_TYPES = ['sdk'] as const;\r\n\r\nexport type DeploymentType = (typeof DEPLOYMENT_TYPES)[number];\r\n\r\nexport function isDeploymentType(s: string): s is DeploymentType {\r\n  if (DEPLOYMENT_TYPES.includes(s as DeploymentType)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function toDeploymentType(\r\n  s: string | null | undefined,\r\n): DeploymentType | null {\r\n  if (s && isDeploymentType(s)) {\r\n    return s;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport type ApplicationEnvironment =\r\n  | 'production'\r\n  | 'staging'\r\n  | 'sample' // console self-serve test (not paying) app\r\n  | 'sampletoken' // sample token apps created for docs integration guide and demo apps opensource repos (wiped periodically)\r\n  | 'demo'; // temporary token apps created for docs and cord.com demo apps (wiped periodically)\r\n\r\n// NB you there are some classes of token you might expect are environments,\r\n// but actually all belong to one appID:\r\n// The docs live components are all in the CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID app\r\n// The e2e tests are all in the CORD_AUTOMATED_TESTS_APPLICATION_ID app\r\n// The CORD_PLAYGROUND_APPLICATION_ID has been retired from service\r\n\r\nexport type EmptyJsonObject = Record<string, never>;\r\n\r\nexport type CustomerType = 'verified' | 'sample';\r\n\r\nexport type CustomerImplementationStage =\r\n  | 'launched'\r\n  | 'implementing'\r\n  | 'proof_of_concept'\r\n  | 'inactive';\r\n\r\nexport type AdminCRTComingFrom = 'them' | 'us';\r\n\r\nexport type AdminCRTDecision = 'done' | 'accepted' | 'rejected' | 'pending';\r\n\r\nexport type AdminCRTCommunicationStatus =\r\n  | 'none'\r\n  | 'request_acked'\r\n  | 'decision_sent'\r\n  | 'decision_acked';\r\n\r\nexport type AdminCRTIssueType = 'request' | 'bug' | 'onboarding_step';\r\n\r\nexport type AdminCRTPriority = 'blocker' | 'high' | 'low';\r\n\r\nexport type AdminCRTCustomerIssue = {\r\n  customerID: UUID;\r\n  title: string;\r\n  body: string;\r\n  comingFrom: AdminCRTComingFrom;\r\n  decision: AdminCRTDecision;\r\n  communicationStatus: AdminCRTCommunicationStatus;\r\n  lastTouch?: string;\r\n  type: AdminCRTIssueType;\r\n  priority: AdminCRTPriority;\r\n  externallyVisible: boolean;\r\n  assignee?: UUID;\r\n};\r\n\r\nexport type DocsCachedEmbedding = {\r\n  url: string;\r\n  plaintext: string;\r\n  embedding?: OpenAI.CreateEmbeddingResponse | undefined;\r\n};\r\n\r\nexport type CordDotComCachedEmbedding = DocsCachedEmbedding & {\r\n  title: string;\r\n};\r\n\r\n// This is for the mouse move events within iframes\r\nexport type IframeMouseMoveData = { x: number; y: number; frame_id: string };\r\n\r\nexport type Maybe<T> = T | null | undefined;\r\nexport type Nullable<T> = T | null;\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'email_notifications',\r\n  timestamps: false,\r\n})\r\nexport class EmailOutboundNotificationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  email!: string;\r\n}\r\n", "import addrs from 'email-addresses';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport replyParser from 'node-email-reply-parser';\r\nimport type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\n\r\n// Parses an email address such as \"sponge@bob.com\" or\r\n// \"Sponge Bob <sponge@bob.com>\"\r\nexport function parseEmailAddress(emailAddress: string): addrs.ParsedMailbox {\r\n  const parsedAddress = addrs\r\n    .parseAddressList(emailAddress)\r\n    ?.find((email): email is addrs.ParsedMailbox => email.type === 'mailbox');\r\n  if (parsedAddress === undefined) {\r\n    throw new Error(`failed to parse email address: ${emailAddress}`);\r\n  }\r\n  return parsedAddress;\r\n}\r\n\r\n/**\r\n * Takes a sender email address and a notification ID, and returns a reply-to\r\n * email address such that replies to that address will be appended to the\r\n * thread associated with the notification ID.\r\n */\r\nexport function getReplyToEmailAddress(\r\n  logger: Logger,\r\n  senderEmailAddress: string,\r\n  notificationId: UUID,\r\n): string {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(senderEmailAddress);\r\n\r\n    // Applications can use a white-label (non-@cord.fyi) sender email. That's\r\n    // fine, but replies MUST come via cord.fyi; those emails get routed through\r\n    // SendGrid, who call a webhook (search this repo for\r\n    // SendGridWebhookHandler) so we can handle them and e.g. append reply\r\n    // contents to the appropriate thread.\r\n    const replyToAddress = `${parsedAddress.local}-${notificationId}@cord.fyi`;\r\n    if (parsedAddress.name) {\r\n      return `${parsedAddress.name} <${replyToAddress}>`;\r\n    }\r\n    return replyToAddress;\r\n  } catch (e) {\r\n    logger.logException('failed to parse email address', e);\r\n    return senderEmailAddress;\r\n  }\r\n}\r\n\r\n// If email name ends with \"-UUID\" then it returns that UUID\r\nexport function extractCordEmailUUID(emailAddress: string): UUID | null {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(emailAddress);\r\n    const uuidLength = 36;\r\n    // check that the address ends with a dash \"-\" and then 36 UUID characters\r\n    if (\r\n      parsedAddress.local.length < 1 + uuidLength ||\r\n      parsedAddress.local.slice(-(1 + uuidLength))[0] !== '-'\r\n    ) {\r\n      return null;\r\n    }\r\n    const maybeUUID = parsedAddress.local.slice(-uuidLength);\r\n    return isUUID.default(maybeUUID) ? maybeUUID : null;\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'failed to parse email address',\r\n      e,\r\n      {},\r\n      undefined,\r\n      'warn',\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function emailTextToMessageContent(\r\n  emailText: string,\r\n  attachments: string,\r\n): MessageContent {\r\n  // Unlike Gmail, Mac Mail does not automatically add a standard email\r\n  // signature separator like '--' at the begining of a signature block\r\n  // so our library was not detecting it as such.\r\n  // As a result, we were sending the signature as part of the reply message.\r\n\r\n  // To overcome this, we break up the email content into fragments and\r\n  // disregard anything that comes after the quoted text reply.\r\n  // Unfortunately, this will still be an issue for users who add their\r\n  // signatures above the quoted text and have no signature separator.\r\n  const replyFragments = replyParser(emailText).getFragments();\r\n  let replyBeforeQuotedText = '';\r\n  for (const fragment of replyFragments) {\r\n    if (fragment.isQuoted()) {\r\n      break;\r\n    }\r\n    replyBeforeQuotedText += fragment.getContent();\r\n  }\r\n\r\n  let replyText = replyParser(replyBeforeQuotedText).getVisibleText({\r\n    // from the docs of replyParser:\r\n    // Using aggressive mode runs the risk of losing visible lines which are\r\n    // interspersed with quoted lines, but is useful when parsing e.g. emails\r\n    // from a 'reply by email' feature which contain a large block of quoted\r\n    // text.\r\n    aggressive: true,\r\n  });\r\n\r\n  if (Number(attachments) > 0) {\r\n    replyText = replyText + `\\n(Unable to display attached files)`;\r\n  }\r\n\r\n  return replyText\r\n    .split(/\\r?\\n/)\r\n    .filter((l) => l.length > 0)\r\n    .map((line) => ({\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [{ text: line }],\r\n    }));\r\n}\r\n\r\nexport async function getNotification(\r\n  toAddress: string,\r\n  inReplyToHeader: string | undefined,\r\n  fromEmail: string,\r\n  logger: Logger,\r\n) {\r\n  const notificationID = extractCordEmailUUID(toAddress);\r\n  if (notificationID) {\r\n    return await EmailOutboundNotificationEntity.findOne({\r\n      where: { id: notificationID },\r\n    });\r\n  }\r\n\r\n  if (inReplyToHeader) {\r\n    // Some mail clients, like Hubspot, do not respect the Reply-To email header\r\n    // and send their reply to the From header, which does not contain our notification\r\n    // ID.  In that case, we can try and pull out the ID we set in the 'Message-ID'\r\n    // header, which will now be the 'In-Reply-To' header in the incoming email\r\n    // (see getThreadingHeaders fn: these are headers which are used to thread\r\n    // messages nicely in email clients). This will either be the notification ID\r\n    // or thread ID, depending on whether this was a first notification or not.\r\n    // With the combination of the thread ID and the email this message came from,\r\n    // we should be able to find the Notification.\r\n    logger.debug(\r\n      'Unable to find notificationId in toAddress, will try to find from inReplyTo header',\r\n      {\r\n        toAddress,\r\n        inReplyToHeader,\r\n        fromEmail,\r\n      },\r\n    );\r\n\r\n    const threadOrNotificationID = extractCordEmailUUID(inReplyToHeader);\r\n\r\n    // First see if the ID we found is a notification ID\r\n    if (threadOrNotificationID) {\r\n      const notification = await EmailOutboundNotificationEntity.findOne({\r\n        where: { id: threadOrNotificationID },\r\n      });\r\n      if (notification) {\r\n        return notification;\r\n      }\r\n    }\r\n\r\n    let parsedFromEmail;\r\n\r\n    try {\r\n      const email = parseEmailAddress(fromEmail);\r\n      parsedFromEmail = email.address;\r\n    } catch (e: any) {\r\n      logger.warn('Error parsing from email', e);\r\n    }\r\n\r\n    // If we're still here, it wasn't a notification ID (or the notification has\r\n    // disappeared for some reason).  Assume it's a thread ID:\r\n    if (threadOrNotificationID && parsedFromEmail) {\r\n      return await EmailOutboundNotificationEntity.findOne({\r\n        where: { threadID: threadOrNotificationID, email: parsedFromEmail },\r\n      });\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getHeader(key: string, input: string) {\r\n  const pattern = new RegExp(`^${key}: (.+)$`, 'gm');\r\n  const match = pattern.exec(input);\r\n\r\n  return match?.[1];\r\n}\r\n\r\nexport type RelevantHeaders =\r\n  | Record<'messageID' | 'inReplyTo' | 'autoSubmitted', string | undefined>\r\n  | undefined;\r\n\r\n// We could use the mailparser npm package to do this but it would also require\r\n// adding another library as middleware (https://github.com/nodemailer/mailparser/issues/253)\r\n// and it didn't seem worth it for grabbing a couple of strings\r\n// Add more headers you might expect to find if you need them!\r\nexport function parseRelevantHeaders(headersString: string): RelevantHeaders {\r\n  // This is a specific ID for this incoming email and would be something like:\r\n  // '<CACnco=B99bM4+YPHkUNqgPT8azMcYCROss2BdPgA7pAoqW8egw@mail.gmail.com>',\r\n  const messageID = getHeader('Message-Id', headersString);\r\n  // This should be the Message-ID we set on the original email notification, which\r\n  // contains the threadID. See getThreadingHeaders.\r\n  const inReplyTo = getHeader('In-Reply-To', headersString);\r\n  // This is a header that should be set if a reply is automated, e.g. an OOO\r\n  const autoSubmitted = getHeader('Auto-Submitted', headersString);\r\n\r\n  return { messageID, inReplyTo, autoSubmitted };\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID, JsonObject, Tier } from 'common/types/index.ts';\r\nimport type { Session } from 'server/src/auth/index.ts';\r\n\r\n@Table({\r\n  tableName: 'events',\r\n  timestamps: false,\r\n})\r\nexport class EventEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  // The unique load of the page/DOM instance (i.e. window/DOM object) where\r\n  // the event was generated\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  pageLoadID!: UUID;\r\n\r\n  // The unique id of the extension installation\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  installationID!: UUID | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  version!: string | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  utmParameters!: Session['utmParameters'] | null;\r\n\r\n  // The logged-in user when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID | null;\r\n\r\n  // The user profile when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID | null;\r\n\r\n  // The platformApplicationID when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  // A monotically increasing (and usually sequential) index starting\r\n  // from zero at the beginning of the page that should help clarify\r\n  // the order of events in the case that the timestamps are inscrutable or too\r\n  // close to call.\r\n  @Column({\r\n    type: DataTypes.NUMBER,\r\n  })\r\n  eventNumber!: number;\r\n\r\n  // The timestamp as reported by the client (untrustworthy)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  clientTimestamp!: Date;\r\n\r\n  // The timestamp for when the event reached the server (not\r\n  // guaranteed to be the time the event happened due to batching\r\n  // on the client)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  serverTimestamp!: Date;\r\n\r\n  // An arbitrary label to differentiate this event\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  type!: string;\r\n\r\n  // An arbitrary data payload to send along with the event. Please\r\n  // be sane about what you log here. Think in 10s of bytes, not in\r\n  // kilobytes or megabytes.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  payload!: JsonObject;\r\n\r\n  // A rich set of characteristics about the browser when the event\r\n  // generated.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: JsonObject;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  tier!: Tier;\r\n}\r\n", "// General sizing\r\nconst XSMALL = 2;\r\nconst SMALL = 4;\r\nconst MEDIUM = 8;\r\nconst LARGE = 16;\r\nconst XLARGE = 24;\r\nconst XXLARGE = 32;\r\nconst XXXLARGE = 48;\r\n\r\nconst AVATAR_BORDER_WIDTH_PX = XSMALL;\r\n\r\nconst CHECKBOX_DEFAULT_SIZE_PX = LARGE;\r\nconst MAIN_CHAT_AVATAR_SIZE_PX = XLARGE + AVATAR_BORDER_WIDTH_PX * 2;\r\nconst MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX = MEDIUM;\r\n\r\nexport const Sizes = {\r\n  // Sidebar\r\n  SIDEBAR_COMPACT_WIDTH: 312, // used when viewport width is <= VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_NORMAL_WIDTH: 416, // used when viewport width is > VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_MAX_WIDTH: 500,\r\n  VIEWPORT_WIDTH_BREAKPOINT: 1440,\r\n\r\n  // Navigation top bar\r\n  NAVIGATION_ITEM_SPACING_COMPACT: 12,\r\n  NAVIGATION_ITEM_SPACING_NORMAL: LARGE,\r\n\r\n  // subtract MEDIUM here, add it to the sidebar App.tsx container paddingBottom, to allow shadows to be visible\r\n  SIDEBAR_BOTTOM_SPACE: 96 - MEDIUM,\r\n\r\n  // Text\r\n  X_SMALL_TEXT_SIZE_PX: 10,\r\n  SMALL_TEXT_SIZE_PX: 12,\r\n  DEFAULT_TEXT_SIZE_PX: 14,\r\n  LARGE_TEXT_SIZE_PX: 18,\r\n  X_LARGE_TEXT_SIZE_PX: 24,\r\n  SMALL_LINE_HEIGHT_PX: 16,\r\n  DEFAULT_LINE_HEIGHT_PX: 20,\r\n  LARGE_LINE_HEIGHT_PX: 24,\r\n  X_LARGE_LINE_HEIGHT_PX: 32,\r\n  BOLD_TEXT_WEIGHT: 700,\r\n  NORMAL_TEXT_WEIGHT: 400,\r\n\r\n  // Spacing\r\n  SMALL_PADDING_PX: 6,\r\n  DEFAULT_PADDING_PX: 12,\r\n\r\n  DEFAULT_BORDER_RADIUS: SMALL,\r\n  LARGE_BORDER_RADIUS: MEDIUM,\r\n  SMALL_BORDER_RADIUS: XSMALL,\r\n\r\n  // Icon\r\n  DEFAULT_ICON_PADDING_PX: 4,\r\n\r\n  // Profile pics\r\n  PAGE_VISITORS_AVATAR_SIZE_PX: XLARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n  MAIN_CHAT_AVATAR_SIZE_PX,\r\n  MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  MESSAGE_LEFT_PADDING:\r\n    MAIN_CHAT_AVATAR_SIZE_PX + MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  AVATAR_BORDER_WIDTH_PX,\r\n  FACEPILE_AVATAR_OVERLAP_SIZE_PX: SMALL,\r\n  NOTIFICATION_FACEPILE_SIZE: LARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n\r\n  // Composer\r\n  COMPOSER_ADD_BUTTON_HEIGHT_PX: XXLARGE,\r\n  COMPOSER_ADD_BUTTON_WIDTH_PX: XXLARGE,\r\n  COMPOSER_HORIZONTAL_PADDING: MEDIUM,\r\n  COMPOSER_VERTICAL_PADDING: 18,\r\n  MAX_COMPOSER_EDITOR_HEIGHT: 448,\r\n\r\n  // Messages\r\n  MESSAGE_BLOCK_BOTTOM_MARGIN: XLARGE,\r\n  MESSAGE_BOTTOM_MARGIN: MEDIUM * 1.5,\r\n  MESSAGE_CONTENTS_TOP_MARGIN: 5,\r\n  MESSAGE_PARAGRAPH_TOP_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_TOP_MARGIN: SMALL,\r\n  MESSAGE_REACTIONS_BOTTOM_MARGIN: -MEDIUM,\r\n  MESSAGE_SEEN_BY_BOTTOM_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_FACEPILE_OVERLAP: 6,\r\n  MESSAGE_PAST_REACTION_HEIGHT: LARGE,\r\n  MESSAGE_ANNOTATION_HEIGHT_PX: 40,\r\n  MESSAGES_KEBAB_MENU_WIDTH_PX: 196,\r\n  MESSAGE_HEIGHT_TRUNCATE_AT_PX: 300,\r\n  MESSAGE_HEIGHT_TRUNCATE_TO_PX: 200,\r\n  INFINITE_SCROLL_THRESHOLD_PX: 400,\r\n  MESSAGE_ATTACHMENT_PLACEHOLDER_HEIGHT_PX: 92,\r\n  // 277 is the height of kebab menu for your own message, with one line of 'seen by'\r\n  // We set the minHeight of the share to slack menu to this\r\n  MIN_KEBAB_SLACK_MENU_HEIGHT: 277,\r\n  // Distance between kebab menu and kebab menu icon\r\n  KEBAB_MENU_OFFSET: SMALL,\r\n\r\n  // Bullets / numbered / todo lists\r\n  BULLET_PADDING_LEFT: CHECKBOX_DEFAULT_SIZE_PX + MEDIUM,\r\n\r\n  // Todo - feed this into the menu itself (prob via more dynamic svg)\r\n  MESSAGE_MENU_HEIGHT: 32,\r\n\r\n  // Tooltip\r\n  TOOLTIP_HORIZONTAL_PADDING_PX: MEDIUM,\r\n  TOOLTIP_VERTICAL_PADDING_PX: SMALL,\r\n  TOOLTIP_LINE_HEIGHT_PX: LARGE,\r\n  TOOLTIP_MAX_WIDTH_PX: 180,\r\n  ANNOTATION_TOOLTIP_MAX_WIDTH_PX: 180,\r\n\r\n  // Attachments\r\n  ATTACHMENT_THUMBNAIL_PX: 58,\r\n  PDF_ATTACHMENT_PX: 90,\r\n\r\n  // Modal\r\n  MODAL_SELECT_CHANNELS_MAX_HEIGHT_PX: 240,\r\n\r\n  // ImageModal\r\n  IMAGE_MODAL_SMALL_SCALE: 0.66,\r\n  IMAGE_MODAL_BUTTON_HEIGHT_SCALE_PX: 40,\r\n  IMAGE_MODAL_MENU_MAX_WIDTH_PX: 180,\r\n  IMAGE_MODAL_MENU_TOP_POSITION_PX: 44,\r\n\r\n  // Success Popup\r\n  SUCCESS_POPUP_HEIGHT: 36,\r\n\r\n  // Annotation pointer\r\n  ANNOTATION_POINTER_MIN_GAP_VS_SCREEN_EDGE: MEDIUM,\r\n  ANNOTATION_POINTER_SMALL_SIZE_PX: 34, // 32 + 1 for border on each side, which is included in the svg\r\n\r\n  // Annotation arrow\r\n  ANNOTATION_ARROW_CIRCLE_RADIUS: 4,\r\n  ANNOTATION_ARROW_HORIZONTAL_MARGIN_FOR_TOOLTIP: XXLARGE,\r\n\r\n  // Charts in webpage\r\n  MIN_CHART_SIZE_PX: 50,\r\n  MAX_CHART_CONTAINER_SIZE_RATIO: 1.25,\r\n\r\n  // Login\r\n  LOGIN_BUTTON_WIDTH_PX: 354,\r\n  LOGIN_BUTTON_HEIGHT_PX: 56,\r\n  LOGIN_MARGIN_PX: 56,\r\n  LOGIN_BUTTON_TEXT_SIZE_PX: 18,\r\n  LOGIN_TITLE_TEXT_SIZE_PX: 36,\r\n  EMAIL_PROMPT_HEIGHT_PX: 128,\r\n  EMAIL_PROMPT_INPUT_VERTICAL_PADDING_PX: 14,\r\n\r\n  // Welcome\r\n  WELCOME_PARAGRAPH_MAX_WIDTH_PX: 400,\r\n  WELCOME_VIDEO_MAX_HEIGHT_PX: 300,\r\n  WELCOME_VIDEO_MAX_WIDTH_PX: 600,\r\n\r\n  // Workspace\r\n  WORKSPACE_HORIZONTAL_MARGIN_PX: 56,\r\n  WORKSPACE_VERTICAL_GAP_PX: 40,\r\n  WORKSPACE_VERTICAL_GAP_SMALL_PX: 32,\r\n  WORKSPACE_SMALL_PADDING_PX: 12,\r\n  WORKSPACE_XSMALL_PADDING_PX: 6,\r\n  WORKSPACE_PARAGRAPH_MAX_WIDTH_PX: 480,\r\n  WORKSPACE_WIDTH_PX: 576,\r\n  WORKSPACE_LOGIN_WIDTH_PX: 640,\r\n  WORKSPACE_LOGIN_BUTTON_HEIGHT_PX: 48,\r\n  WORKSPACE_LOGIN_ORG_IMAGE_SIZE_PX: XXXLARGE,\r\n  WORKSPACE_GET_STARTED_STEP_MAX_WIDTH_PX: 290,\r\n  WORKSPACE_GET_STARTED_STEP_MIN_WIDTH_PX: 230,\r\n  RECENTLY_SHARED_MIN_WIDTH_PX: 120,\r\n  RECENTLY_SHARED_MAX_WIDTH_PX: 240,\r\n  UPDATES_MAX_WIDTH_PX: 320,\r\n\r\n  // Extension popup\r\n  EXTENSION_POPUP_WIDTH: 360,\r\n  EXTENSION_POPUP_HEIGHT: 540,\r\n  EXTENSION_POPUP_START_CONVERSATION_BUTTON_HEIGHT: 60,\r\n\r\n  SPINNER_DEFAULT_HEIGHT_PX: 20,\r\n  SPINNER_LARGE_HEIGHT_PX: 40,\r\n  CHECKBOX_DEFAULT_SIZE_PX,\r\n\r\n  DEFAULT_ICON_SIZE: 24,\r\n  SMALL_ICON_SIZE: 16,\r\n  X_SMALL_ICON_SIZE: 12,\r\n\r\n  DEFAULT_BORDER_WIDTH: 1,\r\n\r\n  COLLAPSED_THREAD_MESSAGE_HEIGHT: 44,\r\n  ADD_THREAD_BUTTONS_HEIGHT: 60,\r\n  GAP_BETWEEN_THREADS: XLARGE,\r\n  GAP_BETWEEN_GROUPED_THREADS: MEDIUM,\r\n  LOAD_OLDER_MESSAGES_BUTTON_HEIGHT: 33,\r\n\r\n  THREAD_MESSAGE_PADDING: MEDIUM,\r\n\r\n  SCREENSHOT_BLUR_PX: 10,\r\n\r\n  //Screen Size for Embed\r\n\r\n  MINIMUM_SCREEN_WIDTH: 600,\r\n  MINIMUM_SCREEN_HEIGHT: 600,\r\n\r\n  // Puppet Auth\r\n  PUPPET_MODAL_TOP_MARGIN: 60,\r\n  PUPPET_MODAL_TOP_PADDING: 36,\r\n  PUPPET_MODAL_PADDING: 40,\r\n  PUPPET_MODAL_VERTICAL_PADDING_BUTTON: 10,\r\n  PUPPET_MODAL_VERTICAL_PADDING_TEXT_FIELD: 10,\r\n\r\n  // Launcher / Close sidebar button\r\n  LAUNCHER_ICON_HEIGHT: 60,\r\n  LAUNCHER_ICON_WIDTH: 60,\r\n  CLOSE_SIDEBAR_ICON_HEIGHT: 60,\r\n  CLOSE_SIDEBAR_ICON_WIDTH: 60,\r\n  LAUNCHER_FIXED_RIGHT_LENGTH: 16,\r\n  LAUNCHER_FIXED_BOTTOM_LENGTH: 16,\r\n\r\n  XSMALL,\r\n  SMALL,\r\n  MEDIUM,\r\n  LARGE,\r\n  XLARGE,\r\n  XXLARGE,\r\n  XXXLARGE,\r\n};\r\n\r\nexport type FontSize =\r\n  | 'xSmall'\r\n  | 'small'\r\n  | 'default'\r\n  | 'large'\r\n  | 'xLarge'\r\n  | 'inherit';\r\nexport const FontSizes: {\r\n  [fontSize in FontSize]: number | string;\r\n} = {\r\n  xSmall: Sizes.X_SMALL_TEXT_SIZE_PX,\r\n  small: Sizes.SMALL_TEXT_SIZE_PX,\r\n  default: Sizes.DEFAULT_TEXT_SIZE_PX,\r\n  large: Sizes.LARGE_TEXT_SIZE_PX,\r\n  xLarge: Sizes.X_LARGE_TEXT_SIZE_PX,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const LineHeights: { [fontSize in FontSize]: string } = {\r\n  xSmall: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  small: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  default: `${Sizes.DEFAULT_LINE_HEIGHT_PX}px`,\r\n  large: `${Sizes.LARGE_LINE_HEIGHT_PX}px`,\r\n  xLarge: `${Sizes.X_LARGE_LINE_HEIGHT_PX}px`,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const MESSAGE_BLOCK_AVATAR_SIZE = 'l';\r\n\r\nexport const DEFAULT_EMAIL_LOGO_WIDTH = '140';\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  CustomerImplementationStage,\r\n  CustomerType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\nexport type Addons = { [key: string]: string | number | boolean };\r\nexport type BillingType = 'stripe' | 'manual';\r\nexport type PricingTier = 'free' | 'pro' | 'scale';\r\n@Table({\r\n  tableName: 'customers',\r\n  timestamps: false,\r\n})\r\nexport class CustomerEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('verified', 'sample'),\r\n    defaultValue: 'verified',\r\n    allowNull: false,\r\n  })\r\n  type!: CustomerType;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_s3_bucket'] ?? false;\r\n    },\r\n  })\r\n  enableCustomS3Bucket!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_segment_write_key'] ?? false;\r\n    },\r\n  })\r\n  enableCustomSegmentWriteKey!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['customer_support'] ?? false;\r\n    },\r\n  })\r\n  enableCustomerSupport!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'launched',\r\n      'implementing',\r\n      'proof_of_concept',\r\n      'inactive',\r\n    ),\r\n    allowNull: false,\r\n    defaultValue: 'proof_of_concept',\r\n  })\r\n  implementationStage!: CustomerImplementationStage;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  launchDate!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  slackChannel!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  signupCoupon!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  stripeCustomerID!: CreationOptional<string | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'pro', 'scale'),\r\n    allowNull: true,\r\n    defaultValue: 'free',\r\n  })\r\n  pricingTier!: CreationOptional<PricingTier>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('active', 'inactive'),\r\n    allowNull: true,\r\n    defaultValue: 'inactive',\r\n  })\r\n  billingStatus!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('stripe', 'manual'),\r\n    allowNull: true,\r\n    defaultValue: null,\r\n  })\r\n  billingType!: CreationOptional<BillingType | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  addons!: CreationOptional<Addons>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  renewalDate!: CreationOptional<Date | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: [],\r\n    allowNull: false,\r\n  })\r\n  planDescription!: CreationOptional<string[]>;\r\n}\r\n", "import { format } from 'winston';\r\nimport stringify from 'fast-json-stable-stringify';\r\n\r\nconst MESSAGE = Symbol.for('message');\r\n\r\n// This defines our custom log format for logging to the console.\r\n// It looks like `<LOGLEVEL> <TIMESTAMP>: <MESSAGE>[ <META>]`\r\n// where LOGLEVEL is a single capital letter (`EWIHVDS` for error, warn,\r\n// info, http, verbose, debug, silly) and META is a JSON object with\r\n// additional fields, such as `process` (`server`), `version` (taken from\r\n// package.json) etc.\r\n\r\nexport const flatFormat = format((info) => {\r\n  const { level, timestamp, message, splat: _, ...meta } = info;\r\n\r\n  let stringifiedMeta: string;\r\n  try {\r\n    stringifiedMeta = stringify(meta);\r\n  } catch (err) {\r\n    stringifiedMeta = `! stringify exception: ${err}`;\r\n  }\r\n\r\n  const formattedMessage = `${level\r\n    .substr(0, 1)\r\n    .toUpperCase()} ${timestamp}: ${message} ${stringifiedMeta}`;\r\n\r\n  (info as any)[MESSAGE] = formattedMessage;\r\n  return info;\r\n});\r\n", "{\r\n  \"name\": \"radical\",\r\n  \"version\": \"1.1093.0\",\r\n  \"description\": \"The monorepo for Radical\",\r\n  \"main\": \"index.js\",\r\n  \"repository\": \"ssh://radical@vault.phacility.com/source/monorepo.git\",\r\n  \"author\": \"jack@getradical.co\",\r\n  \"license\": \"NONE\",\r\n  \"private\": true,\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\r\n    \"migrate\": \"sequelize-cli db:migrate\",\r\n    \"migrate-down\": \"sequelize-cli db:migrate:undo\",\r\n    \"build\": \"npm run tsc-once && ./build/index.mjs --mode=production --clean\",\r\n    \"build-demo-apps\": \"demo-apps/build-demo-apps.sh\",\r\n    \"build-sample-apps\": \"npm run build-demo-apps\",\r\n    \"check-database-schema\": \"./build/index.mjs --mode=development --target=scripts/check-database-schema.ts && ./dist/scripts/check-database-schema.js --check\",\r\n    \"codegen\": \"node ./build/index.mjs --mode=development --target=scripts/generate-graphql-types.ts && node ./dist/scripts/generate-graphql-types.js && node ./scripts/generate-dayjs.mjs > opensource/sdk-js/packages/react/common/dayjs.ts\",\r\n    \"docs-codegen\": \"./scripts/docs-codegen.sh\",\r\n    \"local-dev\": \"./ops/local-dev.sh\",\r\n    \"watch\": \"./build/index.mjs --mode=development --clean && (./build/index.mjs --mode=development --watch --skipInitialBuild & npm run start-external-dev & npm run start-local-s3 & nodemon --config nodemon-server.json & nodemon --config nodemon-docs-server.json & npm run tsc)\",\r\n    \"watch-external\": \"./build/index.mjs --mode=development --watch --target=external\",\r\n    \"watch-server\": \"./build/index.mjs --mode=development --watch --target=server\",\r\n    \"db-ssh-tunnel\": \"lsof -i '@localhost:15432' >/dev/null || ssh -f -N -L 15432:database-prod-read.int.cord.com:5432 zero\",\r\n    \"db-ssh-tunnel-write\": \"lsof -i '@localhost:25432' >/dev/null || ssh -f -N -L 25432:database-prod.int.cord.com:5432 zero\",\r\n    \"start-external-dev\": \"http-server ./dist/external -c-1 -a :: --silent --port 8179 --cors --ssl --key ./localhost/localhost.key --cert ./localhost/localhost.crt\",\r\n    \"start-local-s3\": \"cat ./localhost/localhost.key ./localhost/localhost.crt > ./localhost/localhost.packed && cd ops && docker-compose up localstack\",\r\n    \"start-postgres\": \". ./.env && export POSTGRES_USER POSTGRES_DB POSTGRES_PORT POSTGRES_PASSWORD && cd ops && docker-compose up postgres\",\r\n    \"start-redis\": \"cd ops && docker-compose up redis\",\r\n    \"start-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/server/index.js\",\r\n    \"start-server-dev-snapshots\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps --heapsnapshot-signal=SIGUSR2 ./dist/server/index.js\",\r\n    \"start-server-prod\": \"node -r dotenv/config dist/generic/server/index.js\",\r\n    \"start-asyncWorker-dev\": \"node -r dotenv/config --enable-source-maps ./dist/asyncWorker/asyncWorker.js\",\r\n    \"start-asyncWorker-prod\": \"node -r dotenv/config dist/generic/asyncWorker/asyncWorker.js\",\r\n    \"start-docs-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/docs/server/index.js\",\r\n    \"start-docs-server-prod\": \"node -r dotenv/config dist/generic/docs/server/index.js\",\r\n    \"tsc\": \"tsc --incremental false --noEmit --skipLibCheck --watch --preserveWatchOutput\",\r\n    \"tsc-once\": \"tsc --incremental false --noEmit --skipLibCheck\",\r\n    \"wipe-postgres\": \"cd ops && POSTGRES_USER= POSTGRES_DB= POSTGRES_PASSWORD= docker-compose down --volumes\",\r\n    \"install\": \"find node_modules/@sentry/ -type f -print0 | grep -z -E '\\\\.(js|js\\\\.map|d\\\\.ts)$' | if sed --version >/dev/null 2>&1 ; then xargs -0 sed --in-place 's/\\\\b__SENTRY__\\\\b/_CORDSNTRY/g;'; else xargs -0 sed -i '' -E 's/[[:<:]]__SENTRY__[[:>:]]/_CORDSNTRY/g;'; fi\",\r\n    \"postinstall\": \"patch-package\",\r\n    \"repl\": \"./build/index.mjs --mode=development --target=repl && node ./dist/repl/index.js\",\r\n    \"generate-docs-embeddings\": \"./build/index.mjs --mode=development --target=scripts/docs-generate-search-data.ts && ./dist/scripts/docs-generate-search-data.js\",\r\n    \"extract-demo-apps-to-sandpack-object\": \"./build/index.mjs --mode=development --target=scripts/extract-demo-apps-to-sandpack-file-object.ts && ./dist/scripts/extract-demo-apps-to-sandpack-file-object.js\",\r\n    \"prepare\": \"[ \\\"$(git config core.hooksPath)\\\" = \\\".githooks\\\" ] && git config --unset core.hooksPath ; ln -s ../../.githooks/prepare-commit-msg .git/hooks/ > /dev/null 2>&1 || true\"\r\n  },\r\n  \"jest\": {\r\n    \"extensionsToTreatAsEsm\": [\r\n      \".ts\",\r\n      \".tsx\",\r\n      \".graphql\"\r\n    ],\r\n    \"transform\": {\r\n      \"^.+\\\\.(tsx?$)|(js$)|(graphql$)\": \"<rootDir>/jest/transformer.mjs\"\r\n    },\r\n    \"resolver\": \"<rootDir>/jest/resolver.cjs\",\r\n    \"moduleDirectories\": [\r\n      \"<rootDir>\",\r\n      \"node_modules\"\r\n    ],\r\n    \"setupFiles\": [\r\n      \"<rootDir>/jest/setup-jest-env.js\"\r\n    ],\r\n    \"testPathIgnorePatterns\": [\r\n      \"/node_modules/\",\r\n      \"<rootDir>/dist/\",\r\n      \"<rootDir>/screenshotsDiff\",\r\n      \"<rootDir>/opensource/\"\r\n    ],\r\n    \"transformIgnorePatterns\": [\r\n      \"/node_modules/\"\r\n    ]\r\n  },\r\n  \"workspaces\": [\r\n    \"opensource/sdk-js/packages/*\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@apollo/client\": \"~3.10.4\",\r\n    \"@auth0/auth0-react\": \"^1.8.0\",\r\n    \"@aws-sdk/client-auto-scaling\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudfront\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudwatch-logs\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ec2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ecr\": \"^3.363.0\",\r\n    \"@aws-sdk/client-elastic-load-balancing-v2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-iam\": \"^3.363.0\",\r\n    \"@aws-sdk/client-s3\": \"^3.363.0\",\r\n    \"@aws-sdk/client-secrets-manager\": \"^3.363.0\",\r\n    \"@aws-sdk/credential-provider-node\": \"^3.363.0\",\r\n    \"@codesandbox/sandpack-react\": \"^2.6.9\",\r\n    \"@emotion/react\": \"^11.11.1\",\r\n    \"@emotion/server\": \"^11.10.0\",\r\n    \"@emotion/styled\": \"^11.11.0\",\r\n    \"@floating-ui/react-dom\": \"^1.3.0\",\r\n    \"@giphy/js-fetch-api\": \"^5.4.0\",\r\n    \"@giphy/react-components\": \"^9.4.1\",\r\n    \"@graphql-tools/schema\": \"^8.5.0\",\r\n    \"@graphql-tools/utils\": \"^8.13.1\",\r\n    \"@heroicons/react\": \"^2.0.18\",\r\n    \"@launchdarkly/node-server-sdk\": \"^8.2.4\",\r\n    \"@leeoniya/ufuzzy\": \"^0.7.0\",\r\n    \"@material-ui/core\": \"^4.12.4\",\r\n    \"@material-ui/styles\": \"^4.11.5\",\r\n    \"@mui/material\": \"^5.13.7\",\r\n    \"@phosphor-icons/react\": \"^2.0.15\",\r\n    \"@pyroscope/nodejs\": \"^0.3.11\",\r\n    \"@radix-ui/react-label\": \"^2.0.2\",\r\n    \"@radix-ui/react-select\": \"^2.0.0\",\r\n    \"@radix-ui/react-slot\": \"^1.0.2\",\r\n    \"@radix-ui/react-tooltip\": \"^1.0.7\",\r\n    \"@segment/analytics-node\": \"^2.0.0\",\r\n    \"@sendgrid/mail\": \"^8.1.0\",\r\n    \"@sentry/browser\": \"^7.57.0\",\r\n    \"@sentry/node\": \"^7.59.3\",\r\n    \"@sentry/react\": \"^7.57.0\",\r\n    \"@sentry/tracing\": \"^7.59.3\",\r\n    \"@sentry/types\": \"^7.59.3\",\r\n    \"@slack/events-api\": \"^3.0.1\",\r\n    \"@slack/web-api\": \"6.11.1\",\r\n    \"@slack/webhook\": \"^7.0.2\",\r\n    \"@tanstack/react-query\": \"^4.32.6\",\r\n    \"@tanstack/react-virtual\": \"^3.5.0\",\r\n    \"@types/blueimp-md5\": \"^2.7.0\",\r\n    \"@types/emoji-js\": \"^3.5.2\",\r\n    \"@types/jsdom\": \"^16.2.5\",\r\n    \"@types/parse5\": \"^7.0.0\",\r\n    \"@types/ua-parser-js\": \"^0.7.36\",\r\n    \"@types/valid-data-url\": \"^2.0.0\",\r\n    \"@types/wcag-contrast\": \"^3.0.0\",\r\n    \"ajv\": \"^8.11.0\",\r\n    \"ajv-formats\": \"^2.1.1\",\r\n    \"apollo-server-core\": \"^3.12.1\",\r\n    \"apollo-server-express\": \"^3.12.1\",\r\n    \"at-least-node\": \"^1.0.0\",\r\n    \"auth0\": \"^3.7.2\",\r\n    \"axios\": \"^1.6.8\",\r\n    \"backo2\": \"^1.0.2\",\r\n    \"bluebird\": \"^3.7.2\",\r\n    \"blueimp-md5\": \"^2.18.0\",\r\n    \"buffer\": \"^5.6.0\",\r\n    \"cheerio\": \"^1.0.0-rc.12\",\r\n    \"classnames\": \"^2.5.1\",\r\n    \"cookie\": \"^0.4.1\",\r\n    \"cookie-parser\": \"^1.4.6\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"dataloader\": \"^2.0.0\",\r\n    \"dayjs\": \"^1.11.11\",\r\n    \"dockerode\": \"^3.3.0\",\r\n    \"dotenv\": \"^8.2.0\",\r\n    \"email-addresses\": \"^5.0.0\",\r\n    \"emoji-js\": \"^3.8.0\",\r\n    \"emoji-picker-element\": \"^1.16.0\",\r\n    \"express\": \"^4.19.2\",\r\n    \"express-basic-auth\": \"^1.2.0\",\r\n    \"fast-json-stable-stringify\": \"^2.1.0\",\r\n    \"form-data\": \"^3.0.1\",\r\n    \"framer-motion\": \"^6.5.1\",\r\n    \"free-email-domains\": \"^1.2.4\",\r\n    \"graphql\": \"^15.8.0\",\r\n    \"graphql-iso-date\": \"^3.6.1\",\r\n    \"graphql-redis-subscriptions\": \"^2.5.0\",\r\n    \"graphql-subscriptions\": \"^2.0.0\",\r\n    \"graphql-tag\": \"^2.12.6\",\r\n    \"graphql-type-json\": \"^0.3.2\",\r\n    \"graphql-type-uuid\": \"^0.2.0\",\r\n    \"handlebars\": \"^4.7.7\",\r\n    \"highcharts\": \"^10.2.1\",\r\n    \"highcharts-react-official\": \"^3.1.0\",\r\n    \"html-entities\": \"^2.1.0\",\r\n    \"i18next\": \"^23.8.2\",\r\n    \"ioredis\": \"^5.2.2\",\r\n    \"ipaddr.js\": \"^2.2.0\",\r\n    \"is-hotkey\": \"^0.2.0\",\r\n    \"iterall\": \"^1.3.0\",\r\n    \"jose\": \"^4.15.5\",\r\n    \"jotai\": \"^2.6.3\",\r\n    \"js-base64\": \"^3.7.7\",\r\n    \"jsdom\": \"^24.0.0\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"jss\": \"^10.9.0\",\r\n    \"jwks-rsa\": \"^2.0.5\",\r\n    \"jwt-encode\": \"^1.0.1\",\r\n    \"linkify-react\": \"^4.1.3\",\r\n    \"linkifyjs\": \"^4.1.3\",\r\n    \"markdown-to-jsx\": \"^7.4.0\",\r\n    \"multer\": \"^1.4.4-lts.1\",\r\n    \"nanoid\": \"^3.3.6\",\r\n    \"neat-csv\": \"^7.0.0\",\r\n    \"node-cache\": \"^5.1.2\",\r\n    \"node-email-reply-parser\": \"^0.1.4\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"oauth\": \"^0.9.15\",\r\n    \"open\": \"^8.4.2\",\r\n    \"openai\": \"^4.22.0\",\r\n    \"parse5\": \"^7.1.2\",\r\n    \"patch-package\": \"^6.5.1\",\r\n    \"pg\": \"^8.11.5\",\r\n    \"pg-boss\": \"^8.4.2\",\r\n    \"pg-copy-streams\": \"^5.1.1\",\r\n    \"prom-client\": \"^15.1.2\",\r\n    \"query-string\": \"^7.1.3\",\r\n    \"querystring\": \"^0.2.0\",\r\n    \"radash\": \"^11.0.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-bootstrap\": \"^1.6.6\",\r\n    \"react-country-region-selector\": \"^3.6.1\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-helmet\": \"^6.1.0\",\r\n    \"react-i18next\": \"^13.2.2\",\r\n    \"react-jss\": \"^10.9.0\",\r\n    \"react-markdown\": \"^8.0.5\",\r\n    \"react-popper\": \"^2.3.0\",\r\n    \"react-router-dom\": \"^6.8.2\",\r\n    \"react-sticky-box\": \"^2.0.5\",\r\n    \"react-syntax-highlighter\": \"^15.5.0\",\r\n    \"react-window\": \"^1.8.10\",\r\n    \"redlock\": \"^v5.0.0-beta.2\",\r\n    \"reflect-metadata\": \"^0.1.13\",\r\n    \"response-time\": \"^2.3.2\",\r\n    \"sequelize\": \"^6.37.0\",\r\n    \"sequelize-cli\": \"^6.6.1\",\r\n    \"sequelize-typescript\": \"^2.1.6\",\r\n    \"serialize-error\": \"^11.0.3\",\r\n    \"sha.js\": \"^2.4.11\",\r\n    \"sharp\": \"^0.32.6\",\r\n    \"slack-markdown\": \"0.1.1\",\r\n    \"slate\": \"^0.100.0\",\r\n    \"slate-history\": \"^0.100.0\",\r\n    \"slate-hyperscript\": \"^0.100.0\",\r\n    \"slate-react\": \"^0.100.1\",\r\n    \"stripe\": \"^15.4.0\",\r\n    \"subscriptions-transport-ws\": \"^0.9.19\",\r\n    \"supertest\": \"^6.1.6\",\r\n    \"typed-emitter\": \"^1.3.1\",\r\n    \"ua-parser-js\": \"^1.0.33\",\r\n    \"url\": \"^0.11.0\",\r\n    \"url-pattern\": \"^1.0.3\",\r\n    \"use-sync-external-store\": \"^1.2.0\",\r\n    \"uuid\": \"^8.3.2\",\r\n    \"valid-data-url\": \"^3.0.0\",\r\n    \"validator\": \"^13.7.0\",\r\n    \"wcag-contrast\": \"^3.0.0\",\r\n    \"winston\": \"^3.7.2\",\r\n    \"winston-cloudwatch\": \"^6.2.0\",\r\n    \"winston-transport\": \"^4.5.0\",\r\n    \"ws\": \"^7.5.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@cspell/eslint-plugin\": \"^6.31.1\",\r\n    \"@luckycatfactory/esbuild-graphql-loader\": \"^3.7.0\",\r\n    \"@microsoft/tsdoc\": \"^0.14.2\",\r\n    \"@sentry/cli\": \"^2.10.0\",\r\n    \"@types/analytics-node\": \"^3.1.5\",\r\n    \"@types/auth0\": \"^3.3.3\",\r\n    \"@types/backo2\": \"^1.0.1\",\r\n    \"@types/bluebird\": \"^3.5.32\",\r\n    \"@types/chrome\": \"^0.0.112\",\r\n    \"@types/cookie\": \"^0.4.0\",\r\n    \"@types/cookie-parser\": \"^1.4.3\",\r\n    \"@types/dockerode\": \"^3.2.6\",\r\n    \"@types/express\": \"^4.17.14\",\r\n    \"@types/jest\": \"^29.5.3\",\r\n    \"@types/jscodeshift\": \"^0.11.6\",\r\n    \"@types/jsonwebtoken\": \"^8.5.9\",\r\n    \"@types/multer\": \"^1.4.7\",\r\n    \"@types/node\": \"^14.18.54\",\r\n    \"@types/oauth\": \"^0.9.1\",\r\n    \"@types/pg\": \"^8.11.5\",\r\n    \"@types/pg-copy-streams\": \"^1.2.1\",\r\n    \"@types/query-string\": \"^6.3.0\",\r\n    \"@types/react\": \"^18.2.25\",\r\n    \"@types/react-dom\": \"^18.2.18\",\r\n    \"@types/react-helmet\": \"^6.1.6\",\r\n    \"@types/react-syntax-highlighter\": \"^15.5.6\",\r\n    \"@types/react-window\": \"^1.8.8\",\r\n    \"@types/response-time\": \"^2.3.5\",\r\n    \"@types/sha.js\": \"^2.4.0\",\r\n    \"@types/supertest\": \"^2.0.11\",\r\n    \"@types/uuid\": \"^8.3.4\",\r\n    \"@types/validator\": \"^13.7.3\",\r\n    \"@types/ws\": \"^7.2.5\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^7.5.0\",\r\n    \"@typescript-eslint/parser\": \"^7.5.0\",\r\n    \"@vanilla-extract/css\": \"^1.15.2\",\r\n    \"@vanilla-extract/esbuild-plugin\": \"^2.2.2\",\r\n    \"chokidar\": \"^3.5.3\",\r\n    \"csstype\": \"^3.1.3\",\r\n    \"esbuild\": \"^0.21.3\",\r\n    \"esbuild-plugin-svgr\": \"0.0.1\",\r\n    \"eslint\": \"^8.31.0\",\r\n    \"eslint-config-prettier\": \"^8.6.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\r\n    \"eslint-plugin-cypress\": \"^2.12.1\",\r\n    \"eslint-plugin-i18next\": \"^6.0.3\",\r\n    \"eslint-plugin-import\": \"^2.28.1\",\r\n    \"eslint-plugin-jest\": \"^27.9.0\",\r\n    \"eslint-plugin-no-lookahead-lookbehind-regexp\": \"^0.1.0\",\r\n    \"eslint-plugin-no-relative-import-paths\": \"^v1.5.2\",\r\n    \"eslint-plugin-prettier\": \"^5.0.1\",\r\n    \"eslint-plugin-react\": \"^7.32.2\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"fake-indexeddb\": \"^3.1.7\",\r\n    \"glob\": \"^10.3.10\",\r\n    \"http-server\": \"^14.0.0\",\r\n    \"ioredis-mock\": \"^7.4.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"jest-environment-jsdom\": \"^29.6.1\",\r\n    \"jscodeshift\": \"^0.14.0\",\r\n    \"lint-staged\": \"12.3.5\",\r\n    \"nodemon\": \"^3.0.1\",\r\n    \"pg-formatter\": \"^1.2.0\",\r\n    \"prettier\": \"^3.0.3\",\r\n    \"schema-dts\": \"^1.1.2\",\r\n    \"ts-prune\": \"latest\",\r\n    \"typescript\": \"~5.1.6\",\r\n    \"yargs\": \"^17.7.2\"\r\n  },\r\n  \"overrides\": {\r\n    \"@auth0/auth0-react\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\"\r\n    },\r\n    \"@material-ui/core\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\",\r\n      \"@types/react-dom\": \"^18.0.11\"\r\n    },\r\n    \"@material-ui/styles\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\"\r\n    },\r\n    \"@sentry/cli\": {\r\n      \"strip-ansi\": \"^7.0.1\"\r\n    },\r\n    \"@slack/events-api\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"apollo-server-express\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"eslint-plugin-import\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"graphql-iso-date\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"graphql-postgres-subscriptions\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"postgres-date\": \"2.1.0\"\r\n  }\r\n}\r\n", "import * as http from 'http';\r\nimport * as https from 'https';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport { promises as fsPromises } from 'fs';\r\nimport * as prom from 'prom-client';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nimport type { ListenPort } from 'server/src/util/port.ts';\r\nimport { getHostPortion } from 'server/src/util/port.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker')\r\ndeclare const BUILDCONSTANTS: { loggingProcessName: string };\r\n\r\n// Prometheus is an open source monitoring framework. The way it works is that\r\n// a central Prometheus server periodically (by default once a minute) connects\r\n// to the processes it is set up to monitor and obtains their metrics\r\n// measurements. Prometheus stores these time series of data, and typically\r\n// another open source product, Grafana, is used for visualising this data,\r\n// building dashboards etc.\r\n//\r\n// The kind of metrics that get collected include counters (\"How many requests\r\n// of type X have we had?\", which will be displayed as a graph showing\r\n// X-requests per second), and histograms e.g. for execution speed (\"How many\r\n// requests of type X have had that got processed faster than Y seconds?\",\r\n// which will be displayed as a graph showing the mean, median or p90\r\n// processing time over the day).\r\n//\r\n// So, for Prometheus to be able to show us metrics about our server, our\r\n// server has to collect those metrics and expose them so that the Prometheus\r\n// server can scrape them periodically. That is what this file does.\r\n//\r\n// The Prometheus client library (prom-client) does all of the hard work here,\r\n// of pre-aggregating the metrics in the format that the Prometheus server\r\n// expects. In this file, we just define a few helper functions that make it\r\n// even easier to define metrics and instrument the code to collect them.\r\n//\r\n// One important thing to understand is that the Prometheus client does not\r\n// store a list of all individual events, but aggregates data immediately. So,\r\n// e.g., when we instrument our code to keep track of how long certain GraphQL\r\n// operations take, the Prometheus client won't store the execution time of\r\n// each individual request, but rather increments a counter for a certain time\r\n// range. So the information that an individual request took 15ms is lost, and\r\n// instead the counter for \"events between 10 and 20ms\" is incremented. This\r\n// makes the collection of metrics very lightweight, and we do not have to\r\n// worry about the overhead it introduces. On the other hand we, of course,\r\n// don't have precise data for every single event anymore, but in practice, if\r\n// there are hundreds or thousands of such events, the bucketed data works just\r\n// as well.\r\n\r\nconst register = new prom.Registry();\r\nif (process.env.CORD_WORKER_NAME) {\r\n  // Remove any punctuation characters that might cause issues for prometheus\r\n  const sanitizedWorkerName = process.env.CORD_WORKER_NAME.replace(\r\n    /[^A-Za-z0-9 _-]/g,\r\n    '',\r\n  );\r\n  register.setDefaultLabels({ worker: sanitizedWorkerName });\r\n}\r\nprom.AggregatorRegistry.setRegistries([register]);\r\nprom.collectDefaultMetrics({\r\n  register,\r\n  prefix: `${BUILDCONSTANTS.loggingProcessName}_`,\r\n});\r\n\r\n// Helper functions to easily create metrics. They are bound to the Prometheus\r\n// register whose metrics we expose here. These function also provide some\r\n// reasonable defaults, e.g. the bucket boundaries for histograms.\r\nexport const Counter = (configuration: prom.CounterConfiguration<string>) =>\r\n  new prom.Counter({ registers: [register], ...configuration });\r\nexport const Gauge = (configuration: prom.GaugeConfiguration<string>) =>\r\n  new prom.Gauge({ registers: [register], ...configuration });\r\nexport const TimeHistogram = (\r\n  configuration: prom.HistogramConfiguration<string>,\r\n) =>\r\n  new prom.Histogram({\r\n    registers: [register],\r\n    buckets: logBuckets(0.001, 10, 13),\r\n    ...configuration,\r\n  });\r\nexport function logBuckets(min: number, max: number, buckets: number) {\r\n  // This function creates bucket boundaries for histograms that are\r\n  // logarithmically equidistant.\r\n  // E.g. logBuckets(0.001, 10, 5) -> [ 0.001, 0.01, 0.1, 1, 10 ].\r\n  // If you increase bucket number from 5 to 9, then you get one additional\r\n  // bucket boundary in the middle between each of those 5 in the example.\r\n  // ([0.001, x*0.001, 0.01, x*0.01, 0.1, x*0.1, 1, x*1, 10] with x approx 3.16)\r\n  const logMin = Math.log10(min);\r\n  const logMax = Math.log10(max);\r\n  const step = (logMax - logMin) / (buckets - 1);\r\n  return [...Array(buckets).keys()].map((i) => min * 10 ** (i * step));\r\n  // The default setting for histograms we use above in the `Histogram` helper\r\n  // uses logBuckets(0.001, 10, 13), which covers the range from 1ms to 10s\r\n  // and has the nice property that each bucket's upper limit is roughly\r\n  // twice that of the previous bucket, and three buckets cover exactly a\r\n  // factor of 10. In other words, the upper boundaries of the histogram\r\n  // buckets are:\r\n  // [ 0.001, 0.00215, 0.00464,\r\n  //   0.01,  0.0215,  0.0464,\r\n  //   0.1,   0.215,   0.464,\r\n  //   1,     2.15,    4.64,\r\n  //  10 ]\r\n  // Anything faster than 1ms is counted in the first bucket, anything faster\r\n  // in than 10s is counted in the last bucket, and anything slower than 10s\r\n  // is counted as \"slower than 10s\" (Prometheus automatically adds one more\r\n  // bucket with +Infinity as the upper limit.)\r\n  //\r\n  // * Why those limits? 0.001 and 10?\r\n  // For example, our GraphQL operations (at the time of writing this)\r\n  // typically are in the tenths or hundreds of milliseconds. The limits here\r\n  // are chosen to cover that area well with some margin at both sides. More\r\n  // generally: anything that's faster than a millisecond is so fast that we\r\n  // don't need to worry about it, whereas anything near 10s is so slow that\r\n  // it's effectively broken. So the range from 1ms to 10s is chosen to be\r\n  // sure that we capture the relevant region. If we have a problem and, for\r\n  // example, the execution time of some operation creeps up, than we still\r\n  // capture that development until the execution time becomes longer than 10s,\r\n  // but hopefully we would have spotted a problem before that happens.\r\n  //\r\n  // * Why 13 buckets?\r\n  // 13 happens to be one of the numbers where we will have buckets lining up\r\n  // with powers of 10, which is nice. Having more buckets means that we have\r\n  // more precise information in our histograms, but it adds to the memory\r\n  // overhead. 13 should be good enough to get a good idea what's going on.\r\n  //\r\n  // * Why \"logarithmically equidistant\"?\r\n  // Since we use these histograms for measuring the timing of many different\r\n  // kinds of processes, this is a good one-fits-all solution. If you knew\r\n  // that you want to measure times in the range of, say, 10 to 20ms, than\r\n  // you would probably just have a linear series of bucket boundaries (10,\r\n  // 11, 12, ..., 20). However, to have a reasonably good resultion for\r\n  // processes that take around 10ms and at the same time for those that take\r\n  // around 100 or 1000ms, it's better to have a constant factor between\r\n  // bucket boundaries. Here, the upper end of a bucket is at 2.15 times the\r\n  // lower end, and that way we nicely spread out just 13 buckets on the wide\r\n  // range from 1ms to 10s.\r\n}\r\n\r\nexport function incCounterWithAppID<T extends string>(\r\n  viewer: Viewer,\r\n  counter: prom.Counter<T>,\r\n  labels: prom.LabelValues<T> = {},\r\n  value = 1,\r\n): void {\r\n  counter.inc(\r\n    { appID: viewer.platformApplicationID || 'null', ...labels },\r\n    value,\r\n  );\r\n}\r\n\r\n// Ideally would be instantiated within the cluster-mode-only handler below, but\r\n// having it out here means that even workers do it, working around this issue:\r\n// https://github.com/siimon/prom-client/pull/449#issuecomment-922504343\r\nconst aggregatorRegistry = new prom.AggregatorRegistry();\r\n\r\nexport async function metricsMain(port: ListenPort, clusterMode: boolean) {\r\n  const app = clusterMode\r\n    ? (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', aggregatorRegistry.contentType);\r\n        aggregatorRegistry.clusterMetrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'aggregatorRegistry.clusterMetrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      }\r\n    : (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', register.contentType);\r\n        register.metrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'register.metrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      };\r\n\r\n  const server =\r\n    process.env.NODE_ENV === 'development' && !process.env.IS_TEST\r\n      ? https.createServer(\r\n          {\r\n            key: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.key',\r\n            ),\r\n            cert: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.crt',\r\n            ),\r\n          },\r\n          app,\r\n        )\r\n      : http.createServer(app);\r\n\r\n  // Start our server\r\n  return await new Promise<void>((resolve, reject) => {\r\n    server.addListener('error', reject);\r\n    server.listen(port, () => {\r\n      server.removeListener('error', reject);\r\n      resolve();\r\n      const host = getHostPortion(server.address());\r\n      anonymousLogger().info(\r\n        `\uD83D\uDE80 Serving Prometheus metrics at https://${host}/`,\r\n      );\r\n    });\r\n  });\r\n}\r\n", "import { JwksClient } from 'jwks-rsa';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { GACookieType } from 'server/src/util/google-analytics.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nexport const SERVICE_USER_ID = 'service_user';\r\n\r\nexport enum AuthProviderType {\r\n  SLACK = 'slack',\r\n  PLATFORM = 'platform',\r\n}\r\n\r\nexport const jwksClient = new JwksClient({\r\n  jwksUri: `https://${env.AUTH0_CUSTOM_LOGIN_DOMAIN}/.well-known/jwks.json`,\r\n});\r\n\r\n// There is a surprising (and growing) amount of stuff that we'll want to store\r\n// as part of the user session. It makes sense to write this to a DB on the server\r\n// and to use a very small payload for network round trips (i.e. just the key to\r\n// the hash table value). This idea is the basis of the 'datr' cookie within\r\n// Facebook.\r\nexport interface Session {\r\n  viewer: Viewer;\r\n  isAdmin?: boolean;\r\n  console?: ConsoleSession;\r\n  utmParameters?: { [key: string]: string | string[] | undefined };\r\n  ga?: GACookieType;\r\n}\r\n\r\ninterface ConsoleSession {\r\n  email_verified: boolean;\r\n}\r\n\r\nexport interface Auth0Token {\r\n  iss: string;\r\n  sub: string;\r\n  'https://console.cord.com/email': string;\r\n  'https://console.cord.com/email_verified': boolean;\r\n  auth0UserID: string;\r\n  aud: string | string[];\r\n}\r\n\r\nexport function createAnonymousSession() {\r\n  return {\r\n    viewer: Viewer.createAnonymousViewer(),\r\n  };\r\n}\r\n\r\nexport class Viewer {\r\n  private constructor(\r\n    public readonly userID: UUID | undefined,\r\n    public readonly orgID: UUID | undefined,\r\n    public readonly platformApplicationID?: UUID,\r\n    public readonly externalUserID?: string,\r\n    public readonly externalOrgID?: string,\r\n    public readonly developerUserID?: string,\r\n    public readonly originalOrgID?: UUID,\r\n    public readonly relevantOrgIDs?: UUID[],\r\n  ) {\r\n    if (orgID !== undefined && relevantOrgIDs !== undefined) {\r\n      // Note that a constructed Viewer can have both of these fields set at the\r\n      // same time -- we do that in the third case below for backwards-compat.\r\n      // But you can't specify the creation of a Viewer with both of these, to\r\n      // try to force new code to \"do the right thing\".\r\n      if (relevantOrgIDs.length !== 1 || relevantOrgIDs[0] !== orgID) {\r\n        throw new Error(\r\n          'You specified both a single orgID and relevantOrgIDs. ' +\r\n            'You should pass undefined for the orgID to catch places not using relevantOrgIDs. Be bold!',\r\n        );\r\n      }\r\n    } else if (orgID !== undefined) {\r\n      this.relevantOrgIDs = [orgID];\r\n    }\r\n  }\r\n\r\n  static async createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  }: {\r\n    user: UserEntity;\r\n    org: OrgEntity | null;\r\n  }): Promise<Viewer> {\r\n    if (!user.platformApplicationID) {\r\n      throw new Error('Platform viewer must have platformApplicationID');\r\n    }\r\n\r\n    const relevantOrgIDs = org\r\n      ? undefined\r\n      : // OrgMembersLoader.loadAllImmediateOrgIDsForUser but we can't call that since we\r\n        // don't have a viewer yet!\r\n        (\r\n          await OrgMembersEntity.findAll({\r\n            where: {\r\n              userID: user.id,\r\n            },\r\n          })\r\n        ).map((e) => e.orgID);\r\n\r\n    return new Viewer(\r\n      user.id,\r\n      org?.id,\r\n      user.platformApplicationID,\r\n      user.externalID,\r\n      org?.externalID,\r\n      undefined,\r\n      undefined,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  static createLoggedInViewer(userID: UUID, orgID: UUID): Viewer {\r\n    return new Viewer(userID, orgID);\r\n  }\r\n\r\n  static createOrgViewer(orgID: UUID, platformApplicationID?: UUID): Viewer {\r\n    return new Viewer(undefined, orgID, platformApplicationID);\r\n  }\r\n\r\n  static createServiceViewer() {\r\n    return new Viewer(SERVICE_USER_ID, undefined);\r\n  }\r\n\r\n  static createAnonymousViewer() {\r\n    return new Viewer(undefined, undefined);\r\n  }\r\n\r\n  static createConsoleViewer(devUserID: string): Viewer {\r\n    return new Viewer(\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      devUserID,\r\n    );\r\n  }\r\n\r\n  static createFromSerializedState(serializedViewer: Viewer): Viewer {\r\n    const {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n      ...rest\r\n    } = serializedViewer;\r\n    const _: Record<string, never> = rest;\r\n\r\n    return new Viewer(\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a version of this Viewer with the orgID set to the given org ID,\r\n   * used in situations where a user logged into one org wants to take an action\r\n   * as themselves in another org, such as sending a message from the unified\r\n   * inbox.  If the orgID given is the same as this Viewer's org ID, just\r\n   * returns this Viewer again.\r\n   */\r\n  public viewerInOtherOrg(\r\n    orgID: UUID | undefined,\r\n    externalOrgID: string | undefined,\r\n    relevantOrgIDs?: UUID[],\r\n  ): Viewer {\r\n    if (orgID === this.orgID && orgID !== undefined) {\r\n      return this;\r\n    }\r\n    if (orgID === undefined && relevantOrgIDs === undefined) {\r\n      throw new Error('viewerInOtherOrg provided with no orgs at all');\r\n    }\r\n    return new Viewer(\r\n      this.userID,\r\n      orgID,\r\n      this.platformApplicationID,\r\n      this.externalUserID,\r\n      externalOrgID,\r\n      this.developerUserID,\r\n      this.originalOrgID ?? this.orgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n}\r\n\r\nexport const assertViewerHasIdentity = (\r\n  viewer: Viewer,\r\n): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n} => {\r\n  if (!viewer.userID || !viewer.orgID) {\r\n    throw new Error('Viewer must not be anonymous.');\r\n  }\r\n\r\n  return {\r\n    userID: viewer.userID,\r\n    orgID: viewer.orgID,\r\n  };\r\n};\r\n\r\nexport function assertViewerHasPlatformIdentity(viewer: Viewer): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  externalUserID: string;\r\n  externalOrgID: string;\r\n  platformApplicationID: string;\r\n} {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n  if (\r\n    !viewer.externalUserID ||\r\n    !viewer.externalOrgID ||\r\n    !viewer.platformApplicationID\r\n  ) {\r\n    throw new Error('Viewer must be a platform viewer');\r\n  }\r\n\r\n  return {\r\n    userID,\r\n    orgID,\r\n    platformApplicationID: viewer.platformApplicationID,\r\n    externalUserID: viewer.externalUserID,\r\n    externalOrgID: viewer.externalOrgID,\r\n  };\r\n}\r\n\r\nexport function viewerHasIdentity(viewer: Viewer) {\r\n  return !!viewer.userID && !!viewer.orgID;\r\n}\r\n\r\nexport function assertViewerHasUser(viewer: Viewer): UUID {\r\n  const { userID } = viewer;\r\n\r\n  if (!userID) {\r\n    throw new Error('Viewer user must not be anonymous.');\r\n  }\r\n\r\n  return userID;\r\n}\r\n\r\nexport function assertViewerHasOrg(viewer: Viewer): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  if (!orgID) {\r\n    throw new Error('Viewer org must not be anonymous.');\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\n/**\r\n * Does basically the same thing as `assertViewerHasOrg`, except it throws a\r\n * client-facing error -- the idea being that you call this when it's *their*\r\n * error for not giving us a single org ID, instead of our internal logic error.\r\n * This also centralises all of the places we require a single org ID for\r\n * writes, so we can refactor/rethink/categorize/whatever them later.\r\n */\r\nexport function assertViewerHasSingleOrgForWrite(\r\n  viewer: Viewer,\r\n  error: string,\r\n): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  // Specifically check for viewer.orgID, and not\r\n  // viewer.relevantOrgIDs.length === 1, so that we error in the case\r\n  // where they didn't give us an org but the user happens to only be in\r\n  // one -- to prevent sudden explosions when that user is added to\r\n  // another org, require that they always explicitly specify.\r\n  if (!orgID) {\r\n    throw new ClientFacingError(error);\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\nexport function assertViewerHasOrgs(viewer: Viewer): UUID[] {\r\n  const { relevantOrgIDs } = viewer;\r\n\r\n  if (!relevantOrgIDs) {\r\n    throw new Error('Viewer orgs must be nonempty.');\r\n  }\r\n\r\n  return relevantOrgIDs;\r\n}\r\n\r\nexport function assertViewerHasPlatformUser(viewer: Viewer) {\r\n  const { userID, externalUserID, platformApplicationID } = viewer;\r\n\r\n  if (!userID || !externalUserID || !platformApplicationID) {\r\n    throw new Error('Viewer must have a platform user');\r\n  }\r\n\r\n  return { userID, externalUserID, platformApplicationID };\r\n}\r\n\r\nexport function assertViewerHasPlatformApplicationID(viewer: Viewer): UUID {\r\n  const { platformApplicationID } = viewer;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new Error('Viewer must have a platform app ID');\r\n  }\r\n\r\n  return platformApplicationID;\r\n}\r\n\r\nexport function assertServiceViewer(viewer: Viewer) {\r\n  if (viewer.userID !== SERVICE_USER_ID) {\r\n    throw new Error('Viewer must be service user.');\r\n  }\r\n}\r\n\r\nexport function assertConsoleUser(viewer: Viewer) {\r\n  if (!viewer.developerUserID) {\r\n    throw new Error('User must have an email');\r\n  }\r\n\r\n  return { email: viewer.developerUserID };\r\n}\r\n\r\nexport function viewerIsUsingOrgsAsFilter(viewer: Viewer) {\r\n  // Right now, platform viewers are in one of two states:\r\n  //   - everything is org-less, in which case relevantOrgIDs is filled out and\r\n  //     orgID is undefined\r\n  //   - we have an org, either via the token or an explicit `filter`, which\r\n  //     sets orgID and sets relevantOrgIDs to [orgID]\r\n  // This code looks for the second case. This is a bit of a hack -- it is going\r\n  // to break as soon as we allow multiple org IDs as a filter (which will have\r\n  // to stuff them into relevantOrgIDs), but at least there's one codepath to\r\n  // update when we build that, through here.\r\n  return viewer.orgID !== undefined;\r\n}\r\n", "import type { JsonObject } from 'common/types/index.ts';\r\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\r\n\r\n// Extending Error type solution taken from here:\r\n// https://stackoverflow.com/questions/41102060/typescript-extending-error-class\r\nexport class CordError extends Error {\r\n  constructor(\r\n    message?: string,\r\n    public loggingMetadata?: JsonObject,\r\n    public loggingTags?: LoggingTags,\r\n  ) {\r\n    // 'Error' breaks prototype chain here\r\n    super(message);\r\n\r\n    // restore prototype chain\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'org_members',\r\n  timestamps: false,\r\n})\r\nexport class OrgMembersEntity extends Model<\r\n  InferAttributes<OrgMembersEntity>,\r\n  InferCreationAttributes<OrgMembersEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n}\r\n", "export type DatabaseConfig = {\r\n  database?: string;\r\n  host?: string;\r\n  password?: string;\r\n  port?: number;\r\n  user?: string;\r\n};\r\n\r\nexport function getReadReplicaDbConfigFromEnv(\r\n  env: Record<string, string | undefined>,\r\n): DatabaseConfig {\r\n  return {\r\n    host: env.POSTGRES_READ_HOST ?? env.POSTGRES_HOST,\r\n    port: Number(env.POSTGRES_READ_PORT ?? env.POSTGRES_PORT),\r\n    database: env.POSTGRES_DB,\r\n    user: env.POSTGRES_USER,\r\n    password: env.POSTGRES_PASSWORD,\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["Table", "Column", "Model", "DataTypes", "defaultValue", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "FeatureFlags", "Model", "Column", "DataTypes", "Table", "Counter", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Counter", "error", "spawn", "where", "resolve"]
}
