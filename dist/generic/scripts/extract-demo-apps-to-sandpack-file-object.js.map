{
  "version": 3,
  "sources": ["scripts/extract-demo-apps-to-sandpack-file-object.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\r\n\r\nimport { writeFileSync, readFileSync, statSync, readdirSync } from 'fs';\r\nimport path from 'path';\r\nimport url from 'url';\r\nimport * as prettier from 'prettier';\r\n\r\n// Looks into sample-apps to generate an object to pass into Sandpack for new site\r\n// Ignores unnecessary folders, file\r\n// Does not handle image files correctly for now\r\n\r\nconst demoNames = [\r\n  'canvas-new',\r\n  'document',\r\n  'dashboard',\r\n  'video-player',\r\n] as const;\r\n\r\ntype demoNamesType = (typeof demoNames)[number];\r\n\r\nconst getFilesRecursively = (\r\n  directory: string,\r\n  result: Record<string, unknown>,\r\n  demoName: demoNamesType,\r\n) => {\r\n  const filesInDirectory = readdirSync(directory);\r\n\r\n  const foldersToIgnore = ['node_modules', '_common', 'CORD-playground'];\r\n  const filesToIgnore = ['.gitignore', '.DS_Store'];\r\n  const fileTypeToIgnore = ['.png'];\r\n\r\n  for (const file of filesInDirectory) {\r\n    const absolute = path.join(directory, file);\r\n    const sampleAppDirectoryString = `opensource/sample-apps/${demoName}/`;\r\n\r\n    if (statSync(absolute).isDirectory()) {\r\n      getFilesRecursively(absolute, result, demoName);\r\n    } else if (\r\n      foldersToIgnore.some((folder) => absolute.includes(folder)) ||\r\n      filesToIgnore.some((fileName) => file.includes(fileName)) ||\r\n      fileTypeToIgnore.some((fileName) => file.endsWith(fileName))\r\n    ) {\r\n      continue;\r\n    } else {\r\n      const sampleAppStringIndex = absolute.indexOf(sampleAppDirectoryString);\r\n      const fileDirectory = absolute.slice(\r\n        sampleAppStringIndex + sampleAppDirectoryString.length,\r\n      );\r\n\r\n      const fileContents = readFileSync(absolute, 'utf-8');\r\n\r\n      const cleanedFileContents = fileContents\r\n        .replaceAll(/(<InformationHeader)[\\s\\S]*?(\\/>)/g, '')\r\n        .replaceAll(\r\n          /(import { InformationHeader })[\\s\\S]*?(InformationHeader';)/g,\r\n          '',\r\n        );\r\n\r\n      result[fileDirectory] = cleanedFileContents;\r\n    }\r\n  }\r\n};\r\n\r\nconst main = async () => {\r\n  const resultObj: Record<string, unknown> = {};\r\n\r\n  const opensourcePath = path.join(\r\n    path.dirname(url.fileURLToPath(import.meta.url)),\r\n    '../../opensource/sample-apps/',\r\n  );\r\n\r\n  for (const demoName of demoNames) {\r\n    const demoResult = {};\r\n    getFilesRecursively(opensourcePath + demoName, demoResult, demoName);\r\n    resultObj[demoName] = demoResult;\r\n  }\r\n\r\n  const sandpackFileObject = `// @generated by scripts/extract-demo-apps-to-sandpack-file-object.ts\r\n// npm run extract-demo-apps-to-sandpack-object\r\n/* eslint-disable */\r\n\r\n  export default \r\n  ${JSON.stringify(resultObj)}\r\n\r\n  `;\r\n\r\n  const resultFilePath =\r\n    opensourcePath + '/_common/' + 'sandpackDemoFileObject.ts';\r\n\r\n  writeFileSync(\r\n    resultFilePath,\r\n    await prettier.format(sandpackFileObject, {\r\n      filepath: resultFilePath,\r\n      ...(await prettier.resolveConfig(resultFilePath)),\r\n    }),\r\n  );\r\n};\r\n\r\nmain().catch((err) => {\r\n  console.error(err);\r\n  process.exit(1);\r\n});\r\n"],
  "mappings": ";;;AAEA,SAAS,eAAe,cAAc,UAAU,mBAAmB;AACnE,OAAO,UAAU;AACjB,OAAO,SAAS;AAChB,YAAY,cAAc;AAM1B,IAAM,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAIA,IAAM,sBAAsB,CAC1B,WACA,QACA,aACG;AACH,QAAM,mBAAmB,YAAY,SAAS;AAE9C,QAAM,kBAAkB,CAAC,gBAAgB,WAAW,iBAAiB;AACrE,QAAM,gBAAgB,CAAC,cAAc,WAAW;AAChD,QAAM,mBAAmB,CAAC,MAAM;AAEhC,aAAW,QAAQ,kBAAkB;AACnC,UAAM,WAAW,KAAK,KAAK,WAAW,IAAI;AAC1C,UAAM,2BAA2B,0BAA0B,QAAQ;AAEnE,QAAI,SAAS,QAAQ,EAAE,YAAY,GAAG;AACpC,0BAAoB,UAAU,QAAQ,QAAQ;AAAA,IAChD,WACE,gBAAgB,KAAK,CAAC,WAAW,SAAS,SAAS,MAAM,CAAC,KAC1D,cAAc,KAAK,CAAC,aAAa,KAAK,SAAS,QAAQ,CAAC,KACxD,iBAAiB,KAAK,CAAC,aAAa,KAAK,SAAS,QAAQ,CAAC,GAC3D;AACA;AAAA,IACF,OAAO;AACL,YAAM,uBAAuB,SAAS,QAAQ,wBAAwB;AACtE,YAAM,gBAAgB,SAAS;AAAA,QAC7B,uBAAuB,yBAAyB;AAAA,MAClD;AAEA,YAAM,eAAe,aAAa,UAAU,OAAO;AAEnD,YAAM,sBAAsB,aACzB,WAAW,sCAAsC,EAAE,EACnD;AAAA,QACC;AAAA,QACA;AAAA,MACF;AAEF,aAAO,aAAa,IAAI;AAAA,IAC1B;AAAA,EACF;AACF;AAEA,IAAM,OAAO,YAAY;AACvB,QAAM,YAAqC,CAAC;AAE5C,QAAM,iBAAiB,KAAK;AAAA,IAC1B,KAAK,QAAQ,IAAI,cAAc,YAAY,GAAG,CAAC;AAAA,IAC/C;AAAA,EACF;AAEA,aAAW,YAAY,WAAW;AAChC,UAAM,aAAa,CAAC;AACpB,wBAAoB,iBAAiB,UAAU,YAAY,QAAQ;AACnE,cAAU,QAAQ,IAAI;AAAA,EACxB;AAEA,QAAM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,IAKzB,KAAK,UAAU,SAAS,CAAC;AAAA;AAAA;AAI3B,QAAM,iBACJ,iBAAiB;AAEnB;AAAA,IACE;AAAA,IACA,MAAe,gBAAO,oBAAoB;AAAA,MACxC,UAAU;AAAA,MACV,GAAI,MAAe,uBAAc,cAAc;AAAA,IACjD,CAAC;AAAA,EACH;AACF;AAEA,KAAK,EAAE,MAAM,CAAC,QAAQ;AACpB,UAAQ,MAAM,GAAG;AACjB,UAAQ,KAAK,CAAC;AAChB,CAAC;",
  "names": []
}
