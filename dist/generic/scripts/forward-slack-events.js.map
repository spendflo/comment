{
  "version": 3,
  "sources": ["scripts/forward-slack-events.ts", "server/src/const.ts", "scripts/lib/auth.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\n\n// This script lets you forward the incoming Slack events that we receive in the\n// staging tier (those are the ones belonging to our \"Cord Staging\" Slack app)\n// to your local dev environment server.\n//\n// Invoke like this: dist/scripts/forward-slack-events.js\n//\n// If you run into the SELF_SIGNED_CERT_IN_CHAIN error, then you need to run\n// like this: NODE_EXTRA_CA_CERTS=\"$(mkcert -CAROOT)/rootCA.pem\"\n// dist/scripts/forward-slack-events.js\n//\n//\n// The script connects to the admin endpoint of the staging tier to listen to\n// live Slack events coming in. They are then send to your local server. The\n// messages are also printed out on the terminal so you see what is happening.\n//\n// This will fetch an auth token from the admin tool directly, but you can also\n// pass the --auth flag with a token to explicitly specify one.\n//\n// The `--wsUrl` and `--postUrl` options can be used to specify the urls to\n// connect to for listening and to post messages to, respecitvely. By default\n// you listen to Slack events on admin.staging.cord.com and send them to\n// localhost:8161.\n\nimport 'dotenv/config.js';\nimport * as querystring from 'querystring';\nimport WebSocket from 'ws';\nimport yargs from 'yargs';\n\nimport {\n  SLACK_EVENTS_WEBSOCKET_ENDPOINT,\n  SLACK_EVENT_PATH,\n  SLACK_INTERACTIVE_EVENT_PATH,\n  SLACK_INTERNAL_EVENT_PATH,\n  SLACK_INTERNAL_INTERACTIVE_EVENT_PATH,\n} from 'server/src/const.ts';\nimport { fetchAuthToken } from 'scripts/lib/auth.ts';\n\nconst argv = yargs(process.argv.slice(2))\n  .option('wsUrl', {\n    type: 'string',\n    description: 'url of the websocket to connect to',\n    default: `wss://admin.staging.cord.com${SLACK_EVENTS_WEBSOCKET_ENDPOINT}`,\n  })\n  .option('postUrl', {\n    type: 'string',\n    description: 'url the websocket forwards standard slack events to',\n    default: `https://localhost:8161${SLACK_EVENT_PATH}`,\n  })\n  .option('iPostUrl', {\n    type: 'string',\n    description: 'url the websocket forwards custom interactive events to',\n    default: `https://localhost:8161${SLACK_INTERACTIVE_EVENT_PATH}`,\n  })\n  .option('internalPostUrl', {\n    type: 'string',\n    description: 'url the websocket forwards internal events to',\n    default: `https://localhost:8123${SLACK_INTERNAL_EVENT_PATH}`,\n  })\n  .option('internalIPostUrl', {\n    type: 'string',\n    description: 'url the websocket forwards internal interactive events to',\n    default: `https://localhost:8123${SLACK_INTERNAL_INTERACTIVE_EVENT_PATH}`,\n  })\n  .option('auth', {\n    type: 'string',\n    description: 'Authorization token of an admin user in staging',\n    default: '',\n  })\n  .strict()\n  .help()\n  .alias('help', 'h').argv;\n\nconst { wsUrl, postUrl, iPostUrl, internalPostUrl, internalIPostUrl, auth } =\n  argv;\n\nasync function main() {\n  const ws = new WebSocket(wsUrl, {\n    headers: { Authorization: await authToken(auth) },\n  });\n\n  const wsClosed = new Promise<void>((res) => ws.on('close', res));\n\n  ws.on('open', () => {\n    console.log('Websocket connection opened');\n\n    // The websocket gets closed after being idle for one minute. Sending a ping\n    // every 55 seconds prevents that.\n    setInterval(() => {\n      ws.ping();\n    }, 55000);\n  });\n\n  ws.on('message', (msg: string | Buffer) => {\n    console.log(`Forwarding message:\\n${msg}\\n\\n`);\n\n    const message = Buffer.isBuffer(msg) ? msg.toString() : msg;\n    const parsed = JSON.parse(message);\n\n    if (parsed.type === 'standard') {\n      fetch(postUrl, {\n        method: 'POST',\n        body: JSON.stringify(parsed.event),\n        headers: { 'Content-type': 'application/json' },\n      }).catch(console.error);\n    } else if (parsed.type === 'interactive') {\n      fetch(iPostUrl, {\n        method: 'POST',\n        body: querystring.stringify(parsed.event),\n        headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n      }).catch(console.error);\n    } else if (parsed.type === 'internal') {\n      fetch(internalPostUrl, {\n        method: 'POST',\n        body: JSON.stringify(parsed.event),\n        headers: { 'Content-type': 'application/json' },\n      }).catch(console.error);\n    } else if (parsed.type === 'internal-interactive') {\n      fetch(internalIPostUrl, {\n        method: 'POST',\n        body: querystring.stringify(parsed.event),\n        headers: { 'Content-type': 'application/x-www-form-urlencoded' },\n      }).catch(console.error);\n    } else {\n      console.log('Failed to determine Slack event type');\n    }\n  });\n\n  await wsClosed;\n  console.log('Websocket connection closed');\n}\n\nasync function authToken(token: string) {\n  if (token === '') {\n    return 'Bearer ' + (await fetchAuthToken('staging'));\n  } else if (token.startsWith('Bearer ')) {\n    return token;\n  } else {\n    return `Bearer ${token}`;\n  }\n}\n\nmain().then(\n  () => process.exit(0),\n  (err) => {\n    console.error(err);\n    process.exit(1);\n  },\n);\n", "export const SLACK_EVENTS_WEBSOCKET_ENDPOINT = '/slackEvents';\nexport const SLACK_EVENT_PATH = '/slack/event';\nexport const SLACK_INTERACTIVE_EVENT_PATH = '/slack/interactiveEvent';\nexport const SLACK_INTERNAL_EVENT_PATH = '/slack/internal/event';\nexport const SLACK_INTERNAL_INTERACTIVE_EVENT_PATH =\n  '/slack/internal/interactiveEvent';\n", "import * as https from 'https';\nimport * as path from 'path';\nimport * as url from 'url';\nimport { readFileSync } from 'fs';\nimport express from 'express';\nimport * as jwt from 'jsonwebtoken';\nimport open from 'open';\nimport env from 'server/src/config/Env.ts';\n\nconst PORT = 7349; // Prime time!\n\nexport async function fetchAuthToken(tier: 'prod' | 'staging' = 'prod') {\n  const endpoint = `https://admin${\n    tier !== 'prod' ? '.staging' : ''\n  }.cord.com/auth-token`;\n\n  const endpointUrl = new URL(endpoint);\n  endpointUrl.searchParams.set(\n    'token',\n    jwt.sign(\n      { redirect: `https://local.cord.com:${PORT}/__auth` },\n      env.ADMIN_TOKEN_SECRET,\n    ),\n  );\n  const authTokenPromise = listen();\n  void open(endpointUrl.href, { background: true });\n  return await authTokenPromise;\n}\n\nfunction listen(): Promise<string | null> {\n  return new Promise((resolve) => {\n    const app = express();\n\n    app.get('/__auth', (req, res) => {\n      const token = typeof req.query.token === 'string' && req.query.token;\n      if (!token) {\n        res.status(400).send('Invalid token').end();\n        resolve(null);\n        return;\n      }\n\n      resolve(token);\n\n      res\n        .status(200)\n        .contentType('text/html')\n        .send(\n          `<!DOCTYPE html><html><body><script>window.close();</script></body>`,\n        );\n    });\n\n    const server = https.createServer(\n      {\n        key: readFileSync(\n          path.dirname(url.fileURLToPath(import.meta.url)) +\n            '/../../localhost/localhost.key',\n        ),\n        cert: readFileSync(\n          path.dirname(url.fileURLToPath(import.meta.url)) +\n            '/../../localhost/localhost.crt',\n        ),\n      },\n      app,\n    );\n    server.listen(PORT);\n  });\n}\n", "// There is some TypeScript trickery in this file. It is optimised for making\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\n// and self-explanatory, and the type hints displayed by the IDE should be\n// useful.\n\n// Define types to declare variables as required, optional or having a default\n// value.  If these classes were empty, TypeScript would treat them as\n// interchangeable. By giving them different shapes (i.e. different members),\n// TypeScript will keep them apart.\nclass RequiredVariable {\n  public readonly req = true;\n}\nclass OptionalVariable {\n  public readonly opt = true;\n}\nclass VariableWithDefaultValue {\n  constructor(public readonly defaultValue: string) {}\n}\n\n// These are the helpers that are used by the caller of `magicEnv` to define\n// their environment fields.\nexport const required = new RequiredVariable();\nexport const optional = new OptionalVariable();\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\nexport const defaultValue = (defaultValue: string) =>\n  new VariableWithDefaultValue(defaultValue);\n\n// Here comes the main function of this module: `magicEnv`. It takes one\n// parameter: a JavaScript object with string keys and values of type\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\n//\n// `magicEnv` is a template function, which is quite important.\n// `EnvDefinitionType` is the specific type of the environment definition.\n// That type must comply with the restriction that it is an object with string\n// keys and those variable types as values.  However, we will need the\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\n// the corresponding value types. We get access to this type by templating this\n// function.\nexport function magicEnv<\n  EnvDefinitionType extends {\n    [key: string]:\n      | RequiredVariable\n      | OptionalVariable\n      | VariableWithDefaultValue;\n  },\n>(\n  processEnv: { [key: string]: string | undefined },\n  envDefinition: EnvDefinitionType,\n) {\n  // Now start constructing the result of this function.\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\n\n  // And now we iterate through the `envDefinition` object, which we received\n  // from the callback function.\n  for (const key of Object.keys(envDefinition) as (string &\n    keyof EnvDefinitionType)[]) {\n    // This is the value from the process environment\n    const value: string | undefined = processEnv[key];\n\n    // This is the value from the definition object at the top\n    const fieldDefinition:\n      | RequiredVariable\n      | OptionalVariable\n      | VariableWithDefaultValue = envDefinition[key];\n\n    if ((fieldDefinition as any).req) {\n      // This is a required variable.\n\n      if (value === undefined) {\n        throw new Error(`Missing key ${key} in environment`);\n      } else {\n        env[key] = value;\n      }\n    } else if ((fieldDefinition as any).opt) {\n      // This is an optional variable. `value` may be a string or undefined.\n\n      env[key] = value;\n    } else {\n      // This is a variable with a default value (the value of\n      // `fieldDefinition`)\n\n      if (value === undefined) {\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\n      } else {\n        env[key] = value;\n      }\n    }\n  }\n\n  // Return the `env` object that we have just constructed, but return with a\n  // special type that we define here: it is an object which contains all the\n  // keys that the definition object has. The value type is `string`, except\n  // for fields that correspond to optional variables, those have type\n  // `string | undefined`. All fields are declared readonly.\n  return env as {\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\n      ? string | undefined\n      : string;\n  };\n}\n", "import {\n  magicEnv,\n  required,\n  optional,\n  defaultValue,\n} from 'server/src/config/MagicEnv.ts';\n\nexport default magicEnv(process.env, {\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\n  // libraries we import, to switch between development and production mode.\n  // Just to make sure it is set in the process environment, we include it here.\n  NODE_ENV: required,\n\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\n  CORD_TIER: required,\n\n  // Accept connections on these ports\n  API_SERVER_PORT: optional,\n  ADMIN_SERVER_PORT: optional,\n  METRICS_SERVER_PORT: optional,\n  STATUS_SERVER_PORT: optional,\n  CONSOLE_SERVER_PORT: optional,\n  DOCS_SERVER_PORT: optional,\n\n  // PostgreSQL connection configuration - required\n  POSTGRES_HOST: required,\n  POSTGRES_PORT: required,\n  POSTGRES_USER: required,\n  POSTGRES_PASSWORD: required,\n  POSTGRES_DB: required,\n\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\n  // as above)\n  POSTGRES_READ_HOST: optional,\n  POSTGRES_READ_PORT: optional,\n\n  // Redis connection configuration\n  REDIS_PORT: required,\n  REDIS_HOST: required,\n  PREDIS_PORT: required,\n  PREDIS_HOST: required,\n\n  // URLs pointing to our own endpoints\n  TOP_SERVER_HOST: required,\n  APP_SERVER_HOST: required,\n  API_SERVER_HOST: required,\n  API_SERVER_HOST_PRODUCTION: required,\n  ADMIN_SERVER_HOST: required,\n  MARKETING_SERVER_HOST: required,\n  PUBLIC_UPLOADS_HOST: required,\n  CONSOLE_SERVER_HOST: required,\n  CORD_TO_HOST: required,\n  DOCS_SERVER_HOST: required,\n  CLACK_SERVER_HOST: optional,\n  COMMUNITY_SERVER_HOST: required,\n\n  // Slack App credentials - required\n  SLACK_APP_CLIENT_SECRET: required,\n  SLACK_DEV_APP_CLIENT_SECRET: required,\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\n  SLACK_APP_REDIRECT_HOST: optional,\n  SLACK_SIGNING_SECRET: required,\n  SLACK_ADMIN_CLIENT_SECRET: required,\n  SLACK_ADMIN_SIGNING_SECRET: required,\n  SLACK_INTERNAL_BOT_TOKEN: required,\n  SLACK_INTERNAL_SIGNING_SECRET: required,\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\n\n  // S3 Bucket File storage\n  S3_ACCESS_KEY_ID: optional,\n  S3_ACCESS_KEY_SECRET: optional,\n  S3_REGION: required,\n  S3_BUCKET: required,\n  S3_PUBLIC_BUCKET: required,\n  S3_ENDPOINT: required,\n  S3_USE_PATH_BASED_URLS: required,\n\n  EMAIL_LINKS_TOKEN_SECRET: required,\n\n  // Jira App credentials - required\n  JIRA_APP_CLIENT_ID: required,\n  JIRA_APP_CLIENT_SECRET: required,\n\n  // Asana App credentials - required\n  ASANA_APP_CLIENT_ID: required,\n  ASANA_APP_CLIENT_SECRET: required,\n\n  // Linear App credentials - required\n  LINEAR_APP_CLIENT_ID: required,\n  LINEAR_APP_CLIENT_SECRET: required,\n\n  // Trello App credentials - required\n  TRELLO_APP_CLIENT_ID: required,\n  TRELLO_APP_CLIENT_SECRET: required,\n\n  // Monday App credentials - required\n  MONDAY_APP_CLIENT_ID: required,\n  MONDAY_APP_CLIENT_SECRET: required,\n\n  // Secret for session tokens - required\n  JWT_SIGNING_SECRET: required,\n\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\n  OAUTH_STATE_SIGNING_SECRET: required,\n\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\n\n  // Log level for console logging - optional ('info' if not provided)\n  LOGLEVEL: defaultValue('info'),\n\n  // Post error messages to this Slack channel,\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\n\n  // Post informational changes to prod setup, including deploy and db migration\n  // messages, to this Slack channel\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\n\n  // Post security/SOC2 compliance messages to this Slack channel,\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\n\n  // Post info about go redirects to this Slack channel\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\n\n  // Post messages from customers to this Slack channel\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\n\n  // Post client request messages to this Slack channel\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\n\n  // For sending search queries from the docs site to Slack\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\n\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\n  // logging is disabled\n  CLOUDWATCH_LOGLEVEL: optional,\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\n\n  // Host used when developing locally but an externally accessible url is\n  // needed. (example: d92dd1d1fa99.ngrok.io)\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\n\n  // path to static files for the admin app\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\n\n  // path to static files for the console app\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\n\n  // path to static files for the docs app\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\n\n  // API key used to send transactional email notifications through Sendgrid.\n  SENDGRID_API_KEY: required,\n\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\n\n  // API key used to fetch feature flags from LaunchDarkly\n  LAUNCHDARKLY_API_KEY: optional,\n\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\n  NUM_WORKERS: optional,\n\n  // Encryption key used when storing secrets in the database\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\n\n  // Encryption key used when generating file permalinks\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\n\n  // sentry.io environment setting\n  SENTRY_ENVIRONMENT: optional,\n  SENTRY_RELEASE: optional,\n  SENTRY_TRACE_SAMPLE_RATE: optional,\n\n  // Auth0 Environment variables\n  // 1) For SPA application\n  AUTH0_CLIENT_ID: required,\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\n\n  // 2) For verifying incoming events\n  AUTH0_WEBHOOK_SECRET: required,\n\n  // 3) For server to server communication\n  AUTH0_MTM_CLIENT_ID: required,\n  AUTH0_MTM_CLIENT_SECRET: required,\n  AUTH0_GENERAL_DOMAIN: required,\n\n  // console.cord.com cord app credentials\n  DEV_CONSOLE_CORD_APP_SECRET: required,\n\n  // secret for signing admin tokens to serve as proof user is logged in to\n  // admin\n  ADMIN_TOKEN_SECRET: required,\n\n  // flag whether the SDK testbed should be built and served\n  INCLUDE_SDK_TESTBED: optional,\n\n  // secret for cookies on the docs web site\n  DOCS_COOKIE_PARSER_SECRET: optional,\n\n  // set email for all notifications when testing with users on testbed\n  TESTBED_USERS_EMAIL: optional,\n\n  // secret for creating searchable embeddings and generating search\n  // results within our docs\n  OPENAI_API_SECRET: required,\n\n  // secret for getting geographic information from an IP address\n  IPSTACK_API_SECRET: optional,\n\n  // Host for where we generate the ai chat bot in the docs\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\n\n  // Google analytic events\n  GA_MEASUREMENT_ID: required,\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\n\n  // secret for stripe\n  STRIPE_SECRET_KEY: required,\n  STRIPE_WEBHOOK_SECRET_KEY: required,\n\n  DEMO_APPS_SHARED_SECRET: required,\n\n  // loops.so for sending newletters\n  LOOPS_SO_API_KEY: required,\n});\n"],
  "mappings": "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",
  "names": ["defaultValue"]
}
