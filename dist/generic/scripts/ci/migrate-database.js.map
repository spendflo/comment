{
  "version": 3,
  "sources": ["scripts/ci/migrate-database.ts", "scripts/lib/migrate_db.mjs", "scripts/ci/lib/helpers.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\r\n\r\nimport { performance } from 'perf_hooks';\r\n\r\nimport 'dotenv/config.js';\r\nimport { getPendingMigrations } from 'scripts/lib/migrate_db.mjs';\r\n\r\nimport { postMessageFactory, runCommandLine } from 'scripts/ci/lib/helpers.ts';\r\nimport env from 'server/src/config/Env.ts';\r\n\r\nasync function main(): Promise<number> {\r\n  // Get us a function to post important messages to the Slack ops channel\r\n  const postErrorMessage = await postMessageFactory(\r\n    env.CORD_OPS_SLACK_CHANNEL_ID,\r\n  );\r\n\r\n  const postInfoMessage = await postMessageFactory(\r\n    env.PROD_CHANGES_SLACK_CHANNEL_ID,\r\n  );\r\n\r\n  try {\r\n    // Do we need to do a database migration?\r\n    // This checks whether the current database schema on the prod/staging\r\n    // database has all the migrations applied that we ship in the container.\r\n    console.log('Check if migration is pending');\r\n    const pendingMigrations = await getPendingMigrations();\r\n    const migrationNeeded = pendingMigrations.length > 0;\r\n\r\n    if (!migrationNeeded) {\r\n      console.log('\\n\\nNo database migration required');\r\n      return 0;\r\n    }\r\n\r\n    const migrationsSuffix = `\\n\\n\u2022 ${pendingMigrations.join('\\n\u2022 ')}`;\r\n    // We need to apply the database migration!\r\n    console.log('\\n\\nStarting a database migration');\r\n    await postInfoMessage('Starting a database migration:' + migrationsSuffix);\r\n\r\n    // Print out warnings on Slack if the migration is taking a long time.\r\n    const migrationStartTime = performance.now();\r\n    const timeoutID = setInterval(() => {\r\n      void postErrorMessage(\r\n        `Database migration still has not finished after ${Math.round(\r\n          (performance.now() - migrationStartTime) / 1000,\r\n        )} seconds`,\r\n      );\r\n    }, 30 * 1000);\r\n\r\n    const exitCode = await runCommandLine('npm', ['run', 'migrate']).finally(\r\n      () => clearInterval(timeoutID),\r\n    );\r\n\r\n    if (exitCode === 0) {\r\n      const completionMessage =\r\n        'Successfully completed database migrations:' + migrationsSuffix;\r\n      await postInfoMessage(completionMessage);\r\n    } else {\r\n      throw new Error(\r\n        `'npm run migrate' failed (process exit code: ${exitCode})`,\r\n      );\r\n    }\r\n  } catch (err) {\r\n    await postErrorMessage(`Database migration failed: ${err}`);\r\n    throw err;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nmain().then(\r\n  (code) => process.exit(code),\r\n  (err) => {\r\n    console.error(err);\r\n    process.exit(1);\r\n  },\r\n);\r\n", "import {\r\n  getMigrator,\r\n  ensureCurrentMetaSchema,\r\n} from 'sequelize-cli/lib/core/migrator.js';\r\nimport api from 'sequelize-cli/lib/helpers/config-helper.js';\r\n\r\nexport async function getPendingMigrations() {\r\n  await api.init();\r\n  const migrator = await getMigrator('migration', {});\r\n  ensureCurrentMetaSchema(migrator);\r\n  return (await migrator.pending()).map(({ file }) => file);\r\n}\r\n", "import * as child_process from 'child_process';\r\n\r\nimport * as Slack from '@slack/web-api';\r\nimport pg from 'pg';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\n\r\n/**\r\n * Run a command line and return the exit code\r\n */\r\nexport function runCommandLine(\r\n  cmd: string,\r\n  args: string[],\r\n  options: child_process.SpawnOptions = {},\r\n  stdin?: string,\r\n): Promise<number | null> {\r\n  console.log(`Executing command:\\n  ${cmd} ${args.join(' ')}\\n`);\r\n  return new Promise<number | null>((resolve, reject) => {\r\n    const proc = child_process.spawn(cmd, args, {\r\n      stdio: [stdin === undefined ? 'ignore' : 'pipe', 'inherit', 'inherit'],\r\n      ...options,\r\n    });\r\n    if (stdin !== undefined && proc.stdin) {\r\n      const stream = proc.stdin;\r\n      stream.write(stdin, 'utf-8', () => stream.end());\r\n    }\r\n    proc.on('error', reject);\r\n    proc.once('close', (code) => resolve(code));\r\n  });\r\n}\r\n\r\nexport async function connectToDatabase() {\r\n  const clientConfig: pg.ClientConfig = {\r\n    user: env.POSTGRES_USER,\r\n    host: env.POSTGRES_HOST,\r\n    database: env.POSTGRES_DB,\r\n    password: env.POSTGRES_PASSWORD,\r\n    port:\r\n      env.POSTGRES_PORT !== undefined ? Number(env.POSTGRES_PORT) : undefined,\r\n  };\r\n\r\n  const client = new pg.Client(clientConfig);\r\n  await client.connect();\r\n  return client;\r\n}\r\n\r\nexport async function postMessageFactory(slackChannelID: string | undefined) {\r\n  if (slackChannelID) {\r\n    try {\r\n      const token = env.SLACK_INTERNAL_BOT_TOKEN;\r\n      let prefix = '';\r\n\r\n      const {\r\n        GITHUB_REPOSITORY,\r\n        GITHUB_RUN_ID,\r\n        GITHUB_RUN_NUMBER,\r\n        GITHUB_SERVER_URL,\r\n      } = process.env;\r\n      if (\r\n        GITHUB_REPOSITORY &&\r\n        GITHUB_RUN_ID &&\r\n        GITHUB_RUN_NUMBER &&\r\n        GITHUB_SERVER_URL\r\n      ) {\r\n        prefix = `[<${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|#${GITHUB_RUN_NUMBER}>] `;\r\n      }\r\n\r\n      const slackClient = new Slack.WebClient(token);\r\n      return async (text: string) => {\r\n        try {\r\n          await slackClient.chat.postMessage({\r\n            channel: slackChannelID,\r\n            text: prefix + text,\r\n          });\r\n        } catch (err) {\r\n          console.error(`Error posting message to Slack: ${text}`, err);\r\n        }\r\n      };\r\n    } catch (err) {\r\n      console.error('Cannot post messages to Slack:', err);\r\n    }\r\n  }\r\n  return (text: string) => {\r\n    console.log(text);\r\n    return Promise.resolve();\r\n  };\r\n}\r\n\r\nexport const sleepSeconds = (seconds: number) => sleep(seconds * 1000);\r\n", "// There is some TypeScript trickery in this file. It is optimised for making\r\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\r\n// and self-explanatory, and the type hints displayed by the IDE should be\r\n// useful.\r\n\r\n// Define types to declare variables as required, optional or having a default\r\n// value.  If these classes were empty, TypeScript would treat them as\r\n// interchangeable. By giving them different shapes (i.e. different members),\r\n// TypeScript will keep them apart.\r\nclass RequiredVariable {\r\n  public readonly req = true;\r\n}\r\nclass OptionalVariable {\r\n  public readonly opt = true;\r\n}\r\nclass VariableWithDefaultValue {\r\n  constructor(public readonly defaultValue: string) {}\r\n}\r\n\r\n// These are the helpers that are used by the caller of `magicEnv` to define\r\n// their environment fields.\r\nexport const required = new RequiredVariable();\r\nexport const optional = new OptionalVariable();\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const defaultValue = (defaultValue: string) =>\r\n  new VariableWithDefaultValue(defaultValue);\r\n\r\n// Here comes the main function of this module: `magicEnv`. It takes one\r\n// parameter: a JavaScript object with string keys and values of type\r\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\r\n//\r\n// `magicEnv` is a template function, which is quite important.\r\n// `EnvDefinitionType` is the specific type of the environment definition.\r\n// That type must comply with the restriction that it is an object with string\r\n// keys and those variable types as values.  However, we will need the\r\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\r\n// the corresponding value types. We get access to this type by templating this\r\n// function.\r\nexport function magicEnv<\r\n  EnvDefinitionType extends {\r\n    [key: string]:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue;\r\n  },\r\n>(\r\n  processEnv: { [key: string]: string | undefined },\r\n  envDefinition: EnvDefinitionType,\r\n) {\r\n  // Now start constructing the result of this function.\r\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\r\n\r\n  // And now we iterate through the `envDefinition` object, which we received\r\n  // from the callback function.\r\n  for (const key of Object.keys(envDefinition) as (string &\r\n    keyof EnvDefinitionType)[]) {\r\n    // This is the value from the process environment\r\n    const value: string | undefined = processEnv[key];\r\n\r\n    // This is the value from the definition object at the top\r\n    const fieldDefinition:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue = envDefinition[key];\r\n\r\n    if ((fieldDefinition as any).req) {\r\n      // This is a required variable.\r\n\r\n      if (value === undefined) {\r\n        throw new Error(`Missing key ${key} in environment`);\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    } else if ((fieldDefinition as any).opt) {\r\n      // This is an optional variable. `value` may be a string or undefined.\r\n\r\n      env[key] = value;\r\n    } else {\r\n      // This is a variable with a default value (the value of\r\n      // `fieldDefinition`)\r\n\r\n      if (value === undefined) {\r\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the `env` object that we have just constructed, but return with a\r\n  // special type that we define here: it is an object which contains all the\r\n  // keys that the definition object has. The value type is `string`, except\r\n  // for fields that correspond to optional variables, those have type\r\n  // `string | undefined`. All fields are declared readonly.\r\n  return env as {\r\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\r\n      ? string | undefined\r\n      : string;\r\n  };\r\n}\r\n", "import {\r\n  magicEnv,\r\n  required,\r\n  optional,\r\n  defaultValue,\r\n} from 'server/src/config/MagicEnv.ts';\r\n\r\nexport default magicEnv(process.env, {\r\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\r\n  // libraries we import, to switch between development and production mode.\r\n  // Just to make sure it is set in the process environment, we include it here.\r\n  NODE_ENV: required,\r\n\r\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\r\n  CORD_TIER: required,\r\n\r\n  // Accept connections on these ports\r\n  API_SERVER_PORT: optional,\r\n  ADMIN_SERVER_PORT: optional,\r\n  METRICS_SERVER_PORT: optional,\r\n  STATUS_SERVER_PORT: optional,\r\n  CONSOLE_SERVER_PORT: optional,\r\n  DOCS_SERVER_PORT: optional,\r\n\r\n  // PostgreSQL connection configuration - required\r\n  POSTGRES_HOST: required,\r\n  POSTGRES_PORT: required,\r\n  POSTGRES_USER: required,\r\n  POSTGRES_PASSWORD: required,\r\n  POSTGRES_DB: required,\r\n\r\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\r\n  // as above)\r\n  POSTGRES_READ_HOST: optional,\r\n  POSTGRES_READ_PORT: optional,\r\n\r\n  // Redis connection configuration\r\n  REDIS_PORT: required,\r\n  REDIS_HOST: required,\r\n  PREDIS_PORT: required,\r\n  PREDIS_HOST: required,\r\n\r\n  // URLs pointing to our own endpoints\r\n  TOP_SERVER_HOST: required,\r\n  APP_SERVER_HOST: required,\r\n  API_SERVER_HOST: required,\r\n  API_SERVER_HOST_PRODUCTION: required,\r\n  ADMIN_SERVER_HOST: required,\r\n  MARKETING_SERVER_HOST: required,\r\n  PUBLIC_UPLOADS_HOST: required,\r\n  CONSOLE_SERVER_HOST: required,\r\n  CORD_TO_HOST: required,\r\n  DOCS_SERVER_HOST: required,\r\n  CLACK_SERVER_HOST: optional,\r\n  COMMUNITY_SERVER_HOST: required,\r\n\r\n  // Slack App credentials - required\r\n  SLACK_APP_CLIENT_SECRET: required,\r\n  SLACK_DEV_APP_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\r\n  SLACK_APP_REDIRECT_HOST: optional,\r\n  SLACK_SIGNING_SECRET: required,\r\n  SLACK_ADMIN_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_SIGNING_SECRET: required,\r\n  SLACK_INTERNAL_BOT_TOKEN: required,\r\n  SLACK_INTERNAL_SIGNING_SECRET: required,\r\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\r\n\r\n  // S3 Bucket File storage\r\n  S3_ACCESS_KEY_ID: optional,\r\n  S3_ACCESS_KEY_SECRET: optional,\r\n  S3_REGION: required,\r\n  S3_BUCKET: required,\r\n  S3_PUBLIC_BUCKET: required,\r\n  S3_ENDPOINT: required,\r\n  S3_USE_PATH_BASED_URLS: required,\r\n\r\n  EMAIL_LINKS_TOKEN_SECRET: required,\r\n\r\n  // Jira App credentials - required\r\n  JIRA_APP_CLIENT_ID: required,\r\n  JIRA_APP_CLIENT_SECRET: required,\r\n\r\n  // Asana App credentials - required\r\n  ASANA_APP_CLIENT_ID: required,\r\n  ASANA_APP_CLIENT_SECRET: required,\r\n\r\n  // Linear App credentials - required\r\n  LINEAR_APP_CLIENT_ID: required,\r\n  LINEAR_APP_CLIENT_SECRET: required,\r\n\r\n  // Trello App credentials - required\r\n  TRELLO_APP_CLIENT_ID: required,\r\n  TRELLO_APP_CLIENT_SECRET: required,\r\n\r\n  // Monday App credentials - required\r\n  MONDAY_APP_CLIENT_ID: required,\r\n  MONDAY_APP_CLIENT_SECRET: required,\r\n\r\n  // Secret for session tokens - required\r\n  JWT_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\r\n  OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\r\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Log level for console logging - optional ('info' if not provided)\r\n  LOGLEVEL: defaultValue('info'),\r\n\r\n  // Post error messages to this Slack channel,\r\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post informational changes to prod setup, including deploy and db migration\r\n  // messages, to this Slack channel\r\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post security/SOC2 compliance messages to this Slack channel,\r\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post info about go redirects to this Slack channel\r\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post messages from customers to this Slack channel\r\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post client request messages to this Slack channel\r\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // For sending search queries from the docs site to Slack\r\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\r\n  // logging is disabled\r\n  CLOUDWATCH_LOGLEVEL: optional,\r\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\r\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\r\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\r\n\r\n  // Host used when developing locally but an externally accessible url is\r\n  // needed. (example: d92dd1d1fa99.ngrok.io)\r\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\r\n\r\n  // path to static files for the admin app\r\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\r\n\r\n  // path to static files for the console app\r\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\r\n\r\n  // path to static files for the docs app\r\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\r\n\r\n  // API key used to send transactional email notifications through Sendgrid.\r\n  SENDGRID_API_KEY: required,\r\n\r\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\r\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\r\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\r\n\r\n  // API key used to fetch feature flags from LaunchDarkly\r\n  LAUNCHDARKLY_API_KEY: optional,\r\n\r\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\r\n  NUM_WORKERS: optional,\r\n\r\n  // Encryption key used when storing secrets in the database\r\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\r\n\r\n  // Encryption key used when generating file permalinks\r\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\r\n\r\n  // sentry.io environment setting\r\n  SENTRY_ENVIRONMENT: optional,\r\n  SENTRY_RELEASE: optional,\r\n  SENTRY_TRACE_SAMPLE_RATE: optional,\r\n\r\n  // Auth0 Environment variables\r\n  // 1) For SPA application\r\n  AUTH0_CLIENT_ID: required,\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\r\n\r\n  // 2) For verifying incoming events\r\n  AUTH0_WEBHOOK_SECRET: required,\r\n\r\n  // 3) For server to server communication\r\n  AUTH0_MTM_CLIENT_ID: required,\r\n  AUTH0_MTM_CLIENT_SECRET: required,\r\n  AUTH0_GENERAL_DOMAIN: required,\r\n\r\n  // console.cord.com cord app credentials\r\n  DEV_CONSOLE_CORD_APP_SECRET: required,\r\n\r\n  // secret for signing admin tokens to serve as proof user is logged in to\r\n  // admin\r\n  ADMIN_TOKEN_SECRET: required,\r\n\r\n  // flag whether the SDK testbed should be built and served\r\n  INCLUDE_SDK_TESTBED: optional,\r\n\r\n  // secret for cookies on the docs web site\r\n  DOCS_COOKIE_PARSER_SECRET: optional,\r\n\r\n  // set email for all notifications when testing with users on testbed\r\n  TESTBED_USERS_EMAIL: optional,\r\n\r\n  // secret for creating searchable embeddings and generating search\r\n  // results within our docs\r\n  OPENAI_API_SECRET: required,\r\n\r\n  // secret for getting geographic information from an IP address\r\n  IPSTACK_API_SECRET: optional,\r\n\r\n  // Host for where we generate the ai chat bot in the docs\r\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\r\n\r\n  // Google analytic events\r\n  GA_MEASUREMENT_ID: required,\r\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\r\n\r\n  // secret for stripe\r\n  STRIPE_SECRET_KEY: required,\r\n  STRIPE_WEBHOOK_SECRET_KEY: required,\r\n\r\n  DEMO_APPS_SHARED_SECRET: required,\r\n\r\n  // loops.so for sending newletters\r\n  LOOPS_SO_API_KEY: required,\r\n});\r\n"],
  "mappings": "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",
  "names": ["defaultValue"]
}
