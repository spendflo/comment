{
  "version": 3,
  "sources": ["scripts/find-token-signer.ts", "server/src/entity/sequelize.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts", "server/src/entity/event/EventEntity.ts", "server/src/entity/message/MessageEntity.ts", "common/types/index.ts", "common/util/index.ts", "common/const/Urls.ts", "common/const/Ids.ts", "opensource/sdk-js/packages/react/common/lib/messageNode.ts", "server/src/entity/org/OrgEntity.ts", "server/src/entity/linked_orgs/LinkedOrgsEntity.ts", "server/src/slack/types.ts", "server/src/entity/user/UserEntity.ts", "server/src/entity/file/FileEntity.ts", "server/src/files/upload.ts", "common/const/Timing.ts", "server/src/logging/Logger.ts", "server/src/entity/application/ApplicationEntity.ts", "server/src/featureflags/index.ts", "common/const/FeatureFlags.ts", "server/src/email/index.ts", "server/src/entity/email_notification/EmailOutboundNotificationEntity.ts", "server/src/email/utils.ts", "common/const/Sizes.ts", "server/src/entity/customer/CustomerEntity.ts", "server/src/logging/flatFormat.ts", "package.json", "server/src/logging/prometheus.ts", "server/src/auth/index.ts", "server/src/util/CordError.ts", "server/src/entity/org_members/OrgMembersEntity.ts", "server/src/entity/s3_bucket/S3BucketLoader.ts", "server/src/entity/s3_bucket/S3BucketEntity.ts", "server/src/entity/base/util.ts", "server/src/files/download.ts", "server/src/entity/message_attachment/MessageAttachmentEntity.ts", "server/src/entity/message_reaction/MessageReactionEntity.ts", "server/src/entity/message_mention/MessageMentionEntity.ts", "server/src/entity/slack_channel/SlackChannelEntity.ts", "server/src/entity/slack_message/SlackMessageEntity.ts", "server/src/entity/user_preference/UserPreferenceEntity.ts", "server/src/entity/task/TaskEntity.ts", "server/src/entity/task_todo/TaskTodoEntity.ts", "server/src/entity/task_assignee/TaskAssigneeEntity.ts", "server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts", "server/src/entity/common.ts", "server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts", "server/src/entity/page/PageEntity.ts", "server/src/entity/thread/ThreadEntity.ts", "server/src/entity/org_members/OrgMembersLoader.ts", "server/src/entity/org/OrgLoader.ts", "server/src/entity/thread_participant/ThreadParticipantEntity.ts", "server/src/entity/page_visitor/PageVisitorEntity.ts", "server/src/entity/session/SessionEntity.ts", "server/src/logging/performance.ts", "server/src/entity/heimdall/HeimdallEntity.ts", "server/src/entity/email_subscription/EmailSubscriptionEntity.ts", "server/src/entity/linked_users/LinkedUsersEntity.ts", "server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts", "server/src/entity/message_notification/MessageOutboundNotificationEntity.ts", "server/src/entity/user/ConsoleUserEntity.ts", "server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts", "server/src/entity/extrernal_asset/ExternalAssetEntity.ts", "server/src/entity/image_variant/ImageVariantEntity.ts", "server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts", "server/src/entity/deploys/DeploysEntity.ts", "server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts", "server/src/entity/notification/NotificationEntity.ts", "server/src/entity/go_redirect/AdminGoRedirectEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts", "server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts", "server/src/entity/application_webhook/ApplicationWebhookEntity.ts", "server/src/entity/demo/WarmDemoUserEntity.ts", "server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts", "server/src/entity/permission/PermisssionRuleEntity.ts", "server/src/entity/org_org_members/OrgOrgMembersEntity.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\n\n// This script lets you try to figure out who signed a token by attempting to\n// verify the token against each application's shared secret in the DB.  Pass\n// the token in the --token flag.\n//\n// You probably want to run this against the production database by doing\n// something like:\n//\n// $ npm run db-ssh-tunnel\n// $ POSTGRES_PORT=15432 POSTGRES_USER=ChuckNorris POSTGRES_PASSWORD=\"$(aws secretsmanager get-secret-value --secret-id database-prod-1 | jq -r '.SecretString | fromjson | .password')\" ./dist/scripts/find-token-signer.js --token <TOKEN>\n\nimport 'dotenv/config.js';\nimport yargs from 'yargs';\nimport { verify } from 'jsonwebtoken';\nimport { initSequelize } from 'server/src/entity/sequelize.ts';\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\n\nasync function main() {\n  const argv = yargs(process.argv.slice(2))\n    .option({\n      token: {\n        description: 'token',\n        type: 'string',\n      },\n    })\n    .demandOption('token').argv;\n\n  await initSequelize('script');\n\n  const apps = await ApplicationEntity.findAll();\n\n  let found = false;\n\n  for (const app of apps) {\n    try {\n      verify(argv.token, app.sharedSecret, {\n        algorithms: ['HS256', 'HS512'],\n        ignoreExpiration: true,\n      });\n      found = true;\n      console.log(`Verified with shared secret of ${app.name} - ${app.id}`);\n    } catch (e) {\n      // Go to next one\n    }\n  }\n  if (!found) {\n    console.log('No matching app found');\n  }\n}\n\nmain().then(\n  () => process.exit(0),\n  (err) => {\n    console.error(err);\n    process.exit(1);\n  },\n);\n", "import type { SequelizeOptions } from 'sequelize-typescript';\nimport { Sequelize } from 'sequelize-typescript';\n\nimport { DatabaseError, QueryTypes, Transaction } from 'sequelize';\nimport env from 'server/src/config/Env.ts';\nimport sleep from 'common/util/sleep.ts';\nimport { EventEntity } from 'server/src/entity/event/EventEntity.ts';\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\nimport { MessageReactionEntity } from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\nimport { MessageMentionEntity } from 'server/src/entity/message_mention/MessageMentionEntity.ts';\nimport { SlackChannelEntity } from 'server/src/entity/slack_channel/SlackChannelEntity.ts';\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\nimport {\n  Gauge,\n  TimeHistogram,\n  logBuckets,\n} from 'server/src/logging/prometheus.ts';\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\nimport { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\nimport { SessionEntity } from 'server/src/entity/session/SessionEntity.ts';\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\nimport { HeimdallEntity } from 'server/src/entity/heimdall/HeimdallEntity.ts';\nimport { EmailSubscriptionEntity } from 'server/src/entity/email_subscription/EmailSubscriptionEntity.ts';\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\nimport { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\nimport { ExternalAssetEntity } from 'server/src/entity/extrernal_asset/ExternalAssetEntity.ts';\nimport { ImageVariantEntity } from 'server/src/entity/image_variant/ImageVariantEntity.ts';\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\nimport { DeploysEntity } from 'server/src/entity/deploys/DeploysEntity.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\nimport { TaskThirdPartySubscriptionEntity } from 'server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts';\nimport { ApplicationUsageMetricEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts';\nimport { ApplicationUsageMetricTypeEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts';\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\nimport { AdminGoRedirectEntity } from 'server/src/entity/go_redirect/AdminGoRedirectEntity.ts';\nimport type { WorkerType } from 'server/src/server.ts';\nimport { AdminCRTCustomerIssueEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts';\nimport { AdminCRTCustomerIssueChangeEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts';\nimport { AdminCRTCustomerIssueSubscriptionEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts';\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\nimport { WarmDemoUserEntity } from 'server/src/entity/demo/WarmDemoUserEntity.ts';\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\nimport { PermissionRuleEntity } from 'server/src/entity/permission/PermisssionRuleEntity.ts';\nimport { OrgOrgMembersEntity } from 'server/src/entity/org_org_members/OrgOrgMembersEntity.ts';\n\nconst {\n  POSTGRES_HOST,\n  POSTGRES_DB,\n  POSTGRES_PASSWORD,\n  POSTGRES_PORT,\n  POSTGRES_USER,\n} = env;\n\nconst MAX_QUERY_LOG_LENGTH = 10000;\n\ntype SequelizeWorkerType = WorkerType | 'async' | 'test' | 'master' | 'script';\n\nconst queryExecutionTimeMetric = TimeHistogram({\n  name: 'SequelizeQueryTime',\n  help: 'Execution time of Sequelize queries',\n  labelNames: ['type', 'appID'],\n});\n\nconst openDbConnectionsMetric = Gauge({\n  name: 'OpenDatabaseConnections',\n  help: 'Number of open database connections',\n});\n\nconst acquireTimeMetric = TimeHistogram({\n  name: 'SequelizePoolAcquireTime',\n  help: 'Time spent waiting to acquire a Sequelize connection',\n  // Like our default buckets, but extend the lower bound down to 10us because\n  // connection acquire should be very fast.\n  buckets: logBuckets(0.00001, 10, 19),\n});\n\n// These metrics use `sequelize.connectionManager as any` because the\n// connectionManager has a public property that holds the actual pool (a Pool\n// object from sequelize-pool), but it doesn't appear in the TS types.\n\nconst _availableConnectionsMetric = Gauge({\n  name: 'SequelizePoolAvailable',\n  help: 'Number of available connections in the Sequelize connection pool',\n  collect() {\n    if (sequelize) {\n      this.set((sequelize.connectionManager as any).pool.available);\n    }\n  },\n});\n\nconst _usingConnectionsMetric = Gauge({\n  name: 'SequelizePoolUsed',\n  help: 'Number of in-use connections in the Sequelize connection pool',\n  collect() {\n    if (sequelize) {\n      this.set((sequelize.connectionManager as any).pool.using);\n    }\n  },\n});\n\nconst _waitingConnectionsMetric = Gauge({\n  name: 'SequelizePoolWaiting',\n  help: 'Number of requests waiting for a Sequelize connection',\n  collect() {\n    if (sequelize) {\n      this.set((sequelize.connectionManager as any).pool.waiting);\n    }\n  },\n});\n\nconst acquireStarts = new WeakMap<object, number>();\n\nconst apiSequelizeOptions: SequelizeOptions = {\n  dialect: 'postgres',\n  host: POSTGRES_HOST,\n  port: Number(POSTGRES_PORT),\n  username: POSTGRES_USER,\n  password: POSTGRES_PASSWORD,\n  database: POSTGRES_DB,\n  schema: 'cord',\n  models: [\n    EventEntity,\n    MessageEntity,\n    MessageAttachmentEntity,\n    MessageLinkPreviewEntity,\n    ThreadParticipantEntity,\n    PageVisitorEntity,\n    OrgEntity,\n    UserEntity,\n    FileEntity,\n    PageEntity,\n    ThreadEntity,\n    PreallocatedThreadIDEntity,\n    MessageReactionEntity,\n    MessageMentionEntity,\n    SlackChannelEntity,\n    SlackMessageEntity,\n    UserPreferenceEntity,\n    DeploysEntity,\n    TaskEntity,\n    TaskTodoEntity,\n    TaskAssigneeEntity,\n    ThirdPartyConnectionEntity,\n    TaskThirdPartyReference,\n    TaskThirdPartySubscriptionEntity,\n    ApplicationEntity,\n    CustomerEntity,\n    SessionEntity,\n    OrgMembersEntity,\n    S3BucketEntity,\n    HeimdallEntity,\n    EmailSubscriptionEntity,\n    LinkedOrgsEntity,\n    LinkedUsersEntity,\n    SlackMirroredThreadEntity,\n    MessageOutboundNotificationEntity,\n    ConsoleUserEntity,\n    UserHiddenAnnotationsEntity,\n    ExternalAssetEntity,\n    ImageVariantEntity,\n    EmailOutboundNotificationEntity,\n    SlackMirroredSupportThreadEntity,\n    ApplicationUsageMetricEntity,\n    ApplicationUsageMetricTypeEntity,\n    NotificationEntity,\n    AdminGoRedirectEntity,\n    AdminCRTCustomerIssueEntity,\n    AdminCRTCustomerIssueChangeEntity,\n    AdminCRTCustomerIssueSubscriptionEntity,\n    ApplicationWebhookEntity,\n    WarmDemoUserEntity,\n    PermissionRuleEntity,\n    OrgOrgMembersEntity,\n  ],\n  benchmark: true,\n  logging: (...args) => {\n    // In `sequelize-typescript`, the arguments to `logging` are declared as\n    // `(msg: string, timing: number)` only, but Sequelize does give us an\n    // additional object full of information. Override the typing:\n    const [msg, timing_ms, sequelizeInfo] = args as unknown as [\n      string,\n      number,\n      any,\n    ];\n\n    // CloudWatch doesn't allow messages over a certain length, and well before\n    // that we hit the point where a human reading it will get the idea\n    // (inevitably, a gigantic WHERE clause). Serializing all that crap also\n    // takes CPU time. So cut down truly absurd messages to something a little\n    // less absurd.\n    const truncatedMsg =\n      msg.length <= MAX_QUERY_LOG_LENGTH\n        ? msg\n        : msg.substring(0, MAX_QUERY_LOG_LENGTH) +\n          ` (truncated from ${msg.length} bytes)`;\n\n    // The `sequelizeInfo` object may contain a huge amount of information,\n    // including full model definition and information on each and every type\n    // that exists in SQL, etc. etc.\n    // We pick a few fields to log:\n    // * type: the operation type such as 'SELECT', 'INSERT', etc. This is the\n    // Sequelize operation type, which is not the same as SQL, because it\n    // includes e.g. 'UPSERT'\n    // * bind: the parameter values bound to query placeholders (`$1`, `$2`,\n    // ...)\n    // * tableNames: just a list of the names of tables involved in this\n    // operation\n    const { type, bind, tableNames } = sequelizeInfo;\n\n    const storage = asyncLocalStorage?.getStore();\n\n    const logger = storage?.logger ?? anonymousLogger();\n    logger.debug(`Sequelize: ${truncatedMsg}`, {\n      sequelize: { type, bind, tableNames },\n      timing_ms,\n      operationName: storage?.operationName,\n      operationID: storage?.operationID,\n      platformApplicationID: storage?.platformApplicationID,\n    });\n\n    // time histogram work in units of seconds, we get milliseconds from\n    // Sequelize\n    queryExecutionTimeMetric.observe(\n      { type, appID: storage?.platformApplicationID },\n      timing_ms / 1000,\n    );\n  },\n  pool: {\n    // Maximum number of connection in pool\n    max: 50,\n\n    // Minimum number of connection in pool\n    min: 50,\n\n    // The number of times a connection can be used before discarding it for a\n    // replacement\n    maxUses: 500,\n\n    // Time out if the pool doesn't manage to establish a new connection within\n    // 10 seconds\n    acquire: 10000,\n  },\n  hooks: {\n    // on any new database connection we set the search path, so when\n    // database objects (tables, types, functions etc.) are given without\n    // explicitly specifying the schema they are in, they are found if\n    // they are in either cord or public.\n    // This is also done in `.sequelize-config.js` so that it applies in\n    // migrations, where statements such as `CREATE TABLE` will create\n    // objects in the first schema of the search_path (`cord`).\n    afterConnect: async (connection: any) => {\n      await connection.query('SET search_path=cord,public;');\n      openDbConnectionsMetric.inc(1);\n    },\n    afterDisconnect: (_connection: any) => {\n      openDbConnectionsMetric.dec(1);\n    },\n    beforePoolAcquire: (options) => {\n      acquireStarts.set(options, performance.now());\n    },\n    afterPoolAcquire: (_connection, options) => {\n      const start = acquireStarts.get(options);\n      if (start) {\n        const elapsed = performance.now() - start;\n        acquireStarts.delete(options);\n        acquireTimeMetric.observe(elapsed / 1000);\n      }\n    },\n  },\n  dialectOptions: {\n    // any SQL statement should timeout after 10s (10s is very conservative, we\n    // might want to reduce it further eventually).\n    statement_timeout: 10000,\n    // a transaction that does not send a statement for 5s should timeout\n    idle_in_transaction_session_timeout: 5000,\n  },\n};\n\nfunction initializeEntityRelationships() {\n  MessageEntity.hasMany(MessageMentionEntity, {\n    as: 'mentions',\n    foreignKey: 'messageID',\n  });\n\n  MessageEntity.hasMany(TaskEntity, {\n    as: 'tasks',\n    foreignKey: 'messageID',\n  });\n\n  TaskEntity.hasMany(TaskAssigneeEntity, {\n    as: 'assignees',\n    foreignKey: 'taskID',\n  });\n\n  TaskEntity.hasOne(MessageEntity, {\n    sourceKey: 'messageID',\n    foreignKey: 'id',\n    as: 'message',\n  });\n\n  TaskThirdPartyReference.hasOne(TaskEntity, {\n    as: 'task',\n    sourceKey: 'taskID',\n    foreignKey: 'id',\n  });\n\n  OrgEntity.hasOne(LinkedOrgsEntity, {\n    sourceKey: 'id',\n    foreignKey: 'linkedOrgID',\n  });\n\n  OrgMembersEntity.hasOne(UserEntity, {\n    sourceKey: 'userID',\n    foreignKey: 'id',\n  });\n\n  MessageEntity.hasOne(ThreadEntity, {\n    as: 'thread',\n    sourceKey: 'threadID',\n    foreignKey: 'id',\n  });\n}\n\nlet sequelize: Sequelize | undefined;\n\nexport function getSequelize(): Sequelize {\n  if (sequelize === undefined) {\n    throw new Error('Sequelize has not been initialised');\n  }\n  return sequelize;\n}\n\nfunction getSequelizeOptions(\n  workerType: SequelizeWorkerType,\n): SequelizeOptions {\n  switch (workerType) {\n    case 'api':\n    case 'test':\n    case 'master':\n    case 'script':\n      return apiSequelizeOptions;\n    case 'async':\n      return {\n        ...apiSequelizeOptions,\n        dialectOptions: {\n          // Set the statement timeout to 2 minutes (in milliseconds), to allow\n          // longer-running SQL statements in async jobs\n          ...apiSequelizeOptions.dialectOptions,\n          statement_timeout: 2 * 60 * 1000,\n        },\n      };\n    case 'admin':\n    case 'console':\n      return {\n        ...apiSequelizeOptions,\n        pool: {\n          ...apiSequelizeOptions.pool,\n          max: 20,\n          min: 0,\n        },\n      };\n    default: {\n      const _exhaustiveSwitchGuard: never = workerType;\n      throw new Error('Invalid worker type ' + workerType);\n    }\n  }\n}\n\nexport async function initSequelize(workerType: SequelizeWorkerType) {\n  if (sequelize !== undefined) {\n    throw new Error('Sequelize has been already initialised');\n  }\n  const opts = getSequelizeOptions(workerType);\n  const seq = new Sequelize(opts);\n  initializeEntityRelationships();\n\n  await seq.authenticate();\n  sequelize = seq;\n}\n\nexport function shutdownSequelize() {\n  const s = sequelize;\n  sequelize = undefined;\n  return s ? s.close() : Promise.resolve();\n}\n\nconst MAX_RETRIES = 5;\n\nexport async function serializableTransactionWithRetries<T>(\n  body: (t: Transaction) => Promise<T>,\n) {\n  let lastException;\n  for (let retryCount = 0; retryCount < MAX_RETRIES; retryCount++) {\n    try {\n      return await getSequelize().transaction(\n        {\n          isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\n        },\n        body,\n      );\n    } catch (e) {\n      if (\n        e instanceof DatabaseError &&\n        'code' in e.original &&\n        (e.original.code === '40001' || e.original.code === '40P01')\n      ) {\n        // Per https://www.postgresql.org/docs/current/errcodes-appendix.html,\n        // 40001 is serialization_error and 40P01 is deadlock_detected, which\n        // are the two cases we expect to have some chance of success if we\n        // retry\n        lastException = e;\n        // Exponential backoff to try to let other txns complete first. Wait\n        // 50ms, then 100ms, then 200ms, etc.\n        const exp = 2 ** retryCount;\n        const baseMs = 50 * exp;\n        const randMs = 50 * exp * Math.random();\n        await sleep(baseMs + randMs);\n        continue;\n      }\n      throw e;\n    }\n  }\n  throw lastException;\n}\n\nexport async function assertTransactionIsSerializable(\n  transaction: Transaction,\n) {\n  const type = await getSequelize().query<{ isolation_level: string }>(\n    `SELECT current_setting('transaction_isolation') AS isolation_level`,\n    {\n      type: QueryTypes.SELECT,\n      transaction,\n    },\n  );\n\n  // we have to lowercase the sequelize type as the value coming\n  // back from postgres is lowercase\n  const isSerializable =\n    type[0].isolation_level ===\n    Transaction.ISOLATION_LEVELS.SERIALIZABLE.toLowerCase();\n\n  if (!isSerializable) {\n    throw new Error('Transaction must be serializable');\n  }\n}\n", "// There is some TypeScript trickery in this file. It is optimised for making\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\n// and self-explanatory, and the type hints displayed by the IDE should be\n// useful.\n\n// Define types to declare variables as required, optional or having a default\n// value.  If these classes were empty, TypeScript would treat them as\n// interchangeable. By giving them different shapes (i.e. different members),\n// TypeScript will keep them apart.\nclass RequiredVariable {\n  public readonly req = true;\n}\nclass OptionalVariable {\n  public readonly opt = true;\n}\nclass VariableWithDefaultValue {\n  constructor(public readonly defaultValue: string) {}\n}\n\n// These are the helpers that are used by the caller of `magicEnv` to define\n// their environment fields.\nexport const required = new RequiredVariable();\nexport const optional = new OptionalVariable();\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\nexport const defaultValue = (defaultValue: string) =>\n  new VariableWithDefaultValue(defaultValue);\n\n// Here comes the main function of this module: `magicEnv`. It takes one\n// parameter: a JavaScript object with string keys and values of type\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\n//\n// `magicEnv` is a template function, which is quite important.\n// `EnvDefinitionType` is the specific type of the environment definition.\n// That type must comply with the restriction that it is an object with string\n// keys and those variable types as values.  However, we will need the\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\n// the corresponding value types. We get access to this type by templating this\n// function.\nexport function magicEnv<\n  EnvDefinitionType extends {\n    [key: string]:\n      | RequiredVariable\n      | OptionalVariable\n      | VariableWithDefaultValue;\n  },\n>(\n  processEnv: { [key: string]: string | undefined },\n  envDefinition: EnvDefinitionType,\n) {\n  // Now start constructing the result of this function.\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\n\n  // And now we iterate through the `envDefinition` object, which we received\n  // from the callback function.\n  for (const key of Object.keys(envDefinition) as (string &\n    keyof EnvDefinitionType)[]) {\n    // This is the value from the process environment\n    const value: string | undefined = processEnv[key];\n\n    // This is the value from the definition object at the top\n    const fieldDefinition:\n      | RequiredVariable\n      | OptionalVariable\n      | VariableWithDefaultValue = envDefinition[key];\n\n    if ((fieldDefinition as any).req) {\n      // This is a required variable.\n\n      if (value === undefined) {\n        throw new Error(`Missing key ${key} in environment`);\n      } else {\n        env[key] = value;\n      }\n    } else if ((fieldDefinition as any).opt) {\n      // This is an optional variable. `value` may be a string or undefined.\n\n      env[key] = value;\n    } else {\n      // This is a variable with a default value (the value of\n      // `fieldDefinition`)\n\n      if (value === undefined) {\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\n      } else {\n        env[key] = value;\n      }\n    }\n  }\n\n  // Return the `env` object that we have just constructed, but return with a\n  // special type that we define here: it is an object which contains all the\n  // keys that the definition object has. The value type is `string`, except\n  // for fields that correspond to optional variables, those have type\n  // `string | undefined`. All fields are declared readonly.\n  return env as {\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\n      ? string | undefined\n      : string;\n  };\n}\n", "import {\n  magicEnv,\n  required,\n  optional,\n  defaultValue,\n} from 'server/src/config/MagicEnv.ts';\n\nexport default magicEnv(process.env, {\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\n  // libraries we import, to switch between development and production mode.\n  // Just to make sure it is set in the process environment, we include it here.\n  NODE_ENV: required,\n\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\n  CORD_TIER: required,\n\n  // Accept connections on these ports\n  API_SERVER_PORT: optional,\n  ADMIN_SERVER_PORT: optional,\n  METRICS_SERVER_PORT: optional,\n  STATUS_SERVER_PORT: optional,\n  CONSOLE_SERVER_PORT: optional,\n  DOCS_SERVER_PORT: optional,\n\n  // PostgreSQL connection configuration - required\n  POSTGRES_HOST: required,\n  POSTGRES_PORT: required,\n  POSTGRES_USER: required,\n  POSTGRES_PASSWORD: required,\n  POSTGRES_DB: required,\n\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\n  // as above)\n  POSTGRES_READ_HOST: optional,\n  POSTGRES_READ_PORT: optional,\n\n  // Redis connection configuration\n  REDIS_PORT: required,\n  REDIS_HOST: required,\n  PREDIS_PORT: required,\n  PREDIS_HOST: required,\n\n  // URLs pointing to our own endpoints\n  TOP_SERVER_HOST: required,\n  APP_SERVER_HOST: required,\n  API_SERVER_HOST: required,\n  API_SERVER_HOST_PRODUCTION: required,\n  ADMIN_SERVER_HOST: required,\n  MARKETING_SERVER_HOST: required,\n  PUBLIC_UPLOADS_HOST: required,\n  CONSOLE_SERVER_HOST: required,\n  CORD_TO_HOST: required,\n  DOCS_SERVER_HOST: required,\n  CLACK_SERVER_HOST: optional,\n  COMMUNITY_SERVER_HOST: required,\n\n  // Slack App credentials - required\n  SLACK_APP_CLIENT_SECRET: required,\n  SLACK_DEV_APP_CLIENT_SECRET: required,\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\n  SLACK_APP_REDIRECT_HOST: optional,\n  SLACK_SIGNING_SECRET: required,\n  SLACK_ADMIN_CLIENT_SECRET: required,\n  SLACK_ADMIN_SIGNING_SECRET: required,\n  SLACK_INTERNAL_BOT_TOKEN: required,\n  SLACK_INTERNAL_SIGNING_SECRET: required,\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\n\n  // S3 Bucket File storage\n  S3_ACCESS_KEY_ID: optional,\n  S3_ACCESS_KEY_SECRET: optional,\n  S3_REGION: required,\n  S3_BUCKET: required,\n  S3_PUBLIC_BUCKET: required,\n  S3_ENDPOINT: required,\n  S3_USE_PATH_BASED_URLS: required,\n\n  EMAIL_LINKS_TOKEN_SECRET: required,\n\n  // Jira App credentials - required\n  JIRA_APP_CLIENT_ID: required,\n  JIRA_APP_CLIENT_SECRET: required,\n\n  // Asana App credentials - required\n  ASANA_APP_CLIENT_ID: required,\n  ASANA_APP_CLIENT_SECRET: required,\n\n  // Linear App credentials - required\n  LINEAR_APP_CLIENT_ID: required,\n  LINEAR_APP_CLIENT_SECRET: required,\n\n  // Trello App credentials - required\n  TRELLO_APP_CLIENT_ID: required,\n  TRELLO_APP_CLIENT_SECRET: required,\n\n  // Monday App credentials - required\n  MONDAY_APP_CLIENT_ID: required,\n  MONDAY_APP_CLIENT_SECRET: required,\n\n  // Secret for session tokens - required\n  JWT_SIGNING_SECRET: required,\n\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\n  OAUTH_STATE_SIGNING_SECRET: required,\n\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\n\n  // Log level for console logging - optional ('info' if not provided)\n  LOGLEVEL: defaultValue('info'),\n\n  // Post error messages to this Slack channel,\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\n\n  // Post informational changes to prod setup, including deploy and db migration\n  // messages, to this Slack channel\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\n\n  // Post security/SOC2 compliance messages to this Slack channel,\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\n\n  // Post info about go redirects to this Slack channel\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\n\n  // Post messages from customers to this Slack channel\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\n\n  // Post client request messages to this Slack channel\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\n\n  // For sending search queries from the docs site to Slack\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\n\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\n  // logging is disabled\n  CLOUDWATCH_LOGLEVEL: optional,\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\n\n  // Host used when developing locally but an externally accessible url is\n  // needed. (example: d92dd1d1fa99.ngrok.io)\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\n\n  // path to static files for the admin app\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\n\n  // path to static files for the console app\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\n\n  // path to static files for the docs app\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\n\n  // API key used to send transactional email notifications through Sendgrid.\n  SENDGRID_API_KEY: required,\n\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\n\n  // API key used to fetch feature flags from LaunchDarkly\n  LAUNCHDARKLY_API_KEY: optional,\n\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\n  NUM_WORKERS: optional,\n\n  // Encryption key used when storing secrets in the database\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\n\n  // Encryption key used when generating file permalinks\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\n\n  // sentry.io environment setting\n  SENTRY_ENVIRONMENT: optional,\n  SENTRY_RELEASE: optional,\n  SENTRY_TRACE_SAMPLE_RATE: optional,\n\n  // Auth0 Environment variables\n  // 1) For SPA application\n  AUTH0_CLIENT_ID: required,\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\n\n  // 2) For verifying incoming events\n  AUTH0_WEBHOOK_SECRET: required,\n\n  // 3) For server to server communication\n  AUTH0_MTM_CLIENT_ID: required,\n  AUTH0_MTM_CLIENT_SECRET: required,\n  AUTH0_GENERAL_DOMAIN: required,\n\n  // console.cord.com cord app credentials\n  DEV_CONSOLE_CORD_APP_SECRET: required,\n\n  // secret for signing admin tokens to serve as proof user is logged in to\n  // admin\n  ADMIN_TOKEN_SECRET: required,\n\n  // flag whether the SDK testbed should be built and served\n  INCLUDE_SDK_TESTBED: optional,\n\n  // secret for cookies on the docs web site\n  DOCS_COOKIE_PARSER_SECRET: optional,\n\n  // set email for all notifications when testing with users on testbed\n  TESTBED_USERS_EMAIL: optional,\n\n  // secret for creating searchable embeddings and generating search\n  // results within our docs\n  OPENAI_API_SECRET: required,\n\n  // secret for getting geographic information from an IP address\n  IPSTACK_API_SECRET: optional,\n\n  // Host for where we generate the ai chat bot in the docs\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\n\n  // Google analytic events\n  GA_MEASUREMENT_ID: required,\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\n\n  // secret for stripe\n  STRIPE_SECRET_KEY: required,\n  STRIPE_WEBHOOK_SECRET_KEY: required,\n\n  DEMO_APPS_SHARED_SECRET: required,\n\n  // loops.so for sending newletters\n  LOOPS_SO_API_KEY: required,\n});\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID, JsonObject, Tier } from 'common/types/index.ts';\nimport type { Session } from 'server/src/auth/index.ts';\n\n@Table({\n  tableName: 'events',\n  timestamps: false,\n})\nexport class EventEntity extends Model {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  // The unique load of the page/DOM instance (i.e. window/DOM object) where\n  // the event was generated\n  @Column({\n    type: DataTypes.UUID,\n  })\n  pageLoadID!: UUID;\n\n  // The unique id of the extension installation\n  @Column({\n    type: DataTypes.UUID,\n  })\n  installationID!: UUID | null;\n\n  // The version of the client logging this event\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  version!: string | null;\n\n  // The version of the client logging this event\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  utmParameters!: Session['utmParameters'] | null;\n\n  // The logged-in user when the event was generated (if there was one)\n  @Column({\n    type: DataTypes.UUID,\n  })\n  userID!: UUID | null;\n\n  // The user profile when the event was generated (if there was one)\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID | null;\n\n  // The platformApplicationID when the event was generated (if there was one)\n  @Column({\n    type: DataTypes.UUID,\n  })\n  platformApplicationID!: UUID | null;\n\n  // A monotically increasing (and usually sequential) index starting\n  // from zero at the beginning of the page that should help clarify\n  // the order of events in the case that the timestamps are inscrutable or too\n  // close to call.\n  @Column({\n    type: DataTypes.NUMBER,\n  })\n  eventNumber!: number;\n\n  // The timestamp as reported by the client (untrustworthy)\n  @Column({\n    type: DataTypes.TIME,\n  })\n  clientTimestamp!: Date;\n\n  // The timestamp for when the event reached the server (not\n  // guaranteed to be the time the event happened due to batching\n  // on the client)\n  @Column({\n    type: DataTypes.TIME,\n  })\n  serverTimestamp!: Date;\n\n  // An arbitrary label to differentiate this event\n  @Column({\n    type: DataTypes.STRING,\n  })\n  type!: string;\n\n  // An arbitrary data payload to send along with the event. Please\n  // be sane about what you log here. Think in 10s of bytes, not in\n  // kilobytes or megabytes.\n  @Column({\n    type: DataTypes.JSONB,\n    defaultValue: {},\n  })\n  payload!: JsonObject;\n\n  // A rich set of characteristics about the browser when the event\n  // generated.\n  @Column({\n    type: DataTypes.JSONB,\n    defaultValue: {},\n  })\n  metadata!: JsonObject;\n\n  @Column({\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\n    allowNull: false,\n    primaryKey: true,\n  })\n  tier!: Tier;\n}\n", "import {\n  Table,\n  Column,\n  PrimaryKey,\n  Model,\n  DefaultScope,\n} from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes, Sequelize } from 'sequelize';\nimport { MessageNodeType } from 'common/types/index.ts';\nimport type {\n  UUID,\n  MessageContent,\n  ImportedSlackMessageType,\n  MessageType,\n  EntityMetadata,\n  MessageNode,\n} from 'common/types/index.ts';\nimport { isDefined } from 'common/util/index.ts';\n\n@DefaultScope(() => ({\n  attributes: {\n    include: [\n      [\n        // We're sorting on this, so the format matters, and sorting alphabetically equals sorting chronologically.\n        Sequelize.literal('TO_CHAR(\"timestamp\", \\'YYYY-MM-DD HH24:MI:SS.US\\')'),\n        'createdAtWithMicros',\n      ],\n    ],\n  },\n}))\n@Table({\n  tableName: 'messages',\n  timestamps: false,\n})\nexport class MessageEntity extends Model<\n  InferAttributes<MessageEntity>,\n  InferCreationAttributes<MessageEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({ type: DataTypes.STRING })\n  externalID!: CreationOptional<string>;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  sourceID!: UUID;\n\n  @Column({\n    type: DataTypes.JSONB,\n    get(): MessageContent {\n      return cleanseMessageContent(this.getDataValue('content'));\n    },\n  })\n  content!: MessageContent;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  url!: string | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: CreationOptional<Date>;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  deletedTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastUpdatedTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  importedSlackChannelID!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  importedSlackMessageTS!: string | null;\n\n  @Column({\n    type: DataTypes.ENUM('reply', 'supportBotReply'),\n    defaultValue: null,\n  })\n  importedSlackMessageType!: ImportedSlackMessageType | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  importedSlackMessageThreadTS!: string | null;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  replyToEmailNotificationID!: UUID | null;\n\n  // Unto all those who wend near this line of code, hear me!\n  // If you add more things to this list instead of migrating it\n  // into a metadata value, a curse be upon ye!\n  @Column({\n    type: DataTypes.ENUM('action_message', 'user_message'),\n    defaultValue: 'user_message',\n  })\n  type!: CreationOptional<MessageType>;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  iconURL!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  translationKey!: string | null;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: CreationOptional<EntityMetadata>;\n\n  @Column({\n    type: DataTypes.TEXT,\n    defaultValue: '',\n  })\n  extraClassnames!: string;\n\n  @Column({\n    type: DataTypes.TSVECTOR,\n  })\n  contentTsVector!: string | null;\n\n  @Column({\n    type: DataTypes.VIRTUAL,\n  })\n  createdAtWithMicros!: CreationOptional<string>;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  skipLinkPreviews!: CreationOptional<boolean>;\n\n  isDeleted() {\n    return this.deletedTimestamp !== null;\n  }\n}\n\n// This section contains old node types that no longer matter.  To remove a node\n// type, copy all the relevant definitions from messageNodes.ts to here and\n// prefix them with Legacy, then apply the appropriate code inside `cleanseNode`\n// to convert them to supported node types.\n\nenum LegacyMessageNodeType {\n  ANNOTATION = 'annotation',\n  LINK_DEPRECATED = 'a',\n}\n\ntype LegacyMessageNodeBase = {\n  type?: LegacyMessageNodeType;\n  class?: string;\n};\n\ntype LegacyMessageNodeWithChildren = LegacyMessageNodeBase & {\n  children: LegacyMessageContent;\n};\n\ntype LegacyMessageAnnotationNode = LegacyMessageNodeWithChildren & {\n  type: LegacyMessageNodeType.ANNOTATION;\n  annotation: {\n    id: UUID;\n  };\n};\n\nexport type LegacyMessageLinkDeprecatedNode = LegacyMessageNodeBase & {\n  type: LegacyMessageNodeType.LINK_DEPRECATED;\n  text: string;\n  url: string;\n};\n\ntype LegacyMessageNode =\n  | MessageNode\n  | LegacyMessageAnnotationNode\n  | LegacyMessageLinkDeprecatedNode;\n\ntype LegacyMessageContent = LegacyMessageNode[];\n\nfunction cleanseMessageContent(\n  // Even though this column isn't nullable, Sequelize might not have loaded it\n  // because it only loaded a subset of columns, so we might get undefined\n  content: LegacyMessageContent | undefined,\n): MessageContent {\n  if (!content) {\n    return [];\n  }\n  return content.map(cleanseNode).filter(isDefined);\n}\n\nfunction cleanseNode(node: LegacyMessageNode): MessageNode | undefined {\n  if (node.type === LegacyMessageNodeType.ANNOTATION) {\n    return undefined;\n  } else if (node.type === LegacyMessageNodeType.LINK_DEPRECATED) {\n    return {\n      type: MessageNodeType.LINK,\n      url: node.url,\n      children: [{ text: node.text }],\n    };\n  }\n  if ('children' in node) {\n    return {\n      ...node,\n      children: cleanseMessageContent(node.children),\n    };\n  }\n  return node;\n}\n", "// See #8935:\n/// <reference lib=\"es2022\" />\n\nimport type OpenAI from 'openai';\n\nimport jsonStableStringify from 'fast-json-stable-stringify';\nimport type { Placement } from '@floating-ui/react-dom';\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\n\nexport type {\n  DocumentAnnotationResult,\n  Screenshot,\n  DocumentLocation,\n  LocationTextConfig,\n  HighlightedTextConfig,\n  AdditionalTargetData,\n  Annotation,\n  AnnotationWithThreadID,\n  AnnotationCapturePosition,\n} from '@cord-sdk/types';\nexport { locationJson } from '@cord-sdk/types';\nimport { locationJson, MessageNodeType } from '@cord-sdk/types';\nimport type {\n  FlatJsonObject,\n  LocationFilterOptions,\n  ResolvedStatus,\n  MessageAnnotation,\n  ElementIdentifierVersion,\n  EntityMetadata,\n  NotificationListFilter,\n  ThreadListFilter,\n  JsonValue,\n  JsonObject,\n  MessageContent,\n  MessageNode,\n  ViewerThreadStatus,\n} from '@cord-sdk/types';\n\nexport type {\n  MessageAnnotation,\n  ElementIdentifierVersion,\n  EntityMetadata,\n  NotificationListFilter,\n  ThreadListFilter,\n  JsonValue,\n  JsonObject,\n};\n\nexport type SimpleTranslationParameters = FlatJsonObject;\n\nexport enum DataTableQueries {\n  ADMIN_USERS = 'admin_users',\n  SET_ADMIN = 'set_admin',\n  USER_DETAILS = 'user_details',\n  ORG_DETAILS = 'org_details',\n  APP_DETAILS = 'app_details',\n  THREAD_DETAILS = 'thread_details',\n  MESSAGE_DETAILS = 'message_details',\n  CUSTOMER_DETAILS = 'customer_details',\n  ORG_MEMBER_DETAILS = 'org_member_details',\n  ID_SEARCH = 'id_search',\n  PROD_APPLICATIONS = 'prod_applications',\n  STAGING_APPLICATIONS = 'staging_applications',\n  SAMPLE_APPLICATIONS = 'sample_applications',\n  VERIFIED_CUSTOMERS = 'verified_customers',\n  SAMPLE_CUSTOMERS = 'sample_customers',\n  DEPLOYS = 'deploys',\n  PAGE_CONTEXTS = 'page_contexts',\n  BROWSER_METRICS = 'browser_metrics',\n  OS_METRICS = 'os_metrics',\n  GO_REDIRECTS = 'go_redirects',\n}\n\nexport type NonNullableKeys<T, K extends keyof T> = T & {\n  [P in K]: NonNullable<T[P]>;\n};\n\nexport type NullableKeys<T, K extends keyof T> = Omit<T, K> & {\n  [P in K]: T[P] | null;\n};\n\nexport type ElementOf<T extends Array<any>> = T[number];\n\n/**\n * A mapping type that effectively combines Required<T> and NonNullable<T> to\n * turn { foo?: string | undefined } into { foo: string }\n */\n// NOTE(9/9/2021): This is equivalent to Required<T> if we compiled with\n// --strictNullChecks, but we currently don't\nexport type ReallyRequired<T> = {\n  [P in keyof T]-?: NonNullable<T[P]>;\n};\n\nexport type { MessageContent, MessageNode };\nexport { MessageNodeType };\n\nexport type UUID = string;\n\nexport type Location = {\n  [k: string]: string | number | boolean;\n};\n\nexport type SortDirection = 'ascending' | 'descending';\n\nexport function isValidFlatJsonObject(obj: any): obj is FlatJsonObject {\n  if (!obj) {\n    return false;\n  }\n  if (typeof obj !== 'object' || Array.isArray(obj)) {\n    return false;\n  }\n  for (const [_, value] of Object.entries(obj)) {\n    const t = typeof value;\n    if (t !== 'string' && t !== 'number' && t !== 'boolean') {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isLocation(obj: any): obj is Location {\n  return isValidFlatJsonObject(obj);\n}\n\nexport function isValidMetadata(obj: any): obj is EntityMetadata {\n  return isValidFlatJsonObject(obj);\n}\n\nexport function toLocation(obj: any): Location | null {\n  return isLocation(obj) ? obj : null;\n}\n\n// We receive location as either Location or LocationFilterOptions from\n// our apis. Since Location type can be flat object with multiple properties\n// we have to check the property type to make sure we're getting the right value.\n// eg: {value: 'foo', ...} is Location\n// while {value: {value: 'foo'} ...} is LocationFilterOptions\nexport function getLocationFilter(\n  obj: LocationFilterOptions | Location | undefined,\n): LocationFilterOptions | undefined {\n  if (!obj) {\n    return undefined;\n  }\n\n  if (isLocation(obj)) {\n    return { value: obj, partialMatch: false };\n  }\n\n  if (isLocation(obj.value)) {\n    return obj;\n  }\n  return undefined;\n}\n\n// Function to convert our external resolvedStatus filter enum\n// to our internal 'resolved' boolean property\nexport function getResolvedFromStatus(\n  status: ResolvedStatus,\n): boolean | undefined {\n  // we've not included a fallback value as this will just increase the chances\n  // of returning the wrong data somewhere. So we make sure to pass whatever\n  // we've said the default is for the API that's calling this.\n  switch (status) {\n    case 'resolved': {\n      return true;\n    }\n    case 'unresolved': {\n      return false;\n    }\n    case 'any': {\n      return undefined;\n    }\n    default: {\n      const unhandledStatus: never = status;\n      throw new Error('Invalid resolved status type ' + unhandledStatus);\n    }\n  }\n}\n\nexport function getViewerThreadFilter(\n  viewerStatus: ViewerThreadStatus | ViewerThreadStatus[] | undefined,\n): ViewerThreadStatus[] {\n  if (!viewerStatus) {\n    return [];\n  }\n  if (typeof viewerStatus === 'string') {\n    return [viewerStatus];\n  }\n  return viewerStatus;\n}\n\nexport function metadataMatches(\n  metadata: EntityMetadata,\n  matcher: EntityMetadata,\n): boolean {\n  for (const [key, value] of Object.entries(matcher)) {\n    if (metadata[key] !== value) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function locationMatches(context: Location, matcher: Location): boolean {\n  for (const [key, value] of Object.entries(matcher)) {\n    if (context[key] !== value) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction flatJsonObjectEqual(\n  a: FlatJsonObject | null,\n  b: FlatJsonObject | null,\n): boolean {\n  if (a === null && b === null) {\n    return true;\n  }\n  if (a === null || b === null) {\n    return false;\n  }\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const [key, value] of Object.entries(a)) {\n    if (b[key] !== value) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function locationEqual(a: Location | null, b: Location | null): boolean {\n  return flatJsonObjectEqual(a, b);\n}\n\nexport function metadataEqual(\n  a: EntityMetadata | null,\n  b: EntityMetadata | null,\n): boolean {\n  return flatJsonObjectEqual(a, b);\n}\n\n/**\n * Implements the canonical comparison for locations.  Currently, this sorts by\n * number of elements, then the JSON representation alphabetically, but we can\n * change that if we come up with something better.\n */\nexport function locationCompare(a: Location, b: Location): number {\n  const lengthA = Object.keys(a).length;\n  const lengthB = Object.keys(b).length;\n  if (lengthA !== lengthB) {\n    return lengthA - lengthB;\n  }\n  return locationJson(a).localeCompare(locationJson(b));\n}\n\nexport type PageContext = {\n  providerID: UUID | null;\n  data: Location;\n};\n\nexport function pageContextEqual(\n  a: PageContext | null,\n  b: PageContext | null,\n): boolean {\n  if (a === null && b === null) {\n    return true;\n  }\n  if (a === null || b === null) {\n    return false;\n  }\n  // Two contexts from different providers are never equal\n  if (a.providerID !== b.providerID) {\n    return false;\n  }\n  // If either has data, compare the data, otherwise compare the locations\n  return isEqual(a.data, b.data);\n}\n\n// This returns a string key that is equivalent from an equality perspective to\n// comparing the pageContexts.  Specifically, the intention is that\n// pageContextEqual(a, b) === (pageContextKey(a) === pageContextKey(b))\n\n// The functioning of this depends a lot on our specific logic of\n// building PageContexts, such that, for instance,\n// a.location === b.location => a.providerID === b.providerID.\n\n// It also needs to stay consistent with the logic in server/src/util/hash.ts.\nexport function pageContextKey(pageContext: PageContext): string {\n  return jsonStableStringify({\n    providerID: pageContext.providerID,\n    data: pageContext.data,\n  });\n}\n\n/**\n * Convert a PageContext-like object into an actual PageContext.\n *\n * The PageContext types that we exchange with GraphQL allow nullable fields to\n * be undefined as well. This function takes such objects and returns a valid\n * PageContext.\n */\ntype PageContextLike = {\n  providerID?: UUID | null;\n  data: Location;\n};\nexport function toPageContext(pageContext: PageContextLike): PageContext;\nexport function toPageContext(pageContext: null | undefined): null;\nexport function toPageContext(\n  pageContext: PageContextLike | null | undefined,\n): PageContext | null;\nexport function toPageContext(\n  pageContext: PageContextLike | null | undefined,\n): PageContext | null {\n  if (!pageContext) {\n    return null;\n  }\n  const { providerID, data } = pageContext;\n  if (!isLocation(data)) {\n    throw new Error('Invalid context');\n  }\n  return {\n    providerID: providerID ?? null,\n    data,\n  };\n}\n\nexport type OrgMemberState = 'active' | 'inactive' | 'deleted'; // must match the keys in OrgMemberStateEnumType\n\nexport type UserType = 'person' | 'bot'; // must match the keys in UserTypeEnumType\n\nexport type UserState = 'active' | 'deleted'; // must match the keys in UserStateEnumType\n\nexport type ImportedSlackMessageType = 'reply' | 'supportBotReply'; // must match the keys in ImportedSlackMessageTypeEnumType\n\nexport type MessageType = 'action_message' | 'user_message'; //must match the keys in MessageTypeEnumType\n\nexport interface Todo {\n  id: UUID;\n  done: boolean;\n}\n\nexport enum MessageAttachmentType {\n  FILE = 'file',\n  ANNOTATION = 'annotation',\n  SCREENSHOT = 'screenshot',\n}\n\nexport const MessageAnnotationAttachmentTypeName =\n  'MessageAnnotationAttachment';\n\nexport function parseElementIdentifierVersion(\n  val: string,\n): ElementIdentifierVersion | null {\n  if (val === '1' || val === '2') {\n    return val;\n  }\n  return null;\n}\n\nexport enum ElementIdentifierMatch {\n  EXACT = 'exact',\n  PARTIAL = 'partial',\n  NONE = 'none',\n}\n\nexport enum LocationMatch {\n  EXACT = 'exact',\n  SIBLING = 'sibling',\n  MULTIMEDIA = 'multimedia',\n  CHART = 'chart',\n  STALE = 'stale',\n  MAYBE_STALE = 'maybe_stale',\n  NONE = 'none',\n  // User has old extension, and does not have the latest identifier version\n  INCOMPATIBLE_IDENTIFIER_VERSION = 'incompatible_identifier_version',\n  // Used if fallback document coordinates are included, and we don't have an exact/sibling match\n  DOCUMENT_COORDINATES = 'document_coordinates',\n  // If we weren't able to annotate, so we're instead relying on the screenshot\n  // Examples: annotating a pdf, annotating an iframe we can't access\n  UNAVAILABLE = 'unavailable',\n  // If the annotation was on an inaccessible cross-domain iframe. We want to\n  // show it while the message is being drafted, but not after it's been posted\n  INACCESSIBLE_CROSS_DOMAIN_IFRAME = 'inaccessible_cross_domain_iframe',\n  OUTSIDE_ACCESSIBLE_VIRTUALISED_LIST = 'outside_accessible_virtualised_list',\n  OUTSIDE_INACCESSIBLE_VIRTUALISED_LIST = 'outside_inaccessible_virtualised_list',\n}\n\nexport function annotationHasLocation(annotation: MessageAnnotation) {\n  return annotation.location !== null || annotation.customLocation !== null;\n}\n\nexport const ThreadCreatedTypeName = 'ThreadCreated';\nexport const ThreadMessageAddedTypeName = 'ThreadMessageAdded';\nexport const ThreadMessageUpdatedTypeName = 'ThreadMessageUpdated';\nexport const ThreadMessageContentAppendedTypeName =\n  'ThreadMessageContentAppended';\nexport const ThreadMessageRemovedTypeName = 'ThreadMessageRemoved';\nexport const ThreadParticipantsUpdatedIncrementalTypeName =\n  'ThreadParticipantsUpdatedIncremental';\nexport const ThreadTypingUsersUpdatedTypeName = 'ThreadTypingUsersUpdated';\nexport const ThreadShareToSlackTypeName = 'ThreadShareToSlack';\nexport const ThreadPropertiesUpdatedTypeName = 'ThreadPropertiesUpdated';\nexport const ThreadSubscriberUpdatedTypeName = 'ThreadSubscriberUpdated';\nexport const ThreadDeletedTypeName = 'ThreadDeleted';\n\nexport const PageThreadAddedTypeName = 'PageThreadAdded';\nexport const PageThreadDeletedTypename = 'PageThreadDeleted';\nexport const PageThreadReplyAddedTypeName = 'PageThreadReplyAdded';\nexport const PageVisitorsUpdatedTypeName = 'PageVisitorsUpdated';\nexport const PageThreadResolvedTypeName = 'PageThreadResolved';\nexport const PageThreadUnresolvedTypeName = 'PageThreadUnresolved';\nexport const ThreadFilterablePropertiesMatchTypeName =\n  'ThreadFilterablePropertiesMatch';\nexport const ThreadFilterablePropertiesUnmatchTypeName =\n  'ThreadFilterablePropertiesUnmatch';\n\nexport const NotificationAddedTypeName = 'NotificationAdded';\nexport const NotificationReadStateUpdatedTypeName =\n  'NotificationReadStateUpdated';\nexport const NotificationDeletedTypeName = 'NotificationDeleted';\n\nexport const OrgMemberAddedTypeName = 'OrgMemberAdded';\nexport const OrgMemberRemovedTypeName = 'OrgMemberRemoved';\n\nexport const ConsoleGettingStartedUpdatedTypeName =\n  'ConsoleGettingStartedUpdated';\n\nexport const CustomerSubscriptionUpdatedTypeName =\n  'CustomerSubscriptionUpdated';\n\nexport type FileAttachmentInput = {\n  id: UUID;\n  fileID: UUID;\n};\n\n// Subset of winston log levels, which can be found in NpmConfigSetLevels type in winston type file\nexport enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  DEBUG = 'debug',\n}\n\nexport type PopperPosition = Placement;\n\n// called when the sidebar shows and hides, with a reference to the Cord iframe\n// expected to make domain-specific document adjustments to accommodate the sidebar\n// in its two states (expanded / not).\nexport type DocumentMutator = (width: number | null) => void;\n\n// called with the document to initialize any mutator-specific elements and behavior\n// expected to return the actual mutator function\nexport type DocumentMutatorInitializer = (\n  document: Document,\n) => DocumentMutator;\n\nexport type SimpleValue = string | number | boolean;\n\nexport type PreferencesValueType = JsonValue;\n\nexport type PreferencesType = JsonObject;\n\nexport enum UserReference {\n  MENTION = 'mention',\n  ASSIGNEE = 'assignee',\n}\n\nexport type RuleProviderInfo = {\n  id: UUID; // the ID of the provider, should be unique among providers\n  name: string; // the name of the provider\n  iconURL?: string | null; // URL for a favicon-like image\n  nuxText?: string | null; // the text to show the user teaching them how to use Radical on this specific provider\n  disableAnnotations?: boolean; // if annotations should be disabled for this provider. example: slack static PDFs where due to the chrome pdf viewer we don't have access to the scroll position\n};\n\n// a ruleset provider should export all the rules specific to a SaaS, even when\n// those rules span across different domain names.\nexport type RuleProvider = RuleProviderInfo & {\n  domains: string[]; // the domains that this provider's rules cover\n  rules: ProviderRule[]; // deny and approve rules\n  mergeHashWithLocation?: boolean; // a fix for providers like Snowflake who have URLs with query parameters after the # in the URL\n  visibleInDiscoverToolsSection: boolean; // the state of wether the tool is visible in th Discover tools section in the NUX flow, i.e. internal tools should not be included, localhost should not be included\n  platformApplicationID: UUID | null; // Application ID of provider, if relevant\n\n  // the functions to call to mutate the document to make room for the sidebar.\n  // this is a list to allow per-domain granularity.\n  documentMutators: ProviderDocumentMutator[];\n};\n\nexport type ProviderRule = {\n  id: UUID;\n  type: ProviderRuleType;\n  matchPatterns: ProviderRuleMatchPatterns;\n  nameTemplate: string | null;\n  contextTransformation: PageContextTransformation;\n  observeDOMMutations: boolean;\n};\n\nexport type ProviderDocumentMutator =\n  | { id: UUID; type: 'default_css'; config: CSSMutatorConfig }\n  | { id: UUID; type: 'custom_css'; config: CSSMutatorConfig }\n  | { id: UUID; type: 'fixed_elements'; config: null };\n\nexport type ProviderDocumentMutatorType = ProviderDocumentMutator['type'];\n\nexport type CSSMutatorConfig = {\n  cssTemplate: string;\n};\n\nexport type ProviderRuleType = 'allow' | 'deny';\n\nexport type ProviderRuleMatchPatterns = {\n  protocol?: string;\n  domain?: string;\n  path?: string;\n  hash?: string;\n  queryParams?: { [key: string]: string };\n  selector?: string;\n  contains?: string;\n};\n\nexport type ProviderRuleTestMatchType = 'allow' | 'deny' | 'none';\n\nexport type PageDetails = {\n  pageContext: PageContext;\n  pageName: string | null;\n};\n\nexport type MatchResult = (\n  | {\n      match: 'allow' | 'deny';\n      ruleID: UUID;\n    }\n  | {\n      match: 'none';\n    }\n) &\n  PageDetails;\n\nexport type PageContextTransformationType =\n  | 'default'\n  | 'replace'\n  | 'extend'\n  | 'metabase';\n\nexport type PageContextTransformation = {\n  type: PageContextTransformationType;\n  data: JsonObject | null;\n};\n\nexport type ProvidersResult = {\n  ruleProviders: RuleProvider[];\n  version: string;\n};\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: DeepPartial<T[P]>;\n};\n\nexport type LinearTeam = {\n  id: string;\n  name: string;\n  projects: {\n    nodes: Array<{\n      id: string;\n      name: string;\n    }>;\n  };\n};\n\nexport type AtlassianProject = {\n  // expand: 'description,lead,issueTypes,url,projectKeys,permissions,insight',\n  id: string; // 10000\n  key: string; // STLR\n  name: string; // 'Stellar'\n  issueTypes: Array<{\n    id: string; //'10001'\n    // description: 'Tasks track small, distinct pieces of work.';\n    name: string;\n    subtask: boolean;\n    // avatarId: 10318;\n    // hierarchyLevel: 0;\n  }>;\n  simplified: boolean;\n  style: string; // 'next-gen'\n  isPrivate: boolean;\n  entityId: UUID;\n  uuid: UUID;\n};\n\nexport type MondayBoard = {\n  id: string;\n  name: string;\n  subitem_board?: {\n    id: string;\n  };\n  groups: Array<{\n    id: string;\n    title: string;\n    position: string;\n  }>;\n};\n\nexport type JiraConnectionPreferences = {\n  projectID: string;\n  issueType: string;\n  subissueType?: string;\n};\n\nexport type AsanaConnectionPreferences = {\n  projectID: string | undefined;\n};\n\nexport type MondayConnectionPreferences = {\n  boardID: string;\n  groupID?: string;\n};\n\ntype TrelloList = {\n  id: UUID;\n  name: string;\n  closed?: string;\n  pos?: number;\n  softLimit?: string;\n  idBoard?: UUID;\n  subscriber: boolean;\n};\n\ntype TrelloBoard = {\n  id: UUID;\n  name: string;\n  idOrganization: UUID;\n  lists: TrelloList[];\n};\n\ntype TrelloOrg = {\n  id: UUID;\n  name: string;\n};\n\nexport type TrelloConnectionPreferencesType = {\n  id: UUID;\n  email: string;\n  boards: TrelloBoard[];\n  organizations: TrelloOrg[];\n};\n\nexport type TrelloCard = {\n  name: string;\n  desc: string;\n  idList: UUID;\n};\n\nexport type AsanaProject = {\n  gid: string;\n  name: string;\n};\n\nexport type JiraIssuePreviewData = {\n  key: string;\n  title: string;\n  url: string;\n  assignee: string | undefined;\n  status: string;\n  done: boolean;\n  priority: string;\n  subtasks: Array<{\n    id: string;\n    title: string;\n    done: boolean;\n  }>;\n};\n\nexport type AsanaTaskPreviewData = {\n  title: string;\n  url: string;\n  assignee: string | undefined;\n  done: boolean;\n};\n\nexport type LinearIssuePreviewData = {\n  title: string;\n  identifier: string;\n  url: string;\n  assignee: string | undefined;\n  status: string;\n  priority: string;\n  done: boolean;\n  orgName: string | undefined;\n};\n\nexport type MondayItemPreviewData = {\n  title: string;\n  url: string;\n  assignee: string | undefined;\n  done: boolean;\n  assigneeColumnID: string | undefined;\n  statusColumnID: string | undefined;\n};\n\nexport type TaskPreviewData =\n  | AsanaTaskPreviewData\n  | JiraIssuePreviewData\n  | LinearIssuePreviewData\n  | MondayItemPreviewData;\n\nexport enum LinearIssueStateTypes {\n  BACKLOG = 'backlog',\n  TODO = 'unstarted',\n  IN_PROGRESS = 'started',\n  DONE = 'completed',\n  CANCELED = 'canceled',\n}\n\nexport type LinearConnectionPreferences = {\n  teamID: string;\n  projectID?: string;\n};\n\nexport type APICordTokenData = {\n  session_id: UUID;\n};\n\nexport type AppServerAuthTokenData = {\n  app_id: UUID;\n};\n\nexport type CustomerServerAuthTokenData = {\n  customer_id: UUID;\n};\n\nexport type NotificationChannels = {\n  slack: boolean;\n  email: boolean;\n};\n\nexport type CustomLinks = {\n  learnMore?: string | null;\n  upgradePlan?: string | null;\n  leaveFeedback?: string | null;\n};\n\nexport type ThirdPartyAuth = 'slack' | 'google' | 'ms-teams';\n\nexport type OutboundNotificationType =\n  | 'slack'\n  | 'email'\n  | 'slackEmailMatched'\n  | 'sharedToSlackChannel'\n  | 'sharedToEmail';\n\nexport type { Point2D } from '@cord-sdk/types';\n\nexport type CustomNUXStepContent = {\n  title: string | null;\n  text: string | null;\n  imageURL: string | null;\n};\n\nexport type CustomNUX = {\n  initialOpen: CustomNUXStepContent | null;\n  welcome: CustomNUXStepContent | null;\n};\n\nexport type SlackOAuthLinkOrgState = {\n  data: {\n    userID: string;\n    orgID: string;\n    platformApplicationID: string;\n  };\n  type: 'link_org';\n  nonce: string;\n};\n\nexport type SlackOAuthConsoleUserState = {\n  data: {\n    platformApplicationID: string;\n  };\n  type: 'console_user';\n  nonce: string;\n};\n\nexport type SlackOAuthDecodeState =\n  | SlackOAuthLinkOrgState\n  | SlackOAuthConsoleUserState;\n\nexport type ThreadSupportStatusType = 'open' | 'closed';\n\nexport type UserWithOrgDetails = {\n  id: UUID;\n  externalID: string;\n  displayName: string;\n  fullName: string;\n  name: string | null;\n  shortName: string | null;\n  profilePictureURL: string | null;\n  metadata: EntityMetadata;\n  canBeNotifiedOnSlack: boolean;\n};\n\nexport type OutboundNotificationMetadata =\n  OutboundNotificationMetadataByType[OutboundNotificationType];\n\n// when adding new fields to existing metadata types, either make the new\n// fields optional or run a backfill migration\nexport type OutboundNotificationMetadataByType = {\n  slack: Record<string, never>;\n  email: Record<string, never>;\n  slackEmailMatched: Record<string, never>;\n  sharedToSlackChannel: {\n    type: 'sharedToSlackChannel';\n    targetSlackChannelID: string;\n  };\n  sharedToEmail: {\n    type: 'sharedToEmail';\n    targetEmail: string;\n  };\n};\n\n// Internal threads are the standard mirrored Slack threads\n// that users can share to their linked Slack org.\n// Support threads are the ones mirrored to a vendor's Slack org\n// and support channel after a support bot is mentioned.\nexport type ThreadMirrorType = 'internal' | 'support';\n\nexport type Tier = 'prod' | 'staging' | 'test' | 'dev';\n\nexport type SharedToSlackInfo = {\n  channel: string | null;\n  slackURL: string | null;\n};\n\nexport type ThreadMode =\n  // Only shows the first message, and optionally the number of replies\n  | 'collapsed'\n  // Can show all messages, also includes a composer to add a new message\n  | 'inline'\n  // Used in the sidebar only - thread spans across the whole page\n  | 'fullHeight'\n  // The initial state when we are creating a new thread - composer only\n  | 'newThread';\n\nexport type Announcement =\n  | 'welcome'\n  | 'completeProfile'\n  | 'connectOrgToSlack'\n  | 'linkProfileToSlack'\n  | 'slackIsConnected';\n\nexport type ReferencedUserData = { id: UUID; name: string };\n\nconst DEPLOYMENT_TYPES = ['sdk'] as const;\n\nexport type DeploymentType = (typeof DEPLOYMENT_TYPES)[number];\n\nexport function isDeploymentType(s: string): s is DeploymentType {\n  if (DEPLOYMENT_TYPES.includes(s as DeploymentType)) {\n    return true;\n  }\n  return false;\n}\n\nexport function toDeploymentType(\n  s: string | null | undefined,\n): DeploymentType | null {\n  if (s && isDeploymentType(s)) {\n    return s;\n  }\n  return null;\n}\n\nexport type ApplicationEnvironment =\n  | 'production'\n  | 'staging'\n  | 'sample' // console self-serve test (not paying) app\n  | 'sampletoken' // sample token apps created for docs integration guide and demo apps opensource repos (wiped periodically)\n  | 'demo'; // temporary token apps created for docs and cord.com demo apps (wiped periodically)\n\n// NB you there are some classes of token you might expect are environments,\n// but actually all belong to one appID:\n// The docs live components are all in the CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID app\n// The e2e tests are all in the CORD_AUTOMATED_TESTS_APPLICATION_ID app\n// The CORD_PLAYGROUND_APPLICATION_ID has been retired from service\n\nexport type EmptyJsonObject = Record<string, never>;\n\nexport type CustomerType = 'verified' | 'sample';\n\nexport type CustomerImplementationStage =\n  | 'launched'\n  | 'implementing'\n  | 'proof_of_concept'\n  | 'inactive';\n\nexport type AdminCRTComingFrom = 'them' | 'us';\n\nexport type AdminCRTDecision = 'done' | 'accepted' | 'rejected' | 'pending';\n\nexport type AdminCRTCommunicationStatus =\n  | 'none'\n  | 'request_acked'\n  | 'decision_sent'\n  | 'decision_acked';\n\nexport type AdminCRTIssueType = 'request' | 'bug' | 'onboarding_step';\n\nexport type AdminCRTPriority = 'blocker' | 'high' | 'low';\n\nexport type AdminCRTCustomerIssue = {\n  customerID: UUID;\n  title: string;\n  body: string;\n  comingFrom: AdminCRTComingFrom;\n  decision: AdminCRTDecision;\n  communicationStatus: AdminCRTCommunicationStatus;\n  lastTouch?: string;\n  type: AdminCRTIssueType;\n  priority: AdminCRTPriority;\n  externallyVisible: boolean;\n  assignee?: UUID;\n};\n\nexport type DocsCachedEmbedding = {\n  url: string;\n  plaintext: string;\n  embedding?: OpenAI.CreateEmbeddingResponse | undefined;\n};\n\nexport type CordDotComCachedEmbedding = DocsCachedEmbedding & {\n  title: string;\n};\n\n// This is for the mouse move events within iframes\nexport type IframeMouseMoveData = { x: number; y: number; frame_id: string };\n\nexport type Maybe<T> = T | null | undefined;\nexport type Nullable<T> = T | null;\n", "import md5 from 'blueimp-md5';\nimport jsonStableStringify from 'fast-json-stable-stringify';\nimport { unique } from 'radash';\nimport shajs from 'sha.js';\nimport dayjs from 'dayjs';\nimport Calendar from 'dayjs/plugin/calendar.js';\nimport isBetween from 'dayjs/plugin/isBetween.js';\n\nimport type {\n  UUID,\n  MessageContent,\n  ReferencedUserData,\n} from 'common/types/index.ts';\nimport { MessageNodeType } from 'common/types/index.ts';\nimport {\n  CORD_PLATFORM_ORG_ID,\n  CORD_ADMIN_PLATFORM_ORG_ID,\n  GILLIAN_TEST_SLACK_ORG_ID,\n  RADICAL_ORG_ID,\n  RADICAL_TEST_ORG_ID,\n  KAT_TEST_SLACK_ORG_ID,\n  CORD_SLACK_TEAM_ID,\n  CORD_TEST_SLACK_TEAM_ID,\n} from 'common/const/Ids.ts';\nimport {\n  getMessageNodeChildren,\n  textFromNodeRecursive,\n} from '@cord-sdk/react/common/lib/messageNode.ts';\nimport { trimStart } from '@cord-sdk/react/common/lib/trim.ts';\n\nconst uuidRegex =\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n\nexport const isEmployee = (orgID: UUID | undefined) =>\n  orgID === RADICAL_ORG_ID ||\n  orgID === RADICAL_TEST_ORG_ID ||\n  orgID === CORD_PLATFORM_ORG_ID ||\n  orgID === GILLIAN_TEST_SLACK_ORG_ID ||\n  orgID === KAT_TEST_SLACK_ORG_ID ||\n  orgID === CORD_ADMIN_PLATFORM_ORG_ID ||\n  process.env.NODE_ENV === 'development';\n\nexport const isInternalSlackOrg = (slackTeamID: string | undefined) =>\n  slackTeamID === CORD_SLACK_TEAM_ID || slackTeamID === CORD_TEST_SLACK_TEAM_ID;\n\nexport const assertUUID = (value: string): UUID => {\n  if (!uuidRegex.test(value)) {\n    throw new Error(`Invalid UUID ${value}`);\n  } else {\n    return value;\n  }\n};\n\n/**\n * @deprecated MD5 is no longer secure, use sha256Hash instead.\n */\nexport function md5Hash(object: boolean | number | string | object) {\n  return md5(jsonStableStringify(object));\n}\n\nexport function sha256Hash(value: string) {\n  return shajs('sha256').update(value).digest('hex');\n}\nexport const SHA256_HASH_LENGTH = 64;\n\nexport function generateSalt() {\n  const buf = new Uint8Array(8);\n  crypto.getRandomValues(buf);\n  return Array.from(buf)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport function sha256HashAndSalt(\n  value: string,\n  salt: string = generateSalt(),\n) {\n  return 'sha256' + ':' + salt + ':' + sha256Hash(salt + ':' + value);\n}\n\nexport function prepareTextContent(textContent: string) {\n  return (\n    textContent\n      .trim()\n      .toLowerCase()\n      // Remove Zero Width No-Break Space (U+FEFF)\n      .replace(/[\\uFEFF\\n]/gm, '')\n  );\n}\n\nexport function doesTextQualify(text: string | undefined | null) {\n  return Boolean(text && text.length > 1 && text.trim());\n}\n\nexport function getSha256Salt(hash: string): string {\n  return hash?.split(':')[1] ?? '';\n}\n\nexport function matchesHash(value: string, hashWithSalt: string) {\n  return hashWithSalt === sha256HashAndSalt(value, getSha256Salt(hashWithSalt));\n}\n\nexport function isNotNull<T>(value: T | null): value is T {\n  return value !== null;\n}\n\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value !== null && value !== undefined;\n}\n\nexport function getMentionedUserIDs(content: MessageContent): UUID[] {\n  let users: UUID[] = [];\n  for (const node of content) {\n    if (node.type === MessageNodeType.MENTION) {\n      users.push(node.user.id);\n    } else {\n      const children = getMessageNodeChildren(node);\n      if (children) {\n        users = [...users, ...getMentionedUserIDs(children)];\n      }\n    }\n  }\n\n  return unique(users);\n}\n\nexport function getReferencedUserIDs(content: MessageContent): UUID[] {\n  const accumulator = new Set<UUID>();\n  gatherReferencedUserIDs(content, accumulator);\n  return [...accumulator];\n}\n\nfunction gatherReferencedUserIDs(\n  nodes: MessageContent,\n  accumulator: Set<UUID>,\n) {\n  for (const node of nodes) {\n    if (\n      node.type === MessageNodeType.MENTION ||\n      node.type === MessageNodeType.ASSIGNEE\n    ) {\n      accumulator.add(node.user.id);\n      continue;\n    }\n    const children = getMessageNodeChildren(node);\n    if (children) {\n      gatherReferencedUserIDs(children, accumulator);\n    }\n  }\n}\n\nexport function getReferencedUserIDsAndNames(\n  content: MessageContent,\n): ReferencedUserData[] {\n  const accumulator = new Map<UUID, string>();\n  gatherReferencedUserIDsAndName(content, accumulator);\n  return [...accumulator].map(([id, name]) => ({ id, name }));\n}\n\nfunction gatherReferencedUserIDsAndName(\n  nodes: MessageContent,\n  accumulator: Map<UUID, string>,\n) {\n  for (const node of nodes) {\n    if (\n      node.type === MessageNodeType.MENTION ||\n      node.type === MessageNodeType.ASSIGNEE\n    ) {\n      const userID = node.user.id;\n      const name = trimStart(textFromNodeRecursive(node), '@');\n      accumulator.set(userID, name);\n      continue;\n    }\n    const children = getMessageNodeChildren(node);\n    if (children) {\n      gatherReferencedUserIDsAndName(children, accumulator);\n    }\n  }\n}\n\n// JS replaceAll not well supported yet: https://caniuse.com/?search=replaceAll\nexport function replaceAll(str: string, replace: string, replaceWith: string) {\n  return str.split(replace).join(replaceWith);\n}\n\nexport type UserWithNames = {\n  displayName: string;\n  fullName: string;\n};\n\nexport type DisplayableUser = UserWithNames & {\n  id: UUID;\n  profilePictureURL: string | null;\n};\n\nexport function assert(predicate: boolean, message: string): asserts predicate {\n  if (!predicate) {\n    throw new Error(message);\n  }\n}\n\n/**\n * Returns the supplied items using the specified combiner.\n *\n * @example\n * // Returns \"foo, bar, or baz\"\n * combine(\"or\", [\"foo\", \"bar\", \"baz\"])\n */\nexport function combine(combiner: string, items: string[]): string {\n  if (items.length === 0) {\n    return '';\n  } else if (items.length === 1) {\n    return items[0];\n  } else if (items.length === 2) {\n    return `${items[0]} ${combiner} ${items[1]}`;\n  } else {\n    return `${items.slice(0, -1).join(', ')}, ${combiner} ${\n      items[items.length - 1]\n    }`;\n  }\n}\n\nexport const CORD_DEEP_LINK_THREAD_QUERY_PARAM = 'cord_thread';\nexport const CORD_DEEP_LINK_MESSAGE_QUERY_PARAM = 'cord_message';\nexport const CORD_DEEP_LINK_QUERY_PARAM = 'cord_link';\n\nexport const CORD_ARGS_TO_REMOVE = [\n  // delete deeplinking query params from urls. We dont want them as part of\n  // the pageContext\n\n  // old deeplinking query params. Keep here to support old deeplinks.\n  CORD_DEEP_LINK_THREAD_QUERY_PARAM,\n  CORD_DEEP_LINK_MESSAGE_QUERY_PARAM,\n\n  // new (unified) deeplinking query param\n  CORD_DEEP_LINK_QUERY_PARAM,\n];\n\nexport function extractDeepLinkQueryParams(\n  url: string,\n): { threadID: UUID; messageID: UUID } | null {\n  try {\n    const parsed = new URL(url);\n    return extractDeepLinkQueryParamsV1(parsed);\n  } catch (e) {\n    return null;\n  }\n}\n\n// also see injectDeeplinkQueryParamsV1()\nfunction extractDeepLinkQueryParamsV1(\n  url: URL,\n): { threadID: UUID; messageID: UUID } | null {\n  const [version, threadID, messageID]: (string | undefined)[] = (\n    url.searchParams.get(CORD_DEEP_LINK_QUERY_PARAM) ?? ''\n  ).split('_');\n\n  if (version !== 'v1' || !threadID || !messageID) {\n    return null;\n  }\n\n  return {\n    threadID,\n    messageID,\n  };\n}\n\ndayjs.extend(Calendar);\ndayjs.extend(isBetween);\n\nfunction getNowTimestamp() {\n  return dayjs(new Date(Date.now()));\n}\n\nexport function isTimestampTodayOrInTheFuture(timestamp: string) {\n  const now = getNowTimestamp();\n  return (\n    dayjs(timestamp).isSame(dayjs(now), 'day') ||\n    dayjs(timestamp).isAfter(dayjs(now), 'day')\n  );\n}\n\nexport function isTimestampFromPastSevenDays(timestamp: string) {\n  const now = getNowTimestamp();\n  const sevenDaysBefore = now.subtract(7, 'day');\n\n  return (\n    dayjs(timestamp).isBetween(now, sevenDaysBefore, 'day') ||\n    dayjs(timestamp).isSame(sevenDaysBefore, 'date')\n  );\n}\n\nexport function isTimestampFromPastThirtyDays(timestamp: string) {\n  const now = getNowTimestamp();\n  const thirtyDaysBefore = now.subtract(30, 'day');\n\n  return (\n    dayjs(timestamp).isBetween(now, thirtyDaysBefore) ||\n    dayjs(timestamp).isSame(thirtyDaysBefore, 'date')\n  );\n}\n\nexport function isTimestampFromPastThreeMonths(timestamp: string) {\n  const now = getNowTimestamp();\n  const threeMonthsBefore = now.subtract(3, 'month');\n  return (\n    dayjs(timestamp).isBetween(now, threeMonthsBefore) ||\n    dayjs(timestamp).isSame(threeMonthsBefore, 'day')\n  );\n}\n\nexport function isTimestampFromPastYear(timestamp: string) {\n  const now = getNowTimestamp();\n  const pastYear = now.subtract(1, 'year');\n  return (\n    dayjs(timestamp).isBetween(now, pastYear) ||\n    dayjs(timestamp).isSame(pastYear, 'day')\n  );\n}\n\nexport function isTimestampMoreThanAYearAgo(timestamp: string) {\n  const now = getNowTimestamp();\n  const pastYear = now.subtract(1, 'year');\n  return dayjs(timestamp).isBefore(pastYear, 'day');\n}\n\nexport function createDefaultSenderEmailName(applicationName: string) {\n  return applicationName.toLowerCase().split(/\\W/).join('') + '-notifications';\n}\n\n/**\n * in both the console UI and the API we don't allow editing the whole sender\n * field on customEmailTemplate, but only specific parts of it. This function\n * takes a 'sender' input and returns parts of the email.\n *\n * @example\n * const input = 'Cord <hello@cord.com>';\n * getEmailInfoFromSenderData(input); // {emailAddress: \"hello@cord.com\", domain: \"cord.com\", username: \"hello\" }\n */\ntype SenderInfo = {\n  domain: string;\n  emailAddress: string;\n  username: string;\n};\nexport function getEmailInfoFromSenderData(\n  sender?: string,\n): SenderInfo | undefined {\n  if (!sender) {\n    return undefined;\n  }\n\n  const mentionMatchingPattern = new RegExp(\n    '(<)' + // first match a \"<\"\n      '([^@]+)' + // then match anything that's not an @ symbol and is at least 1 char\n      '(@)' + // then match the @ so we can just access the domain itself easily\n      '([^>]+)', // then match anything that's not an > symbol and is at least 1 char\n    'gm',\n  );\n\n  let info: SenderInfo | undefined = undefined;\n  let match: RegExpExecArray | null;\n\n  while ((match = mentionMatchingPattern.exec(sender))) {\n    info = {\n      username: match[2],\n      domain: match[4],\n      emailAddress: match[0].substring(1),\n    };\n  }\n\n  return info;\n}\n\nexport function capitalizeFirstLetter(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n", "// This is for important URLs to all kinds of services\n\nexport const TOP_SERVER_HOST = process.env.TOP_SERVER_HOST!;\nexport const APP_SERVER_HOST = process.env.APP_SERVER_HOST!;\nexport const API_SERVER_HOST = process.env.API_SERVER_HOST!;\nexport const API_SERVER_HOST_PRODUCTION =\n  process.env.API_SERVER_HOST_PRODUCTION!;\nexport const ADMIN_SERVER_HOST = process.env.ADMIN_SERVER_HOST!;\nexport const CONSOLE_SERVER_HOST = process.env.CONSOLE_SERVER_HOST!;\nexport const MARKETING_SERVER_HOST = process.env.MARKETING_SERVER_HOST!;\nexport const CORD_TO_HOST = process.env.CORD_TO_HOST!;\nexport const AUTH0_CUSTOM_LOGIN_DOMAIN = process.env.AUTH0_CUSTOM_LOGIN_DOMAIN!;\nexport const DOCS_SERVER_HOST = process.env.DOCS_SERVER_HOST!;\nexport const SLACK_APP_REDIRECT_HOST = process.env.SLACK_APP_REDIRECT_HOST;\n\nexport const TOP_ORIGIN = 'https://' + process.env.TOP_SERVER_HOST;\nexport const APP_ORIGIN = 'https://' + process.env.APP_SERVER_HOST;\nexport const API_ORIGIN = 'https://' + process.env.API_SERVER_HOST;\nexport const ADMIN_ORIGIN = 'https://' + process.env.ADMIN_SERVER_HOST;\nexport const CONSOLE_ORIGIN = 'https://' + process.env.CONSOLE_SERVER_HOST;\nexport const MARKETING_ORIGIN = 'https://' + process.env.MARKETING_SERVER_HOST;\nexport const CORD_TO_ORIGIN = 'https://' + process.env.CORD_TO_HOST;\nexport const AUTH0_ORIGIN = 'https://' + process.env.AUTH0_CUSTOM_LOGIN_DOMAIN;\nexport const DOCS_ORIGIN = 'https://' + process.env.DOCS_SERVER_HOST;\nexport const DOCS_AI_CHATBOT_SERVER_HOST =\n  process.env.DOCS_AI_CHATBOT_SERVER_HOST;\nexport const COMMUNITY_ORIGIN = 'https://' + process.env.COMMUNITY_SERVER_HOST;\n\n// See https://github.com/getcord/interactive-demos\nexport const DEMO_APPS_WEBHOOK_URL =\n  'https://cord-interactive-demos.vercel.app/events';\n", "import { DOCS_ORIGIN } from 'common/const/Urls.ts';\n\nexport const SUPPORT_USER_UUID = 'c9a61e1d-7c8a-4c7e-838a-9d431cf4ed77';\nexport const RADICAL_ORG_ID = '6bba8678-b14e-4af7-b2f2-05ee807dfa82';\nexport const RADICAL_TEST_ORG_ID = '3689f86d-0c70-40de-a2f0-a4a9ea4994e3';\nexport const CORD_PLATFORM_ORG_ID = '746c0b57-7363-4766-9ee9-7ae8ec7531a8';\nexport const CORD_ADMIN_PLATFORM_ORG_ID =\n  '84ae9086-8414-4ed3-ab73-096e6438f095';\nexport const CORD_SDK_TEST_ORG_ID = 'edda098d-6db7-4202-a5ac-ff3293b78c47';\nexport const GILLIAN_TEST_SLACK_ORG_ID = 'f7ab9ab8-f5b2-41a4-a419-1b8076626d3f';\nexport const KAT_TEST_SLACK_ORG_ID = '4506fadd-f8dc-4795-9b5d-d28feda39d84';\nexport const CORD_SLACK_TEAM_ID = 'T012Y0TBQLW'; // radicalhqworkspace\nexport const CORD_TEST_SLACK_TEAM_ID = 'T015UJY6YQK'; // radicaltestorg\n\nexport const SLACK_APP_CLIENT_ID = '1100027398710.1180115520790';\nexport const SLACK_APP_ID = 'A015A3DFAP8';\nexport const SLACK_DEV_APP_CLIENT_ID = '1198644236835.1943446227956';\nexport const SLACK_ADMIN_LOGIN_APP_CLIENT_ID = '1100027398710.2437628320357';\nexport const SLACK_ADMIN_LOGIN_APP_ID = 'A02CVJG9EAH';\nexport const SLACK_DEV_APP_ID = 'A01TRD46PU4';\nexport const SLACK_INTERNAL_TOOLS_APP_ID = 'A04JKM945CM';\nexport const CORD_UPDATES_TEST_CHANNEL_ID = 'C0547K3V868';\n\n// As opposed to e.g. a customer's Slack app\nexport const CORD_SLACK_APP_IDS = [\n  SLACK_APP_ID,\n  SLACK_DEV_APP_ID,\n  SLACK_ADMIN_LOGIN_APP_ID,\n  SLACK_INTERNAL_TOOLS_APP_ID,\n];\n\nexport const CORD_APPLICATION_ID = '5a076ee9-8b9e-4156-9ac4-871bdc4569ec';\nexport const CORD_SDK_TEST_APPLICATION_ID =\n  'b6501bf5-46f7-4db7-9996-c42dd9f758b0';\nexport const CORD_SAMPLE_TOKEN_CUSTOMER_ID =\n  '1c367aca-37c9-4733-8bef-e9f11a7d0f17';\nexport const CORD_DEMO_APPS_TOKEN_CUSTOMER_ID =\n  '4383cf39-8b6a-4c33-9d8a-71567ed47a60';\nexport const CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID =\n  'aeb2797f-f0a3-485c-a317-4986e2c8343b';\nexport const CORD_AUTOMATED_TESTS_APPLICATION_ID =\n  'dfa86152-9e7e-4d2d-acd6-bfddef71f58e';\nexport const CLACK_APPLICATION_ID = '5fa22ba9-5446-4af8-bc93-7ce54a9aa0ba';\nexport const CORD_HOMEPAGE_APPLICATION_ID =\n  '29e6499a-bbed-4eb2-b057-b36d60ad76c9';\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID!;\n\nexport const CORD_CUSTOMER_ID = '12ed6251-28d5-4686-9a75-20a15bd31499';\n\nexport const CSS_CUSTOMIZATION_ON_DOCS_PREFIX = 'css-customization-';\nexport const BETA_V2_DOCS_PREFIX = 'beta2-';\nexport const LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX = 'live-css-docs-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX =\n  'live-component-docs-thread-';\nexport const LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX =\n  'live_component-docs-inbox-thread-';\nexport const LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX =\n  'live_component-docs-inbox-launcher-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX =\n  'live-component-docs-composer-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX =\n  'live-component-docs-message-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX =\n  'live-component-docs-message-content-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_PIN_THREAD_ID_PREFIX =\n  'live-component-docs-pin-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX =\n  'live-component-docs-reactions-thread-';\nexport const LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX =\n  'live-component-docs-external-notification-';\nexport const LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX =\n  'live-customization-docs-replacements-thread-';\nexport const DOCS_TOKEN_KEY = 'docs-token';\n\nexport const LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID = 'noavatar';\n\nexport const DOCS_LIVE_PAGE_LOCATIONS = {\n  cssCustomization: 'css-customization',\n  liveCss: 'live-css-docs',\n  liveThread: 'live-thread',\n  liveThreadList: 'live-thread-list',\n  livePin: 'live-pin',\n  livePinChartExample: 'live-pin-chart-example',\n  liveFloatingThreads: 'live-floating-threads',\n  liveSelectionComments: 'live-selection-comments',\n  liveSidebar: 'live-sidebar',\n  liveInbox: 'live-inbox',\n  liveInboxLauncher: 'live-inbox-launcher',\n  liveSidebarLauncher: 'live-sidebar-launcher',\n  livePagePresence: 'live-page-presence',\n  livePresenceFacepile: 'live-presence-facepile',\n  liveComposer: 'live-composer',\n  liveMessage: 'live-message',\n  liveMessageContent: 'live-message-content',\n  liveNotificationList: 'live-notification-list',\n  liveThreadedComments: 'live-threaded-comments',\n  liveReactions: 'live-reactions',\n  liveReplacementsTutorial: 'live-replacements-tutorial',\n  liveBetaV2Thread: 'live-beta-v2-thread',\n  liveBetaV2Threads: 'live-beta-v2-threads',\n};\n\nexport const CORD_DOCS_CLIENT_TOKEN = '__cord_docs_token__';\n\nexport const DOCS_URLS = {\n  tutorials: {\n    getProductionReady: {\n      addYourBranding: `${DOCS_ORIGIN}/get-started/live-css-editor`,\n    },\n    integrationGuide: `${DOCS_ORIGIN}/get-started/integration-guide`,\n    demoApps: `${DOCS_ORIGIN}/get-started/demo-apps`,\n  },\n  components: {\n    thread: `${DOCS_ORIGIN}/components/cord-thread`,\n    threadList: `${DOCS_ORIGIN}/components/cord-thread-list`,\n    threadedComments: `${DOCS_ORIGIN}/components/cord-threaded-comments`,\n    sidebar: `${DOCS_ORIGIN}/components/cord-sidebar`,\n    inbox: `${DOCS_ORIGIN}/components/cord-inbox`,\n    inboxLauncher: `${DOCS_ORIGIN}/components/cord-inbox-launcher`,\n    sidebarLauncher: `${DOCS_ORIGIN}/components/cord-sidebar-launcher`,\n    composer: `${DOCS_ORIGIN}/components/cord-composer`,\n    message: `${DOCS_ORIGIN}/components/cord-message`,\n    messageContent: `${DOCS_ORIGIN}/components/cord-message-content`,\n    reactions: `${DOCS_ORIGIN}/components/cord-reactions`,\n  },\n  howTo: {\n    customThreadedComments: `${DOCS_ORIGIN}/customization/custom-threaded-comments`,\n    cssCustomization: `${DOCS_ORIGIN}/customization/css`,\n    replacements: `${DOCS_ORIGIN}/customization/custom-react-components/tutorial`,\n  },\n  getStarted: {\n    authenticateYourUser: `${DOCS_ORIGIN}/get-started/integration-guide/generate-an-auth-token`,\n  },\n  betaV2Components: {\n    threads: `${DOCS_ORIGIN}/components/cord-threads?version=2.0`,\n    thread: `${DOCS_ORIGIN}/components/cord-thread?version=2.0`,\n  },\n};\n\nexport const CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID = 'C05FAVBSSN7';\nexport const CORD_SELF_SERVE_SLACK_CHANNEL_ID = 'C05GR4WSV5Z';\n\n// Tokens created for the sample token and demo apps environment types both\n// create groups with this id.  Both of them need to use the same groupID because\n// it is hardcoded into the demo apps client code, and while the demo apps mostly\n// use the demo apps environment apps, they sometimes use sample app tokens.\nexport const DEMO_APPS_APP_GROUP_ID = 'my-first-group';\n", "import type { Node } from 'slate';\nimport { Element } from 'slate';\nimport { v4 as uuid } from 'uuid';\nimport { MessageNodeType } from '@cord-sdk/types';\nimport type {\n  MessageAssigneeNode,\n  MessageContent,\n  MessageMentionNode,\n  MessageNode,\n  MessageNodeWithChildren,\n  MessageStyledBlockType,\n  MessageTextNode,\n  MessageTodoNode,\n  UUID,\n} from '@cord-sdk/types';\nimport { trimStart, trimEnd } from './trim.js';\n\nexport const MAX_BULLET_INDENT = 4;\n\n// '& Node' in return value stops Slate complaining when passing node to its methods\n// Casting to any is because TS doesn't seem to like combining the two to make the node\nexport function createMessageNode<\n  NodeType extends MessageNodeType,\n  NodeAttributes extends MessageNode<NodeType> = MessageNode<NodeType>,\n>(\n  nodeType: NodeType,\n  nodeAttributes: Omit<NodeAttributes, 'type'>,\n): MessageNode<NodeType> & Node {\n  return {\n    type: nodeType,\n    ...nodeAttributes,\n  } as any;\n}\n\nexport function createMessageTextNode(text: string): MessageTextNode {\n  return {\n    text,\n  };\n}\n\nexport function createFormattedMessageTextNode(input: {\n  text: string;\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  code?: boolean;\n}): MessageTextNode {\n  return input;\n}\n\nexport function isMessageNodeType<NodeType extends MessageNodeType>(\n  node: Node | undefined,\n  nodeType: NodeType,\n): node is MessageNode<NodeType> {\n  return Boolean(node && Element.isElement(node) && node.type === nodeType);\n}\n\nexport function isMessageNodeText(node: MessageNode): node is MessageTextNode {\n  return !node.type && 'text' in node;\n}\n\nexport function createParagraphNode(text = '') {\n  return createMessageNode(MessageNodeType.PARAGRAPH, {\n    children: [{ text }],\n  });\n}\n\nexport function createMentionNode(userID: UUID, name: string) {\n  return createMessageNode(MessageNodeType.MENTION, {\n    user: { id: userID },\n    children: [{ text: `@${name}` }],\n  });\n}\n\nexport function createAssigneeNode(userID: UUID, name: string) {\n  return createMessageNode(MessageNodeType.ASSIGNEE, {\n    user: { id: userID },\n    children: [{ text: `+${name}` }],\n  });\n}\n\nexport function createLinkNode(url: string, text: string) {\n  return createMessageNode(MessageNodeType.LINK, {\n    url,\n    children: [{ text }],\n  });\n}\n\nexport function messageContentFromString(text: string): MessageContent {\n  return [createParagraphNode(text)];\n}\n\nfunction getInitialStyledBlockProps(\n  blockType: MessageStyledBlockType,\n  indent?: number,\n) {\n  if (blockType === MessageNodeType.TODO) {\n    return {\n      done: false,\n      todoID: uuid(),\n    };\n  } else if (\n    blockType === MessageNodeType.BULLET ||\n    blockType === MessageNodeType.NUMBER_BULLET\n  ) {\n    return {\n      indent,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport function createStyledBlockNode(\n  blockType: MessageStyledBlockType,\n  text: string,\n  indent?: number,\n) {\n  return createMessageNode(blockType, {\n    children: messageContentFromString(text),\n    ...getInitialStyledBlockProps(blockType, indent),\n  });\n}\n\nconst findTodoNodesInSubtree = (\n  parent: MessageNode,\n  accumulator: MessageTodoNode[],\n): void => {\n  if (parent.type === MessageNodeType.TODO) {\n    accumulator.push(parent);\n  } else {\n    const children = getMessageNodeChildren(parent);\n    if (children) {\n      for (const node of children) {\n        findTodoNodesInSubtree(node, accumulator);\n      }\n    }\n  }\n};\n\nexport const todoNodesFromMessage = (messageContent: MessageContent) => {\n  const accumulator: MessageTodoNode[] = [];\n\n  for (const node of messageContent) {\n    findTodoNodesInSubtree(node, accumulator);\n  }\n\n  return accumulator;\n};\n\nexport function getMessageNodeChildren(node: MessageNode) {\n  return (node as MessageNodeWithChildren).children;\n}\n\nexport const textFromNodeRecursive = (node: MessageNode): string => {\n  let textArr: Array<string> = [];\n\n  if (isMessageNodeText(node)) {\n    return node.text;\n  }\n\n  const children = getMessageNodeChildren(node);\n  if (children) {\n    textArr = textArr.concat(\n      children.map((child) => textFromNodeRecursive(child)),\n    );\n  }\n\n  const result = textArr.join('');\n\n  return result;\n};\n\nexport function convertStructuredMessageToText(\n  messageContent: MessageContent,\n): string {\n  return messageContent\n    .map((node) => textFromNodeRecursive(node))\n    .join('\\n')\n    .trim();\n}\n\n// converts a list of MessageNode into text.\n// any whitespace or assignees at the start/end are removed.\nfunction taskTitleFromMessageNodes(\n  nodes: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\n): string {\n  let pending = '';\n  let text = '';\n\n  for (const node of nodes) {\n    if (node.type === MessageNodeType.ASSIGNEE) {\n      if (text.trim() === '') {\n        // no text was seen so far, so this is an assignee at the start of a\n        // message. We want to skip those.\n        continue;\n      }\n      // okay, we have seen some text already, but this assignee might be at\n      // the very end of the message. Hence let the assignee wait in the\n      // pending until we find non-empty text (which would mean the assignee is\n      // not at the end of the message)\n      pending += trimStart(textFromNodeRecursive(node), '+');\n      continue;\n    }\n\n    let newText = '';\n    if (isMessageNodeText(node)) {\n      newText = node.text;\n    } else if (node.type === MessageNodeType.MENTION) {\n      newText = trimStart(textFromNodeRecursive(node), '@');\n    }\n\n    const isEmpty = newText.trim() === '';\n    if (isEmpty) {\n      // this might be either trailing whitespace or whitespace in the middle\n      // of the message. For now, let's have it in pending until something\n      // non-empty arrives\n      pending += newText;\n    } else {\n      // we found some non-empty text so whatever was waiting in the pending\n      // can now finally become part of text\n      text += pending + newText;\n      pending = '';\n    }\n  }\n\n  return trimEnd(text.trim(), ':').trim();\n}\n\n// converts each MessageNode into text, returns the first non-empty one.\nexport function taskTitleFromMessageContent(\n  messageContent: MessageContent,\n): string {\n  for (let i = 0; i < messageContent.length; i++) {\n    const nodes: (\n      | MessageTextNode\n      | MessageAssigneeNode\n      | MessageMentionNode\n    )[] = [];\n    flattenMessage(messageContent[i], nodes);\n\n    const title = taskTitleFromMessageNodes(nodes);\n    if (title.length > 0) {\n      return title;\n    }\n  }\n\n  return 'Task created using Cord';\n}\n\nfunction flattenMessage(\n  node: MessageNode,\n  accumulator: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\n) {\n  if (\n    isMessageNodeText(node) ||\n    node.type === MessageNodeType.ASSIGNEE ||\n    node.type === MessageNodeType.MENTION\n  ) {\n    accumulator.push(node);\n    return;\n  }\n  const children = getMessageNodeChildren(node);\n  if (!children) {\n    return;\n  }\n\n  for (const child of children) {\n    flattenMessage(child, accumulator);\n  }\n}\n\n// message.content is null if message is deleted\nexport const findMessageNode = (\n  arr: MessageContent | null,\n  nodeType: MessageNodeType,\n): any => {\n  if (!arr) {\n    return null;\n  }\n  for (const item of arr) {\n    if (item.type === nodeType) {\n      return item;\n    }\n    if ('children' in item) {\n      const p = findMessageNode(item.children, nodeType);\n      if (p) {\n        return p;\n      }\n    }\n  }\n\n  return null;\n};\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID, JsonObject, EntityMetadata } from 'common/types/index.ts';\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\nimport { asSlackBotUserAuthData } from 'server/src/slack/types.ts';\nimport type { SlackBotCredentials } from 'server/src/slack/util.ts';\n\nexport type OrgEntityState = 'active' | 'inactive';\n\n@Table({\n  tableName: 'orgs',\n  timestamps: false,\n})\nexport class OrgEntity extends Model<\n  InferAttributes<OrgEntity>,\n  InferCreationAttributes<OrgEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\n\n  @Column({ type: DataTypes.TIME })\n  createdTimestamp!: CreationOptional<Date>;\n\n  @Column({ type: DataTypes.ENUM('inactive', 'active') })\n  state!: OrgEntityState;\n\n  // The following fields will be populated with information from the org's respective auth provider.\n\n  @Column({ type: DataTypes.STRING })\n  name!: string;\n\n  @Column({ type: DataTypes.STRING, allowNull: true })\n  domain!: string | null;\n\n  // The following fields contain information related external auth providers (Slack, GSuite, etc).\n\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\n  externalID!: string; // provider-specific id\n\n  @Column({\n    type: DataTypes.ENUM('slack', 'platform'),\n    unique: 'AppExternalIDUniqueness',\n  })\n  externalProvider!: AuthProviderType; // the provider this org originated from\n\n  @Column({ type: DataTypes.JSONB })\n  externalAuthData!: JsonObject | null; // provider-specific access token\n\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\n  platformApplicationID!: UUID | null;\n\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false, allowNull: false })\n  internal!: CreationOptional<boolean>;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: CreationOptional<EntityMetadata>;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  customSlackAppID!: string | null;\n\n  public async getLinkedOrg(): Promise<OrgEntity | null> {\n    // for now, only allow fetching the linked org for platform orgs. Once we\n    // need to feth the platform org that is linked to current Slack org, then\n    // we will need to update this code.\n    if (this.externalProvider !== 'platform') {\n      return null;\n    }\n    return await OrgEntity.findOne({\n      include: {\n        model: LinkedOrgsEntity,\n        required: true,\n        where: {\n          sourceOrgID: this.id,\n          sourceExternalProvider: this.externalProvider,\n        },\n      },\n    });\n  }\n\n  public async loadLinkedSlackOrg() {\n    if (this.externalProvider === 'slack') {\n      return this;\n    }\n    const slackOrg = await this.getLinkedOrg();\n    return slackOrg?.externalProvider === 'slack' ? slackOrg : null;\n  }\n\n  public async getSlackBotCredentials(): Promise<SlackBotCredentials | null> {\n    const slackOrg = await this.loadLinkedSlackOrg();\n\n    if (slackOrg) {\n      const authData = asSlackBotUserAuthData(slackOrg.externalAuthData);\n      if (authData) {\n        return { org: slackOrg, ...authData };\n      }\n    }\n\n    return null;\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\n\n@Table({\n  tableName: 'linked_orgs',\n  timestamps: false,\n})\nexport class LinkedOrgsEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    unique: true,\n  })\n  sourceOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.ENUM('slack', 'platform'),\n  })\n  sourceExternalProvider!: AuthProviderType;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  linkedOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.ENUM('slack', 'platform'),\n  })\n  linkedExternalProvider!: AuthProviderType;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  mergerUserID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  linkedTimestamp!: Date;\n}\n", "import type { JsonValue } from 'common/types/index.ts';\n\nexport type SlackBotUserAuthData = {\n  bot_user_id: string;\n  bot_access_token: string;\n};\n\nexport function asSlackBotUserAuthData(\n  x: JsonValue,\n): SlackBotUserAuthData | null {\n  if (\n    x &&\n    typeof x === 'object' &&\n    !Array.isArray(x) &&\n    typeof x.bot_user_id === 'string' &&\n    typeof x.bot_access_token === 'string'\n  ) {\n    return {\n      bot_user_id: x.bot_user_id,\n      bot_access_token: x.bot_access_token,\n    };\n  }\n  return null;\n}\n\n// Annoyingly, Slack uses different sets of string constants to denote channel\n// types in different API methods.  Some API methods use single characters\n// ('C', 'G',...) in their response, others use lowercase words ('channel',\n// 'im',...). And then other methods use a different set of snake_case words\n// ('public_channel', 'private_channel'). And then, some responses may not have\n// a single channel type field, but rather a bunch of boolean fields\n// ('is_channel', 'is_group',...).\nexport enum SlackChannelType {\n  PUBLIC = 'C',\n  PRIVATE = 'G',\n}\n\nexport enum SlackMessageChannelType {\n  PUBLIC = 'channel',\n  IM = 'im',\n}\n\nexport type ChannelArchiveEvent = {\n  // Confusingly, this is the channel ID\n  channel: string;\n  user: string;\n};\n\nexport type ChannelUnarchiveEvent = ChannelArchiveEvent;\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type {\n  UserType,\n  UserState,\n  UUID,\n  EntityMetadata,\n} from 'common/types/index.ts';\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\n\nexport type UserEntityState = UserState;\n@Table({\n  tableName: 'users',\n  timestamps: false,\n})\nexport class UserEntity extends Model<\n  InferAttributes<UserEntity>,\n  InferCreationAttributes<UserEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\n\n  @Column({ type: DataTypes.TIME })\n  createdTimestamp!: CreationOptional<Date>;\n\n  @Column({ type: DataTypes.TIME })\n  updatedTimestamp!: CreationOptional<Date>;\n\n  @Column({ type: DataTypes.ENUM('person', 'bot'), defaultValue: 'person' })\n  userType!: CreationOptional<UserType>;\n\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false })\n  admin!: CreationOptional<boolean>;\n\n  @Column({\n    type: DataTypes.ENUM('active', 'deleted'),\n    defaultValue: 'active',\n    allowNull: false,\n  })\n  state!: CreationOptional<UserEntityState>;\n\n  // The following fields will be populated with information from the user's respective auth provider.\n\n  @Column({ type: DataTypes.STRING })\n  name!: string | null; // the user's full name\n\n  @Column({ type: DataTypes.DATE })\n  nameUpdatedTimestamp!: Date | null;\n\n  @Column({ type: DataTypes.STRING })\n  screenName!: string | null;\n\n  @Column({ type: DataTypes.STRING })\n  email!: string | null;\n\n  @Column({ type: DataTypes.STRING })\n  profilePictureURL!: string | null;\n\n  @Column({ type: DataTypes.DATE })\n  profilePictureURLUpdatedTimestamp!: Date | null;\n\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\n  externalID!: CreationOptional<string>; // provider-specific user id\n\n  @Column({ type: DataTypes.ENUM('slack', 'platform') })\n  externalProvider!: AuthProviderType | null; // the provider used to log in\n\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\n  platformApplicationID!: UUID | null;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: CreationOptional<EntityMetadata>;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\nimport type { FileUploadStatus } from 'server/src/schema/resolverTypes.ts';\nimport {\n  getSignedDeleteURL,\n  getSignedDownloadURL,\n  getSignedUploadURL,\n} from 'server/src/files/upload.ts';\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\nimport { Viewer } from 'server/src/auth/index.ts';\nimport { API_ORIGIN } from 'common/const/Urls.ts';\nimport { encodeFileProxyToken } from 'server/src/files/download.ts';\n\n@Table({\n  tableName: 'files',\n  timestamps: false,\n})\nexport class FileEntity extends Model<\n  InferAttributes<FileEntity>,\n  InferCreationAttributes<FileEntity>\n> {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  userID!: UUID; // the user who created this file\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.STRING,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.STRING,\n  })\n  mimeType!: string;\n\n  @Column({\n    type: DataTypes.INTEGER,\n  })\n  size!: number;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: CreationOptional<Date>;\n\n  @Column({\n    type: DataTypes.STRING,\n  })\n  uploadStatus!: FileUploadStatus;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  s3Bucket!: UUID | null;\n\n  // URL that points to S3, expires after 24 hours\n  async getSignedDownloadURL(\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\n      Viewer.createAnonymousViewer(),\n    ),\n  ): Promise<string> {\n    const s3Bucket = this.s3Bucket\n      ? await s3BucketLoader.load(this.s3Bucket)\n      : undefined;\n    return getSignedDownloadURL(\n      this.id,\n      this.name,\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\n    );\n  }\n\n  // URL that points to our FileProxyHandler, never expires\n  getPermanentDownloadURL() {\n    return `${API_ORIGIN}/file?token=${encodeURIComponent(\n      encodeFileProxyToken({\n        id: this.id,\n      }),\n    )}`;\n  }\n\n  async getSignedUploadURL(\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\n      Viewer.createAnonymousViewer(),\n    ),\n  ): Promise<string> {\n    const s3Bucket = this.s3Bucket\n      ? await s3BucketLoader.load(this.s3Bucket)\n      : undefined;\n    return getSignedUploadURL(\n      this.id,\n      this.size,\n      this.mimeType,\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\n    );\n  }\n\n  async getDeleteURL(\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\n      Viewer.createAnonymousViewer(),\n    ),\n  ): Promise<string> {\n    const s3Bucket = this.s3Bucket\n      ? await s3BucketLoader.load(this.s3Bucket)\n      : undefined;\n    return getSignedDeleteURL(\n      this.id,\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\n    );\n  }\n}\n", "import * as crypto from 'crypto';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc.js';\nimport * as credentialProviderNode from '@aws-sdk/credential-provider-node';\n\nimport env from 'server/src/config/Env.ts';\nimport type { UUID } from 'common/types/index.ts';\nimport {\n  UPLOAD_URL_TTL_SECONDS,\n  DOWNLOAD_URL_TTL_SECONDS,\n  DELETE_URL_TTL_SECONDS,\n} from 'common/const/Timing.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\nimport sleep from 'common/util/sleep.ts';\n\ndayjs.extend(utc);\n\nconst {\n  S3_ACCESS_KEY_ID,\n  S3_ACCESS_KEY_SECRET,\n  S3_BUCKET,\n  S3_ENDPOINT,\n  S3_REGION,\n  S3_PUBLIC_BUCKET,\n} = env;\n\nconst defaultS3Bucket: S3BucketConfig = {\n  bucket: S3_BUCKET,\n  region: S3_REGION,\n};\n\nexport const publicS3Bucket: S3BucketConfig = {\n  bucket: S3_PUBLIC_BUCKET,\n  region: S3_REGION,\n};\n\nexport interface S3BucketConfig {\n  bucket: string;\n  region: string;\n  accessKeyID?: string;\n  accessKeySecret?: string;\n}\n\nexport interface S3BucketConfigWithCredentials extends S3BucketConfig {\n  accessKeyID: string;\n  accessKeySecret: string;\n}\n\ninterface Credentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken?: string;\n  expiration?: Date;\n}\nlet credentials: Credentials | null = null;\n\nfunction getCredentials() {\n  if (!credentials) {\n    throw new Error('Link signing credentials not initialized');\n  }\n  return credentials;\n}\n\nexport async function initializeLinkSigningCredentials() {\n  if (S3_ACCESS_KEY_ID && S3_ACCESS_KEY_SECRET) {\n    // there are credentials in the .env file - we'll just use these\n    credentials = {\n      accessKeyId: S3_ACCESS_KEY_ID,\n      secretAccessKey: S3_ACCESS_KEY_SECRET,\n    };\n    return;\n  }\n\n  return await refreshLinkSigningCredentials();\n}\n\nasync function refreshLinkSigningCredentials(): Promise<void> {\n  try {\n    credentials = await credentialProviderNode.defaultProvider({})();\n\n    // We want to refresh (at least) every 5 hours.\n    let refreshInMilliseconds = 5 * 60 * 60 * 1000; // 5 hours\n\n    if (credentials.expiration) {\n      const millisecondsUntilExpiration =\n        credentials.expiration.getTime() - Date.now();\n\n      // We want to create signed links that are valid for a certain period of\n      // time, but it's limited by the lifetime of these credentials. So we want\n      // to refresh the credentials soon enough: refresh no later than the\n      // current credentials expiry minus the time for which the signed links to\n      // be valid. For good measure add a 5 minute safety margin.\n      const maxTtlSeconds = Math.max(\n        DOWNLOAD_URL_TTL_SECONDS,\n        UPLOAD_URL_TTL_SECONDS,\n        DELETE_URL_TTL_SECONDS,\n      );\n      const needNewCredentialsInMilliseconds =\n        millisecondsUntilExpiration - (maxTtlSeconds + 5 * 60) * 1000;\n\n      if (needNewCredentialsInMilliseconds < 60 * 1000) {\n        // No point in trying too often. Wait at least one minute.\n        refreshInMilliseconds = 60000;\n      } else if (needNewCredentialsInMilliseconds < refreshInMilliseconds) {\n        // We want new credentials sooner than the default 5 hours from above.\n        refreshInMilliseconds = needNewCredentialsInMilliseconds;\n      }\n    }\n\n    anonymousLogger().info('Refreshed AWS credentials for S3 link signing', {\n      accessKeyId: credentials.accessKeyId,\n      nextRefreshInSeconds: refreshInMilliseconds / 1000,\n    });\n    setTimeoutAsync(refreshLinkSigningCredentials, refreshInMilliseconds);\n  } catch (err) {\n    // Something went wrong. Log the exception...\n    anonymousLogger().logException('refreshLinkSigningCredentials', err);\n    // ...then wait one second...\n    await sleep(1000);\n    // ...then retry.\n    return await refreshLinkSigningCredentials();\n  }\n}\n\nconst sha256 = (text: string) =>\n  crypto.createHash('sha256').update(text).digest();\n\nconst hmac256 = (text: string, key: any) =>\n  crypto.createHmac('sha256', key).update(text).digest();\n\nconst sortedEntries = (object: Record<string, string>) =>\n  Object.entries(object).sort(([key1], [key2]) => (key1 < key2 ? -1 : 1));\n\nexport const getSignedDownloadURL = (\n  fileId: UUID,\n  filename: string,\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n  config?: S3BucketConfig,\n) =>\n  getSignedURL(fileId, DOWNLOAD_URL_TTL_SECONDS, config, 'GET', undefined, {\n    'response-content-disposition': `attachment; filename=\"${encodeURIComponent(\n      filename,\n    )}\"`,\n  });\n\nexport const getSignedUploadURL = (\n  key: string,\n  size: number,\n  mimeType: string,\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n  config?: S3BucketConfig,\n) =>\n  getSignedURL(key, UPLOAD_URL_TTL_SECONDS, config, 'PUT', {\n    'Content-Length': `${size}`,\n    'Content-Type': mimeType,\n  });\n\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\nexport const getSignedDeleteURL = (key: string, config?: S3BucketConfig) =>\n  getSignedURL(key, DELETE_URL_TTL_SECONDS, config, 'DELETE');\n\nexport function getPublicBucketDownloadURL(filename: string) {\n  return `https://${env.PUBLIC_UPLOADS_HOST}/${getPublicBucketKey(filename)}`;\n}\n\nexport function getPublicBucketKey(key: string) {\n  return env.S3_USE_PATH_BASED_URLS === 'true'\n    ? env.S3_PUBLIC_BUCKET + '/' + key\n    : key;\n}\n\n/*\n  Implementation of https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\n  Also documented here: https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n  I did this manually because I didn't want to include aws-sdk which for some reason is massive.\n*/\nexport const getSignedURL = (\n  key: string,\n  expirationSeconds = 60, // default 1 minute\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n  config: S3BucketConfig = defaultS3Bucket,\n  verb = 'GET',\n  additionalHeaders: Record<string, string> = {},\n  additionalQueryParams: Record<string, string> = {},\n) => {\n  // We need credentials to create a signed URL. If the S3BucketConfig includes\n  // them, then we use those (that's the case for 3rd party buckets). Otherwise,\n  // we get our global credentials, which are the ones supplied in the .env\n  // file, if any, or using the EC2 instance profile privileges instead.\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n  const credentials: Credentials =\n    config.accessKeyID && config.accessKeySecret\n      ? {\n          accessKeyId: config.accessKeyID,\n          secretAccessKey: config.accessKeySecret,\n        }\n      : getCredentials();\n\n  let now = dayjs().utc();\n\n  // Round down the \"current time\" so that the signed URL doesn't change every\n  // second. This gives browsers some hope of having a cache hit for\n  // potentially-large images and files. Only do the rounding-down if the\n  // expiration time is long enough, since this effectively shaves time off of\n  // the expiration.\n  if (expirationSeconds > 2 * 60) {\n    now = now.second(0);\n  }\n  if (expirationSeconds > 2 * 60 * 60) {\n    now = now.minute(0);\n  }\n\n  const time = now.format('YYYYMMDD[T]HHmmss[Z]');\n  const date = now.format('YYYYMMDD');\n  const s3Endpoint = S3_ENDPOINT.replace('<REGION>', config.region);\n\n  const path =\n    '/' +\n    encodeRFC3986URIComponent(config.bucket) +\n    '/' +\n    key.split('/').map(encodeRFC3986URIComponent).join('/');\n  const host = new URL(s3Endpoint).host;\n\n  const headers = {\n    host: host,\n    ...additionalHeaders,\n  };\n\n  const signedHeaders = Object.keys(headers)\n    .map((header) => header.toLowerCase())\n    .sort()\n    .join(';');\n\n  const credential = [\n    credentials.accessKeyId,\n    date,\n    config.region,\n    's3',\n    'aws4_request',\n  ].join('/');\n\n  const query: Record<string, string> = {\n    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',\n    'X-Amz-Credential': credential,\n    'X-Amz-Date': time,\n    'X-Amz-Expires': `${expirationSeconds}`,\n    'X-Amz-SignedHeaders': signedHeaders,\n    ...additionalQueryParams,\n  };\n  if (credentials.sessionToken) {\n    query['X-Amz-Security-Token'] = credentials.sessionToken;\n  }\n\n  const canonicalQueryString = sortedEntries(query)\n    .map(\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n      ([key, value]) =>\n        `${encodeRFC3986URIComponent(key)}=${encodeRFC3986URIComponent(value)}`,\n    )\n    .join('&');\n\n  const canonicalHeaders = sortedEntries(headers)\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n    .map(([key, value]) => `${key.toLowerCase()}:${value.trim()}\\n`)\n    .join('');\n\n  const canonicalRequestString = [\n    verb,\n    path,\n    canonicalQueryString,\n    canonicalHeaders,\n    signedHeaders,\n    'UNSIGNED-PAYLOAD',\n  ].join('\\n');\n\n  const stringToSign = [\n    'AWS4-HMAC-SHA256',\n    time,\n    [date, config.region, 's3', 'aws4_request'].join('/'),\n    sha256(canonicalRequestString).toString('hex'),\n  ].join('\\n');\n\n  const dateKey = hmac256(date, 'AWS4' + credentials.secretAccessKey);\n  const regionKey = hmac256(config.region, dateKey);\n  const serviceKey = hmac256('s3', regionKey);\n  const signingKey = hmac256('aws4_request', serviceKey);\n\n  const signature = hmac256(stringToSign, signingKey).toString('hex');\n\n  return `${s3Endpoint}${path}?${canonicalQueryString}&X-Amz-Signature=${signature}`;\n};\n\n/**\n * Encode a URI component according to RFC3986, like AWS expects us to.\n *\n * There are characters that JavaScript's encodeURIComponent does not encode,\n * but AWS expects them to be encoded.\n *\n * AWS cites RFC3986 for URI encoding here:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n *\n * The implementation is copy-pasted from MDN:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\n */\nfunction encodeRFC3986URIComponent(str: string) {\n  return encodeURIComponent(str).replace(\n    /[!'()*]/g,\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n  );\n}\n", "// The amount of time that we consider a continuous train of messages\n// by a single message sender. If two messages are within this timeframe\n// from one another, we'll render them as a single visual block. If the messages\n// are further apart in time than this, we'll render them as two different blocks\n// each with their own message timestamp, profile pic, etc.\nexport const CONTIGUOUS_MESSAGE_BLOCK_TIMEOUT_SECONDS = 90;\n\n// Number of seconds that the undo button will be shown for after hiding an annotation\nexport const UNDO_HIDE_HOTSPOT_ANNOTATION_TIMEOUT_SECONDS = 5;\n\n// How long a signed URL from S3 should be valid for\nexport const UPLOAD_URL_TTL_SECONDS = 60 * 5; // 5 minutes\nexport const DOWNLOAD_URL_TTL_SECONDS = 60 * 60 * 4; // 4 hours\nexport const DELETE_URL_TTL_SECONDS = 60 * 10; // 10 minutes\n\n// Seconds until the typing indicator decays automatically\nexport const TYPING_TIMEOUT_TTL_SECONDS = 3;\n\n// Number of seconds that need to pass since a given page has lost\n// focus before we stop considering it the page the user is actively\n// on/looking at.\nexport const PAGE_PRESENCE_LOSS_TTL_SECONDS = 30;\n\n// Number of milliseconds between active presence pings to server.\nexport const PRESENCE_UPDATE_INTERVAL_MS =\n  (PAGE_PRESENCE_LOSS_TTL_SECONDS * 1000) / 2;\n\n// The minimum period between durable presence updates\nexport const DURABLE_PRESENCE_THROTTLE_MS = 60 * 1000; // 1 minute\n\n// How often to poll annotation locationMatch type in MessageAnnotationElement\nexport const ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 3000;\n// Same, but for composer annotations and AnnotationPointers in delegate\nexport const FAST_ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 1000;\n\nexport const SCREENSHOT_TRANSITION_IN_MS = 200;\n\nexport const ANNOTATION_POINTER_TRANSITION_OUT_MS = 150;\n\n// How long annotation arrow should stick around before fading out (when adding to composer)\nexport const ANNOTATION_ARROW_ON_ADD_MS = 2000;\n\n// After this many seconds, we assume the upload failed (e.g. because the user closed browser)\nexport const MAX_FILE_UPLOADING_TIME_SECONDS = 60;\n\n// used in the set time out to pull the pop up out of view\nexport const SUCCESS_POP_UP_TIMEOUT_MS = 3000;\nexport const SUCCESS_POP_UP_TRANSITION_MS = 300;\n\n// this needs to be smaller than TYPING_TIMEOUT_TTL_SECONDS\nexport const TYPING_USER_THROTTLE_MS = 2000;\n\nexport const THREAD_LAYOUT_ANIMATION_SECONDS = 0.25;\n\nexport const ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS = 30;\nexport const ACCESS_TOKEN_MAX_AGE_SECONDS = 60 * 60 * 24; // 1 day\n\n// How long to keep a message ID when a user clicks a link to a message to a different page\n// we use the message ID to focus that message when the page loads\nexport const DEEP_LINK_THREAD_ID_TTL_SECONDS = 30;\n\n// How long to highlight a deepLinked message after we scroll to it\nexport const DEEP_LINK_MESSAGE_HIGHLIGHT_MS = 5000;\n\n// Clients whose version was successfully deployed more than X days ago\n// won't be able to communicate with the server. This is to avoid\n// costantly bumping into errors when deprecating APIs.\nexport const CLIENT_VERSION_MAX_DAYS_OLD = 60;\n\nexport const QUERY_POLL_INTERVAL = 3000;\n\nexport const SAMPLE_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60 * 7;\n\nexport const DOCS_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60; // 1 day\n", "import { hostname, userInfo } from 'os';\nimport { serializeError } from 'serialize-error';\nimport winston from 'winston';\nimport WinstonCloudWatch from 'winston-cloudwatch';\nimport Transport from 'winston-transport';\nimport * as Sentry from '@sentry/node';\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\nimport '@sentry/tracing';\n\nimport env from 'server/src/config/Env.ts';\nimport { flatFormat } from 'server/src/logging/flatFormat.ts';\nimport packageData from 'package.json';\nimport { Counter } from 'server/src/logging/prometheus.ts';\nimport type { JsonObject } from 'common/types/index.ts';\nimport { Viewer } from 'server/src/auth/index.ts';\nimport { CordError } from 'server/src/util/CordError.ts';\n\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\n// appropriate string (e.g. 'server' or 'asyncWorker') and\n// `BUILDCONSTANTS.sentryDSN` with either `undefined` or a string value for a\n// Sentry DSN\ndeclare const BUILDCONSTANTS: {\n  loggingProcessName: string;\n  sentryDSN: undefined | string;\n};\n\n// The loglevel for the console output can be specified using the environment\n// variable `LOGLEVEL`\nconst logLevel = env.LOGLEVEL;\n\nconst defaultMeta: any = {\n  process: BUILDCONSTANTS.loggingProcessName,\n  serverVersion: packageData.version,\n  serverGitCommit: process.env.COMMIT_HASH || process.env.npm_package_gitHead,\n  serverHost: hostname(),\n};\n\nif (process.env.CORD_WORKER_NAME) {\n  defaultMeta.workerName = process.env.CORD_WORKER_NAME;\n}\n\n// Sentry logging\nconst sentryLogging = !!(BUILDCONSTANTS.sentryDSN && env.SENTRY_ENVIRONMENT);\nif (sentryLogging) {\n  Sentry.init({\n    dsn: BUILDCONSTANTS.sentryDSN,\n    environment: env.SENTRY_ENVIRONMENT,\n    release: env.SENTRY_RELEASE,\n    tracesSampleRate: parseFloat(env.SENTRY_TRACE_SAMPLE_RATE ?? '0'),\n    attachStacktrace: true,\n    normalizeDepth: 10,\n  });\n}\n\n// Winston logging\nconst winstonLogger = winston.createLogger({ defaultMeta });\n\nwinstonLogger.add(\n  new winston.transports.Console({\n    level: logLevel,\n    format: winston.format.combine(winston.format.timestamp(), flatFormat()),\n    handleExceptions: true,\n  }),\n);\n\n// Keep track of logging in a Prometheus metric. The cleanest way to do this is\n// by adding a separate transport, because that allows us to set the loglevel\n// for this independently. No matter what `env.LOGLEVEL` is set to, the\n// Prometheus metric keeps track of *all* log messages, even the 'silly' ones.\n// ('silly' is the name of the lowest loglevel in Prometheus.)\nconst counter = Counter({\n  name: 'ServerLogging',\n  help: 'Number of log messages emitted by server',\n  labelNames: ['level'],\n});\n\nconst LEVEL = Symbol.for('level');\nclass MetricLogger extends Transport {\n  log(info: any, next: () => void) {\n    counter.inc({ level: info[LEVEL] });\n    next();\n  }\n}\n\nexport type LoggingTags = { [tag: string]: number | string | boolean };\n\nwinstonLogger.add(new MetricLogger({ level: 'silly' }));\n\n// CloudWatch logging is configured via the environment\nlet winstonCW: WinstonCloudWatch | undefined = undefined;\nif (env.CLOUDWATCH_LOGLEVEL && !process.env.IS_TEST) {\n  if (!env.CLOUDWATCH_LOG_GROUP_NAME) {\n    throw new Error(\n      `CloudWatch logging is enabled (CLOUDWATCH_LOGLEVEL is set), so\n       CLOUDWATCH_LOG_GROUP_NAME must be provided, too!`,\n    );\n  }\n\n  // CloudWatch stream names must not contain ':' or '*' characters\n  const defaultStreamName = () =>\n    `${new Date().toISOString().replace(/:/g, '.')} ${\n      userInfo().username\n    } ${hostname()}(${process.pid})`;\n\n  winstonCW = new WinstonCloudWatch({\n    // \"name\" is optional with default value \"CloudWatch\" but the\n    // typedefinition has name as required. See\n    // https://githubmemory.com/repo/lazywithclass/winston-cloudwatch/issues/155\n    name: 'CloudWatch',\n    level: env.CLOUDWATCH_LOGLEVEL,\n    logGroupName: env.CLOUDWATCH_LOG_GROUP_NAME,\n    logStreamName: env.CLOUDWATCH_LOG_STREAM_NAME || defaultStreamName(),\n    awsRegion: env.CLOUDWATCH_AWS_REGION,\n    jsonMessage: true,\n  });\n  winstonLogger.add(winstonCW);\n} else {\n  if (env.CLOUDWATCH_LOG_GROUP_NAME || env.CLOUDWATCH_LOG_STREAM_NAME) {\n    throw new Error(\n      `Some CLOUDWATCH_* variables are set, but CLOUDWATCH_LOGLEVEL is not.`,\n    );\n  }\n}\n\nexport function flushAndCloseWinstonCloudWatch() {\n  if (winstonCW) {\n    return new Promise<void>((resolve, _reject) => {\n      winstonCW!.kthxbye((_err) => resolve());\n    });\n  } else {\n    return undefined;\n  }\n}\n\nconst SENTRY_LOG_LEVEL: Record<string, Sentry.SeverityLevel | undefined> = {\n  error: 'error',\n  warn: 'warning',\n};\n\nconst cleanupSequelizeError = (error: any) => {\n  // remove references to the instance object as they contain deep SQL information\n  // like db password, etc\n  const suberrors = error.errors;\n  if (Array.isArray(suberrors)) {\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\n    suberrors.forEach((error) => delete error.instance);\n  }\n};\n\nconst MAX_ORG_IDS_TO_LOG = 50;\n\nexport class Logger {\n  private readonly truncatedViewer: Record<string, unknown>;\n  private readonly metadata: JsonObject;\n  private appName: string | undefined;\n\n  constructor(viewer: Viewer, additionalMeta?: JsonObject) {\n    this.truncatedViewer = { ...viewer };\n    this.metadata = { ...defaultMeta, ...additionalMeta };\n\n    if (\n      viewer.relevantOrgIDs &&\n      viewer.relevantOrgIDs.length > MAX_ORG_IDS_TO_LOG\n    ) {\n      this.truncatedViewer.relevantOrgIDs = [\n        ...viewer.relevantOrgIDs.slice(0, MAX_ORG_IDS_TO_LOG),\n        `(truncated from ${viewer.relevantOrgIDs.length} orgs)`,\n      ];\n    }\n\n    void this.addAppName(viewer);\n  }\n\n  public childLogger(viewer: Viewer, additionalMeta?: JsonObject) {\n    return new Logger(viewer, { ...this.metadata, ...additionalMeta });\n  }\n\n  private viewerToLog() {\n    return {\n      ...this.truncatedViewer,\n      ...(this.appName && { appName: this.appName }),\n    };\n  }\n\n  public log(\n    level: 'debug' | 'info' | 'warn' | 'error',\n    message: string,\n    meta?: JsonObject,\n    options?: { sentryFingerPrint?: string[] },\n  ) {\n    if (sentryLogging && !process.env.IS_TEST) {\n      const sentryLevel = SENTRY_LOG_LEVEL[level];\n      if (sentryLevel) {\n        const sentryEventID = Sentry.captureMessage(message, {\n          level: sentryLevel,\n          extra: { ...defaultMeta, ...meta },\n          tags: { loggingProcessName: BUILDCONSTANTS.loggingProcessName },\n          fingerprint: options?.sentryFingerPrint,\n          user: this.viewerToLog(),\n        });\n        meta = { ...this.metadata, ...meta, sentryEventID };\n      }\n    }\n\n    winstonLogger.log(level, message, {\n      viewer: this.viewerToLog(),\n      ...this.metadata,\n      ...meta,\n    });\n  }\n\n  public debug(\n    message: string,\n    meta?: JsonObject,\n    options?: { sentryFingerPrint?: string[] },\n  ) {\n    this.log('debug', message, meta, options);\n  }\n\n  public info(\n    message: string,\n    meta?: JsonObject,\n    options?: { sentryFingerPrint?: string[] },\n  ) {\n    this.log('info', message, meta, options);\n  }\n\n  public warn(\n    message: string,\n    meta?: JsonObject,\n    options?: { sentryFingerPrint?: string[] },\n  ) {\n    this.log('warn', message, meta, options);\n  }\n\n  public error(\n    message: string,\n    meta?: JsonObject,\n    options?: { sentryFingerPrint?: string[] },\n  ) {\n    this.log('error', message, meta, options);\n  }\n\n  public logLoggerInfo() {\n    this.info(\n      `Logging through winston. Console log level set to \"${logLevel}\", CloudWatch logging is ${\n        env.CLOUDWATCH_LOGLEVEL === undefined\n          ? 'disabled'\n          : `set to \"${env.CLOUDWATCH_LOGLEVEL}\"`\n      }`,\n    );\n  }\n\n  /**\n  Useful when dealing with promises:\n\n  ```\n  promise.catch(exceptionLogger('something broke'))\n  ```\n*/\n  public exceptionLogger =\n    (message: string, meta?: JsonObject, tags?: LoggingTags) => (error: any) =>\n      this.logException(\n        message,\n        error,\n        { ...this.metadata, ...meta },\n        tags,\n        'error',\n      );\n\n  /**\n  To be used imperatively:\n\n  ```\n  try {\n    // ...\n  } catch (e) {\n    logException('something broke', e)\n  }\n  ```\n*/\n  public logException(\n    message: string,\n    error: any,\n    meta?: JsonObject,\n    tags?: LoggingTags,\n    level: 'debug' | 'info' | 'warn' | 'error' = 'error',\n  ) {\n    // Make a good effort to produce a nice error log message from the given\n    // `message`, `error` (and optionally `meta`), but make sure that those\n    // efforts don't sabotage the logging, i.e. if something throws on the way,\n    // catch the error and make sure _something_ gets logged.\n    if (error.name?.startsWith('Sequelize')) {\n      cleanupSequelizeError(error);\n    }\n\n    let serializedError: any = undefined;\n    try {\n      serializedError = serializeError(error, { maxDepth: 50 });\n    } catch (e) {\n      winstonLogger.log(\n        level,\n        `logException: serializeError threw an exception (${message})`,\n        {\n          error: `${error}`,\n          viewer: this.viewerToLog(),\n          ...this.metadata,\n          ...meta,\n        },\n      );\n    }\n\n    if (serializedError !== undefined) {\n      // If serializing the error above failed, we have already logged a simple\n      // error representation to Winston above.\n      if (!message) {\n        try {\n          message = `${serializedError.name}: ${serializedError.message}`;\n        } catch (e) {\n          message = `${serializedError}`;\n        }\n      }\n\n      winstonLogger.log(level, message, {\n        error: serializedError,\n        viewer: this.viewerToLog(),\n        ...this.metadata,\n        ...meta,\n      });\n    }\n\n    if ((level === 'warn' || level === 'error') && !process.env.IS_TEST) {\n      Sentry.withScope((scope) => {\n        scope.setTags({\n          ...(error instanceof CordError && error.loggingTags),\n          ...tags,\n        });\n        // serializedError is undefined, if serializing failed\n        if (serializedError && error instanceof CordError) {\n          // Remove these properties, they'll get attached under other names\n          delete serializedError.loggingMetadata;\n          delete serializedError.loggingTags;\n        }\n        scope.setExtra('error', serializedError);\n\n        scope.setExtra('message', message);\n        scope.setExtra('meta', {\n          ...this.metadata,\n          ...(error instanceof CordError && error.loggingMetadata),\n          ...meta,\n        });\n        scope.setExtra('user', this.viewerToLog());\n\n        // We hand the original error object to Sentry\n        Sentry.captureException(error, {\n          level: SENTRY_LOG_LEVEL[level],\n        });\n      });\n    }\n  }\n\n  private async addAppName(viewer: Viewer) {\n    if (!viewer?.platformApplicationID) {\n      return;\n    }\n\n    const app = await ApplicationEntity.findByPk(viewer.platformApplicationID);\n    this.appName = app?.name;\n  }\n}\n\nlet _anonymousLogger: Logger | undefined = undefined;\nexport function anonymousLogger() {\n  if (_anonymousLogger === undefined) {\n    _anonymousLogger = new Logger(Viewer.createAnonymousViewer());\n  }\n  return _anonymousLogger;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type { CreationOptional } from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type {\n  UUID,\n  CustomLinks,\n  CustomNUX,\n  ApplicationEnvironment,\n} from 'common/types/index.ts';\nimport { getTypedFeatureFlagValue } from 'server/src/featureflags/index.ts';\nimport { FeatureFlags } from 'common/const/FeatureFlags.ts';\n\nexport type CustomEmailTemplate = {\n  partnerName: string;\n  imageURL: string;\n  sender?: string;\n  logoConfig?: { height: string; width: string };\n};\n\nexport type ApplicationTierType = 'free' | 'starter' | 'premium';\n\nexport type CustomSlackAppDetails = {\n  clientID: string;\n  clientSecret: string;\n  signingSecret: string;\n};\n\n@Table({\n  tableName: 'applications',\n  timestamps: false,\n})\nexport class ApplicationEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  sharedSecret!: string;\n\n  @Column({ type: DataTypes.TIME })\n  createdTimestamp!: CreationOptional<Date>;\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  customEmailTemplate!: CustomEmailTemplate | null;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    defaultValue: true,\n  })\n  enableEmailNotifications!: boolean;\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  customLinks!: CustomLinks | null;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  customS3Bucket!: UUID | null; // the s3 bucket to be used for this application\n\n  @Column({\n    type: DataTypes.TEXT,\n    defaultValue: null,\n  })\n  segmentWriteKey!: string | null; // the Segment Write key we use to write partner events\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  customNUX!: CustomNUX | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  iconURL!: string | null;\n\n  @Column({\n    type: DataTypes.ENUM('free', 'starter', 'premium'),\n    defaultValue: 'free',\n    allowNull: false,\n  })\n  type!: ApplicationTierType;\n\n  @Column({\n    type: DataTypes.ENUM(\n      'production',\n      'staging',\n      'sample',\n      'sampletoken',\n      'demo',\n    ),\n    defaultValue: 'production',\n    allowNull: false,\n  })\n  environment!: ApplicationEnvironment;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  supportOrgID!: UUID | null;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  supportBotID!: UUID | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  supportSlackChannelID!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  redirectURI!: string | null;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  customerID!: UUID;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n  })\n  slackConnectAllOrgs!: boolean;\n\n  @Column({\n    type: DataTypes.STRING,\n    defaultValue: null,\n  })\n  eventWebhookURL!: string | null;\n\n  @Column({\n    type: DataTypes.ARRAY(DataTypes.TEXT),\n    defaultValue: null,\n  })\n  eventWebhookSubscriptions!: string[] | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n    defaultValue: null,\n  })\n  customSlackAppID!: string | null;\n\n  @Column({\n    type: DataTypes.JSONB,\n    defaultValue: null,\n  })\n  customSlackAppDetails!: CustomSlackAppDetails | null;\n\n  public async isSupportChatEnabled(): Promise<boolean> {\n    const isSupportFlagEnabled = await getTypedFeatureFlagValue(\n      FeatureFlags.SUPPORT_CHAT_ENABLED,\n      {\n        userID: 'anonymous',\n        orgID: undefined,\n        platformApplicationID: this.id,\n        version: null,\n        customerID: this.customerID,\n      },\n    );\n\n    return Boolean(\n      isSupportFlagEnabled &&\n        this.supportBotID &&\n        this.supportOrgID &&\n        this.supportSlackChannelID,\n    );\n  }\n\n  public getCustomSlackAppDetails(): CustomSlackAppDetails | null {\n    const details = this.customSlackAppDetails;\n\n    if (\n      details &&\n      typeof details === 'object' &&\n      !Array.isArray(details) &&\n      typeof details.clientID === 'string' &&\n      typeof details.clientSecret === 'string' &&\n      typeof details.signingSecret === 'string'\n    ) {\n      return {\n        clientID: details.clientID,\n        clientSecret: details.clientSecret,\n        signingSecret: details.signingSecret,\n      };\n    }\n    return null;\n  }\n}\n", "import * as LaunchDarkly from '@launchdarkly/node-server-sdk';\nimport type {\n  ApplicationEnvironment,\n  SimpleValue,\n  UUID,\n} from 'common/types/index.ts';\nimport env from 'server/src/config/Env.ts';\nimport type { RequestContext } from 'server/src/RequestContext.ts';\nimport { FeatureFlags as CommonFeatureFlags } from 'common/const/FeatureFlags.ts';\nimport type { FeatureFlag } from 'common/const/FeatureFlags.ts';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\nimport {\n  DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\n  DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\n  DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\n} from 'server/src/email/index.ts';\n\nlet client: LaunchDarkly.LDClient | undefined = undefined;\nlet clientReady = false;\n\n// ADD NEW FLAGS HERE IF THEY ARE ONLY USED SERVER-SIDE.\n// If the new flag is also going to be used client side (in external/)\n// then add your new flag in common/const/FeatureFlags.ts\n//\n// See more explanation on how to define in flags in:\n// common/const/FeatureFlags.ts\nconst ServerOnlyFeatureFlags = {\n  QUERY_PARAM_DEEP_LINKS: {\n    key: 'query_param_deep_links',\n    defaultValue: false,\n  } as FeatureFlag<'query_param_deep_links', boolean>,\n  NOTIFY_PAGE_VISITORS_OF_EVERY_MESSAGE: {\n    key: 'notify_page_visitors_of_every_new_message',\n    defaultValue: false,\n  } as FeatureFlag<'notify_page_visitors_of_every_new_message', boolean>,\n  USER_IS_BLOCKED: {\n    key: 'user_is_blocked',\n    defaultValue: false,\n  } as FeatureFlag<'user_is_blocked', boolean>,\n  SHOW_CORD_COPY_IN_TASKS: {\n    key: 'show-cord-copy-in-tasks',\n    defaultValue: true,\n  } as FeatureFlag<'show-cord-copy-in-tasks', boolean>,\n  LOADER_CACHES: {\n    key: 'loader_caches',\n    defaultValue: true,\n  } as FeatureFlag<'loader_caches', boolean>,\n  SUBSCRIBE_ALL_ORG_MEMBERS: {\n    key: 'subscribe_all_org_members',\n    defaultValue: false,\n  },\n  WRITE_TO_EVENTS_TABLE: {\n    key: 'write_to_events_table',\n    defaultValue: true,\n  },\n  ALLOW_MAGIC_GRAPHQL_ORG_ID_OVERRIDE: {\n    key: 'allow-magic-graph-ql-org-id-override',\n    defaultValue: true,\n  },\n  GRANULAR_PERMISSIONS: {\n    key: 'granular-permissions',\n    defaultValue: false,\n  },\n  SKIP_PUBLISH_USER_IDENTITY_UPDATE: {\n    key: 'skip_publish_user_identity_update',\n    defaultValue: false,\n  },\n  RATE_LIMITS: {\n    key: 'rate_limits',\n    defaultValue: { maxCount: 50000, seconds: 5 * 60 },\n  },\n  EMAIL_NOTIFICATION_TEMPLATE_ID: {\n    key: 'email-notification-template-id',\n    defaultValue: {\n      mention: DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\n      share_to_email: DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\n      thread_resolve: DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\n    },\n  },\n} as const;\n\nexport const FeatureFlags = {\n  ...CommonFeatureFlags,\n  ...ServerOnlyFeatureFlags,\n} as const satisfies {\n  [key: string]: FeatureFlag<string, SimpleValue | object>;\n};\n\ntype MockClient =\n  | undefined\n  | ((\n      key: string,\n      user: FlagsUser,\n    ) => Promise<boolean | string | number | null>);\n// This is used in our test environments\nlet mockClient: MockClient;\n\nexport async function initFeatureFlags() {\n  if (client) {\n    throw new Error('Feature flags already initialized');\n  }\n  if (!env.LAUNCHDARKLY_API_KEY) {\n    return;\n  }\n  client = LaunchDarkly.init(env.LAUNCHDARKLY_API_KEY);\n  await client.waitForInitialization();\n  clientReady = true;\n}\n\nexport function closeFeatureFlags() {\n  if (client) {\n    client.close();\n    client = undefined;\n    clientReady = false;\n  }\n}\n\nexport type FlagsUser = {\n  userID: UUID | 'anonymous';\n  orgID?: UUID;\n  platformApplicationID: UUID | 'extension' | 'console';\n  version: string | null;\n  customerID?: UUID;\n  appEnvironment?: ApplicationEnvironment;\n};\n\n/**\n * Prefer flagsUserFromContext if you have a full context, as it has more info\n * in it.\n */\nexport function flagsUserFromViewer(viewer: Viewer): FlagsUser {\n  return {\n    userID: viewer.userID ?? 'anonymous',\n    orgID: viewer.orgID,\n    platformApplicationID: viewer.platformApplicationID ?? 'extension',\n    version: null,\n  };\n}\n\nexport function flagsUserFromContext(context: RequestContext): FlagsUser {\n  return {\n    ...flagsUserFromViewer(context.session.viewer),\n    version: context.clientVersion,\n    customerID: context.application?.customerID,\n  };\n}\n\n/**\n * For the REST API etc where there isn't a user. Prefer one of the other\n * functions if there is a user.\n */\nexport function flagsUserFromApplication(app: ApplicationEntity): FlagsUser {\n  return {\n    userID: 'anonymous',\n    platformApplicationID: app.id,\n    version: null,\n    customerID: app.customerID,\n  };\n}\n\n/**\n * Returns the value of the given feature flag in LaunchDarkly for the given\n * user, or the default value if LaunchDarkly cannot be reached for any reason.\n */\nexport async function getTypedFeatureFlagValue<\n  K extends (typeof FeatureFlags)[keyof typeof FeatureFlags]['key'],\n  T,\n>(feature: FeatureFlag<K, T>, user: FlagsUser): Promise<T> {\n  const value = (await getFeatureFlagValue(feature.key, user)) as T | null;\n  return value === null ? feature.defaultValue : value;\n}\n\nexport async function getFeatureFlagValue(key: string, user: FlagsUser) {\n  // To allow us to mock feature flags for our tests\n  if (mockClient) {\n    return await mockClient(key, user);\n  }\n  if (!client || !clientReady) {\n    return null;\n  }\n  const versionValue = versionToNumber(user.version);\n  const ldUser = {\n    // The choice of delimiter here is restricted by LaunchDarkly's website\n    // currently being flaky for users with a key that contains characters that\n    // need to be percent-encoded, so we need to choose something that doesn't\n    // get encoded.\n    key: user.orgID ? `${user.userID}_${user.orgID}` : user.userID,\n    custom: {\n      userID: user.userID,\n      ...(user.orgID && { orgID: user.orgID }),\n      platformApplicationID: user.platformApplicationID,\n      ...(versionValue && { version: versionValue }),\n      ...(user.customerID && { customerID: user.customerID }),\n      ...(user.appEnvironment && { appEnvironment: user.appEnvironment }),\n    },\n  };\n  return await (client.variation(key, ldUser, null) as Promise<\n    boolean | string | number | null\n  >);\n}\n\nfunction versionToNumber(version: string | null): number | null {\n  if (!version) {\n    return null;\n  }\n  if (version.startsWith('dev-')) {\n    return -1;\n  }\n  const match = version.match(/^(\\d+)[.](\\d+)[.](\\d+)$/);\n  if (!match) {\n    return null;\n  }\n  return 100000 * (parseInt(match[1], 10) - 1) + parseInt(match[2], 10);\n}\n\nexport function initMockFeatureFlagForTest(fn: MockClient) {\n  mockClient = fn;\n}\n", "// ADD NEW FLAGS HERE ONLY IF YOU NEED THEM ON THE CLIENT-SIDE\n// If the new flag is only used server-side then add your new flag in:\n// server/src/featureflags/index.ts\n// If you need to use them in BOTH the client AND the server, you only need\n// to add them once, in this file.\n//\n// Ensure they're set up in LaunchDarkly before you add them here.  The key for\n// the flag must match the key in LaunchDarkly.\n//\n// The full set of valid values for a flag should be in the second type argument\n// to FeatureFlag, so if you have a three-state feature flag of \"yes\", \"no\", and\n// \"maybeso\", you should declare it as:\n//\n// MULTI_STATE_FLAG: {\n//   key: 'multi_state_flag',\n//   defaultValue: 'no',\n// } as FeatureFlag<'multi_state_flag', 'yes' | 'no' | 'maybeso'>\nexport const FeatureFlags = {\n  USE_NEW_CSS_COMPONENTS: {\n    key: 'Use_new_CSS_components',\n    defaultValue: {},\n  } as FeatureFlag<'Use_new_CSS_components', Record<string, object>>,\n  SUPPORT_CHAT_ENABLED: {\n    key: 'support_chat_enabled',\n    defaultValue: false,\n  } as FeatureFlag<'support_chat_enabled', boolean>,\n  ENABLE_ANNOTATIONS_SCREENSHOTS: {\n    key: 'enable_annotations_screenshots',\n    defaultValue: true,\n  } as FeatureFlag<'enable_annotations_screenshots', boolean>,\n  ENABLE_PLAINTEXT_ANNOTATIONS: {\n    key: 'enable_plaintext_annotations',\n    defaultValue: true,\n  } as FeatureFlag<'enable_plaintext_annotations', boolean>,\n  ENABLE_ATTACHMENTS: {\n    key: 'enable_attachments',\n    defaultValue: true,\n  } as FeatureFlag<'enable_attachments', boolean>,\n  EMAIL_SHARING: {\n    key: 'email_sharing',\n    defaultValue: true,\n  } as FeatureFlag<'email_sharing', boolean>,\n  ENABLE_FORCE_REFRESH_PROVIDER: {\n    key: 'enable_force_refresh_provider',\n    defaultValue: false,\n  } as FeatureFlag<'enable_force_refresh_provider', boolean>,\n  MONDAY_TASKS: {\n    key: 'monday_tasks',\n    defaultValue: false,\n  } as FeatureFlag<'monday_tasks', boolean>,\n  TAKE_SCREENSHOT_WHEN_CREATING_THREAD: {\n    key: 'take_screenshot_when_creating_thread',\n    defaultValue: false,\n  } as FeatureFlag<'take_screenshot_when_creating_thread', boolean>,\n  TAKE_SCREENSHOT_WHEN_SENDING_MESSAGE: {\n    key: 'take_screenshot_when_sending_message',\n    defaultValue: false,\n  } as FeatureFlag<'take_screenshot_when_sending_message', boolean>,\n  OPEN_THREAD_SAME_PAGE: {\n    key: 'open_thread_same_page',\n    defaultValue: false,\n  } as FeatureFlag<'open_thread_same_page', boolean>,\n  SHOW_ACTIVATION_WELCOME_MESSAGE_NUX: {\n    key: 'show_activation_welcome_message_nux',\n    defaultValue: false,\n  } as FeatureFlag<'show_activation_welcome_message_nux', boolean>,\n  ENABLE_SLACK_FEATURES: {\n    key: 'enable-slack-features',\n    defaultValue: true,\n  } as FeatureFlag<'enable-slack-features', boolean>,\n  ENABLE_DEV_CONSOLE_SELF_SERVE: {\n    key: 'enable-dev-console-self-serve',\n    defaultValue: false,\n  } as FeatureFlag<'enable-dev-console-self-serve', boolean>,\n  // TODO: remove - no longer used\n  THREAD_STYLING_TWEAKS: {\n    key: 'thread_styling_tweaks',\n    defaultValue: false,\n  } as FeatureFlag<'thread_styling_tweaks', boolean>,\n  REMOVE_TASKS_FEATURE: {\n    key: 'remove_tasks_feature',\n    defaultValue: false,\n  } as FeatureFlag<'remove_tasks_feature', boolean>,\n  SHOW_COMMUNITY_IN_CONSOLE: {\n    key: 'show-community-in-console',\n    defaultValue: true,\n  } as FeatureFlag<'show-community-in-console', boolean>,\n  SHOW_CUSTOMER_ISSUES_IN_CONSOLE: {\n    key: 'show-customer-issues-in-console',\n    defaultValue: false,\n  } as FeatureFlag<'show-customer-issues-in-console', boolean>,\n  TAKE_SCREENSHOT_OF_CANVAS_ONLY: {\n    key: 'take_screenshot_of_canvas_only',\n    defaultValue: false,\n  } as FeatureFlag<'take_screenshot_of_canvas_only', boolean>,\n  SHOW_EVENTS_TAB_IN_CONSOLE: {\n    key: 'show_events_tab_in_console',\n    defaultValue: true,\n  } as FeatureFlag<'show_events_tab_in_console', boolean>,\n  ENABLE_TEXT_ANNOTATIONS: {\n    key: 'enable_text_annotations',\n    defaultValue: true,\n  } as FeatureFlag<'enable_text_annotations', boolean>,\n  ENABLE_EMAIL_NOTIFICATIONS: {\n    key: 'enable_email_notifications',\n    defaultValue: true,\n  } as FeatureFlag<'enable_email_notifications', boolean>,\n  ENABLE_ANNOTATIONS_OVERLAY: {\n    key: 'enable_annotations_overlay',\n    defaultValue: true,\n  } as FeatureFlag<'enable_annotations_overlay', boolean>,\n  ENABLE_SENTRY: {\n    key: 'enable_sentry',\n    defaultValue: true,\n  } as FeatureFlag<'enable_sentry', boolean>,\n  CONSOLE_WEBINAR_BANNER: {\n    key: 'console_webinar_banner',\n    defaultValue: {},\n  } as FeatureFlag<'console_webinar_banner', object>,\n  ENABLE_VIDEO_CAPABILITIES: {\n    key: 'enable_video_capabilities',\n    defaultValue: false,\n  } as FeatureFlag<'enable_video_capabilities', boolean>,\n  SHOW_LINK_PREVIEWS: {\n    key: 'show-link-previews',\n    defaultValue: true,\n  } as FeatureFlag<'show-link-previews', boolean>,\n  BILLING_ENABLED_IN_CONSOLE: {\n    key: 'billing_enabled_in_console',\n    defaultValue: true,\n  } as FeatureFlag<'billing_enabled_in_console', boolean>,\n  MENTION_NOTIFICATION_EMAIL_TEMPLATE_ID: {\n    key: 'mention_notification_email_template_id',\n    defaultValue: 'd-6309e6ccb36a4a769957795f475c8130',\n  } as FeatureFlag<\n    'mention_notification_email_template_id',\n    | 'd-6309e6ccb36a4a769957795f475c8130'\n    | 'd-8f2246c657a8498394e9caf181816bc3'\n    | 'd-8a8088e59eed4622b2d09078de372fe8'\n    | 'd-bc3669c391774addb7da37f92a3f97e3'\n  >,\n  SHOW_CONSOLE_LANDING_PAGE: {\n    key: 'show_console_landing_page',\n    defaultValue: false,\n  },\n} as const;\n\n// The generic type that makes this all work.  The first type parameter is\n// always set to a single string, and it makes it possible to do type inference\n// on the useFeatureFlag() call and figure out what the return value is.\nexport type FeatureFlag<K, T> = {\n  key: K;\n  defaultValue: T;\n};\n\n// The map of feature flag keys to the default value for that flag.  We have to\n// use `as any` in the assignment because TypeScript will only infer that the\n// return type is {[key: string]: union_of_all_flag_value_types} rather than\n// associating the right type with the right key.\nconst defaults: {\n  [P in keyof typeof FeatureFlags as (typeof FeatureFlags)[P]['key']]: (typeof FeatureFlags)[P]['defaultValue'];\n} = Object.fromEntries(\n  Object.entries(FeatureFlags).map(([_, v]) => [v.key, v.defaultValue]),\n) as any;\n\n/**\n * Returns an object that maps from feature flag keys to their default value.\n */\nexport function featureFlagDefaults() {\n  return defaults;\n}\n", "import * as sgMail from '@sendgrid/mail';\nimport * as jwt from 'jsonwebtoken';\nimport type { UUID } from 'common/types/index.ts';\nimport { LogLevel } from 'common/types/index.ts';\nimport env from 'server/src/config/Env.ts';\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\nimport type { ThreadDetails } from 'server/src/util/email.ts';\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\nimport { getReplyToEmailAddress } from 'server/src/email/utils.ts';\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\nimport type { RequestContext } from 'server/src/RequestContext.ts';\nimport { DEFAULT_EMAIL_LOGO_WIDTH } from 'common/const/Sizes.ts';\nimport {\n  AUTH0_CUSTOM_LOGIN_DOMAIN,\n  CONSOLE_ORIGIN,\n} from 'common/const/Urls.ts';\nimport { AUTH0_CLIENT_ID } from 'common/const/Ids.ts';\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\n\nsgMail.default.setApiKey(env.SENDGRID_API_KEY);\nexport const DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID =\n  'd-6309e6ccb36a4a769957795f475c8130';\nexport const MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID =\n  'd-8a8088e59eed4622b2d09078de372fe8';\nexport const DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID =\n  'd-fecc876acf684ff2bca887748d86e4e1';\nexport const SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID =\n  'd-b70dc2c71ee541ee9e0c5f4cd84b32e3';\nexport const DEFAULT_THREAD_RESOLVE_TEMPLATE_ID =\n  'd-93aa618e7d0b4ba593c346f9a1f664c5';\nexport const THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID =\n  'd-37c14e17cc9649afb70495f029b3833d';\nconst SEND_CONSOLE_USER_INVITE_TEMPLATE_ID =\n  'd-ab157e4f588c4a30b6304e4e062b5f88';\nconst ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID =\n  'd-1bbf5f1a7a2948529de051d44eb873c9';\nconst ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID =\n  'd-48ea1b657a2a4f9b95c9f81d38425306';\nconst REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID =\n  'd-bfe0627042f345f8b7877e6a97815359';\n\ntype UnsubscribeThreadTokenData = {\n  threadID: UUID;\n  userID: UUID;\n  orgID: UUID;\n  appID: UUID | null;\n};\n\nexport type ActionIcon = 'mention' | 'task' | 'paperclip';\n\nexport const encodeUnsubscribeThreadToken = (\n  data: UnsubscribeThreadTokenData,\n) => jwt.sign(data, env.EMAIL_LINKS_TOKEN_SECRET, { algorithm: 'HS512' });\n\nexport const decodeUnsubscribeThreadToken = (token: string) =>\n  jwt.verify(token, env.EMAIL_LINKS_TOKEN_SECRET, {\n    algorithms: ['HS512'],\n  }) as UnsubscribeThreadTokenData;\n\nexport type SendActionEmailNotificationData = {\n  context: RequestContext;\n  recipientEmail: string;\n  actionText: string;\n  actionIconType: ActionIcon;\n  pageName: string;\n  pageURL: string;\n  providerName: string | undefined;\n  unsubscribeURL: string;\n  partnerDetails: CustomEmailTemplate | undefined;\n  threadDetails: ThreadDetails;\n  emailNotification: EmailOutboundNotificationEntity;\n  /** You can edit templates in SendGrid */\n  templateId: string;\n  notificationType: NotificationType;\n};\n/*\n  Common function used to send thread-action and reply notifications.\n  They are similar in that they both notify of an action eg resolving\n  /unresolving a thread or a reply or @mention message.\n  */\nexport async function sendActionEmailNotification({\n  context,\n  recipientEmail,\n  actionText,\n  actionIconType,\n  pageName,\n  pageURL,\n  providerName,\n  unsubscribeURL,\n  partnerDetails,\n  threadDetails,\n  emailNotification,\n  /** You can edit templates in SendGrid */\n  templateId,\n  notificationType,\n}: SendActionEmailNotificationData) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const {\n    firstMessageDetails,\n    firstMessageUserDetails,\n    previousMessageDetails,\n    previousMessageUserDetails,\n    currentMessageDetails,\n    currentMessageUserDetails,\n    messagesCountLeft,\n  } = threadDetails;\n\n  const threadingHeaders = await getThreadingHeaders(emailNotification);\n\n  // See https://stackoverflow.com/questions/1027395/detecting-outlook-autoreply-out-of-office-emails#comment64988838_25324691\n  // Request that MS Exchange does not send automated replies (like Out of Office)\n  // back to this email\n  const noAutoResponseHeader = { 'X-Auto-Response-Suppress': 'OOF' };\n\n  const unsubscribeHeaders = {\n    'List-Unsubscribe': `<${unsubscribeURL}>`,\n    'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n  };\n\n  let eventType = '';\n  let emailType = '';\n  if (notificationType === 'reply') {\n    eventType = 'email-mention-notification-sent-v2';\n    emailType = 'mention v2';\n  } else if (notificationType === 'thread_action') {\n    eventType = 'email-thread-action-notification-sent';\n    emailType = 'thread action';\n  }\n\n  const mailData = {\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    replyTo: getReplyToEmailAddress(\n      context.logger,\n      partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\n      emailNotification.id,\n    ),\n    templateId,\n    headers: {\n      ...threadingHeaders,\n      ...noAutoResponseHeader,\n      ...unsubscribeHeaders,\n    },\n    dynamicTemplateData: {\n      Action: actionText,\n      Action_Icon: actionIconType,\n      Page_Name: pageName,\n      Page_URL: pageURL,\n      Tool_Name: providerName,\n      First_Message_Details: firstMessageDetails,\n      First_Message_User_Details: firstMessageUserDetails,\n      Previous_Message_Details: previousMessageDetails,\n      Previous_Message_User_Details: previousMessageUserDetails,\n      Current_Message_Details: currentMessageDetails,\n      Current_Message_User_Details: currentMessageUserDetails,\n      Messages_Count_Left: messagesCountLeft,\n      Preview_Text: currentMessageDetails.message_preview,\n      Unsubscribe_URL: unsubscribeURL,\n      Partner_Name: partnerDetails?.partnerName,\n      Partner_Image_URL: partnerDetails?.imageURL,\n      Add_Explainer: false,\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\n      Image_Width:\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\n    },\n  };\n  return await sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(`Sent ${emailType} email to ${recipientEmail}`);\n      logServerEvent({\n        session: context.session,\n        type: eventType,\n        logLevel: LogLevel.DEBUG,\n        payload: { from: mailData.from, to: mailData.to },\n      });\n\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(\n        `Failed sending ${emailType} email to ${recipientEmail}`,\n        {\n          error: error.response.body.errors,\n          from_address: mailData.from,\n          to_address: mailData.to,\n        },\n      );\n      return false;\n    });\n}\n\n// the EmailEmail repetition is intentional\nexport function sendShareThreadToEmailEmail(\n  context: RequestContext,\n  recipientEmail: string,\n  pageName: string,\n  pageURL: string,\n  partnerDetails: CustomEmailTemplate | undefined,\n  threadDetails: ThreadDetails,\n  emailNotification: EmailOutboundNotificationEntity | null,\n  templateID: string,\n) {\n  if (process.env.IS_TEST) {\n    return true;\n  }\n\n  const {\n    senderName,\n    firstMessageDetails,\n    firstMessageUserDetails,\n    previousMessageDetails,\n    previousMessageUserDetails,\n    currentMessageDetails,\n    currentMessageUserDetails,\n    messagesCountLeft,\n  } = threadDetails;\n\n  const mailData = {\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    replyTo: emailNotification\n      ? getReplyToEmailAddress(\n          context.logger,\n          partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\n          emailNotification.id,\n        )\n      : partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\n    templateId: templateID,\n    dynamicTemplateData: {\n      Page_Name: pageName,\n      Page_URL: pageURL,\n      Sender_Name: senderName,\n      First_Message_Details: firstMessageDetails,\n      First_Message_User_Details: firstMessageUserDetails,\n      Previous_Message_Details: previousMessageDetails,\n      Previous_Message_User_Details: previousMessageUserDetails,\n      Current_Message_Details: currentMessageDetails,\n      Current_Message_User_Details: currentMessageUserDetails,\n      Messages_Count_Left: messagesCountLeft,\n      Preview_Text: currentMessageDetails.message_preview,\n      Partner_Name: partnerDetails?.partnerName,\n      Partner_Image_URL: partnerDetails?.imageURL,\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\n      Image_Width:\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\n    },\n  };\n  return sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(`Sent shareThreadToEmail email to ${recipientEmail}`);\n      logServerEvent({\n        session: context.session,\n        type: 'email-share-thread-to-email-sent',\n        logLevel: LogLevel.DEBUG,\n        payload: { from: mailData.from, to: mailData.to },\n      });\n\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(\n        `Failed sending shareThreadToEmail email to ${recipientEmail}`,\n        {\n          error: error.response.body.errors,\n        },\n      );\n      return false;\n    });\n}\n\ntype ThreadingHeaders =\n  | {\n      'Message-ID': string;\n    }\n  | {\n      'Message-ID': string;\n      'In-Reply-To': string;\n      References: string;\n    };\n// Returns the email headers Message-ID, In-Reply-To and References to enable\n// threading of emails (in the email client) for the same Cord thread.\n// We also use these headers when handling inbound replies in SendGridWebhookHandler\n// if the notificationID is not in the 'to' address.\nasync function getThreadingHeaders(\n  emailNotification: EmailOutboundNotificationEntity,\n): Promise<ThreadingHeaders> {\n  const isFirstEmail =\n    (await EmailOutboundNotificationEntity.count({\n      where: {\n        email: emailNotification.email,\n        threadID: emailNotification.threadID,\n      },\n    })) === 1;\n\n  if (isFirstEmail) {\n    return {\n      'Message-ID': `<thread-${emailNotification.threadID}@cord.fyi>`,\n    };\n  } else {\n    return {\n      'Message-ID': `<notif-${emailNotification.id}@cord.fyi>`,\n      'In-Reply-To': `<thread-${emailNotification.threadID}@cord.fyi>`,\n      References: `<thread-${emailNotification.threadID}@cord.fyi>`,\n    };\n  }\n}\n\nexport async function sendEmailInviteConsoleUser(\n  context: RequestContext,\n  recipientEmail: string,\n  inviterName: string,\n  customerID: UUID,\n) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const customer = await CustomerEntity.findByPk(customerID);\n\n  if (!customer) {\n    throw new Error('No customer, no customer invite!');\n  }\n\n  const inviteLink = encodeURI(\n    `https://${AUTH0_CUSTOM_LOGIN_DOMAIN}/authorize?` +\n      'response_type=code&' +\n      `client_id=${AUTH0_CLIENT_ID}&` +\n      `redirect_uri=${CONSOLE_ORIGIN}/login&` +\n      'scope=openid email profile&' +\n      'screen_hint=signup&' +\n      `login_hint=${recipientEmail}`,\n  );\n\n  const mailData = {\n    from: 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    templateId: SEND_CONSOLE_USER_INVITE_TEMPLATE_ID,\n    dynamicTemplateData: {\n      Invite_Link: inviteLink,\n      Inviter: inviterName,\n      Customer_Name: customer.name,\n    },\n  };\n  return await sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(\n        `Sent email to invite ${recipientEmail} to cord console`,\n      );\n      logServerEvent({\n        session: context.session,\n        type: 'email-invite-console-user',\n        logLevel: LogLevel.DEBUG,\n        payload: { from: mailData.from, to: mailData.to },\n      });\n\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\n        error: error.response.body.errors,\n        from_address: mailData.from,\n        to_address: mailData.to,\n      });\n      return false;\n    });\n}\n\nexport async function sendAccessGrantedEmailToConsoleUser(\n  context: RequestContext,\n  recipientEmail: string,\n  customer: CustomerEntity,\n) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const mailData = {\n    from: 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    templateId: ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID,\n    dynamicTemplateData: {\n      Console_Link: `${CONSOLE_ORIGIN}/login`,\n      Customer_Name: customer.name,\n    },\n  };\n  return await sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(\n        `Sent email to ${recipientEmail} to notify access granted to customer in cord console`,\n      );\n      logServerEvent({\n        session: context.session,\n        type: 'email-granted-access-console-user',\n        logLevel: LogLevel.DEBUG,\n        payload: {\n          from: mailData.from,\n          to: mailData.to,\n          customerID: customer.id,\n        },\n      });\n\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\n        error: error.response.body.errors,\n        from_address: mailData.from,\n        to_address: mailData.to,\n      });\n      return false;\n    });\n}\n\nexport async function sendAccessDeniedEmailToConsoleUser(\n  context: RequestContext,\n  recipientEmail: string,\n  customer: CustomerEntity,\n) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const mailData = {\n    from: 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    templateId: ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID,\n    dynamicTemplateData: {\n      Console_Link: `${CONSOLE_ORIGIN}/login?newcustomer=true`,\n      Customer_Name: customer.name,\n    },\n  };\n\n  return await sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(\n        `Sent email to ${recipientEmail} to notify access denied to customer in cord console`,\n      );\n      logServerEvent({\n        session: context.session,\n        type: 'email-denied-access-console-user',\n        logLevel: LogLevel.DEBUG,\n        payload: {\n          from: mailData.from,\n          to: mailData.to,\n          customerID: customer.id,\n        },\n      });\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\n        error: error.response.body.errors,\n        from_address: mailData.from,\n        to_address: mailData.to,\n      });\n      return false;\n    });\n}\n\n/**\n * Used for when a console user requests access to an existing customer\n */\nasync function sendRequestAccessEmailToConsoleUser(\n  context: RequestContext,\n  recipientEmail: string,\n  requesterEmail: string,\n  customerName: string,\n  customerID: UUID,\n) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const mailData = {\n    from: 'Cord <cord@cord.fyi>',\n    to: recipientEmail,\n    templateId: REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID,\n    dynamicTemplateData: {\n      Sender_Email: requesterEmail,\n      Customer_Name: customerName,\n      View_Access_Requests_Link: `${CONSOLE_ORIGIN}/usermanagement`,\n    },\n  };\n\n  return await sgMail.default\n    .send(mailData)\n    .then(() => {\n      context.logger.info(\n        `Sent request access email to ${recipientEmail} to cord console`,\n      );\n      logServerEvent({\n        session: context.session,\n        type: 'email-request-access-customer',\n        logLevel: LogLevel.DEBUG,\n        payload: { from: mailData.from, to: mailData.to, customerID },\n      });\n\n      return true;\n    })\n    .catch((error) => {\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\n        error: error.response.body.errors,\n        from_address: mailData.from,\n        to_address: mailData.to,\n      });\n      return false;\n    });\n}\n\nexport async function sendAccessRequestToCustomerConsoleUsers(\n  context: RequestContext,\n  requesterEmail: string,\n  customerID: UUID,\n) {\n  if (process.env.IS_TEST) {\n    return;\n  }\n\n  const customer = await CustomerEntity.findByPk(customerID);\n\n  if (!customer) {\n    throw new Error('No customer, no customer invite!');\n  }\n  const approvedCustomerConsoleUsers =\n    await context.loaders.consoleUserLoader.loadConsoleUsersForCustomer(\n      customerID,\n    );\n\n  if (approvedCustomerConsoleUsers.length === 0) {\n    throw new Error('No console users in this customer');\n  }\n\n  return await Promise.all(\n    approvedCustomerConsoleUsers.map((consoleUser) =>\n      sendRequestAccessEmailToConsoleUser(\n        context,\n        consoleUser.email,\n        requesterEmail,\n        customer.name,\n        customer.id,\n      ),\n    ),\n  );\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'email_notifications',\n  timestamps: false,\n})\nexport class EmailOutboundNotificationEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  threadOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  email!: string;\n}\n", "import addrs from 'email-addresses';\nimport isUUID from 'validator/lib/isUUID.js';\nimport replyParser from 'node-email-reply-parser';\nimport type { MessageContent, UUID } from 'common/types/index.ts';\nimport { MessageNodeType } from 'common/types/index.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\nimport type { Logger } from 'server/src/logging/Logger.ts';\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\n\n// Parses an email address such as \"sponge@bob.com\" or\n// \"Sponge Bob <sponge@bob.com>\"\nexport function parseEmailAddress(emailAddress: string): addrs.ParsedMailbox {\n  const parsedAddress = addrs\n    .parseAddressList(emailAddress)\n    ?.find((email): email is addrs.ParsedMailbox => email.type === 'mailbox');\n  if (parsedAddress === undefined) {\n    throw new Error(`failed to parse email address: ${emailAddress}`);\n  }\n  return parsedAddress;\n}\n\n/**\n * Takes a sender email address and a notification ID, and returns a reply-to\n * email address such that replies to that address will be appended to the\n * thread associated with the notification ID.\n */\nexport function getReplyToEmailAddress(\n  logger: Logger,\n  senderEmailAddress: string,\n  notificationId: UUID,\n): string {\n  try {\n    const parsedAddress = parseEmailAddress(senderEmailAddress);\n\n    // Applications can use a white-label (non-@cord.fyi) sender email. That's\n    // fine, but replies MUST come via cord.fyi; those emails get routed through\n    // SendGrid, who call a webhook (search this repo for\n    // SendGridWebhookHandler) so we can handle them and e.g. append reply\n    // contents to the appropriate thread.\n    const replyToAddress = `${parsedAddress.local}-${notificationId}@cord.fyi`;\n    if (parsedAddress.name) {\n      return `${parsedAddress.name} <${replyToAddress}>`;\n    }\n    return replyToAddress;\n  } catch (e) {\n    logger.logException('failed to parse email address', e);\n    return senderEmailAddress;\n  }\n}\n\n// If email name ends with \"-UUID\" then it returns that UUID\nexport function extractCordEmailUUID(emailAddress: string): UUID | null {\n  try {\n    const parsedAddress = parseEmailAddress(emailAddress);\n    const uuidLength = 36;\n    // check that the address ends with a dash \"-\" and then 36 UUID characters\n    if (\n      parsedAddress.local.length < 1 + uuidLength ||\n      parsedAddress.local.slice(-(1 + uuidLength))[0] !== '-'\n    ) {\n      return null;\n    }\n    const maybeUUID = parsedAddress.local.slice(-uuidLength);\n    return isUUID.default(maybeUUID) ? maybeUUID : null;\n  } catch (e) {\n    anonymousLogger().logException(\n      'failed to parse email address',\n      e,\n      {},\n      undefined,\n      'warn',\n    );\n    return null;\n  }\n}\n\nexport function emailTextToMessageContent(\n  emailText: string,\n  attachments: string,\n): MessageContent {\n  // Unlike Gmail, Mac Mail does not automatically add a standard email\n  // signature separator like '--' at the begining of a signature block\n  // so our library was not detecting it as such.\n  // As a result, we were sending the signature as part of the reply message.\n\n  // To overcome this, we break up the email content into fragments and\n  // disregard anything that comes after the quoted text reply.\n  // Unfortunately, this will still be an issue for users who add their\n  // signatures above the quoted text and have no signature separator.\n  const replyFragments = replyParser(emailText).getFragments();\n  let replyBeforeQuotedText = '';\n  for (const fragment of replyFragments) {\n    if (fragment.isQuoted()) {\n      break;\n    }\n    replyBeforeQuotedText += fragment.getContent();\n  }\n\n  let replyText = replyParser(replyBeforeQuotedText).getVisibleText({\n    // from the docs of replyParser:\n    // Using aggressive mode runs the risk of losing visible lines which are\n    // interspersed with quoted lines, but is useful when parsing e.g. emails\n    // from a 'reply by email' feature which contain a large block of quoted\n    // text.\n    aggressive: true,\n  });\n\n  if (Number(attachments) > 0) {\n    replyText = replyText + `\\n(Unable to display attached files)`;\n  }\n\n  return replyText\n    .split(/\\r?\\n/)\n    .filter((l) => l.length > 0)\n    .map((line) => ({\n      type: MessageNodeType.PARAGRAPH,\n      children: [{ text: line }],\n    }));\n}\n\nexport async function getNotification(\n  toAddress: string,\n  inReplyToHeader: string | undefined,\n  fromEmail: string,\n  logger: Logger,\n) {\n  const notificationID = extractCordEmailUUID(toAddress);\n  if (notificationID) {\n    return await EmailOutboundNotificationEntity.findOne({\n      where: { id: notificationID },\n    });\n  }\n\n  if (inReplyToHeader) {\n    // Some mail clients, like Hubspot, do not respect the Reply-To email header\n    // and send their reply to the From header, which does not contain our notification\n    // ID.  In that case, we can try and pull out the ID we set in the 'Message-ID'\n    // header, which will now be the 'In-Reply-To' header in the incoming email\n    // (see getThreadingHeaders fn: these are headers which are used to thread\n    // messages nicely in email clients). This will either be the notification ID\n    // or thread ID, depending on whether this was a first notification or not.\n    // With the combination of the thread ID and the email this message came from,\n    // we should be able to find the Notification.\n    logger.debug(\n      'Unable to find notificationId in toAddress, will try to find from inReplyTo header',\n      {\n        toAddress,\n        inReplyToHeader,\n        fromEmail,\n      },\n    );\n\n    const threadOrNotificationID = extractCordEmailUUID(inReplyToHeader);\n\n    // First see if the ID we found is a notification ID\n    if (threadOrNotificationID) {\n      const notification = await EmailOutboundNotificationEntity.findOne({\n        where: { id: threadOrNotificationID },\n      });\n      if (notification) {\n        return notification;\n      }\n    }\n\n    let parsedFromEmail;\n\n    try {\n      const email = parseEmailAddress(fromEmail);\n      parsedFromEmail = email.address;\n    } catch (e: any) {\n      logger.warn('Error parsing from email', e);\n    }\n\n    // If we're still here, it wasn't a notification ID (or the notification has\n    // disappeared for some reason).  Assume it's a thread ID:\n    if (threadOrNotificationID && parsedFromEmail) {\n      return await EmailOutboundNotificationEntity.findOne({\n        where: { threadID: threadOrNotificationID, email: parsedFromEmail },\n      });\n    }\n  }\n\n  return null;\n}\n\nfunction getHeader(key: string, input: string) {\n  const pattern = new RegExp(`^${key}: (.+)$`, 'gm');\n  const match = pattern.exec(input);\n\n  return match?.[1];\n}\n\nexport type RelevantHeaders =\n  | Record<'messageID' | 'inReplyTo' | 'autoSubmitted', string | undefined>\n  | undefined;\n\n// We could use the mailparser npm package to do this but it would also require\n// adding another library as middleware (https://github.com/nodemailer/mailparser/issues/253)\n// and it didn't seem worth it for grabbing a couple of strings\n// Add more headers you might expect to find if you need them!\nexport function parseRelevantHeaders(headersString: string): RelevantHeaders {\n  // This is a specific ID for this incoming email and would be something like:\n  // '<CACnco=B99bM4+YPHkUNqgPT8azMcYCROss2BdPgA7pAoqW8egw@mail.gmail.com>',\n  const messageID = getHeader('Message-Id', headersString);\n  // This should be the Message-ID we set on the original email notification, which\n  // contains the threadID. See getThreadingHeaders.\n  const inReplyTo = getHeader('In-Reply-To', headersString);\n  // This is a header that should be set if a reply is automated, e.g. an OOO\n  const autoSubmitted = getHeader('Auto-Submitted', headersString);\n\n  return { messageID, inReplyTo, autoSubmitted };\n}\n", "// General sizing\nconst XSMALL = 2;\nconst SMALL = 4;\nconst MEDIUM = 8;\nconst LARGE = 16;\nconst XLARGE = 24;\nconst XXLARGE = 32;\nconst XXXLARGE = 48;\n\nconst AVATAR_BORDER_WIDTH_PX = XSMALL;\n\nconst CHECKBOX_DEFAULT_SIZE_PX = LARGE;\nconst MAIN_CHAT_AVATAR_SIZE_PX = XLARGE + AVATAR_BORDER_WIDTH_PX * 2;\nconst MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX = MEDIUM;\n\nexport const Sizes = {\n  // Sidebar\n  SIDEBAR_COMPACT_WIDTH: 312, // used when viewport width is <= VIEWPORT_WIDTH_BREAKPOINT\n  SIDEBAR_NORMAL_WIDTH: 416, // used when viewport width is > VIEWPORT_WIDTH_BREAKPOINT\n  SIDEBAR_MAX_WIDTH: 500,\n  VIEWPORT_WIDTH_BREAKPOINT: 1440,\n\n  // Navigation top bar\n  NAVIGATION_ITEM_SPACING_COMPACT: 12,\n  NAVIGATION_ITEM_SPACING_NORMAL: LARGE,\n\n  // subtract MEDIUM here, add it to the sidebar App.tsx container paddingBottom, to allow shadows to be visible\n  SIDEBAR_BOTTOM_SPACE: 96 - MEDIUM,\n\n  // Text\n  X_SMALL_TEXT_SIZE_PX: 10,\n  SMALL_TEXT_SIZE_PX: 12,\n  DEFAULT_TEXT_SIZE_PX: 14,\n  LARGE_TEXT_SIZE_PX: 18,\n  X_LARGE_TEXT_SIZE_PX: 24,\n  SMALL_LINE_HEIGHT_PX: 16,\n  DEFAULT_LINE_HEIGHT_PX: 20,\n  LARGE_LINE_HEIGHT_PX: 24,\n  X_LARGE_LINE_HEIGHT_PX: 32,\n  BOLD_TEXT_WEIGHT: 700,\n  NORMAL_TEXT_WEIGHT: 400,\n\n  // Spacing\n  SMALL_PADDING_PX: 6,\n  DEFAULT_PADDING_PX: 12,\n\n  DEFAULT_BORDER_RADIUS: SMALL,\n  LARGE_BORDER_RADIUS: MEDIUM,\n  SMALL_BORDER_RADIUS: XSMALL,\n\n  // Icon\n  DEFAULT_ICON_PADDING_PX: 4,\n\n  // Profile pics\n  PAGE_VISITORS_AVATAR_SIZE_PX: XLARGE + AVATAR_BORDER_WIDTH_PX * 2,\n  MAIN_CHAT_AVATAR_SIZE_PX,\n  MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\n  MESSAGE_LEFT_PADDING:\n    MAIN_CHAT_AVATAR_SIZE_PX + MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\n  AVATAR_BORDER_WIDTH_PX,\n  FACEPILE_AVATAR_OVERLAP_SIZE_PX: SMALL,\n  NOTIFICATION_FACEPILE_SIZE: LARGE + AVATAR_BORDER_WIDTH_PX * 2,\n\n  // Composer\n  COMPOSER_ADD_BUTTON_HEIGHT_PX: XXLARGE,\n  COMPOSER_ADD_BUTTON_WIDTH_PX: XXLARGE,\n  COMPOSER_HORIZONTAL_PADDING: MEDIUM,\n  COMPOSER_VERTICAL_PADDING: 18,\n  MAX_COMPOSER_EDITOR_HEIGHT: 448,\n\n  // Messages\n  MESSAGE_BLOCK_BOTTOM_MARGIN: XLARGE,\n  MESSAGE_BOTTOM_MARGIN: MEDIUM * 1.5,\n  MESSAGE_CONTENTS_TOP_MARGIN: 5,\n  MESSAGE_PARAGRAPH_TOP_MARGIN: MEDIUM,\n  MESSAGE_REACTIONS_TOP_MARGIN: SMALL,\n  MESSAGE_REACTIONS_BOTTOM_MARGIN: -MEDIUM,\n  MESSAGE_SEEN_BY_BOTTOM_MARGIN: MEDIUM,\n  MESSAGE_REACTIONS_FACEPILE_OVERLAP: 6,\n  MESSAGE_PAST_REACTION_HEIGHT: LARGE,\n  MESSAGE_ANNOTATION_HEIGHT_PX: 40,\n  MESSAGES_KEBAB_MENU_WIDTH_PX: 196,\n  MESSAGE_HEIGHT_TRUNCATE_AT_PX: 300,\n  MESSAGE_HEIGHT_TRUNCATE_TO_PX: 200,\n  INFINITE_SCROLL_THRESHOLD_PX: 400,\n  MESSAGE_ATTACHMENT_PLACEHOLDER_HEIGHT_PX: 92,\n  // 277 is the height of kebab menu for your own message, with one line of 'seen by'\n  // We set the minHeight of the share to slack menu to this\n  MIN_KEBAB_SLACK_MENU_HEIGHT: 277,\n  // Distance between kebab menu and kebab menu icon\n  KEBAB_MENU_OFFSET: SMALL,\n\n  // Bullets / numbered / todo lists\n  BULLET_PADDING_LEFT: CHECKBOX_DEFAULT_SIZE_PX + MEDIUM,\n\n  // Todo - feed this into the menu itself (prob via more dynamic svg)\n  MESSAGE_MENU_HEIGHT: 32,\n\n  // Tooltip\n  TOOLTIP_HORIZONTAL_PADDING_PX: MEDIUM,\n  TOOLTIP_VERTICAL_PADDING_PX: SMALL,\n  TOOLTIP_LINE_HEIGHT_PX: LARGE,\n  TOOLTIP_MAX_WIDTH_PX: 180,\n  ANNOTATION_TOOLTIP_MAX_WIDTH_PX: 180,\n\n  // Attachments\n  ATTACHMENT_THUMBNAIL_PX: 58,\n  PDF_ATTACHMENT_PX: 90,\n\n  // Modal\n  MODAL_SELECT_CHANNELS_MAX_HEIGHT_PX: 240,\n\n  // ImageModal\n  IMAGE_MODAL_SMALL_SCALE: 0.66,\n  IMAGE_MODAL_BUTTON_HEIGHT_SCALE_PX: 40,\n  IMAGE_MODAL_MENU_MAX_WIDTH_PX: 180,\n  IMAGE_MODAL_MENU_TOP_POSITION_PX: 44,\n\n  // Success Popup\n  SUCCESS_POPUP_HEIGHT: 36,\n\n  // Annotation pointer\n  ANNOTATION_POINTER_MIN_GAP_VS_SCREEN_EDGE: MEDIUM,\n  ANNOTATION_POINTER_SMALL_SIZE_PX: 34, // 32 + 1 for border on each side, which is included in the svg\n\n  // Annotation arrow\n  ANNOTATION_ARROW_CIRCLE_RADIUS: 4,\n  ANNOTATION_ARROW_HORIZONTAL_MARGIN_FOR_TOOLTIP: XXLARGE,\n\n  // Charts in webpage\n  MIN_CHART_SIZE_PX: 50,\n  MAX_CHART_CONTAINER_SIZE_RATIO: 1.25,\n\n  // Login\n  LOGIN_BUTTON_WIDTH_PX: 354,\n  LOGIN_BUTTON_HEIGHT_PX: 56,\n  LOGIN_MARGIN_PX: 56,\n  LOGIN_BUTTON_TEXT_SIZE_PX: 18,\n  LOGIN_TITLE_TEXT_SIZE_PX: 36,\n  EMAIL_PROMPT_HEIGHT_PX: 128,\n  EMAIL_PROMPT_INPUT_VERTICAL_PADDING_PX: 14,\n\n  // Welcome\n  WELCOME_PARAGRAPH_MAX_WIDTH_PX: 400,\n  WELCOME_VIDEO_MAX_HEIGHT_PX: 300,\n  WELCOME_VIDEO_MAX_WIDTH_PX: 600,\n\n  // Workspace\n  WORKSPACE_HORIZONTAL_MARGIN_PX: 56,\n  WORKSPACE_VERTICAL_GAP_PX: 40,\n  WORKSPACE_VERTICAL_GAP_SMALL_PX: 32,\n  WORKSPACE_SMALL_PADDING_PX: 12,\n  WORKSPACE_XSMALL_PADDING_PX: 6,\n  WORKSPACE_PARAGRAPH_MAX_WIDTH_PX: 480,\n  WORKSPACE_WIDTH_PX: 576,\n  WORKSPACE_LOGIN_WIDTH_PX: 640,\n  WORKSPACE_LOGIN_BUTTON_HEIGHT_PX: 48,\n  WORKSPACE_LOGIN_ORG_IMAGE_SIZE_PX: XXXLARGE,\n  WORKSPACE_GET_STARTED_STEP_MAX_WIDTH_PX: 290,\n  WORKSPACE_GET_STARTED_STEP_MIN_WIDTH_PX: 230,\n  RECENTLY_SHARED_MIN_WIDTH_PX: 120,\n  RECENTLY_SHARED_MAX_WIDTH_PX: 240,\n  UPDATES_MAX_WIDTH_PX: 320,\n\n  // Extension popup\n  EXTENSION_POPUP_WIDTH: 360,\n  EXTENSION_POPUP_HEIGHT: 540,\n  EXTENSION_POPUP_START_CONVERSATION_BUTTON_HEIGHT: 60,\n\n  SPINNER_DEFAULT_HEIGHT_PX: 20,\n  SPINNER_LARGE_HEIGHT_PX: 40,\n  CHECKBOX_DEFAULT_SIZE_PX,\n\n  DEFAULT_ICON_SIZE: 24,\n  SMALL_ICON_SIZE: 16,\n  X_SMALL_ICON_SIZE: 12,\n\n  DEFAULT_BORDER_WIDTH: 1,\n\n  COLLAPSED_THREAD_MESSAGE_HEIGHT: 44,\n  ADD_THREAD_BUTTONS_HEIGHT: 60,\n  GAP_BETWEEN_THREADS: XLARGE,\n  GAP_BETWEEN_GROUPED_THREADS: MEDIUM,\n  LOAD_OLDER_MESSAGES_BUTTON_HEIGHT: 33,\n\n  THREAD_MESSAGE_PADDING: MEDIUM,\n\n  SCREENSHOT_BLUR_PX: 10,\n\n  //Screen Size for Embed\n\n  MINIMUM_SCREEN_WIDTH: 600,\n  MINIMUM_SCREEN_HEIGHT: 600,\n\n  // Puppet Auth\n  PUPPET_MODAL_TOP_MARGIN: 60,\n  PUPPET_MODAL_TOP_PADDING: 36,\n  PUPPET_MODAL_PADDING: 40,\n  PUPPET_MODAL_VERTICAL_PADDING_BUTTON: 10,\n  PUPPET_MODAL_VERTICAL_PADDING_TEXT_FIELD: 10,\n\n  // Launcher / Close sidebar button\n  LAUNCHER_ICON_HEIGHT: 60,\n  LAUNCHER_ICON_WIDTH: 60,\n  CLOSE_SIDEBAR_ICON_HEIGHT: 60,\n  CLOSE_SIDEBAR_ICON_WIDTH: 60,\n  LAUNCHER_FIXED_RIGHT_LENGTH: 16,\n  LAUNCHER_FIXED_BOTTOM_LENGTH: 16,\n\n  XSMALL,\n  SMALL,\n  MEDIUM,\n  LARGE,\n  XLARGE,\n  XXLARGE,\n  XXXLARGE,\n};\n\nexport type FontSize =\n  | 'xSmall'\n  | 'small'\n  | 'default'\n  | 'large'\n  | 'xLarge'\n  | 'inherit';\nexport const FontSizes: {\n  [fontSize in FontSize]: number | string;\n} = {\n  xSmall: Sizes.X_SMALL_TEXT_SIZE_PX,\n  small: Sizes.SMALL_TEXT_SIZE_PX,\n  default: Sizes.DEFAULT_TEXT_SIZE_PX,\n  large: Sizes.LARGE_TEXT_SIZE_PX,\n  xLarge: Sizes.X_LARGE_TEXT_SIZE_PX,\n  inherit: 'inherit',\n};\n\nexport const LineHeights: { [fontSize in FontSize]: string } = {\n  xSmall: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\n  small: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\n  default: `${Sizes.DEFAULT_LINE_HEIGHT_PX}px`,\n  large: `${Sizes.LARGE_LINE_HEIGHT_PX}px`,\n  xLarge: `${Sizes.X_LARGE_LINE_HEIGHT_PX}px`,\n  inherit: 'inherit',\n};\n\nexport const MESSAGE_BLOCK_AVATAR_SIZE = 'l';\n\nexport const DEFAULT_EMAIL_LOGO_WIDTH = '140';\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type { CreationOptional } from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type {\n  CustomerImplementationStage,\n  CustomerType,\n  UUID,\n} from 'common/types/index.ts';\n\nexport type Addons = { [key: string]: string | number | boolean };\nexport type BillingType = 'stripe' | 'manual';\nexport type PricingTier = 'free' | 'pro' | 'scale';\n@Table({\n  tableName: 'customers',\n  timestamps: false,\n})\nexport class CustomerEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  sharedSecret!: string;\n\n  @Column({\n    type: DataTypes.ENUM('verified', 'sample'),\n    defaultValue: 'verified',\n    allowNull: false,\n  })\n  type!: CustomerType;\n\n  @Column({\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\n    get() {\n      const addons = this.getDataValue('addons');\n      return addons['custom_s3_bucket'] ?? false;\n    },\n  })\n  enableCustomS3Bucket!: boolean;\n\n  @Column({\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\n    get() {\n      const addons = this.getDataValue('addons');\n      return addons['custom_segment_write_key'] ?? false;\n    },\n  })\n  enableCustomSegmentWriteKey!: boolean;\n\n  @Column({\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\n    get() {\n      const addons = this.getDataValue('addons');\n      return addons['customer_support'] ?? false;\n    },\n  })\n  enableCustomerSupport!: boolean;\n\n  @Column({\n    type: DataTypes.ENUM(\n      'launched',\n      'implementing',\n      'proof_of_concept',\n      'inactive',\n    ),\n    allowNull: false,\n    defaultValue: 'proof_of_concept',\n  })\n  implementationStage!: CustomerImplementationStage;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: true,\n  })\n  launchDate!: Date | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: true,\n  })\n  slackChannel!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: true,\n  })\n  signupCoupon!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: true,\n  })\n  stripeCustomerID!: CreationOptional<string | null>;\n\n  @Column({\n    type: DataTypes.ENUM('free', 'pro', 'scale'),\n    allowNull: true,\n    defaultValue: 'free',\n  })\n  pricingTier!: CreationOptional<PricingTier>;\n\n  @Column({\n    type: DataTypes.ENUM('active', 'inactive'),\n    allowNull: true,\n    defaultValue: 'inactive',\n  })\n  billingStatus!: CreationOptional<string>;\n\n  @Column({\n    type: DataTypes.ENUM('stripe', 'manual'),\n    allowNull: true,\n    defaultValue: null,\n  })\n  billingType!: CreationOptional<BillingType | null>;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  addons!: CreationOptional<Addons>;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: true,\n  })\n  renewalDate!: CreationOptional<Date | null>;\n\n  @Column({\n    type: DataTypes.ARRAY(DataTypes.TEXT),\n    defaultValue: [],\n    allowNull: false,\n  })\n  planDescription!: CreationOptional<string[]>;\n}\n", "import { format } from 'winston';\nimport stringify from 'fast-json-stable-stringify';\n\nconst MESSAGE = Symbol.for('message');\n\n// This defines our custom log format for logging to the console.\n// It looks like `<LOGLEVEL> <TIMESTAMP>: <MESSAGE>[ <META>]`\n// where LOGLEVEL is a single capital letter (`EWIHVDS` for error, warn,\n// info, http, verbose, debug, silly) and META is a JSON object with\n// additional fields, such as `process` (`server`), `version` (taken from\n// package.json) etc.\n\nexport const flatFormat = format((info) => {\n  const { level, timestamp, message, splat: _, ...meta } = info;\n\n  let stringifiedMeta: string;\n  try {\n    stringifiedMeta = stringify(meta);\n  } catch (err) {\n    stringifiedMeta = `! stringify exception: ${err}`;\n  }\n\n  const formattedMessage = `${level\n    .substr(0, 1)\n    .toUpperCase()} ${timestamp}: ${message} ${stringifiedMeta}`;\n\n  (info as any)[MESSAGE] = formattedMessage;\n  return info;\n});\n", "{\n  \"name\": \"radical\",\n  \"version\": \"1.1093.0\",\n  \"description\": \"The monorepo for Radical\",\n  \"main\": \"index.js\",\n  \"repository\": \"ssh://radical@vault.phacility.com/source/monorepo.git\",\n  \"author\": \"jack@getradical.co\",\n  \"license\": \"NONE\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\n    \"migrate\": \"sequelize-cli db:migrate\",\n    \"migrate-down\": \"sequelize-cli db:migrate:undo\",\n    \"build\": \"npm run tsc-once && ./build/index.mjs --mode=production --clean\",\n    \"build-demo-apps\": \"demo-apps/build-demo-apps.sh\",\n    \"build-sample-apps\": \"npm run build-demo-apps\",\n    \"check-database-schema\": \"./build/index.mjs --mode=development --target=scripts/check-database-schema.ts && ./dist/scripts/check-database-schema.js --check\",\n    \"codegen\": \"node ./build/index.mjs --mode=development --target=scripts/generate-graphql-types.ts && node ./dist/scripts/generate-graphql-types.js && node ./scripts/generate-dayjs.mjs > opensource/sdk-js/packages/react/common/dayjs.ts\",\n    \"docs-codegen\": \"./scripts/docs-codegen.sh\",\n    \"local-dev\": \"./ops/local-dev.sh\",\n    \"watch\": \"./build/index.mjs --mode=development --clean && (./build/index.mjs --mode=development --watch --skipInitialBuild & npm run start-external-dev & npm run start-local-s3 & nodemon --config nodemon-server.json & nodemon --config nodemon-docs-server.json & npm run tsc)\",\n    \"watch-external\": \"./build/index.mjs --mode=development --watch --target=external\",\n    \"watch-server\": \"./build/index.mjs --mode=development --watch --target=server\",\n    \"db-ssh-tunnel\": \"lsof -i '@localhost:15432' >/dev/null || ssh -f -N -L 15432:database-prod-read.int.cord.com:5432 zero\",\n    \"db-ssh-tunnel-write\": \"lsof -i '@localhost:25432' >/dev/null || ssh -f -N -L 25432:database-prod.int.cord.com:5432 zero\",\n    \"start-external-dev\": \"http-server ./dist/external -c-1 -a :: --silent --port 8179\",\n    \"start-local-s3\": \"cat ./localhost/localhost.key ./localhost/localhost.crt > ./localhost/localhost.packed && cd ops && docker-compose up localstack\",\n    \"start-postgres\": \". ./.env && export POSTGRES_USER POSTGRES_DB POSTGRES_PORT POSTGRES_PASSWORD && cd ops && docker-compose up postgres\",\n    \"start-redis\": \"cd ops && docker-compose up redis\",\n    \"start-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/server/index.js\",\n    \"start-server-dev-snapshots\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps --heapsnapshot-signal=SIGUSR2 ./dist/server/index.js\",\n    \"start-server-prod\": \"node -r dotenv/config dist/generic/server/index.js\",\n    \"start-asyncWorker-dev\": \"node -r dotenv/config --enable-source-maps ./dist/asyncWorker/asyncWorker.js\",\n    \"start-asyncWorker-prod\": \"node -r dotenv/config dist/generic/asyncWorker/asyncWorker.js\",\n    \"start-docs-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/docs/server/index.js\",\n    \"start-docs-server-prod\": \"node -r dotenv/config dist/generic/docs/server/index.js\",\n    \"tsc\": \"tsc --incremental false --noEmit --skipLibCheck --watch --preserveWatchOutput\",\n    \"tsc-once\": \"tsc --incremental false --noEmit --skipLibCheck\",\n    \"wipe-postgres\": \"cd ops && POSTGRES_USER= POSTGRES_DB= POSTGRES_PASSWORD= docker-compose down --volumes\",\n    \"install\": \"find node_modules/@sentry/ -type f -print0 | grep -z -E '\\\\.(js|js\\\\.map|d\\\\.ts)$' | if sed --version >/dev/null 2>&1 ; then xargs -0 sed --in-place 's/\\\\b__SENTRY__\\\\b/_CORDSNTRY/g;'; else xargs -0 sed -i '' -E 's/[[:<:]]__SENTRY__[[:>:]]/_CORDSNTRY/g;'; fi\",\n    \"postinstall\": \"patch-package\",\n    \"repl\": \"./build/index.mjs --mode=development --target=repl && node ./dist/repl/index.js\",\n    \"generate-docs-embeddings\": \"./build/index.mjs --mode=development --target=scripts/docs-generate-search-data.ts && ./dist/scripts/docs-generate-search-data.js\",\n    \"extract-demo-apps-to-sandpack-object\": \"./build/index.mjs --mode=development --target=scripts/extract-demo-apps-to-sandpack-file-object.ts && ./dist/scripts/extract-demo-apps-to-sandpack-file-object.js\",\n    \"prepare\": \"[ \\\"$(git config core.hooksPath)\\\" = \\\".githooks\\\" ] && git config --unset core.hooksPath ; ln -s ../../.githooks/prepare-commit-msg .git/hooks/ > /dev/null 2>&1 || true\"\n  },\n  \"jest\": {\n    \"extensionsToTreatAsEsm\": [\n      \".ts\",\n      \".tsx\",\n      \".graphql\"\n    ],\n    \"transform\": {\n      \"^.+\\\\.(tsx?$)|(js$)|(graphql$)\": \"<rootDir>/jest/transformer.mjs\"\n    },\n    \"resolver\": \"<rootDir>/jest/resolver.cjs\",\n    \"moduleDirectories\": [\n      \"<rootDir>\",\n      \"node_modules\"\n    ],\n    \"setupFiles\": [\n      \"<rootDir>/jest/setup-jest-env.js\"\n    ],\n    \"testPathIgnorePatterns\": [\n      \"/node_modules/\",\n      \"<rootDir>/dist/\",\n      \"<rootDir>/screenshotsDiff\",\n      \"<rootDir>/opensource/\"\n    ],\n    \"transformIgnorePatterns\": [\n      \"/node_modules/\"\n    ]\n  },\n  \"workspaces\": [\n    \"opensource/sdk-js/packages/*\"\n  ],\n  \"dependencies\": {\n    \"@apollo/client\": \"~3.10.4\",\n    \"@auth0/auth0-react\": \"^1.8.0\",\n    \"@aws-sdk/client-auto-scaling\": \"^3.363.0\",\n    \"@aws-sdk/client-cloudfront\": \"^3.363.0\",\n    \"@aws-sdk/client-cloudwatch-logs\": \"^3.363.0\",\n    \"@aws-sdk/client-ec2\": \"^3.363.0\",\n    \"@aws-sdk/client-ecr\": \"^3.363.0\",\n    \"@aws-sdk/client-elastic-load-balancing-v2\": \"^3.363.0\",\n    \"@aws-sdk/client-iam\": \"^3.363.0\",\n    \"@aws-sdk/client-s3\": \"^3.363.0\",\n    \"@aws-sdk/client-secrets-manager\": \"^3.363.0\",\n    \"@aws-sdk/credential-provider-node\": \"^3.363.0\",\n    \"@codesandbox/sandpack-react\": \"^2.6.9\",\n    \"@emotion/react\": \"^11.11.1\",\n    \"@emotion/server\": \"^11.10.0\",\n    \"@emotion/styled\": \"^11.11.0\",\n    \"@floating-ui/react-dom\": \"^1.3.0\",\n    \"@giphy/js-fetch-api\": \"^5.4.0\",\n    \"@giphy/react-components\": \"^9.4.1\",\n    \"@graphql-tools/schema\": \"^8.5.0\",\n    \"@graphql-tools/utils\": \"^8.13.1\",\n    \"@heroicons/react\": \"^2.0.18\",\n    \"@launchdarkly/node-server-sdk\": \"^8.2.4\",\n    \"@leeoniya/ufuzzy\": \"^0.7.0\",\n    \"@material-ui/core\": \"^4.12.4\",\n    \"@material-ui/styles\": \"^4.11.5\",\n    \"@mui/material\": \"^5.13.7\",\n    \"@phosphor-icons/react\": \"^2.0.15\",\n    \"@pyroscope/nodejs\": \"^0.3.11\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-select\": \"^2.0.0\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"@radix-ui/react-tooltip\": \"^1.0.7\",\n    \"@segment/analytics-node\": \"^2.0.0\",\n    \"@sendgrid/mail\": \"^8.1.0\",\n    \"@sentry/browser\": \"^7.57.0\",\n    \"@sentry/node\": \"^7.59.3\",\n    \"@sentry/react\": \"^7.57.0\",\n    \"@sentry/tracing\": \"^7.59.3\",\n    \"@sentry/types\": \"^7.59.3\",\n    \"@slack/events-api\": \"^3.0.1\",\n    \"@slack/web-api\": \"6.11.1\",\n    \"@slack/webhook\": \"^7.0.2\",\n    \"@tanstack/react-query\": \"^4.32.6\",\n    \"@tanstack/react-virtual\": \"^3.5.0\",\n    \"@types/blueimp-md5\": \"^2.7.0\",\n    \"@types/emoji-js\": \"^3.5.2\",\n    \"@types/jsdom\": \"^16.2.5\",\n    \"@types/parse5\": \"^7.0.0\",\n    \"@types/ua-parser-js\": \"^0.7.36\",\n    \"@types/valid-data-url\": \"^2.0.0\",\n    \"@types/wcag-contrast\": \"^3.0.0\",\n    \"ajv\": \"^8.11.0\",\n    \"ajv-formats\": \"^2.1.1\",\n    \"apollo-server-core\": \"^3.12.1\",\n    \"apollo-server-express\": \"^3.12.1\",\n    \"at-least-node\": \"^1.0.0\",\n    \"auth0\": \"^3.7.2\",\n    \"axios\": \"^1.6.8\",\n    \"backo2\": \"^1.0.2\",\n    \"bluebird\": \"^3.7.2\",\n    \"blueimp-md5\": \"^2.18.0\",\n    \"buffer\": \"^5.6.0\",\n    \"cheerio\": \"^1.0.0-rc.12\",\n    \"classnames\": \"^2.5.1\",\n    \"cookie\": \"^0.4.1\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"cors\": \"^2.8.5\",\n    \"dataloader\": \"^2.0.0\",\n    \"dayjs\": \"^1.11.11\",\n    \"dockerode\": \"^3.3.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"email-addresses\": \"^5.0.0\",\n    \"emoji-js\": \"^3.8.0\",\n    \"emoji-picker-element\": \"^1.16.0\",\n    \"express\": \"^4.19.2\",\n    \"express-basic-auth\": \"^1.2.0\",\n    \"fast-json-stable-stringify\": \"^2.1.0\",\n    \"form-data\": \"^3.0.1\",\n    \"framer-motion\": \"^6.5.1\",\n    \"free-email-domains\": \"^1.2.4\",\n    \"graphql\": \"^15.8.0\",\n    \"graphql-iso-date\": \"^3.6.1\",\n    \"graphql-redis-subscriptions\": \"^2.5.0\",\n    \"graphql-subscriptions\": \"^2.0.0\",\n    \"graphql-tag\": \"^2.12.6\",\n    \"graphql-type-json\": \"^0.3.2\",\n    \"graphql-type-uuid\": \"^0.2.0\",\n    \"handlebars\": \"^4.7.7\",\n    \"highcharts\": \"^10.2.1\",\n    \"highcharts-react-official\": \"^3.1.0\",\n    \"html-entities\": \"^2.1.0\",\n    \"i18next\": \"^23.8.2\",\n    \"ioredis\": \"^5.2.2\",\n    \"ipaddr.js\": \"^2.2.0\",\n    \"is-hotkey\": \"^0.2.0\",\n    \"iterall\": \"^1.3.0\",\n    \"jose\": \"^4.15.5\",\n    \"jotai\": \"^2.6.3\",\n    \"js-base64\": \"^3.7.7\",\n    \"jsdom\": \"^24.0.0\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"jss\": \"^10.9.0\",\n    \"jwks-rsa\": \"^2.0.5\",\n    \"jwt-encode\": \"^1.0.1\",\n    \"linkify-react\": \"^4.1.3\",\n    \"linkifyjs\": \"^4.1.3\",\n    \"markdown-to-jsx\": \"^7.4.0\",\n    \"multer\": \"^1.4.4-lts.1\",\n    \"nanoid\": \"^3.3.6\",\n    \"neat-csv\": \"^7.0.0\",\n    \"node-cache\": \"^5.1.2\",\n    \"node-email-reply-parser\": \"^0.1.4\",\n    \"node-fetch\": \"^3.3.2\",\n    \"oauth\": \"^0.9.15\",\n    \"open\": \"^8.4.2\",\n    \"openai\": \"^4.22.0\",\n    \"parse5\": \"^7.1.2\",\n    \"patch-package\": \"^6.5.1\",\n    \"pg\": \"^8.11.5\",\n    \"pg-boss\": \"^8.4.2\",\n    \"pg-copy-streams\": \"^5.1.1\",\n    \"prom-client\": \"^15.1.2\",\n    \"query-string\": \"^7.1.3\",\n    \"querystring\": \"^0.2.0\",\n    \"radash\": \"^11.0.0\",\n    \"react\": \"^18.2.0\",\n    \"react-bootstrap\": \"^1.6.6\",\n    \"react-country-region-selector\": \"^3.6.1\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-helmet\": \"^6.1.0\",\n    \"react-i18next\": \"^13.2.2\",\n    \"react-jss\": \"^10.9.0\",\n    \"react-markdown\": \"^8.0.5\",\n    \"react-popper\": \"^2.3.0\",\n    \"react-router-dom\": \"^6.8.2\",\n    \"react-sticky-box\": \"^2.0.5\",\n    \"react-syntax-highlighter\": \"^15.5.0\",\n    \"react-window\": \"^1.8.10\",\n    \"redlock\": \"^v5.0.0-beta.2\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"response-time\": \"^2.3.2\",\n    \"sequelize\": \"^6.37.0\",\n    \"sequelize-cli\": \"^6.6.1\",\n    \"sequelize-typescript\": \"^2.1.6\",\n    \"serialize-error\": \"^11.0.3\",\n    \"sha.js\": \"^2.4.11\",\n    \"sharp\": \"^0.32.6\",\n    \"slack-markdown\": \"0.1.1\",\n    \"slate\": \"^0.100.0\",\n    \"slate-history\": \"^0.100.0\",\n    \"slate-hyperscript\": \"^0.100.0\",\n    \"slate-react\": \"^0.100.1\",\n    \"stripe\": \"^15.4.0\",\n    \"subscriptions-transport-ws\": \"^0.9.19\",\n    \"supertest\": \"^6.1.6\",\n    \"typed-emitter\": \"^1.3.1\",\n    \"ua-parser-js\": \"^1.0.33\",\n    \"url\": \"^0.11.0\",\n    \"url-pattern\": \"^1.0.3\",\n    \"use-sync-external-store\": \"^1.2.0\",\n    \"uuid\": \"^8.3.2\",\n    \"valid-data-url\": \"^3.0.0\",\n    \"validator\": \"^13.7.0\",\n    \"wcag-contrast\": \"^3.0.0\",\n    \"winston\": \"^3.7.2\",\n    \"winston-cloudwatch\": \"^6.2.0\",\n    \"winston-transport\": \"^4.5.0\",\n    \"ws\": \"^7.5.3\"\n  },\n  \"devDependencies\": {\n    \"@cspell/eslint-plugin\": \"^6.31.1\",\n    \"@luckycatfactory/esbuild-graphql-loader\": \"^3.7.0\",\n    \"@microsoft/tsdoc\": \"^0.14.2\",\n    \"@sentry/cli\": \"^2.10.0\",\n    \"@types/analytics-node\": \"^3.1.5\",\n    \"@types/auth0\": \"^3.3.3\",\n    \"@types/backo2\": \"^1.0.1\",\n    \"@types/bluebird\": \"^3.5.32\",\n    \"@types/chrome\": \"^0.0.112\",\n    \"@types/cookie\": \"^0.4.0\",\n    \"@types/cookie-parser\": \"^1.4.3\",\n    \"@types/dockerode\": \"^3.2.6\",\n    \"@types/express\": \"^4.17.14\",\n    \"@types/jest\": \"^29.5.3\",\n    \"@types/jscodeshift\": \"^0.11.6\",\n    \"@types/jsonwebtoken\": \"^8.5.9\",\n    \"@types/multer\": \"^1.4.7\",\n    \"@types/node\": \"^14.18.54\",\n    \"@types/oauth\": \"^0.9.1\",\n    \"@types/pg\": \"^8.11.5\",\n    \"@types/pg-copy-streams\": \"^1.2.1\",\n    \"@types/query-string\": \"^6.3.0\",\n    \"@types/react\": \"^18.2.25\",\n    \"@types/react-dom\": \"^18.2.18\",\n    \"@types/react-helmet\": \"^6.1.6\",\n    \"@types/react-syntax-highlighter\": \"^15.5.6\",\n    \"@types/react-window\": \"^1.8.8\",\n    \"@types/response-time\": \"^2.3.5\",\n    \"@types/sha.js\": \"^2.4.0\",\n    \"@types/supertest\": \"^2.0.11\",\n    \"@types/uuid\": \"^8.3.4\",\n    \"@types/validator\": \"^13.7.3\",\n    \"@types/ws\": \"^7.2.5\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.5.0\",\n    \"@typescript-eslint/parser\": \"^7.5.0\",\n    \"@vanilla-extract/css\": \"^1.15.2\",\n    \"@vanilla-extract/esbuild-plugin\": \"^2.2.2\",\n    \"chokidar\": \"^3.5.3\",\n    \"csstype\": \"^3.1.3\",\n    \"esbuild\": \"^0.21.3\",\n    \"esbuild-plugin-svgr\": \"0.0.1\",\n    \"eslint\": \"^8.31.0\",\n    \"eslint-config-prettier\": \"^8.6.0\",\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\n    \"eslint-plugin-cypress\": \"^2.12.1\",\n    \"eslint-plugin-i18next\": \"^6.0.3\",\n    \"eslint-plugin-import\": \"^2.28.1\",\n    \"eslint-plugin-jest\": \"^27.9.0\",\n    \"eslint-plugin-no-lookahead-lookbehind-regexp\": \"^0.1.0\",\n    \"eslint-plugin-no-relative-import-paths\": \"^v1.5.2\",\n    \"eslint-plugin-prettier\": \"^5.0.1\",\n    \"eslint-plugin-react\": \"^7.32.2\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"fake-indexeddb\": \"^3.1.7\",\n    \"glob\": \"^10.3.10\",\n    \"http-server\": \"^14.0.0\",\n    \"ioredis-mock\": \"^7.4.0\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.6.1\",\n    \"jscodeshift\": \"^0.14.0\",\n    \"lint-staged\": \"12.3.5\",\n    \"nodemon\": \"^3.0.1\",\n    \"pg-formatter\": \"^1.2.0\",\n    \"prettier\": \"^3.0.3\",\n    \"schema-dts\": \"^1.1.2\",\n    \"ts-prune\": \"latest\",\n    \"typescript\": \"~5.1.6\",\n    \"yargs\": \"^17.7.2\"\n  },\n  \"overrides\": {\n    \"@auth0/auth0-react\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\"\n    },\n    \"@material-ui/core\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\",\n      \"@types/react\": \"^18.2.18\",\n      \"@types/react-dom\": \"^18.0.11\"\n    },\n    \"@material-ui/styles\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\",\n      \"@types/react\": \"^18.2.18\"\n    },\n    \"@sentry/cli\": {\n      \"strip-ansi\": \"^7.0.1\"\n    },\n    \"@slack/events-api\": {\n      \"debug\": \"^3.1.0\"\n    },\n    \"apollo-server-express\": {\n      \"debug\": \"^3.1.0\"\n    },\n    \"eslint-plugin-import\": {\n      \"debug\": \"^3.1.0\"\n    },\n    \"graphql-iso-date\": {\n      \"graphql\": \"$graphql\"\n    },\n    \"graphql-postgres-subscriptions\": {\n      \"graphql\": \"$graphql\"\n    },\n    \"postgres-date\": \"2.1.0\"\n  }\n}\n", "import * as http from 'http';\nimport * as https from 'https';\nimport * as path from 'path';\nimport * as url from 'url';\nimport { promises as fsPromises } from 'fs';\nimport * as prom from 'prom-client';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\n\nimport type { ListenPort } from 'server/src/util/port.ts';\nimport { getHostPortion } from 'server/src/util/port.ts';\n\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\n// appropriate string (e.g. 'server' or 'asyncWorker')\ndeclare const BUILDCONSTANTS: { loggingProcessName: string };\n\n// Prometheus is an open source monitoring framework. The way it works is that\n// a central Prometheus server periodically (by default once a minute) connects\n// to the processes it is set up to monitor and obtains their metrics\n// measurements. Prometheus stores these time series of data, and typically\n// another open source product, Grafana, is used for visualising this data,\n// building dashboards etc.\n//\n// The kind of metrics that get collected include counters (\"How many requests\n// of type X have we had?\", which will be displayed as a graph showing\n// X-requests per second), and histograms e.g. for execution speed (\"How many\n// requests of type X have had that got processed faster than Y seconds?\",\n// which will be displayed as a graph showing the mean, median or p90\n// processing time over the day).\n//\n// So, for Prometheus to be able to show us metrics about our server, our\n// server has to collect those metrics and expose them so that the Prometheus\n// server can scrape them periodically. That is what this file does.\n//\n// The Prometheus client library (prom-client) does all of the hard work here,\n// of pre-aggregating the metrics in the format that the Prometheus server\n// expects. In this file, we just define a few helper functions that make it\n// even easier to define metrics and instrument the code to collect them.\n//\n// One important thing to understand is that the Prometheus client does not\n// store a list of all individual events, but aggregates data immediately. So,\n// e.g., when we instrument our code to keep track of how long certain GraphQL\n// operations take, the Prometheus client won't store the execution time of\n// each individual request, but rather increments a counter for a certain time\n// range. So the information that an individual request took 15ms is lost, and\n// instead the counter for \"events between 10 and 20ms\" is incremented. This\n// makes the collection of metrics very lightweight, and we do not have to\n// worry about the overhead it introduces. On the other hand we, of course,\n// don't have precise data for every single event anymore, but in practice, if\n// there are hundreds or thousands of such events, the bucketed data works just\n// as well.\n\nconst register = new prom.Registry();\nif (process.env.CORD_WORKER_NAME) {\n  // Remove any punctuation characters that might cause issues for prometheus\n  const sanitizedWorkerName = process.env.CORD_WORKER_NAME.replace(\n    /[^A-Za-z0-9 _-]/g,\n    '',\n  );\n  register.setDefaultLabels({ worker: sanitizedWorkerName });\n}\nprom.AggregatorRegistry.setRegistries([register]);\nprom.collectDefaultMetrics({\n  register,\n  prefix: `${BUILDCONSTANTS.loggingProcessName}_`,\n});\n\n// Helper functions to easily create metrics. They are bound to the Prometheus\n// register whose metrics we expose here. These function also provide some\n// reasonable defaults, e.g. the bucket boundaries for histograms.\nexport const Counter = (configuration: prom.CounterConfiguration<string>) =>\n  new prom.Counter({ registers: [register], ...configuration });\nexport const Gauge = (configuration: prom.GaugeConfiguration<string>) =>\n  new prom.Gauge({ registers: [register], ...configuration });\nexport const TimeHistogram = (\n  configuration: prom.HistogramConfiguration<string>,\n) =>\n  new prom.Histogram({\n    registers: [register],\n    buckets: logBuckets(0.001, 10, 13),\n    ...configuration,\n  });\nexport function logBuckets(min: number, max: number, buckets: number) {\n  // This function creates bucket boundaries for histograms that are\n  // logarithmically equidistant.\n  // E.g. logBuckets(0.001, 10, 5) -> [ 0.001, 0.01, 0.1, 1, 10 ].\n  // If you increase bucket number from 5 to 9, then you get one additional\n  // bucket boundary in the middle between each of those 5 in the example.\n  // ([0.001, x*0.001, 0.01, x*0.01, 0.1, x*0.1, 1, x*1, 10] with x approx 3.16)\n  const logMin = Math.log10(min);\n  const logMax = Math.log10(max);\n  const step = (logMax - logMin) / (buckets - 1);\n  return [...Array(buckets).keys()].map((i) => min * 10 ** (i * step));\n  // The default setting for histograms we use above in the `Histogram` helper\n  // uses logBuckets(0.001, 10, 13), which covers the range from 1ms to 10s\n  // and has the nice property that each bucket's upper limit is roughly\n  // twice that of the previous bucket, and three buckets cover exactly a\n  // factor of 10. In other words, the upper boundaries of the histogram\n  // buckets are:\n  // [ 0.001, 0.00215, 0.00464,\n  //   0.01,  0.0215,  0.0464,\n  //   0.1,   0.215,   0.464,\n  //   1,     2.15,    4.64,\n  //  10 ]\n  // Anything faster than 1ms is counted in the first bucket, anything faster\n  // in than 10s is counted in the last bucket, and anything slower than 10s\n  // is counted as \"slower than 10s\" (Prometheus automatically adds one more\n  // bucket with +Infinity as the upper limit.)\n  //\n  // * Why those limits? 0.001 and 10?\n  // For example, our GraphQL operations (at the time of writing this)\n  // typically are in the tenths or hundreds of milliseconds. The limits here\n  // are chosen to cover that area well with some margin at both sides. More\n  // generally: anything that's faster than a millisecond is so fast that we\n  // don't need to worry about it, whereas anything near 10s is so slow that\n  // it's effectively broken. So the range from 1ms to 10s is chosen to be\n  // sure that we capture the relevant region. If we have a problem and, for\n  // example, the execution time of some operation creeps up, than we still\n  // capture that development until the execution time becomes longer than 10s,\n  // but hopefully we would have spotted a problem before that happens.\n  //\n  // * Why 13 buckets?\n  // 13 happens to be one of the numbers where we will have buckets lining up\n  // with powers of 10, which is nice. Having more buckets means that we have\n  // more precise information in our histograms, but it adds to the memory\n  // overhead. 13 should be good enough to get a good idea what's going on.\n  //\n  // * Why \"logarithmically equidistant\"?\n  // Since we use these histograms for measuring the timing of many different\n  // kinds of processes, this is a good one-fits-all solution. If you knew\n  // that you want to measure times in the range of, say, 10 to 20ms, than\n  // you would probably just have a linear series of bucket boundaries (10,\n  // 11, 12, ..., 20). However, to have a reasonably good resultion for\n  // processes that take around 10ms and at the same time for those that take\n  // around 100 or 1000ms, it's better to have a constant factor between\n  // bucket boundaries. Here, the upper end of a bucket is at 2.15 times the\n  // lower end, and that way we nicely spread out just 13 buckets on the wide\n  // range from 1ms to 10s.\n}\n\nexport function incCounterWithAppID<T extends string>(\n  viewer: Viewer,\n  counter: prom.Counter<T>,\n  labels: prom.LabelValues<T> = {},\n  value = 1,\n): void {\n  counter.inc(\n    { appID: viewer.platformApplicationID || 'null', ...labels },\n    value,\n  );\n}\n\n// Ideally would be instantiated within the cluster-mode-only handler below, but\n// having it out here means that even workers do it, working around this issue:\n// https://github.com/siimon/prom-client/pull/449#issuecomment-922504343\nconst aggregatorRegistry = new prom.AggregatorRegistry();\n\nexport async function metricsMain(port: ListenPort, clusterMode: boolean) {\n  const app = clusterMode\n    ? (_req: http.IncomingMessage, res: http.ServerResponse) => {\n        res.setHeader('Content-type', aggregatorRegistry.contentType);\n        aggregatorRegistry.clusterMetrics().then(\n          (metrics) => res.end(metrics),\n          (err) => {\n            anonymousLogger().logException(\n              'aggregatorRegistry.clusterMetrics() threw an exception',\n              err,\n              undefined,\n              undefined,\n              'warn',\n            );\n            res.statusCode = 500;\n            res.end(`${err.message}`);\n          },\n        );\n      }\n    : (_req: http.IncomingMessage, res: http.ServerResponse) => {\n        res.setHeader('Content-type', register.contentType);\n        register.metrics().then(\n          (metrics) => res.end(metrics),\n          (err) => {\n            anonymousLogger().logException(\n              'register.metrics() threw an exception',\n              err,\n              undefined,\n              undefined,\n              'warn',\n            );\n            res.statusCode = 500;\n            res.end(`${err.message}`);\n          },\n        );\n      };\n\n  const server =\n    process.env.NODE_ENV === 'development' && !process.env.IS_TEST\n      ? https.createServer(\n          {\n            key: await fsPromises.readFile(\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\n                '/localhost.key',\n            ),\n            cert: await fsPromises.readFile(\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\n                '/localhost.crt',\n            ),\n          },\n          app,\n        )\n      : http.createServer(app);\n\n  // Start our server\n  return await new Promise<void>((resolve, reject) => {\n    server.addListener('error', reject);\n    server.listen(port, () => {\n      server.removeListener('error', reject);\n      resolve();\n      const host = getHostPortion(server.address());\n      anonymousLogger().info(\n        `\uD83D\uDE80 Serving Prometheus metrics at https://${host}/`,\n      );\n    });\n  });\n}\n", "import { JwksClient } from 'jwks-rsa';\n\nimport type { UUID } from 'common/types/index.ts';\nimport env from 'server/src/config/Env.ts';\nimport type { GACookieType } from 'server/src/util/google-analytics.ts';\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\n\nexport const SERVICE_USER_ID = 'service_user';\n\nexport enum AuthProviderType {\n  SLACK = 'slack',\n  PLATFORM = 'platform',\n}\n\nexport const jwksClient = new JwksClient({\n  jwksUri: `https://${env.AUTH0_CUSTOM_LOGIN_DOMAIN}/.well-known/jwks.json`,\n});\n\n// There is a surprising (and growing) amount of stuff that we'll want to store\n// as part of the user session. It makes sense to write this to a DB on the server\n// and to use a very small payload for network round trips (i.e. just the key to\n// the hash table value). This idea is the basis of the 'datr' cookie within\n// Facebook.\nexport interface Session {\n  viewer: Viewer;\n  isAdmin?: boolean;\n  console?: ConsoleSession;\n  utmParameters?: { [key: string]: string | string[] | undefined };\n  ga?: GACookieType;\n}\n\ninterface ConsoleSession {\n  email_verified: boolean;\n}\n\nexport interface Auth0Token {\n  iss: string;\n  sub: string;\n  'https://console.cord.com/email': string;\n  'https://console.cord.com/email_verified': boolean;\n  auth0UserID: string;\n  aud: string | string[];\n}\n\nexport function createAnonymousSession() {\n  return {\n    viewer: Viewer.createAnonymousViewer(),\n  };\n}\n\nexport class Viewer {\n  private constructor(\n    public readonly userID: UUID | undefined,\n    public readonly orgID: UUID | undefined,\n    public readonly platformApplicationID?: UUID,\n    public readonly externalUserID?: string,\n    public readonly externalOrgID?: string,\n    public readonly developerUserID?: string,\n    public readonly originalOrgID?: UUID,\n    public readonly relevantOrgIDs?: UUID[],\n  ) {\n    if (orgID !== undefined && relevantOrgIDs !== undefined) {\n      // Note that a constructed Viewer can have both of these fields set at the\n      // same time -- we do that in the third case below for backwards-compat.\n      // But you can't specify the creation of a Viewer with both of these, to\n      // try to force new code to \"do the right thing\".\n      if (relevantOrgIDs.length !== 1 || relevantOrgIDs[0] !== orgID) {\n        throw new Error(\n          'You specified both a single orgID and relevantOrgIDs. ' +\n            'You should pass undefined for the orgID to catch places not using relevantOrgIDs. Be bold!',\n        );\n      }\n    } else if (orgID !== undefined) {\n      this.relevantOrgIDs = [orgID];\n    }\n  }\n\n  static async createLoggedInPlatformViewer({\n    user,\n    org,\n  }: {\n    user: UserEntity;\n    org: OrgEntity | null;\n  }): Promise<Viewer> {\n    if (!user.platformApplicationID) {\n      throw new Error('Platform viewer must have platformApplicationID');\n    }\n\n    const relevantOrgIDs = org\n      ? undefined\n      : // OrgMembersLoader.loadAllImmediateOrgIDsForUser but we can't call that since we\n        // don't have a viewer yet!\n        (\n          await OrgMembersEntity.findAll({\n            where: {\n              userID: user.id,\n            },\n          })\n        ).map((e) => e.orgID);\n\n    return new Viewer(\n      user.id,\n      org?.id,\n      user.platformApplicationID,\n      user.externalID,\n      org?.externalID,\n      undefined,\n      undefined,\n      relevantOrgIDs,\n    );\n  }\n\n  static createLoggedInViewer(userID: UUID, orgID: UUID): Viewer {\n    return new Viewer(userID, orgID);\n  }\n\n  static createOrgViewer(orgID: UUID, platformApplicationID?: UUID): Viewer {\n    return new Viewer(undefined, orgID, platformApplicationID);\n  }\n\n  static createServiceViewer() {\n    return new Viewer(SERVICE_USER_ID, undefined);\n  }\n\n  static createAnonymousViewer() {\n    return new Viewer(undefined, undefined);\n  }\n\n  static createConsoleViewer(devUserID: string): Viewer {\n    return new Viewer(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      devUserID,\n    );\n  }\n\n  static createFromSerializedState(serializedViewer: Viewer): Viewer {\n    const {\n      userID,\n      orgID,\n      platformApplicationID,\n      externalUserID,\n      externalOrgID,\n      developerUserID,\n      originalOrgID,\n      relevantOrgIDs,\n      ...rest\n    } = serializedViewer;\n    const _: Record<string, never> = rest;\n\n    return new Viewer(\n      userID,\n      orgID,\n      platformApplicationID,\n      externalUserID,\n      externalOrgID,\n      developerUserID,\n      originalOrgID,\n      relevantOrgIDs,\n    );\n  }\n\n  /**\n   * Returns a version of this Viewer with the orgID set to the given org ID,\n   * used in situations where a user logged into one org wants to take an action\n   * as themselves in another org, such as sending a message from the unified\n   * inbox.  If the orgID given is the same as this Viewer's org ID, just\n   * returns this Viewer again.\n   */\n  public viewerInOtherOrg(\n    orgID: UUID | undefined,\n    externalOrgID: string | undefined,\n    relevantOrgIDs?: UUID[],\n  ): Viewer {\n    if (orgID === this.orgID && orgID !== undefined) {\n      return this;\n    }\n    if (orgID === undefined && relevantOrgIDs === undefined) {\n      throw new Error('viewerInOtherOrg provided with no orgs at all');\n    }\n    return new Viewer(\n      this.userID,\n      orgID,\n      this.platformApplicationID,\n      this.externalUserID,\n      externalOrgID,\n      this.developerUserID,\n      this.originalOrgID ?? this.orgID,\n      relevantOrgIDs,\n    );\n  }\n}\n\nexport const assertViewerHasIdentity = (\n  viewer: Viewer,\n): {\n  userID: UUID;\n  orgID: UUID;\n} => {\n  if (!viewer.userID || !viewer.orgID) {\n    throw new Error('Viewer must not be anonymous.');\n  }\n\n  return {\n    userID: viewer.userID,\n    orgID: viewer.orgID,\n  };\n};\n\nexport function assertViewerHasPlatformIdentity(viewer: Viewer): {\n  userID: UUID;\n  orgID: UUID;\n  externalUserID: string;\n  externalOrgID: string;\n  platformApplicationID: string;\n} {\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\n\n  if (\n    !viewer.externalUserID ||\n    !viewer.externalOrgID ||\n    !viewer.platformApplicationID\n  ) {\n    throw new Error('Viewer must be a platform viewer');\n  }\n\n  return {\n    userID,\n    orgID,\n    platformApplicationID: viewer.platformApplicationID,\n    externalUserID: viewer.externalUserID,\n    externalOrgID: viewer.externalOrgID,\n  };\n}\n\nexport function viewerHasIdentity(viewer: Viewer) {\n  return !!viewer.userID && !!viewer.orgID;\n}\n\nexport function assertViewerHasUser(viewer: Viewer): UUID {\n  const { userID } = viewer;\n\n  if (!userID) {\n    throw new Error('Viewer user must not be anonymous.');\n  }\n\n  return userID;\n}\n\nexport function assertViewerHasOrg(viewer: Viewer): UUID {\n  const { orgID } = viewer;\n\n  if (!orgID) {\n    throw new Error('Viewer org must not be anonymous.');\n  }\n\n  return orgID;\n}\n\n/**\n * Does basically the same thing as `assertViewerHasOrg`, except it throws a\n * client-facing error -- the idea being that you call this when it's *their*\n * error for not giving us a single org ID, instead of our internal logic error.\n * This also centralises all of the places we require a single org ID for\n * writes, so we can refactor/rethink/categorize/whatever them later.\n */\nexport function assertViewerHasSingleOrgForWrite(\n  viewer: Viewer,\n  error: string,\n): UUID {\n  const { orgID } = viewer;\n\n  // Specifically check for viewer.orgID, and not\n  // viewer.relevantOrgIDs.length === 1, so that we error in the case\n  // where they didn't give us an org but the user happens to only be in\n  // one -- to prevent sudden explosions when that user is added to\n  // another org, require that they always explicitly specify.\n  if (!orgID) {\n    throw new ClientFacingError(error);\n  }\n\n  return orgID;\n}\n\nexport function assertViewerHasOrgs(viewer: Viewer): UUID[] {\n  const { relevantOrgIDs } = viewer;\n\n  if (!relevantOrgIDs) {\n    throw new Error('Viewer orgs must be nonempty.');\n  }\n\n  return relevantOrgIDs;\n}\n\nexport function assertViewerHasPlatformUser(viewer: Viewer) {\n  const { userID, externalUserID, platformApplicationID } = viewer;\n\n  if (!userID || !externalUserID || !platformApplicationID) {\n    throw new Error('Viewer must have a platform user');\n  }\n\n  return { userID, externalUserID, platformApplicationID };\n}\n\nexport function assertViewerHasPlatformApplicationID(viewer: Viewer): UUID {\n  const { platformApplicationID } = viewer;\n\n  if (!platformApplicationID) {\n    throw new Error('Viewer must have a platform app ID');\n  }\n\n  return platformApplicationID;\n}\n\nexport function assertServiceViewer(viewer: Viewer) {\n  if (viewer.userID !== SERVICE_USER_ID) {\n    throw new Error('Viewer must be service user.');\n  }\n}\n\nexport function assertConsoleUser(viewer: Viewer) {\n  if (!viewer.developerUserID) {\n    throw new Error('User must have an email');\n  }\n\n  return { email: viewer.developerUserID };\n}\n\nexport function viewerIsUsingOrgsAsFilter(viewer: Viewer) {\n  // Right now, platform viewers are in one of two states:\n  //   - everything is org-less, in which case relevantOrgIDs is filled out and\n  //     orgID is undefined\n  //   - we have an org, either via the token or an explicit `filter`, which\n  //     sets orgID and sets relevantOrgIDs to [orgID]\n  // This code looks for the second case. This is a bit of a hack -- it is going\n  // to break as soon as we allow multiple org IDs as a filter (which will have\n  // to stuff them into relevantOrgIDs), but at least there's one codepath to\n  // update when we build that, through here.\n  return viewer.orgID !== undefined;\n}\n", "import type { JsonObject } from 'common/types/index.ts';\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\n\n// Extending Error type solution taken from here:\n// https://stackoverflow.com/questions/41102060/typescript-extending-error-class\nexport class CordError extends Error {\n  constructor(\n    message?: string,\n    public loggingMetadata?: JsonObject,\n    public loggingTags?: LoggingTags,\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'org_members',\n  timestamps: false,\n})\nexport class OrgMembersEntity extends Model<\n  InferAttributes<OrgMembersEntity>,\n  InferCreationAttributes<OrgMembersEntity>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: true,\n  })\n  platformApplicationID!: UUID | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  createdTimestamp!: CreationOptional<Date>;\n}\n", "import DataLoader from 'dataloader';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\nimport type { UUID } from 'common/types/index.ts';\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\n\nexport class S3BucketLoader {\n  viewer: Viewer;\n  dataloader: DataLoader<UUID, S3BucketEntity | null>;\n\n  constructor(viewer: Viewer) {\n    this.viewer = viewer;\n    this.dataloader = new DataLoader(\n      async (keys) => {\n        const buckets = await S3BucketEntity.findAll({\n          where: {\n            id: keys as UUID[],\n          },\n        });\n\n        return inKeyOrder(buckets, keys);\n      },\n      { cache: false },\n    );\n  }\n\n  async load(id: UUID) {\n    try {\n      return await this.dataloader.load(id);\n    } catch (e) {\n      anonymousLogger().logException('S3Bucket dataloader error', e);\n      return null;\n    }\n  }\n\n  async loadAll() {\n    return await S3BucketEntity.findAll();\n  }\n\n  async loadForApplication(\n    application: ApplicationEntity,\n  ): Promise<S3BucketEntity | null> {\n    if (application.customS3Bucket) {\n      return await this.load(application.customS3Bucket);\n    } else {\n      return null;\n    }\n  }\n}\n", "import * as crypto from 'crypto';\nimport { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport env from 'server/src/config/Env.ts';\nimport type { UUID } from 'common/types/index.ts';\nimport type { S3BucketConfigWithCredentials } from 'server/src/files/upload.ts';\n\n@Table({\n  tableName: 's3_buckets',\n  timestamps: false,\n})\nexport class S3BucketEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  region!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  accessKeyID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  accessKeySecret!: string; // encrypted\n\n  public getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(): S3BucketConfigWithCredentials {\n    const [encrypted, authTag, iv] = this.accessKeySecret.split(':');\n\n    const decipher = crypto.createDecipheriv(\n      'aes-256-gcm',\n      env.PLATFORM_SECRETS_ENCRYPTION_KEY,\n      Buffer.from(iv, 'hex'),\n    );\n\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final();\n\n    return {\n      bucket: this.name,\n      region: this.region,\n      accessKeyID: this.accessKeyID,\n      accessKeySecret: decrypted,\n    };\n  }\n}\n", "import type { UUID } from 'common/types/index.ts';\n\ninterface EntityWithID {\n  id: UUID;\n}\n\nfunction indexedMap<T>(entities: T[], f: (e: T) => string): Map<string, T> {\n  const m = new Map<string, T>();\n  entities.forEach((e) => m.set(f(e), e));\n  return m;\n}\n\nfunction indexedMapGrouped<T>(\n  entities: T[],\n  f: (e: T) => string,\n): Map<string, T[]> {\n  const m = new Map<string, T[]>();\n  entities.forEach((e) => {\n    const k = f(e);\n    let values = m.get(k);\n    if (values === undefined) {\n      values = [];\n      m.set(k, values);\n    }\n    values.push(e);\n  });\n  return m;\n}\n\nexport function inKeyOrder<T extends EntityWithID>(\n  entities: T[],\n  keys: readonly UUID[],\n): (T | null)[] {\n  return inKeyOrderCustom(entities, keys, (e) => e.id);\n}\n\nfunction inKeyOrderCustom<T>(\n  entities: T[],\n  keys: readonly UUID[],\n  f: (e: T) => string,\n): (T | null)[] {\n  const m = indexedMap(entities, f);\n  return keys.map((k) => m.get(k) ?? null);\n}\n\nexport function inKeyOrderOrNull<T extends EntityWithID>(\n  entities: T[],\n  keys: readonly UUID[],\n): (T | null)[] {\n  return inKeyOrderOrNullCustom(entities, keys, (e) => e.id);\n}\n\nexport function inKeyOrderOrNullCustom<T>(\n  entities: T[],\n  keys: readonly UUID[],\n  f: (e: T) => string,\n): (T | null)[] {\n  const m = indexedMap(entities, f);\n  return keys.map((k) => m.get(k) ?? null);\n}\n\nexport function inKeyOrderGrouped<T extends EntityWithID>(\n  entities: T[],\n  keys: readonly UUID[],\n): T[][] {\n  return inKeyOrderGroupedCustom(entities, keys, (e) => e.id);\n}\n\nexport function inKeyOrderGroupedCustom<T>(\n  entities: T[],\n  keys: readonly UUID[],\n  f: (e: T) => string,\n): T[][] {\n  const m = indexedMapGrouped(entities, f);\n  return keys.map((k) => m.get(k) ?? []);\n}\n", "import * as crypto from 'crypto';\nimport env from 'server/src/config/Env.ts';\nimport type { UUID } from 'common/types/index.ts';\n\ntype FileProxyTokenPayload = {\n  id: UUID;\n};\n\nexport function encodeFileProxyToken(payload: FileProxyTokenPayload): string {\n  const data = JSON.stringify({\n    ...payload,\n    time: Date.now(),\n  });\n\n  const iv = crypto.randomBytes(12);\n  const cipher = crypto.createCipheriv(\n    'aes-256-gcm',\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\n    iv,\n  );\n  const encrypted = Buffer.concat([\n    cipher.update(data, 'utf8'),\n    cipher.final(),\n  ]);\n  const authTag = cipher.getAuthTag();\n\n  return [\n    'v1',\n    encrypted.toString('hex'),\n    authTag.toString('hex'),\n    iv.toString('hex'),\n  ].join(':');\n}\n\nexport function decodeFileProxyToken(token: string) {\n  const [_version, encrypted, authTag, iv] = token.split(':');\n\n  const decipher = crypto.createDecipheriv(\n    'aes-256-gcm',\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\n\n    Buffer.from(iv, 'hex'),\n  );\n\n  decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  decrypted += decipher.final();\n\n  return JSON.parse(decrypted) as FileProxyTokenPayload;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type {\n  Location,\n  HighlightedTextConfig,\n  UUID,\n} from 'common/types/index.ts';\nimport { MessageAttachmentType } from 'common/types/index.ts';\nimport type { DocumentLocationInput } from 'server/src/schema/resolverTypes.ts';\nimport { isDefined } from 'common/util/index.ts';\n\nexport type MessageAttachmentData =\n  | MessageFileAttachmentData\n  | MessageAnnotationAttachmentData\n  | MessageScreenshotAttachmentData;\n\nexport interface MessageFileAttachmentData {\n  fileID: UUID;\n}\n\nexport interface MessageScreenshotAttachmentData {\n  screenshotFileID: UUID | null | undefined;\n  blurredScreenshotFileID: UUID | null | undefined;\n}\n\nexport interface MessageAnnotationAttachmentData {\n  screenshotFileID: UUID | null | undefined;\n  blurredScreenshotFileID?: UUID | null;\n  location: DocumentLocationInput | null | undefined;\n  customLocation?: Location | null | undefined;\n  customHighlightedTextConfig?: HighlightedTextConfig | null | undefined;\n  customLabel?: string | null | undefined;\n  coordsRelativeToTarget?: { x: number; y: number } | null | undefined;\n}\n\n@Table({\n  tableName: 'message_attachments',\n  timestamps: false,\n})\nexport class MessageAttachmentEntity extends Model<\n  InferAttributes<MessageAttachmentEntity>,\n  InferCreationAttributes<MessageAttachmentEntity>\n> {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.STRING,\n  })\n  type!: MessageAttachmentType;\n\n  @Column({\n    defaultValue: {},\n    type: DataTypes.JSONB,\n  })\n  data!: MessageAttachmentData;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: CreationOptional<Date>;\n\n  getFileIDs(): UUID[] {\n    switch (this.type) {\n      case MessageAttachmentType.FILE:\n        return [(this.data as MessageFileAttachmentData).fileID];\n      case MessageAttachmentType.ANNOTATION: {\n        const data = this.data as MessageAnnotationAttachmentData;\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\n          isDefined,\n        );\n      }\n      case MessageAttachmentType.SCREENSHOT: {\n        const data = this.data as MessageScreenshotAttachmentData;\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\n          isDefined,\n        );\n      }\n      default:\n        return [];\n    }\n  }\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n// NB: this seems to be something closer to bytes, not unicode characters, and\n// many emoji are multiple bytes (some up to like 10+).\nexport const REACTION_MAX_LENGTH = 127;\n\n@Table({\n  tableName: 'message_reactions',\n  timestamps: false,\n})\nexport class MessageReactionEntity extends Model<\n  InferAttributes<MessageReactionEntity>,\n  InferCreationAttributes<MessageReactionEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    validate: {\n      len: [1, REACTION_MAX_LENGTH],\n    },\n  })\n  unicodeReaction!: string;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: CreationOptional<Date>;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'message_mentions',\n  timestamps: false,\n})\nexport class MessageMentionEntity extends Model<\n  InferAttributes<MessageMentionEntity>,\n  InferCreationAttributes<MessageMentionEntity>\n> {\n  // before deleting or changing this column, please check the codebase for raw\n  // SQL statements using it. For example, see\n  // https://radical.phacility.com/D1158\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  userID!: UUID; // the user that is being mentioned\n\n  // before deleting or changing this column, please check the codebase for raw\n  // SQL statements using it. For example, see\n  // https://radical.phacility.com/D1158\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: CreationOptional<Date>;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'slack_channels',\n  timestamps: false,\n})\nexport class SlackChannelEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n  })\n  slackID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  added!: boolean;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  archived!: boolean;\n\n  @Column({\n    type: DataTypes.NUMBER,\n    allowNull: false,\n  })\n  users!: number;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'slack_messages',\n  timestamps: false,\n})\nexport class SlackMessageEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n  })\n  slackOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n  })\n  slackChannelID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n  })\n  slackMessageTimestamp!: string;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  sharerOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  sharerUserID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { PreferencesValueType, UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'user_preferences',\n  timestamps: false,\n})\nexport class UserPreferenceEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n  })\n  key!: string;\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  value!: PreferencesValueType;\n}\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'tasks',\n  timestamps: false,\n})\nexport class TaskEntity extends Model {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  done!: boolean;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  doneStatusLastUpdatedBy!: UUID | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'task_todos',\n  timestamps: false,\n})\nexport class TaskTodoEntity extends Model {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  taskID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  done!: boolean;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'task_assignees',\n  timestamps: false,\n})\nexport class TaskAssigneeEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  taskID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  userID!: UUID; // the user that is being assigned\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  assignerID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\n\nexport type JiraAuthData = {\n  cloudID: string;\n  refreshToken: string;\n};\n\nexport type AsanaAuthData = {\n  workspace: string;\n  refreshToken: string;\n};\n\nexport type LinearAuthData = {\n  // An access token is used instead of a refresh token because\n  // Linear provides access tokens that last 10 years instead of\n  // using refresh tokens.\n  // A user can have a max of 10 tokens per application and scope\n  // configuration. If the 11th token is requested then the oldest\n  // token is automatically revoked.\n  accessToken: string;\n};\n\nexport type TrelloAuthData = {\n  // An access token is given by trello which never expires\n  accessToken: string;\n  accessTokenSecret: string;\n};\n\nexport type MondayAuthData = {\n  // Monday supplies access tokens that don't expire\n  accessToken: string;\n};\n\n@Table({\n  tableName: 'third_party_connections',\n  timestamps: false,\n})\nexport class ThirdPartyConnectionEntity extends Model {\n  @Column({ type: DataTypes.UUID, primaryKey: true })\n  userID!: UUID;\n\n  @Column({ type: DataTypes.UUID, primaryKey: true })\n  orgID!: UUID;\n\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\n  type!: ThirdPartyConnectionType;\n\n  @Column({ type: DataTypes.TEXT })\n  externalID!: string;\n\n  @Column({ type: DataTypes.TEXT })\n  externalEmail!: string;\n\n  @Column({ type: DataTypes.JSONB })\n  externalAuthData!:\n    | JiraAuthData\n    | AsanaAuthData\n    | LinearAuthData\n    | TrelloAuthData\n    | MondayAuthData\n    | null;\n\n  @Column({ type: DataTypes.TIME })\n  connectedTimestamp!: Date;\n}\n", "import { DataTypes, Sequelize } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\nimport { assertUUID } from 'common/util/index.ts';\n\n// TODO: shouldn't this somehow reference the third_party_connection ENUM type we created in postgres?\nexport const ThirdPartyConnectionDataType = DataTypes.ENUM(\n  'asana',\n  'jira',\n  'linear',\n);\n\nexport const MAX_IDS_PER_QUERY = 1000;\n\nexport type UserOrgID = {\n  userID: UUID;\n  orgID: UUID;\n};\n\nexport function keyFor(userOrgID: UserOrgID): string {\n  return `${userOrgID.userID}/${userOrgID.orgID}`;\n}\n\nexport type PlatformID = {\n  platformApplicationID: UUID;\n  externalID: string;\n};\n\nexport function keyForPlatformID(platformID: PlatformID): string {\n  return `${platformID.platformApplicationID}/${platformID.externalID}`;\n}\n\n// there doesn't seem to be any sequelize-specific way to construct such a subquery\n// https://github.com/sequelize/sequelize/issues/2325\n// so I'm doing the best I can to not hardcode table and column names in here and to\n// ensure we're safe from SQL injection\nexport const timestampSubquery = (id: UUID) =>\n  Sequelize.literal(\n    `(\n      SELECT \"timestamp\"\n      FROM \"${MessageEntity.tableName}\"\n      WHERE \"id\" = '${assertUUID(id)}'\n    )`,\n  );\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes, Op } from 'sequelize';\nimport type { UUID, TaskPreviewData } from 'common/types/index.ts';\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\n\n@Table({\n  tableName: 'task_third_party_references',\n  timestamps: false,\n})\nexport class TaskThirdPartyReference extends Model {\n  @Column({ type: DataTypes.UUID, primaryKey: true })\n  taskID!: UUID;\n\n  @Column({ type: DataTypes.UUID })\n  taskTodoID!: UUID | null;\n\n  @Column({ type: DataTypes.TEXT, primaryKey: true })\n  externalID!: string;\n\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\n  externalConnectionType!: ThirdPartyConnectionType;\n\n  @Column({ type: DataTypes.TEXT })\n  externalLocationID!: string | null;\n\n  @Column({ type: DataTypes.JSONB })\n  previewData!: TaskPreviewData | null;\n\n  @Column({ type: DataTypes.BOOLEAN })\n  imported!: boolean;\n\n  static async findForTask(\n    taskID: UUID,\n    externalConnectionType: ThirdPartyConnectionType,\n  ): Promise<TaskThirdPartyReference | null> {\n    return await TaskThirdPartyReference.findOne({\n      where: {\n        taskID,\n        taskTodoID: null,\n        externalConnectionType,\n      },\n    });\n  }\n\n  static async findAllForTask(taskID: UUID) {\n    return await TaskThirdPartyReference.findAll({\n      where: {\n        taskID,\n        taskTodoID: { [Op.is]: null },\n      },\n    });\n  }\n\n  static async findAllForTaskTodos(taskID: UUID, taskTodoIDs: UUID[]) {\n    return await TaskThirdPartyReference.findAll({\n      where: {\n        taskID,\n        taskTodoID: taskTodoIDs,\n      },\n    });\n  }\n\n  static async findTaskWithExternalID(\n    externalID: string,\n    externalConnectionType: ThirdPartyConnectionType,\n  ) {\n    return await TaskThirdPartyReference.findOne({\n      where: {\n        externalID,\n        externalConnectionType,\n        taskTodoID: { [Op.is]: null },\n      },\n    });\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\nimport { DataTypes } from 'sequelize';\n\nimport type { UUID, Location, PageContext } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'pages',\n  timestamps: false,\n})\nexport class PageEntity extends Model<\n  InferAttributes<PageEntity, { omit: 'pageContext' }>,\n  InferCreationAttributes<PageEntity, { omit: 'pageContext' }>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    unique: 'orgID-providerID-contextHash-unique',\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    unique: 'orgID-providerID-contextHash-unique',\n  })\n  contextHash!: UUID;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n  })\n  contextData!: Location;\n\n  get pageContext(): PageContext {\n    return {\n      data: this.contextData,\n      providerID: null,\n    };\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes, Sequelize } from 'sequelize';\n\nimport type {\n  EntityMetadata,\n  ThreadSupportStatusType,\n  UUID,\n} from 'common/types/index.ts';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\n\n@Table({\n  tableName: 'threads',\n  timestamps: false,\n})\nexport class ThreadEntity extends Model<\n  InferAttributes<ThreadEntity>,\n  InferCreationAttributes<ThreadEntity>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  resolvedTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  resolverUserID!: UUID | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  url!: string;\n\n  @Column({\n    type: DataTypes.ENUM('open', 'closed'),\n    defaultValue: null,\n  })\n  supportStatus!: ThreadSupportStatusType | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  externalID!: CreationOptional<string>;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  pageContextHash!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: false,\n    defaultValue: Sequelize.literal('NOW()'),\n  })\n  createdTimestamp!: CreationOptional<Date>;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: CreationOptional<EntityMetadata>;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  extraClassnames!: string | null;\n\n  public async belongsToViewerOrgs(viewer: Viewer): Promise<boolean> {\n    const { orgID } = assertViewerHasIdentity(viewer);\n\n    if (this.orgID === orgID) {\n      return true;\n    }\n\n    // In some cases (e.g. unified inbox) we may be looking for a thread from an\n    // org the user is a member of, but not currently logged in as\n    const orgMembersLoader = new OrgMembersLoader(viewer);\n\n    return await orgMembersLoader.viewerCanAccessOrg(this.orgID);\n  }\n}\n", "import type { Transaction } from 'sequelize';\nimport DataLoader from 'dataloader';\nimport type { UUID } from 'common/types/index.ts';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport {\n  assertViewerHasOrg,\n  assertViewerHasPlatformApplicationID,\n  assertViewerHasUser,\n} from 'server/src/auth/index.ts';\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\nimport type { UserOrgID } from 'server/src/entity/common.ts';\nimport { MAX_IDS_PER_QUERY, keyFor } from 'server/src/entity/common.ts';\nimport type { RequestContext } from 'server/src/RequestContext.ts';\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\n\nexport class OrgMembersLoader {\n  viewer: Viewer;\n  dataloader: DataLoader<UserOrgID, OrgMembersEntity | null>;\n\n  constructor(viewer: Viewer) {\n    this.viewer = viewer;\n    this.dataloader = new DataLoader(\n      async (keys) => await this.loadBatch(keys),\n      { cache: false },\n    );\n  }\n\n  private async loadBatch(\n    keys: readonly UserOrgID[],\n    transaction?: Transaction,\n  ): Promise<(OrgMembersEntity | null)[]> {\n    // By far the most common calling pattern is loading a bunch of memberships\n    // either all for the same org or all for the same user, in which case we\n    // can turn this into a set of efficient queries that do an equality check\n    // on the common one and an IN filter on the other.  If we end up with a\n    // calling pattern that tries to load a scattershot set of memberships\n    // across lots of different users and orgs (why?) we should improve this.\n    const usersByOrg = new Map<UUID, Set<UUID>>();\n    const orgsByUser = new Map<UUID, Set<UUID>>();\n    for (const key of keys) {\n      if (!usersByOrg.has(key.orgID)) {\n        usersByOrg.set(key.orgID, new Set());\n      }\n      usersByOrg.get(key.orgID)!.add(key.userID);\n      if (!orgsByUser.has(key.userID)) {\n        orgsByUser.set(key.userID, new Set());\n      }\n      orgsByUser.get(key.userID)!.add(key.orgID);\n    }\n\n    const promises = [];\n    if (usersByOrg.size < orgsByUser.size) {\n      // We have fewer orgs than users, so query by org.\n      for (const [orgID, userIDSet] of usersByOrg) {\n        const userIDs = [...userIDSet];\n\n        for (\n          let offset = 0;\n          offset < userIDs.length;\n          offset += MAX_IDS_PER_QUERY\n        ) {\n          promises.push(\n            OrgMembersEntity.findAll({\n              where: {\n                orgID,\n                userID: userIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\n              },\n              transaction,\n            }),\n          );\n        }\n      }\n    } else {\n      // We have fewer users than orgs, so query by user.\n      for (const [userID, orgIDSet] of orgsByUser) {\n        const orgIDs = [...orgIDSet];\n\n        for (\n          let offset = 0;\n          offset < orgIDs.length;\n          offset += MAX_IDS_PER_QUERY\n        ) {\n          promises.push(\n            OrgMembersEntity.findAll({\n              where: {\n                userID,\n                orgID: orgIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\n              },\n              transaction,\n            }),\n          );\n        }\n      }\n    }\n    const orgMembers = (await Promise.all(promises)).flat();\n    const index = new Map<string, OrgMembersEntity>();\n    for (const orgMember of orgMembers) {\n      index.set(\n        keyFor({ userID: orgMember.userID, orgID: orgMember.orgID }),\n        orgMember,\n      );\n    }\n    return keys.map((userOrgId) => index.get(keyFor(userOrgId)) ?? null);\n  }\n\n  async loadUserOrgMembership(\n    userID: UUID,\n    orgID: UUID,\n    transaction?: Transaction,\n  ) {\n    try {\n      const key = { userID, orgID };\n      if (transaction) {\n        return (await this.loadBatch([key], transaction))[0];\n      } else {\n        return await this.dataloader.load(key);\n      }\n    } catch (e) {\n      anonymousLogger().logException('Org members dataloader error', e);\n      return null;\n    }\n  }\n\n  async viewerCanAccessOrg(\n    orgID: UUID,\n    transaction?: Transaction,\n  ): Promise<boolean> {\n    if ((this.viewer.relevantOrgIDs ?? []).includes(orgID)) {\n      return true;\n    }\n    const userID = assertViewerHasUser(this.viewer);\n    const membership = await this.loadUserOrgMembership(\n      userID,\n      orgID,\n      transaction,\n    );\n    return !!membership;\n  }\n\n  async viewerCanAccessOrgExternalID(externalOrgID: string): Promise<boolean> {\n    const userID = assertViewerHasUser(this.viewer);\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\n      this.viewer,\n    );\n\n    const orgLoader = new OrgLoader(this.viewer);\n    const org = await orgLoader.loadPlatformOrg(\n      platformApplicationID,\n      externalOrgID,\n    );\n\n    if (!org) {\n      return false;\n    }\n    const membership = await this.loadUserOrgMembership(userID, org.id);\n    return !!membership;\n  }\n\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\n  async loadAllImmediateOrgIDsForUser() {\n    const entities = await OrgMembersEntity.findAll({\n      where: {\n        userID: this.viewer.userID,\n      },\n      raw: true,\n    });\n\n    return entities.map((e) => e.orgID);\n  }\n\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\n  async loadAllImmediateOrgsForUser() {\n    const orgIds = await this.loadAllImmediateOrgIDsForUser();\n\n    return await OrgEntity.findAll({\n      where: {\n        id: orgIds,\n      },\n    });\n  }\n\n  async loadAllOrgIDsForUser() {\n    const platformOrgIDs = await this.loadAllImmediateOrgIDsForUser();\n\n    const slackOrgs = await LinkedOrgsEntity.findAll({\n      where: {\n        sourceOrgID: platformOrgIDs,\n      },\n    });\n\n    const slackOrgsIDs = slackOrgs.map((e) => e.linkedOrgID);\n\n    return [...platformOrgIDs, ...slackOrgsIDs];\n  }\n\n  // Use this function if you want to load orgMembership for a user that might\n  // not exist in a specified platform org but might exist in the Slack org linked\n  // to that specified platform org.\n  async loadForSpecifiedPlatformOrgOrLinkedSlackOrg(\n    context: RequestContext,\n    userID: UUID,\n    orgID: UUID,\n  ) {\n    const orgMembership = await this.loadUserOrgMembership(userID, orgID);\n    if (orgMembership) {\n      return orgMembership;\n    }\n\n    const linkedOrgID =\n      await context.loaders.linkedOrgsLoader.getConnectedSlackOrgID(orgID);\n    if (!linkedOrgID) {\n      return null;\n    }\n    return await this.loadUserOrgMembership(userID, linkedOrgID);\n  }\n\n  async loadNotifiableOrgMembers(limit: number | undefined) {\n    const orgID = assertViewerHasOrg(this.viewer);\n\n    // find all non-deleted orgMembers of type \"person\"\n    return await OrgMembersEntity.findAll({\n      where: {\n        orgID,\n      },\n      include: [\n        {\n          model: UserEntity,\n          required: true,\n          where: { userType: 'person' },\n          // dont bother fetching UserEntity attributes\n          attributes: [],\n        },\n      ],\n      limit,\n    });\n  }\n}\n", "import { Op } from 'sequelize';\n\nimport DataLoader from 'dataloader';\nimport type { Viewer } from 'server/src/auth/index.ts';\nimport { AuthProviderType } from 'server/src/auth/index.ts';\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\nimport type { UUID } from 'common/types/index.ts';\nimport type { PlatformID } from 'server/src/entity/common.ts';\nimport {\n  MAX_IDS_PER_QUERY,\n  keyForPlatformID,\n} from 'server/src/entity/common.ts';\nimport { inKeyOrderOrNull } from 'server/src/entity/base/util.ts';\nimport { CORD_SLACK_APP_IDS } from 'common/const/Ids.ts';\n\nexport class OrgLoader {\n  viewer: Viewer;\n  platformOrgDataloader: DataLoader<PlatformID, OrgEntity | null, string>;\n  orgByIdDataloader: DataLoader<UUID, OrgEntity | null>;\n\n  constructor(viewer: Viewer, cache = false) {\n    this.viewer = viewer;\n    this.platformOrgDataloader = new DataLoader(\n      async (keys) => {\n        // By far the most common calling pattern is loading a bunch of orgs all\n        // from the same application, in which case we can turn this into a set of\n        // efficient queries (ideally one) that do an equality check on\n        // platformApplicationID and an IN filter on externalID.\n        const orgsByApplication = new Map<UUID, Set<string>>();\n        for (const key of keys) {\n          if (!orgsByApplication.has(key.platformApplicationID)) {\n            orgsByApplication.set(key.platformApplicationID, new Set());\n          }\n          orgsByApplication.get(key.platformApplicationID)!.add(key.externalID);\n        }\n        const promises = [];\n        for (const [platformApplicationID, orgIDSet] of orgsByApplication) {\n          const externalOrgIDs = [...orgIDSet];\n\n          for (\n            let offset = 0;\n            offset < externalOrgIDs.length;\n            offset += MAX_IDS_PER_QUERY\n          ) {\n            promises.push(\n              OrgEntity.findAll({\n                where: {\n                  externalProvider: AuthProviderType.PLATFORM,\n                  platformApplicationID,\n                  externalID: externalOrgIDs.slice(\n                    offset,\n                    offset + MAX_IDS_PER_QUERY,\n                  ),\n                },\n              }),\n            );\n          }\n        }\n        const orgs = (await Promise.all(promises)).flat();\n        const index = new Map<string, OrgEntity>();\n        for (const org of orgs) {\n          index.set(\n            keyForPlatformID({\n              platformApplicationID: org.platformApplicationID!,\n              externalID: org.externalID,\n            }),\n            org,\n          );\n        }\n        return keys.map(\n          (platformId) => index.get(keyForPlatformID(platformId)) ?? null,\n        );\n      },\n      { cache },\n    );\n    this.orgByIdDataloader = new DataLoader(\n      async (keys) => {\n        const orgs = await OrgEntity.findAll({\n          where: {\n            id: keys as UUID[],\n          },\n        });\n        return inKeyOrderOrNull(orgs, keys);\n      },\n      { cache },\n    );\n  }\n\n  async loadOrg(id: UUID) {\n    return await this.orgByIdDataloader.load(id);\n  }\n\n  async loadSlackOrg(slackTeamID: string, slackAppID: string) {\n    // customSlackAppID column is null for our Cord apps.  This was to avoid\n    // doing a bigger migration when we introduced the ability to add external\n    // Slack apps\n    const customSlackAppID = CORD_SLACK_APP_IDS.includes(slackAppID)\n      ? null\n      : slackAppID;\n\n    return await OrgEntity.findOne({\n      where: {\n        externalProvider: AuthProviderType.SLACK,\n        externalID: slackTeamID,\n        customSlackAppID,\n        // Technically redundant, but allows postgres to use an index.\n        platformApplicationID: null,\n      },\n    });\n  }\n\n  async loadPlatformOrg(platformApplicationID: string, externalOrgID: string) {\n    return await this.platformOrgDataloader.load({\n      platformApplicationID,\n      externalID: externalOrgID,\n    });\n  }\n\n  async loadByDomain(externalProvider: string, domain: string) {\n    return await OrgEntity.findOne({\n      where: { externalProvider, domain },\n    });\n  }\n\n  async loadAllActiveSlackOrgs() {\n    return await OrgEntity.findAll({\n      where: {\n        state: 'active',\n        externalProvider: AuthProviderType.SLACK,\n        externalAuthData: { [Op.ne]: null },\n      },\n    });\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'thread_participants',\n  timestamps: false,\n})\nexport class ThreadParticipantEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  orgID!: UUID;\n\n  // The timestamp of the last seen message, or NULL if no messages have been\n  // seen\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastSeenTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastUnseenMessageTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastUnseenReactionTimestamp!: Date | null;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n  })\n  subscribed!: boolean;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'page_visitors',\n  timestamps: false,\n})\nexport class PageVisitorEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  pageContextHash!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  orgID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastPresentTimestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes, Sequelize } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'sessions',\n  timestamps: false,\n})\nexport class SessionEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n    allowNull: false,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  applicationID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: false,\n    defaultValue: Sequelize.literal('NOW()'),\n  })\n  issuedAt!: Date;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  expiresAt!: Date;\n}\n", "import { performance } from 'perf_hooks';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport * as Sentry from '@sentry/node';\nimport type { Transaction } from '@sentry/types';\nimport type WebSocket from 'ws';\nimport { v4 as uuid } from 'uuid';\nimport type { RequestContext } from 'server/src/RequestContext.ts';\nimport {\n  TimeHistogram,\n  Gauge,\n  Counter,\n  incCounterWithAppID,\n} from 'server/src/logging/prometheus.ts';\nimport type { UUID } from 'common/types/index.ts';\nimport { isEmployee } from 'common/util/index.ts';\nimport type { Logger } from 'server/src/logging/Logger.ts';\n\ntype AsyncLocalStorageType = {\n  operationName: string;\n  operationID: UUID;\n  platformApplicationID: UUID | undefined;\n  logger: Logger;\n};\n\n// Using AsyncLocalStorage is not free. We previously had it enabled only in\n// staging, but it's so darn useful we took the hit and enabled everywhere.\n// However, to try to make sure we don't completely depend on it and can still\n// turn it off again if need be, explicitly type this variable as being\n// potentially null (even though in practise it never is) so that callers have\n// to at least deal with it being missing at a TS level.\nexport const asyncLocalStorage: AsyncLocalStorage<AsyncLocalStorageType> | null =\n  new AsyncLocalStorage<AsyncLocalStorageType>();\n\nconst DO_NOT_LOG_OPERATIONS = ['PingQuery'];\n\ntype WebSocketWithDetails = WebSocket & {\n  cordOnCloseWebSocket?: () => void;\n  // Properties we add to the websocket so we can identify them in heap dumps\n  cordDebugInfo?: {\n    userID: UUID | undefined;\n    orgID: UUID | undefined;\n    socketID: UUID;\n    connectionID: UUID;\n    connectionStart: string;\n    connectionEnd?: string;\n  };\n};\n\n// In any case, production or not, we keep track of the GraphQL operation\n// execution times in this Prometheus metric:\nconst graphQlMetric = TimeHistogram({\n  name: `GraphQlExecTime`,\n  help: `Execution time of GraphQL operations in seconds`,\n  labelNames: ['operation'],\n});\n\n// Separate from the above histogram so we don't explode operation*appID*bucket.\nconst graphQLCounter = Counter({\n  name: 'GraphQlExecCount',\n  help: 'Total number of GraphQL operations executed',\n  labelNames: ['operation', 'appID'],\n});\n\nconst openWebsocketMetric = Gauge({\n  name: 'OpenWebsockets',\n  help: 'Number of open websocket connections',\n  labelNames: ['appID', 'clientVersion', 'endpoint', 'deployment'],\n});\n\nexport function websocketConnected(\n  socket: WebSocketWithDetails,\n  context: RequestContext,\n  endpoint: 'public' | 'admin',\n) {\n  const socketID = uuid();\n  const {\n    session: {\n      viewer: { userID, orgID, platformApplicationID: appID },\n    },\n    clientVersion,\n  } = context;\n\n  const openWebsocketMetricLabels = {\n    appID: appID || 'null',\n    clientVersion: clientVersion || 'null',\n    endpoint,\n    deployment: context.deployment ?? 'null',\n  };\n  const loggingInfo = { socketID, userID, orgID, appID, clientVersion };\n\n  openWebsocketMetric.inc(openWebsocketMetricLabels, 1);\n  context.logger.debug('performance', {\n    event: 'websocketConnected',\n    ...loggingInfo,\n  });\n\n  socket.cordOnCloseWebSocket = () => {\n    openWebsocketMetric.dec(openWebsocketMetricLabels, 1);\n    context.logger.debug('performance', {\n      event: 'websocketDisconnected',\n      ...loggingInfo,\n    });\n    if (socket.cordDebugInfo) {\n      socket.cordDebugInfo.connectionEnd = new Date().toUTCString();\n    }\n  };\n  socket.cordDebugInfo = {\n    userID,\n    orgID,\n    socketID,\n    connectionID: context.connectionID,\n    connectionStart: new Date().toUTCString(),\n  };\n}\n\nexport function websocketDisconnected(socket: WebSocketWithDetails) {\n  const { cordOnCloseWebSocket } = socket;\n  if (cordOnCloseWebSocket) {\n    delete socket.cordOnCloseWebSocket;\n    cordOnCloseWebSocket();\n  }\n}\n\n/**\n * Sorry about the \"any\" -- this is usable at two different types, the type of\n * the main \"execute\" and the type of the subscription \"customExecute\", which\n * pass arguments slightly differently. The code to adapt the differences is not\n * difficult, but convincing TS that it's correct is. If you want to try to fix\n * it, you probably have better ways to spend your time.\n */\nexport function graphQLExecutePerformanceWrapper(\n  previousExecuteFunction: any,\n): any {\n  const execute = (...args: any[]) => {\n    let operationFinished = () => {};\n\n    // Deal with the two different input types, for the main execute (passes\n    // multiple args) and the subscription execute (passes one object arg).\n    const context: RequestContext =\n      args.length > 1 ? args[3] : args[0].contextValue;\n    const variableValues = args.length > 1 ? args[4] : args[0].variableValues;\n    const operationName = args.length > 1 ? args[5] : args[0].operationName;\n\n    if (operationName && !DO_NOT_LOG_OPERATIONS.includes(operationName)) {\n      const { userID, orgID } = context.session.viewer;\n\n      // Have a random uuid just so we can unambiguously relate the log\n      // lines we send at the beginning and the end of this operation\n      const operationUUID =\n        asyncLocalStorage?.getStore()?.operationID ?? uuid();\n\n      // Before we execute the GraphQL operation: take the current time\n      // (`startTime`) and write a log line about the operation about to start\n      const startTime = performance.now();\n      context.logger.debug(`performance`, {\n        event: 'graphQlExecuteStart',\n        userID,\n        orgID,\n        operation: operationName,\n        operationUUID,\n      });\n\n      incCounterWithAppID(context.session.viewer, graphQLCounter, {\n        operation: operationName,\n      });\n\n      let sentryTransaction: Transaction | undefined;\n      if (isEmployee(orgID)) {\n        sentryTransaction = Sentry.startTransaction({\n          op: 'graphql',\n          name: operationName,\n          data: variableValues,\n        });\n      }\n\n      // This is going to get executed when the GraphQL operation has finished:\n      // we write another log line, register the execution time in the\n      // Prometheus metric, and write a row to the database (if enabled)\n      operationFinished = () => {\n        const durationMS = performance.now() - startTime;\n\n        // log to winston\n        context.logger.debug(`performance`, {\n          event: 'graphQlExecuteEnd',\n          userID: userID,\n          orgID: orgID,\n          operation: operationName,\n          operationUUID,\n          durationMS,\n        });\n\n        // update prometheus metric (prometheus values are in seconds)\n        graphQlMetric.observe({ operation: operationName }, durationMS / 1000);\n\n        if (sentryTransaction) {\n          Sentry.withScope((scope) => {\n            scope.setUser(userID ? { id: userID } : null);\n            sentryTransaction?.finish();\n          });\n        }\n      };\n    }\n\n    // An `ExecuteFunction` can return either a plain `ExecutionResult` or a `Promise<ExecutionResult>`, or\n    // `AsyncIterator<ExecutionResult>`.\n    const result = previousExecuteFunction(...args);\n\n    if ('next' in result) {\n      // The presence of a `next` field means that `result` is of type\n      // `AsyncIterator<ExecutionResult>`\n      return asyncIteratorFinally(result, operationFinished);\n    } else {\n      // `result` is a `ExecutionResult` or `Promise<ExecutionResult>`. Either\n      // way, we return it in the form of a `Promise<ExecutionResult>`.\n      return Promise.resolve(result).finally(operationFinished);\n    }\n  };\n\n  if (asyncLocalStorage) {\n    return (...args: any[]) => {\n      const context: RequestContext =\n        args.length > 1 ? args[3] : args[0].contextValue;\n      const operationName = args.length > 1 ? args[5] : args[0].operationName;\n      return asyncLocalStorage.run(\n        {\n          operationName,\n          operationID: uuid(),\n          platformApplicationID: context.session.viewer.platformApplicationID,\n          logger: context.logger,\n        },\n        execute,\n        ...args,\n      );\n    };\n  } else {\n    return execute;\n  }\n}\n\nfunction asyncIteratorFinally<T, TReturn, TNext>(\n  aiter: AsyncIterator<T, TReturn, TNext>,\n  finallyFunc: () => void,\n): AsyncIterator<T, TReturn, TNext> {\n  let finallyFuncHasBeenCalled = false;\n\n  return {\n    async next(...args) {\n      const item = await aiter.next(...args);\n      if (item.done) {\n        if (!finallyFuncHasBeenCalled) {\n          finallyFuncHasBeenCalled = true;\n          finallyFunc();\n        }\n      }\n      return item;\n    },\n  };\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { Tier } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'heimdall',\n  timestamps: false,\n})\nexport class HeimdallEntity extends Model {\n  @Column({\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\n    allowNull: false,\n    primaryKey: true,\n  })\n  tier!: Tier;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n    primaryKey: true,\n  })\n  key!: string;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n  })\n  value!: boolean; // boolean is the only value supported for now.\n\n  isOn(): boolean {\n    return this.value;\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'email_subscription',\n  timestamps: false,\n})\nexport class EmailSubscriptionEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  subscribed!: boolean;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'linked_users',\n  timestamps: false,\n})\nexport class LinkedUsersEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  sourceUserID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  sourceOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  linkedUserID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  linkedOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  linkedTimestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'slack_mirrored_threads',\n  timestamps: false,\n})\nexport class SlackMirroredThreadEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  threadOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  slackOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  slackChannelID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  slackMessageTimestamp!: string;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model, DataType } from 'sequelize-typescript';\nimport { DataTypes, Sequelize } from 'sequelize';\nimport type {\n  Location,\n  OutboundNotificationMetadata,\n  OutboundNotificationType,\n  UUID,\n} from 'common/types/index.ts';\n\n@Table({\n  tableName: 'message_notifications',\n  timestamps: false,\n})\nexport class MessageOutboundNotificationEntity extends Model {\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n  })\n  id!: string; // using a nano ID rather than a UUID\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.ENUM(\n      'slack',\n      'email',\n      'slackEmailMatched',\n      'sharedToSlackChannel',\n      'sharedToEmail',\n    ),\n  })\n  type!: OutboundNotificationType;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  url!: string;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  targetUserID!: UUID | null;\n  @Column({\n    type: DataTypes.UUID,\n  })\n  targetOrgID!: UUID;\n  @Column({\n    type: DataType.TIME,\n    allowNull: false,\n    defaultValue: Sequelize.literal('NOW()'),\n  })\n  timestamp!: Date;\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: OutboundNotificationMetadata;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: true,\n  })\n  sharerUserID!: UUID | null;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: true,\n  })\n  sharerOrgID!: UUID | null;\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  location!: Location | null;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'console_users',\n  timestamps: false,\n})\nexport class ConsoleUserEntity extends Model {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID; // Internal, autogenerated UUID\n\n  @Column({ type: DataTypes.STRING, unique: true })\n  email!: string;\n\n  @Column({\n    type: DataTypes.STRING,\n    allowNull: true,\n  })\n  name: string | null | undefined;\n\n  @Column({ type: DataTypes.STRING, allowNull: true })\n  picture: string | null | undefined;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  customerID!: UUID | null;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n  })\n  verified!: boolean;\n\n  @Column({\n    type: DataTypes.STRING,\n    allowNull: true,\n  })\n  auth0UserID: string | null | undefined;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  pendingCustomerID!: UUID | null;\n\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: null,\n  })\n  loopsUserID!: string | null;\n\n  get idForLogging(): string {\n    const authSource = this.auth0UserID?.includes('|')\n      ? this.auth0UserID.substring(0, this.auth0UserID.indexOf('|'))\n      : 'unknown';\n    return `${this.email} [${authSource}]`;\n  }\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'user_hidden_annotations',\n  timestamps: false,\n})\nexport class UserHiddenAnnotationsEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  annotationID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  pageContextHash!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  orgID!: UUID;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\n\n@Table({\n  tableName: 'external_assets',\n  timestamps: false,\n})\nexport class ExternalAssetEntity extends Model {\n  /**\n   * url from where the asset was downloaded\n   */\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n    allowNull: false,\n  })\n  url!: string;\n\n  /**\n   * time when download happened\n   */\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: false,\n  })\n  downloadTimestamp!: Date;\n\n  /**\n   * sha384 hash of the downloaded contents\n   */\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  sha384!: string;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\n\n@Table({\n  tableName: 'image_variants',\n  timestamps: false,\n})\nexport class ImageVariantEntity extends Model {\n  /**\n   * sha384 hash of the image this variant is based on\n   */\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n    allowNull: false,\n  })\n  sourceSha384!: string;\n\n  /**\n   * description of how the base image was altered\n   */\n  @Column({\n    type: DataTypes.TEXT,\n    primaryKey: true,\n    allowNull: false,\n  })\n  variant!: string;\n\n  /**\n   * time this variant was created\n   */\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: false,\n  })\n  timestamp!: Date;\n\n  /**\n   * filename, i.e. key in our public S3 bucket\n   */\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  filename!: string;\n}\n", "import { Column, Table, Model } from 'sequelize-typescript';\nimport { DataTypes, Sequelize } from 'sequelize';\n\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'slack_mirrored_support_threads',\n  timestamps: false,\n})\nexport class SlackMirroredSupportThreadEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  threadID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  threadOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  slackOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  slackChannelID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  slackMessageTimestamp!: string;\n\n  @Column({\n    type: DataTypes.TIME,\n    defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { Tier, UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'deploys',\n  timestamps: false,\n})\nexport class DeploysEntity extends Model {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\n  })\n  tier!: Tier;\n\n  @Column({\n    type: DataTypes.DATE,\n  })\n  deployStartTime!: Date;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  deployFinishTime!: Date | null;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  success!: boolean | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  error!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  gitCommitHash!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  dockerImage!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  packageVersion!: string | null;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\n\nexport type MondaySubscriptionDetails = {\n  boardID: string;\n  webhookID: string;\n};\n\n@Table({\n  tableName: 'task_third_party_subscriptions',\n  timestamps: false,\n})\nexport class TaskThirdPartySubscriptionEntity extends Model {\n  @Column({ type: DataTypes.UUID, primaryKey: true })\n  id!: UUID;\n\n  @Column({ type: DataTypes.UUID })\n  userID!: UUID;\n\n  @Column({ type: DataTypes.UUID })\n  orgID!: UUID;\n\n  @Column({ type: ThirdPartyConnectionDataType })\n  externalConnectionType!: ThirdPartyConnectionType;\n\n  @Column({ type: DataTypes.JSONB })\n  subscriptionDetails!: MondaySubscriptionDetails;\n\n  @Column({ type: DataTypes.TIME })\n  createdTimestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\n\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'application_usage_metrics',\n  timestamps: false,\n})\nexport class ApplicationUsageMetricEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  applicationID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  metricID!: UUID;\n\n  @Column({\n    type: DataTypes.DATE,\n    primaryKey: true,\n  })\n  date!: string;\n\n  @Column({\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  })\n  value!: number;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\n\nimport type { UUID } from 'common/types/index.ts';\n@Table({\n  tableName: 'application_usage_metric_types',\n  timestamps: false,\n})\nexport class ApplicationUsageMetricTypeEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  metric!: string;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { literal, DataTypes } from 'sequelize';\nimport type { NotificationReplyAction } from '@cord-sdk/types';\nimport type { EntityMetadata, UUID } from 'common/types/index.ts';\nimport type { NotificationReadStatus } from 'server/src/schema/resolverTypes.ts';\nimport type { ThreadActionType } from 'server/src/notifications/types/thread_action.ts';\n\nexport type NotificationType =\n  | 'reply'\n  | 'reaction'\n  | 'external'\n  | 'thread_action';\nexport type SpecificNotificationEntity<T extends NotificationType> =\n  NotificationEntity & { type: T };\n\n/**\n * As with other `Entity`s, NotificationEntity is a layer directly on top of the\n * raw SQL table. The data here is organised as most convenient for the\n * database, not for UI rendering. For example, while we display a bunch of\n * reactions to the same message as a single notification in the UI, each\n * individual reaction has its own row in the DB and thus its own\n * NotificationEntity.\n *\n * @see Notification is the GraphQL type this is massaged into for UI rendering.\n */\n@Table({\n  tableName: 'notifications',\n  timestamps: false,\n})\nexport class NotificationEntity extends Model<\n  InferAttributes<NotificationEntity>,\n  InferCreationAttributes<NotificationEntity>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({ type: DataTypes.UUID })\n  platformApplicationID!: UUID;\n\n  @Column({ type: DataTypes.UUID })\n  externalID!: CreationOptional<UUID>;\n\n  @Column({ type: DataTypes.UUID, allowNull: false })\n  recipientID!: UUID;\n\n  @Column({ type: DataTypes.UUID, allowNull: true })\n  senderID!: UUID | null;\n\n  @Column({ type: DataTypes.TEXT, allowNull: true })\n  iconUrl!: string | null;\n\n  @Column({\n    type: DataTypes.ENUM('reply', 'reaction', 'external', 'thread_action'),\n    allowNull: false,\n  })\n  type!: NotificationType;\n\n  @Column({ type: DataTypes.TEXT, allowNull: true })\n  aggregationKey!: string | null;\n\n  @Column({\n    type: DataTypes.ENUM('unread', 'read'),\n    allowNull: false,\n    defaultValue: 'unread',\n  })\n  readStatus!: CreationOptional<NotificationReadStatus>;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: false,\n    defaultValue: literal('CURRENT_TIMESTAMP'),\n  })\n  createdTimestamp!: CreationOptional<Date>;\n\n  @Column({ type: DataTypes.UUID, allowNull: true })\n  messageID!: UUID | null;\n\n  @Column({ type: DataTypes.ARRAY(DataTypes.TEXT), allowNull: true })\n  replyActions!: NotificationReplyAction[] | null;\n\n  @Column({ type: DataTypes.UUID, allowNull: true })\n  reactionID!: UUID | null;\n\n  @Column({ type: DataTypes.UUID, allowNull: true })\n  threadID!: UUID | null;\n\n  @Column({ type: DataTypes.ENUM('resolve', 'unresolve'), allowNull: true })\n  threadActionType!: ThreadActionType | null;\n\n  @Column({ type: DataTypes.TEXT, allowNull: true })\n  externalTemplate!: string | null;\n\n  @Column({ type: DataTypes.TEXT, allowNull: true })\n  externalURL!: string | null;\n\n  @Column({ type: DataTypes.TEXT, allowNull: true })\n  extraClassnames!: string | null;\n\n  @Column({\n    type: DataTypes.JSONB,\n    allowNull: false,\n    defaultValue: {},\n  })\n  metadata!: CreationOptional<EntityMetadata>;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'admin_go_redirects',\n  timestamps: false,\n})\nexport class AdminGoRedirectEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  name!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  url!: string;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  creatorUserID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  updaterUserID!: UUID;\n\n  @Column({\n    type: DataTypes.INTEGER,\n    allowNull: false,\n    defaultValue: 0,\n  })\n  redirectCount!: number;\n}\n\nconst RESERVED_NAMES = ['name', 'edit'];\nconst MAX_REDIRECT_NAME_LENGTH = 40;\n\nexport function isValidRedirectName(name: string): boolean {\n  return (\n    !RESERVED_NAMES.includes(name) &&\n    !!name.match(/^[a-z0-9_-]+$/) &&\n    name.length <= MAX_REDIRECT_NAME_LENGTH\n  );\n}\n\nexport function canonicalizeRedirectName(name: string): string {\n  return name.toLowerCase();\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type {\n  AdminCRTComingFrom,\n  AdminCRTCommunicationStatus,\n  AdminCRTDecision,\n  AdminCRTIssueType,\n  AdminCRTPriority,\n  UUID,\n} from 'common/types/index.ts';\n\n@Table({\n  tableName: 'admin_crt_customer_issues',\n  timestamps: false,\n})\nexport class AdminCRTCustomerIssueEntity extends Model {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  customerID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  title!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  body!: string;\n\n  @Column({\n    type: DataTypes.ENUM('them', 'us'),\n  })\n  comingFrom!: AdminCRTComingFrom;\n\n  @Column({\n    type: DataTypes.ENUM('done', 'pending', 'accepted', 'rejected'),\n  })\n  decision!: AdminCRTDecision;\n\n  @Column({\n    type: DataTypes.ENUM(\n      'none',\n      'request_acked',\n      'decision_sent',\n      'decision_acked',\n    ),\n  })\n  communicationStatus!: AdminCRTCommunicationStatus;\n\n  @Column({\n    type: DataTypes.TIME,\n    allowNull: true,\n  })\n  lastTouch!: Date | null;\n\n  @Column({\n    type: DataTypes.ENUM('request', 'bug', 'onboarding_step'),\n    allowNull: true,\n  })\n  type!: AdminCRTIssueType;\n\n  @Column({\n    type: DataTypes.ENUM('blocker', 'high', 'low'),\n    allowNull: true,\n  })\n  priority!: AdminCRTPriority;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: true,\n  })\n  assignee!: UUID | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  createdTimestamp!: Date;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n    defaultValue: false,\n  })\n  externallyVisible!: boolean;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { JsonValue, UUID } from 'common/types/index.ts';\n\nexport type AdminCRTIssueChangeDetail = {\n  created?: boolean;\n  updated?: Array<{\n    field: string;\n    oldValue: JsonValue;\n    newValue: JsonValue;\n  }>;\n};\n\n@Table({\n  tableName: 'admin_crt_customer_issue_changes',\n  timestamps: false,\n})\nexport class AdminCRTCustomerIssueChangeEntity extends Model {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  issueID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  userID!: UUID;\n\n  @Column({\n    type: DataTypes.JSONB,\n  })\n  changeDetail!: AdminCRTIssueChangeDetail;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  timestamp!: Date;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'admin_crt_customer_issue_subscriptions',\n  timestamps: false,\n})\nexport class AdminCRTCustomerIssueSubscriptionEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  issueID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  userID!: UUID;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'message_link_previews',\n  timestamps: false,\n})\nexport class MessageLinkPreviewEntity extends Model<\n  InferAttributes<MessageLinkPreviewEntity>,\n  InferCreationAttributes<MessageLinkPreviewEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({\n    type: DataTypes.UUID,\n  })\n  messageID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  url!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  img!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  title!: string | null;\n\n  @Column({\n    type: DataTypes.TEXT,\n  })\n  description!: string | null;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  lastScrapedTimestamp!: CreationOptional<Date>;\n\n  @Column({\n    type: DataTypes.BOOLEAN,\n  })\n  hidden!: boolean;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'application_webhooks',\n  timestamps: false,\n})\nexport class ApplicationWebhookEntity extends Model {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    unique: 'AppURLUniqueness',\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.STRING,\n    allowNull: false,\n    unique: 'AppURLUniqueness',\n  })\n  eventWebhookURL!: string;\n\n  @Column({\n    type: DataTypes.ARRAY(DataTypes.TEXT),\n    defaultValue: null,\n  })\n  eventWebhookSubscriptions!: string[] | null;\n}\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'warm_demo_users',\n  timestamps: false,\n})\nexport class WarmDemoUserEntity extends Model<\n  InferAttributes<WarmDemoUserEntity>,\n  InferCreationAttributes<WarmDemoUserEntity>\n> {\n  @PrimaryKey\n  @Column({\n    defaultValue: DataTypes.UUIDV4,\n    type: DataTypes.UUID,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  demoGroup!: string;\n\n  @Column({\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  })\n  version!: number;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  userID!: string;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  orgID!: string;\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\nimport { DataTypes } from 'sequelize';\n\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'preallocated_thread_ids',\n  timestamps: false,\n})\nexport class PreallocatedThreadIDEntity extends Model<\n  InferAttributes<PreallocatedThreadIDEntity>,\n  InferCreationAttributes<PreallocatedThreadIDEntity>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n    primaryKey: true,\n  })\n  id!: UUID;\n\n  @Column({\n    type: DataTypes.TEXT,\n    allowNull: false,\n  })\n  externalID!: string;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n}\n", "import type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport { Column, Model, PrimaryKey, Table } from 'sequelize-typescript';\nimport type { UUID } from 'common/types/index.ts';\n\nconst PermissionValues = [\n  'thread:read',\n  'thread:send-message',\n  'thread-participant:read',\n  'message:read',\n] as const;\nexport type Permission = (typeof PermissionValues)[number];\n\n@Table({\n  tableName: 'permission_rules',\n  timestamps: false,\n})\nexport class PermissionRuleEntity extends Model<\n  InferAttributes<PermissionRuleEntity>,\n  InferCreationAttributes<PermissionRuleEntity>\n> {\n  @PrimaryKey\n  @Column({\n    type: DataTypes.UUID,\n    defaultValue: DataTypes.UUIDV4,\n  })\n  id!: CreationOptional<UUID>;\n\n  @Column({ type: DataTypes.UUID, allowNull: false })\n  platformApplicationID!: UUID;\n\n  @Column({ type: DataTypes.STRING, allowNull: false })\n  resourceSelector!: string; // Actually a jsonpath.\n\n  @Column({ type: DataTypes.STRING, allowNull: false })\n  userSelector!: string; // Actually a jsonpath.\n\n  @Column({\n    type: DataTypes.ARRAY(DataTypes.ENUM(...PermissionValues)),\n    allowNull: false,\n  })\n  permissions!: Permission[];\n}\n", "import { Table, Column, Model } from 'sequelize-typescript';\nimport type {\n  CreationOptional,\n  InferAttributes,\n  InferCreationAttributes,\n} from 'sequelize';\nimport { DataTypes } from 'sequelize';\nimport type { UUID } from 'common/types/index.ts';\n\n@Table({\n  tableName: 'org_org_members',\n  timestamps: false,\n})\nexport class OrgOrgMembersEntity extends Model<\n  InferAttributes<OrgOrgMembersEntity>,\n  InferCreationAttributes<OrgOrgMembersEntity>\n> {\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  childOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    primaryKey: true,\n    allowNull: false,\n  })\n  parentOrgID!: UUID;\n\n  @Column({\n    type: DataTypes.UUID,\n    allowNull: false,\n  })\n  platformApplicationID!: UUID;\n\n  @Column({\n    type: DataTypes.TIME,\n  })\n  createdTimestamp!: CreationOptional<Date>;\n}\n"],
  "mappings": "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",
  "names": ["verify", "Sequelize", "defaultValue", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "jsonStableStringify", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "crypto", "dayjs", "Table", "Column", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "FeatureFlags", "Model", "Column", "DataTypes", "Table", "Counter", "Gauge", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Counter", "error", "dayjs", "credentials", "dayjs", "key", "crypto", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "crypto", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "DataTypes", "Sequelize", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "DataLoader", "Op", "DataLoader", "DataLoader", "Op", "DataLoader", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Sentry", "uuid", "Counter", "Gauge", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Column", "Table", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "DataTypes", "Column", "Model", "PrimaryKey", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Gauge", "Sequelize", "verify"]
}
