{
  "version": 3,
  "sources": ["opensource/sdk-js/packages/server/dist/cjs/index.js", "opensource/sdk-js/packages/types/dist/cjs/index.js", "scripts/generate-client-auth-token.ts", "server/src/entity/sequelize.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts", "server/src/entity/event/EventEntity.ts", "server/src/entity/message/MessageEntity.ts", "common/types/index.ts", "common/util/index.ts", "common/const/Urls.ts", "common/const/Ids.ts", "opensource/sdk-js/packages/react/common/lib/messageNode.ts", "server/src/entity/org/OrgEntity.ts", "server/src/entity/linked_orgs/LinkedOrgsEntity.ts", "server/src/slack/types.ts", "server/src/entity/user/UserEntity.ts", "server/src/entity/file/FileEntity.ts", "server/src/files/upload.ts", "common/const/Timing.ts", "server/src/logging/Logger.ts", "server/src/entity/application/ApplicationEntity.ts", "server/src/featureflags/index.ts", "common/const/FeatureFlags.ts", "server/src/email/index.ts", "server/src/entity/email_notification/EmailOutboundNotificationEntity.ts", "server/src/email/utils.ts", "common/const/Sizes.ts", "server/src/entity/customer/CustomerEntity.ts", "server/src/logging/flatFormat.ts", "package.json", "server/src/logging/prometheus.ts", "server/src/auth/index.ts", "server/src/util/CordError.ts", "server/src/entity/org_members/OrgMembersEntity.ts", "server/src/entity/s3_bucket/S3BucketLoader.ts", "server/src/entity/s3_bucket/S3BucketEntity.ts", "server/src/entity/base/util.ts", "server/src/files/download.ts", "server/src/entity/message_attachment/MessageAttachmentEntity.ts", "server/src/entity/message_reaction/MessageReactionEntity.ts", "server/src/entity/message_mention/MessageMentionEntity.ts", "server/src/entity/slack_channel/SlackChannelEntity.ts", "server/src/entity/slack_message/SlackMessageEntity.ts", "server/src/entity/user_preference/UserPreferenceEntity.ts", "server/src/entity/task/TaskEntity.ts", "server/src/entity/task_todo/TaskTodoEntity.ts", "server/src/entity/task_assignee/TaskAssigneeEntity.ts", "server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts", "server/src/entity/common.ts", "server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts", "server/src/entity/page/PageEntity.ts", "server/src/entity/thread/ThreadEntity.ts", "server/src/entity/org_members/OrgMembersLoader.ts", "server/src/entity/org/OrgLoader.ts", "server/src/entity/thread_participant/ThreadParticipantEntity.ts", "server/src/entity/page_visitor/PageVisitorEntity.ts", "server/src/entity/session/SessionEntity.ts", "server/src/logging/performance.ts", "server/src/entity/heimdall/HeimdallEntity.ts", "server/src/entity/email_subscription/EmailSubscriptionEntity.ts", "server/src/entity/linked_users/LinkedUsersEntity.ts", "server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts", "server/src/entity/message_notification/MessageOutboundNotificationEntity.ts", "server/src/entity/user/ConsoleUserEntity.ts", "server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts", "server/src/entity/extrernal_asset/ExternalAssetEntity.ts", "server/src/entity/image_variant/ImageVariantEntity.ts", "server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts", "server/src/entity/deploys/DeploysEntity.ts", "server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts", "server/src/entity/notification/NotificationEntity.ts", "server/src/entity/go_redirect/AdminGoRedirectEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts", "server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts", "server/src/entity/application_webhook/ApplicationWebhookEntity.ts", "server/src/entity/demo/WarmDemoUserEntity.ts", "server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts", "server/src/entity/permission/PermisssionRuleEntity.ts", "server/src/entity/org_org_members/OrgOrgMembersEntity.ts"],
  "sourcesContent": ["'use strict';\n\nvar jwt = require('jsonwebtoken');\nvar crypto = require('crypto');\n\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\n\nvar jwt__namespace = /*#__PURE__*/_interopNamespaceDefault(jwt);\n\nfunction getClientAuthToken(project_id, project_secret, payload, options = {}) {\n    if (!payload || !payload.user_id) {\n        // You can't get here in TS -- it's a TS type error -- but not everyone uses\n        // TS.\n        throw new Error('Missing user_id. ' +\n            'A token without a user_id can be misinterpreted as an administrative server auth token ' +\n            '(which should never be given to clients). ' +\n            'If you intended to generate a server auth token, call getServerAuthToken instead.');\n    }\n    return jwt__namespace.sign({ ...payload, project_id }, project_secret, {\n        algorithm: 'HS512',\n        expiresIn: options.expires ?? '1 min',\n    });\n}\nfunction getServerAuthToken(project_id, project_secret, options = {}) {\n    return jwt__namespace.sign({ app_id: project_id }, project_secret, {\n        algorithm: 'HS512',\n        expiresIn: options.expires ?? '1 min',\n    });\n}\nfunction getApplicationManagementAuthToken(customer_id, customer_secret, options = {}) {\n    return jwt__namespace.sign({ customer_id }, customer_secret, {\n        algorithm: 'HS512',\n        expiresIn: options.expires ?? '1 min',\n    });\n}\nfunction getProjectManagementAuthToken(customer_id, customer_secret) {\n    return jwt__namespace.sign({ customer_id }, customer_secret, {\n        algorithm: 'HS512',\n        expiresIn: '1 min',\n    });\n}\n\nasync function fetchCordRESTApi(endpoint, { method = 'GET', project_id, project_secret, api_url = 'https://api-comment-dev.spendflo.com/', body, }) {\n    const encodedBody = typeof body === 'undefined' || typeof body === 'string'\n        ? body\n        : JSON.stringify(body);\n    const serverAuthToken = getServerAuthToken(project_id, project_secret);\n    const response = await fetch(`${api_url}${endpoint}`, {\n        method,\n        body: encodedBody,\n        headers: {\n            Authorization: `Bearer ${serverAuthToken}`,\n            'Content-Type': 'application/json',\n        },\n    });\n    if (response.ok) {\n        return await response.json();\n    }\n    else {\n        const responseText = await response.text();\n        throw new Error(`Error making Cord API call: ${response.status} ${response.statusText} ${responseText}`);\n    }\n}\n\n/**\n * Will validate the signature of the webhook request to ensure the source of\n * the request is Cord and can be trusted.  Will throw an exception if there are\n * any problems with the request validation.\n * @param body The raw request body.  This must be exactly the bytes sent in the\n * body of the request, without JSON deserialization or any other modification.\n * For example, use the `raw` middleware from the `body-parser` library for\n * Express or the `request.text()` function in NextJS.\n * @param cordTimestamp The contents of the `X-Cord-Timestamp` header from the\n * request.\n * @param cordSignature The contents of the `X-Cord-Signature` header from the\n * request.\n * @param projectSecret The project secret.  This is used to validate the\n * request body using the Cord signature proof.  Details can be found here:\n * https://docs.cord.com/reference/events-webhook\n * @param options Options to customize how the validity checking is done.  By\n * default, the maximum accepted age is 5 minutes.\n */\nfunction validateWebhookSignature(body, cordTimestamp, cordSignature, projectSecret, options = {}) {\n    if (!cordSignature) {\n        throw new Error('Webhook signature is missing');\n    }\n    if (!cordTimestamp) {\n        throw new Error('Webhook signature timestamp is missing');\n    }\n    const acceptAgeSeconds = options.acceptAgeSeconds ?? 60 * 5;\n    if (Number.isNaN(Number(cordTimestamp)) ||\n        Math.abs(Date.now() - Number(cordTimestamp)) > 1000 * acceptAgeSeconds) {\n        throw new Error('Webhook signature timestamp invalid or too old.');\n    }\n    const verifyStr = cordTimestamp + ':' + body;\n    const hmac = crypto.createHmac('sha256', projectSecret);\n    hmac.update(verifyStr);\n    const incomingSignature = hmac.digest('base64');\n    if (cordSignature !== incomingSignature) {\n        throw new Error('Unable to verify webhook signature');\n    }\n}\n/**\n * Will validate the signature of the webhook request to ensure the source of\n * the request is Cord, and can be trusted.  Will return false if there are any\n * problems with the request validation.\n * @param body The raw request body.  This must be exactly the bytes sent in the\n * body of the request, without JSON deserialization or any other modification.\n * For example, use the `raw` middleware from the `body-parser` library for\n * Express or the `request.text()` function in NextJS.\n * @param cordTimestamp The contents of the `X-Cord-Timestamp` header from the\n * request.\n * @param cordSignature The contents of the `X-Cord-Signature` header from the\n * request.\n * @param projectSecret The project secret.  This is used to validate the\n * request body using the cord signature proof.  Details can be found here:\n * https://docs.cord.com/reference/events-webhook\n */\nfunction tryValidateWebhookSignature(body, timestamp, signature, clientSecret) {\n    try {\n        validateWebhookSignature(body, timestamp, signature, clientSecret);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\n/**\n * Takes a raw request body, and returns a typed object for handling\n * Cord webhook events.\n * @param body The raw request body.  This must be exactly the bytes sent in the\n * body of the request, without JSON deserialization or any other modification.\n * For example, use the `raw` middleware from the `body-parser` library for\n * Express or the `request.text()` function in NextJS.\n * @returns A typed object to support handling webhook events. See:\n * https://docs.cord.com/reference/events-webhook\n */\nfunction parseWebhookBody(body) {\n    const payload = JSON.parse(body);\n    switch (payload.type) {\n        case 'thread-message-added':\n            return payload;\n        case 'notification-created':\n            return payload;\n        case 'url-verification':\n            return payload;\n        default:\n            throw new Error('Unknown webhook request type.');\n    }\n}\n\nexports.fetchCordRESTApi = fetchCordRESTApi;\nexports.getApplicationManagementAuthToken = getApplicationManagementAuthToken;\nexports.getClientAuthToken = getClientAuthToken;\nexports.getProjectManagementAuthToken = getProjectManagementAuthToken;\nexports.getServerAuthToken = getServerAuthToken;\nexports.parseWebhookBody = parseWebhookBody;\nexports.tryValidateWebhookSignature = tryValidateWebhookSignature;\nexports.validateWebhookSignature = validateWebhookSignature;\n", "'use strict';\n\n// We follow a few patterns in naming to clarify the context in which a string\n// will be displayed, particularly in adding suffixes to keys.  The common\n// suffixes are:\n// * _action - A label on a button, menu item, or the like that causes an action\n//   to happen\n// * _action_success - A message indicating an action succeeded\n// * _action_[failure type] - A message indicating an action failed or cannot be\n//   attempted\n// * _status - A message indicating the status of an item\n// * _placeholder - A label that shows as a placeholder in an input\n// * _tooltip - A tooltip that shows on a button, menu item, or the like\n// NOTE: These strings are here for documentation, but they will not be used at\n// runtime.  The Cord SDK comes with a compiled-in copy of these strings which\n// will be used instead.  If you want to change the value for any of these\n// strings, use the `translations` configuration option as described in\n// https://docs.cord.com/js-apis-and-hooks/initialization#translations.\nconst resources = {\n    en: {\n        default: {},\n        composer: {\n            // The placeholder for sending a message that will create a new thread\n            send_message_placeholder: 'Add a comment...',\n            // The placeholder for sending a message to a thread with messages in it\n            reply_placeholder: 'Reply...',\n            // The placeholder for editing a message\n            edit_message_placeholder: 'Edit message...',\n            // The tooltip for the \"mention someone\" menu button\n            mention_someone_tooltip: 'Mention someone',\n            // The text of the button that starts an annotation\n            annotate_action: 'Annotate',\n            // The tooltip for the annotation button if there is already an annotation\n            // and clicking the button will cause it to be replaced\n            replace_annotation_tooltip: 'Replace annotation',\n            // The tooltip for the button that adds an emoji to the message\n            add_emoji_tooltip: 'Add emoji',\n            // The tooltip for the button that removes a task from the message\n            remove_task_tooltip: 'Remove task',\n            // The tooltip for the button that adds a task to the message\n            create_task_tooltip: 'Create task',\n            // The tooltip for the button that attaches a file to the message\n            attach_file_tooltip: 'Attach file',\n            // The tooltip for the button that removes an attached file from the\n            // message\n            remove_file_action: 'Remove',\n            // The text of the button that initiates the Slack linking flow\n            connect_to_slack_action: 'Connect your Slack team',\n            // The instructions shown in a message while the Slack linking flow is in\n            // progress\n            slack_follow_instructions: 'Follow the instructions',\n            // The text of the status indicator shown when a previous message is being\n            // edited\n            editing_status: 'Editing',\n            // The text of the button that cancels editing a previous message\n            cancel_editing_action: 'Cancel',\n            // The text of the status indicator when the composer is disabled because\n            // a thread is resolved\n            resolved_status: 'Resolved',\n            // The text of the button in the composer that unresolves a thread\n            unresolve_action: 'Reopen to reply',\n            // The text of the pill shown for an annotation when the annotation has no\n            // more specific label\n            annotation: 'Your annotation',\n            // The text of the button that removes an annotation from a message\n            remove_annotation_action: 'Remove',\n            // The error text shown when a message failed to send\n            send_message_action_failure: 'Failed to send message. <restore>Restore the message</restore>',\n            // The text shown when a user is dragging files over the composer\n            drag_and_drop_files_tooltip: 'Drop Files',\n            attach_file_action_failure: 'Failed to upload file: {{message}}',\n        },\n        thread: {\n            // The title of the placeholder shown in an empty thread\n            placeholder_title: 'Chat with your team, right here',\n            // The body of the placeholder shown in an empty thread\n            placeholder_body: \"Ask a question, give feedback, or just say 'Hi'. Comments can be seen by anyone who can access this page.\",\n            // The status text shown next to a thread where the first message is\n            // unread\n            new_status: 'New',\n            // The text of the link to add a reply to a thread\n            reply_action: 'Reply...',\n            // The status text shown below a thread when it has unread replies\n            new_replies_status_one: '1 unread',\n            new_replies_status_other: '{{count}} unread',\n            // The status text shown below a thread when it has no unread replies\n            replies_status_one: '1 reply',\n            replies_status_other: '{{count}} replies',\n            // The text of the link that shows more messages in a thread when the list\n            // of messages has been paginated\n            show_more_one: 'Show 1 more',\n            show_more_other: 'Show {{count}} more',\n            // The text of the menu item that marks all messages in a thread as read\n            mark_as_read_action: 'Mark as read',\n            // The text of the menu item that shares a thread with Slack\n            share_via_slack_action: 'Share with Slack',\n            // The text of the menu item when an empty thread is set to\n            share_via_slack_channel_action: 'Share to #{{slackChannel}}',\n            // The text of the menu item that shares a thread with Slack when the user\n            // has not linked their Slack account\n            share_via_slack_action_not_connected: 'Connect to share',\n            // The text shown after sharing a thread to Slack succeeds\n            share_via_slack_action_success: 'Shared to #{{slackChannel}}',\n            // The placeholder for the input box for choosing a Slack channel to share\n            // a thread to\n            share_via_slack_channel_placeholder: 'Type or select',\n            // The text shown when sharing a thread to Slack and there are no public\n            // channels in the Slack workspace the user has linked to\n            share_via_slack_no_channels: 'No public channels found',\n            // The text shown when sharing a thread to Slack fails for an unknown reason\n            share_via_slack_action_failure: 'Error sharing to Slack, please try again',\n            // The text of the menu item that shares a thread by email\n            share_via_email_action: 'Share via email',\n            // The text of the button that shares a thread by email\n            share_via_email_button_action: '$t(share_via_email_action)',\n            // The text of the header for the email sharing dialog\n            share_via_email_header: '$t(share_via_email_action)',\n            // The text shown after sharing a thread to email succeeds\n            share_via_email_action_success: 'Shared to {{email}}',\n            // The warning text shown to inform the user that when sharing a thread by\n            // email, a screenshot will be sent with the email\n            share_via_email_screenshot_warning: 'A screenshot of this page will be included in the email.',\n            // The placeholder for the input box for choosing an email address to\n            // share a thread with\n            share_via_email_placeholder: 'email@email.com',\n            // The text of the menu item that subscribes the user to a thread\n            subscribe_action: 'Subscribe',\n            // The text shown after a user subscribes to a thread\n            subscribe_action_success: \"You've subscribed to this thread\",\n            // The text of the menu item that unsubscribes the user from a thread\n            unsubscribe_action: 'Unsubscribe',\n            // The text shown after a user unsubscribes from a thread\n            unsubscribe_action_success: \"You've unsubscribed from this thread\",\n            // The text of the menu item that resolves a thread\n            resolve_action: 'Resolve',\n            // The text shown after a user resolves a thread\n            resolve_action_success: 'You resolved this thread',\n            // The status text shown on a resolved thread\n            resolved_status: 'Resolved',\n            // The text of the menu item that unresolves a thread\n            unresolve_action: 'Reopen',\n            // The text shown after a user unresolves a thread\n            unresolve_action_success: 'You have reopened this thread',\n            // The text shown on the action to collapse an expanded thread\n            collapse_action: 'Collapse thread',\n            // The text shown next to the facepile of users that are currently typing\n            // into a thread\n            typing_users_status: 'Typing',\n        },\n        threads: {\n            // The title placeholder text shown when no threads are shown in the\n            // threads component\n            placeholder_title: 'Be the first to add a comment',\n            // The body placeholder text shown when no threads are shown in a threaded\n            // comments component\n            placeholder_body: \"Ask a question, give feedback, or just say 'Hi'. Comments can be seen by anyone who can access this page.\",\n        },\n        thread_list: {\n            // The title placeholder text shown when no threads are shown in a thread\n            // list\n            placeholder_title: 'Be the first to add a comment',\n            // The body placeholder text shown when no threads are shown in a thread\n            // list\n            placeholder_body: \"Ask a question, give feedback, or just say 'Hi'. Comments can be seen by anyone who can access this page.\",\n            // The text of the link that toggles the display of resolved threads from\n            // not showing to showing\n            show_resolved_threads_action: 'Show resolved threads',\n            // The text of the link that toggles the display of resolved threads from\n            // showing to not showing\n            hide_resolved_threads_action: 'Hide resolved threads',\n        },\n        thread_preview: {\n            // The text of the link that reveals the replies to a thread when there\n            // are no unread messages in the thread\n            show_replies_action_read_one: '1 reply',\n            show_replies_action_read_other: '{{count}} replies',\n            // The text of the link that reveals the replies to a thread when there\n            // are unread messages in the thread\n            show_replies_action_unread_one: '1 new reply',\n            show_replies_action_unread_other: '{{count}} new replies',\n            // The text of the link that hides the replies to a thread\n            hide_replies_action: 'Hide replies',\n            // The text of the link that starts composing a reply to the thread\n            reply_action: 'Reply',\n        },\n        threaded_comments: {\n            // The title placeholder text shown when no threads are shown in the unresolved threads portion of a\n            // threaded comments component\n            placeholder_title: 'Be the first to add a comment',\n            // The body placeholder text shown when no threads are shown in a threaded\n            // comments component\n            placeholder_body: \"Ask a question, give feedback, or just say 'Hi'. Comments can be seen by anyone who can access this page.\",\n            // The title placeholder text shown when no threads are shown in the\n            // resolved threads portion of a threaded comments component\n            resolved_placeholder_title: 'This is where resolved comments will appear',\n            // The body placeholder text shown when no threads are shown in the\n            // resolved threads portion of a threaded comments component\n            resolved_placeholder_body: 'Resolved comments can be seen by anyone who can access this page.',\n            // The text of the button that shows unresolved threads\n            show_unresolved: 'Open',\n            // The text of the button that shows resolved threads\n            show_resolved: 'Resolved',\n            // The text of the link that toggles the display of resolved threads from\n            // not showing to showing\n            show_resolved_threads_action: '$t(thread_list:show_resolved_threads_action)',\n            // The text of the link that toggles the display of resolved threads from\n            // showing to not showing\n            hide_resolved_threads_action: '$t(thread_list:hide_resolved_threads_action)',\n            // The text of the link that shows additional threads when the list of\n            // threads has been paginated\n            load_more_action: 'Load more',\n            // The text of the link that reveals the replies to a thread when there\n            // are no unread messages in the thread\n            show_replies_action_read_one: '1 reply',\n            show_replies_action_read_other: '{{count}} replies',\n            // The text of the link that reveals the replies to a thread when there\n            // are unread messages in the thread\n            show_replies_action_unread_one: '1 new reply',\n            show_replies_action_unread_other: '{{count}} new replies',\n            // The text of the link that hides the replies to a thread\n            hide_replies_action: 'Hide replies',\n            // The text of the link that shows more replies in a thread when the list\n            // of messages has been paginated\n            show_more_replies_action: 'Show more',\n            // The text of the link that starts composing a reply to the thread\n            reply_action: 'Reply',\n            // The status text shown on a resolved thread\n            resolved_status: '$t(thread:resolved_status)',\n            // The text of the menu item that unresolves a thread\n            unresolve_action: '$t(thread:unresolve_action)',\n        },\n        message: {\n            // The text of the link to download an attached file\n            download_action: 'Download',\n            // The error text shown when an attached file that is not an image cannot\n            // be displayed\n            unable_to_display_document: 'Unable to display document',\n            // The error text shown when an attached image file cannot be displayed\n            unable_to_display_image: 'Unable to display image',\n            // The text shown next to a message that is currently being edited\n            editing_status: '(Editing)',\n            // The text shown next to a message that was previously edited\n            edited_status: '(Edited)',\n            // The text of the menu item that starts editing of a message\n            edit_action: 'Edit',\n            // The text of the menu item that starts editing of a message in a\n            // resolved thread\n            edit_resolved_action: 'Reopen to edit',\n            // The text of the menu item that deletes a message\n            delete_action: 'Delete',\n            // The status text that indicates a message was deleted\n            deleted_message: '{{user.displayName}} deleted a message',\n            // The status text that indicates one or more messages were deleted\n            deleted_messages_one: '{{user.displayName}} deleted a message',\n            deleted_messages_other: '{{user.displayName}} deleted {{count}} messages',\n            // The tooltip on the indicator that a message arrived in Cord from Slack\n            sent_via_slack_tooltip: 'Sent via Slack',\n            // The tooltip on the indicator that a message arrived in Cord from email\n            sent_via_email_tooltip: 'Sent via Email',\n            // The text of the link that undeletes a message\n            undo_delete_action: 'Undo',\n            // The text of the menu item that adds a reaction to a message\n            add_reaction_action: 'Add reaction',\n            // The tooltip for the options menu on a message\n            message_options_tooltip: 'Options',\n            // The status text shown when a screenshot is loading\n            screenshot_loading_status: 'Loading',\n            // The status text shown when a screenshot is unavailable\n            screenshot_missing_status: 'No screenshot found',\n            // The text shown on the button that displays a screenshot at a larger\n            // size\n            screenshot_expand_action: 'Image',\n            // The tooltip shown on the button that displays a screenshot at a larger\n            // size\n            screenshot_expand_tooltip: 'Click to expand',\n            // The status text showing who has seen a message when the list of users\n            // is short enough to show every user individually\n            seen_by_status: 'Seen by {{users, list(style: short)}}',\n            // The status text showing who has seen a message when the list of users\n            // is too long to show every user individually\n            seen_by_status_overflow_one: 'Seen by {{users, list(style: narrow)}}, and 1 other',\n            seen_by_status_overflow_other: 'Seen by {{users, list(style: narrow)}}, and {{count}} others',\n            // The text of the button in the media modal that copies a link to the\n            // media\n            image_modal_copy_link_action: 'Link',\n            // The tooltip for the button in the media modal that copies a link to the\n            // media\n            image_modal_copy_link_tooltip: 'Click to copy',\n            // The text shown after a user copies a link in the media modal\n            image_modal_copy_link_success: 'Copied to clipboard',\n            // The status text shown below a blurred image in the media modal\n            image_modal_blurred_status: 'Potentially confidential content has been blurred',\n            // The header text shown in the media modal for a screenshot accompanying\n            // an annotation\n            image_modal_annotation_header: '{{user.displayName}} annotated this <datespan>on {{date}}</datespan>',\n            // The header text shown in the media modal for a normal file attachment\n            image_modal_attachment_header: '{{user.displayName}} attached this <datespan>on {{date}}</datespan>',\n            // The dayjs date format string used to display the date in the media\n            // modal header\n            image_modal_header_date_format: 'D MMM [at] h:mm A',\n            // The tooltip for a set of message reactions.\n            reaction_with_emoji_name_tooltip_one: '{{users, list(style: narrow)}} reacted with {{emojiName}}',\n            reaction_with_emoji_name_tooltip_other: '{{users, list(style: narrow)}} reacted with {{emojiName}}',\n            // The tooltip for a set of message reactions where the viewer is one of\n            // the users that reacted.\n            reaction_with_emoji_name_including_viewer_tooltip_one: '{{users, list(style: narrow)}} reacted with {{emojiName}}',\n            reaction_with_emoji_name_including_viewer_tooltip_other: '{{users, list(style: narrow)}} reacted with {{emojiName}}',\n            // The strings used to display a relative timestamp on a message\n            timestamp: {\n                in_less_than_a_minute: 'in less than a minute',\n                just_now: 'just now',\n                in_minutes_one: 'in 1 min',\n                in_minutes_other: 'in {{count}} mins',\n                minutes_ago_one: '1 min ago',\n                minutes_ago_other: '{{count}} mins ago',\n                in_hours_one: 'in 1 hour',\n                in_hours_other: 'in {{count}} hours',\n                hours_ago_one: '1 hour ago',\n                hours_ago_other: '{{count}} hours ago',\n                yesterday_format: '[yesterday]',\n                last_week_format: 'dddd',\n                tomorrow_format: '[tomorrow]',\n                next_week_format: 'dddd',\n                this_year_format: 'MMM D',\n                other_format: 'MMM D, YYYY',\n            },\n            // The strings used to display an absolute timestamp on a message\n            absolute_timestamp: {\n                today_format: 'h:mm A',\n                yesterday_format: 'MMM D',\n                last_week_format: 'MMM D',\n                tomorrow_format: 'MMM D',\n                next_week_format: 'MMM D',\n                this_year_format: 'MMM D',\n                other_format: 'MMM D, YYYY',\n                tooltip: '{{date, datetime(dateStyle: short; timeStyle: medium)}}',\n            },\n        },\n        // The message_templates namespace is used for translating the body of Cord\n        // messages by marking the messages with a translationKey.  See\n        // https://docs.cord.com/customization/translations for more details on message\n        // translation.\n        message_templates: {\n            cord: {\n                // The message shown when a user resolves a thread\n                thread_resolved: [\n                    {\n                        type: 'p',\n                        children: [\n                            {\n                                type: 'mention',\n                                user: { id: '{{mention1.userID}}' },\n                                children: [{ text: '{{mention1.text}}' }],\n                            },\n                            { text: ' resolved this thread' },\n                        ],\n                    },\n                ],\n                // The message shown when a user unresolves a thread\n                thread_unresolved: [\n                    {\n                        type: 'p',\n                        children: [\n                            {\n                                type: 'mention',\n                                user: { id: '{{mention1.userID}}' },\n                                children: [{ text: '{{mention1.text}}' }],\n                            },\n                            { text: ' reopened this thread' },\n                        ],\n                    },\n                ],\n            },\n        },\n        sidebar: {\n            // The text of the button that starts composing a message in a new thread\n            add_comment_action: 'Add comment',\n            // The status text shown above the composer for a new thread\n            add_comment_instruction: 'Add your comment',\n            // The tooltip for the button that closes the sidebar\n            close_sidebar_tooltip: 'Close',\n            // The tooltip for the button that closes the settings in the sidebar\n            close_settings_tooltip: 'Close',\n            // The tooltip for the button that shows the inbox\n            inbox_tooltip: 'All updates',\n            // The text of the button that shows the thread options menu\n            thread_options_menu: 'Options',\n            // The text shown above the list of threads\n            thread_list_title: 'Comments',\n            // The text of the button that returns from a thread to the thread list\n            return_to_list_action: 'All',\n            // The text shown above the composer that suggests annotating the page.\n            // The <l> tag will cause the contents to be a link that starts\n            // annotating.\n            annotation_nudge: 'Why not try <l>annotating part of the page</l>?',\n        },\n        notifications: {\n            // The title of the notifications list\n            notifications_title: 'Notifications',\n            // The text of the button that marks all notifications as read\n            mark_all_as_read_action: 'Mark all as read',\n            // The text of the menu item that marks one notification as read\n            mark_as_read_action: 'Mark as read',\n            // The text of the menu item that marks one notification as unread\n            mark_as_unread_action: 'Mark as unread',\n            // The text of the menu item that deletes a notification\n            delete_action: 'Delete notification',\n            // The title text shown when there are no notifications to display\n            empty_state_title: 'You\u2019re all caught up',\n            // The body text shown when there are no notifications to display\n            empty_state_body: 'When someone @mentions you or replies to your comments, we\u2019ll let you know here.',\n            // The tooltip for the button that shows the notification options\n            notification_options_tooltip: 'Options',\n            // The strings used to display a relative timestamp on a message\n            timestamp: {\n                in_less_than_a_minute: 'In less than a minute',\n                just_now: 'Just now',\n                in_minutes_one: 'In 1 min',\n                in_minutes_other: 'In {{count}} mins',\n                minutes_ago_one: '1 min ago',\n                minutes_ago_other: '{{count}} mins ago',\n                in_hours_one: 'In 1 hour',\n                in_hours_other: 'In {{count}} hours',\n                hours_ago_one: '1 hour ago',\n                hours_ago_other: '{{count}} hours ago',\n                yesterday_format: '[Yesterday at] h:mma',\n                last_week_format: 'dddd',\n                tomorrow_format: '[Tomorrow at] h:mma',\n                next_week_format: 'dddd',\n                this_year_format: 'MMM D, YYYY',\n                other_format: 'MMM D, YYYY',\n            },\n            absolute_timestamp: {\n                today_format: 'h:mm A',\n                yesterday_format: 'MMM D',\n                last_week_format: 'MMM D',\n                tomorrow_format: 'MMM D',\n                next_week_format: 'MMM D',\n                this_year_format: 'MMM D',\n                other_format: 'MMM D, YYYY',\n                tooltip: '{{date, datetime(dateStyle: short; timeStyle: medium)}}',\n            },\n        },\n        // The message_templates namespace is used for translating the body of Cord\n        // notifications.\n        notification_templates: {\n            cord: {\n                // A notification that a single user reacted to a message\n                reaction_single: '<user>{{senders.0.displayName}}</user> reacted {{reaction}} to your message',\n                // A notification that two users reacted to a message\n                reaction_double: '<user>{{senders.0.displayName}}</user> <bold>and</bold> <user>{{senders.1.displayName}}</user> reacted {{reaction}} to your message',\n                // A notification that three or more users reacted to a message\n                reaction_overflow_one: '<user>{{senders.0.displayName}}</user> <bold>and 1 other</bold> reacted {{reaction}} to your message',\n                reaction_overflow_other: '<user>{{senders.0.displayName}}</user> <bold>and {{count}} others</bold> reacted {{reaction}} to your message',\n                // A notification that a user replied to a message\n                reply: '<user>{{senders.0.displayName}}</user> replied on <bold>{{threadName}}</bold>',\n                // A notification that a user mentioned the viewer in a message\n                reply_mention: '<user>{{senders.0.displayName}}</user> mentioned you in <bold>{{threadName}}</bold>',\n                // A notification that a user mentioned and assigned the viewer in a\n                // message\n                reply_mention_assign: '<user>{{senders.0.displayName}}</user> mentioned you and assigned you to a task in <bold>{{threadName}}</bold>',\n                // A notification that a user mentioned and unassigned the viewer in a\n                // message\n                reply_mention_unassign: '<user>{{senders.0.displayName}}</user> mentioned you and unassigned you from a task in <bold>{{threadName}}</bold>',\n                // A notification that a user mentioned the viewer in a message and\n                // attached a file to that message\n                reply_mention_attachment: '<user>{{senders.0.displayName}}</user> mentioned you and sent you a file in <bold>{{threadName}}</bold>',\n                // A notification that a user assigned a task to the viewer in a message\n                reply_assign: '<user>{{senders.0.displayName}}</user> assigned you to a task in <bold>{{threadName}}</bold>',\n                // A notification that a user unassigned a task from the viewer in a\n                // message\n                reply_unassign: '<user>{{senders.0.displayName}}</user> unassigned you from a task in <bold>{{threadName}}</bold>',\n                // A notification that a user created a new thread\n                thread_create: '<user>{{senders.0.displayName}}</user> created a new thread named <bold>{{threadName}}</bold>',\n                // A notification that a user resolved a thread\n                thread_resolve: '<user>{{senders.0.displayName}}</user> resolved the thread <bold>{{threadName}}</bold>',\n                // A notification that a user unresolved a thread\n                thread_unresolve: '<user>{{senders.0.displayName}}</user> reopened the thread <bold>{{threadName}}</bold>',\n            },\n        },\n        presence: {\n            // The string shown when a user is currently active\n            viewing: 'Viewing',\n            // The strings used to display a relative timestamp in a presence display\n            timestamp: {\n                in_less_than_a_minute: 'Viewing in less than a minute',\n                just_now: 'Viewed just now',\n                in_minutes_one: 'Viewing in 1 min',\n                in_minutes_other: 'Viewing in {{count}} mins',\n                minutes_ago_one: 'Viewed 1 min ago',\n                minutes_ago_other: 'Viewed {{count}} mins ago',\n                in_hours_one: 'Viewing in 1 hour',\n                in_hours_other: 'Viewing in {{count}} hours',\n                hours_ago_one: 'Viewed 1 hour ago',\n                hours_ago_other: 'Viewed {{count}} hours ago',\n                yesterday_format: '[Viewed yesterday at] h:mma',\n                last_week_format: '[Viewed] dddd',\n                tomorrow_format: '[Viewing tomorrow at] h:mma',\n                next_week_format: '[Viewing] dddd',\n                this_year_format: '[Viewed] MMM D, YYYY',\n                other_format: '[Viewed] MMM D, YYYY',\n            },\n        },\n        inbox: {\n            // The text of the link that navigates to the page a thread is on\n            go_to_page_action: 'Go to page',\n            // The tooltip of the button that closes the inbox\n            close_tooltip: 'Close',\n            // The title of the list of threads in the inbox\n            inbox_title: 'Your Inbox',\n            // The title of the list of threads across all locations\n            all_pages_title: 'All Pages',\n            // The tooltip of the button that displays the settings\n            settings_tooltip: 'Collaboration settings',\n            // The text of the button that marks all threads in the inbox as read\n            mark_all_as_read_action: 'Mark all as read',\n            // The title text shown when there are no threads in the inbox\n            empty_state_title: 'You\u2019re all caught up',\n            // The body text shown when there are no threads in the inbox\n            empty_state_body: 'When someone @mentions you or replies to your comments, we\u2019ll let you know here.',\n        },\n        annotation: {\n            // The instructional text shown when annotating\n            click_prompt: 'Click to comment',\n            // The tooltip shown next to the cursor when annotating an area that does\n            // not have selectable text\n            click_tooltip: 'Click to comment',\n            // The tooltip shown next to the cursor when annotating an area that has\n            // selectable text\n            click_or_select_tooltip: 'Click or select text to comment',\n            // The text shown on the link to cancel annotating\n            cancel_annotating: 'Cancel',\n            // The text of the pill shown for an annotation when the annotation has no\n            // more specific label\n            annotation: 'Annotation',\n            // The text shown on the button that unhides the annotation from the page\n            keep_pin_on_page_action: 'Keep pin on page',\n            // The status text shown when the element the annotation was associated\n            // with cannot be found on the page\n            changed: 'The annotated area has changed',\n            // The text for the link next to an annotation pin that hides the\n            // annotation from the page\n            hide_action: 'Hide for you',\n            // The text for the link that shows the message associated with an\n            // annotation\n            show_message_action: 'Click to view message',\n        },\n        user: {\n            // The text shown for the viewer\n            viewer_user: '{{user.displayName}} (you)',\n            // The text shown for the viewer when further name context is needed\n            viewer_user_subtitle: '{{user.secondaryDisplayName}}',\n            // The text shown for a non-viewer user\n            other_user: '{{user.displayName}}',\n            // The text shown for a non-viewer user when further name context is\n            // needed\n            other_user_subtitle: '{{user.secondaryDisplayName}}',\n            // Text needed for showing simple first person indication\n            // (i.e. for reactions where you have reacted)\n            viewer_user_short: 'You',\n        },\n        // Cord's emoji picker is an external library, which doesn't use i18next,\n        // nor conforms to Cord's patterns. You can still translate these strings\n        // like you would translate any other string in this file.\n        // For more context, see https://www.npmjs.com/package/emoji-picker-element#internationalization\n        emoji_picker: {\n            categories: {\n                custom: 'Custom',\n                'smileys-emotion': 'Smileys and emoticons',\n                'people-body': 'People and body',\n                'animals-nature': 'Animals and nature',\n                'food-drink': 'Food and drink',\n                'travel-places': 'Travel and places',\n                activities: 'Activities',\n                objects: 'Objects',\n                symbols: 'Symbols',\n                flags: 'Flags',\n            },\n            categoriesLabel: 'Categories',\n            emojiUnsupportedMessage: 'Your browser does not support color emoji.',\n            favoritesLabel: 'Favorites',\n            loadingMessage: 'Loading\u2026',\n            networkErrorMessage: 'Could not load emoji.',\n            regionLabel: 'Emoji picker',\n            searchDescription: 'When search results are available, press up or down to select and enter to choose.',\n            searchLabel: 'Search',\n            searchResultsLabel: 'Search results',\n            skinToneDescription: 'When expanded, press up or down to select and enter to choose.',\n            skinToneLabel: 'Choose a skin tone (currently {skinTone})',\n            skinTones: [\n                'Default',\n                'Light',\n                'Medium-Light',\n                'Medium',\n                'Medium-Dark',\n                'Dark',\n            ],\n            skinTonesLabel: 'Skin tones',\n        },\n    },\n    // Cord's emoji picker is an external library, which doesn't use i18next, thus it\n    // doesn't support \"ci mode\" out of the box. So we add our own:\n    cimode: {\n        emoji_picker: {\n            categories: {\n                custom: 'custom',\n                'smileys-emotion': 'smileys-emotion',\n                'people-body': 'people-body',\n                'animals-nature': 'animals-nature',\n                'food-drink': 'food-drink',\n                'travel-places': 'travel-places',\n                activities: 'activities',\n                objects: 'objects',\n                symbols: 'symbols',\n                flags: 'flags',\n            },\n            categoriesLabel: 'categoriesLabel',\n            emojiUnsupportedMessage: 'emojiUnsupportedMessage',\n            favoritesLabel: 'favoritesLabel',\n            loadingMessage: 'loadingMessage',\n            networkErrorMessage: 'networkErrorMessage',\n            regionLabel: 'regionLabel',\n            searchDescription: 'searchDescription',\n            searchLabel: 'searchLabel',\n            searchResultsLabel: 'searchResultsLabel',\n            skinToneDescription: 'skinToneDescription',\n            skinToneLabel: 'skinToneLabel',\n            skinTones: [\n                'Default',\n                'Light',\n                'Medium-Light',\n                'Medium',\n                'Medium-Dark',\n                'Dark',\n            ],\n            skinTonesLabel: 'skinTonesLabel',\n        },\n    },\n};\n\n// Fast comparison of two Locations\nfunction isEqualLocation(a, b) {\n    // If `a` and `b` are the same object (or both are undefined) -> true\n    if (a === b) {\n        return true;\n    }\n    // If either `a` or `b` is undefined -> false\n    // (If they are both undefined, we returned true above.)\n    if (!a || !b) {\n        return false;\n    }\n    // Get all keys of `a` and check that `b` has the same number of keys.\n    const aKeys = Object.keys(a);\n    if (aKeys.length !== Object.keys(b).length) {\n        return false;\n    }\n    // If `b` does not have all the keys of `a` -> false\n    if (!aKeys.every((aKey) => Object.prototype.hasOwnProperty.call(b, aKey))) {\n        return false;\n    }\n    // We know that `a` and `b` have identical keys. Return whether the values are\n    // identical, too.\n    return aKeys.every((key) => a[key] === b[key]);\n}\n\nexports.MessageNodeType = void 0;\n(function (MessageNodeType) {\n    MessageNodeType[\"ASSIGNEE\"] = \"assignee\";\n    MessageNodeType[\"BULLET\"] = \"bullet\";\n    MessageNodeType[\"CODE\"] = \"code\";\n    MessageNodeType[\"LINK\"] = \"link\";\n    MessageNodeType[\"MENTION\"] = \"mention\";\n    MessageNodeType[\"NUMBER_BULLET\"] = \"number_bullet\";\n    MessageNodeType[\"PARAGRAPH\"] = \"p\";\n    MessageNodeType[\"QUOTE\"] = \"quote\";\n    MessageNodeType[\"TODO\"] = \"todo\";\n    MessageNodeType[\"MARKDOWN\"] = \"markdown\";\n})(exports.MessageNodeType || (exports.MessageNodeType = {}));\nconst MARKS = ['bold', 'italic', 'underline', 'code'];\n// Styled block nodes are nodes that themselves contain block nodes, rather than\n// block nodes that contain inline nodes only (ie, text).\nconst STYLED_BLOCK_TYPES = [\n    exports.MessageNodeType.BULLET,\n    exports.MessageNodeType.NUMBER_BULLET,\n    exports.MessageNodeType.TODO,\n    exports.MessageNodeType.QUOTE,\n];\nfunction isStyledBlockType(t) {\n    return STYLED_BLOCK_TYPES.includes(t);\n}\n\nconst COMPOSER_SIZE = ['small', 'medium', 'large'];\nconst VIRTUALISED_LISTS = [\n    'monacoEditor',\n    'reactTree',\n    'konvaCanvas',\n];\nconst BLUR_DISPLAY_LOCATIONS = ['everywhere', 'outside_page'];\nconst CAPTURE_SCREENSHOT_EVENT = [\n    'new-annotation',\n    'share-via-email',\n    'new-thread',\n    'new-message',\n];\nfunction isCaptureScreenshotEvent(captureEvent) {\n    return (CAPTURE_SCREENSHOT_EVENT.indexOf(captureEvent) !== -1);\n}\nfunction isBlurDisplayLocation(behavior) {\n    return BLUR_DISPLAY_LOCATIONS.indexOf(behavior) !== -1;\n}\nconst ANNOTATION_MODES = [\n    'everywhere',\n    'custom_targets_only',\n    'none',\n];\nfunction isAnnotationMode(mode) {\n    return ANNOTATION_MODES.indexOf(mode) !== -1;\n}\n// declare global {\n//   interface Element {\n//     addEventListener<K extends keyof CordCustomEvents>(\n//       type: K,\n//       listener: (this: Document, event: CordCustomEvents[K]) => void,\n//     ): void;\n//   }\n// }\n// type FT = Parameters<typeof f>;\n// type CustomEvents<T extends Record<string, Function>> = {\n//   [P in keyof T]: Parameters<T[P]>;\n// };\n// type TextComponentCustomEvents = CustomEvents<TextComponentEvents>;\nconst CORD_ANNOTATION_LOCATION_DATA_ATTRIBUTE = 'data-cord-annotation-location';\nconst CORD_ANNOTATION_ALLOWED_DATA_ATTRIBUTE = 'data-cord-annotation-allowed';\nconst CORD_COMPONENT_WRAPS_DOM_DATA_ATTRIBUTE = 'data-cord-component-wraps-dom';\nconst CORD_SCREENSHOT_TARGET_DATA_ATTRIBUTE = 'data-cord-screenshot-target';\nfunction locationJson(c) {\n    return JSON.stringify(Object.fromEntries(Object.entries(c)\n        .filter(([_key, value]) => value !== undefined)\n        .sort(([keyA], [keyB]) => (keyA < keyB ? -1 : 1))));\n}\n\nexports.ANNOTATION_MODES = ANNOTATION_MODES;\nexports.BLUR_DISPLAY_LOCATIONS = BLUR_DISPLAY_LOCATIONS;\nexports.CAPTURE_SCREENSHOT_EVENT = CAPTURE_SCREENSHOT_EVENT;\nexports.COMPOSER_SIZE = COMPOSER_SIZE;\nexports.CORD_ANNOTATION_ALLOWED_DATA_ATTRIBUTE = CORD_ANNOTATION_ALLOWED_DATA_ATTRIBUTE;\nexports.CORD_ANNOTATION_LOCATION_DATA_ATTRIBUTE = CORD_ANNOTATION_LOCATION_DATA_ATTRIBUTE;\nexports.CORD_COMPONENT_WRAPS_DOM_DATA_ATTRIBUTE = CORD_COMPONENT_WRAPS_DOM_DATA_ATTRIBUTE;\nexports.CORD_SCREENSHOT_TARGET_DATA_ATTRIBUTE = CORD_SCREENSHOT_TARGET_DATA_ATTRIBUTE;\nexports.MARKS = MARKS;\nexports.VIRTUALISED_LISTS = VIRTUALISED_LISTS;\nexports.isAnnotationMode = isAnnotationMode;\nexports.isBlurDisplayLocation = isBlurDisplayLocation;\nexports.isCaptureScreenshotEvent = isCaptureScreenshotEvent;\nexports.isEqualLocation = isEqualLocation;\nexports.isStyledBlockType = isStyledBlockType;\nexports.locationJson = locationJson;\nexports.translationResources = resources;\n", "#!/usr/bin/env -S node --enable-source-maps\r\n\r\nimport 'dotenv/config.js';\r\nimport yargs from 'yargs';\r\nimport { getClientAuthToken } from '@cord-sdk/server';\r\nimport { initSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { CORD_APPLICATION_ID } from 'common/const/Ids.ts';\r\n\r\nasync function main() {\r\n  const argv = yargs(process.argv.slice(2)).option({\r\n    app: {\r\n      description: 'application ID to generate the client auth token for',\r\n      type: 'string',\r\n      default: CORD_APPLICATION_ID,\r\n    },\r\n    user: {\r\n      description: 'user ID to generate the client auth token for',\r\n      type: 'string',\r\n      demandOption: true,\r\n    },\r\n    org: {\r\n      description: 'org ID to generate the client auth token for',\r\n      type: 'string',\r\n      default: 'cord',\r\n    },\r\n    expires: {\r\n      description: 'how long the token should be valid for',\r\n      type: 'string',\r\n    },\r\n  }).argv;\r\n\r\n  await initSequelize('script');\r\n\r\n  const application = await ApplicationEntity.findByPk(argv.app);\r\n  if (!application) {\r\n    throw new Error(`Platform application ${argv.app} not found`);\r\n  }\r\n\r\n  const clientAuthToken = getClientAuthToken(\r\n    argv.app,\r\n    application.sharedSecret,\r\n    {\r\n      user_id: argv.user,\r\n      group_id: argv.org,\r\n    },\r\n    { expires: argv.expires },\r\n  );\r\n\r\n  console.log(clientAuthToken);\r\n}\r\n\r\nmain().then(\r\n  () => process.exit(0),\r\n  (err) => {\r\n    console.error(err);\r\n    process.exit(1);\r\n  },\r\n);\r\n", "import type { SequelizeOptions } from 'sequelize-typescript';\r\nimport { Sequelize } from 'sequelize-typescript';\r\n\r\nimport { DatabaseError, QueryTypes, Transaction } from 'sequelize';\r\nimport env from 'server/src/config/Env.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\nimport { EventEntity } from 'server/src/entity/event/EventEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { MessageReactionEntity } from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\r\nimport { MessageMentionEntity } from 'server/src/entity/message_mention/MessageMentionEntity.ts';\r\nimport { SlackChannelEntity } from 'server/src/entity/slack_channel/SlackChannelEntity.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport {\r\n  Gauge,\r\n  TimeHistogram,\r\n  logBuckets,\r\n} from 'server/src/logging/prometheus.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\r\nimport { SessionEntity } from 'server/src/entity/session/SessionEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\r\nimport { HeimdallEntity } from 'server/src/entity/heimdall/HeimdallEntity.ts';\r\nimport { EmailSubscriptionEntity } from 'server/src/entity/email_subscription/EmailSubscriptionEntity.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\r\nimport { ExternalAssetEntity } from 'server/src/entity/extrernal_asset/ExternalAssetEntity.ts';\r\nimport { ImageVariantEntity } from 'server/src/entity/image_variant/ImageVariantEntity.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\r\nimport { DeploysEntity } from 'server/src/entity/deploys/DeploysEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { TaskThirdPartySubscriptionEntity } from 'server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts';\r\nimport { ApplicationUsageMetricEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts';\r\nimport { ApplicationUsageMetricTypeEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { AdminGoRedirectEntity } from 'server/src/entity/go_redirect/AdminGoRedirectEntity.ts';\r\nimport type { WorkerType } from 'server/src/server.ts';\r\nimport { AdminCRTCustomerIssueEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts';\r\nimport { AdminCRTCustomerIssueChangeEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts';\r\nimport { AdminCRTCustomerIssueSubscriptionEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\r\nimport { WarmDemoUserEntity } from 'server/src/entity/demo/WarmDemoUserEntity.ts';\r\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\r\nimport { PermissionRuleEntity } from 'server/src/entity/permission/PermisssionRuleEntity.ts';\r\nimport { OrgOrgMembersEntity } from 'server/src/entity/org_org_members/OrgOrgMembersEntity.ts';\r\n\r\nconst {\r\n  POSTGRES_HOST,\r\n  POSTGRES_DB,\r\n  POSTGRES_PASSWORD,\r\n  POSTGRES_PORT,\r\n  POSTGRES_USER,\r\n} = env;\r\n\r\nconst MAX_QUERY_LOG_LENGTH = 10000;\r\n\r\ntype SequelizeWorkerType = WorkerType | 'async' | 'test' | 'master' | 'script';\r\n\r\nconst queryExecutionTimeMetric = TimeHistogram({\r\n  name: 'SequelizeQueryTime',\r\n  help: 'Execution time of Sequelize queries',\r\n  labelNames: ['type', 'appID'],\r\n});\r\n\r\nconst openDbConnectionsMetric = Gauge({\r\n  name: 'OpenDatabaseConnections',\r\n  help: 'Number of open database connections',\r\n});\r\n\r\nconst acquireTimeMetric = TimeHistogram({\r\n  name: 'SequelizePoolAcquireTime',\r\n  help: 'Time spent waiting to acquire a Sequelize connection',\r\n  // Like our default buckets, but extend the lower bound down to 10us because\r\n  // connection acquire should be very fast.\r\n  buckets: logBuckets(0.00001, 10, 19),\r\n});\r\n\r\n// These metrics use `sequelize.connectionManager as any` because the\r\n// connectionManager has a public property that holds the actual pool (a Pool\r\n// object from sequelize-pool), but it doesn't appear in the TS types.\r\n\r\nconst _availableConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolAvailable',\r\n  help: 'Number of available connections in the Sequelize connection pool',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.available);\r\n    }\r\n  },\r\n});\r\n\r\nconst _usingConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolUsed',\r\n  help: 'Number of in-use connections in the Sequelize connection pool',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.using);\r\n    }\r\n  },\r\n});\r\n\r\nconst _waitingConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolWaiting',\r\n  help: 'Number of requests waiting for a Sequelize connection',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.waiting);\r\n    }\r\n  },\r\n});\r\n\r\nconst acquireStarts = new WeakMap<object, number>();\r\n\r\nconst apiSequelizeOptions: SequelizeOptions = {\r\n  dialect: 'postgres',\r\n  host: POSTGRES_HOST,\r\n  port: Number(POSTGRES_PORT),\r\n  username: POSTGRES_USER,\r\n  password: POSTGRES_PASSWORD,\r\n  database: POSTGRES_DB,\r\n  schema: 'cord',\r\n  models: [\r\n    EventEntity,\r\n    MessageEntity,\r\n    MessageAttachmentEntity,\r\n    MessageLinkPreviewEntity,\r\n    ThreadParticipantEntity,\r\n    PageVisitorEntity,\r\n    OrgEntity,\r\n    UserEntity,\r\n    FileEntity,\r\n    PageEntity,\r\n    ThreadEntity,\r\n    PreallocatedThreadIDEntity,\r\n    MessageReactionEntity,\r\n    MessageMentionEntity,\r\n    SlackChannelEntity,\r\n    SlackMessageEntity,\r\n    UserPreferenceEntity,\r\n    DeploysEntity,\r\n    TaskEntity,\r\n    TaskTodoEntity,\r\n    TaskAssigneeEntity,\r\n    ThirdPartyConnectionEntity,\r\n    TaskThirdPartyReference,\r\n    TaskThirdPartySubscriptionEntity,\r\n    ApplicationEntity,\r\n    CustomerEntity,\r\n    SessionEntity,\r\n    OrgMembersEntity,\r\n    S3BucketEntity,\r\n    HeimdallEntity,\r\n    EmailSubscriptionEntity,\r\n    LinkedOrgsEntity,\r\n    LinkedUsersEntity,\r\n    SlackMirroredThreadEntity,\r\n    MessageOutboundNotificationEntity,\r\n    ConsoleUserEntity,\r\n    UserHiddenAnnotationsEntity,\r\n    ExternalAssetEntity,\r\n    ImageVariantEntity,\r\n    EmailOutboundNotificationEntity,\r\n    SlackMirroredSupportThreadEntity,\r\n    ApplicationUsageMetricEntity,\r\n    ApplicationUsageMetricTypeEntity,\r\n    NotificationEntity,\r\n    AdminGoRedirectEntity,\r\n    AdminCRTCustomerIssueEntity,\r\n    AdminCRTCustomerIssueChangeEntity,\r\n    AdminCRTCustomerIssueSubscriptionEntity,\r\n    ApplicationWebhookEntity,\r\n    WarmDemoUserEntity,\r\n    PermissionRuleEntity,\r\n    OrgOrgMembersEntity,\r\n  ],\r\n  benchmark: true,\r\n  logging: (...args) => {\r\n    // In `sequelize-typescript`, the arguments to `logging` are declared as\r\n    // `(msg: string, timing: number)` only, but Sequelize does give us an\r\n    // additional object full of information. Override the typing:\r\n    const [msg, timing_ms, sequelizeInfo] = args as unknown as [\r\n      string,\r\n      number,\r\n      any,\r\n    ];\r\n\r\n    // CloudWatch doesn't allow messages over a certain length, and well before\r\n    // that we hit the point where a human reading it will get the idea\r\n    // (inevitably, a gigantic WHERE clause). Serializing all that crap also\r\n    // takes CPU time. So cut down truly absurd messages to something a little\r\n    // less absurd.\r\n    const truncatedMsg =\r\n      msg.length <= MAX_QUERY_LOG_LENGTH\r\n        ? msg\r\n        : msg.substring(0, MAX_QUERY_LOG_LENGTH) +\r\n          ` (truncated from ${msg.length} bytes)`;\r\n\r\n    // The `sequelizeInfo` object may contain a huge amount of information,\r\n    // including full model definition and information on each and every type\r\n    // that exists in SQL, etc. etc.\r\n    // We pick a few fields to log:\r\n    // * type: the operation type such as 'SELECT', 'INSERT', etc. This is the\r\n    // Sequelize operation type, which is not the same as SQL, because it\r\n    // includes e.g. 'UPSERT'\r\n    // * bind: the parameter values bound to query placeholders (`$1`, `$2`,\r\n    // ...)\r\n    // * tableNames: just a list of the names of tables involved in this\r\n    // operation\r\n    const { type, bind, tableNames } = sequelizeInfo;\r\n\r\n    const storage = asyncLocalStorage?.getStore();\r\n\r\n    const logger = storage?.logger ?? anonymousLogger();\r\n    logger.debug(`Sequelize: ${truncatedMsg}`, {\r\n      sequelize: { type, bind, tableNames },\r\n      timing_ms,\r\n      operationName: storage?.operationName,\r\n      operationID: storage?.operationID,\r\n      platformApplicationID: storage?.platformApplicationID,\r\n    });\r\n\r\n    // time histogram work in units of seconds, we get milliseconds from\r\n    // Sequelize\r\n    queryExecutionTimeMetric.observe(\r\n      { type, appID: storage?.platformApplicationID },\r\n      timing_ms / 1000,\r\n    );\r\n  },\r\n  pool: {\r\n    // Maximum number of connection in pool\r\n    max: 50,\r\n\r\n    // Minimum number of connection in pool\r\n    min: 50,\r\n\r\n    // The number of times a connection can be used before discarding it for a\r\n    // replacement\r\n    maxUses: 500,\r\n\r\n    // Time out if the pool doesn't manage to establish a new connection within\r\n    // 10 seconds\r\n    acquire: 10000,\r\n  },\r\n  hooks: {\r\n    // on any new database connection we set the search path, so when\r\n    // database objects (tables, types, functions etc.) are given without\r\n    // explicitly specifying the schema they are in, they are found if\r\n    // they are in either cord or public.\r\n    // This is also done in `.sequelize-config.js` so that it applies in\r\n    // migrations, where statements such as `CREATE TABLE` will create\r\n    // objects in the first schema of the search_path (`cord`).\r\n    afterConnect: async (connection: any) => {\r\n      await connection.query('SET search_path=cord,public;');\r\n      openDbConnectionsMetric.inc(1);\r\n    },\r\n    afterDisconnect: (_connection: any) => {\r\n      openDbConnectionsMetric.dec(1);\r\n    },\r\n    beforePoolAcquire: (options) => {\r\n      acquireStarts.set(options, performance.now());\r\n    },\r\n    afterPoolAcquire: (_connection, options) => {\r\n      const start = acquireStarts.get(options);\r\n      if (start) {\r\n        const elapsed = performance.now() - start;\r\n        acquireStarts.delete(options);\r\n        acquireTimeMetric.observe(elapsed / 1000);\r\n      }\r\n    },\r\n  },\r\n  dialectOptions: {\r\n    // any SQL statement should timeout after 10s (10s is very conservative, we\r\n    // might want to reduce it further eventually).\r\n    statement_timeout: 10000,\r\n    // a transaction that does not send a statement for 5s should timeout\r\n    idle_in_transaction_session_timeout: 5000,\r\n  },\r\n};\r\n\r\nfunction initializeEntityRelationships() {\r\n  MessageEntity.hasMany(MessageMentionEntity, {\r\n    as: 'mentions',\r\n    foreignKey: 'messageID',\r\n  });\r\n\r\n  MessageEntity.hasMany(TaskEntity, {\r\n    as: 'tasks',\r\n    foreignKey: 'messageID',\r\n  });\r\n\r\n  TaskEntity.hasMany(TaskAssigneeEntity, {\r\n    as: 'assignees',\r\n    foreignKey: 'taskID',\r\n  });\r\n\r\n  TaskEntity.hasOne(MessageEntity, {\r\n    sourceKey: 'messageID',\r\n    foreignKey: 'id',\r\n    as: 'message',\r\n  });\r\n\r\n  TaskThirdPartyReference.hasOne(TaskEntity, {\r\n    as: 'task',\r\n    sourceKey: 'taskID',\r\n    foreignKey: 'id',\r\n  });\r\n\r\n  OrgEntity.hasOne(LinkedOrgsEntity, {\r\n    sourceKey: 'id',\r\n    foreignKey: 'linkedOrgID',\r\n  });\r\n\r\n  OrgMembersEntity.hasOne(UserEntity, {\r\n    sourceKey: 'userID',\r\n    foreignKey: 'id',\r\n  });\r\n\r\n  MessageEntity.hasOne(ThreadEntity, {\r\n    as: 'thread',\r\n    sourceKey: 'threadID',\r\n    foreignKey: 'id',\r\n  });\r\n}\r\n\r\nlet sequelize: Sequelize | undefined;\r\n\r\nexport function getSequelize(): Sequelize {\r\n  if (sequelize === undefined) {\r\n    throw new Error('Sequelize has not been initialised');\r\n  }\r\n  return sequelize;\r\n}\r\n\r\nfunction getSequelizeOptions(\r\n  workerType: SequelizeWorkerType,\r\n): SequelizeOptions {\r\n  switch (workerType) {\r\n    case 'api':\r\n    case 'test':\r\n    case 'master':\r\n    case 'script':\r\n      return apiSequelizeOptions;\r\n    case 'async':\r\n      return {\r\n        ...apiSequelizeOptions,\r\n        dialectOptions: {\r\n          // Set the statement timeout to 2 minutes (in milliseconds), to allow\r\n          // longer-running SQL statements in async jobs\r\n          ...apiSequelizeOptions.dialectOptions,\r\n          statement_timeout: 2 * 60 * 1000,\r\n        },\r\n      };\r\n    case 'admin':\r\n    case 'console':\r\n      return {\r\n        ...apiSequelizeOptions,\r\n        pool: {\r\n          ...apiSequelizeOptions.pool,\r\n          max: 20,\r\n          min: 0,\r\n        },\r\n      };\r\n    default: {\r\n      const _exhaustiveSwitchGuard: never = workerType;\r\n      throw new Error('Invalid worker type ' + workerType);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function initSequelize(workerType: SequelizeWorkerType) {\r\n  if (sequelize !== undefined) {\r\n    throw new Error('Sequelize has been already initialised');\r\n  }\r\n  const opts = getSequelizeOptions(workerType);\r\n  const seq = new Sequelize(opts);\r\n  initializeEntityRelationships();\r\n\r\n  await seq.authenticate();\r\n  sequelize = seq;\r\n}\r\n\r\nexport function shutdownSequelize() {\r\n  const s = sequelize;\r\n  sequelize = undefined;\r\n  return s ? s.close() : Promise.resolve();\r\n}\r\n\r\nconst MAX_RETRIES = 5;\r\n\r\nexport async function serializableTransactionWithRetries<T>(\r\n  body: (t: Transaction) => Promise<T>,\r\n) {\r\n  let lastException;\r\n  for (let retryCount = 0; retryCount < MAX_RETRIES; retryCount++) {\r\n    try {\r\n      return await getSequelize().transaction(\r\n        {\r\n          isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\r\n        },\r\n        body,\r\n      );\r\n    } catch (e) {\r\n      if (\r\n        e instanceof DatabaseError &&\r\n        'code' in e.original &&\r\n        (e.original.code === '40001' || e.original.code === '40P01')\r\n      ) {\r\n        // Per https://www.postgresql.org/docs/current/errcodes-appendix.html,\r\n        // 40001 is serialization_error and 40P01 is deadlock_detected, which\r\n        // are the two cases we expect to have some chance of success if we\r\n        // retry\r\n        lastException = e;\r\n        // Exponential backoff to try to let other txns complete first. Wait\r\n        // 50ms, then 100ms, then 200ms, etc.\r\n        const exp = 2 ** retryCount;\r\n        const baseMs = 50 * exp;\r\n        const randMs = 50 * exp * Math.random();\r\n        await sleep(baseMs + randMs);\r\n        continue;\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n  throw lastException;\r\n}\r\n\r\nexport async function assertTransactionIsSerializable(\r\n  transaction: Transaction,\r\n) {\r\n  const type = await getSequelize().query<{ isolation_level: string }>(\r\n    `SELECT current_setting('transaction_isolation') AS isolation_level`,\r\n    {\r\n      type: QueryTypes.SELECT,\r\n      transaction,\r\n    },\r\n  );\r\n\r\n  // we have to lowercase the sequelize type as the value coming\r\n  // back from postgres is lowercase\r\n  const isSerializable =\r\n    type[0].isolation_level ===\r\n    Transaction.ISOLATION_LEVELS.SERIALIZABLE.toLowerCase();\r\n\r\n  if (!isSerializable) {\r\n    throw new Error('Transaction must be serializable');\r\n  }\r\n}\r\n", "// There is some TypeScript trickery in this file. It is optimised for making\r\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\r\n// and self-explanatory, and the type hints displayed by the IDE should be\r\n// useful.\r\n\r\n// Define types to declare variables as required, optional or having a default\r\n// value.  If these classes were empty, TypeScript would treat them as\r\n// interchangeable. By giving them different shapes (i.e. different members),\r\n// TypeScript will keep them apart.\r\nclass RequiredVariable {\r\n  public readonly req = true;\r\n}\r\nclass OptionalVariable {\r\n  public readonly opt = true;\r\n}\r\nclass VariableWithDefaultValue {\r\n  constructor(public readonly defaultValue: string) {}\r\n}\r\n\r\n// These are the helpers that are used by the caller of `magicEnv` to define\r\n// their environment fields.\r\nexport const required = new RequiredVariable();\r\nexport const optional = new OptionalVariable();\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const defaultValue = (defaultValue: string) =>\r\n  new VariableWithDefaultValue(defaultValue);\r\n\r\n// Here comes the main function of this module: `magicEnv`. It takes one\r\n// parameter: a JavaScript object with string keys and values of type\r\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\r\n//\r\n// `magicEnv` is a template function, which is quite important.\r\n// `EnvDefinitionType` is the specific type of the environment definition.\r\n// That type must comply with the restriction that it is an object with string\r\n// keys and those variable types as values.  However, we will need the\r\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\r\n// the corresponding value types. We get access to this type by templating this\r\n// function.\r\nexport function magicEnv<\r\n  EnvDefinitionType extends {\r\n    [key: string]:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue;\r\n  },\r\n>(\r\n  processEnv: { [key: string]: string | undefined },\r\n  envDefinition: EnvDefinitionType,\r\n) {\r\n  // Now start constructing the result of this function.\r\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\r\n\r\n  // And now we iterate through the `envDefinition` object, which we received\r\n  // from the callback function.\r\n  for (const key of Object.keys(envDefinition) as (string &\r\n    keyof EnvDefinitionType)[]) {\r\n    // This is the value from the process environment\r\n    const value: string | undefined = processEnv[key];\r\n\r\n    // This is the value from the definition object at the top\r\n    const fieldDefinition:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue = envDefinition[key];\r\n\r\n    if ((fieldDefinition as any).req) {\r\n      // This is a required variable.\r\n\r\n      if (value === undefined) {\r\n        throw new Error(`Missing key ${key} in environment`);\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    } else if ((fieldDefinition as any).opt) {\r\n      // This is an optional variable. `value` may be a string or undefined.\r\n\r\n      env[key] = value;\r\n    } else {\r\n      // This is a variable with a default value (the value of\r\n      // `fieldDefinition`)\r\n\r\n      if (value === undefined) {\r\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the `env` object that we have just constructed, but return with a\r\n  // special type that we define here: it is an object which contains all the\r\n  // keys that the definition object has. The value type is `string`, except\r\n  // for fields that correspond to optional variables, those have type\r\n  // `string | undefined`. All fields are declared readonly.\r\n  return env as {\r\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\r\n      ? string | undefined\r\n      : string;\r\n  };\r\n}\r\n", "import {\r\n  magicEnv,\r\n  required,\r\n  optional,\r\n  defaultValue,\r\n} from 'server/src/config/MagicEnv.ts';\r\n\r\nexport default magicEnv(process.env, {\r\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\r\n  // libraries we import, to switch between development and production mode.\r\n  // Just to make sure it is set in the process environment, we include it here.\r\n  NODE_ENV: required,\r\n\r\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\r\n  CORD_TIER: required,\r\n\r\n  // Accept connections on these ports\r\n  API_SERVER_PORT: optional,\r\n  ADMIN_SERVER_PORT: optional,\r\n  METRICS_SERVER_PORT: optional,\r\n  STATUS_SERVER_PORT: optional,\r\n  CONSOLE_SERVER_PORT: optional,\r\n  DOCS_SERVER_PORT: optional,\r\n\r\n  // PostgreSQL connection configuration - required\r\n  POSTGRES_HOST: required,\r\n  POSTGRES_PORT: required,\r\n  POSTGRES_USER: required,\r\n  POSTGRES_PASSWORD: required,\r\n  POSTGRES_DB: required,\r\n\r\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\r\n  // as above)\r\n  POSTGRES_READ_HOST: optional,\r\n  POSTGRES_READ_PORT: optional,\r\n\r\n  // Redis connection configuration\r\n  REDIS_PORT: required,\r\n  REDIS_HOST: required,\r\n  PREDIS_PORT: required,\r\n  PREDIS_HOST: required,\r\n\r\n  // URLs pointing to our own endpoints\r\n  TOP_SERVER_HOST: required,\r\n  APP_SERVER_HOST: required,\r\n  API_SERVER_HOST: required,\r\n  API_SERVER_HOST_PRODUCTION: required,\r\n  ADMIN_SERVER_HOST: required,\r\n  MARKETING_SERVER_HOST: required,\r\n  PUBLIC_UPLOADS_HOST: required,\r\n  CONSOLE_SERVER_HOST: required,\r\n  CORD_TO_HOST: required,\r\n  DOCS_SERVER_HOST: required,\r\n  CLACK_SERVER_HOST: optional,\r\n  COMMUNITY_SERVER_HOST: required,\r\n\r\n  // Slack App credentials - required\r\n  SLACK_APP_CLIENT_SECRET: required,\r\n  SLACK_DEV_APP_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\r\n  SLACK_APP_REDIRECT_HOST: optional,\r\n  SLACK_SIGNING_SECRET: required,\r\n  SLACK_ADMIN_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_SIGNING_SECRET: required,\r\n  SLACK_INTERNAL_BOT_TOKEN: required,\r\n  SLACK_INTERNAL_SIGNING_SECRET: required,\r\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\r\n\r\n  // S3 Bucket File storage\r\n  S3_ACCESS_KEY_ID: optional,\r\n  S3_ACCESS_KEY_SECRET: optional,\r\n  S3_REGION: required,\r\n  S3_BUCKET: required,\r\n  S3_PUBLIC_BUCKET: required,\r\n  S3_ENDPOINT: required,\r\n  S3_USE_PATH_BASED_URLS: required,\r\n\r\n  EMAIL_LINKS_TOKEN_SECRET: required,\r\n\r\n  // Jira App credentials - required\r\n  JIRA_APP_CLIENT_ID: required,\r\n  JIRA_APP_CLIENT_SECRET: required,\r\n\r\n  // Asana App credentials - required\r\n  ASANA_APP_CLIENT_ID: required,\r\n  ASANA_APP_CLIENT_SECRET: required,\r\n\r\n  // Linear App credentials - required\r\n  LINEAR_APP_CLIENT_ID: required,\r\n  LINEAR_APP_CLIENT_SECRET: required,\r\n\r\n  // Trello App credentials - required\r\n  TRELLO_APP_CLIENT_ID: required,\r\n  TRELLO_APP_CLIENT_SECRET: required,\r\n\r\n  // Monday App credentials - required\r\n  MONDAY_APP_CLIENT_ID: required,\r\n  MONDAY_APP_CLIENT_SECRET: required,\r\n\r\n  // Secret for session tokens - required\r\n  JWT_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\r\n  OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\r\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Log level for console logging - optional ('info' if not provided)\r\n  LOGLEVEL: defaultValue('info'),\r\n\r\n  // Post error messages to this Slack channel,\r\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post informational changes to prod setup, including deploy and db migration\r\n  // messages, to this Slack channel\r\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post security/SOC2 compliance messages to this Slack channel,\r\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post info about go redirects to this Slack channel\r\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post messages from customers to this Slack channel\r\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post client request messages to this Slack channel\r\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // For sending search queries from the docs site to Slack\r\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\r\n  // logging is disabled\r\n  CLOUDWATCH_LOGLEVEL: optional,\r\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\r\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\r\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\r\n\r\n  // Host used when developing locally but an externally accessible url is\r\n  // needed. (example: d92dd1d1fa99.ngrok.io)\r\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\r\n\r\n  // path to static files for the admin app\r\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\r\n\r\n  // path to static files for the console app\r\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\r\n\r\n  // path to static files for the docs app\r\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\r\n\r\n  // API key used to send transactional email notifications through Sendgrid.\r\n  SENDGRID_API_KEY: required,\r\n\r\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\r\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\r\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\r\n\r\n  // API key used to fetch feature flags from LaunchDarkly\r\n  LAUNCHDARKLY_API_KEY: optional,\r\n\r\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\r\n  NUM_WORKERS: optional,\r\n\r\n  // Encryption key used when storing secrets in the database\r\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\r\n\r\n  // Encryption key used when generating file permalinks\r\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\r\n\r\n  // sentry.io environment setting\r\n  SENTRY_ENVIRONMENT: optional,\r\n  SENTRY_RELEASE: optional,\r\n  SENTRY_TRACE_SAMPLE_RATE: optional,\r\n\r\n  // Auth0 Environment variables\r\n  // 1) For SPA application\r\n  AUTH0_CLIENT_ID: required,\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\r\n\r\n  // 2) For verifying incoming events\r\n  AUTH0_WEBHOOK_SECRET: required,\r\n\r\n  // 3) For server to server communication\r\n  AUTH0_MTM_CLIENT_ID: required,\r\n  AUTH0_MTM_CLIENT_SECRET: required,\r\n  AUTH0_GENERAL_DOMAIN: required,\r\n\r\n  // console.cord.com cord app credentials\r\n  DEV_CONSOLE_CORD_APP_SECRET: required,\r\n\r\n  // secret for signing admin tokens to serve as proof user is logged in to\r\n  // admin\r\n  ADMIN_TOKEN_SECRET: required,\r\n\r\n  // flag whether the SDK testbed should be built and served\r\n  INCLUDE_SDK_TESTBED: optional,\r\n\r\n  // secret for cookies on the docs web site\r\n  DOCS_COOKIE_PARSER_SECRET: optional,\r\n\r\n  // set email for all notifications when testing with users on testbed\r\n  TESTBED_USERS_EMAIL: optional,\r\n\r\n  // secret for creating searchable embeddings and generating search\r\n  // results within our docs\r\n  OPENAI_API_SECRET: required,\r\n\r\n  // secret for getting geographic information from an IP address\r\n  IPSTACK_API_SECRET: optional,\r\n\r\n  // Host for where we generate the ai chat bot in the docs\r\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\r\n\r\n  // Google analytic events\r\n  GA_MEASUREMENT_ID: required,\r\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\r\n\r\n  // secret for stripe\r\n  STRIPE_SECRET_KEY: required,\r\n  STRIPE_WEBHOOK_SECRET_KEY: required,\r\n\r\n  DEMO_APPS_SHARED_SECRET: required,\r\n\r\n  // loops.so for sending newletters\r\n  LOOPS_SO_API_KEY: required,\r\n});\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID, JsonObject, Tier } from 'common/types/index.ts';\r\nimport type { Session } from 'server/src/auth/index.ts';\r\n\r\n@Table({\r\n  tableName: 'events',\r\n  timestamps: false,\r\n})\r\nexport class EventEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  // The unique load of the page/DOM instance (i.e. window/DOM object) where\r\n  // the event was generated\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  pageLoadID!: UUID;\r\n\r\n  // The unique id of the extension installation\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  installationID!: UUID | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  version!: string | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  utmParameters!: Session['utmParameters'] | null;\r\n\r\n  // The logged-in user when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID | null;\r\n\r\n  // The user profile when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID | null;\r\n\r\n  // The platformApplicationID when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  // A monotically increasing (and usually sequential) index starting\r\n  // from zero at the beginning of the page that should help clarify\r\n  // the order of events in the case that the timestamps are inscrutable or too\r\n  // close to call.\r\n  @Column({\r\n    type: DataTypes.NUMBER,\r\n  })\r\n  eventNumber!: number;\r\n\r\n  // The timestamp as reported by the client (untrustworthy)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  clientTimestamp!: Date;\r\n\r\n  // The timestamp for when the event reached the server (not\r\n  // guaranteed to be the time the event happened due to batching\r\n  // on the client)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  serverTimestamp!: Date;\r\n\r\n  // An arbitrary label to differentiate this event\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  type!: string;\r\n\r\n  // An arbitrary data payload to send along with the event. Please\r\n  // be sane about what you log here. Think in 10s of bytes, not in\r\n  // kilobytes or megabytes.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  payload!: JsonObject;\r\n\r\n  // A rich set of characteristics about the browser when the event\r\n  // generated.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: JsonObject;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  tier!: Tier;\r\n}\r\n", "import {\r\n  Table,\r\n  Column,\r\n  PrimaryKey,\r\n  Model,\r\n  DefaultScope,\r\n} from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ImportedSlackMessageType,\r\n  MessageType,\r\n  EntityMetadata,\r\n  MessageNode,\r\n} from 'common/types/index.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\n\r\n@DefaultScope(() => ({\r\n  attributes: {\r\n    include: [\r\n      [\r\n        // We're sorting on this, so the format matters, and sorting alphabetically equals sorting chronologically.\r\n        Sequelize.literal('TO_CHAR(\"timestamp\", \\'YYYY-MM-DD HH24:MI:SS.US\\')'),\r\n        'createdAtWithMicros',\r\n      ],\r\n    ],\r\n  },\r\n}))\r\n@Table({\r\n  tableName: 'messages',\r\n  timestamps: false,\r\n})\r\nexport class MessageEntity extends Model<\r\n  InferAttributes<MessageEntity>,\r\n  InferCreationAttributes<MessageEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  externalID!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sourceID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    get(): MessageContent {\r\n      return cleanseMessageContent(this.getDataValue('content'));\r\n    },\r\n  })\r\n  content!: MessageContent;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  deletedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackChannelID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackMessageTS!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('reply', 'supportBotReply'),\r\n    defaultValue: null,\r\n  })\r\n  importedSlackMessageType!: ImportedSlackMessageType | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackMessageThreadTS!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  replyToEmailNotificationID!: UUID | null;\r\n\r\n  // Unto all those who wend near this line of code, hear me!\r\n  // If you add more things to this list instead of migrating it\r\n  // into a metadata value, a curse be upon ye!\r\n  @Column({\r\n    type: DataTypes.ENUM('action_message', 'user_message'),\r\n    defaultValue: 'user_message',\r\n  })\r\n  type!: CreationOptional<MessageType>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  iconURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  translationKey!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: '',\r\n  })\r\n  extraClassnames!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TSVECTOR,\r\n  })\r\n  contentTsVector!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL,\r\n  })\r\n  createdAtWithMicros!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n    defaultValue: false,\r\n  })\r\n  skipLinkPreviews!: CreationOptional<boolean>;\r\n\r\n  isDeleted() {\r\n    return this.deletedTimestamp !== null;\r\n  }\r\n}\r\n\r\n// This section contains old node types that no longer matter.  To remove a node\r\n// type, copy all the relevant definitions from messageNodes.ts to here and\r\n// prefix them with Legacy, then apply the appropriate code inside `cleanseNode`\r\n// to convert them to supported node types.\r\n\r\nenum LegacyMessageNodeType {\r\n  ANNOTATION = 'annotation',\r\n  LINK_DEPRECATED = 'a',\r\n}\r\n\r\ntype LegacyMessageNodeBase = {\r\n  type?: LegacyMessageNodeType;\r\n  class?: string;\r\n};\r\n\r\ntype LegacyMessageNodeWithChildren = LegacyMessageNodeBase & {\r\n  children: LegacyMessageContent;\r\n};\r\n\r\ntype LegacyMessageAnnotationNode = LegacyMessageNodeWithChildren & {\r\n  type: LegacyMessageNodeType.ANNOTATION;\r\n  annotation: {\r\n    id: UUID;\r\n  };\r\n};\r\n\r\nexport type LegacyMessageLinkDeprecatedNode = LegacyMessageNodeBase & {\r\n  type: LegacyMessageNodeType.LINK_DEPRECATED;\r\n  text: string;\r\n  url: string;\r\n};\r\n\r\ntype LegacyMessageNode =\r\n  | MessageNode\r\n  | LegacyMessageAnnotationNode\r\n  | LegacyMessageLinkDeprecatedNode;\r\n\r\ntype LegacyMessageContent = LegacyMessageNode[];\r\n\r\nfunction cleanseMessageContent(\r\n  // Even though this column isn't nullable, Sequelize might not have loaded it\r\n  // because it only loaded a subset of columns, so we might get undefined\r\n  content: LegacyMessageContent | undefined,\r\n): MessageContent {\r\n  if (!content) {\r\n    return [];\r\n  }\r\n  return content.map(cleanseNode).filter(isDefined);\r\n}\r\n\r\nfunction cleanseNode(node: LegacyMessageNode): MessageNode | undefined {\r\n  if (node.type === LegacyMessageNodeType.ANNOTATION) {\r\n    return undefined;\r\n  } else if (node.type === LegacyMessageNodeType.LINK_DEPRECATED) {\r\n    return {\r\n      type: MessageNodeType.LINK,\r\n      url: node.url,\r\n      children: [{ text: node.text }],\r\n    };\r\n  }\r\n  if ('children' in node) {\r\n    return {\r\n      ...node,\r\n      children: cleanseMessageContent(node.children),\r\n    };\r\n  }\r\n  return node;\r\n}\r\n", "// See #8935:\r\n/// <reference lib=\"es2022\" />\r\n\r\nimport type OpenAI from 'openai';\r\n\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport type { Placement } from '@floating-ui/react-dom';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\n\r\nexport type {\r\n  DocumentAnnotationResult,\r\n  Screenshot,\r\n  DocumentLocation,\r\n  LocationTextConfig,\r\n  HighlightedTextConfig,\r\n  AdditionalTargetData,\r\n  Annotation,\r\n  AnnotationWithThreadID,\r\n  AnnotationCapturePosition,\r\n} from '@cord-sdk/types';\r\nexport { locationJson } from '@cord-sdk/types';\r\nimport { locationJson, MessageNodeType } from '@cord-sdk/types';\r\nimport type {\r\n  FlatJsonObject,\r\n  LocationFilterOptions,\r\n  ResolvedStatus,\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n  MessageContent,\r\n  MessageNode,\r\n  ViewerThreadStatus,\r\n} from '@cord-sdk/types';\r\n\r\nexport type {\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n};\r\n\r\nexport type SimpleTranslationParameters = FlatJsonObject;\r\n\r\nexport enum DataTableQueries {\r\n  ADMIN_USERS = 'admin_users',\r\n  SET_ADMIN = 'set_admin',\r\n  USER_DETAILS = 'user_details',\r\n  ORG_DETAILS = 'org_details',\r\n  APP_DETAILS = 'app_details',\r\n  THREAD_DETAILS = 'thread_details',\r\n  MESSAGE_DETAILS = 'message_details',\r\n  CUSTOMER_DETAILS = 'customer_details',\r\n  ORG_MEMBER_DETAILS = 'org_member_details',\r\n  ID_SEARCH = 'id_search',\r\n  PROD_APPLICATIONS = 'prod_applications',\r\n  STAGING_APPLICATIONS = 'staging_applications',\r\n  SAMPLE_APPLICATIONS = 'sample_applications',\r\n  VERIFIED_CUSTOMERS = 'verified_customers',\r\n  SAMPLE_CUSTOMERS = 'sample_customers',\r\n  DEPLOYS = 'deploys',\r\n  PAGE_CONTEXTS = 'page_contexts',\r\n  BROWSER_METRICS = 'browser_metrics',\r\n  OS_METRICS = 'os_metrics',\r\n  GO_REDIRECTS = 'go_redirects',\r\n}\r\n\r\nexport type NonNullableKeys<T, K extends keyof T> = T & {\r\n  [P in K]: NonNullable<T[P]>;\r\n};\r\n\r\nexport type NullableKeys<T, K extends keyof T> = Omit<T, K> & {\r\n  [P in K]: T[P] | null;\r\n};\r\n\r\nexport type ElementOf<T extends Array<any>> = T[number];\r\n\r\n/**\r\n * A mapping type that effectively combines Required<T> and NonNullable<T> to\r\n * turn { foo?: string | undefined } into { foo: string }\r\n */\r\n// NOTE(9/9/2021): This is equivalent to Required<T> if we compiled with\r\n// --strictNullChecks, but we currently don't\r\nexport type ReallyRequired<T> = {\r\n  [P in keyof T]-?: NonNullable<T[P]>;\r\n};\r\n\r\nexport type { MessageContent, MessageNode };\r\nexport { MessageNodeType };\r\n\r\nexport type UUID = string;\r\n\r\nexport type Location = {\r\n  [k: string]: string | number | boolean;\r\n};\r\n\r\nexport type SortDirection = 'ascending' | 'descending';\r\n\r\nexport function isValidFlatJsonObject(obj: any): obj is FlatJsonObject {\r\n  if (!obj) {\r\n    return false;\r\n  }\r\n  if (typeof obj !== 'object' || Array.isArray(obj)) {\r\n    return false;\r\n  }\r\n  for (const [_, value] of Object.entries(obj)) {\r\n    const t = typeof value;\r\n    if (t !== 'string' && t !== 'number' && t !== 'boolean') {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isLocation(obj: any): obj is Location {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function isValidMetadata(obj: any): obj is EntityMetadata {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function toLocation(obj: any): Location | null {\r\n  return isLocation(obj) ? obj : null;\r\n}\r\n\r\n// We receive location as either Location or LocationFilterOptions from\r\n// our apis. Since Location type can be flat object with multiple properties\r\n// we have to check the property type to make sure we're getting the right value.\r\n// eg: {value: 'foo', ...} is Location\r\n// while {value: {value: 'foo'} ...} is LocationFilterOptions\r\nexport function getLocationFilter(\r\n  obj: LocationFilterOptions | Location | undefined,\r\n): LocationFilterOptions | undefined {\r\n  if (!obj) {\r\n    return undefined;\r\n  }\r\n\r\n  if (isLocation(obj)) {\r\n    return { value: obj, partialMatch: false };\r\n  }\r\n\r\n  if (isLocation(obj.value)) {\r\n    return obj;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Function to convert our external resolvedStatus filter enum\r\n// to our internal 'resolved' boolean property\r\nexport function getResolvedFromStatus(\r\n  status: ResolvedStatus,\r\n): boolean | undefined {\r\n  // we've not included a fallback value as this will just increase the chances\r\n  // of returning the wrong data somewhere. So we make sure to pass whatever\r\n  // we've said the default is for the API that's calling this.\r\n  switch (status) {\r\n    case 'resolved': {\r\n      return true;\r\n    }\r\n    case 'unresolved': {\r\n      return false;\r\n    }\r\n    case 'any': {\r\n      return undefined;\r\n    }\r\n    default: {\r\n      const unhandledStatus: never = status;\r\n      throw new Error('Invalid resolved status type ' + unhandledStatus);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getViewerThreadFilter(\r\n  viewerStatus: ViewerThreadStatus | ViewerThreadStatus[] | undefined,\r\n): ViewerThreadStatus[] {\r\n  if (!viewerStatus) {\r\n    return [];\r\n  }\r\n  if (typeof viewerStatus === 'string') {\r\n    return [viewerStatus];\r\n  }\r\n  return viewerStatus;\r\n}\r\n\r\nexport function metadataMatches(\r\n  metadata: EntityMetadata,\r\n  matcher: EntityMetadata,\r\n): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (metadata[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationMatches(context: Location, matcher: Location): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (context[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction flatJsonObjectEqual(\r\n  a: FlatJsonObject | null,\r\n  b: FlatJsonObject | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  if (Object.keys(a).length !== Object.keys(b).length) {\r\n    return false;\r\n  }\r\n  for (const [key, value] of Object.entries(a)) {\r\n    if (b[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationEqual(a: Location | null, b: Location | null): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\nexport function metadataEqual(\r\n  a: EntityMetadata | null,\r\n  b: EntityMetadata | null,\r\n): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\n/**\r\n * Implements the canonical comparison for locations.  Currently, this sorts by\r\n * number of elements, then the JSON representation alphabetically, but we can\r\n * change that if we come up with something better.\r\n */\r\nexport function locationCompare(a: Location, b: Location): number {\r\n  const lengthA = Object.keys(a).length;\r\n  const lengthB = Object.keys(b).length;\r\n  if (lengthA !== lengthB) {\r\n    return lengthA - lengthB;\r\n  }\r\n  return locationJson(a).localeCompare(locationJson(b));\r\n}\r\n\r\nexport type PageContext = {\r\n  providerID: UUID | null;\r\n  data: Location;\r\n};\r\n\r\nexport function pageContextEqual(\r\n  a: PageContext | null,\r\n  b: PageContext | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  // Two contexts from different providers are never equal\r\n  if (a.providerID !== b.providerID) {\r\n    return false;\r\n  }\r\n  // If either has data, compare the data, otherwise compare the locations\r\n  return isEqual(a.data, b.data);\r\n}\r\n\r\n// This returns a string key that is equivalent from an equality perspective to\r\n// comparing the pageContexts.  Specifically, the intention is that\r\n// pageContextEqual(a, b) === (pageContextKey(a) === pageContextKey(b))\r\n\r\n// The functioning of this depends a lot on our specific logic of\r\n// building PageContexts, such that, for instance,\r\n// a.location === b.location => a.providerID === b.providerID.\r\n\r\n// It also needs to stay consistent with the logic in server/src/util/hash.ts.\r\nexport function pageContextKey(pageContext: PageContext): string {\r\n  return jsonStableStringify({\r\n    providerID: pageContext.providerID,\r\n    data: pageContext.data,\r\n  });\r\n}\r\n\r\n/**\r\n * Convert a PageContext-like object into an actual PageContext.\r\n *\r\n * The PageContext types that we exchange with GraphQL allow nullable fields to\r\n * be undefined as well. This function takes such objects and returns a valid\r\n * PageContext.\r\n */\r\ntype PageContextLike = {\r\n  providerID?: UUID | null;\r\n  data: Location;\r\n};\r\nexport function toPageContext(pageContext: PageContextLike): PageContext;\r\nexport function toPageContext(pageContext: null | undefined): null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null {\r\n  if (!pageContext) {\r\n    return null;\r\n  }\r\n  const { providerID, data } = pageContext;\r\n  if (!isLocation(data)) {\r\n    throw new Error('Invalid context');\r\n  }\r\n  return {\r\n    providerID: providerID ?? null,\r\n    data,\r\n  };\r\n}\r\n\r\nexport type OrgMemberState = 'active' | 'inactive' | 'deleted'; // must match the keys in OrgMemberStateEnumType\r\n\r\nexport type UserType = 'person' | 'bot'; // must match the keys in UserTypeEnumType\r\n\r\nexport type UserState = 'active' | 'deleted'; // must match the keys in UserStateEnumType\r\n\r\nexport type ImportedSlackMessageType = 'reply' | 'supportBotReply'; // must match the keys in ImportedSlackMessageTypeEnumType\r\n\r\nexport type MessageType = 'action_message' | 'user_message'; //must match the keys in MessageTypeEnumType\r\n\r\nexport interface Todo {\r\n  id: UUID;\r\n  done: boolean;\r\n}\r\n\r\nexport enum MessageAttachmentType {\r\n  FILE = 'file',\r\n  ANNOTATION = 'annotation',\r\n  SCREENSHOT = 'screenshot',\r\n}\r\n\r\nexport const MessageAnnotationAttachmentTypeName =\r\n  'MessageAnnotationAttachment';\r\n\r\nexport function parseElementIdentifierVersion(\r\n  val: string,\r\n): ElementIdentifierVersion | null {\r\n  if (val === '1' || val === '2') {\r\n    return val;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport enum ElementIdentifierMatch {\r\n  EXACT = 'exact',\r\n  PARTIAL = 'partial',\r\n  NONE = 'none',\r\n}\r\n\r\nexport enum LocationMatch {\r\n  EXACT = 'exact',\r\n  SIBLING = 'sibling',\r\n  MULTIMEDIA = 'multimedia',\r\n  CHART = 'chart',\r\n  STALE = 'stale',\r\n  MAYBE_STALE = 'maybe_stale',\r\n  NONE = 'none',\r\n  // User has old extension, and does not have the latest identifier version\r\n  INCOMPATIBLE_IDENTIFIER_VERSION = 'incompatible_identifier_version',\r\n  // Used if fallback document coordinates are included, and we don't have an exact/sibling match\r\n  DOCUMENT_COORDINATES = 'document_coordinates',\r\n  // If we weren't able to annotate, so we're instead relying on the screenshot\r\n  // Examples: annotating a pdf, annotating an iframe we can't access\r\n  UNAVAILABLE = 'unavailable',\r\n  // If the annotation was on an inaccessible cross-domain iframe. We want to\r\n  // show it while the message is being drafted, but not after it's been posted\r\n  INACCESSIBLE_CROSS_DOMAIN_IFRAME = 'inaccessible_cross_domain_iframe',\r\n  OUTSIDE_ACCESSIBLE_VIRTUALISED_LIST = 'outside_accessible_virtualised_list',\r\n  OUTSIDE_INACCESSIBLE_VIRTUALISED_LIST = 'outside_inaccessible_virtualised_list',\r\n}\r\n\r\nexport function annotationHasLocation(annotation: MessageAnnotation) {\r\n  return annotation.location !== null || annotation.customLocation !== null;\r\n}\r\n\r\nexport const ThreadCreatedTypeName = 'ThreadCreated';\r\nexport const ThreadMessageAddedTypeName = 'ThreadMessageAdded';\r\nexport const ThreadMessageUpdatedTypeName = 'ThreadMessageUpdated';\r\nexport const ThreadMessageContentAppendedTypeName =\r\n  'ThreadMessageContentAppended';\r\nexport const ThreadMessageRemovedTypeName = 'ThreadMessageRemoved';\r\nexport const ThreadParticipantsUpdatedIncrementalTypeName =\r\n  'ThreadParticipantsUpdatedIncremental';\r\nexport const ThreadTypingUsersUpdatedTypeName = 'ThreadTypingUsersUpdated';\r\nexport const ThreadShareToSlackTypeName = 'ThreadShareToSlack';\r\nexport const ThreadPropertiesUpdatedTypeName = 'ThreadPropertiesUpdated';\r\nexport const ThreadSubscriberUpdatedTypeName = 'ThreadSubscriberUpdated';\r\nexport const ThreadDeletedTypeName = 'ThreadDeleted';\r\n\r\nexport const PageThreadAddedTypeName = 'PageThreadAdded';\r\nexport const PageThreadDeletedTypename = 'PageThreadDeleted';\r\nexport const PageThreadReplyAddedTypeName = 'PageThreadReplyAdded';\r\nexport const PageVisitorsUpdatedTypeName = 'PageVisitorsUpdated';\r\nexport const PageThreadResolvedTypeName = 'PageThreadResolved';\r\nexport const PageThreadUnresolvedTypeName = 'PageThreadUnresolved';\r\nexport const ThreadFilterablePropertiesMatchTypeName =\r\n  'ThreadFilterablePropertiesMatch';\r\nexport const ThreadFilterablePropertiesUnmatchTypeName =\r\n  'ThreadFilterablePropertiesUnmatch';\r\n\r\nexport const NotificationAddedTypeName = 'NotificationAdded';\r\nexport const NotificationReadStateUpdatedTypeName =\r\n  'NotificationReadStateUpdated';\r\nexport const NotificationDeletedTypeName = 'NotificationDeleted';\r\n\r\nexport const OrgMemberAddedTypeName = 'OrgMemberAdded';\r\nexport const OrgMemberRemovedTypeName = 'OrgMemberRemoved';\r\n\r\nexport const ConsoleGettingStartedUpdatedTypeName =\r\n  'ConsoleGettingStartedUpdated';\r\n\r\nexport const CustomerSubscriptionUpdatedTypeName =\r\n  'CustomerSubscriptionUpdated';\r\n\r\nexport type FileAttachmentInput = {\r\n  id: UUID;\r\n  fileID: UUID;\r\n};\r\n\r\n// Subset of winston log levels, which can be found in NpmConfigSetLevels type in winston type file\r\nexport enum LogLevel {\r\n  ERROR = 'error',\r\n  WARN = 'warn',\r\n  INFO = 'info',\r\n  DEBUG = 'debug',\r\n}\r\n\r\nexport type PopperPosition = Placement;\r\n\r\n// called when the sidebar shows and hides, with a reference to the Cord iframe\r\n// expected to make domain-specific document adjustments to accommodate the sidebar\r\n// in its two states (expanded / not).\r\nexport type DocumentMutator = (width: number | null) => void;\r\n\r\n// called with the document to initialize any mutator-specific elements and behavior\r\n// expected to return the actual mutator function\r\nexport type DocumentMutatorInitializer = (\r\n  document: Document,\r\n) => DocumentMutator;\r\n\r\nexport type SimpleValue = string | number | boolean;\r\n\r\nexport type PreferencesValueType = JsonValue;\r\n\r\nexport type PreferencesType = JsonObject;\r\n\r\nexport enum UserReference {\r\n  MENTION = 'mention',\r\n  ASSIGNEE = 'assignee',\r\n}\r\n\r\nexport type RuleProviderInfo = {\r\n  id: UUID; // the ID of the provider, should be unique among providers\r\n  name: string; // the name of the provider\r\n  iconURL?: string | null; // URL for a favicon-like image\r\n  nuxText?: string | null; // the text to show the user teaching them how to use Radical on this specific provider\r\n  disableAnnotations?: boolean; // if annotations should be disabled for this provider. example: slack static PDFs where due to the chrome pdf viewer we don't have access to the scroll position\r\n};\r\n\r\n// a ruleset provider should export all the rules specific to a SaaS, even when\r\n// those rules span across different domain names.\r\nexport type RuleProvider = RuleProviderInfo & {\r\n  domains: string[]; // the domains that this provider's rules cover\r\n  rules: ProviderRule[]; // deny and approve rules\r\n  mergeHashWithLocation?: boolean; // a fix for providers like Snowflake who have URLs with query parameters after the # in the URL\r\n  visibleInDiscoverToolsSection: boolean; // the state of wether the tool is visible in th Discover tools section in the NUX flow, i.e. internal tools should not be included, localhost should not be included\r\n  platformApplicationID: UUID | null; // Application ID of provider, if relevant\r\n\r\n  // the functions to call to mutate the document to make room for the sidebar.\r\n  // this is a list to allow per-domain granularity.\r\n  documentMutators: ProviderDocumentMutator[];\r\n};\r\n\r\nexport type ProviderRule = {\r\n  id: UUID;\r\n  type: ProviderRuleType;\r\n  matchPatterns: ProviderRuleMatchPatterns;\r\n  nameTemplate: string | null;\r\n  contextTransformation: PageContextTransformation;\r\n  observeDOMMutations: boolean;\r\n};\r\n\r\nexport type ProviderDocumentMutator =\r\n  | { id: UUID; type: 'default_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'custom_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'fixed_elements'; config: null };\r\n\r\nexport type ProviderDocumentMutatorType = ProviderDocumentMutator['type'];\r\n\r\nexport type CSSMutatorConfig = {\r\n  cssTemplate: string;\r\n};\r\n\r\nexport type ProviderRuleType = 'allow' | 'deny';\r\n\r\nexport type ProviderRuleMatchPatterns = {\r\n  protocol?: string;\r\n  domain?: string;\r\n  path?: string;\r\n  hash?: string;\r\n  queryParams?: { [key: string]: string };\r\n  selector?: string;\r\n  contains?: string;\r\n};\r\n\r\nexport type ProviderRuleTestMatchType = 'allow' | 'deny' | 'none';\r\n\r\nexport type PageDetails = {\r\n  pageContext: PageContext;\r\n  pageName: string | null;\r\n};\r\n\r\nexport type MatchResult = (\r\n  | {\r\n      match: 'allow' | 'deny';\r\n      ruleID: UUID;\r\n    }\r\n  | {\r\n      match: 'none';\r\n    }\r\n) &\r\n  PageDetails;\r\n\r\nexport type PageContextTransformationType =\r\n  | 'default'\r\n  | 'replace'\r\n  | 'extend'\r\n  | 'metabase';\r\n\r\nexport type PageContextTransformation = {\r\n  type: PageContextTransformationType;\r\n  data: JsonObject | null;\r\n};\r\n\r\nexport type ProvidersResult = {\r\n  ruleProviders: RuleProvider[];\r\n  version: string;\r\n};\r\n\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n\r\nexport type LinearTeam = {\r\n  id: string;\r\n  name: string;\r\n  projects: {\r\n    nodes: Array<{\r\n      id: string;\r\n      name: string;\r\n    }>;\r\n  };\r\n};\r\n\r\nexport type AtlassianProject = {\r\n  // expand: 'description,lead,issueTypes,url,projectKeys,permissions,insight',\r\n  id: string; // 10000\r\n  key: string; // STLR\r\n  name: string; // 'Stellar'\r\n  issueTypes: Array<{\r\n    id: string; //'10001'\r\n    // description: 'Tasks track small, distinct pieces of work.';\r\n    name: string;\r\n    subtask: boolean;\r\n    // avatarId: 10318;\r\n    // hierarchyLevel: 0;\r\n  }>;\r\n  simplified: boolean;\r\n  style: string; // 'next-gen'\r\n  isPrivate: boolean;\r\n  entityId: UUID;\r\n  uuid: UUID;\r\n};\r\n\r\nexport type MondayBoard = {\r\n  id: string;\r\n  name: string;\r\n  subitem_board?: {\r\n    id: string;\r\n  };\r\n  groups: Array<{\r\n    id: string;\r\n    title: string;\r\n    position: string;\r\n  }>;\r\n};\r\n\r\nexport type JiraConnectionPreferences = {\r\n  projectID: string;\r\n  issueType: string;\r\n  subissueType?: string;\r\n};\r\n\r\nexport type AsanaConnectionPreferences = {\r\n  projectID: string | undefined;\r\n};\r\n\r\nexport type MondayConnectionPreferences = {\r\n  boardID: string;\r\n  groupID?: string;\r\n};\r\n\r\ntype TrelloList = {\r\n  id: UUID;\r\n  name: string;\r\n  closed?: string;\r\n  pos?: number;\r\n  softLimit?: string;\r\n  idBoard?: UUID;\r\n  subscriber: boolean;\r\n};\r\n\r\ntype TrelloBoard = {\r\n  id: UUID;\r\n  name: string;\r\n  idOrganization: UUID;\r\n  lists: TrelloList[];\r\n};\r\n\r\ntype TrelloOrg = {\r\n  id: UUID;\r\n  name: string;\r\n};\r\n\r\nexport type TrelloConnectionPreferencesType = {\r\n  id: UUID;\r\n  email: string;\r\n  boards: TrelloBoard[];\r\n  organizations: TrelloOrg[];\r\n};\r\n\r\nexport type TrelloCard = {\r\n  name: string;\r\n  desc: string;\r\n  idList: UUID;\r\n};\r\n\r\nexport type AsanaProject = {\r\n  gid: string;\r\n  name: string;\r\n};\r\n\r\nexport type JiraIssuePreviewData = {\r\n  key: string;\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  done: boolean;\r\n  priority: string;\r\n  subtasks: Array<{\r\n    id: string;\r\n    title: string;\r\n    done: boolean;\r\n  }>;\r\n};\r\n\r\nexport type AsanaTaskPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n};\r\n\r\nexport type LinearIssuePreviewData = {\r\n  title: string;\r\n  identifier: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  priority: string;\r\n  done: boolean;\r\n  orgName: string | undefined;\r\n};\r\n\r\nexport type MondayItemPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n  assigneeColumnID: string | undefined;\r\n  statusColumnID: string | undefined;\r\n};\r\n\r\nexport type TaskPreviewData =\r\n  | AsanaTaskPreviewData\r\n  | JiraIssuePreviewData\r\n  | LinearIssuePreviewData\r\n  | MondayItemPreviewData;\r\n\r\nexport enum LinearIssueStateTypes {\r\n  BACKLOG = 'backlog',\r\n  TODO = 'unstarted',\r\n  IN_PROGRESS = 'started',\r\n  DONE = 'completed',\r\n  CANCELED = 'canceled',\r\n}\r\n\r\nexport type LinearConnectionPreferences = {\r\n  teamID: string;\r\n  projectID?: string;\r\n};\r\n\r\nexport type APICordTokenData = {\r\n  session_id: UUID;\r\n};\r\n\r\nexport type AppServerAuthTokenData = {\r\n  app_id: UUID;\r\n};\r\n\r\nexport type CustomerServerAuthTokenData = {\r\n  customer_id: UUID;\r\n};\r\n\r\nexport type NotificationChannels = {\r\n  slack: boolean;\r\n  email: boolean;\r\n};\r\n\r\nexport type CustomLinks = {\r\n  learnMore?: string | null;\r\n  upgradePlan?: string | null;\r\n  leaveFeedback?: string | null;\r\n};\r\n\r\nexport type ThirdPartyAuth = 'slack' | 'google' | 'ms-teams';\r\n\r\nexport type OutboundNotificationType =\r\n  | 'slack'\r\n  | 'email'\r\n  | 'slackEmailMatched'\r\n  | 'sharedToSlackChannel'\r\n  | 'sharedToEmail';\r\n\r\nexport type { Point2D } from '@cord-sdk/types';\r\n\r\nexport type CustomNUXStepContent = {\r\n  title: string | null;\r\n  text: string | null;\r\n  imageURL: string | null;\r\n};\r\n\r\nexport type CustomNUX = {\r\n  initialOpen: CustomNUXStepContent | null;\r\n  welcome: CustomNUXStepContent | null;\r\n};\r\n\r\nexport type SlackOAuthLinkOrgState = {\r\n  data: {\r\n    userID: string;\r\n    orgID: string;\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'link_org';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthConsoleUserState = {\r\n  data: {\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'console_user';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthDecodeState =\r\n  | SlackOAuthLinkOrgState\r\n  | SlackOAuthConsoleUserState;\r\n\r\nexport type ThreadSupportStatusType = 'open' | 'closed';\r\n\r\nexport type UserWithOrgDetails = {\r\n  id: UUID;\r\n  externalID: string;\r\n  displayName: string;\r\n  fullName: string;\r\n  name: string | null;\r\n  shortName: string | null;\r\n  profilePictureURL: string | null;\r\n  metadata: EntityMetadata;\r\n  canBeNotifiedOnSlack: boolean;\r\n};\r\n\r\nexport type OutboundNotificationMetadata =\r\n  OutboundNotificationMetadataByType[OutboundNotificationType];\r\n\r\n// when adding new fields to existing metadata types, either make the new\r\n// fields optional or run a backfill migration\r\nexport type OutboundNotificationMetadataByType = {\r\n  slack: Record<string, never>;\r\n  email: Record<string, never>;\r\n  slackEmailMatched: Record<string, never>;\r\n  sharedToSlackChannel: {\r\n    type: 'sharedToSlackChannel';\r\n    targetSlackChannelID: string;\r\n  };\r\n  sharedToEmail: {\r\n    type: 'sharedToEmail';\r\n    targetEmail: string;\r\n  };\r\n};\r\n\r\n// Internal threads are the standard mirrored Slack threads\r\n// that users can share to their linked Slack org.\r\n// Support threads are the ones mirrored to a vendor's Slack org\r\n// and support channel after a support bot is mentioned.\r\nexport type ThreadMirrorType = 'internal' | 'support';\r\n\r\nexport type Tier = 'prod' | 'staging' | 'test' | 'dev';\r\n\r\nexport type SharedToSlackInfo = {\r\n  channel: string | null;\r\n  slackURL: string | null;\r\n};\r\n\r\nexport type ThreadMode =\r\n  // Only shows the first message, and optionally the number of replies\r\n  | 'collapsed'\r\n  // Can show all messages, also includes a composer to add a new message\r\n  | 'inline'\r\n  // Used in the sidebar only - thread spans across the whole page\r\n  | 'fullHeight'\r\n  // The initial state when we are creating a new thread - composer only\r\n  | 'newThread';\r\n\r\nexport type Announcement =\r\n  | 'welcome'\r\n  | 'completeProfile'\r\n  | 'connectOrgToSlack'\r\n  | 'linkProfileToSlack'\r\n  | 'slackIsConnected';\r\n\r\nexport type ReferencedUserData = { id: UUID; name: string };\r\n\r\nconst DEPLOYMENT_TYPES = ['sdk'] as const;\r\n\r\nexport type DeploymentType = (typeof DEPLOYMENT_TYPES)[number];\r\n\r\nexport function isDeploymentType(s: string): s is DeploymentType {\r\n  if (DEPLOYMENT_TYPES.includes(s as DeploymentType)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function toDeploymentType(\r\n  s: string | null | undefined,\r\n): DeploymentType | null {\r\n  if (s && isDeploymentType(s)) {\r\n    return s;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport type ApplicationEnvironment =\r\n  | 'production'\r\n  | 'staging'\r\n  | 'sample' // console self-serve test (not paying) app\r\n  | 'sampletoken' // sample token apps created for docs integration guide and demo apps opensource repos (wiped periodically)\r\n  | 'demo'; // temporary token apps created for docs and cord.com demo apps (wiped periodically)\r\n\r\n// NB you there are some classes of token you might expect are environments,\r\n// but actually all belong to one appID:\r\n// The docs live components are all in the CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID app\r\n// The e2e tests are all in the CORD_AUTOMATED_TESTS_APPLICATION_ID app\r\n// The CORD_PLAYGROUND_APPLICATION_ID has been retired from service\r\n\r\nexport type EmptyJsonObject = Record<string, never>;\r\n\r\nexport type CustomerType = 'verified' | 'sample';\r\n\r\nexport type CustomerImplementationStage =\r\n  | 'launched'\r\n  | 'implementing'\r\n  | 'proof_of_concept'\r\n  | 'inactive';\r\n\r\nexport type AdminCRTComingFrom = 'them' | 'us';\r\n\r\nexport type AdminCRTDecision = 'done' | 'accepted' | 'rejected' | 'pending';\r\n\r\nexport type AdminCRTCommunicationStatus =\r\n  | 'none'\r\n  | 'request_acked'\r\n  | 'decision_sent'\r\n  | 'decision_acked';\r\n\r\nexport type AdminCRTIssueType = 'request' | 'bug' | 'onboarding_step';\r\n\r\nexport type AdminCRTPriority = 'blocker' | 'high' | 'low';\r\n\r\nexport type AdminCRTCustomerIssue = {\r\n  customerID: UUID;\r\n  title: string;\r\n  body: string;\r\n  comingFrom: AdminCRTComingFrom;\r\n  decision: AdminCRTDecision;\r\n  communicationStatus: AdminCRTCommunicationStatus;\r\n  lastTouch?: string;\r\n  type: AdminCRTIssueType;\r\n  priority: AdminCRTPriority;\r\n  externallyVisible: boolean;\r\n  assignee?: UUID;\r\n};\r\n\r\nexport type DocsCachedEmbedding = {\r\n  url: string;\r\n  plaintext: string;\r\n  embedding?: OpenAI.CreateEmbeddingResponse | undefined;\r\n};\r\n\r\nexport type CordDotComCachedEmbedding = DocsCachedEmbedding & {\r\n  title: string;\r\n};\r\n\r\n// This is for the mouse move events within iframes\r\nexport type IframeMouseMoveData = { x: number; y: number; frame_id: string };\r\n\r\nexport type Maybe<T> = T | null | undefined;\r\nexport type Nullable<T> = T | null;\r\n", "import md5 from 'blueimp-md5';\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport { unique } from 'radash';\r\nimport shajs from 'sha.js';\r\nimport dayjs from 'dayjs';\r\nimport Calendar from 'dayjs/plugin/calendar.js';\r\nimport isBetween from 'dayjs/plugin/isBetween.js';\r\n\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ReferencedUserData,\r\n} from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport {\r\n  CORD_PLATFORM_ORG_ID,\r\n  CORD_ADMIN_PLATFORM_ORG_ID,\r\n  GILLIAN_TEST_SLACK_ORG_ID,\r\n  RADICAL_ORG_ID,\r\n  RADICAL_TEST_ORG_ID,\r\n  KAT_TEST_SLACK_ORG_ID,\r\n  CORD_SLACK_TEAM_ID,\r\n  CORD_TEST_SLACK_TEAM_ID,\r\n} from 'common/const/Ids.ts';\r\nimport {\r\n  getMessageNodeChildren,\r\n  textFromNodeRecursive,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { trimStart } from '@cord-sdk/react/common/lib/trim.ts';\r\n\r\nconst uuidRegex =\r\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r\n\r\nexport const isEmployee = (orgID: UUID | undefined) =>\r\n  orgID === RADICAL_ORG_ID ||\r\n  orgID === RADICAL_TEST_ORG_ID ||\r\n  orgID === CORD_PLATFORM_ORG_ID ||\r\n  orgID === GILLIAN_TEST_SLACK_ORG_ID ||\r\n  orgID === KAT_TEST_SLACK_ORG_ID ||\r\n  orgID === CORD_ADMIN_PLATFORM_ORG_ID ||\r\n  process.env.NODE_ENV === 'development';\r\n\r\nexport const isInternalSlackOrg = (slackTeamID: string | undefined) =>\r\n  slackTeamID === CORD_SLACK_TEAM_ID || slackTeamID === CORD_TEST_SLACK_TEAM_ID;\r\n\r\nexport const assertUUID = (value: string): UUID => {\r\n  if (!uuidRegex.test(value)) {\r\n    throw new Error(`Invalid UUID ${value}`);\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\n/**\r\n * @deprecated MD5 is no longer secure, use sha256Hash instead.\r\n */\r\nexport function md5Hash(object: boolean | number | string | object) {\r\n  return md5(jsonStableStringify(object));\r\n}\r\n\r\nexport function sha256Hash(value: string) {\r\n  return shajs('sha256').update(value).digest('hex');\r\n}\r\nexport const SHA256_HASH_LENGTH = 64;\r\n\r\nexport function generateSalt() {\r\n  const buf = new Uint8Array(8);\r\n  crypto.getRandomValues(buf);\r\n  return Array.from(buf)\r\n    .map((b) => b.toString(16).padStart(2, '0'))\r\n    .join('');\r\n}\r\n\r\nexport function sha256HashAndSalt(\r\n  value: string,\r\n  salt: string = generateSalt(),\r\n) {\r\n  return 'sha256' + ':' + salt + ':' + sha256Hash(salt + ':' + value);\r\n}\r\n\r\nexport function prepareTextContent(textContent: string) {\r\n  return (\r\n    textContent\r\n      .trim()\r\n      .toLowerCase()\r\n      // Remove Zero Width No-Break Space (U+FEFF)\r\n      .replace(/[\\uFEFF\\n]/gm, '')\r\n  );\r\n}\r\n\r\nexport function doesTextQualify(text: string | undefined | null) {\r\n  return Boolean(text && text.length > 1 && text.trim());\r\n}\r\n\r\nexport function getSha256Salt(hash: string): string {\r\n  return hash?.split(':')[1] ?? '';\r\n}\r\n\r\nexport function matchesHash(value: string, hashWithSalt: string) {\r\n  return hashWithSalt === sha256HashAndSalt(value, getSha256Salt(hashWithSalt));\r\n}\r\n\r\nexport function isNotNull<T>(value: T | null): value is T {\r\n  return value !== null;\r\n}\r\n\r\nexport function isDefined<T>(value: T | null | undefined): value is T {\r\n  return value !== null && value !== undefined;\r\n}\r\n\r\nexport function getMentionedUserIDs(content: MessageContent): UUID[] {\r\n  let users: UUID[] = [];\r\n  for (const node of content) {\r\n    if (node.type === MessageNodeType.MENTION) {\r\n      users.push(node.user.id);\r\n    } else {\r\n      const children = getMessageNodeChildren(node);\r\n      if (children) {\r\n        users = [...users, ...getMentionedUserIDs(children)];\r\n      }\r\n    }\r\n  }\r\n\r\n  return unique(users);\r\n}\r\n\r\nexport function getReferencedUserIDs(content: MessageContent): UUID[] {\r\n  const accumulator = new Set<UUID>();\r\n  gatherReferencedUserIDs(content, accumulator);\r\n  return [...accumulator];\r\n}\r\n\r\nfunction gatherReferencedUserIDs(\r\n  nodes: MessageContent,\r\n  accumulator: Set<UUID>,\r\n) {\r\n  for (const node of nodes) {\r\n    if (\r\n      node.type === MessageNodeType.MENTION ||\r\n      node.type === MessageNodeType.ASSIGNEE\r\n    ) {\r\n      accumulator.add(node.user.id);\r\n      continue;\r\n    }\r\n    const children = getMessageNodeChildren(node);\r\n    if (children) {\r\n      gatherReferencedUserIDs(children, accumulator);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getReferencedUserIDsAndNames(\r\n  content: MessageContent,\r\n): ReferencedUserData[] {\r\n  const accumulator = new Map<UUID, string>();\r\n  gatherReferencedUserIDsAndName(content, accumulator);\r\n  return [...accumulator].map(([id, name]) => ({ id, name }));\r\n}\r\n\r\nfunction gatherReferencedUserIDsAndName(\r\n  nodes: MessageContent,\r\n  accumulator: Map<UUID, string>,\r\n) {\r\n  for (const node of nodes) {\r\n    if (\r\n      node.type === MessageNodeType.MENTION ||\r\n      node.type === MessageNodeType.ASSIGNEE\r\n    ) {\r\n      const userID = node.user.id;\r\n      const name = trimStart(textFromNodeRecursive(node), '@');\r\n      accumulator.set(userID, name);\r\n      continue;\r\n    }\r\n    const children = getMessageNodeChildren(node);\r\n    if (children) {\r\n      gatherReferencedUserIDsAndName(children, accumulator);\r\n    }\r\n  }\r\n}\r\n\r\n// JS replaceAll not well supported yet: https://caniuse.com/?search=replaceAll\r\nexport function replaceAll(str: string, replace: string, replaceWith: string) {\r\n  return str.split(replace).join(replaceWith);\r\n}\r\n\r\nexport type UserWithNames = {\r\n  displayName: string;\r\n  fullName: string;\r\n};\r\n\r\nexport type DisplayableUser = UserWithNames & {\r\n  id: UUID;\r\n  profilePictureURL: string | null;\r\n};\r\n\r\nexport function assert(predicate: boolean, message: string): asserts predicate {\r\n  if (!predicate) {\r\n    throw new Error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the supplied items using the specified combiner.\r\n *\r\n * @example\r\n * // Returns \"foo, bar, or baz\"\r\n * combine(\"or\", [\"foo\", \"bar\", \"baz\"])\r\n */\r\nexport function combine(combiner: string, items: string[]): string {\r\n  if (items.length === 0) {\r\n    return '';\r\n  } else if (items.length === 1) {\r\n    return items[0];\r\n  } else if (items.length === 2) {\r\n    return `${items[0]} ${combiner} ${items[1]}`;\r\n  } else {\r\n    return `${items.slice(0, -1).join(', ')}, ${combiner} ${\r\n      items[items.length - 1]\r\n    }`;\r\n  }\r\n}\r\n\r\nexport const CORD_DEEP_LINK_THREAD_QUERY_PARAM = 'cord_thread';\r\nexport const CORD_DEEP_LINK_MESSAGE_QUERY_PARAM = 'cord_message';\r\nexport const CORD_DEEP_LINK_QUERY_PARAM = 'cord_link';\r\n\r\nexport const CORD_ARGS_TO_REMOVE = [\r\n  // delete deeplinking query params from urls. We dont want them as part of\r\n  // the pageContext\r\n\r\n  // old deeplinking query params. Keep here to support old deeplinks.\r\n  CORD_DEEP_LINK_THREAD_QUERY_PARAM,\r\n  CORD_DEEP_LINK_MESSAGE_QUERY_PARAM,\r\n\r\n  // new (unified) deeplinking query param\r\n  CORD_DEEP_LINK_QUERY_PARAM,\r\n];\r\n\r\nexport function extractDeepLinkQueryParams(\r\n  url: string,\r\n): { threadID: UUID; messageID: UUID } | null {\r\n  try {\r\n    const parsed = new URL(url);\r\n    return extractDeepLinkQueryParamsV1(parsed);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// also see injectDeeplinkQueryParamsV1()\r\nfunction extractDeepLinkQueryParamsV1(\r\n  url: URL,\r\n): { threadID: UUID; messageID: UUID } | null {\r\n  const [version, threadID, messageID]: (string | undefined)[] = (\r\n    url.searchParams.get(CORD_DEEP_LINK_QUERY_PARAM) ?? ''\r\n  ).split('_');\r\n\r\n  if (version !== 'v1' || !threadID || !messageID) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    threadID,\r\n    messageID,\r\n  };\r\n}\r\n\r\ndayjs.extend(Calendar);\r\ndayjs.extend(isBetween);\r\n\r\nfunction getNowTimestamp() {\r\n  return dayjs(new Date(Date.now()));\r\n}\r\n\r\nexport function isTimestampTodayOrInTheFuture(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  return (\r\n    dayjs(timestamp).isSame(dayjs(now), 'day') ||\r\n    dayjs(timestamp).isAfter(dayjs(now), 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastSevenDays(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const sevenDaysBefore = now.subtract(7, 'day');\r\n\r\n  return (\r\n    dayjs(timestamp).isBetween(now, sevenDaysBefore, 'day') ||\r\n    dayjs(timestamp).isSame(sevenDaysBefore, 'date')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastThirtyDays(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const thirtyDaysBefore = now.subtract(30, 'day');\r\n\r\n  return (\r\n    dayjs(timestamp).isBetween(now, thirtyDaysBefore) ||\r\n    dayjs(timestamp).isSame(thirtyDaysBefore, 'date')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastThreeMonths(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const threeMonthsBefore = now.subtract(3, 'month');\r\n  return (\r\n    dayjs(timestamp).isBetween(now, threeMonthsBefore) ||\r\n    dayjs(timestamp).isSame(threeMonthsBefore, 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastYear(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const pastYear = now.subtract(1, 'year');\r\n  return (\r\n    dayjs(timestamp).isBetween(now, pastYear) ||\r\n    dayjs(timestamp).isSame(pastYear, 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampMoreThanAYearAgo(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const pastYear = now.subtract(1, 'year');\r\n  return dayjs(timestamp).isBefore(pastYear, 'day');\r\n}\r\n\r\nexport function createDefaultSenderEmailName(applicationName: string) {\r\n  return applicationName.toLowerCase().split(/\\W/).join('') + '-notifications';\r\n}\r\n\r\n/**\r\n * in both the console UI and the API we don't allow editing the whole sender\r\n * field on customEmailTemplate, but only specific parts of it. This function\r\n * takes a 'sender' input and returns parts of the email.\r\n *\r\n * @example\r\n * const input = 'Cord <hello@cord.com>';\r\n * getEmailInfoFromSenderData(input); // {emailAddress: \"hello@cord.com\", domain: \"cord.com\", username: \"hello\" }\r\n */\r\ntype SenderInfo = {\r\n  domain: string;\r\n  emailAddress: string;\r\n  username: string;\r\n};\r\nexport function getEmailInfoFromSenderData(\r\n  sender?: string,\r\n): SenderInfo | undefined {\r\n  if (!sender) {\r\n    return undefined;\r\n  }\r\n\r\n  const mentionMatchingPattern = new RegExp(\r\n    '(<)' + // first match a \"<\"\r\n      '([^@]+)' + // then match anything that's not an @ symbol and is at least 1 char\r\n      '(@)' + // then match the @ so we can just access the domain itself easily\r\n      '([^>]+)', // then match anything that's not an > symbol and is at least 1 char\r\n    'gm',\r\n  );\r\n\r\n  let info: SenderInfo | undefined = undefined;\r\n  let match: RegExpExecArray | null;\r\n\r\n  while ((match = mentionMatchingPattern.exec(sender))) {\r\n    info = {\r\n      username: match[2],\r\n      domain: match[4],\r\n      emailAddress: match[0].substring(1),\r\n    };\r\n  }\r\n\r\n  return info;\r\n}\r\n\r\nexport function capitalizeFirstLetter(string: string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n", "// This is for important URLs to all kinds of services\r\n\r\nexport const TOP_SERVER_HOST = process.env.TOP_SERVER_HOST!;\r\nexport const APP_SERVER_HOST = process.env.APP_SERVER_HOST!;\r\nexport const API_SERVER_HOST = process.env.API_SERVER_HOST!;\r\nexport const API_SERVER_HOST_PRODUCTION =\r\n  process.env.API_SERVER_HOST_PRODUCTION!;\r\nexport const ADMIN_SERVER_HOST = process.env.ADMIN_SERVER_HOST!;\r\nexport const CONSOLE_SERVER_HOST = process.env.CONSOLE_SERVER_HOST!;\r\nexport const MARKETING_SERVER_HOST = process.env.MARKETING_SERVER_HOST!;\r\nexport const CORD_TO_HOST = process.env.CORD_TO_HOST!;\r\nexport const AUTH0_CUSTOM_LOGIN_DOMAIN = process.env.AUTH0_CUSTOM_LOGIN_DOMAIN!;\r\nexport const DOCS_SERVER_HOST = process.env.DOCS_SERVER_HOST!;\r\nexport const SLACK_APP_REDIRECT_HOST = process.env.SLACK_APP_REDIRECT_HOST;\r\n\r\nexport const TOP_ORIGIN = 'https://' + process.env.TOP_SERVER_HOST;\r\nexport const APP_ORIGIN = 'https://' + process.env.APP_SERVER_HOST;\r\nexport const API_ORIGIN = 'https://' + process.env.API_SERVER_HOST;\r\nexport const ADMIN_ORIGIN = 'https://' + process.env.ADMIN_SERVER_HOST;\r\nexport const CONSOLE_ORIGIN = 'https://' + process.env.CONSOLE_SERVER_HOST;\r\nexport const MARKETING_ORIGIN = 'https://' + process.env.MARKETING_SERVER_HOST;\r\nexport const CORD_TO_ORIGIN = 'https://' + process.env.CORD_TO_HOST;\r\nexport const AUTH0_ORIGIN = 'https://' + process.env.AUTH0_CUSTOM_LOGIN_DOMAIN;\r\nexport const DOCS_ORIGIN = 'https://' + process.env.DOCS_SERVER_HOST;\r\nexport const DOCS_AI_CHATBOT_SERVER_HOST =\r\n  process.env.DOCS_AI_CHATBOT_SERVER_HOST;\r\nexport const COMMUNITY_ORIGIN = 'https://' + process.env.COMMUNITY_SERVER_HOST;\r\n\r\n// See https://github.com/getcord/interactive-demos\r\nexport const DEMO_APPS_WEBHOOK_URL =\r\n  'https://cord-interactive-demos.vercel.app/events';\r\n", "import { DOCS_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nexport const SUPPORT_USER_UUID = 'c9a61e1d-7c8a-4c7e-838a-9d431cf4ed77';\r\nexport const RADICAL_ORG_ID = '6bba8678-b14e-4af7-b2f2-05ee807dfa82';\r\nexport const RADICAL_TEST_ORG_ID = '3689f86d-0c70-40de-a2f0-a4a9ea4994e3';\r\nexport const CORD_PLATFORM_ORG_ID = '746c0b57-7363-4766-9ee9-7ae8ec7531a8';\r\nexport const CORD_ADMIN_PLATFORM_ORG_ID =\r\n  '84ae9086-8414-4ed3-ab73-096e6438f095';\r\nexport const CORD_SDK_TEST_ORG_ID = 'edda098d-6db7-4202-a5ac-ff3293b78c47';\r\nexport const GILLIAN_TEST_SLACK_ORG_ID = 'f7ab9ab8-f5b2-41a4-a419-1b8076626d3f';\r\nexport const KAT_TEST_SLACK_ORG_ID = '4506fadd-f8dc-4795-9b5d-d28feda39d84';\r\nexport const CORD_SLACK_TEAM_ID = 'T012Y0TBQLW'; // radicalhqworkspace\r\nexport const CORD_TEST_SLACK_TEAM_ID = 'T015UJY6YQK'; // radicaltestorg\r\n\r\nexport const SLACK_APP_CLIENT_ID = '1100027398710.1180115520790';\r\nexport const SLACK_APP_ID = 'A015A3DFAP8';\r\nexport const SLACK_DEV_APP_CLIENT_ID = '1198644236835.1943446227956';\r\nexport const SLACK_ADMIN_LOGIN_APP_CLIENT_ID = '1100027398710.2437628320357';\r\nexport const SLACK_ADMIN_LOGIN_APP_ID = 'A02CVJG9EAH';\r\nexport const SLACK_DEV_APP_ID = 'A01TRD46PU4';\r\nexport const SLACK_INTERNAL_TOOLS_APP_ID = 'A04JKM945CM';\r\nexport const CORD_UPDATES_TEST_CHANNEL_ID = 'C0547K3V868';\r\n\r\n// As opposed to e.g. a customer's Slack app\r\nexport const CORD_SLACK_APP_IDS = [\r\n  SLACK_APP_ID,\r\n  SLACK_DEV_APP_ID,\r\n  SLACK_ADMIN_LOGIN_APP_ID,\r\n  SLACK_INTERNAL_TOOLS_APP_ID,\r\n];\r\n\r\nexport const CORD_APPLICATION_ID = '5a076ee9-8b9e-4156-9ac4-871bdc4569ec';\r\nexport const CORD_SDK_TEST_APPLICATION_ID =\r\n  'b6501bf5-46f7-4db7-9996-c42dd9f758b0';\r\nexport const CORD_SAMPLE_TOKEN_CUSTOMER_ID =\r\n  '1c367aca-37c9-4733-8bef-e9f11a7d0f17';\r\nexport const CORD_DEMO_APPS_TOKEN_CUSTOMER_ID =\r\n  '4383cf39-8b6a-4c33-9d8a-71567ed47a60';\r\nexport const CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID =\r\n  'aeb2797f-f0a3-485c-a317-4986e2c8343b';\r\nexport const CORD_AUTOMATED_TESTS_APPLICATION_ID =\r\n  'dfa86152-9e7e-4d2d-acd6-bfddef71f58e';\r\nexport const CLACK_APPLICATION_ID = '5fa22ba9-5446-4af8-bc93-7ce54a9aa0ba';\r\nexport const CORD_HOMEPAGE_APPLICATION_ID =\r\n  '29e6499a-bbed-4eb2-b057-b36d60ad76c9';\r\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID!;\r\n\r\nexport const CORD_CUSTOMER_ID = '12ed6251-28d5-4686-9a75-20a15bd31499';\r\n\r\nexport const CSS_CUSTOMIZATION_ON_DOCS_PREFIX = 'css-customization-';\r\nexport const BETA_V2_DOCS_PREFIX = 'beta2-';\r\nexport const LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX = 'live-css-docs-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX =\r\n  'live-component-docs-thread-';\r\nexport const LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-thread-';\r\nexport const LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-launcher-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX =\r\n  'live-component-docs-composer-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-content-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_PIN_THREAD_ID_PREFIX =\r\n  'live-component-docs-pin-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX =\r\n  'live-component-docs-reactions-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX =\r\n  'live-component-docs-external-notification-';\r\nexport const LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX =\r\n  'live-customization-docs-replacements-thread-';\r\nexport const DOCS_TOKEN_KEY = 'docs-token';\r\n\r\nexport const LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID = 'noavatar';\r\n\r\nexport const DOCS_LIVE_PAGE_LOCATIONS = {\r\n  cssCustomization: 'css-customization',\r\n  liveCss: 'live-css-docs',\r\n  liveThread: 'live-thread',\r\n  liveThreadList: 'live-thread-list',\r\n  livePin: 'live-pin',\r\n  livePinChartExample: 'live-pin-chart-example',\r\n  liveFloatingThreads: 'live-floating-threads',\r\n  liveSelectionComments: 'live-selection-comments',\r\n  liveSidebar: 'live-sidebar',\r\n  liveInbox: 'live-inbox',\r\n  liveInboxLauncher: 'live-inbox-launcher',\r\n  liveSidebarLauncher: 'live-sidebar-launcher',\r\n  livePagePresence: 'live-page-presence',\r\n  livePresenceFacepile: 'live-presence-facepile',\r\n  liveComposer: 'live-composer',\r\n  liveMessage: 'live-message',\r\n  liveMessageContent: 'live-message-content',\r\n  liveNotificationList: 'live-notification-list',\r\n  liveThreadedComments: 'live-threaded-comments',\r\n  liveReactions: 'live-reactions',\r\n  liveReplacementsTutorial: 'live-replacements-tutorial',\r\n  liveBetaV2Thread: 'live-beta-v2-thread',\r\n  liveBetaV2Threads: 'live-beta-v2-threads',\r\n};\r\n\r\nexport const CORD_DOCS_CLIENT_TOKEN = '__cord_docs_token__';\r\n\r\nexport const DOCS_URLS = {\r\n  tutorials: {\r\n    getProductionReady: {\r\n      addYourBranding: `${DOCS_ORIGIN}/get-started/live-css-editor`,\r\n    },\r\n    integrationGuide: `${DOCS_ORIGIN}/get-started/integration-guide`,\r\n    demoApps: `${DOCS_ORIGIN}/get-started/demo-apps`,\r\n  },\r\n  components: {\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread`,\r\n    threadList: `${DOCS_ORIGIN}/components/cord-thread-list`,\r\n    threadedComments: `${DOCS_ORIGIN}/components/cord-threaded-comments`,\r\n    sidebar: `${DOCS_ORIGIN}/components/cord-sidebar`,\r\n    inbox: `${DOCS_ORIGIN}/components/cord-inbox`,\r\n    inboxLauncher: `${DOCS_ORIGIN}/components/cord-inbox-launcher`,\r\n    sidebarLauncher: `${DOCS_ORIGIN}/components/cord-sidebar-launcher`,\r\n    composer: `${DOCS_ORIGIN}/components/cord-composer`,\r\n    message: `${DOCS_ORIGIN}/components/cord-message`,\r\n    messageContent: `${DOCS_ORIGIN}/components/cord-message-content`,\r\n    reactions: `${DOCS_ORIGIN}/components/cord-reactions`,\r\n  },\r\n  howTo: {\r\n    customThreadedComments: `${DOCS_ORIGIN}/customization/custom-threaded-comments`,\r\n    cssCustomization: `${DOCS_ORIGIN}/customization/css`,\r\n    replacements: `${DOCS_ORIGIN}/customization/custom-react-components/tutorial`,\r\n  },\r\n  getStarted: {\r\n    authenticateYourUser: `${DOCS_ORIGIN}/get-started/integration-guide/generate-an-auth-token`,\r\n  },\r\n  betaV2Components: {\r\n    threads: `${DOCS_ORIGIN}/components/cord-threads?version=2.0`,\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread?version=2.0`,\r\n  },\r\n};\r\n\r\nexport const CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID = 'C05FAVBSSN7';\r\nexport const CORD_SELF_SERVE_SLACK_CHANNEL_ID = 'C05GR4WSV5Z';\r\n\r\n// Tokens created for the sample token and demo apps environment types both\r\n// create groups with this id.  Both of them need to use the same groupID because\r\n// it is hardcoded into the demo apps client code, and while the demo apps mostly\r\n// use the demo apps environment apps, they sometimes use sample app tokens.\r\nexport const DEMO_APPS_APP_GROUP_ID = 'my-first-group';\r\n", "import type { Node } from 'slate';\r\nimport { Element } from 'slate';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport type {\r\n  MessageAssigneeNode,\r\n  MessageContent,\r\n  MessageMentionNode,\r\n  MessageNode,\r\n  MessageNodeWithChildren,\r\n  MessageStyledBlockType,\r\n  MessageTextNode,\r\n  MessageTodoNode,\r\n  UUID,\r\n} from '@cord-sdk/types';\r\nimport { trimStart, trimEnd } from './trim.js';\r\n\r\nexport const MAX_BULLET_INDENT = 4;\r\n\r\n// '& Node' in return value stops Slate complaining when passing node to its methods\r\n// Casting to any is because TS doesn't seem to like combining the two to make the node\r\nexport function createMessageNode<\r\n  NodeType extends MessageNodeType,\r\n  NodeAttributes extends MessageNode<NodeType> = MessageNode<NodeType>,\r\n>(\r\n  nodeType: NodeType,\r\n  nodeAttributes: Omit<NodeAttributes, 'type'>,\r\n): MessageNode<NodeType> & Node {\r\n  return {\r\n    type: nodeType,\r\n    ...nodeAttributes,\r\n  } as any;\r\n}\r\n\r\nexport function createMessageTextNode(text: string): MessageTextNode {\r\n  return {\r\n    text,\r\n  };\r\n}\r\n\r\nexport function createFormattedMessageTextNode(input: {\r\n  text: string;\r\n  bold?: boolean;\r\n  italic?: boolean;\r\n  underline?: boolean;\r\n  code?: boolean;\r\n}): MessageTextNode {\r\n  return input;\r\n}\r\n\r\nexport function isMessageNodeType<NodeType extends MessageNodeType>(\r\n  node: Node | undefined,\r\n  nodeType: NodeType,\r\n): node is MessageNode<NodeType> {\r\n  return Boolean(node && Element.isElement(node) && node.type === nodeType);\r\n}\r\n\r\nexport function isMessageNodeText(node: MessageNode): node is MessageTextNode {\r\n  return !node.type && 'text' in node;\r\n}\r\n\r\nexport function createParagraphNode(text = '') {\r\n  return createMessageNode(MessageNodeType.PARAGRAPH, {\r\n    children: [{ text }],\r\n  });\r\n}\r\n\r\nexport function createMentionNode(userID: UUID, name: string) {\r\n  return createMessageNode(MessageNodeType.MENTION, {\r\n    user: { id: userID },\r\n    children: [{ text: `@${name}` }],\r\n  });\r\n}\r\n\r\nexport function createAssigneeNode(userID: UUID, name: string) {\r\n  return createMessageNode(MessageNodeType.ASSIGNEE, {\r\n    user: { id: userID },\r\n    children: [{ text: `+${name}` }],\r\n  });\r\n}\r\n\r\nexport function createLinkNode(url: string, text: string) {\r\n  return createMessageNode(MessageNodeType.LINK, {\r\n    url,\r\n    children: [{ text }],\r\n  });\r\n}\r\n\r\nexport function messageContentFromString(text: string): MessageContent {\r\n  return [createParagraphNode(text)];\r\n}\r\n\r\nfunction getInitialStyledBlockProps(\r\n  blockType: MessageStyledBlockType,\r\n  indent?: number,\r\n) {\r\n  if (blockType === MessageNodeType.TODO) {\r\n    return {\r\n      done: false,\r\n      todoID: uuid(),\r\n    };\r\n  } else if (\r\n    blockType === MessageNodeType.BULLET ||\r\n    blockType === MessageNodeType.NUMBER_BULLET\r\n  ) {\r\n    return {\r\n      indent,\r\n    };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport function createStyledBlockNode(\r\n  blockType: MessageStyledBlockType,\r\n  text: string,\r\n  indent?: number,\r\n) {\r\n  return createMessageNode(blockType, {\r\n    children: messageContentFromString(text),\r\n    ...getInitialStyledBlockProps(blockType, indent),\r\n  });\r\n}\r\n\r\nconst findTodoNodesInSubtree = (\r\n  parent: MessageNode,\r\n  accumulator: MessageTodoNode[],\r\n): void => {\r\n  if (parent.type === MessageNodeType.TODO) {\r\n    accumulator.push(parent);\r\n  } else {\r\n    const children = getMessageNodeChildren(parent);\r\n    if (children) {\r\n      for (const node of children) {\r\n        findTodoNodesInSubtree(node, accumulator);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const todoNodesFromMessage = (messageContent: MessageContent) => {\r\n  const accumulator: MessageTodoNode[] = [];\r\n\r\n  for (const node of messageContent) {\r\n    findTodoNodesInSubtree(node, accumulator);\r\n  }\r\n\r\n  return accumulator;\r\n};\r\n\r\nexport function getMessageNodeChildren(node: MessageNode) {\r\n  return (node as MessageNodeWithChildren).children;\r\n}\r\n\r\nexport const textFromNodeRecursive = (node: MessageNode): string => {\r\n  let textArr: Array<string> = [];\r\n\r\n  if (isMessageNodeText(node)) {\r\n    return node.text;\r\n  }\r\n\r\n  const children = getMessageNodeChildren(node);\r\n  if (children) {\r\n    textArr = textArr.concat(\r\n      children.map((child) => textFromNodeRecursive(child)),\r\n    );\r\n  }\r\n\r\n  const result = textArr.join('');\r\n\r\n  return result;\r\n};\r\n\r\nexport function convertStructuredMessageToText(\r\n  messageContent: MessageContent,\r\n): string {\r\n  return messageContent\r\n    .map((node) => textFromNodeRecursive(node))\r\n    .join('\\n')\r\n    .trim();\r\n}\r\n\r\n// converts a list of MessageNode into text.\r\n// any whitespace or assignees at the start/end are removed.\r\nfunction taskTitleFromMessageNodes(\r\n  nodes: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\r\n): string {\r\n  let pending = '';\r\n  let text = '';\r\n\r\n  for (const node of nodes) {\r\n    if (node.type === MessageNodeType.ASSIGNEE) {\r\n      if (text.trim() === '') {\r\n        // no text was seen so far, so this is an assignee at the start of a\r\n        // message. We want to skip those.\r\n        continue;\r\n      }\r\n      // okay, we have seen some text already, but this assignee might be at\r\n      // the very end of the message. Hence let the assignee wait in the\r\n      // pending until we find non-empty text (which would mean the assignee is\r\n      // not at the end of the message)\r\n      pending += trimStart(textFromNodeRecursive(node), '+');\r\n      continue;\r\n    }\r\n\r\n    let newText = '';\r\n    if (isMessageNodeText(node)) {\r\n      newText = node.text;\r\n    } else if (node.type === MessageNodeType.MENTION) {\r\n      newText = trimStart(textFromNodeRecursive(node), '@');\r\n    }\r\n\r\n    const isEmpty = newText.trim() === '';\r\n    if (isEmpty) {\r\n      // this might be either trailing whitespace or whitespace in the middle\r\n      // of the message. For now, let's have it in pending until something\r\n      // non-empty arrives\r\n      pending += newText;\r\n    } else {\r\n      // we found some non-empty text so whatever was waiting in the pending\r\n      // can now finally become part of text\r\n      text += pending + newText;\r\n      pending = '';\r\n    }\r\n  }\r\n\r\n  return trimEnd(text.trim(), ':').trim();\r\n}\r\n\r\n// converts each MessageNode into text, returns the first non-empty one.\r\nexport function taskTitleFromMessageContent(\r\n  messageContent: MessageContent,\r\n): string {\r\n  for (let i = 0; i < messageContent.length; i++) {\r\n    const nodes: (\r\n      | MessageTextNode\r\n      | MessageAssigneeNode\r\n      | MessageMentionNode\r\n    )[] = [];\r\n    flattenMessage(messageContent[i], nodes);\r\n\r\n    const title = taskTitleFromMessageNodes(nodes);\r\n    if (title.length > 0) {\r\n      return title;\r\n    }\r\n  }\r\n\r\n  return 'Task created using Cord';\r\n}\r\n\r\nfunction flattenMessage(\r\n  node: MessageNode,\r\n  accumulator: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\r\n) {\r\n  if (\r\n    isMessageNodeText(node) ||\r\n    node.type === MessageNodeType.ASSIGNEE ||\r\n    node.type === MessageNodeType.MENTION\r\n  ) {\r\n    accumulator.push(node);\r\n    return;\r\n  }\r\n  const children = getMessageNodeChildren(node);\r\n  if (!children) {\r\n    return;\r\n  }\r\n\r\n  for (const child of children) {\r\n    flattenMessage(child, accumulator);\r\n  }\r\n}\r\n\r\n// message.content is null if message is deleted\r\nexport const findMessageNode = (\r\n  arr: MessageContent | null,\r\n  nodeType: MessageNodeType,\r\n): any => {\r\n  if (!arr) {\r\n    return null;\r\n  }\r\n  for (const item of arr) {\r\n    if (item.type === nodeType) {\r\n      return item;\r\n    }\r\n    if ('children' in item) {\r\n      const p = findMessageNode(item.children, nodeType);\r\n      if (p) {\r\n        return p;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID, JsonObject, EntityMetadata } from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { asSlackBotUserAuthData } from 'server/src/slack/types.ts';\r\nimport type { SlackBotCredentials } from 'server/src/slack/util.ts';\r\n\r\nexport type OrgEntityState = 'active' | 'inactive';\r\n\r\n@Table({\r\n  tableName: 'orgs',\r\n  timestamps: false,\r\n})\r\nexport class OrgEntity extends Model<\r\n  InferAttributes<OrgEntity>,\r\n  InferCreationAttributes<OrgEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.ENUM('inactive', 'active') })\r\n  state!: OrgEntityState;\r\n\r\n  // The following fields will be populated with information from the org's respective auth provider.\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  name!: string;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: true })\r\n  domain!: string | null;\r\n\r\n  // The following fields contain information related external auth providers (Slack, GSuite, etc).\r\n\r\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\r\n  externalID!: string; // provider-specific id\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n    unique: 'AppExternalIDUniqueness',\r\n  })\r\n  externalProvider!: AuthProviderType; // the provider this org originated from\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  externalAuthData!: JsonObject | null; // provider-specific access token\r\n\r\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false, allowNull: false })\r\n  internal!: CreationOptional<boolean>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  customSlackAppID!: string | null;\r\n\r\n  public async getLinkedOrg(): Promise<OrgEntity | null> {\r\n    // for now, only allow fetching the linked org for platform orgs. Once we\r\n    // need to feth the platform org that is linked to current Slack org, then\r\n    // we will need to update this code.\r\n    if (this.externalProvider !== 'platform') {\r\n      return null;\r\n    }\r\n    return await OrgEntity.findOne({\r\n      include: {\r\n        model: LinkedOrgsEntity,\r\n        required: true,\r\n        where: {\r\n          sourceOrgID: this.id,\r\n          sourceExternalProvider: this.externalProvider,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public async loadLinkedSlackOrg() {\r\n    if (this.externalProvider === 'slack') {\r\n      return this;\r\n    }\r\n    const slackOrg = await this.getLinkedOrg();\r\n    return slackOrg?.externalProvider === 'slack' ? slackOrg : null;\r\n  }\r\n\r\n  public async getSlackBotCredentials(): Promise<SlackBotCredentials | null> {\r\n    const slackOrg = await this.loadLinkedSlackOrg();\r\n\r\n    if (slackOrg) {\r\n      const authData = asSlackBotUserAuthData(slackOrg.externalAuthData);\r\n      if (authData) {\r\n        return { org: slackOrg, ...authData };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\n\r\n@Table({\r\n  tableName: 'linked_orgs',\r\n  timestamps: false,\r\n})\r\nexport class LinkedOrgsEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    unique: true,\r\n  })\r\n  sourceOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n  })\r\n  sourceExternalProvider!: AuthProviderType;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  linkedOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n  })\r\n  linkedExternalProvider!: AuthProviderType;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  mergerUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  linkedTimestamp!: Date;\r\n}\r\n", "import type { JsonValue } from 'common/types/index.ts';\r\n\r\nexport type SlackBotUserAuthData = {\r\n  bot_user_id: string;\r\n  bot_access_token: string;\r\n};\r\n\r\nexport function asSlackBotUserAuthData(\r\n  x: JsonValue,\r\n): SlackBotUserAuthData | null {\r\n  if (\r\n    x &&\r\n    typeof x === 'object' &&\r\n    !Array.isArray(x) &&\r\n    typeof x.bot_user_id === 'string' &&\r\n    typeof x.bot_access_token === 'string'\r\n  ) {\r\n    return {\r\n      bot_user_id: x.bot_user_id,\r\n      bot_access_token: x.bot_access_token,\r\n    };\r\n  }\r\n  return null;\r\n}\r\n\r\n// Annoyingly, Slack uses different sets of string constants to denote channel\r\n// types in different API methods.  Some API methods use single characters\r\n// ('C', 'G',...) in their response, others use lowercase words ('channel',\r\n// 'im',...). And then other methods use a different set of snake_case words\r\n// ('public_channel', 'private_channel'). And then, some responses may not have\r\n// a single channel type field, but rather a bunch of boolean fields\r\n// ('is_channel', 'is_group',...).\r\nexport enum SlackChannelType {\r\n  PUBLIC = 'C',\r\n  PRIVATE = 'G',\r\n}\r\n\r\nexport enum SlackMessageChannelType {\r\n  PUBLIC = 'channel',\r\n  IM = 'im',\r\n}\r\n\r\nexport type ChannelArchiveEvent = {\r\n  // Confusingly, this is the channel ID\r\n  channel: string;\r\n  user: string;\r\n};\r\n\r\nexport type ChannelUnarchiveEvent = ChannelArchiveEvent;\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  UserType,\r\n  UserState,\r\n  UUID,\r\n  EntityMetadata,\r\n} from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\n\r\nexport type UserEntityState = UserState;\r\n@Table({\r\n  tableName: 'users',\r\n  timestamps: false,\r\n})\r\nexport class UserEntity extends Model<\r\n  InferAttributes<UserEntity>,\r\n  InferCreationAttributes<UserEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  updatedTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.ENUM('person', 'bot'), defaultValue: 'person' })\r\n  userType!: CreationOptional<UserType>;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false })\r\n  admin!: CreationOptional<boolean>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('active', 'deleted'),\r\n    defaultValue: 'active',\r\n    allowNull: false,\r\n  })\r\n  state!: CreationOptional<UserEntityState>;\r\n\r\n  // The following fields will be populated with information from the user's respective auth provider.\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  name!: string | null; // the user's full name\r\n\r\n  @Column({ type: DataTypes.DATE })\r\n  nameUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  screenName!: string | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  email!: string | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  profilePictureURL!: string | null;\r\n\r\n  @Column({ type: DataTypes.DATE })\r\n  profilePictureURLUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\r\n  externalID!: CreationOptional<string>; // provider-specific user id\r\n\r\n  @Column({ type: DataTypes.ENUM('slack', 'platform') })\r\n  externalProvider!: AuthProviderType | null; // the provider used to log in\r\n\r\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { FileUploadStatus } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  getSignedDeleteURL,\r\n  getSignedDownloadURL,\r\n  getSignedUploadURL,\r\n} from 'server/src/files/upload.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { API_ORIGIN } from 'common/const/Urls.ts';\r\nimport { encodeFileProxyToken } from 'server/src/files/download.ts';\r\n\r\n@Table({\r\n  tableName: 'files',\r\n  timestamps: false,\r\n})\r\nexport class FileEntity extends Model<\r\n  InferAttributes<FileEntity>,\r\n  InferCreationAttributes<FileEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID; // the user who created this file\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  mimeType!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n  })\r\n  size!: number;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  uploadStatus!: FileUploadStatus;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  s3Bucket!: UUID | null;\r\n\r\n  // URL that points to S3, expires after 24 hours\r\n  async getSignedDownloadURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedDownloadURL(\r\n      this.id,\r\n      this.name,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n\r\n  // URL that points to our FileProxyHandler, never expires\r\n  getPermanentDownloadURL() {\r\n    return `${API_ORIGIN}/file?token=${encodeURIComponent(\r\n      encodeFileProxyToken({\r\n        id: this.id,\r\n      }),\r\n    )}`;\r\n  }\r\n\r\n  async getSignedUploadURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedUploadURL(\r\n      this.id,\r\n      this.size,\r\n      this.mimeType,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n\r\n  async getDeleteURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedDeleteURL(\r\n      this.id,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc.js';\r\nimport * as credentialProviderNode from '@aws-sdk/credential-provider-node';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  UPLOAD_URL_TTL_SECONDS,\r\n  DOWNLOAD_URL_TTL_SECONDS,\r\n  DELETE_URL_TTL_SECONDS,\r\n} from 'common/const/Timing.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\n\r\ndayjs.extend(utc);\r\n\r\nconst {\r\n  S3_ACCESS_KEY_ID,\r\n  S3_ACCESS_KEY_SECRET,\r\n  S3_BUCKET,\r\n  S3_ENDPOINT,\r\n  S3_REGION,\r\n  S3_PUBLIC_BUCKET,\r\n} = env;\r\n\r\nconst defaultS3Bucket: S3BucketConfig = {\r\n  bucket: S3_BUCKET,\r\n  region: S3_REGION,\r\n};\r\n\r\nexport const publicS3Bucket: S3BucketConfig = {\r\n  bucket: S3_PUBLIC_BUCKET,\r\n  region: S3_REGION,\r\n};\r\n\r\nexport interface S3BucketConfig {\r\n  bucket: string;\r\n  region: string;\r\n  accessKeyID?: string;\r\n  accessKeySecret?: string;\r\n}\r\n\r\nexport interface S3BucketConfigWithCredentials extends S3BucketConfig {\r\n  accessKeyID: string;\r\n  accessKeySecret: string;\r\n}\r\n\r\ninterface Credentials {\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n  sessionToken?: string;\r\n  expiration?: Date;\r\n}\r\nlet credentials: Credentials | null = null;\r\n\r\nfunction getCredentials() {\r\n  if (!credentials) {\r\n    throw new Error('Link signing credentials not initialized');\r\n  }\r\n  return credentials;\r\n}\r\n\r\nexport async function initializeLinkSigningCredentials() {\r\n  if (S3_ACCESS_KEY_ID && S3_ACCESS_KEY_SECRET) {\r\n    // there are credentials in the .env file - we'll just use these\r\n    credentials = {\r\n      accessKeyId: S3_ACCESS_KEY_ID,\r\n      secretAccessKey: S3_ACCESS_KEY_SECRET,\r\n    };\r\n    return;\r\n  }\r\n\r\n  return await refreshLinkSigningCredentials();\r\n}\r\n\r\nasync function refreshLinkSigningCredentials(): Promise<void> {\r\n  try {\r\n    credentials = await credentialProviderNode.defaultProvider({})();\r\n\r\n    // We want to refresh (at least) every 5 hours.\r\n    let refreshInMilliseconds = 5 * 60 * 60 * 1000; // 5 hours\r\n\r\n    if (credentials.expiration) {\r\n      const millisecondsUntilExpiration =\r\n        credentials.expiration.getTime() - Date.now();\r\n\r\n      // We want to create signed links that are valid for a certain period of\r\n      // time, but it's limited by the lifetime of these credentials. So we want\r\n      // to refresh the credentials soon enough: refresh no later than the\r\n      // current credentials expiry minus the time for which the signed links to\r\n      // be valid. For good measure add a 5 minute safety margin.\r\n      const maxTtlSeconds = Math.max(\r\n        DOWNLOAD_URL_TTL_SECONDS,\r\n        UPLOAD_URL_TTL_SECONDS,\r\n        DELETE_URL_TTL_SECONDS,\r\n      );\r\n      const needNewCredentialsInMilliseconds =\r\n        millisecondsUntilExpiration - (maxTtlSeconds + 5 * 60) * 1000;\r\n\r\n      if (needNewCredentialsInMilliseconds < 60 * 1000) {\r\n        // No point in trying too often. Wait at least one minute.\r\n        refreshInMilliseconds = 60000;\r\n      } else if (needNewCredentialsInMilliseconds < refreshInMilliseconds) {\r\n        // We want new credentials sooner than the default 5 hours from above.\r\n        refreshInMilliseconds = needNewCredentialsInMilliseconds;\r\n      }\r\n    }\r\n\r\n    anonymousLogger().info('Refreshed AWS credentials for S3 link signing', {\r\n      accessKeyId: credentials.accessKeyId,\r\n      nextRefreshInSeconds: refreshInMilliseconds / 1000,\r\n    });\r\n    setTimeoutAsync(refreshLinkSigningCredentials, refreshInMilliseconds);\r\n  } catch (err) {\r\n    // Something went wrong. Log the exception...\r\n    anonymousLogger().logException('refreshLinkSigningCredentials', err);\r\n    // ...then wait one second...\r\n    await sleep(1000);\r\n    // ...then retry.\r\n    return await refreshLinkSigningCredentials();\r\n  }\r\n}\r\n\r\nconst sha256 = (text: string) =>\r\n  crypto.createHash('sha256').update(text).digest();\r\n\r\nconst hmac256 = (text: string, key: any) =>\r\n  crypto.createHmac('sha256', key).update(text).digest();\r\n\r\nconst sortedEntries = (object: Record<string, string>) =>\r\n  Object.entries(object).sort(([key1], [key2]) => (key1 < key2 ? -1 : 1));\r\n\r\nexport const getSignedDownloadURL = (\r\n  fileId: UUID,\r\n  filename: string,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config?: S3BucketConfig,\r\n) =>\r\n  getSignedURL(fileId, DOWNLOAD_URL_TTL_SECONDS, config, 'GET', undefined, {\r\n    'response-content-disposition': `attachment; filename=\"${encodeURIComponent(\r\n      filename,\r\n    )}\"`,\r\n  });\r\n\r\nexport const getSignedUploadURL = (\r\n  key: string,\r\n  size: number,\r\n  mimeType: string,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config?: S3BucketConfig,\r\n) =>\r\n  getSignedURL(key, UPLOAD_URL_TTL_SECONDS, config, 'PUT', {\r\n    'Content-Length': `${size}`,\r\n    'Content-Type': mimeType,\r\n  });\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const getSignedDeleteURL = (key: string, config?: S3BucketConfig) =>\r\n  getSignedURL(key, DELETE_URL_TTL_SECONDS, config, 'DELETE');\r\n\r\nexport function getPublicBucketDownloadURL(filename: string) {\r\n  return `https://${env.PUBLIC_UPLOADS_HOST}/${getPublicBucketKey(filename)}`;\r\n}\r\n\r\nexport function getPublicBucketKey(key: string) {\r\n  return env.S3_USE_PATH_BASED_URLS === 'true'\r\n    ? env.S3_PUBLIC_BUCKET + '/' + key\r\n    : key;\r\n}\r\n\r\n/*\r\n  Implementation of https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\r\n  Also documented here: https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\r\n  I did this manually because I didn't want to include aws-sdk which for some reason is massive.\r\n*/\r\nexport const getSignedURL = (\r\n  key: string,\r\n  expirationSeconds = 60, // default 1 minute\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config: S3BucketConfig = defaultS3Bucket,\r\n  verb = 'GET',\r\n  additionalHeaders: Record<string, string> = {},\r\n  additionalQueryParams: Record<string, string> = {},\r\n) => {\r\n  // We need credentials to create a signed URL. If the S3BucketConfig includes\r\n  // them, then we use those (that's the case for 3rd party buckets). Otherwise,\r\n  // we get our global credentials, which are the ones supplied in the .env\r\n  // file, if any, or using the EC2 instance profile privileges instead.\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  const credentials: Credentials =\r\n    config.accessKeyID && config.accessKeySecret\r\n      ? {\r\n          accessKeyId: config.accessKeyID,\r\n          secretAccessKey: config.accessKeySecret,\r\n        }\r\n      : getCredentials();\r\n\r\n  let now = dayjs().utc();\r\n\r\n  // Round down the \"current time\" so that the signed URL doesn't change every\r\n  // second. This gives browsers some hope of having a cache hit for\r\n  // potentially-large images and files. Only do the rounding-down if the\r\n  // expiration time is long enough, since this effectively shaves time off of\r\n  // the expiration.\r\n  if (expirationSeconds > 2 * 60) {\r\n    now = now.second(0);\r\n  }\r\n  if (expirationSeconds > 2 * 60 * 60) {\r\n    now = now.minute(0);\r\n  }\r\n\r\n  const time = now.format('YYYYMMDD[T]HHmmss[Z]');\r\n  const date = now.format('YYYYMMDD');\r\n  const s3Endpoint = S3_ENDPOINT.replace('<REGION>', config.region);\r\n\r\n  const path =\r\n    '/' +\r\n    encodeRFC3986URIComponent(config.bucket) +\r\n    '/' +\r\n    key.split('/').map(encodeRFC3986URIComponent).join('/');\r\n  const host = new URL(s3Endpoint).host;\r\n\r\n  const headers = {\r\n    host: host,\r\n    ...additionalHeaders,\r\n  };\r\n\r\n  const signedHeaders = Object.keys(headers)\r\n    .map((header) => header.toLowerCase())\r\n    .sort()\r\n    .join(';');\r\n\r\n  const credential = [\r\n    credentials.accessKeyId,\r\n    date,\r\n    config.region,\r\n    's3',\r\n    'aws4_request',\r\n  ].join('/');\r\n\r\n  const query: Record<string, string> = {\r\n    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',\r\n    'X-Amz-Credential': credential,\r\n    'X-Amz-Date': time,\r\n    'X-Amz-Expires': `${expirationSeconds}`,\r\n    'X-Amz-SignedHeaders': signedHeaders,\r\n    ...additionalQueryParams,\r\n  };\r\n  if (credentials.sessionToken) {\r\n    query['X-Amz-Security-Token'] = credentials.sessionToken;\r\n  }\r\n\r\n  const canonicalQueryString = sortedEntries(query)\r\n    .map(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      ([key, value]) =>\r\n        `${encodeRFC3986URIComponent(key)}=${encodeRFC3986URIComponent(value)}`,\r\n    )\r\n    .join('&');\r\n\r\n  const canonicalHeaders = sortedEntries(headers)\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    .map(([key, value]) => `${key.toLowerCase()}:${value.trim()}\\n`)\r\n    .join('');\r\n\r\n  const canonicalRequestString = [\r\n    verb,\r\n    path,\r\n    canonicalQueryString,\r\n    canonicalHeaders,\r\n    signedHeaders,\r\n    'UNSIGNED-PAYLOAD',\r\n  ].join('\\n');\r\n\r\n  const stringToSign = [\r\n    'AWS4-HMAC-SHA256',\r\n    time,\r\n    [date, config.region, 's3', 'aws4_request'].join('/'),\r\n    sha256(canonicalRequestString).toString('hex'),\r\n  ].join('\\n');\r\n\r\n  const dateKey = hmac256(date, 'AWS4' + credentials.secretAccessKey);\r\n  const regionKey = hmac256(config.region, dateKey);\r\n  const serviceKey = hmac256('s3', regionKey);\r\n  const signingKey = hmac256('aws4_request', serviceKey);\r\n\r\n  const signature = hmac256(stringToSign, signingKey).toString('hex');\r\n\r\n  return `${s3Endpoint}${path}?${canonicalQueryString}&X-Amz-Signature=${signature}`;\r\n};\r\n\r\n/**\r\n * Encode a URI component according to RFC3986, like AWS expects us to.\r\n *\r\n * There are characters that JavaScript's encodeURIComponent does not encode,\r\n * but AWS expects them to be encoded.\r\n *\r\n * AWS cites RFC3986 for URI encoding here:\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\r\n *\r\n * The implementation is copy-pasted from MDN:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\r\n */\r\nfunction encodeRFC3986URIComponent(str: string) {\r\n  return encodeURIComponent(str).replace(\r\n    /[!'()*]/g,\r\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\r\n  );\r\n}\r\n", "// The amount of time that we consider a continuous train of messages\r\n// by a single message sender. If two messages are within this timeframe\r\n// from one another, we'll render them as a single visual block. If the messages\r\n// are further apart in time than this, we'll render them as two different blocks\r\n// each with their own message timestamp, profile pic, etc.\r\nexport const CONTIGUOUS_MESSAGE_BLOCK_TIMEOUT_SECONDS = 90;\r\n\r\n// Number of seconds that the undo button will be shown for after hiding an annotation\r\nexport const UNDO_HIDE_HOTSPOT_ANNOTATION_TIMEOUT_SECONDS = 5;\r\n\r\n// How long a signed URL from S3 should be valid for\r\nexport const UPLOAD_URL_TTL_SECONDS = 60 * 5; // 5 minutes\r\nexport const DOWNLOAD_URL_TTL_SECONDS = 60 * 60 * 4; // 4 hours\r\nexport const DELETE_URL_TTL_SECONDS = 60 * 10; // 10 minutes\r\n\r\n// Seconds until the typing indicator decays automatically\r\nexport const TYPING_TIMEOUT_TTL_SECONDS = 3;\r\n\r\n// Number of seconds that need to pass since a given page has lost\r\n// focus before we stop considering it the page the user is actively\r\n// on/looking at.\r\nexport const PAGE_PRESENCE_LOSS_TTL_SECONDS = 30;\r\n\r\n// Number of milliseconds between active presence pings to server.\r\nexport const PRESENCE_UPDATE_INTERVAL_MS =\r\n  (PAGE_PRESENCE_LOSS_TTL_SECONDS * 1000) / 2;\r\n\r\n// The minimum period between durable presence updates\r\nexport const DURABLE_PRESENCE_THROTTLE_MS = 60 * 1000; // 1 minute\r\n\r\n// How often to poll annotation locationMatch type in MessageAnnotationElement\r\nexport const ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 3000;\r\n// Same, but for composer annotations and AnnotationPointers in delegate\r\nexport const FAST_ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 1000;\r\n\r\nexport const SCREENSHOT_TRANSITION_IN_MS = 200;\r\n\r\nexport const ANNOTATION_POINTER_TRANSITION_OUT_MS = 150;\r\n\r\n// How long annotation arrow should stick around before fading out (when adding to composer)\r\nexport const ANNOTATION_ARROW_ON_ADD_MS = 2000;\r\n\r\n// After this many seconds, we assume the upload failed (e.g. because the user closed browser)\r\nexport const MAX_FILE_UPLOADING_TIME_SECONDS = 60;\r\n\r\n// used in the set time out to pull the pop up out of view\r\nexport const SUCCESS_POP_UP_TIMEOUT_MS = 3000;\r\nexport const SUCCESS_POP_UP_TRANSITION_MS = 300;\r\n\r\n// this needs to be smaller than TYPING_TIMEOUT_TTL_SECONDS\r\nexport const TYPING_USER_THROTTLE_MS = 2000;\r\n\r\nexport const THREAD_LAYOUT_ANIMATION_SECONDS = 0.25;\r\n\r\nexport const ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS = 30;\r\nexport const ACCESS_TOKEN_MAX_AGE_SECONDS = 60 * 60 * 24; // 1 day\r\n\r\n// How long to keep a message ID when a user clicks a link to a message to a different page\r\n// we use the message ID to focus that message when the page loads\r\nexport const DEEP_LINK_THREAD_ID_TTL_SECONDS = 30;\r\n\r\n// How long to highlight a deepLinked message after we scroll to it\r\nexport const DEEP_LINK_MESSAGE_HIGHLIGHT_MS = 5000;\r\n\r\n// Clients whose version was successfully deployed more than X days ago\r\n// won't be able to communicate with the server. This is to avoid\r\n// costantly bumping into errors when deprecating APIs.\r\nexport const CLIENT_VERSION_MAX_DAYS_OLD = 60;\r\n\r\nexport const QUERY_POLL_INTERVAL = 3000;\r\n\r\nexport const SAMPLE_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60 * 7;\r\n\r\nexport const DOCS_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60; // 1 day\r\n", "import { hostname, userInfo } from 'os';\r\nimport { serializeError } from 'serialize-error';\r\nimport winston from 'winston';\r\nimport WinstonCloudWatch from 'winston-cloudwatch';\r\nimport Transport from 'winston-transport';\r\nimport * as Sentry from '@sentry/node';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport '@sentry/tracing';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { flatFormat } from 'server/src/logging/flatFormat.ts';\r\nimport packageData from 'package.json';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { JsonObject } from 'common/types/index.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker') and\r\n// `BUILDCONSTANTS.sentryDSN` with either `undefined` or a string value for a\r\n// Sentry DSN\r\ndeclare const BUILDCONSTANTS: {\r\n  loggingProcessName: string;\r\n  sentryDSN: undefined | string;\r\n};\r\n\r\n// The loglevel for the console output can be specified using the environment\r\n// variable `LOGLEVEL`\r\nconst logLevel = env.LOGLEVEL;\r\n\r\nconst defaultMeta: any = {\r\n  process: BUILDCONSTANTS.loggingProcessName,\r\n  serverVersion: packageData.version,\r\n  serverGitCommit: process.env.COMMIT_HASH || process.env.npm_package_gitHead,\r\n  serverHost: hostname(),\r\n};\r\n\r\nif (process.env.CORD_WORKER_NAME) {\r\n  defaultMeta.workerName = process.env.CORD_WORKER_NAME;\r\n}\r\n\r\n// Sentry logging\r\nconst sentryLogging = !!(BUILDCONSTANTS.sentryDSN && env.SENTRY_ENVIRONMENT);\r\nif (sentryLogging) {\r\n  Sentry.init({\r\n    dsn: BUILDCONSTANTS.sentryDSN,\r\n    environment: env.SENTRY_ENVIRONMENT,\r\n    release: env.SENTRY_RELEASE,\r\n    tracesSampleRate: parseFloat(env.SENTRY_TRACE_SAMPLE_RATE ?? '0'),\r\n    attachStacktrace: true,\r\n    normalizeDepth: 10,\r\n  });\r\n}\r\n\r\n// Winston logging\r\nconst winstonLogger = winston.createLogger({ defaultMeta });\r\n\r\nwinstonLogger.add(\r\n  new winston.transports.Console({\r\n    level: logLevel,\r\n    format: winston.format.combine(winston.format.timestamp(), flatFormat()),\r\n    handleExceptions: true,\r\n  }),\r\n);\r\n\r\n// Keep track of logging in a Prometheus metric. The cleanest way to do this is\r\n// by adding a separate transport, because that allows us to set the loglevel\r\n// for this independently. No matter what `env.LOGLEVEL` is set to, the\r\n// Prometheus metric keeps track of *all* log messages, even the 'silly' ones.\r\n// ('silly' is the name of the lowest loglevel in Prometheus.)\r\nconst counter = Counter({\r\n  name: 'ServerLogging',\r\n  help: 'Number of log messages emitted by server',\r\n  labelNames: ['level'],\r\n});\r\n\r\nconst LEVEL = Symbol.for('level');\r\nclass MetricLogger extends Transport {\r\n  log(info: any, next: () => void) {\r\n    counter.inc({ level: info[LEVEL] });\r\n    next();\r\n  }\r\n}\r\n\r\nexport type LoggingTags = { [tag: string]: number | string | boolean };\r\n\r\nwinstonLogger.add(new MetricLogger({ level: 'silly' }));\r\n\r\n// CloudWatch logging is configured via the environment\r\nlet winstonCW: WinstonCloudWatch | undefined = undefined;\r\nif (env.CLOUDWATCH_LOGLEVEL && !process.env.IS_TEST) {\r\n  if (!env.CLOUDWATCH_LOG_GROUP_NAME) {\r\n    throw new Error(\r\n      `CloudWatch logging is enabled (CLOUDWATCH_LOGLEVEL is set), so\r\n       CLOUDWATCH_LOG_GROUP_NAME must be provided, too!`,\r\n    );\r\n  }\r\n\r\n  // CloudWatch stream names must not contain ':' or '*' characters\r\n  const defaultStreamName = () =>\r\n    `${new Date().toISOString().replace(/:/g, '.')} ${\r\n      userInfo().username\r\n    } ${hostname()}(${process.pid})`;\r\n\r\n  winstonCW = new WinstonCloudWatch({\r\n    // \"name\" is optional with default value \"CloudWatch\" but the\r\n    // typedefinition has name as required. See\r\n    // https://githubmemory.com/repo/lazywithclass/winston-cloudwatch/issues/155\r\n    name: 'CloudWatch',\r\n    level: env.CLOUDWATCH_LOGLEVEL,\r\n    logGroupName: env.CLOUDWATCH_LOG_GROUP_NAME,\r\n    logStreamName: env.CLOUDWATCH_LOG_STREAM_NAME || defaultStreamName(),\r\n    awsRegion: env.CLOUDWATCH_AWS_REGION,\r\n    jsonMessage: true,\r\n  });\r\n  winstonLogger.add(winstonCW);\r\n} else {\r\n  if (env.CLOUDWATCH_LOG_GROUP_NAME || env.CLOUDWATCH_LOG_STREAM_NAME) {\r\n    throw new Error(\r\n      `Some CLOUDWATCH_* variables are set, but CLOUDWATCH_LOGLEVEL is not.`,\r\n    );\r\n  }\r\n}\r\n\r\nexport function flushAndCloseWinstonCloudWatch() {\r\n  if (winstonCW) {\r\n    return new Promise<void>((resolve, _reject) => {\r\n      winstonCW!.kthxbye((_err) => resolve());\r\n    });\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst SENTRY_LOG_LEVEL: Record<string, Sentry.SeverityLevel | undefined> = {\r\n  error: 'error',\r\n  warn: 'warning',\r\n};\r\n\r\nconst cleanupSequelizeError = (error: any) => {\r\n  // remove references to the instance object as they contain deep SQL information\r\n  // like db password, etc\r\n  const suberrors = error.errors;\r\n  if (Array.isArray(suberrors)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    suberrors.forEach((error) => delete error.instance);\r\n  }\r\n};\r\n\r\nconst MAX_ORG_IDS_TO_LOG = 50;\r\n\r\nexport class Logger {\r\n  private readonly truncatedViewer: Record<string, unknown>;\r\n  private readonly metadata: JsonObject;\r\n  private appName: string | undefined;\r\n\r\n  constructor(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    this.truncatedViewer = { ...viewer };\r\n    this.metadata = { ...defaultMeta, ...additionalMeta };\r\n\r\n    if (\r\n      viewer.relevantOrgIDs &&\r\n      viewer.relevantOrgIDs.length > MAX_ORG_IDS_TO_LOG\r\n    ) {\r\n      this.truncatedViewer.relevantOrgIDs = [\r\n        ...viewer.relevantOrgIDs.slice(0, MAX_ORG_IDS_TO_LOG),\r\n        `(truncated from ${viewer.relevantOrgIDs.length} orgs)`,\r\n      ];\r\n    }\r\n\r\n    void this.addAppName(viewer);\r\n  }\r\n\r\n  public childLogger(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    return new Logger(viewer, { ...this.metadata, ...additionalMeta });\r\n  }\r\n\r\n  private viewerToLog() {\r\n    return {\r\n      ...this.truncatedViewer,\r\n      ...(this.appName && { appName: this.appName }),\r\n    };\r\n  }\r\n\r\n  public log(\r\n    level: 'debug' | 'info' | 'warn' | 'error',\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    if (sentryLogging && !process.env.IS_TEST) {\r\n      const sentryLevel = SENTRY_LOG_LEVEL[level];\r\n      if (sentryLevel) {\r\n        const sentryEventID = Sentry.captureMessage(message, {\r\n          level: sentryLevel,\r\n          extra: { ...defaultMeta, ...meta },\r\n          tags: { loggingProcessName: BUILDCONSTANTS.loggingProcessName },\r\n          fingerprint: options?.sentryFingerPrint,\r\n          user: this.viewerToLog(),\r\n        });\r\n        meta = { ...this.metadata, ...meta, sentryEventID };\r\n      }\r\n    }\r\n\r\n    winstonLogger.log(level, message, {\r\n      viewer: this.viewerToLog(),\r\n      ...this.metadata,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  public debug(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('debug', message, meta, options);\r\n  }\r\n\r\n  public info(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('info', message, meta, options);\r\n  }\r\n\r\n  public warn(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('warn', message, meta, options);\r\n  }\r\n\r\n  public error(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('error', message, meta, options);\r\n  }\r\n\r\n  public logLoggerInfo() {\r\n    this.info(\r\n      `Logging through winston. Console log level set to \"${logLevel}\", CloudWatch logging is ${\r\n        env.CLOUDWATCH_LOGLEVEL === undefined\r\n          ? 'disabled'\r\n          : `set to \"${env.CLOUDWATCH_LOGLEVEL}\"`\r\n      }`,\r\n    );\r\n  }\r\n\r\n  /**\r\n  Useful when dealing with promises:\r\n\r\n  ```\r\n  promise.catch(exceptionLogger('something broke'))\r\n  ```\r\n*/\r\n  public exceptionLogger =\r\n    (message: string, meta?: JsonObject, tags?: LoggingTags) => (error: any) =>\r\n      this.logException(\r\n        message,\r\n        error,\r\n        { ...this.metadata, ...meta },\r\n        tags,\r\n        'error',\r\n      );\r\n\r\n  /**\r\n  To be used imperatively:\r\n\r\n  ```\r\n  try {\r\n    // ...\r\n  } catch (e) {\r\n    logException('something broke', e)\r\n  }\r\n  ```\r\n*/\r\n  public logException(\r\n    message: string,\r\n    error: any,\r\n    meta?: JsonObject,\r\n    tags?: LoggingTags,\r\n    level: 'debug' | 'info' | 'warn' | 'error' = 'error',\r\n  ) {\r\n    // Make a good effort to produce a nice error log message from the given\r\n    // `message`, `error` (and optionally `meta`), but make sure that those\r\n    // efforts don't sabotage the logging, i.e. if something throws on the way,\r\n    // catch the error and make sure _something_ gets logged.\r\n    if (error.name?.startsWith('Sequelize')) {\r\n      cleanupSequelizeError(error);\r\n    }\r\n\r\n    let serializedError: any = undefined;\r\n    try {\r\n      serializedError = serializeError(error, { maxDepth: 50 });\r\n    } catch (e) {\r\n      winstonLogger.log(\r\n        level,\r\n        `logException: serializeError threw an exception (${message})`,\r\n        {\r\n          error: `${error}`,\r\n          viewer: this.viewerToLog(),\r\n          ...this.metadata,\r\n          ...meta,\r\n        },\r\n      );\r\n    }\r\n\r\n    if (serializedError !== undefined) {\r\n      // If serializing the error above failed, we have already logged a simple\r\n      // error representation to Winston above.\r\n      if (!message) {\r\n        try {\r\n          message = `${serializedError.name}: ${serializedError.message}`;\r\n        } catch (e) {\r\n          message = `${serializedError}`;\r\n        }\r\n      }\r\n\r\n      winstonLogger.log(level, message, {\r\n        error: serializedError,\r\n        viewer: this.viewerToLog(),\r\n        ...this.metadata,\r\n        ...meta,\r\n      });\r\n    }\r\n\r\n    if ((level === 'warn' || level === 'error') && !process.env.IS_TEST) {\r\n      Sentry.withScope((scope) => {\r\n        scope.setTags({\r\n          ...(error instanceof CordError && error.loggingTags),\r\n          ...tags,\r\n        });\r\n        // serializedError is undefined, if serializing failed\r\n        if (serializedError && error instanceof CordError) {\r\n          // Remove these properties, they'll get attached under other names\r\n          delete serializedError.loggingMetadata;\r\n          delete serializedError.loggingTags;\r\n        }\r\n        scope.setExtra('error', serializedError);\r\n\r\n        scope.setExtra('message', message);\r\n        scope.setExtra('meta', {\r\n          ...this.metadata,\r\n          ...(error instanceof CordError && error.loggingMetadata),\r\n          ...meta,\r\n        });\r\n        scope.setExtra('user', this.viewerToLog());\r\n\r\n        // We hand the original error object to Sentry\r\n        Sentry.captureException(error, {\r\n          level: SENTRY_LOG_LEVEL[level],\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private async addAppName(viewer: Viewer) {\r\n    if (!viewer?.platformApplicationID) {\r\n      return;\r\n    }\r\n\r\n    const app = await ApplicationEntity.findByPk(viewer.platformApplicationID);\r\n    this.appName = app?.name;\r\n  }\r\n}\r\n\r\nlet _anonymousLogger: Logger | undefined = undefined;\r\nexport function anonymousLogger() {\r\n  if (_anonymousLogger === undefined) {\r\n    _anonymousLogger = new Logger(Viewer.createAnonymousViewer());\r\n  }\r\n  return _anonymousLogger;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  UUID,\r\n  CustomLinks,\r\n  CustomNUX,\r\n  ApplicationEnvironment,\r\n} from 'common/types/index.ts';\r\nimport { getTypedFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { FeatureFlags } from 'common/const/FeatureFlags.ts';\r\n\r\nexport type CustomEmailTemplate = {\r\n  partnerName: string;\r\n  imageURL: string;\r\n  sender?: string;\r\n  logoConfig?: { height: string; width: string };\r\n};\r\n\r\nexport type ApplicationTierType = 'free' | 'starter' | 'premium';\r\n\r\nexport type CustomSlackAppDetails = {\r\n  clientID: string;\r\n  clientSecret: string;\r\n  signingSecret: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'applications',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customEmailTemplate!: CustomEmailTemplate | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: true,\r\n  })\r\n  enableEmailNotifications!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customLinks!: CustomLinks | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customS3Bucket!: UUID | null; // the s3 bucket to be used for this application\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  segmentWriteKey!: string | null; // the Segment Write key we use to write partner events\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customNUX!: CustomNUX | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  iconURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'starter', 'premium'),\r\n    defaultValue: 'free',\r\n    allowNull: false,\r\n  })\r\n  type!: ApplicationTierType;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'production',\r\n      'staging',\r\n      'sample',\r\n      'sampletoken',\r\n      'demo',\r\n    ),\r\n    defaultValue: 'production',\r\n    allowNull: false,\r\n  })\r\n  environment!: ApplicationEnvironment;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportOrgID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportBotID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  supportSlackChannelID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  redirectURI!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  slackConnectAllOrgs!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookSubscriptions!: string[] | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppDetails!: CustomSlackAppDetails | null;\r\n\r\n  public async isSupportChatEnabled(): Promise<boolean> {\r\n    const isSupportFlagEnabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.SUPPORT_CHAT_ENABLED,\r\n      {\r\n        userID: 'anonymous',\r\n        orgID: undefined,\r\n        platformApplicationID: this.id,\r\n        version: null,\r\n        customerID: this.customerID,\r\n      },\r\n    );\r\n\r\n    return Boolean(\r\n      isSupportFlagEnabled &&\r\n        this.supportBotID &&\r\n        this.supportOrgID &&\r\n        this.supportSlackChannelID,\r\n    );\r\n  }\r\n\r\n  public getCustomSlackAppDetails(): CustomSlackAppDetails | null {\r\n    const details = this.customSlackAppDetails;\r\n\r\n    if (\r\n      details &&\r\n      typeof details === 'object' &&\r\n      !Array.isArray(details) &&\r\n      typeof details.clientID === 'string' &&\r\n      typeof details.clientSecret === 'string' &&\r\n      typeof details.signingSecret === 'string'\r\n    ) {\r\n      return {\r\n        clientID: details.clientID,\r\n        clientSecret: details.clientSecret,\r\n        signingSecret: details.signingSecret,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n", "import * as LaunchDarkly from '@launchdarkly/node-server-sdk';\r\nimport type {\r\n  ApplicationEnvironment,\r\n  SimpleValue,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { FeatureFlags as CommonFeatureFlags } from 'common/const/FeatureFlags.ts';\r\nimport type { FeatureFlag } from 'common/const/FeatureFlags.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n  DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n  DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n} from 'server/src/email/index.ts';\r\n\r\nlet client: LaunchDarkly.LDClient | undefined = undefined;\r\nlet clientReady = false;\r\n\r\n// ADD NEW FLAGS HERE IF THEY ARE ONLY USED SERVER-SIDE.\r\n// If the new flag is also going to be used client side (in external/)\r\n// then add your new flag in common/const/FeatureFlags.ts\r\n//\r\n// See more explanation on how to define in flags in:\r\n// common/const/FeatureFlags.ts\r\nconst ServerOnlyFeatureFlags = {\r\n  QUERY_PARAM_DEEP_LINKS: {\r\n    key: 'query_param_deep_links',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'query_param_deep_links', boolean>,\r\n  NOTIFY_PAGE_VISITORS_OF_EVERY_MESSAGE: {\r\n    key: 'notify_page_visitors_of_every_new_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'notify_page_visitors_of_every_new_message', boolean>,\r\n  USER_IS_BLOCKED: {\r\n    key: 'user_is_blocked',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'user_is_blocked', boolean>,\r\n  SHOW_CORD_COPY_IN_TASKS: {\r\n    key: 'show-cord-copy-in-tasks',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-cord-copy-in-tasks', boolean>,\r\n  LOADER_CACHES: {\r\n    key: 'loader_caches',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'loader_caches', boolean>,\r\n  SUBSCRIBE_ALL_ORG_MEMBERS: {\r\n    key: 'subscribe_all_org_members',\r\n    defaultValue: false,\r\n  },\r\n  WRITE_TO_EVENTS_TABLE: {\r\n    key: 'write_to_events_table',\r\n    defaultValue: true,\r\n  },\r\n  ALLOW_MAGIC_GRAPHQL_ORG_ID_OVERRIDE: {\r\n    key: 'allow-magic-graph-ql-org-id-override',\r\n    defaultValue: true,\r\n  },\r\n  GRANULAR_PERMISSIONS: {\r\n    key: 'granular-permissions',\r\n    defaultValue: false,\r\n  },\r\n  SKIP_PUBLISH_USER_IDENTITY_UPDATE: {\r\n    key: 'skip_publish_user_identity_update',\r\n    defaultValue: false,\r\n  },\r\n  RATE_LIMITS: {\r\n    key: 'rate_limits',\r\n    defaultValue: { maxCount: 50000, seconds: 5 * 60 },\r\n  },\r\n  EMAIL_NOTIFICATION_TEMPLATE_ID: {\r\n    key: 'email-notification-template-id',\r\n    defaultValue: {\r\n      mention: DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n      share_to_email: DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n      thread_resolve: DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n    },\r\n  },\r\n} as const;\r\n\r\nexport const FeatureFlags = {\r\n  ...CommonFeatureFlags,\r\n  ...ServerOnlyFeatureFlags,\r\n} as const satisfies {\r\n  [key: string]: FeatureFlag<string, SimpleValue | object>;\r\n};\r\n\r\ntype MockClient =\r\n  | undefined\r\n  | ((\r\n      key: string,\r\n      user: FlagsUser,\r\n    ) => Promise<boolean | string | number | null>);\r\n// This is used in our test environments\r\nlet mockClient: MockClient;\r\n\r\nexport async function initFeatureFlags() {\r\n  if (client) {\r\n    throw new Error('Feature flags already initialized');\r\n  }\r\n  if (!env.LAUNCHDARKLY_API_KEY) {\r\n    return;\r\n  }\r\n  client = LaunchDarkly.init(env.LAUNCHDARKLY_API_KEY);\r\n  await client.waitForInitialization();\r\n  clientReady = true;\r\n}\r\n\r\nexport function closeFeatureFlags() {\r\n  if (client) {\r\n    client.close();\r\n    client = undefined;\r\n    clientReady = false;\r\n  }\r\n}\r\n\r\nexport type FlagsUser = {\r\n  userID: UUID | 'anonymous';\r\n  orgID?: UUID;\r\n  platformApplicationID: UUID | 'extension' | 'console';\r\n  version: string | null;\r\n  customerID?: UUID;\r\n  appEnvironment?: ApplicationEnvironment;\r\n};\r\n\r\n/**\r\n * Prefer flagsUserFromContext if you have a full context, as it has more info\r\n * in it.\r\n */\r\nexport function flagsUserFromViewer(viewer: Viewer): FlagsUser {\r\n  return {\r\n    userID: viewer.userID ?? 'anonymous',\r\n    orgID: viewer.orgID,\r\n    platformApplicationID: viewer.platformApplicationID ?? 'extension',\r\n    version: null,\r\n  };\r\n}\r\n\r\nexport function flagsUserFromContext(context: RequestContext): FlagsUser {\r\n  return {\r\n    ...flagsUserFromViewer(context.session.viewer),\r\n    version: context.clientVersion,\r\n    customerID: context.application?.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * For the REST API etc where there isn't a user. Prefer one of the other\r\n * functions if there is a user.\r\n */\r\nexport function flagsUserFromApplication(app: ApplicationEntity): FlagsUser {\r\n  return {\r\n    userID: 'anonymous',\r\n    platformApplicationID: app.id,\r\n    version: null,\r\n    customerID: app.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the value of the given feature flag in LaunchDarkly for the given\r\n * user, or the default value if LaunchDarkly cannot be reached for any reason.\r\n */\r\nexport async function getTypedFeatureFlagValue<\r\n  K extends (typeof FeatureFlags)[keyof typeof FeatureFlags]['key'],\r\n  T,\r\n>(feature: FeatureFlag<K, T>, user: FlagsUser): Promise<T> {\r\n  const value = (await getFeatureFlagValue(feature.key, user)) as T | null;\r\n  return value === null ? feature.defaultValue : value;\r\n}\r\n\r\nexport async function getFeatureFlagValue(key: string, user: FlagsUser) {\r\n  // To allow us to mock feature flags for our tests\r\n  if (mockClient) {\r\n    return await mockClient(key, user);\r\n  }\r\n  if (!client || !clientReady) {\r\n    return null;\r\n  }\r\n  const versionValue = versionToNumber(user.version);\r\n  const ldUser = {\r\n    // The choice of delimiter here is restricted by LaunchDarkly's website\r\n    // currently being flaky for users with a key that contains characters that\r\n    // need to be percent-encoded, so we need to choose something that doesn't\r\n    // get encoded.\r\n    key: user.orgID ? `${user.userID}_${user.orgID}` : user.userID,\r\n    custom: {\r\n      userID: user.userID,\r\n      ...(user.orgID && { orgID: user.orgID }),\r\n      platformApplicationID: user.platformApplicationID,\r\n      ...(versionValue && { version: versionValue }),\r\n      ...(user.customerID && { customerID: user.customerID }),\r\n      ...(user.appEnvironment && { appEnvironment: user.appEnvironment }),\r\n    },\r\n  };\r\n  return await (client.variation(key, ldUser, null) as Promise<\r\n    boolean | string | number | null\r\n  >);\r\n}\r\n\r\nfunction versionToNumber(version: string | null): number | null {\r\n  if (!version) {\r\n    return null;\r\n  }\r\n  if (version.startsWith('dev-')) {\r\n    return -1;\r\n  }\r\n  const match = version.match(/^(\\d+)[.](\\d+)[.](\\d+)$/);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  return 100000 * (parseInt(match[1], 10) - 1) + parseInt(match[2], 10);\r\n}\r\n\r\nexport function initMockFeatureFlagForTest(fn: MockClient) {\r\n  mockClient = fn;\r\n}\r\n", "// ADD NEW FLAGS HERE ONLY IF YOU NEED THEM ON THE CLIENT-SIDE\r\n// If the new flag is only used server-side then add your new flag in:\r\n// server/src/featureflags/index.ts\r\n// If you need to use them in BOTH the client AND the server, you only need\r\n// to add them once, in this file.\r\n//\r\n// Ensure they're set up in LaunchDarkly before you add them here.  The key for\r\n// the flag must match the key in LaunchDarkly.\r\n//\r\n// The full set of valid values for a flag should be in the second type argument\r\n// to FeatureFlag, so if you have a three-state feature flag of \"yes\", \"no\", and\r\n// \"maybeso\", you should declare it as:\r\n//\r\n// MULTI_STATE_FLAG: {\r\n//   key: 'multi_state_flag',\r\n//   defaultValue: 'no',\r\n// } as FeatureFlag<'multi_state_flag', 'yes' | 'no' | 'maybeso'>\r\nexport const FeatureFlags = {\r\n  USE_NEW_CSS_COMPONENTS: {\r\n    key: 'Use_new_CSS_components',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'Use_new_CSS_components', Record<string, object>>,\r\n  SUPPORT_CHAT_ENABLED: {\r\n    key: 'support_chat_enabled',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'support_chat_enabled', boolean>,\r\n  ENABLE_ANNOTATIONS_SCREENSHOTS: {\r\n    key: 'enable_annotations_screenshots',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_screenshots', boolean>,\r\n  ENABLE_PLAINTEXT_ANNOTATIONS: {\r\n    key: 'enable_plaintext_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_plaintext_annotations', boolean>,\r\n  ENABLE_ATTACHMENTS: {\r\n    key: 'enable_attachments',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_attachments', boolean>,\r\n  EMAIL_SHARING: {\r\n    key: 'email_sharing',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'email_sharing', boolean>,\r\n  ENABLE_FORCE_REFRESH_PROVIDER: {\r\n    key: 'enable_force_refresh_provider',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_force_refresh_provider', boolean>,\r\n  MONDAY_TASKS: {\r\n    key: 'monday_tasks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'monday_tasks', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_CREATING_THREAD: {\r\n    key: 'take_screenshot_when_creating_thread',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_creating_thread', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_SENDING_MESSAGE: {\r\n    key: 'take_screenshot_when_sending_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_sending_message', boolean>,\r\n  OPEN_THREAD_SAME_PAGE: {\r\n    key: 'open_thread_same_page',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'open_thread_same_page', boolean>,\r\n  SHOW_ACTIVATION_WELCOME_MESSAGE_NUX: {\r\n    key: 'show_activation_welcome_message_nux',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show_activation_welcome_message_nux', boolean>,\r\n  ENABLE_SLACK_FEATURES: {\r\n    key: 'enable-slack-features',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable-slack-features', boolean>,\r\n  ENABLE_DEV_CONSOLE_SELF_SERVE: {\r\n    key: 'enable-dev-console-self-serve',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable-dev-console-self-serve', boolean>,\r\n  // TODO: remove - no longer used\r\n  THREAD_STYLING_TWEAKS: {\r\n    key: 'thread_styling_tweaks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'thread_styling_tweaks', boolean>,\r\n  REMOVE_TASKS_FEATURE: {\r\n    key: 'remove_tasks_feature',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'remove_tasks_feature', boolean>,\r\n  SHOW_COMMUNITY_IN_CONSOLE: {\r\n    key: 'show-community-in-console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-community-in-console', boolean>,\r\n  SHOW_CUSTOMER_ISSUES_IN_CONSOLE: {\r\n    key: 'show-customer-issues-in-console',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show-customer-issues-in-console', boolean>,\r\n  TAKE_SCREENSHOT_OF_CANVAS_ONLY: {\r\n    key: 'take_screenshot_of_canvas_only',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_of_canvas_only', boolean>,\r\n  SHOW_EVENTS_TAB_IN_CONSOLE: {\r\n    key: 'show_events_tab_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show_events_tab_in_console', boolean>,\r\n  ENABLE_TEXT_ANNOTATIONS: {\r\n    key: 'enable_text_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_text_annotations', boolean>,\r\n  ENABLE_EMAIL_NOTIFICATIONS: {\r\n    key: 'enable_email_notifications',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_email_notifications', boolean>,\r\n  ENABLE_ANNOTATIONS_OVERLAY: {\r\n    key: 'enable_annotations_overlay',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_overlay', boolean>,\r\n  ENABLE_SENTRY: {\r\n    key: 'enable_sentry',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_sentry', boolean>,\r\n  CONSOLE_WEBINAR_BANNER: {\r\n    key: 'console_webinar_banner',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'console_webinar_banner', object>,\r\n  ENABLE_VIDEO_CAPABILITIES: {\r\n    key: 'enable_video_capabilities',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_video_capabilities', boolean>,\r\n  SHOW_LINK_PREVIEWS: {\r\n    key: 'show-link-previews',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-link-previews', boolean>,\r\n  BILLING_ENABLED_IN_CONSOLE: {\r\n    key: 'billing_enabled_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'billing_enabled_in_console', boolean>,\r\n  MENTION_NOTIFICATION_EMAIL_TEMPLATE_ID: {\r\n    key: 'mention_notification_email_template_id',\r\n    defaultValue: 'd-6309e6ccb36a4a769957795f475c8130',\r\n  } as FeatureFlag<\r\n    'mention_notification_email_template_id',\r\n    | 'd-6309e6ccb36a4a769957795f475c8130'\r\n    | 'd-8f2246c657a8498394e9caf181816bc3'\r\n    | 'd-8a8088e59eed4622b2d09078de372fe8'\r\n    | 'd-bc3669c391774addb7da37f92a3f97e3'\r\n  >,\r\n  SHOW_CONSOLE_LANDING_PAGE: {\r\n    key: 'show_console_landing_page',\r\n    defaultValue: false,\r\n  },\r\n} as const;\r\n\r\n// The generic type that makes this all work.  The first type parameter is\r\n// always set to a single string, and it makes it possible to do type inference\r\n// on the useFeatureFlag() call and figure out what the return value is.\r\nexport type FeatureFlag<K, T> = {\r\n  key: K;\r\n  defaultValue: T;\r\n};\r\n\r\n// The map of feature flag keys to the default value for that flag.  We have to\r\n// use `as any` in the assignment because TypeScript will only infer that the\r\n// return type is {[key: string]: union_of_all_flag_value_types} rather than\r\n// associating the right type with the right key.\r\nconst defaults: {\r\n  [P in keyof typeof FeatureFlags as (typeof FeatureFlags)[P]['key']]: (typeof FeatureFlags)[P]['defaultValue'];\r\n} = Object.fromEntries(\r\n  Object.entries(FeatureFlags).map(([_, v]) => [v.key, v.defaultValue]),\r\n) as any;\r\n\r\n/**\r\n * Returns an object that maps from feature flag keys to their default value.\r\n */\r\nexport function featureFlagDefaults() {\r\n  return defaults;\r\n}\r\n", "import * as sgMail from '@sendgrid/mail';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ThreadDetails } from 'server/src/util/email.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { getReplyToEmailAddress } from 'server/src/email/utils.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { DEFAULT_EMAIL_LOGO_WIDTH } from 'common/const/Sizes.ts';\r\nimport {\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN,\r\n  CONSOLE_ORIGIN,\r\n} from 'common/const/Urls.ts';\r\nimport { AUTH0_CLIENT_ID } from 'common/const/Ids.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\r\n\r\nsgMail.default.setApiKey(env.SENDGRID_API_KEY);\r\nexport const DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID =\r\n  'd-6309e6ccb36a4a769957795f475c8130';\r\nexport const MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-8a8088e59eed4622b2d09078de372fe8';\r\nexport const DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID =\r\n  'd-fecc876acf684ff2bca887748d86e4e1';\r\nexport const SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-b70dc2c71ee541ee9e0c5f4cd84b32e3';\r\nexport const DEFAULT_THREAD_RESOLVE_TEMPLATE_ID =\r\n  'd-93aa618e7d0b4ba593c346f9a1f664c5';\r\nexport const THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-37c14e17cc9649afb70495f029b3833d';\r\nconst SEND_CONSOLE_USER_INVITE_TEMPLATE_ID =\r\n  'd-ab157e4f588c4a30b6304e4e062b5f88';\r\nconst ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-1bbf5f1a7a2948529de051d44eb873c9';\r\nconst ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-48ea1b657a2a4f9b95c9f81d38425306';\r\nconst REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID =\r\n  'd-bfe0627042f345f8b7877e6a97815359';\r\n\r\ntype UnsubscribeThreadTokenData = {\r\n  threadID: UUID;\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  appID: UUID | null;\r\n};\r\n\r\nexport type ActionIcon = 'mention' | 'task' | 'paperclip';\r\n\r\nexport const encodeUnsubscribeThreadToken = (\r\n  data: UnsubscribeThreadTokenData,\r\n) => jwt.sign(data, env.EMAIL_LINKS_TOKEN_SECRET, { algorithm: 'HS512' });\r\n\r\nexport const decodeUnsubscribeThreadToken = (token: string) =>\r\n  jwt.verify(token, env.EMAIL_LINKS_TOKEN_SECRET, {\r\n    algorithms: ['HS512'],\r\n  }) as UnsubscribeThreadTokenData;\r\n\r\nexport type SendActionEmailNotificationData = {\r\n  context: RequestContext;\r\n  recipientEmail: string;\r\n  actionText: string;\r\n  actionIconType: ActionIcon;\r\n  pageName: string;\r\n  pageURL: string;\r\n  providerName: string | undefined;\r\n  unsubscribeURL: string;\r\n  partnerDetails: CustomEmailTemplate | undefined;\r\n  threadDetails: ThreadDetails;\r\n  emailNotification: EmailOutboundNotificationEntity;\r\n  /** You can edit templates in SendGrid */\r\n  templateId: string;\r\n  notificationType: NotificationType;\r\n};\r\n/*\r\n  Common function used to send thread-action and reply notifications.\r\n  They are similar in that they both notify of an action eg resolving\r\n  /unresolving a thread or a reply or @mention message.\r\n  */\r\nexport async function sendActionEmailNotification({\r\n  context,\r\n  recipientEmail,\r\n  actionText,\r\n  actionIconType,\r\n  pageName,\r\n  pageURL,\r\n  providerName,\r\n  unsubscribeURL,\r\n  partnerDetails,\r\n  threadDetails,\r\n  emailNotification,\r\n  /** You can edit templates in SendGrid */\r\n  templateId,\r\n  notificationType,\r\n}: SendActionEmailNotificationData) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const {\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const threadingHeaders = await getThreadingHeaders(emailNotification);\r\n\r\n  // See https://stackoverflow.com/questions/1027395/detecting-outlook-autoreply-out-of-office-emails#comment64988838_25324691\r\n  // Request that MS Exchange does not send automated replies (like Out of Office)\r\n  // back to this email\r\n  const noAutoResponseHeader = { 'X-Auto-Response-Suppress': 'OOF' };\r\n\r\n  const unsubscribeHeaders = {\r\n    'List-Unsubscribe': `<${unsubscribeURL}>`,\r\n    'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\r\n  };\r\n\r\n  let eventType = '';\r\n  let emailType = '';\r\n  if (notificationType === 'reply') {\r\n    eventType = 'email-mention-notification-sent-v2';\r\n    emailType = 'mention v2';\r\n  } else if (notificationType === 'thread_action') {\r\n    eventType = 'email-thread-action-notification-sent';\r\n    emailType = 'thread action';\r\n  }\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: getReplyToEmailAddress(\r\n      context.logger,\r\n      partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n      emailNotification.id,\r\n    ),\r\n    templateId,\r\n    headers: {\r\n      ...threadingHeaders,\r\n      ...noAutoResponseHeader,\r\n      ...unsubscribeHeaders,\r\n    },\r\n    dynamicTemplateData: {\r\n      Action: actionText,\r\n      Action_Icon: actionIconType,\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Tool_Name: providerName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Unsubscribe_URL: unsubscribeURL,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Add_Explainer: false,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent ${emailType} email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: eventType,\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending ${emailType} email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n          from_address: mailData.from,\r\n          to_address: mailData.to,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\n// the EmailEmail repetition is intentional\r\nexport function sendShareThreadToEmailEmail(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  pageName: string,\r\n  pageURL: string,\r\n  partnerDetails: CustomEmailTemplate | undefined,\r\n  threadDetails: ThreadDetails,\r\n  emailNotification: EmailOutboundNotificationEntity | null,\r\n  templateID: string,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return true;\r\n  }\r\n\r\n  const {\r\n    senderName,\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: emailNotification\r\n      ? getReplyToEmailAddress(\r\n          context.logger,\r\n          partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n          emailNotification.id,\r\n        )\r\n      : partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n    templateId: templateID,\r\n    dynamicTemplateData: {\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Sender_Name: senderName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent shareThreadToEmail email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-share-thread-to-email-sent',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending shareThreadToEmail email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\ntype ThreadingHeaders =\r\n  | {\r\n      'Message-ID': string;\r\n    }\r\n  | {\r\n      'Message-ID': string;\r\n      'In-Reply-To': string;\r\n      References: string;\r\n    };\r\n// Returns the email headers Message-ID, In-Reply-To and References to enable\r\n// threading of emails (in the email client) for the same Cord thread.\r\n// We also use these headers when handling inbound replies in SendGridWebhookHandler\r\n// if the notificationID is not in the 'to' address.\r\nasync function getThreadingHeaders(\r\n  emailNotification: EmailOutboundNotificationEntity,\r\n): Promise<ThreadingHeaders> {\r\n  const isFirstEmail =\r\n    (await EmailOutboundNotificationEntity.count({\r\n      where: {\r\n        email: emailNotification.email,\r\n        threadID: emailNotification.threadID,\r\n      },\r\n    })) === 1;\r\n\r\n  if (isFirstEmail) {\r\n    return {\r\n      'Message-ID': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  } else {\r\n    return {\r\n      'Message-ID': `<notif-${emailNotification.id}@cord.fyi>`,\r\n      'In-Reply-To': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n      References: `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function sendEmailInviteConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  inviterName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n\r\n  const inviteLink = encodeURI(\r\n    `https://${AUTH0_CUSTOM_LOGIN_DOMAIN}/authorize?` +\r\n      'response_type=code&' +\r\n      `client_id=${AUTH0_CLIENT_ID}&` +\r\n      `redirect_uri=${CONSOLE_ORIGIN}/login&` +\r\n      'scope=openid email profile&' +\r\n      'screen_hint=signup&' +\r\n      `login_hint=${recipientEmail}`,\r\n  );\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: SEND_CONSOLE_USER_INVITE_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Invite_Link: inviteLink,\r\n      Inviter: inviterName,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to invite ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-invite-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessGrantedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access granted to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-granted-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessDeniedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login?newcustomer=true`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access denied to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-denied-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\n/**\r\n * Used for when a console user requests access to an existing customer\r\n */\r\nasync function sendRequestAccessEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  requesterEmail: string,\r\n  customerName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Sender_Email: requesterEmail,\r\n      Customer_Name: customerName,\r\n      View_Access_Requests_Link: `${CONSOLE_ORIGIN}/usermanagement`,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent request access email to ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-request-access-customer',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to, customerID },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessRequestToCustomerConsoleUsers(\r\n  context: RequestContext,\r\n  requesterEmail: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n  const approvedCustomerConsoleUsers =\r\n    await context.loaders.consoleUserLoader.loadConsoleUsersForCustomer(\r\n      customerID,\r\n    );\r\n\r\n  if (approvedCustomerConsoleUsers.length === 0) {\r\n    throw new Error('No console users in this customer');\r\n  }\r\n\r\n  return await Promise.all(\r\n    approvedCustomerConsoleUsers.map((consoleUser) =>\r\n      sendRequestAccessEmailToConsoleUser(\r\n        context,\r\n        consoleUser.email,\r\n        requesterEmail,\r\n        customer.name,\r\n        customer.id,\r\n      ),\r\n    ),\r\n  );\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'email_notifications',\r\n  timestamps: false,\r\n})\r\nexport class EmailOutboundNotificationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  email!: string;\r\n}\r\n", "import addrs from 'email-addresses';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport replyParser from 'node-email-reply-parser';\r\nimport type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\n\r\n// Parses an email address such as \"sponge@bob.com\" or\r\n// \"Sponge Bob <sponge@bob.com>\"\r\nexport function parseEmailAddress(emailAddress: string): addrs.ParsedMailbox {\r\n  const parsedAddress = addrs\r\n    .parseAddressList(emailAddress)\r\n    ?.find((email): email is addrs.ParsedMailbox => email.type === 'mailbox');\r\n  if (parsedAddress === undefined) {\r\n    throw new Error(`failed to parse email address: ${emailAddress}`);\r\n  }\r\n  return parsedAddress;\r\n}\r\n\r\n/**\r\n * Takes a sender email address and a notification ID, and returns a reply-to\r\n * email address such that replies to that address will be appended to the\r\n * thread associated with the notification ID.\r\n */\r\nexport function getReplyToEmailAddress(\r\n  logger: Logger,\r\n  senderEmailAddress: string,\r\n  notificationId: UUID,\r\n): string {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(senderEmailAddress);\r\n\r\n    // Applications can use a white-label (non-@cord.fyi) sender email. That's\r\n    // fine, but replies MUST come via cord.fyi; those emails get routed through\r\n    // SendGrid, who call a webhook (search this repo for\r\n    // SendGridWebhookHandler) so we can handle them and e.g. append reply\r\n    // contents to the appropriate thread.\r\n    const replyToAddress = `${parsedAddress.local}-${notificationId}@cord.fyi`;\r\n    if (parsedAddress.name) {\r\n      return `${parsedAddress.name} <${replyToAddress}>`;\r\n    }\r\n    return replyToAddress;\r\n  } catch (e) {\r\n    logger.logException('failed to parse email address', e);\r\n    return senderEmailAddress;\r\n  }\r\n}\r\n\r\n// If email name ends with \"-UUID\" then it returns that UUID\r\nexport function extractCordEmailUUID(emailAddress: string): UUID | null {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(emailAddress);\r\n    const uuidLength = 36;\r\n    // check that the address ends with a dash \"-\" and then 36 UUID characters\r\n    if (\r\n      parsedAddress.local.length < 1 + uuidLength ||\r\n      parsedAddress.local.slice(-(1 + uuidLength))[0] !== '-'\r\n    ) {\r\n      return null;\r\n    }\r\n    const maybeUUID = parsedAddress.local.slice(-uuidLength);\r\n    return isUUID.default(maybeUUID) ? maybeUUID : null;\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'failed to parse email address',\r\n      e,\r\n      {},\r\n      undefined,\r\n      'warn',\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function emailTextToMessageContent(\r\n  emailText: string,\r\n  attachments: string,\r\n): MessageContent {\r\n  // Unlike Gmail, Mac Mail does not automatically add a standard email\r\n  // signature separator like '--' at the begining of a signature block\r\n  // so our library was not detecting it as such.\r\n  // As a result, we were sending the signature as part of the reply message.\r\n\r\n  // To overcome this, we break up the email content into fragments and\r\n  // disregard anything that comes after the quoted text reply.\r\n  // Unfortunately, this will still be an issue for users who add their\r\n  // signatures above the quoted text and have no signature separator.\r\n  const replyFragments = replyParser(emailText).getFragments();\r\n  let replyBeforeQuotedText = '';\r\n  for (const fragment of replyFragments) {\r\n    if (fragment.isQuoted()) {\r\n      break;\r\n    }\r\n    replyBeforeQuotedText += fragment.getContent();\r\n  }\r\n\r\n  let replyText = replyParser(replyBeforeQuotedText).getVisibleText({\r\n    // from the docs of replyParser:\r\n    // Using aggressive mode runs the risk of losing visible lines which are\r\n    // interspersed with quoted lines, but is useful when parsing e.g. emails\r\n    // from a 'reply by email' feature which contain a large block of quoted\r\n    // text.\r\n    aggressive: true,\r\n  });\r\n\r\n  if (Number(attachments) > 0) {\r\n    replyText = replyText + `\\n(Unable to display attached files)`;\r\n  }\r\n\r\n  return replyText\r\n    .split(/\\r?\\n/)\r\n    .filter((l) => l.length > 0)\r\n    .map((line) => ({\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [{ text: line }],\r\n    }));\r\n}\r\n\r\nexport async function getNotification(\r\n  toAddress: string,\r\n  inReplyToHeader: string | undefined,\r\n  fromEmail: string,\r\n  logger: Logger,\r\n) {\r\n  const notificationID = extractCordEmailUUID(toAddress);\r\n  if (notificationID) {\r\n    return await EmailOutboundNotificationEntity.findOne({\r\n      where: { id: notificationID },\r\n    });\r\n  }\r\n\r\n  if (inReplyToHeader) {\r\n    // Some mail clients, like Hubspot, do not respect the Reply-To email header\r\n    // and send their reply to the From header, which does not contain our notification\r\n    // ID.  In that case, we can try and pull out the ID we set in the 'Message-ID'\r\n    // header, which will now be the 'In-Reply-To' header in the incoming email\r\n    // (see getThreadingHeaders fn: these are headers which are used to thread\r\n    // messages nicely in email clients). This will either be the notification ID\r\n    // or thread ID, depending on whether this was a first notification or not.\r\n    // With the combination of the thread ID and the email this message came from,\r\n    // we should be able to find the Notification.\r\n    logger.debug(\r\n      'Unable to find notificationId in toAddress, will try to find from inReplyTo header',\r\n      {\r\n        toAddress,\r\n        inReplyToHeader,\r\n        fromEmail,\r\n      },\r\n    );\r\n\r\n    const threadOrNotificationID = extractCordEmailUUID(inReplyToHeader);\r\n\r\n    // First see if the ID we found is a notification ID\r\n    if (threadOrNotificationID) {\r\n      const notification = await EmailOutboundNotificationEntity.findOne({\r\n        where: { id: threadOrNotificationID },\r\n      });\r\n      if (notification) {\r\n        return notification;\r\n      }\r\n    }\r\n\r\n    let parsedFromEmail;\r\n\r\n    try {\r\n      const email = parseEmailAddress(fromEmail);\r\n      parsedFromEmail = email.address;\r\n    } catch (e: any) {\r\n      logger.warn('Error parsing from email', e);\r\n    }\r\n\r\n    // If we're still here, it wasn't a notification ID (or the notification has\r\n    // disappeared for some reason).  Assume it's a thread ID:\r\n    if (threadOrNotificationID && parsedFromEmail) {\r\n      return await EmailOutboundNotificationEntity.findOne({\r\n        where: { threadID: threadOrNotificationID, email: parsedFromEmail },\r\n      });\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getHeader(key: string, input: string) {\r\n  const pattern = new RegExp(`^${key}: (.+)$`, 'gm');\r\n  const match = pattern.exec(input);\r\n\r\n  return match?.[1];\r\n}\r\n\r\nexport type RelevantHeaders =\r\n  | Record<'messageID' | 'inReplyTo' | 'autoSubmitted', string | undefined>\r\n  | undefined;\r\n\r\n// We could use the mailparser npm package to do this but it would also require\r\n// adding another library as middleware (https://github.com/nodemailer/mailparser/issues/253)\r\n// and it didn't seem worth it for grabbing a couple of strings\r\n// Add more headers you might expect to find if you need them!\r\nexport function parseRelevantHeaders(headersString: string): RelevantHeaders {\r\n  // This is a specific ID for this incoming email and would be something like:\r\n  // '<CACnco=B99bM4+YPHkUNqgPT8azMcYCROss2BdPgA7pAoqW8egw@mail.gmail.com>',\r\n  const messageID = getHeader('Message-Id', headersString);\r\n  // This should be the Message-ID we set on the original email notification, which\r\n  // contains the threadID. See getThreadingHeaders.\r\n  const inReplyTo = getHeader('In-Reply-To', headersString);\r\n  // This is a header that should be set if a reply is automated, e.g. an OOO\r\n  const autoSubmitted = getHeader('Auto-Submitted', headersString);\r\n\r\n  return { messageID, inReplyTo, autoSubmitted };\r\n}\r\n", "// General sizing\r\nconst XSMALL = 2;\r\nconst SMALL = 4;\r\nconst MEDIUM = 8;\r\nconst LARGE = 16;\r\nconst XLARGE = 24;\r\nconst XXLARGE = 32;\r\nconst XXXLARGE = 48;\r\n\r\nconst AVATAR_BORDER_WIDTH_PX = XSMALL;\r\n\r\nconst CHECKBOX_DEFAULT_SIZE_PX = LARGE;\r\nconst MAIN_CHAT_AVATAR_SIZE_PX = XLARGE + AVATAR_BORDER_WIDTH_PX * 2;\r\nconst MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX = MEDIUM;\r\n\r\nexport const Sizes = {\r\n  // Sidebar\r\n  SIDEBAR_COMPACT_WIDTH: 312, // used when viewport width is <= VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_NORMAL_WIDTH: 416, // used when viewport width is > VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_MAX_WIDTH: 500,\r\n  VIEWPORT_WIDTH_BREAKPOINT: 1440,\r\n\r\n  // Navigation top bar\r\n  NAVIGATION_ITEM_SPACING_COMPACT: 12,\r\n  NAVIGATION_ITEM_SPACING_NORMAL: LARGE,\r\n\r\n  // subtract MEDIUM here, add it to the sidebar App.tsx container paddingBottom, to allow shadows to be visible\r\n  SIDEBAR_BOTTOM_SPACE: 96 - MEDIUM,\r\n\r\n  // Text\r\n  X_SMALL_TEXT_SIZE_PX: 10,\r\n  SMALL_TEXT_SIZE_PX: 12,\r\n  DEFAULT_TEXT_SIZE_PX: 14,\r\n  LARGE_TEXT_SIZE_PX: 18,\r\n  X_LARGE_TEXT_SIZE_PX: 24,\r\n  SMALL_LINE_HEIGHT_PX: 16,\r\n  DEFAULT_LINE_HEIGHT_PX: 20,\r\n  LARGE_LINE_HEIGHT_PX: 24,\r\n  X_LARGE_LINE_HEIGHT_PX: 32,\r\n  BOLD_TEXT_WEIGHT: 700,\r\n  NORMAL_TEXT_WEIGHT: 400,\r\n\r\n  // Spacing\r\n  SMALL_PADDING_PX: 6,\r\n  DEFAULT_PADDING_PX: 12,\r\n\r\n  DEFAULT_BORDER_RADIUS: SMALL,\r\n  LARGE_BORDER_RADIUS: MEDIUM,\r\n  SMALL_BORDER_RADIUS: XSMALL,\r\n\r\n  // Icon\r\n  DEFAULT_ICON_PADDING_PX: 4,\r\n\r\n  // Profile pics\r\n  PAGE_VISITORS_AVATAR_SIZE_PX: XLARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n  MAIN_CHAT_AVATAR_SIZE_PX,\r\n  MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  MESSAGE_LEFT_PADDING:\r\n    MAIN_CHAT_AVATAR_SIZE_PX + MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  AVATAR_BORDER_WIDTH_PX,\r\n  FACEPILE_AVATAR_OVERLAP_SIZE_PX: SMALL,\r\n  NOTIFICATION_FACEPILE_SIZE: LARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n\r\n  // Composer\r\n  COMPOSER_ADD_BUTTON_HEIGHT_PX: XXLARGE,\r\n  COMPOSER_ADD_BUTTON_WIDTH_PX: XXLARGE,\r\n  COMPOSER_HORIZONTAL_PADDING: MEDIUM,\r\n  COMPOSER_VERTICAL_PADDING: 18,\r\n  MAX_COMPOSER_EDITOR_HEIGHT: 448,\r\n\r\n  // Messages\r\n  MESSAGE_BLOCK_BOTTOM_MARGIN: XLARGE,\r\n  MESSAGE_BOTTOM_MARGIN: MEDIUM * 1.5,\r\n  MESSAGE_CONTENTS_TOP_MARGIN: 5,\r\n  MESSAGE_PARAGRAPH_TOP_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_TOP_MARGIN: SMALL,\r\n  MESSAGE_REACTIONS_BOTTOM_MARGIN: -MEDIUM,\r\n  MESSAGE_SEEN_BY_BOTTOM_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_FACEPILE_OVERLAP: 6,\r\n  MESSAGE_PAST_REACTION_HEIGHT: LARGE,\r\n  MESSAGE_ANNOTATION_HEIGHT_PX: 40,\r\n  MESSAGES_KEBAB_MENU_WIDTH_PX: 196,\r\n  MESSAGE_HEIGHT_TRUNCATE_AT_PX: 300,\r\n  MESSAGE_HEIGHT_TRUNCATE_TO_PX: 200,\r\n  INFINITE_SCROLL_THRESHOLD_PX: 400,\r\n  MESSAGE_ATTACHMENT_PLACEHOLDER_HEIGHT_PX: 92,\r\n  // 277 is the height of kebab menu for your own message, with one line of 'seen by'\r\n  // We set the minHeight of the share to slack menu to this\r\n  MIN_KEBAB_SLACK_MENU_HEIGHT: 277,\r\n  // Distance between kebab menu and kebab menu icon\r\n  KEBAB_MENU_OFFSET: SMALL,\r\n\r\n  // Bullets / numbered / todo lists\r\n  BULLET_PADDING_LEFT: CHECKBOX_DEFAULT_SIZE_PX + MEDIUM,\r\n\r\n  // Todo - feed this into the menu itself (prob via more dynamic svg)\r\n  MESSAGE_MENU_HEIGHT: 32,\r\n\r\n  // Tooltip\r\n  TOOLTIP_HORIZONTAL_PADDING_PX: MEDIUM,\r\n  TOOLTIP_VERTICAL_PADDING_PX: SMALL,\r\n  TOOLTIP_LINE_HEIGHT_PX: LARGE,\r\n  TOOLTIP_MAX_WIDTH_PX: 180,\r\n  ANNOTATION_TOOLTIP_MAX_WIDTH_PX: 180,\r\n\r\n  // Attachments\r\n  ATTACHMENT_THUMBNAIL_PX: 58,\r\n  PDF_ATTACHMENT_PX: 90,\r\n\r\n  // Modal\r\n  MODAL_SELECT_CHANNELS_MAX_HEIGHT_PX: 240,\r\n\r\n  // ImageModal\r\n  IMAGE_MODAL_SMALL_SCALE: 0.66,\r\n  IMAGE_MODAL_BUTTON_HEIGHT_SCALE_PX: 40,\r\n  IMAGE_MODAL_MENU_MAX_WIDTH_PX: 180,\r\n  IMAGE_MODAL_MENU_TOP_POSITION_PX: 44,\r\n\r\n  // Success Popup\r\n  SUCCESS_POPUP_HEIGHT: 36,\r\n\r\n  // Annotation pointer\r\n  ANNOTATION_POINTER_MIN_GAP_VS_SCREEN_EDGE: MEDIUM,\r\n  ANNOTATION_POINTER_SMALL_SIZE_PX: 34, // 32 + 1 for border on each side, which is included in the svg\r\n\r\n  // Annotation arrow\r\n  ANNOTATION_ARROW_CIRCLE_RADIUS: 4,\r\n  ANNOTATION_ARROW_HORIZONTAL_MARGIN_FOR_TOOLTIP: XXLARGE,\r\n\r\n  // Charts in webpage\r\n  MIN_CHART_SIZE_PX: 50,\r\n  MAX_CHART_CONTAINER_SIZE_RATIO: 1.25,\r\n\r\n  // Login\r\n  LOGIN_BUTTON_WIDTH_PX: 354,\r\n  LOGIN_BUTTON_HEIGHT_PX: 56,\r\n  LOGIN_MARGIN_PX: 56,\r\n  LOGIN_BUTTON_TEXT_SIZE_PX: 18,\r\n  LOGIN_TITLE_TEXT_SIZE_PX: 36,\r\n  EMAIL_PROMPT_HEIGHT_PX: 128,\r\n  EMAIL_PROMPT_INPUT_VERTICAL_PADDING_PX: 14,\r\n\r\n  // Welcome\r\n  WELCOME_PARAGRAPH_MAX_WIDTH_PX: 400,\r\n  WELCOME_VIDEO_MAX_HEIGHT_PX: 300,\r\n  WELCOME_VIDEO_MAX_WIDTH_PX: 600,\r\n\r\n  // Workspace\r\n  WORKSPACE_HORIZONTAL_MARGIN_PX: 56,\r\n  WORKSPACE_VERTICAL_GAP_PX: 40,\r\n  WORKSPACE_VERTICAL_GAP_SMALL_PX: 32,\r\n  WORKSPACE_SMALL_PADDING_PX: 12,\r\n  WORKSPACE_XSMALL_PADDING_PX: 6,\r\n  WORKSPACE_PARAGRAPH_MAX_WIDTH_PX: 480,\r\n  WORKSPACE_WIDTH_PX: 576,\r\n  WORKSPACE_LOGIN_WIDTH_PX: 640,\r\n  WORKSPACE_LOGIN_BUTTON_HEIGHT_PX: 48,\r\n  WORKSPACE_LOGIN_ORG_IMAGE_SIZE_PX: XXXLARGE,\r\n  WORKSPACE_GET_STARTED_STEP_MAX_WIDTH_PX: 290,\r\n  WORKSPACE_GET_STARTED_STEP_MIN_WIDTH_PX: 230,\r\n  RECENTLY_SHARED_MIN_WIDTH_PX: 120,\r\n  RECENTLY_SHARED_MAX_WIDTH_PX: 240,\r\n  UPDATES_MAX_WIDTH_PX: 320,\r\n\r\n  // Extension popup\r\n  EXTENSION_POPUP_WIDTH: 360,\r\n  EXTENSION_POPUP_HEIGHT: 540,\r\n  EXTENSION_POPUP_START_CONVERSATION_BUTTON_HEIGHT: 60,\r\n\r\n  SPINNER_DEFAULT_HEIGHT_PX: 20,\r\n  SPINNER_LARGE_HEIGHT_PX: 40,\r\n  CHECKBOX_DEFAULT_SIZE_PX,\r\n\r\n  DEFAULT_ICON_SIZE: 24,\r\n  SMALL_ICON_SIZE: 16,\r\n  X_SMALL_ICON_SIZE: 12,\r\n\r\n  DEFAULT_BORDER_WIDTH: 1,\r\n\r\n  COLLAPSED_THREAD_MESSAGE_HEIGHT: 44,\r\n  ADD_THREAD_BUTTONS_HEIGHT: 60,\r\n  GAP_BETWEEN_THREADS: XLARGE,\r\n  GAP_BETWEEN_GROUPED_THREADS: MEDIUM,\r\n  LOAD_OLDER_MESSAGES_BUTTON_HEIGHT: 33,\r\n\r\n  THREAD_MESSAGE_PADDING: MEDIUM,\r\n\r\n  SCREENSHOT_BLUR_PX: 10,\r\n\r\n  //Screen Size for Embed\r\n\r\n  MINIMUM_SCREEN_WIDTH: 600,\r\n  MINIMUM_SCREEN_HEIGHT: 600,\r\n\r\n  // Puppet Auth\r\n  PUPPET_MODAL_TOP_MARGIN: 60,\r\n  PUPPET_MODAL_TOP_PADDING: 36,\r\n  PUPPET_MODAL_PADDING: 40,\r\n  PUPPET_MODAL_VERTICAL_PADDING_BUTTON: 10,\r\n  PUPPET_MODAL_VERTICAL_PADDING_TEXT_FIELD: 10,\r\n\r\n  // Launcher / Close sidebar button\r\n  LAUNCHER_ICON_HEIGHT: 60,\r\n  LAUNCHER_ICON_WIDTH: 60,\r\n  CLOSE_SIDEBAR_ICON_HEIGHT: 60,\r\n  CLOSE_SIDEBAR_ICON_WIDTH: 60,\r\n  LAUNCHER_FIXED_RIGHT_LENGTH: 16,\r\n  LAUNCHER_FIXED_BOTTOM_LENGTH: 16,\r\n\r\n  XSMALL,\r\n  SMALL,\r\n  MEDIUM,\r\n  LARGE,\r\n  XLARGE,\r\n  XXLARGE,\r\n  XXXLARGE,\r\n};\r\n\r\nexport type FontSize =\r\n  | 'xSmall'\r\n  | 'small'\r\n  | 'default'\r\n  | 'large'\r\n  | 'xLarge'\r\n  | 'inherit';\r\nexport const FontSizes: {\r\n  [fontSize in FontSize]: number | string;\r\n} = {\r\n  xSmall: Sizes.X_SMALL_TEXT_SIZE_PX,\r\n  small: Sizes.SMALL_TEXT_SIZE_PX,\r\n  default: Sizes.DEFAULT_TEXT_SIZE_PX,\r\n  large: Sizes.LARGE_TEXT_SIZE_PX,\r\n  xLarge: Sizes.X_LARGE_TEXT_SIZE_PX,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const LineHeights: { [fontSize in FontSize]: string } = {\r\n  xSmall: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  small: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  default: `${Sizes.DEFAULT_LINE_HEIGHT_PX}px`,\r\n  large: `${Sizes.LARGE_LINE_HEIGHT_PX}px`,\r\n  xLarge: `${Sizes.X_LARGE_LINE_HEIGHT_PX}px`,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const MESSAGE_BLOCK_AVATAR_SIZE = 'l';\r\n\r\nexport const DEFAULT_EMAIL_LOGO_WIDTH = '140';\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  CustomerImplementationStage,\r\n  CustomerType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\nexport type Addons = { [key: string]: string | number | boolean };\r\nexport type BillingType = 'stripe' | 'manual';\r\nexport type PricingTier = 'free' | 'pro' | 'scale';\r\n@Table({\r\n  tableName: 'customers',\r\n  timestamps: false,\r\n})\r\nexport class CustomerEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('verified', 'sample'),\r\n    defaultValue: 'verified',\r\n    allowNull: false,\r\n  })\r\n  type!: CustomerType;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_s3_bucket'] ?? false;\r\n    },\r\n  })\r\n  enableCustomS3Bucket!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_segment_write_key'] ?? false;\r\n    },\r\n  })\r\n  enableCustomSegmentWriteKey!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['customer_support'] ?? false;\r\n    },\r\n  })\r\n  enableCustomerSupport!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'launched',\r\n      'implementing',\r\n      'proof_of_concept',\r\n      'inactive',\r\n    ),\r\n    allowNull: false,\r\n    defaultValue: 'proof_of_concept',\r\n  })\r\n  implementationStage!: CustomerImplementationStage;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  launchDate!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  slackChannel!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  signupCoupon!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  stripeCustomerID!: CreationOptional<string | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'pro', 'scale'),\r\n    allowNull: true,\r\n    defaultValue: 'free',\r\n  })\r\n  pricingTier!: CreationOptional<PricingTier>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('active', 'inactive'),\r\n    allowNull: true,\r\n    defaultValue: 'inactive',\r\n  })\r\n  billingStatus!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('stripe', 'manual'),\r\n    allowNull: true,\r\n    defaultValue: null,\r\n  })\r\n  billingType!: CreationOptional<BillingType | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  addons!: CreationOptional<Addons>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  renewalDate!: CreationOptional<Date | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: [],\r\n    allowNull: false,\r\n  })\r\n  planDescription!: CreationOptional<string[]>;\r\n}\r\n", "import { format } from 'winston';\r\nimport stringify from 'fast-json-stable-stringify';\r\n\r\nconst MESSAGE = Symbol.for('message');\r\n\r\n// This defines our custom log format for logging to the console.\r\n// It looks like `<LOGLEVEL> <TIMESTAMP>: <MESSAGE>[ <META>]`\r\n// where LOGLEVEL is a single capital letter (`EWIHVDS` for error, warn,\r\n// info, http, verbose, debug, silly) and META is a JSON object with\r\n// additional fields, such as `process` (`server`), `version` (taken from\r\n// package.json) etc.\r\n\r\nexport const flatFormat = format((info) => {\r\n  const { level, timestamp, message, splat: _, ...meta } = info;\r\n\r\n  let stringifiedMeta: string;\r\n  try {\r\n    stringifiedMeta = stringify(meta);\r\n  } catch (err) {\r\n    stringifiedMeta = `! stringify exception: ${err}`;\r\n  }\r\n\r\n  const formattedMessage = `${level\r\n    .substr(0, 1)\r\n    .toUpperCase()} ${timestamp}: ${message} ${stringifiedMeta}`;\r\n\r\n  (info as any)[MESSAGE] = formattedMessage;\r\n  return info;\r\n});\r\n", "{\r\n  \"name\": \"radical\",\r\n  \"version\": \"1.1093.0\",\r\n  \"description\": \"The monorepo for Radical\",\r\n  \"main\": \"index.js\",\r\n  \"repository\": \"ssh://radical@vault.phacility.com/source/monorepo.git\",\r\n  \"author\": \"jack@getradical.co\",\r\n  \"license\": \"NONE\",\r\n  \"private\": true,\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\r\n    \"migrate\": \"sequelize-cli db:migrate\",\r\n    \"migrate-down\": \"sequelize-cli db:migrate:undo\",\r\n    \"build\": \"npm run tsc-once && ./build/index.mjs --mode=production --clean\",\r\n    \"build-demo-apps\": \"demo-apps/build-demo-apps.sh\",\r\n    \"build-sample-apps\": \"npm run build-demo-apps\",\r\n    \"check-database-schema\": \"./build/index.mjs --mode=development --target=scripts/check-database-schema.ts && ./dist/scripts/check-database-schema.js --check\",\r\n    \"codegen\": \"node ./build/index.mjs --mode=development --target=scripts/generate-graphql-types.ts && node ./dist/scripts/generate-graphql-types.js && node ./scripts/generate-dayjs.mjs > opensource/sdk-js/packages/react/common/dayjs.ts\",\r\n    \"docs-codegen\": \"./scripts/docs-codegen.sh\",\r\n    \"local-dev\": \"./ops/local-dev.sh\",\r\n    \"watch\": \"./build/index.mjs --mode=development --clean && (./build/index.mjs --mode=development --watch --skipInitialBuild & npm run start-external-dev & npm run start-local-s3 & nodemon --config nodemon-server.json & nodemon --config nodemon-docs-server.json & npm run tsc)\",\r\n    \"watch-external\": \"./build/index.mjs --mode=development --watch --target=external\",\r\n    \"watch-server\": \"./build/index.mjs --mode=development --watch --target=server\",\r\n    \"db-ssh-tunnel\": \"lsof -i '@localhost:15432' >/dev/null || ssh -f -N -L 15432:database-prod-read.int.cord.com:5432 zero\",\r\n    \"db-ssh-tunnel-write\": \"lsof -i '@localhost:25432' >/dev/null || ssh -f -N -L 25432:database-prod.int.cord.com:5432 zero\",\r\n    \"start-external-dev\": \"http-server ./dist/external -c-1 -a :: --silent --port 8179 --cors --ssl --key ./localhost/localhost.key --cert ./localhost/localhost.crt\",\r\n    \"start-local-s3\": \"cat ./localhost/localhost.key ./localhost/localhost.crt > ./localhost/localhost.packed && cd ops && docker-compose up localstack\",\r\n    \"start-postgres\": \". ./.env && export POSTGRES_USER POSTGRES_DB POSTGRES_PORT POSTGRES_PASSWORD && cd ops && docker-compose up postgres\",\r\n    \"start-redis\": \"cd ops && docker-compose up redis\",\r\n    \"start-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/server/index.js\",\r\n    \"start-server-dev-snapshots\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps --heapsnapshot-signal=SIGUSR2 ./dist/server/index.js\",\r\n    \"start-server-prod\": \"node -r dotenv/config dist/generic/server/index.js\",\r\n    \"start-asyncWorker-dev\": \"node -r dotenv/config --enable-source-maps ./dist/asyncWorker/asyncWorker.js\",\r\n    \"start-asyncWorker-prod\": \"node -r dotenv/config dist/generic/asyncWorker/asyncWorker.js\",\r\n    \"start-docs-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/docs/server/index.js\",\r\n    \"start-docs-server-prod\": \"node -r dotenv/config dist/generic/docs/server/index.js\",\r\n    \"tsc\": \"tsc --incremental false --noEmit --skipLibCheck --watch --preserveWatchOutput\",\r\n    \"tsc-once\": \"tsc --incremental false --noEmit --skipLibCheck\",\r\n    \"wipe-postgres\": \"cd ops && POSTGRES_USER= POSTGRES_DB= POSTGRES_PASSWORD= docker-compose down --volumes\",\r\n    \"install\": \"find node_modules/@sentry/ -type f -print0 | grep -z -E '\\\\.(js|js\\\\.map|d\\\\.ts)$' | if sed --version >/dev/null 2>&1 ; then xargs -0 sed --in-place 's/\\\\b__SENTRY__\\\\b/_CORDSNTRY/g;'; else xargs -0 sed -i '' -E 's/[[:<:]]__SENTRY__[[:>:]]/_CORDSNTRY/g;'; fi\",\r\n    \"postinstall\": \"patch-package\",\r\n    \"repl\": \"./build/index.mjs --mode=development --target=repl && node ./dist/repl/index.js\",\r\n    \"generate-docs-embeddings\": \"./build/index.mjs --mode=development --target=scripts/docs-generate-search-data.ts && ./dist/scripts/docs-generate-search-data.js\",\r\n    \"extract-demo-apps-to-sandpack-object\": \"./build/index.mjs --mode=development --target=scripts/extract-demo-apps-to-sandpack-file-object.ts && ./dist/scripts/extract-demo-apps-to-sandpack-file-object.js\",\r\n    \"prepare\": \"[ \\\"$(git config core.hooksPath)\\\" = \\\".githooks\\\" ] && git config --unset core.hooksPath ; ln -s ../../.githooks/prepare-commit-msg .git/hooks/ > /dev/null 2>&1 || true\"\r\n  },\r\n  \"jest\": {\r\n    \"extensionsToTreatAsEsm\": [\r\n      \".ts\",\r\n      \".tsx\",\r\n      \".graphql\"\r\n    ],\r\n    \"transform\": {\r\n      \"^.+\\\\.(tsx?$)|(js$)|(graphql$)\": \"<rootDir>/jest/transformer.mjs\"\r\n    },\r\n    \"resolver\": \"<rootDir>/jest/resolver.cjs\",\r\n    \"moduleDirectories\": [\r\n      \"<rootDir>\",\r\n      \"node_modules\"\r\n    ],\r\n    \"setupFiles\": [\r\n      \"<rootDir>/jest/setup-jest-env.js\"\r\n    ],\r\n    \"testPathIgnorePatterns\": [\r\n      \"/node_modules/\",\r\n      \"<rootDir>/dist/\",\r\n      \"<rootDir>/screenshotsDiff\",\r\n      \"<rootDir>/opensource/\"\r\n    ],\r\n    \"transformIgnorePatterns\": [\r\n      \"/node_modules/\"\r\n    ]\r\n  },\r\n  \"workspaces\": [\r\n    \"opensource/sdk-js/packages/*\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@apollo/client\": \"~3.10.4\",\r\n    \"@auth0/auth0-react\": \"^1.8.0\",\r\n    \"@aws-sdk/client-auto-scaling\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudfront\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudwatch-logs\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ec2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ecr\": \"^3.363.0\",\r\n    \"@aws-sdk/client-elastic-load-balancing-v2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-iam\": \"^3.363.0\",\r\n    \"@aws-sdk/client-s3\": \"^3.363.0\",\r\n    \"@aws-sdk/client-secrets-manager\": \"^3.363.0\",\r\n    \"@aws-sdk/credential-provider-node\": \"^3.363.0\",\r\n    \"@codesandbox/sandpack-react\": \"^2.6.9\",\r\n    \"@emotion/react\": \"^11.11.1\",\r\n    \"@emotion/server\": \"^11.10.0\",\r\n    \"@emotion/styled\": \"^11.11.0\",\r\n    \"@floating-ui/react-dom\": \"^1.3.0\",\r\n    \"@giphy/js-fetch-api\": \"^5.4.0\",\r\n    \"@giphy/react-components\": \"^9.4.1\",\r\n    \"@graphql-tools/schema\": \"^8.5.0\",\r\n    \"@graphql-tools/utils\": \"^8.13.1\",\r\n    \"@heroicons/react\": \"^2.0.18\",\r\n    \"@launchdarkly/node-server-sdk\": \"^8.2.4\",\r\n    \"@leeoniya/ufuzzy\": \"^0.7.0\",\r\n    \"@material-ui/core\": \"^4.12.4\",\r\n    \"@material-ui/styles\": \"^4.11.5\",\r\n    \"@mui/material\": \"^5.13.7\",\r\n    \"@phosphor-icons/react\": \"^2.0.15\",\r\n    \"@pyroscope/nodejs\": \"^0.3.11\",\r\n    \"@radix-ui/react-label\": \"^2.0.2\",\r\n    \"@radix-ui/react-select\": \"^2.0.0\",\r\n    \"@radix-ui/react-slot\": \"^1.0.2\",\r\n    \"@radix-ui/react-tooltip\": \"^1.0.7\",\r\n    \"@segment/analytics-node\": \"^2.0.0\",\r\n    \"@sendgrid/mail\": \"^8.1.0\",\r\n    \"@sentry/browser\": \"^7.57.0\",\r\n    \"@sentry/node\": \"^7.59.3\",\r\n    \"@sentry/react\": \"^7.57.0\",\r\n    \"@sentry/tracing\": \"^7.59.3\",\r\n    \"@sentry/types\": \"^7.59.3\",\r\n    \"@slack/events-api\": \"^3.0.1\",\r\n    \"@slack/web-api\": \"6.11.1\",\r\n    \"@slack/webhook\": \"^7.0.2\",\r\n    \"@tanstack/react-query\": \"^4.32.6\",\r\n    \"@tanstack/react-virtual\": \"^3.5.0\",\r\n    \"@types/blueimp-md5\": \"^2.7.0\",\r\n    \"@types/emoji-js\": \"^3.5.2\",\r\n    \"@types/jsdom\": \"^16.2.5\",\r\n    \"@types/parse5\": \"^7.0.0\",\r\n    \"@types/ua-parser-js\": \"^0.7.36\",\r\n    \"@types/valid-data-url\": \"^2.0.0\",\r\n    \"@types/wcag-contrast\": \"^3.0.0\",\r\n    \"ajv\": \"^8.11.0\",\r\n    \"ajv-formats\": \"^2.1.1\",\r\n    \"apollo-server-core\": \"^3.12.1\",\r\n    \"apollo-server-express\": \"^3.12.1\",\r\n    \"at-least-node\": \"^1.0.0\",\r\n    \"auth0\": \"^3.7.2\",\r\n    \"axios\": \"^1.6.8\",\r\n    \"backo2\": \"^1.0.2\",\r\n    \"bluebird\": \"^3.7.2\",\r\n    \"blueimp-md5\": \"^2.18.0\",\r\n    \"buffer\": \"^5.6.0\",\r\n    \"cheerio\": \"^1.0.0-rc.12\",\r\n    \"classnames\": \"^2.5.1\",\r\n    \"cookie\": \"^0.4.1\",\r\n    \"cookie-parser\": \"^1.4.6\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"dataloader\": \"^2.0.0\",\r\n    \"dayjs\": \"^1.11.11\",\r\n    \"dockerode\": \"^3.3.0\",\r\n    \"dotenv\": \"^8.2.0\",\r\n    \"email-addresses\": \"^5.0.0\",\r\n    \"emoji-js\": \"^3.8.0\",\r\n    \"emoji-picker-element\": \"^1.16.0\",\r\n    \"express\": \"^4.19.2\",\r\n    \"express-basic-auth\": \"^1.2.0\",\r\n    \"fast-json-stable-stringify\": \"^2.1.0\",\r\n    \"form-data\": \"^3.0.1\",\r\n    \"framer-motion\": \"^6.5.1\",\r\n    \"free-email-domains\": \"^1.2.4\",\r\n    \"graphql\": \"^15.8.0\",\r\n    \"graphql-iso-date\": \"^3.6.1\",\r\n    \"graphql-redis-subscriptions\": \"^2.5.0\",\r\n    \"graphql-subscriptions\": \"^2.0.0\",\r\n    \"graphql-tag\": \"^2.12.6\",\r\n    \"graphql-type-json\": \"^0.3.2\",\r\n    \"graphql-type-uuid\": \"^0.2.0\",\r\n    \"handlebars\": \"^4.7.7\",\r\n    \"highcharts\": \"^10.2.1\",\r\n    \"highcharts-react-official\": \"^3.1.0\",\r\n    \"html-entities\": \"^2.1.0\",\r\n    \"i18next\": \"^23.8.2\",\r\n    \"ioredis\": \"^5.2.2\",\r\n    \"ipaddr.js\": \"^2.2.0\",\r\n    \"is-hotkey\": \"^0.2.0\",\r\n    \"iterall\": \"^1.3.0\",\r\n    \"jose\": \"^4.15.5\",\r\n    \"jotai\": \"^2.6.3\",\r\n    \"js-base64\": \"^3.7.7\",\r\n    \"jsdom\": \"^24.0.0\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"jss\": \"^10.9.0\",\r\n    \"jwks-rsa\": \"^2.0.5\",\r\n    \"jwt-encode\": \"^1.0.1\",\r\n    \"linkify-react\": \"^4.1.3\",\r\n    \"linkifyjs\": \"^4.1.3\",\r\n    \"markdown-to-jsx\": \"^7.4.0\",\r\n    \"multer\": \"^1.4.4-lts.1\",\r\n    \"nanoid\": \"^3.3.6\",\r\n    \"neat-csv\": \"^7.0.0\",\r\n    \"node-cache\": \"^5.1.2\",\r\n    \"node-email-reply-parser\": \"^0.1.4\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"oauth\": \"^0.9.15\",\r\n    \"open\": \"^8.4.2\",\r\n    \"openai\": \"^4.22.0\",\r\n    \"parse5\": \"^7.1.2\",\r\n    \"patch-package\": \"^6.5.1\",\r\n    \"pg\": \"^8.11.5\",\r\n    \"pg-boss\": \"^8.4.2\",\r\n    \"pg-copy-streams\": \"^5.1.1\",\r\n    \"prom-client\": \"^15.1.2\",\r\n    \"query-string\": \"^7.1.3\",\r\n    \"querystring\": \"^0.2.0\",\r\n    \"radash\": \"^11.0.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-bootstrap\": \"^1.6.6\",\r\n    \"react-country-region-selector\": \"^3.6.1\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-helmet\": \"^6.1.0\",\r\n    \"react-i18next\": \"^13.2.2\",\r\n    \"react-jss\": \"^10.9.0\",\r\n    \"react-markdown\": \"^8.0.5\",\r\n    \"react-popper\": \"^2.3.0\",\r\n    \"react-router-dom\": \"^6.8.2\",\r\n    \"react-sticky-box\": \"^2.0.5\",\r\n    \"react-syntax-highlighter\": \"^15.5.0\",\r\n    \"react-window\": \"^1.8.10\",\r\n    \"redlock\": \"^v5.0.0-beta.2\",\r\n    \"reflect-metadata\": \"^0.1.13\",\r\n    \"response-time\": \"^2.3.2\",\r\n    \"sequelize\": \"^6.37.0\",\r\n    \"sequelize-cli\": \"^6.6.1\",\r\n    \"sequelize-typescript\": \"^2.1.6\",\r\n    \"serialize-error\": \"^11.0.3\",\r\n    \"sha.js\": \"^2.4.11\",\r\n    \"sharp\": \"^0.32.6\",\r\n    \"slack-markdown\": \"0.1.1\",\r\n    \"slate\": \"^0.100.0\",\r\n    \"slate-history\": \"^0.100.0\",\r\n    \"slate-hyperscript\": \"^0.100.0\",\r\n    \"slate-react\": \"^0.100.1\",\r\n    \"stripe\": \"^15.4.0\",\r\n    \"subscriptions-transport-ws\": \"^0.9.19\",\r\n    \"supertest\": \"^6.1.6\",\r\n    \"typed-emitter\": \"^1.3.1\",\r\n    \"ua-parser-js\": \"^1.0.33\",\r\n    \"url\": \"^0.11.0\",\r\n    \"url-pattern\": \"^1.0.3\",\r\n    \"use-sync-external-store\": \"^1.2.0\",\r\n    \"uuid\": \"^8.3.2\",\r\n    \"valid-data-url\": \"^3.0.0\",\r\n    \"validator\": \"^13.7.0\",\r\n    \"wcag-contrast\": \"^3.0.0\",\r\n    \"winston\": \"^3.7.2\",\r\n    \"winston-cloudwatch\": \"^6.2.0\",\r\n    \"winston-transport\": \"^4.5.0\",\r\n    \"ws\": \"^7.5.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@cspell/eslint-plugin\": \"^6.31.1\",\r\n    \"@luckycatfactory/esbuild-graphql-loader\": \"^3.7.0\",\r\n    \"@microsoft/tsdoc\": \"^0.14.2\",\r\n    \"@sentry/cli\": \"^2.10.0\",\r\n    \"@types/analytics-node\": \"^3.1.5\",\r\n    \"@types/auth0\": \"^3.3.3\",\r\n    \"@types/backo2\": \"^1.0.1\",\r\n    \"@types/bluebird\": \"^3.5.32\",\r\n    \"@types/chrome\": \"^0.0.112\",\r\n    \"@types/cookie\": \"^0.4.0\",\r\n    \"@types/cookie-parser\": \"^1.4.3\",\r\n    \"@types/dockerode\": \"^3.2.6\",\r\n    \"@types/express\": \"^4.17.14\",\r\n    \"@types/jest\": \"^29.5.3\",\r\n    \"@types/jscodeshift\": \"^0.11.6\",\r\n    \"@types/jsonwebtoken\": \"^8.5.9\",\r\n    \"@types/multer\": \"^1.4.7\",\r\n    \"@types/node\": \"^14.18.54\",\r\n    \"@types/oauth\": \"^0.9.1\",\r\n    \"@types/pg\": \"^8.11.5\",\r\n    \"@types/pg-copy-streams\": \"^1.2.1\",\r\n    \"@types/query-string\": \"^6.3.0\",\r\n    \"@types/react\": \"^18.2.25\",\r\n    \"@types/react-dom\": \"^18.2.18\",\r\n    \"@types/react-helmet\": \"^6.1.6\",\r\n    \"@types/react-syntax-highlighter\": \"^15.5.6\",\r\n    \"@types/react-window\": \"^1.8.8\",\r\n    \"@types/response-time\": \"^2.3.5\",\r\n    \"@types/sha.js\": \"^2.4.0\",\r\n    \"@types/supertest\": \"^2.0.11\",\r\n    \"@types/uuid\": \"^8.3.4\",\r\n    \"@types/validator\": \"^13.7.3\",\r\n    \"@types/ws\": \"^7.2.5\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^7.5.0\",\r\n    \"@typescript-eslint/parser\": \"^7.5.0\",\r\n    \"@vanilla-extract/css\": \"^1.15.2\",\r\n    \"@vanilla-extract/esbuild-plugin\": \"^2.2.2\",\r\n    \"chokidar\": \"^3.5.3\",\r\n    \"csstype\": \"^3.1.3\",\r\n    \"esbuild\": \"^0.21.3\",\r\n    \"esbuild-plugin-svgr\": \"0.0.1\",\r\n    \"eslint\": \"^8.31.0\",\r\n    \"eslint-config-prettier\": \"^8.6.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\r\n    \"eslint-plugin-cypress\": \"^2.12.1\",\r\n    \"eslint-plugin-i18next\": \"^6.0.3\",\r\n    \"eslint-plugin-import\": \"^2.28.1\",\r\n    \"eslint-plugin-jest\": \"^27.9.0\",\r\n    \"eslint-plugin-no-lookahead-lookbehind-regexp\": \"^0.1.0\",\r\n    \"eslint-plugin-no-relative-import-paths\": \"^v1.5.2\",\r\n    \"eslint-plugin-prettier\": \"^5.0.1\",\r\n    \"eslint-plugin-react\": \"^7.32.2\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"fake-indexeddb\": \"^3.1.7\",\r\n    \"glob\": \"^10.3.10\",\r\n    \"http-server\": \"^14.0.0\",\r\n    \"ioredis-mock\": \"^7.4.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"jest-environment-jsdom\": \"^29.6.1\",\r\n    \"jscodeshift\": \"^0.14.0\",\r\n    \"lint-staged\": \"12.3.5\",\r\n    \"nodemon\": \"^3.0.1\",\r\n    \"pg-formatter\": \"^1.2.0\",\r\n    \"prettier\": \"^3.0.3\",\r\n    \"schema-dts\": \"^1.1.2\",\r\n    \"ts-prune\": \"latest\",\r\n    \"typescript\": \"~5.1.6\",\r\n    \"yargs\": \"^17.7.2\"\r\n  },\r\n  \"overrides\": {\r\n    \"@auth0/auth0-react\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\"\r\n    },\r\n    \"@material-ui/core\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\",\r\n      \"@types/react-dom\": \"^18.0.11\"\r\n    },\r\n    \"@material-ui/styles\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\"\r\n    },\r\n    \"@sentry/cli\": {\r\n      \"strip-ansi\": \"^7.0.1\"\r\n    },\r\n    \"@slack/events-api\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"apollo-server-express\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"eslint-plugin-import\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"graphql-iso-date\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"graphql-postgres-subscriptions\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"postgres-date\": \"2.1.0\"\r\n  }\r\n}\r\n", "import * as http from 'http';\r\nimport * as https from 'https';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport { promises as fsPromises } from 'fs';\r\nimport * as prom from 'prom-client';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nimport type { ListenPort } from 'server/src/util/port.ts';\r\nimport { getHostPortion } from 'server/src/util/port.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker')\r\ndeclare const BUILDCONSTANTS: { loggingProcessName: string };\r\n\r\n// Prometheus is an open source monitoring framework. The way it works is that\r\n// a central Prometheus server periodically (by default once a minute) connects\r\n// to the processes it is set up to monitor and obtains their metrics\r\n// measurements. Prometheus stores these time series of data, and typically\r\n// another open source product, Grafana, is used for visualising this data,\r\n// building dashboards etc.\r\n//\r\n// The kind of metrics that get collected include counters (\"How many requests\r\n// of type X have we had?\", which will be displayed as a graph showing\r\n// X-requests per second), and histograms e.g. for execution speed (\"How many\r\n// requests of type X have had that got processed faster than Y seconds?\",\r\n// which will be displayed as a graph showing the mean, median or p90\r\n// processing time over the day).\r\n//\r\n// So, for Prometheus to be able to show us metrics about our server, our\r\n// server has to collect those metrics and expose them so that the Prometheus\r\n// server can scrape them periodically. That is what this file does.\r\n//\r\n// The Prometheus client library (prom-client) does all of the hard work here,\r\n// of pre-aggregating the metrics in the format that the Prometheus server\r\n// expects. In this file, we just define a few helper functions that make it\r\n// even easier to define metrics and instrument the code to collect them.\r\n//\r\n// One important thing to understand is that the Prometheus client does not\r\n// store a list of all individual events, but aggregates data immediately. So,\r\n// e.g., when we instrument our code to keep track of how long certain GraphQL\r\n// operations take, the Prometheus client won't store the execution time of\r\n// each individual request, but rather increments a counter for a certain time\r\n// range. So the information that an individual request took 15ms is lost, and\r\n// instead the counter for \"events between 10 and 20ms\" is incremented. This\r\n// makes the collection of metrics very lightweight, and we do not have to\r\n// worry about the overhead it introduces. On the other hand we, of course,\r\n// don't have precise data for every single event anymore, but in practice, if\r\n// there are hundreds or thousands of such events, the bucketed data works just\r\n// as well.\r\n\r\nconst register = new prom.Registry();\r\nif (process.env.CORD_WORKER_NAME) {\r\n  // Remove any punctuation characters that might cause issues for prometheus\r\n  const sanitizedWorkerName = process.env.CORD_WORKER_NAME.replace(\r\n    /[^A-Za-z0-9 _-]/g,\r\n    '',\r\n  );\r\n  register.setDefaultLabels({ worker: sanitizedWorkerName });\r\n}\r\nprom.AggregatorRegistry.setRegistries([register]);\r\nprom.collectDefaultMetrics({\r\n  register,\r\n  prefix: `${BUILDCONSTANTS.loggingProcessName}_`,\r\n});\r\n\r\n// Helper functions to easily create metrics. They are bound to the Prometheus\r\n// register whose metrics we expose here. These function also provide some\r\n// reasonable defaults, e.g. the bucket boundaries for histograms.\r\nexport const Counter = (configuration: prom.CounterConfiguration<string>) =>\r\n  new prom.Counter({ registers: [register], ...configuration });\r\nexport const Gauge = (configuration: prom.GaugeConfiguration<string>) =>\r\n  new prom.Gauge({ registers: [register], ...configuration });\r\nexport const TimeHistogram = (\r\n  configuration: prom.HistogramConfiguration<string>,\r\n) =>\r\n  new prom.Histogram({\r\n    registers: [register],\r\n    buckets: logBuckets(0.001, 10, 13),\r\n    ...configuration,\r\n  });\r\nexport function logBuckets(min: number, max: number, buckets: number) {\r\n  // This function creates bucket boundaries for histograms that are\r\n  // logarithmically equidistant.\r\n  // E.g. logBuckets(0.001, 10, 5) -> [ 0.001, 0.01, 0.1, 1, 10 ].\r\n  // If you increase bucket number from 5 to 9, then you get one additional\r\n  // bucket boundary in the middle between each of those 5 in the example.\r\n  // ([0.001, x*0.001, 0.01, x*0.01, 0.1, x*0.1, 1, x*1, 10] with x approx 3.16)\r\n  const logMin = Math.log10(min);\r\n  const logMax = Math.log10(max);\r\n  const step = (logMax - logMin) / (buckets - 1);\r\n  return [...Array(buckets).keys()].map((i) => min * 10 ** (i * step));\r\n  // The default setting for histograms we use above in the `Histogram` helper\r\n  // uses logBuckets(0.001, 10, 13), which covers the range from 1ms to 10s\r\n  // and has the nice property that each bucket's upper limit is roughly\r\n  // twice that of the previous bucket, and three buckets cover exactly a\r\n  // factor of 10. In other words, the upper boundaries of the histogram\r\n  // buckets are:\r\n  // [ 0.001, 0.00215, 0.00464,\r\n  //   0.01,  0.0215,  0.0464,\r\n  //   0.1,   0.215,   0.464,\r\n  //   1,     2.15,    4.64,\r\n  //  10 ]\r\n  // Anything faster than 1ms is counted in the first bucket, anything faster\r\n  // in than 10s is counted in the last bucket, and anything slower than 10s\r\n  // is counted as \"slower than 10s\" (Prometheus automatically adds one more\r\n  // bucket with +Infinity as the upper limit.)\r\n  //\r\n  // * Why those limits? 0.001 and 10?\r\n  // For example, our GraphQL operations (at the time of writing this)\r\n  // typically are in the tenths or hundreds of milliseconds. The limits here\r\n  // are chosen to cover that area well with some margin at both sides. More\r\n  // generally: anything that's faster than a millisecond is so fast that we\r\n  // don't need to worry about it, whereas anything near 10s is so slow that\r\n  // it's effectively broken. So the range from 1ms to 10s is chosen to be\r\n  // sure that we capture the relevant region. If we have a problem and, for\r\n  // example, the execution time of some operation creeps up, than we still\r\n  // capture that development until the execution time becomes longer than 10s,\r\n  // but hopefully we would have spotted a problem before that happens.\r\n  //\r\n  // * Why 13 buckets?\r\n  // 13 happens to be one of the numbers where we will have buckets lining up\r\n  // with powers of 10, which is nice. Having more buckets means that we have\r\n  // more precise information in our histograms, but it adds to the memory\r\n  // overhead. 13 should be good enough to get a good idea what's going on.\r\n  //\r\n  // * Why \"logarithmically equidistant\"?\r\n  // Since we use these histograms for measuring the timing of many different\r\n  // kinds of processes, this is a good one-fits-all solution. If you knew\r\n  // that you want to measure times in the range of, say, 10 to 20ms, than\r\n  // you would probably just have a linear series of bucket boundaries (10,\r\n  // 11, 12, ..., 20). However, to have a reasonably good resultion for\r\n  // processes that take around 10ms and at the same time for those that take\r\n  // around 100 or 1000ms, it's better to have a constant factor between\r\n  // bucket boundaries. Here, the upper end of a bucket is at 2.15 times the\r\n  // lower end, and that way we nicely spread out just 13 buckets on the wide\r\n  // range from 1ms to 10s.\r\n}\r\n\r\nexport function incCounterWithAppID<T extends string>(\r\n  viewer: Viewer,\r\n  counter: prom.Counter<T>,\r\n  labels: prom.LabelValues<T> = {},\r\n  value = 1,\r\n): void {\r\n  counter.inc(\r\n    { appID: viewer.platformApplicationID || 'null', ...labels },\r\n    value,\r\n  );\r\n}\r\n\r\n// Ideally would be instantiated within the cluster-mode-only handler below, but\r\n// having it out here means that even workers do it, working around this issue:\r\n// https://github.com/siimon/prom-client/pull/449#issuecomment-922504343\r\nconst aggregatorRegistry = new prom.AggregatorRegistry();\r\n\r\nexport async function metricsMain(port: ListenPort, clusterMode: boolean) {\r\n  const app = clusterMode\r\n    ? (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', aggregatorRegistry.contentType);\r\n        aggregatorRegistry.clusterMetrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'aggregatorRegistry.clusterMetrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      }\r\n    : (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', register.contentType);\r\n        register.metrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'register.metrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      };\r\n\r\n  const server =\r\n    process.env.NODE_ENV === 'development' && !process.env.IS_TEST\r\n      ? https.createServer(\r\n          {\r\n            key: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.key',\r\n            ),\r\n            cert: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.crt',\r\n            ),\r\n          },\r\n          app,\r\n        )\r\n      : http.createServer(app);\r\n\r\n  // Start our server\r\n  return await new Promise<void>((resolve, reject) => {\r\n    server.addListener('error', reject);\r\n    server.listen(port, () => {\r\n      server.removeListener('error', reject);\r\n      resolve();\r\n      const host = getHostPortion(server.address());\r\n      anonymousLogger().info(\r\n        `\uD83D\uDE80 Serving Prometheus metrics at https://${host}/`,\r\n      );\r\n    });\r\n  });\r\n}\r\n", "import { JwksClient } from 'jwks-rsa';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { GACookieType } from 'server/src/util/google-analytics.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nexport const SERVICE_USER_ID = 'service_user';\r\n\r\nexport enum AuthProviderType {\r\n  SLACK = 'slack',\r\n  PLATFORM = 'platform',\r\n}\r\n\r\nexport const jwksClient = new JwksClient({\r\n  jwksUri: `https://${env.AUTH0_CUSTOM_LOGIN_DOMAIN}/.well-known/jwks.json`,\r\n});\r\n\r\n// There is a surprising (and growing) amount of stuff that we'll want to store\r\n// as part of the user session. It makes sense to write this to a DB on the server\r\n// and to use a very small payload for network round trips (i.e. just the key to\r\n// the hash table value). This idea is the basis of the 'datr' cookie within\r\n// Facebook.\r\nexport interface Session {\r\n  viewer: Viewer;\r\n  isAdmin?: boolean;\r\n  console?: ConsoleSession;\r\n  utmParameters?: { [key: string]: string | string[] | undefined };\r\n  ga?: GACookieType;\r\n}\r\n\r\ninterface ConsoleSession {\r\n  email_verified: boolean;\r\n}\r\n\r\nexport interface Auth0Token {\r\n  iss: string;\r\n  sub: string;\r\n  'https://console.cord.com/email': string;\r\n  'https://console.cord.com/email_verified': boolean;\r\n  auth0UserID: string;\r\n  aud: string | string[];\r\n}\r\n\r\nexport function createAnonymousSession() {\r\n  return {\r\n    viewer: Viewer.createAnonymousViewer(),\r\n  };\r\n}\r\n\r\nexport class Viewer {\r\n  private constructor(\r\n    public readonly userID: UUID | undefined,\r\n    public readonly orgID: UUID | undefined,\r\n    public readonly platformApplicationID?: UUID,\r\n    public readonly externalUserID?: string,\r\n    public readonly externalOrgID?: string,\r\n    public readonly developerUserID?: string,\r\n    public readonly originalOrgID?: UUID,\r\n    public readonly relevantOrgIDs?: UUID[],\r\n  ) {\r\n    if (orgID !== undefined && relevantOrgIDs !== undefined) {\r\n      // Note that a constructed Viewer can have both of these fields set at the\r\n      // same time -- we do that in the third case below for backwards-compat.\r\n      // But you can't specify the creation of a Viewer with both of these, to\r\n      // try to force new code to \"do the right thing\".\r\n      if (relevantOrgIDs.length !== 1 || relevantOrgIDs[0] !== orgID) {\r\n        throw new Error(\r\n          'You specified both a single orgID and relevantOrgIDs. ' +\r\n            'You should pass undefined for the orgID to catch places not using relevantOrgIDs. Be bold!',\r\n        );\r\n      }\r\n    } else if (orgID !== undefined) {\r\n      this.relevantOrgIDs = [orgID];\r\n    }\r\n  }\r\n\r\n  static async createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  }: {\r\n    user: UserEntity;\r\n    org: OrgEntity | null;\r\n  }): Promise<Viewer> {\r\n    if (!user.platformApplicationID) {\r\n      throw new Error('Platform viewer must have platformApplicationID');\r\n    }\r\n\r\n    const relevantOrgIDs = org\r\n      ? undefined\r\n      : // OrgMembersLoader.loadAllImmediateOrgIDsForUser but we can't call that since we\r\n        // don't have a viewer yet!\r\n        (\r\n          await OrgMembersEntity.findAll({\r\n            where: {\r\n              userID: user.id,\r\n            },\r\n          })\r\n        ).map((e) => e.orgID);\r\n\r\n    return new Viewer(\r\n      user.id,\r\n      org?.id,\r\n      user.platformApplicationID,\r\n      user.externalID,\r\n      org?.externalID,\r\n      undefined,\r\n      undefined,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  static createLoggedInViewer(userID: UUID, orgID: UUID): Viewer {\r\n    return new Viewer(userID, orgID);\r\n  }\r\n\r\n  static createOrgViewer(orgID: UUID, platformApplicationID?: UUID): Viewer {\r\n    return new Viewer(undefined, orgID, platformApplicationID);\r\n  }\r\n\r\n  static createServiceViewer() {\r\n    return new Viewer(SERVICE_USER_ID, undefined);\r\n  }\r\n\r\n  static createAnonymousViewer() {\r\n    return new Viewer(undefined, undefined);\r\n  }\r\n\r\n  static createConsoleViewer(devUserID: string): Viewer {\r\n    return new Viewer(\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      devUserID,\r\n    );\r\n  }\r\n\r\n  static createFromSerializedState(serializedViewer: Viewer): Viewer {\r\n    const {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n      ...rest\r\n    } = serializedViewer;\r\n    const _: Record<string, never> = rest;\r\n\r\n    return new Viewer(\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a version of this Viewer with the orgID set to the given org ID,\r\n   * used in situations where a user logged into one org wants to take an action\r\n   * as themselves in another org, such as sending a message from the unified\r\n   * inbox.  If the orgID given is the same as this Viewer's org ID, just\r\n   * returns this Viewer again.\r\n   */\r\n  public viewerInOtherOrg(\r\n    orgID: UUID | undefined,\r\n    externalOrgID: string | undefined,\r\n    relevantOrgIDs?: UUID[],\r\n  ): Viewer {\r\n    if (orgID === this.orgID && orgID !== undefined) {\r\n      return this;\r\n    }\r\n    if (orgID === undefined && relevantOrgIDs === undefined) {\r\n      throw new Error('viewerInOtherOrg provided with no orgs at all');\r\n    }\r\n    return new Viewer(\r\n      this.userID,\r\n      orgID,\r\n      this.platformApplicationID,\r\n      this.externalUserID,\r\n      externalOrgID,\r\n      this.developerUserID,\r\n      this.originalOrgID ?? this.orgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n}\r\n\r\nexport const assertViewerHasIdentity = (\r\n  viewer: Viewer,\r\n): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n} => {\r\n  if (!viewer.userID || !viewer.orgID) {\r\n    throw new Error('Viewer must not be anonymous.');\r\n  }\r\n\r\n  return {\r\n    userID: viewer.userID,\r\n    orgID: viewer.orgID,\r\n  };\r\n};\r\n\r\nexport function assertViewerHasPlatformIdentity(viewer: Viewer): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  externalUserID: string;\r\n  externalOrgID: string;\r\n  platformApplicationID: string;\r\n} {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n  if (\r\n    !viewer.externalUserID ||\r\n    !viewer.externalOrgID ||\r\n    !viewer.platformApplicationID\r\n  ) {\r\n    throw new Error('Viewer must be a platform viewer');\r\n  }\r\n\r\n  return {\r\n    userID,\r\n    orgID,\r\n    platformApplicationID: viewer.platformApplicationID,\r\n    externalUserID: viewer.externalUserID,\r\n    externalOrgID: viewer.externalOrgID,\r\n  };\r\n}\r\n\r\nexport function viewerHasIdentity(viewer: Viewer) {\r\n  return !!viewer.userID && !!viewer.orgID;\r\n}\r\n\r\nexport function assertViewerHasUser(viewer: Viewer): UUID {\r\n  const { userID } = viewer;\r\n\r\n  if (!userID) {\r\n    throw new Error('Viewer user must not be anonymous.');\r\n  }\r\n\r\n  return userID;\r\n}\r\n\r\nexport function assertViewerHasOrg(viewer: Viewer): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  if (!orgID) {\r\n    throw new Error('Viewer org must not be anonymous.');\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\n/**\r\n * Does basically the same thing as `assertViewerHasOrg`, except it throws a\r\n * client-facing error -- the idea being that you call this when it's *their*\r\n * error for not giving us a single org ID, instead of our internal logic error.\r\n * This also centralises all of the places we require a single org ID for\r\n * writes, so we can refactor/rethink/categorize/whatever them later.\r\n */\r\nexport function assertViewerHasSingleOrgForWrite(\r\n  viewer: Viewer,\r\n  error: string,\r\n): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  // Specifically check for viewer.orgID, and not\r\n  // viewer.relevantOrgIDs.length === 1, so that we error in the case\r\n  // where they didn't give us an org but the user happens to only be in\r\n  // one -- to prevent sudden explosions when that user is added to\r\n  // another org, require that they always explicitly specify.\r\n  if (!orgID) {\r\n    throw new ClientFacingError(error);\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\nexport function assertViewerHasOrgs(viewer: Viewer): UUID[] {\r\n  const { relevantOrgIDs } = viewer;\r\n\r\n  if (!relevantOrgIDs) {\r\n    throw new Error('Viewer orgs must be nonempty.');\r\n  }\r\n\r\n  return relevantOrgIDs;\r\n}\r\n\r\nexport function assertViewerHasPlatformUser(viewer: Viewer) {\r\n  const { userID, externalUserID, platformApplicationID } = viewer;\r\n\r\n  if (!userID || !externalUserID || !platformApplicationID) {\r\n    throw new Error('Viewer must have a platform user');\r\n  }\r\n\r\n  return { userID, externalUserID, platformApplicationID };\r\n}\r\n\r\nexport function assertViewerHasPlatformApplicationID(viewer: Viewer): UUID {\r\n  const { platformApplicationID } = viewer;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new Error('Viewer must have a platform app ID');\r\n  }\r\n\r\n  return platformApplicationID;\r\n}\r\n\r\nexport function assertServiceViewer(viewer: Viewer) {\r\n  if (viewer.userID !== SERVICE_USER_ID) {\r\n    throw new Error('Viewer must be service user.');\r\n  }\r\n}\r\n\r\nexport function assertConsoleUser(viewer: Viewer) {\r\n  if (!viewer.developerUserID) {\r\n    throw new Error('User must have an email');\r\n  }\r\n\r\n  return { email: viewer.developerUserID };\r\n}\r\n\r\nexport function viewerIsUsingOrgsAsFilter(viewer: Viewer) {\r\n  // Right now, platform viewers are in one of two states:\r\n  //   - everything is org-less, in which case relevantOrgIDs is filled out and\r\n  //     orgID is undefined\r\n  //   - we have an org, either via the token or an explicit `filter`, which\r\n  //     sets orgID and sets relevantOrgIDs to [orgID]\r\n  // This code looks for the second case. This is a bit of a hack -- it is going\r\n  // to break as soon as we allow multiple org IDs as a filter (which will have\r\n  // to stuff them into relevantOrgIDs), but at least there's one codepath to\r\n  // update when we build that, through here.\r\n  return viewer.orgID !== undefined;\r\n}\r\n", "import type { JsonObject } from 'common/types/index.ts';\r\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\r\n\r\n// Extending Error type solution taken from here:\r\n// https://stackoverflow.com/questions/41102060/typescript-extending-error-class\r\nexport class CordError extends Error {\r\n  constructor(\r\n    message?: string,\r\n    public loggingMetadata?: JsonObject,\r\n    public loggingTags?: LoggingTags,\r\n  ) {\r\n    // 'Error' breaks prototype chain here\r\n    super(message);\r\n\r\n    // restore prototype chain\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'org_members',\r\n  timestamps: false,\r\n})\r\nexport class OrgMembersEntity extends Model<\r\n  InferAttributes<OrgMembersEntity>,\r\n  InferCreationAttributes<OrgMembersEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class S3BucketLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, S3BucketEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const buckets = await S3BucketEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(buckets, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async load(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('S3Bucket dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadAll() {\r\n    return await S3BucketEntity.findAll();\r\n  }\r\n\r\n  async loadForApplication(\r\n    application: ApplicationEntity,\r\n  ): Promise<S3BucketEntity | null> {\r\n    if (application.customS3Bucket) {\r\n      return await this.load(application.customS3Bucket);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { S3BucketConfigWithCredentials } from 'server/src/files/upload.ts';\r\n\r\n@Table({\r\n  tableName: 's3_buckets',\r\n  timestamps: false,\r\n})\r\nexport class S3BucketEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  region!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  accessKeyID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  accessKeySecret!: string; // encrypted\r\n\r\n  public getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(): S3BucketConfigWithCredentials {\r\n    const [encrypted, authTag, iv] = this.accessKeySecret.split(':');\r\n\r\n    const decipher = crypto.createDecipheriv(\r\n      'aes-256-gcm',\r\n      env.PLATFORM_SECRETS_ENCRYPTION_KEY,\r\n      Buffer.from(iv, 'hex'),\r\n    );\r\n\r\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n    decrypted += decipher.final();\r\n\r\n    return {\r\n      bucket: this.name,\r\n      region: this.region,\r\n      accessKeyID: this.accessKeyID,\r\n      accessKeySecret: decrypted,\r\n    };\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\n\r\ninterface EntityWithID {\r\n  id: UUID;\r\n}\r\n\r\nfunction indexedMap<T>(entities: T[], f: (e: T) => string): Map<string, T> {\r\n  const m = new Map<string, T>();\r\n  entities.forEach((e) => m.set(f(e), e));\r\n  return m;\r\n}\r\n\r\nfunction indexedMapGrouped<T>(\r\n  entities: T[],\r\n  f: (e: T) => string,\r\n): Map<string, T[]> {\r\n  const m = new Map<string, T[]>();\r\n  entities.forEach((e) => {\r\n    const k = f(e);\r\n    let values = m.get(k);\r\n    if (values === undefined) {\r\n      values = [];\r\n      m.set(k, values);\r\n    }\r\n    values.push(e);\r\n  });\r\n  return m;\r\n}\r\n\r\nexport function inKeyOrder<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): (T | null)[] {\r\n  return inKeyOrderCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nfunction inKeyOrderCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): (T | null)[] {\r\n  const m = indexedMap(entities, f);\r\n  return keys.map((k) => m.get(k) ?? null);\r\n}\r\n\r\nexport function inKeyOrderOrNull<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): (T | null)[] {\r\n  return inKeyOrderOrNullCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nexport function inKeyOrderOrNullCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): (T | null)[] {\r\n  const m = indexedMap(entities, f);\r\n  return keys.map((k) => m.get(k) ?? null);\r\n}\r\n\r\nexport function inKeyOrderGrouped<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): T[][] {\r\n  return inKeyOrderGroupedCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nexport function inKeyOrderGroupedCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): T[][] {\r\n  const m = indexedMapGrouped(entities, f);\r\n  return keys.map((k) => m.get(k) ?? []);\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\ntype FileProxyTokenPayload = {\r\n  id: UUID;\r\n};\r\n\r\nexport function encodeFileProxyToken(payload: FileProxyTokenPayload): string {\r\n  const data = JSON.stringify({\r\n    ...payload,\r\n    time: Date.now(),\r\n  });\r\n\r\n  const iv = crypto.randomBytes(12);\r\n  const cipher = crypto.createCipheriv(\r\n    'aes-256-gcm',\r\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\r\n    iv,\r\n  );\r\n  const encrypted = Buffer.concat([\r\n    cipher.update(data, 'utf8'),\r\n    cipher.final(),\r\n  ]);\r\n  const authTag = cipher.getAuthTag();\r\n\r\n  return [\r\n    'v1',\r\n    encrypted.toString('hex'),\r\n    authTag.toString('hex'),\r\n    iv.toString('hex'),\r\n  ].join(':');\r\n}\r\n\r\nexport function decodeFileProxyToken(token: string) {\r\n  const [_version, encrypted, authTag, iv] = token.split(':');\r\n\r\n  const decipher = crypto.createDecipheriv(\r\n    'aes-256-gcm',\r\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\r\n\r\n    Buffer.from(iv, 'hex'),\r\n  );\r\n\r\n  decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n  decrypted += decipher.final();\r\n\r\n  return JSON.parse(decrypted) as FileProxyTokenPayload;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  Location,\r\n  HighlightedTextConfig,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { DocumentLocationInput } from 'server/src/schema/resolverTypes.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\n\r\nexport type MessageAttachmentData =\r\n  | MessageFileAttachmentData\r\n  | MessageAnnotationAttachmentData\r\n  | MessageScreenshotAttachmentData;\r\n\r\nexport interface MessageFileAttachmentData {\r\n  fileID: UUID;\r\n}\r\n\r\nexport interface MessageScreenshotAttachmentData {\r\n  screenshotFileID: UUID | null | undefined;\r\n  blurredScreenshotFileID: UUID | null | undefined;\r\n}\r\n\r\nexport interface MessageAnnotationAttachmentData {\r\n  screenshotFileID: UUID | null | undefined;\r\n  blurredScreenshotFileID?: UUID | null;\r\n  location: DocumentLocationInput | null | undefined;\r\n  customLocation?: Location | null | undefined;\r\n  customHighlightedTextConfig?: HighlightedTextConfig | null | undefined;\r\n  customLabel?: string | null | undefined;\r\n  coordsRelativeToTarget?: { x: number; y: number } | null | undefined;\r\n}\r\n\r\n@Table({\r\n  tableName: 'message_attachments',\r\n  timestamps: false,\r\n})\r\nexport class MessageAttachmentEntity extends Model<\r\n  InferAttributes<MessageAttachmentEntity>,\r\n  InferCreationAttributes<MessageAttachmentEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  type!: MessageAttachmentType;\r\n\r\n  @Column({\r\n    defaultValue: {},\r\n    type: DataTypes.JSONB,\r\n  })\r\n  data!: MessageAttachmentData;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  getFileIDs(): UUID[] {\r\n    switch (this.type) {\r\n      case MessageAttachmentType.FILE:\r\n        return [(this.data as MessageFileAttachmentData).fileID];\r\n      case MessageAttachmentType.ANNOTATION: {\r\n        const data = this.data as MessageAnnotationAttachmentData;\r\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\r\n          isDefined,\r\n        );\r\n      }\r\n      case MessageAttachmentType.SCREENSHOT: {\r\n        const data = this.data as MessageScreenshotAttachmentData;\r\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\r\n          isDefined,\r\n        );\r\n      }\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n// NB: this seems to be something closer to bytes, not unicode characters, and\r\n// many emoji are multiple bytes (some up to like 10+).\r\nexport const REACTION_MAX_LENGTH = 127;\r\n\r\n@Table({\r\n  tableName: 'message_reactions',\r\n  timestamps: false,\r\n})\r\nexport class MessageReactionEntity extends Model<\r\n  InferAttributes<MessageReactionEntity>,\r\n  InferCreationAttributes<MessageReactionEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    validate: {\r\n      len: [1, REACTION_MAX_LENGTH],\r\n    },\r\n  })\r\n  unicodeReaction!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_mentions',\r\n  timestamps: false,\r\n})\r\nexport class MessageMentionEntity extends Model<\r\n  InferAttributes<MessageMentionEntity>,\r\n  InferCreationAttributes<MessageMentionEntity>\r\n> {\r\n  // before deleting or changing this column, please check the codebase for raw\r\n  // SQL statements using it. For example, see\r\n  // https://radical.phacility.com/D1158\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID; // the user that is being mentioned\r\n\r\n  // before deleting or changing this column, please check the codebase for raw\r\n  // SQL statements using it. For example, see\r\n  // https://radical.phacility.com/D1158\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_channels',\r\n  timestamps: false,\r\n})\r\nexport class SlackChannelEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  added!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  archived!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.NUMBER,\r\n    allowNull: false,\r\n  })\r\n  users!: number;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_messages',\r\n  timestamps: false,\r\n})\r\nexport class SlackMessageEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sharerOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sharerUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { PreferencesValueType, UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'user_preferences',\r\n  timestamps: false,\r\n})\r\nexport class UserPreferenceEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  key!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  value!: PreferencesValueType;\r\n}\r\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'tasks',\r\n  timestamps: false,\r\n})\r\nexport class TaskEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  done!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  doneStatusLastUpdatedBy!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'task_todos',\r\n  timestamps: false,\r\n})\r\nexport class TaskTodoEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  taskID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  done!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'task_assignees',\r\n  timestamps: false,\r\n})\r\nexport class TaskAssigneeEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  taskID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID; // the user that is being assigned\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  assignerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type JiraAuthData = {\r\n  cloudID: string;\r\n  refreshToken: string;\r\n};\r\n\r\nexport type AsanaAuthData = {\r\n  workspace: string;\r\n  refreshToken: string;\r\n};\r\n\r\nexport type LinearAuthData = {\r\n  // An access token is used instead of a refresh token because\r\n  // Linear provides access tokens that last 10 years instead of\r\n  // using refresh tokens.\r\n  // A user can have a max of 10 tokens per application and scope\r\n  // configuration. If the 11th token is requested then the oldest\r\n  // token is automatically revoked.\r\n  accessToken: string;\r\n};\r\n\r\nexport type TrelloAuthData = {\r\n  // An access token is given by trello which never expires\r\n  accessToken: string;\r\n  accessTokenSecret: string;\r\n};\r\n\r\nexport type MondayAuthData = {\r\n  // Monday supplies access tokens that don't expire\r\n  accessToken: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'third_party_connections',\r\n  timestamps: false,\r\n})\r\nexport class ThirdPartyConnectionEntity extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  userID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  orgID!: UUID;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\r\n  type!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalID!: string;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalEmail!: string;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  externalAuthData!:\r\n    | JiraAuthData\r\n    | AsanaAuthData\r\n    | LinearAuthData\r\n    | TrelloAuthData\r\n    | MondayAuthData\r\n    | null;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  connectedTimestamp!: Date;\r\n}\r\n", "import { DataTypes, Sequelize } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { assertUUID } from 'common/util/index.ts';\r\n\r\n// TODO: shouldn't this somehow reference the third_party_connection ENUM type we created in postgres?\r\nexport const ThirdPartyConnectionDataType = DataTypes.ENUM(\r\n  'asana',\r\n  'jira',\r\n  'linear',\r\n);\r\n\r\nexport const MAX_IDS_PER_QUERY = 1000;\r\n\r\nexport type UserOrgID = {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n};\r\n\r\nexport function keyFor(userOrgID: UserOrgID): string {\r\n  return `${userOrgID.userID}/${userOrgID.orgID}`;\r\n}\r\n\r\nexport type PlatformID = {\r\n  platformApplicationID: UUID;\r\n  externalID: string;\r\n};\r\n\r\nexport function keyForPlatformID(platformID: PlatformID): string {\r\n  return `${platformID.platformApplicationID}/${platformID.externalID}`;\r\n}\r\n\r\n// there doesn't seem to be any sequelize-specific way to construct such a subquery\r\n// https://github.com/sequelize/sequelize/issues/2325\r\n// so I'm doing the best I can to not hardcode table and column names in here and to\r\n// ensure we're safe from SQL injection\r\nexport const timestampSubquery = (id: UUID) =>\r\n  Sequelize.literal(\r\n    `(\r\n      SELECT \"timestamp\"\r\n      FROM \"${MessageEntity.tableName}\"\r\n      WHERE \"id\" = '${assertUUID(id)}'\r\n    )`,\r\n  );\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Op } from 'sequelize';\r\nimport type { UUID, TaskPreviewData } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\n@Table({\r\n  tableName: 'task_third_party_references',\r\n  timestamps: false,\r\n})\r\nexport class TaskThirdPartyReference extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  taskID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  taskTodoID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, primaryKey: true })\r\n  externalID!: string;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\r\n  externalConnectionType!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalLocationID!: string | null;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  previewData!: TaskPreviewData | null;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN })\r\n  imported!: boolean;\r\n\r\n  static async findForTask(\r\n    taskID: UUID,\r\n    externalConnectionType: ThirdPartyConnectionType,\r\n  ): Promise<TaskThirdPartyReference | null> {\r\n    return await TaskThirdPartyReference.findOne({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: null,\r\n        externalConnectionType,\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findAllForTask(taskID: UUID) {\r\n    return await TaskThirdPartyReference.findAll({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: { [Op.is]: null },\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findAllForTaskTodos(taskID: UUID, taskTodoIDs: UUID[]) {\r\n    return await TaskThirdPartyReference.findAll({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: taskTodoIDs,\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findTaskWithExternalID(\r\n    externalID: string,\r\n    externalConnectionType: ThirdPartyConnectionType,\r\n  ) {\r\n    return await TaskThirdPartyReference.findOne({\r\n      where: {\r\n        externalID,\r\n        externalConnectionType,\r\n        taskTodoID: { [Op.is]: null },\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID, Location, PageContext } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'pages',\r\n  timestamps: false,\r\n})\r\nexport class PageEntity extends Model<\r\n  InferAttributes<PageEntity, { omit: 'pageContext' }>,\r\n  InferCreationAttributes<PageEntity, { omit: 'pageContext' }>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    unique: 'orgID-providerID-contextHash-unique',\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    unique: 'orgID-providerID-contextHash-unique',\r\n  })\r\n  contextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n  })\r\n  contextData!: Location;\r\n\r\n  get pageContext(): PageContext {\r\n    return {\r\n      data: this.contextData,\r\n      providerID: null,\r\n    };\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\n\r\nimport type {\r\n  EntityMetadata,\r\n  ThreadSupportStatusType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\n\r\n@Table({\r\n  tableName: 'threads',\r\n  timestamps: false,\r\n})\r\nexport class ThreadEntity extends Model<\r\n  InferAttributes<ThreadEntity>,\r\n  InferCreationAttributes<ThreadEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  resolvedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  resolverUserID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('open', 'closed'),\r\n    defaultValue: null,\r\n  })\r\n  supportStatus!: ThreadSupportStatusType | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  externalID!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  extraClassnames!: string | null;\r\n\r\n  public async belongsToViewerOrgs(viewer: Viewer): Promise<boolean> {\r\n    const { orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    if (this.orgID === orgID) {\r\n      return true;\r\n    }\r\n\r\n    // In some cases (e.g. unified inbox) we may be looking for a thread from an\r\n    // org the user is a member of, but not currently logged in as\r\n    const orgMembersLoader = new OrgMembersLoader(viewer);\r\n\r\n    return await orgMembersLoader.viewerCanAccessOrg(this.orgID);\r\n  }\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasPlatformApplicationID,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UserOrgID } from 'server/src/entity/common.ts';\r\nimport { MAX_IDS_PER_QUERY, keyFor } from 'server/src/entity/common.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\n\r\nexport class OrgMembersLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UserOrgID, OrgMembersEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => await this.loadBatch(keys),\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  private async loadBatch(\r\n    keys: readonly UserOrgID[],\r\n    transaction?: Transaction,\r\n  ): Promise<(OrgMembersEntity | null)[]> {\r\n    // By far the most common calling pattern is loading a bunch of memberships\r\n    // either all for the same org or all for the same user, in which case we\r\n    // can turn this into a set of efficient queries that do an equality check\r\n    // on the common one and an IN filter on the other.  If we end up with a\r\n    // calling pattern that tries to load a scattershot set of memberships\r\n    // across lots of different users and orgs (why?) we should improve this.\r\n    const usersByOrg = new Map<UUID, Set<UUID>>();\r\n    const orgsByUser = new Map<UUID, Set<UUID>>();\r\n    for (const key of keys) {\r\n      if (!usersByOrg.has(key.orgID)) {\r\n        usersByOrg.set(key.orgID, new Set());\r\n      }\r\n      usersByOrg.get(key.orgID)!.add(key.userID);\r\n      if (!orgsByUser.has(key.userID)) {\r\n        orgsByUser.set(key.userID, new Set());\r\n      }\r\n      orgsByUser.get(key.userID)!.add(key.orgID);\r\n    }\r\n\r\n    const promises = [];\r\n    if (usersByOrg.size < orgsByUser.size) {\r\n      // We have fewer orgs than users, so query by org.\r\n      for (const [orgID, userIDSet] of usersByOrg) {\r\n        const userIDs = [...userIDSet];\r\n\r\n        for (\r\n          let offset = 0;\r\n          offset < userIDs.length;\r\n          offset += MAX_IDS_PER_QUERY\r\n        ) {\r\n          promises.push(\r\n            OrgMembersEntity.findAll({\r\n              where: {\r\n                orgID,\r\n                userID: userIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\r\n              },\r\n              transaction,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      // We have fewer users than orgs, so query by user.\r\n      for (const [userID, orgIDSet] of orgsByUser) {\r\n        const orgIDs = [...orgIDSet];\r\n\r\n        for (\r\n          let offset = 0;\r\n          offset < orgIDs.length;\r\n          offset += MAX_IDS_PER_QUERY\r\n        ) {\r\n          promises.push(\r\n            OrgMembersEntity.findAll({\r\n              where: {\r\n                userID,\r\n                orgID: orgIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\r\n              },\r\n              transaction,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n    }\r\n    const orgMembers = (await Promise.all(promises)).flat();\r\n    const index = new Map<string, OrgMembersEntity>();\r\n    for (const orgMember of orgMembers) {\r\n      index.set(\r\n        keyFor({ userID: orgMember.userID, orgID: orgMember.orgID }),\r\n        orgMember,\r\n      );\r\n    }\r\n    return keys.map((userOrgId) => index.get(keyFor(userOrgId)) ?? null);\r\n  }\r\n\r\n  async loadUserOrgMembership(\r\n    userID: UUID,\r\n    orgID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    try {\r\n      const key = { userID, orgID };\r\n      if (transaction) {\r\n        return (await this.loadBatch([key], transaction))[0];\r\n      } else {\r\n        return await this.dataloader.load(key);\r\n      }\r\n    } catch (e) {\r\n      anonymousLogger().logException('Org members dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async viewerCanAccessOrg(\r\n    orgID: UUID,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    if ((this.viewer.relevantOrgIDs ?? []).includes(orgID)) {\r\n      return true;\r\n    }\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const membership = await this.loadUserOrgMembership(\r\n      userID,\r\n      orgID,\r\n      transaction,\r\n    );\r\n    return !!membership;\r\n  }\r\n\r\n  async viewerCanAccessOrgExternalID(externalOrgID: string): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    const orgLoader = new OrgLoader(this.viewer);\r\n    const org = await orgLoader.loadPlatformOrg(\r\n      platformApplicationID,\r\n      externalOrgID,\r\n    );\r\n\r\n    if (!org) {\r\n      return false;\r\n    }\r\n    const membership = await this.loadUserOrgMembership(userID, org.id);\r\n    return !!membership;\r\n  }\r\n\r\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\r\n  async loadAllImmediateOrgIDsForUser() {\r\n    const entities = await OrgMembersEntity.findAll({\r\n      where: {\r\n        userID: this.viewer.userID,\r\n      },\r\n      raw: true,\r\n    });\r\n\r\n    return entities.map((e) => e.orgID);\r\n  }\r\n\r\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\r\n  async loadAllImmediateOrgsForUser() {\r\n    const orgIds = await this.loadAllImmediateOrgIDsForUser();\r\n\r\n    return await OrgEntity.findAll({\r\n      where: {\r\n        id: orgIds,\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadAllOrgIDsForUser() {\r\n    const platformOrgIDs = await this.loadAllImmediateOrgIDsForUser();\r\n\r\n    const slackOrgs = await LinkedOrgsEntity.findAll({\r\n      where: {\r\n        sourceOrgID: platformOrgIDs,\r\n      },\r\n    });\r\n\r\n    const slackOrgsIDs = slackOrgs.map((e) => e.linkedOrgID);\r\n\r\n    return [...platformOrgIDs, ...slackOrgsIDs];\r\n  }\r\n\r\n  // Use this function if you want to load orgMembership for a user that might\r\n  // not exist in a specified platform org but might exist in the Slack org linked\r\n  // to that specified platform org.\r\n  async loadForSpecifiedPlatformOrgOrLinkedSlackOrg(\r\n    context: RequestContext,\r\n    userID: UUID,\r\n    orgID: UUID,\r\n  ) {\r\n    const orgMembership = await this.loadUserOrgMembership(userID, orgID);\r\n    if (orgMembership) {\r\n      return orgMembership;\r\n    }\r\n\r\n    const linkedOrgID =\r\n      await context.loaders.linkedOrgsLoader.getConnectedSlackOrgID(orgID);\r\n    if (!linkedOrgID) {\r\n      return null;\r\n    }\r\n    return await this.loadUserOrgMembership(userID, linkedOrgID);\r\n  }\r\n\r\n  async loadNotifiableOrgMembers(limit: number | undefined) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    // find all non-deleted orgMembers of type \"person\"\r\n    return await OrgMembersEntity.findAll({\r\n      where: {\r\n        orgID,\r\n      },\r\n      include: [\r\n        {\r\n          model: UserEntity,\r\n          required: true,\r\n          where: { userType: 'person' },\r\n          // dont bother fetching UserEntity attributes\r\n          attributes: [],\r\n        },\r\n      ],\r\n      limit,\r\n    });\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\n\r\nimport DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { PlatformID } from 'server/src/entity/common.ts';\r\nimport {\r\n  MAX_IDS_PER_QUERY,\r\n  keyForPlatformID,\r\n} from 'server/src/entity/common.ts';\r\nimport { inKeyOrderOrNull } from 'server/src/entity/base/util.ts';\r\nimport { CORD_SLACK_APP_IDS } from 'common/const/Ids.ts';\r\n\r\nexport class OrgLoader {\r\n  viewer: Viewer;\r\n  platformOrgDataloader: DataLoader<PlatformID, OrgEntity | null, string>;\r\n  orgByIdDataloader: DataLoader<UUID, OrgEntity | null>;\r\n\r\n  constructor(viewer: Viewer, cache = false) {\r\n    this.viewer = viewer;\r\n    this.platformOrgDataloader = new DataLoader(\r\n      async (keys) => {\r\n        // By far the most common calling pattern is loading a bunch of orgs all\r\n        // from the same application, in which case we can turn this into a set of\r\n        // efficient queries (ideally one) that do an equality check on\r\n        // platformApplicationID and an IN filter on externalID.\r\n        const orgsByApplication = new Map<UUID, Set<string>>();\r\n        for (const key of keys) {\r\n          if (!orgsByApplication.has(key.platformApplicationID)) {\r\n            orgsByApplication.set(key.platformApplicationID, new Set());\r\n          }\r\n          orgsByApplication.get(key.platformApplicationID)!.add(key.externalID);\r\n        }\r\n        const promises = [];\r\n        for (const [platformApplicationID, orgIDSet] of orgsByApplication) {\r\n          const externalOrgIDs = [...orgIDSet];\r\n\r\n          for (\r\n            let offset = 0;\r\n            offset < externalOrgIDs.length;\r\n            offset += MAX_IDS_PER_QUERY\r\n          ) {\r\n            promises.push(\r\n              OrgEntity.findAll({\r\n                where: {\r\n                  externalProvider: AuthProviderType.PLATFORM,\r\n                  platformApplicationID,\r\n                  externalID: externalOrgIDs.slice(\r\n                    offset,\r\n                    offset + MAX_IDS_PER_QUERY,\r\n                  ),\r\n                },\r\n              }),\r\n            );\r\n          }\r\n        }\r\n        const orgs = (await Promise.all(promises)).flat();\r\n        const index = new Map<string, OrgEntity>();\r\n        for (const org of orgs) {\r\n          index.set(\r\n            keyForPlatformID({\r\n              platformApplicationID: org.platformApplicationID!,\r\n              externalID: org.externalID,\r\n            }),\r\n            org,\r\n          );\r\n        }\r\n        return keys.map(\r\n          (platformId) => index.get(keyForPlatformID(platformId)) ?? null,\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n    this.orgByIdDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const orgs = await OrgEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n        return inKeyOrderOrNull(orgs, keys);\r\n      },\r\n      { cache },\r\n    );\r\n  }\r\n\r\n  async loadOrg(id: UUID) {\r\n    return await this.orgByIdDataloader.load(id);\r\n  }\r\n\r\n  async loadSlackOrg(slackTeamID: string, slackAppID: string) {\r\n    // customSlackAppID column is null for our Cord apps.  This was to avoid\r\n    // doing a bigger migration when we introduced the ability to add external\r\n    // Slack apps\r\n    const customSlackAppID = CORD_SLACK_APP_IDS.includes(slackAppID)\r\n      ? null\r\n      : slackAppID;\r\n\r\n    return await OrgEntity.findOne({\r\n      where: {\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalID: slackTeamID,\r\n        customSlackAppID,\r\n        // Technically redundant, but allows postgres to use an index.\r\n        platformApplicationID: null,\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadPlatformOrg(platformApplicationID: string, externalOrgID: string) {\r\n    return await this.platformOrgDataloader.load({\r\n      platformApplicationID,\r\n      externalID: externalOrgID,\r\n    });\r\n  }\r\n\r\n  async loadByDomain(externalProvider: string, domain: string) {\r\n    return await OrgEntity.findOne({\r\n      where: { externalProvider, domain },\r\n    });\r\n  }\r\n\r\n  async loadAllActiveSlackOrgs() {\r\n    return await OrgEntity.findAll({\r\n      where: {\r\n        state: 'active',\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalAuthData: { [Op.ne]: null },\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'thread_participants',\r\n  timestamps: false,\r\n})\r\nexport class ThreadParticipantEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  // The timestamp of the last seen message, or NULL if no messages have been\r\n  // seen\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastSeenTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUnseenMessageTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUnseenReactionTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n  })\r\n  subscribed!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'page_visitors',\r\n  timestamps: false,\r\n})\r\nexport class PageVisitorEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastPresentTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'sessions',\r\n  timestamps: false,\r\n})\r\nexport class SessionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  applicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  issuedAt!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  expiresAt!: Date;\r\n}\r\n", "import { performance } from 'perf_hooks';\r\nimport { AsyncLocalStorage } from 'async_hooks';\r\nimport * as Sentry from '@sentry/node';\r\nimport type { Transaction } from '@sentry/types';\r\nimport type WebSocket from 'ws';\r\nimport { v4 as uuid } from 'uuid';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  TimeHistogram,\r\n  Gauge,\r\n  Counter,\r\n  incCounterWithAppID,\r\n} from 'server/src/logging/prometheus.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { isEmployee } from 'common/util/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\ntype AsyncLocalStorageType = {\r\n  operationName: string;\r\n  operationID: UUID;\r\n  platformApplicationID: UUID | undefined;\r\n  logger: Logger;\r\n};\r\n\r\n// Using AsyncLocalStorage is not free. We previously had it enabled only in\r\n// staging, but it's so darn useful we took the hit and enabled everywhere.\r\n// However, to try to make sure we don't completely depend on it and can still\r\n// turn it off again if need be, explicitly type this variable as being\r\n// potentially null (even though in practise it never is) so that callers have\r\n// to at least deal with it being missing at a TS level.\r\nexport const asyncLocalStorage: AsyncLocalStorage<AsyncLocalStorageType> | null =\r\n  new AsyncLocalStorage<AsyncLocalStorageType>();\r\n\r\nconst DO_NOT_LOG_OPERATIONS = ['PingQuery'];\r\n\r\ntype WebSocketWithDetails = WebSocket & {\r\n  cordOnCloseWebSocket?: () => void;\r\n  // Properties we add to the websocket so we can identify them in heap dumps\r\n  cordDebugInfo?: {\r\n    userID: UUID | undefined;\r\n    orgID: UUID | undefined;\r\n    socketID: UUID;\r\n    connectionID: UUID;\r\n    connectionStart: string;\r\n    connectionEnd?: string;\r\n  };\r\n};\r\n\r\n// In any case, production or not, we keep track of the GraphQL operation\r\n// execution times in this Prometheus metric:\r\nconst graphQlMetric = TimeHistogram({\r\n  name: `GraphQlExecTime`,\r\n  help: `Execution time of GraphQL operations in seconds`,\r\n  labelNames: ['operation'],\r\n});\r\n\r\n// Separate from the above histogram so we don't explode operation*appID*bucket.\r\nconst graphQLCounter = Counter({\r\n  name: 'GraphQlExecCount',\r\n  help: 'Total number of GraphQL operations executed',\r\n  labelNames: ['operation', 'appID'],\r\n});\r\n\r\nconst openWebsocketMetric = Gauge({\r\n  name: 'OpenWebsockets',\r\n  help: 'Number of open websocket connections',\r\n  labelNames: ['appID', 'clientVersion', 'endpoint', 'deployment'],\r\n});\r\n\r\nexport function websocketConnected(\r\n  socket: WebSocketWithDetails,\r\n  context: RequestContext,\r\n  endpoint: 'public' | 'admin',\r\n) {\r\n  const socketID = uuid();\r\n  const {\r\n    session: {\r\n      viewer: { userID, orgID, platformApplicationID: appID },\r\n    },\r\n    clientVersion,\r\n  } = context;\r\n\r\n  const openWebsocketMetricLabels = {\r\n    appID: appID || 'null',\r\n    clientVersion: clientVersion || 'null',\r\n    endpoint,\r\n    deployment: context.deployment ?? 'null',\r\n  };\r\n  const loggingInfo = { socketID, userID, orgID, appID, clientVersion };\r\n\r\n  openWebsocketMetric.inc(openWebsocketMetricLabels, 1);\r\n  context.logger.debug('performance', {\r\n    event: 'websocketConnected',\r\n    ...loggingInfo,\r\n  });\r\n\r\n  socket.cordOnCloseWebSocket = () => {\r\n    openWebsocketMetric.dec(openWebsocketMetricLabels, 1);\r\n    context.logger.debug('performance', {\r\n      event: 'websocketDisconnected',\r\n      ...loggingInfo,\r\n    });\r\n    if (socket.cordDebugInfo) {\r\n      socket.cordDebugInfo.connectionEnd = new Date().toUTCString();\r\n    }\r\n  };\r\n  socket.cordDebugInfo = {\r\n    userID,\r\n    orgID,\r\n    socketID,\r\n    connectionID: context.connectionID,\r\n    connectionStart: new Date().toUTCString(),\r\n  };\r\n}\r\n\r\nexport function websocketDisconnected(socket: WebSocketWithDetails) {\r\n  const { cordOnCloseWebSocket } = socket;\r\n  if (cordOnCloseWebSocket) {\r\n    delete socket.cordOnCloseWebSocket;\r\n    cordOnCloseWebSocket();\r\n  }\r\n}\r\n\r\n/**\r\n * Sorry about the \"any\" -- this is usable at two different types, the type of\r\n * the main \"execute\" and the type of the subscription \"customExecute\", which\r\n * pass arguments slightly differently. The code to adapt the differences is not\r\n * difficult, but convincing TS that it's correct is. If you want to try to fix\r\n * it, you probably have better ways to spend your time.\r\n */\r\nexport function graphQLExecutePerformanceWrapper(\r\n  previousExecuteFunction: any,\r\n): any {\r\n  const execute = (...args: any[]) => {\r\n    let operationFinished = () => {};\r\n\r\n    // Deal with the two different input types, for the main execute (passes\r\n    // multiple args) and the subscription execute (passes one object arg).\r\n    const context: RequestContext =\r\n      args.length > 1 ? args[3] : args[0].contextValue;\r\n    const variableValues = args.length > 1 ? args[4] : args[0].variableValues;\r\n    const operationName = args.length > 1 ? args[5] : args[0].operationName;\r\n\r\n    if (operationName && !DO_NOT_LOG_OPERATIONS.includes(operationName)) {\r\n      const { userID, orgID } = context.session.viewer;\r\n\r\n      // Have a random uuid just so we can unambiguously relate the log\r\n      // lines we send at the beginning and the end of this operation\r\n      const operationUUID =\r\n        asyncLocalStorage?.getStore()?.operationID ?? uuid();\r\n\r\n      // Before we execute the GraphQL operation: take the current time\r\n      // (`startTime`) and write a log line about the operation about to start\r\n      const startTime = performance.now();\r\n      context.logger.debug(`performance`, {\r\n        event: 'graphQlExecuteStart',\r\n        userID,\r\n        orgID,\r\n        operation: operationName,\r\n        operationUUID,\r\n      });\r\n\r\n      incCounterWithAppID(context.session.viewer, graphQLCounter, {\r\n        operation: operationName,\r\n      });\r\n\r\n      let sentryTransaction: Transaction | undefined;\r\n      if (isEmployee(orgID)) {\r\n        sentryTransaction = Sentry.startTransaction({\r\n          op: 'graphql',\r\n          name: operationName,\r\n          data: variableValues,\r\n        });\r\n      }\r\n\r\n      // This is going to get executed when the GraphQL operation has finished:\r\n      // we write another log line, register the execution time in the\r\n      // Prometheus metric, and write a row to the database (if enabled)\r\n      operationFinished = () => {\r\n        const durationMS = performance.now() - startTime;\r\n\r\n        // log to winston\r\n        context.logger.debug(`performance`, {\r\n          event: 'graphQlExecuteEnd',\r\n          userID: userID,\r\n          orgID: orgID,\r\n          operation: operationName,\r\n          operationUUID,\r\n          durationMS,\r\n        });\r\n\r\n        // update prometheus metric (prometheus values are in seconds)\r\n        graphQlMetric.observe({ operation: operationName }, durationMS / 1000);\r\n\r\n        if (sentryTransaction) {\r\n          Sentry.withScope((scope) => {\r\n            scope.setUser(userID ? { id: userID } : null);\r\n            sentryTransaction?.finish();\r\n          });\r\n        }\r\n      };\r\n    }\r\n\r\n    // An `ExecuteFunction` can return either a plain `ExecutionResult` or a `Promise<ExecutionResult>`, or\r\n    // `AsyncIterator<ExecutionResult>`.\r\n    const result = previousExecuteFunction(...args);\r\n\r\n    if ('next' in result) {\r\n      // The presence of a `next` field means that `result` is of type\r\n      // `AsyncIterator<ExecutionResult>`\r\n      return asyncIteratorFinally(result, operationFinished);\r\n    } else {\r\n      // `result` is a `ExecutionResult` or `Promise<ExecutionResult>`. Either\r\n      // way, we return it in the form of a `Promise<ExecutionResult>`.\r\n      return Promise.resolve(result).finally(operationFinished);\r\n    }\r\n  };\r\n\r\n  if (asyncLocalStorage) {\r\n    return (...args: any[]) => {\r\n      const context: RequestContext =\r\n        args.length > 1 ? args[3] : args[0].contextValue;\r\n      const operationName = args.length > 1 ? args[5] : args[0].operationName;\r\n      return asyncLocalStorage.run(\r\n        {\r\n          operationName,\r\n          operationID: uuid(),\r\n          platformApplicationID: context.session.viewer.platformApplicationID,\r\n          logger: context.logger,\r\n        },\r\n        execute,\r\n        ...args,\r\n      );\r\n    };\r\n  } else {\r\n    return execute;\r\n  }\r\n}\r\n\r\nfunction asyncIteratorFinally<T, TReturn, TNext>(\r\n  aiter: AsyncIterator<T, TReturn, TNext>,\r\n  finallyFunc: () => void,\r\n): AsyncIterator<T, TReturn, TNext> {\r\n  let finallyFuncHasBeenCalled = false;\r\n\r\n  return {\r\n    async next(...args) {\r\n      const item = await aiter.next(...args);\r\n      if (item.done) {\r\n        if (!finallyFuncHasBeenCalled) {\r\n          finallyFuncHasBeenCalled = true;\r\n          finallyFunc();\r\n        }\r\n      }\r\n      return item;\r\n    },\r\n  };\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { Tier } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'heimdall',\r\n  timestamps: false,\r\n})\r\nexport class HeimdallEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  tier!: Tier;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  key!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n  })\r\n  value!: boolean; // boolean is the only value supported for now.\r\n\r\n  isOn(): boolean {\r\n    return this.value;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'email_subscription',\r\n  timestamps: false,\r\n})\r\nexport class EmailSubscriptionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n    defaultValue: false,\r\n  })\r\n  subscribed!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'linked_users',\r\n  timestamps: false,\r\n})\r\nexport class LinkedUsersEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  linkedUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  linkedOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  linkedTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_mirrored_threads',\r\n  timestamps: false,\r\n})\r\nexport class SlackMirroredThreadEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model, DataType } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport type {\r\n  Location,\r\n  OutboundNotificationMetadata,\r\n  OutboundNotificationType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_notifications',\r\n  timestamps: false,\r\n})\r\nexport class MessageOutboundNotificationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  id!: string; // using a nano ID rather than a UUID\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'slack',\r\n      'email',\r\n      'slackEmailMatched',\r\n      'sharedToSlackChannel',\r\n      'sharedToEmail',\r\n    ),\r\n  })\r\n  type!: OutboundNotificationType;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  targetUserID!: UUID | null;\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  targetOrgID!: UUID;\r\n  @Column({\r\n    type: DataType.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  timestamp!: Date;\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: OutboundNotificationMetadata;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  sharerUserID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  sharerOrgID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  location!: Location | null;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'console_users',\r\n  timestamps: false,\r\n})\r\nexport class ConsoleUserEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.STRING, unique: true })\r\n  email!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n  })\r\n  name: string | null | undefined;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: true })\r\n  picture: string | null | undefined;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customerID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  verified!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n  })\r\n  auth0UserID: string | null | undefined;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  pendingCustomerID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  loopsUserID!: string | null;\r\n\r\n  get idForLogging(): string {\r\n    const authSource = this.auth0UserID?.includes('|')\r\n      ? this.auth0UserID.substring(0, this.auth0UserID.indexOf('|'))\r\n      : 'unknown';\r\n    return `${this.email} [${authSource}]`;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'user_hidden_annotations',\r\n  timestamps: false,\r\n})\r\nexport class UserHiddenAnnotationsEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  annotationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\n@Table({\r\n  tableName: 'external_assets',\r\n  timestamps: false,\r\n})\r\nexport class ExternalAssetEntity extends Model {\r\n  /**\r\n   * url from where the asset was downloaded\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  /**\r\n   * time when download happened\r\n   */\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n  })\r\n  downloadTimestamp!: Date;\r\n\r\n  /**\r\n   * sha384 hash of the downloaded contents\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  sha384!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\n@Table({\r\n  tableName: 'image_variants',\r\n  timestamps: false,\r\n})\r\nexport class ImageVariantEntity extends Model {\r\n  /**\r\n   * sha384 hash of the image this variant is based on\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceSha384!: string;\r\n\r\n  /**\r\n   * description of how the base image was altered\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  variant!: string;\r\n\r\n  /**\r\n   * time this variant was created\r\n   */\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n  })\r\n  timestamp!: Date;\r\n\r\n  /**\r\n   * filename, i.e. key in our public S3 bucket\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  filename!: string;\r\n}\r\n", "import { Column, Table, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_mirrored_support_threads',\r\n  timestamps: false,\r\n})\r\nexport class SlackMirroredSupportThreadEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { Tier, UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'deploys',\r\n  timestamps: false,\r\n})\r\nexport class DeploysEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n  })\r\n  tier!: Tier;\r\n\r\n  @Column({\r\n    type: DataTypes.DATE,\r\n  })\r\n  deployStartTime!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  deployFinishTime!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  success!: boolean | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  error!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  gitCommitHash!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  dockerImage!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  packageVersion!: string | null;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type MondaySubscriptionDetails = {\r\n  boardID: string;\r\n  webhookID: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'task_third_party_subscriptions',\r\n  timestamps: false,\r\n})\r\nexport class TaskThirdPartySubscriptionEntity extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  id!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  userID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  orgID!: UUID;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType })\r\n  externalConnectionType!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  subscriptionDetails!: MondaySubscriptionDetails;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'application_usage_metrics',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationUsageMetricEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  applicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  metricID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.DATE,\r\n    primaryKey: true,\r\n  })\r\n  date!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  })\r\n  value!: number;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n@Table({\r\n  tableName: 'application_usage_metric_types',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationUsageMetricTypeEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  metric!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { literal, DataTypes } from 'sequelize';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\nimport type { EntityMetadata, UUID } from 'common/types/index.ts';\r\nimport type { NotificationReadStatus } from 'server/src/schema/resolverTypes.ts';\r\nimport type { ThreadActionType } from 'server/src/notifications/types/thread_action.ts';\r\n\r\nexport type NotificationType =\r\n  | 'reply'\r\n  | 'reaction'\r\n  | 'external'\r\n  | 'thread_action';\r\nexport type SpecificNotificationEntity<T extends NotificationType> =\r\n  NotificationEntity & { type: T };\r\n\r\n/**\r\n * As with other `Entity`s, NotificationEntity is a layer directly on top of the\r\n * raw SQL table. The data here is organised as most convenient for the\r\n * database, not for UI rendering. For example, while we display a bunch of\r\n * reactions to the same message as a single notification in the UI, each\r\n * individual reaction has its own row in the DB and thus its own\r\n * NotificationEntity.\r\n *\r\n * @see Notification is the GraphQL type this is massaged into for UI rendering.\r\n */\r\n@Table({\r\n  tableName: 'notifications',\r\n  timestamps: false,\r\n})\r\nexport class NotificationEntity extends Model<\r\n  InferAttributes<NotificationEntity>,\r\n  InferCreationAttributes<NotificationEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  externalID!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: false })\r\n  recipientID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  senderID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  iconUrl!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('reply', 'reaction', 'external', 'thread_action'),\r\n    allowNull: false,\r\n  })\r\n  type!: NotificationType;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  aggregationKey!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('unread', 'read'),\r\n    allowNull: false,\r\n    defaultValue: 'unread',\r\n  })\r\n  readStatus!: CreationOptional<NotificationReadStatus>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: literal('CURRENT_TIMESTAMP'),\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  messageID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.ARRAY(DataTypes.TEXT), allowNull: true })\r\n  replyActions!: NotificationReplyAction[] | null;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  reactionID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  threadID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.ENUM('resolve', 'unresolve'), allowNull: true })\r\n  threadActionType!: ThreadActionType | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  externalTemplate!: string | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  externalURL!: string | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  extraClassnames!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_go_redirects',\r\n  timestamps: false,\r\n})\r\nexport class AdminGoRedirectEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  creatorUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  updaterUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n    defaultValue: 0,\r\n  })\r\n  redirectCount!: number;\r\n}\r\n\r\nconst RESERVED_NAMES = ['name', 'edit'];\r\nconst MAX_REDIRECT_NAME_LENGTH = 40;\r\n\r\nexport function isValidRedirectName(name: string): boolean {\r\n  return (\r\n    !RESERVED_NAMES.includes(name) &&\r\n    !!name.match(/^[a-z0-9_-]+$/) &&\r\n    name.length <= MAX_REDIRECT_NAME_LENGTH\r\n  );\r\n}\r\n\r\nexport function canonicalizeRedirectName(name: string): string {\r\n  return name.toLowerCase();\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  AdminCRTComingFrom,\r\n  AdminCRTCommunicationStatus,\r\n  AdminCRTDecision,\r\n  AdminCRTIssueType,\r\n  AdminCRTPriority,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issues',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  customerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  title!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  body!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('them', 'us'),\r\n  })\r\n  comingFrom!: AdminCRTComingFrom;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('done', 'pending', 'accepted', 'rejected'),\r\n  })\r\n  decision!: AdminCRTDecision;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'none',\r\n      'request_acked',\r\n      'decision_sent',\r\n      'decision_acked',\r\n    ),\r\n  })\r\n  communicationStatus!: AdminCRTCommunicationStatus;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  lastTouch!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('request', 'bug', 'onboarding_step'),\r\n    allowNull: true,\r\n  })\r\n  type!: AdminCRTIssueType;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('blocker', 'high', 'low'),\r\n    allowNull: true,\r\n  })\r\n  priority!: AdminCRTPriority;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  assignee!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  externallyVisible!: boolean;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { JsonValue, UUID } from 'common/types/index.ts';\r\n\r\nexport type AdminCRTIssueChangeDetail = {\r\n  created?: boolean;\r\n  updated?: Array<{\r\n    field: string;\r\n    oldValue: JsonValue;\r\n    newValue: JsonValue;\r\n  }>;\r\n};\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issue_changes',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueChangeEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  issueID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  changeDetail!: AdminCRTIssueChangeDetail;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issue_subscriptions',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueSubscriptionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  issueID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_link_previews',\r\n  timestamps: false,\r\n})\r\nexport class MessageLinkPreviewEntity extends Model<\r\n  InferAttributes<MessageLinkPreviewEntity>,\r\n  InferCreationAttributes<MessageLinkPreviewEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  img!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  title!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  description!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastScrapedTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  hidden!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'application_webhooks',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationWebhookEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    unique: 'AppURLUniqueness',\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n    unique: 'AppURLUniqueness',\r\n  })\r\n  eventWebhookURL!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookSubscriptions!: string[] | null;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'warm_demo_users',\r\n  timestamps: false,\r\n})\r\nexport class WarmDemoUserEntity extends Model<\r\n  InferAttributes<WarmDemoUserEntity>,\r\n  InferCreationAttributes<WarmDemoUserEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  demoGroup!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  })\r\n  version!: number;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  userID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  orgID!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'preallocated_thread_ids',\r\n  timestamps: false,\r\n})\r\nexport class PreallocatedThreadIDEntity extends Model<\r\n  InferAttributes<PreallocatedThreadIDEntity>,\r\n  InferCreationAttributes<PreallocatedThreadIDEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  externalID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n}\r\n", "import type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport { Column, Model, PrimaryKey, Table } from 'sequelize-typescript';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\nconst PermissionValues = [\r\n  'thread:read',\r\n  'thread:send-message',\r\n  'thread-participant:read',\r\n  'message:read',\r\n] as const;\r\nexport type Permission = (typeof PermissionValues)[number];\r\n\r\n@Table({\r\n  tableName: 'permission_rules',\r\n  timestamps: false,\r\n})\r\nexport class PermissionRuleEntity extends Model<\r\n  InferAttributes<PermissionRuleEntity>,\r\n  InferCreationAttributes<PermissionRuleEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: false })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: false })\r\n  resourceSelector!: string; // Actually a jsonpath.\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: false })\r\n  userSelector!: string; // Actually a jsonpath.\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.ENUM(...PermissionValues)),\r\n    allowNull: false,\r\n  })\r\n  permissions!: Permission[];\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'org_org_members',\r\n  timestamps: false,\r\n})\r\nexport class OrgOrgMembersEntity extends Model<\r\n  InferAttributes<OrgOrgMembersEntity>,\r\n  InferCreationAttributes<OrgOrgMembersEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  childOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  parentOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n}\r\n"],
  "mappings": "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",
  "names": ["jwt", "crypto", "getClientAuthToken", "require_cjs", "MessageNodeType", "locationJson", "Sequelize", "defaultValue", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "import_types", "jsonStableStringify", "import_types", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "crypto", "dayjs", "Table", "Column", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "FeatureFlags", "Model", "Column", "DataTypes", "Table", "Counter", "Gauge", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Counter", "error", "dayjs", "credentials", "dayjs", "key", "crypto", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "crypto", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "DataTypes", "Sequelize", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "DataLoader", "Op", "DataLoader", "DataLoader", "Op", "DataLoader", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Sentry", "uuid", "Counter", "Gauge", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Column", "Table", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "DataTypes", "Column", "Model", "PrimaryKey", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Gauge", "Sequelize"]
}
