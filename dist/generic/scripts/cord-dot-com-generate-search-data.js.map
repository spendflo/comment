{
  "version": 3,
  "sources": ["scripts/cord-dot-com-generate-search-data.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts", "docs/lib/parseDownToPlaintext.ts", "docs/lib/hasOwnProperty.ts"],
  "sourcesContent": ["#!/usr/bin/env -S node --enable-source-maps\r\nimport { writeFileSync } from 'fs';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport OpenAI from 'openai';\r\n\r\nimport 'dotenv/config.js';\r\n\r\nimport Env from 'server/src/config/Env.ts';\r\nimport type { CordDotComCachedEmbedding } from 'common/types/index.ts';\r\nimport parseDownToPlaintextStrings from 'docs/lib/parseDownToPlaintext.ts';\r\n\r\nconst PAGES_TO_IGNORE = new Set(['https://cord.com/server']);\r\n\r\nconst MAX_EMBEDDING_TEXT_LENGTH = 20000;\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: Env.OPENAI_API_SECRET,\r\n});\r\n\r\nasync function createEmbedding(input: string) {\r\n  return await openai.embeddings.create({\r\n    model: 'text-embedding-ada-002',\r\n    input,\r\n  });\r\n}\r\n\r\nfunction getTitleByFuglyRegex(txt: string): string {\r\n  const titleTag = txt.match(/<title>([^<]*)<\\/title>/);\r\n  if (!titleTag) {\r\n    throw new Error('Could not find any loc tags in the sitemap?');\r\n  }\r\n\r\n  return titleTag[1];\r\n}\r\n\r\nasync function getChunkedSitePages(): Promise<\r\n  { url: string; title: string; plaintext: string }[]\r\n> {\r\n  const res = await fetch('https://cord.com/sitemap.xml');\r\n\r\n  const rawXML = await res.text();\r\n\r\n  // Yes, I could tediously parse and traverse the XML with a proper XML parser.\r\n  // Also I'm going to die some day and I that's not an accolade I want to etch\r\n  // in my tombstone.  So instead, I'm just dumb-parsing it and moving on.\r\n  const locTags = rawXML.match(/<loc>[^<]*<\\/loc>/g);\r\n  if (!locTags) {\r\n    throw new Error('Could not find any loc tags in the sitemap?');\r\n  }\r\n  const locs = locTags\r\n    .map((locTag) => locTag.substring(5, locTag.length - 6))\r\n    .filter((loc) => !PAGES_TO_IGNORE.has(loc));\r\n\r\n  const chunks: { url: string; title: string; plaintext: string }[] = [];\r\n  const promises: Promise<void>[] = [];\r\n  for (const locUrl of locs) {\r\n    promises.push(\r\n      (async () => {\r\n        const pageResponse = await fetch(locUrl);\r\n        const txt = await pageResponse.text();\r\n        const plaintexts = parseDownToPlaintextStrings(txt);\r\n        let title = getTitleByFuglyRegex(txt) || 'Cord.com';\r\n        if (title.includes('Cord | Make the internet multiplayer | ')) {\r\n          title = title.replace('Cord | Make the internet multiplayer | ', '');\r\n        }\r\n        for (const plaintext of plaintexts) {\r\n          chunks.push({\r\n            url: locUrl,\r\n            title,\r\n            plaintext,\r\n          });\r\n        }\r\n      })(),\r\n    );\r\n  }\r\n  await Promise.all(promises);\r\n  return chunks;\r\n}\r\n\r\nconst main = async () => {\r\n  const chunks = await getChunkedSitePages();\r\n  const embeddings: CordDotComCachedEmbedding[] = [];\r\n  const promises: Array<Promise<void>> = [];\r\n  for (const chunk of chunks) {\r\n    const embedding: CordDotComCachedEmbedding = {\r\n      url: chunk.url,\r\n      embedding: undefined,\r\n      plaintext: chunk.plaintext,\r\n      title: chunk.title,\r\n    };\r\n    embeddings.push(embedding);\r\n    promises.push(\r\n      (async () => {\r\n        if (chunk.plaintext.length > MAX_EMBEDDING_TEXT_LENGTH) {\r\n          console.error(\r\n            'Truncating very long plaintext chunk for page: ' + chunk.url,\r\n          );\r\n          console.error('Plaintext chunk is: ' + chunk.plaintext);\r\n          process.exit(1);\r\n        }\r\n        try {\r\n          const data = await createEmbedding(chunk.plaintext);\r\n          embedding.embedding = data;\r\n        } catch (e) {\r\n          console.error(\r\n            'Failed to fetch embedding for chunk: ' + chunk.plaintext,\r\n          );\r\n          console.error((e as Error).message);\r\n        }\r\n      })(),\r\n    );\r\n  }\r\n\r\n  await Promise.all(promises);\r\n\r\n  const embeddingsFile = `// @generated by scripts/cord-dot-com-generate-search-data.ts\r\nimport type { CordDotComCachedEmbedding } from 'common/types/index.ts';\r\n\r\nconst embeddings: CordDotComCachedEmbedding[] = ${JSON.stringify(\r\n    embeddings,\r\n    null,\r\n    2,\r\n  )};\r\n\r\nexport default embeddings;\\n`;\r\n  writeFileSync(\r\n    path.join(\r\n      path.dirname(url.fileURLToPath(import.meta.url)),\r\n      '../../docs/server/searchData/CordDotComEmbeddings.ts',\r\n    ),\r\n    embeddingsFile,\r\n  );\r\n};\r\n\r\nPromise.resolve(main()).catch((err) => {\r\n  console.error(err);\r\n  process.exit(1);\r\n});\r\n", "// There is some TypeScript trickery in this file. It is optimised for making\r\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\r\n// and self-explanatory, and the type hints displayed by the IDE should be\r\n// useful.\r\n\r\n// Define types to declare variables as required, optional or having a default\r\n// value.  If these classes were empty, TypeScript would treat them as\r\n// interchangeable. By giving them different shapes (i.e. different members),\r\n// TypeScript will keep them apart.\r\nclass RequiredVariable {\r\n  public readonly req = true;\r\n}\r\nclass OptionalVariable {\r\n  public readonly opt = true;\r\n}\r\nclass VariableWithDefaultValue {\r\n  constructor(public readonly defaultValue: string) {}\r\n}\r\n\r\n// These are the helpers that are used by the caller of `magicEnv` to define\r\n// their environment fields.\r\nexport const required = new RequiredVariable();\r\nexport const optional = new OptionalVariable();\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const defaultValue = (defaultValue: string) =>\r\n  new VariableWithDefaultValue(defaultValue);\r\n\r\n// Here comes the main function of this module: `magicEnv`. It takes one\r\n// parameter: a JavaScript object with string keys and values of type\r\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\r\n//\r\n// `magicEnv` is a template function, which is quite important.\r\n// `EnvDefinitionType` is the specific type of the environment definition.\r\n// That type must comply with the restriction that it is an object with string\r\n// keys and those variable types as values.  However, we will need the\r\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\r\n// the corresponding value types. We get access to this type by templating this\r\n// function.\r\nexport function magicEnv<\r\n  EnvDefinitionType extends {\r\n    [key: string]:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue;\r\n  },\r\n>(\r\n  processEnv: { [key: string]: string | undefined },\r\n  envDefinition: EnvDefinitionType,\r\n) {\r\n  // Now start constructing the result of this function.\r\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\r\n\r\n  // And now we iterate through the `envDefinition` object, which we received\r\n  // from the callback function.\r\n  for (const key of Object.keys(envDefinition) as (string &\r\n    keyof EnvDefinitionType)[]) {\r\n    // This is the value from the process environment\r\n    const value: string | undefined = processEnv[key];\r\n\r\n    // This is the value from the definition object at the top\r\n    const fieldDefinition:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue = envDefinition[key];\r\n\r\n    if ((fieldDefinition as any).req) {\r\n      // This is a required variable.\r\n\r\n      if (value === undefined) {\r\n        throw new Error(`Missing key ${key} in environment`);\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    } else if ((fieldDefinition as any).opt) {\r\n      // This is an optional variable. `value` may be a string or undefined.\r\n\r\n      env[key] = value;\r\n    } else {\r\n      // This is a variable with a default value (the value of\r\n      // `fieldDefinition`)\r\n\r\n      if (value === undefined) {\r\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the `env` object that we have just constructed, but return with a\r\n  // special type that we define here: it is an object which contains all the\r\n  // keys that the definition object has. The value type is `string`, except\r\n  // for fields that correspond to optional variables, those have type\r\n  // `string | undefined`. All fields are declared readonly.\r\n  return env as {\r\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\r\n      ? string | undefined\r\n      : string;\r\n  };\r\n}\r\n", "import {\r\n  magicEnv,\r\n  required,\r\n  optional,\r\n  defaultValue,\r\n} from 'server/src/config/MagicEnv.ts';\r\n\r\nexport default magicEnv(process.env, {\r\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\r\n  // libraries we import, to switch between development and production mode.\r\n  // Just to make sure it is set in the process environment, we include it here.\r\n  NODE_ENV: required,\r\n\r\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\r\n  CORD_TIER: required,\r\n\r\n  // Accept connections on these ports\r\n  API_SERVER_PORT: optional,\r\n  ADMIN_SERVER_PORT: optional,\r\n  METRICS_SERVER_PORT: optional,\r\n  STATUS_SERVER_PORT: optional,\r\n  CONSOLE_SERVER_PORT: optional,\r\n  DOCS_SERVER_PORT: optional,\r\n\r\n  // PostgreSQL connection configuration - required\r\n  POSTGRES_HOST: required,\r\n  POSTGRES_PORT: required,\r\n  POSTGRES_USER: required,\r\n  POSTGRES_PASSWORD: required,\r\n  POSTGRES_DB: required,\r\n\r\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\r\n  // as above)\r\n  POSTGRES_READ_HOST: optional,\r\n  POSTGRES_READ_PORT: optional,\r\n\r\n  // Redis connection configuration\r\n  REDIS_PORT: required,\r\n  REDIS_HOST: required,\r\n  PREDIS_PORT: required,\r\n  PREDIS_HOST: required,\r\n\r\n  // URLs pointing to our own endpoints\r\n  TOP_SERVER_HOST: required,\r\n  APP_SERVER_HOST: required,\r\n  API_SERVER_HOST: required,\r\n  API_SERVER_HOST_PRODUCTION: required,\r\n  ADMIN_SERVER_HOST: required,\r\n  MARKETING_SERVER_HOST: required,\r\n  PUBLIC_UPLOADS_HOST: required,\r\n  CONSOLE_SERVER_HOST: required,\r\n  CORD_TO_HOST: required,\r\n  DOCS_SERVER_HOST: required,\r\n  CLACK_SERVER_HOST: optional,\r\n  COMMUNITY_SERVER_HOST: required,\r\n\r\n  // Slack App credentials - required\r\n  SLACK_APP_CLIENT_SECRET: required,\r\n  SLACK_DEV_APP_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\r\n  SLACK_APP_REDIRECT_HOST: optional,\r\n  SLACK_SIGNING_SECRET: required,\r\n  SLACK_ADMIN_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_SIGNING_SECRET: required,\r\n  SLACK_INTERNAL_BOT_TOKEN: required,\r\n  SLACK_INTERNAL_SIGNING_SECRET: required,\r\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\r\n\r\n  // S3 Bucket File storage\r\n  S3_ACCESS_KEY_ID: optional,\r\n  S3_ACCESS_KEY_SECRET: optional,\r\n  S3_REGION: required,\r\n  S3_BUCKET: required,\r\n  S3_PUBLIC_BUCKET: required,\r\n  S3_ENDPOINT: required,\r\n  S3_USE_PATH_BASED_URLS: required,\r\n\r\n  EMAIL_LINKS_TOKEN_SECRET: required,\r\n\r\n  // Jira App credentials - required\r\n  JIRA_APP_CLIENT_ID: required,\r\n  JIRA_APP_CLIENT_SECRET: required,\r\n\r\n  // Asana App credentials - required\r\n  ASANA_APP_CLIENT_ID: required,\r\n  ASANA_APP_CLIENT_SECRET: required,\r\n\r\n  // Linear App credentials - required\r\n  LINEAR_APP_CLIENT_ID: required,\r\n  LINEAR_APP_CLIENT_SECRET: required,\r\n\r\n  // Trello App credentials - required\r\n  TRELLO_APP_CLIENT_ID: required,\r\n  TRELLO_APP_CLIENT_SECRET: required,\r\n\r\n  // Monday App credentials - required\r\n  MONDAY_APP_CLIENT_ID: required,\r\n  MONDAY_APP_CLIENT_SECRET: required,\r\n\r\n  // Secret for session tokens - required\r\n  JWT_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\r\n  OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\r\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Log level for console logging - optional ('info' if not provided)\r\n  LOGLEVEL: defaultValue('info'),\r\n\r\n  // Post error messages to this Slack channel,\r\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post informational changes to prod setup, including deploy and db migration\r\n  // messages, to this Slack channel\r\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post security/SOC2 compliance messages to this Slack channel,\r\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post info about go redirects to this Slack channel\r\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post messages from customers to this Slack channel\r\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post client request messages to this Slack channel\r\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // For sending search queries from the docs site to Slack\r\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\r\n  // logging is disabled\r\n  CLOUDWATCH_LOGLEVEL: optional,\r\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\r\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\r\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\r\n\r\n  // Host used when developing locally but an externally accessible url is\r\n  // needed. (example: d92dd1d1fa99.ngrok.io)\r\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\r\n\r\n  // path to static files for the admin app\r\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\r\n\r\n  // path to static files for the console app\r\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\r\n\r\n  // path to static files for the docs app\r\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\r\n\r\n  // API key used to send transactional email notifications through Sendgrid.\r\n  SENDGRID_API_KEY: required,\r\n\r\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\r\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\r\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\r\n\r\n  // API key used to fetch feature flags from LaunchDarkly\r\n  LAUNCHDARKLY_API_KEY: optional,\r\n\r\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\r\n  NUM_WORKERS: optional,\r\n\r\n  // Encryption key used when storing secrets in the database\r\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\r\n\r\n  // Encryption key used when generating file permalinks\r\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\r\n\r\n  // sentry.io environment setting\r\n  SENTRY_ENVIRONMENT: optional,\r\n  SENTRY_RELEASE: optional,\r\n  SENTRY_TRACE_SAMPLE_RATE: optional,\r\n\r\n  // Auth0 Environment variables\r\n  // 1) For SPA application\r\n  AUTH0_CLIENT_ID: required,\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\r\n\r\n  // 2) For verifying incoming events\r\n  AUTH0_WEBHOOK_SECRET: required,\r\n\r\n  // 3) For server to server communication\r\n  AUTH0_MTM_CLIENT_ID: required,\r\n  AUTH0_MTM_CLIENT_SECRET: required,\r\n  AUTH0_GENERAL_DOMAIN: required,\r\n\r\n  // console.cord.com cord app credentials\r\n  DEV_CONSOLE_CORD_APP_SECRET: required,\r\n\r\n  // secret for signing admin tokens to serve as proof user is logged in to\r\n  // admin\r\n  ADMIN_TOKEN_SECRET: required,\r\n\r\n  // flag whether the SDK testbed should be built and served\r\n  INCLUDE_SDK_TESTBED: optional,\r\n\r\n  // secret for cookies on the docs web site\r\n  DOCS_COOKIE_PARSER_SECRET: optional,\r\n\r\n  // set email for all notifications when testing with users on testbed\r\n  TESTBED_USERS_EMAIL: optional,\r\n\r\n  // secret for creating searchable embeddings and generating search\r\n  // results within our docs\r\n  OPENAI_API_SECRET: required,\r\n\r\n  // secret for getting geographic information from an IP address\r\n  IPSTACK_API_SECRET: optional,\r\n\r\n  // Host for where we generate the ai chat bot in the docs\r\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\r\n\r\n  // Google analytic events\r\n  GA_MEASUREMENT_ID: required,\r\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\r\n\r\n  // secret for stripe\r\n  STRIPE_SECRET_KEY: required,\r\n  STRIPE_WEBHOOK_SECRET_KEY: required,\r\n\r\n  DEMO_APPS_SHARED_SECRET: required,\r\n\r\n  // loops.so for sending newletters\r\n  LOOPS_SO_API_KEY: required,\r\n});\r\n", "import { parse } from 'parse5';\r\nimport type { DefaultTreeAdapterMap } from 'parse5';\r\nimport { hasOwnProperty } from 'docs/lib/hasOwnProperty.ts';\r\n\r\ntype ChildNode = DefaultTreeAdapterMap['childNode'];\r\ntype TextNode = DefaultTreeAdapterMap['textNode'];\r\n\r\n// Set this data attribute to anything truthy in your HTML to have the scraping\r\n// code ignore it completely.\r\nconst DATA_SEARCH_IGNORE = 'data-cord-search-ignore';\r\n\r\nconst blockLevelNodeNames = new Set([\r\n  'address',\r\n  'article',\r\n  'aside',\r\n  'blockquote',\r\n  'canvas',\r\n  'dd',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'header',\r\n  'hr',\r\n  'li',\r\n  'main',\r\n  'nav',\r\n  'noscript',\r\n  'ol',\r\n  'p',\r\n  'pre',\r\n  'section',\r\n  'table',\r\n  'tfoot',\r\n  'ul',\r\n  'video',\r\n]);\r\n\r\ntype AttrList = { name: string; value: string }[];\r\nfunction assertIsAttrList(thing: unknown): AttrList {\r\n  if (Array.isArray(thing)) {\r\n    return thing as AttrList;\r\n  }\r\n  throw new Error('Malformed attribute list');\r\n}\r\n\r\n// This value is extremely arbitrary. I don't really know enough about LLM\r\n// to know if many small chunks are better or if we'd do better with more\r\n// larger ones. This is something worth playing with if we don't feel we're\r\n// getting useful search results. In my limiting playing with it, smaller\r\n// chunks seemed to perform worse than larger ones. So, this value is set\r\n// to push us near the upper limit for the number of tokens that go into\r\n// an embedding.\r\nconst MAX_PART_LENGTH = 3900;\r\n\r\ntype ParseDownWorkingData = {\r\n  finalOutput: string[];\r\n  currentParts: string[];\r\n  currentPartsLength: number;\r\n};\r\n\r\nfunction addContent(v: string, data: ParseDownWorkingData) {\r\n  // If the chunk is getting too big, we'll pinch it off here and\r\n  // reset the counter.\r\n  if (data.currentPartsLength + v.length > MAX_PART_LENGTH) {\r\n    data.finalOutput.push(data.currentParts.join(''));\r\n\r\n    if (v.length > MAX_PART_LENGTH) {\r\n      // Tricky case -- one big text node with thousands of character in it\r\n      let remainder = v;\r\n      while (remainder.length) {\r\n        if (remainder.length < MAX_PART_LENGTH) {\r\n          data.finalOutput.push(remainder);\r\n          remainder = '';\r\n          break;\r\n        }\r\n\r\n        // We'll blindly cut into the text in the worst case\r\n        let sliceIndex = MAX_PART_LENGTH;\r\n\r\n        // But we'll also look for a decently placed linebreak and slice there instead;\r\n        const convenientlyPlacedLineBreakIndex = remainder.indexOf(\r\n          '\\n',\r\n          MAX_PART_LENGTH - 200,\r\n        );\r\n\r\n        // And if we don't find a linebreak in a good spot, we'll settle\r\n        // for a space.\r\n        const convenientlyPlacedSpaceIndex = remainder.indexOf(\r\n          ' ',\r\n          MAX_PART_LENGTH - 200,\r\n        );\r\n        if (\r\n          convenientlyPlacedLineBreakIndex !== -1 &&\r\n          convenientlyPlacedLineBreakIndex < sliceIndex\r\n        ) {\r\n          sliceIndex = convenientlyPlacedLineBreakIndex;\r\n        } else if (\r\n          convenientlyPlacedSpaceIndex !== -1 &&\r\n          convenientlyPlacedSpaceIndex < sliceIndex\r\n        ) {\r\n          sliceIndex = convenientlyPlacedSpaceIndex;\r\n        }\r\n\r\n        const slice = remainder.substring(0, sliceIndex);\r\n        data.finalOutput.push(slice);\r\n        remainder = remainder.substring(sliceIndex);\r\n      }\r\n      data.currentParts = [];\r\n      data.currentPartsLength = 0;\r\n    } else {\r\n      data.currentParts = [v];\r\n      data.currentPartsLength = v.length;\r\n    }\r\n    // Otherwise, just keep tacking the text value onto the current part\r\n  } else {\r\n    data.currentParts.push(v);\r\n    data.currentPartsLength += v.length;\r\n  }\r\n}\r\n\r\nfunction appendTextNodes(\r\n  data: ParseDownWorkingData,\r\n  nodeList: ChildNode[],\r\n  currentHeadingLevel = 0,\r\n  isPreformatted = false,\r\n) {\r\n  outer: for (const node of nodeList) {\r\n    if (\r\n      node.nodeName === 'iframe' ||\r\n      node.nodeName === 'script' ||\r\n      node.nodeName === 'noscript' ||\r\n      node.nodeName === 'style' ||\r\n      node.nodeName === 'nav' ||\r\n      node.nodeName === 'header' ||\r\n      node.nodeName === 'footer' ||\r\n      node.nodeName === 'wbr'\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    // Try to be a bit smart about chunking together things that are under the\r\n    // same heading. So, if we encounter an H1 and then an H2, as long as we\r\n    // have space left in the chunk size, we'll keep appending them into the\r\n    // same chunk. However, if we've been putting together the content under an\r\n    // H1 tag and we encounter another H1, we'll pinch off the chunk we've been\r\n    // working on because the page structure indicates we've got a new topic.\r\n    //\r\n    // This works pretty well for pages that have good semantic HTML in the\r\n    // headings. If the pages have poor semantics in the headings, this is a\r\n    // dice roll. Garbage in, garbage out. In practice, that will still be okay\r\n    // because chunks + cosine similarity are surprisingly good at finding the\r\n    // right needles even when the haystack is hot garbage.\r\n    let headingLevel = 0;\r\n    const match = node.nodeName.match(/^h(\\d)$/i);\r\n    if (match) {\r\n      headingLevel = parseInt(match[1], 10);\r\n      if (headingLevel < currentHeadingLevel) {\r\n        data.finalOutput.push(data.currentParts.join(''));\r\n        data.currentParts = [];\r\n        data.currentPartsLength = 0;\r\n      }\r\n      currentHeadingLevel = headingLevel;\r\n    }\r\n\r\n    if (node.nodeName === 'hr') {\r\n      addContent('\\n-----\\n', data);\r\n    } else if (node.nodeName === '#text') {\r\n      const v = (node as TextNode).value + (isPreformatted ? '' : '');\r\n      addContent(v, data);\r\n    } else {\r\n      if (hasOwnProperty(node, 'attrs')) {\r\n        const attrList = assertIsAttrList(node.attrs);\r\n        for (const attr of attrList) {\r\n          if (attr.name === DATA_SEARCH_IGNORE) {\r\n            continue outer;\r\n          }\r\n        }\r\n      }\r\n      if (\r\n        hasOwnProperty(node, 'childNodes') &&\r\n        Array.isArray(node.childNodes)\r\n      ) {\r\n        // If we encounter preformatted text, we'll make sure to separate it\r\n        // from its preceding content.\r\n        const newPreTag = node.nodeName === 'pre';\r\n        if (newPreTag) {\r\n          data.currentParts.push('\\n```\\n');\r\n          data.currentPartsLength += 5;\r\n        }\r\n\r\n        if (blockLevelNodeNames.has(node.nodeName) && !newPreTag) {\r\n          data.currentParts.push('\\n');\r\n          data.currentPartsLength += 1;\r\n        }\r\n\r\n        // This is cheeseball and doesn't work for ordered lists. But it at\r\n        // least captures that there is a list at all.\r\n        if (node.nodeName === 'li') {\r\n          data.currentParts.push('\\n- ');\r\n          data.currentPartsLength += 3;\r\n        }\r\n\r\n        appendTextNodes(\r\n          data,\r\n          node.childNodes,\r\n          currentHeadingLevel,\r\n          isPreformatted || newPreTag,\r\n        );\r\n\r\n        if (blockLevelNodeNames.has(node.nodeName) && !newPreTag) {\r\n          data.currentParts.push('\\n');\r\n          data.currentPartsLength += 1;\r\n        }\r\n\r\n        if (newPreTag) {\r\n          data.currentParts.push('\\n```\\n');\r\n          data.currentPartsLength += 5;\r\n        }\r\n      }\r\n    }\r\n    if (headingLevel) {\r\n      data.currentParts.push('\\n\\n');\r\n      data.currentPartsLength += 2;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getBody(childNodes: ChildNode[]): ChildNode | undefined {\r\n  for (const child of childNodes) {\r\n    if (child.nodeName === 'body') {\r\n      return child;\r\n    } else if (\r\n      hasOwnProperty(child, 'childNodes') &&\r\n      Array.isArray(child.childNodes)\r\n    ) {\r\n      const body = getBody(child.childNodes as ChildNode[]);\r\n      if (body) {\r\n        return body;\r\n      }\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction parseDownToPlaintextStrings(page: string): string[] {\r\n  const root = parse(page);\r\n  const body = getBody(root.childNodes);\r\n  if (\r\n    !body ||\r\n    !hasOwnProperty(body, 'childNodes') ||\r\n    !Array.isArray(body.childNodes)\r\n  ) {\r\n    return [];\r\n  }\r\n\r\n  const data: ParseDownWorkingData = {\r\n    finalOutput: [],\r\n    currentParts: [],\r\n    currentPartsLength: 0,\r\n  };\r\n  appendTextNodes(data, body.childNodes);\r\n  if (data.currentParts.length) {\r\n    const chunk = data.currentParts.join('');\r\n    data.finalOutput.push(chunk);\r\n  }\r\n\r\n  // Any chunks that are empty strings or just newlines, tabs, and spaces --\r\n  // nuke them.\r\n  data.finalOutput = data.finalOutput\r\n    .map((str) => str.replace(/\\n\\n\\n+/g, '\\n\\n\\n'))\r\n    .filter((str) => !str.match(/^\\s+$/))\r\n    .filter(Boolean);\r\n\r\n  return data.finalOutput;\r\n}\r\n\r\nexport default parseDownToPlaintextStrings;\r\n", "// This function determines if X has property Y and does so in a\r\n// a way that preserves the type information within TypeScript.\r\nexport function hasOwnProperty<Obj extends object, Prop extends PropertyKey>(\r\n  obj: Obj,\r\n  prop: Prop,\r\n): obj is Obj & { [prop in Prop]: unknown } {\r\n  return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\n"],
  "mappings": "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",
  "names": ["defaultValue"]
}
