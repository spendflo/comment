{
  "version": 3,
  "sources": ["server/src/asyncTier/pgboss.ts", "server/src/config/MagicEnv.ts", "server/src/config/Env.ts", "server/src/logging/Logger.ts", "server/src/entity/application/ApplicationEntity.ts", "server/src/featureflags/index.ts", "common/const/FeatureFlags.ts", "server/src/email/index.ts", "common/types/index.ts", "opensource/sdk-js/packages/react/common/lib/fast-deep-equal.ts", "opensource/sdk-js/packages/types/index.ts", "server/src/entity/email_notification/EmailOutboundNotificationEntity.ts", "server/src/email/utils.ts", "server/src/entity/event/EventEntity.ts", "server/src/util/backgroundPromise.ts", "server/src/entity/event/EventMutator.ts", "common/const/Sizes.ts", "common/const/Urls.ts", "common/const/Ids.ts", "server/src/entity/customer/CustomerEntity.ts", "server/src/logging/flatFormat.ts", "package.json", "server/src/logging/prometheus.ts", "server/src/auth/index.ts", "server/src/util/CordError.ts", "server/src/util/ClientFacingError.ts", "server/src/entity/org_members/OrgMembersEntity.ts", "server/src/entity/sequelize.ts", "common/util/sleep.ts", "server/src/entity/message/MessageEntity.ts", "common/util/index.ts", "opensource/sdk-js/packages/react/common/lib/messageNode.ts", "opensource/sdk-js/packages/react/common/lib/trim.ts", "server/src/entity/org/OrgEntity.ts", "server/src/entity/linked_orgs/LinkedOrgsEntity.ts", "server/src/slack/types.ts", "server/src/entity/user/UserEntity.ts", "server/src/entity/file/FileEntity.ts", "server/src/files/upload.ts", "common/const/Timing.ts", "common/util/setTimeoutAsync.ts", "server/src/entity/s3_bucket/S3BucketLoader.ts", "server/src/entity/s3_bucket/S3BucketEntity.ts", "server/src/entity/base/util.ts", "server/src/files/download.ts", "server/src/entity/message_attachment/MessageAttachmentEntity.ts", "server/src/entity/message_reaction/MessageReactionEntity.ts", "server/src/entity/message_mention/MessageMentionEntity.ts", "server/src/entity/slack_channel/SlackChannelEntity.ts", "server/src/entity/slack_message/SlackMessageEntity.ts", "server/src/entity/user_preference/UserPreferenceEntity.ts", "server/src/entity/task/TaskEntity.ts", "server/src/entity/task_todo/TaskTodoEntity.ts", "server/src/entity/task_assignee/TaskAssigneeEntity.ts", "server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts", "server/src/entity/common.ts", "server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts", "server/src/entity/page/PageEntity.ts", "server/src/entity/thread/ThreadEntity.ts", "server/src/entity/org_members/OrgMembersLoader.ts", "server/src/entity/org/OrgLoader.ts", "server/src/entity/thread_participant/ThreadParticipantEntity.ts", "server/src/entity/page_visitor/PageVisitorEntity.ts", "server/src/entity/session/SessionEntity.ts", "server/src/logging/performance.ts", "server/src/entity/heimdall/HeimdallEntity.ts", "server/src/entity/email_subscription/EmailSubscriptionEntity.ts", "server/src/entity/linked_users/LinkedUsersEntity.ts", "server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts", "server/src/entity/message_notification/MessageOutboundNotificationEntity.ts", "server/src/entity/user/ConsoleUserEntity.ts", "server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts", "server/src/entity/extrernal_asset/ExternalAssetEntity.ts", "server/src/entity/image_variant/ImageVariantEntity.ts", "server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts", "server/src/entity/deploys/DeploysEntity.ts", "server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts", "server/src/entity/notification/NotificationEntity.ts", "server/src/entity/go_redirect/AdminGoRedirectEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts", "server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts", "server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts", "server/src/entity/application_webhook/ApplicationWebhookEntity.ts", "server/src/entity/demo/WarmDemoUserEntity.ts", "server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts", "server/src/entity/permission/PermisssionRuleEntity.ts", "server/src/entity/org_org_members/OrgOrgMembersEntity.ts", "server/src/redis/index.ts", "server/src/pubsub/index.ts", "server/src/entity/linked_users/LinkedUsersLoader.ts", "server/src/asyncTier/jobs/applicationUsageMetrics.ts", "server/src/util/readReplicaDatabase.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricMutator.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricTypeMutator.ts", "server/src/metrics/applicationUsageMetrics.ts", "server/src/asyncTier/jobDefinition.ts", "server/src/asyncTier/jobs/asyncWorkerHealthCheck.ts", "server/src/asyncTier/jobs/checkAWSCredentials.ts", "ops/aws/src/radical-stack/Config.ts", "server/src/slack/util.ts", "server/src/entity/user/util.ts", "common/uploads/index.ts", "opensource/sdk-js/packages/react/common/lib/uploads.ts", "server/src/slack/api.ts", "common/util/oauth.ts", "server/src/RequestContext.ts", "server/src/entity/application/ApplicationLoader.ts", "server/src/entity/heimdall/HeimdallLoader.ts", "server/src/logging/segment.ts", "common/const/HeimdallSwitches.ts", "server/src/entity/user/UserLoader.ts", "server/src/entity/linked_orgs/LinkedOrgsLoader.ts", "server/src/util/hash.ts", "server/src/entity/message/MessageLoader.ts", "common/const/Api.ts", "common/util/asyncFilter.ts", "server/src/entity/message_attachment/MessageAttachmentLoader.ts", "server/src/entity/file/FileLoader.ts", "server/src/entity/message_reaction/MessageReactionLoader.ts", "server/src/entity/slack_channel/SlackChannelLoader.ts", "server/src/entity/user_preference/UserPreferenceLoader.ts", "server/src/entity/task/TaskLoader.ts", "server/src/entity/task_assignee/TaskAssigneeLoader.ts", "server/src/entity/task_todo/TaskTodoLoader.ts", "server/src/entity/page/PageLoader.ts", "server/src/entity/thread/ThreadLoader.ts", "server/src/util/filteredBatchLoad.ts", "server/src/util/filteredApproximateCount.ts", "server/src/entity/page_visitor/PageVisitorLoader.ts", "server/src/entity/thread_participant/ThreadParticipantLoader.ts", "server/src/entity/email_subscription/EmailSubscriptionLoader.ts", "server/src/entity/slack_mirrored_thread/SlackMirroredThreadLoader.ts", "server/src/entity/user/ConsoleUserLoader.ts", "server/src/entity/deploys/DeploysLoader.ts", "server/src/entity/customer/CustomerLoader.ts", "server/src/entity/application_usage_metric/ApplicationUsageMetricLoader.ts", "server/src/entity/notification/NotificationLoader.ts", "server/src/notifications/fetch.ts", "server/src/notifications/types/thread_action.ts", "server/src/notifications/types/external.ts", "server/src/notifications/types/reaction.ts", "server/src/notifications/types/reply.ts", "server/src/public/routes/platform/util.ts", "server/src/entity/user/UserMutator.ts", "server/src/entity/message_link_preview/MessageLinkPreviewLoader.ts", "server/src/entity/privacy/PrivacyLoader.ts", "server/src/entity/message_mention/MessageMentionLoader.ts", "server/src/RequestContextLoaders.ts", "server/src/util/splitStringToWsAndText.ts", "server/src/slack/mrkdwnImpl.ts", "server/src/slack/mrkdwn.ts", "server/src/entity/slack_message/SlackMessageLoader.ts", "server/src/entity/message/MessageMutator.ts", "server/src/util/locks.ts", "server/src/third_party_tasks/jira/api.ts", "server/src/util/cache.ts", "server/src/entity/user_preference/UserPreferenceMutator.ts", "common/const/UserPreferenceKeys.ts", "server/src/third_party_tasks/util.ts", "server/src/third_party_tasks/jira/util.ts", "server/src/third_party_tasks/jira/actions.ts", "server/src/third_party_tasks/asana/actions.ts", "server/src/third_party_tasks/asana/api.ts", "server/src/public/routes/MainRouter.ts", "server/src/public/routes/platform/threads/CreateThreadHandler.ts", "common/util/externalIDs.ts", "server/src/public/routes/platform/types.ts", "server/src/public/routes/platform/validatorFunction.ts", "opensource/sdk-js/packages/api-types/generate/schema.ts", "server/src/entity/thread/ThreadMutator.ts", "server/src/entity/thread_participant/ThreadParticipantMutator.ts", "server/src/message/new_message_tasks/maybeAddEveryOrgMemberAsThreadParticipants.ts", "server/src/message/new_message_tasks/addAdditionalSubscribersOnThreadCreation.ts", "server/src/entity/page/PageMutator.ts", "server/src/entity/thread/new_thread_tasks/publishNewThreadEvents.ts", "server/src/public/routes/platform/applications/GetApplicationHandler.ts", "server/src/public/routes/platform/applications/util.ts", "server/src/public/routes/platform/orgs/DeletePlatformOrganizationsHandler.ts", "server/src/public/routes/platform/applications/DeleteApplicationHandler.ts", "server/src/public/routes/platform/applications/UpdateApplicationHandler.ts", "server/src/util/safeFetch.ts", "server/src/util/third_party/ssrf-req-filter.mjs", "server/src/webhook/webhook.ts", "server/src/public/routes/platform/threads/GetThreadHandler.ts", "server/src/presence/typing.ts", "server/src/public/routes/platform/threads/util/getCoreThreadData.ts", "server/src/public/mutations/notifications/utils.ts", "server/src/public/routes/platform/messages/getMessageAttachments.ts", "server/src/public/routes/platform/messages/util.ts", "server/src/public/routes/platform/messages/getCoreMessageData.ts", "server/src/notifications/convert.ts", "server/src/util/createViewerAndContext.ts", "server/src/asyncTier/submitAsync.ts", "server/src/webhook/verifyWebhookURL.ts", "server/src/public/routes/platform/applications/ListApplicationsHandler.ts", "server/src/public/routes/middleware/VerifyAPIAccessToken.ts", "server/src/public/routes/handlers/IndexHandler.ts", "server/src/public/routes/handlers/SlackAuthRedirectHandler.ts", "server/src/entity/org/OrgMutator.ts", "server/src/entity/slack_channel/SlackChannelMutator.ts", "server/src/util/cookies.ts", "common/const/Cookies.ts", "server/src/util/google-analytics.ts", "server/src/auth/oauth.ts", "server/src/entity/linked_orgs/LinkedOrgsMutator.ts", "server/src/entity/linked_users/LinkedUsersMutator.ts", "server/src/public/routes/handlers/JiraAuthRedirectHandler.ts", "server/src/public/routes/handlers/SlackEventApiHandler.ts", "server/src/util/isHelpMessage.ts", "server/src/serverStatus.ts", "server/src/util/drainHelper.ts", "server/src/slack/interactionHandlers/blockActions.ts", "server/src/util/interactiveSupportButton.ts", "server/src/public/routes/handlers/SlackInteractiveEventApiHandler.ts", "server/src/public/routes/handlers/AsanaAuthRedirectHandler.ts", "server/src/third_party_tasks/linear/api.ts", "server/src/public/routes/handlers/LinearAuthRedirectHandler.ts", "server/src/public/routes/handlers/AsanaEventApiHandler.ts", "server/src/third_party_tasks/trello/api.ts", "server/src/public/routes/handlers/TrelloAuthHandlers.ts", "server/src/third_party_tasks/linear/util.ts", "server/src/third_party_tasks/linear/actions.ts", "server/src/public/routes/handlers/LinearEventApiHandler.ts", "server/src/public/routes/middleware/PlatformErrorHandler.ts", "server/src/public/routes/platform/APIAuthorizeHandler.ts", "common/const/IntegrationAPI.ts", "server/src/logging/deprecate.ts", "server/src/public/routes/platform/orgs/ListPlatformOrganizationsHandler.ts", "server/src/public/routes/platform/orgs/GetPlatformOrganizationHandler.ts", "server/src/public/routes/platform/orgs/CreatePlatformOrganizationsHandler.ts", "server/src/util/AsyncChannel.ts", "server/src/public/subscriptions/util/live_query.ts", "server/src/public/subscriptions/util/with_filter.ts", "server/src/public/subscriptions/util/restart_subscription.ts", "server/src/public/routes/platform/orgs/UpdatePlatformOrganizationsHandler.ts", "server/src/public/routes/platform/org_members/UpdatePlatformOrganizationMembersHandler.ts", "server/src/public/routes/platform/users/ListPlatformUsersHandler.ts", "server/src/public/routes/platform/validateQuery.ts", "server/src/public/routes/platform/users/GetPlatformUserHandler.ts", "server/src/public/routes/platform/users/CreatePlatformUserHandler.ts", "server/src/public/routes/platform/users/UpdatePlatformUserHandler.ts", "server/src/public/routes/platform/PlatformBatchHandler.ts", "opensource/sdk-js/packages/react/common/util.ts", "server/src/public/routes/platform/messages/GetThreadMessageHandler.ts", "server/src/public/routes/platform/messages/ListThreadMessagesHandler.ts", "server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts", "server/src/message/util/validateMessageContent.ts", "server/src/schema/common.ts", "server/src/entity/message_mention/MessageMentionMutator.ts", "server/src/message/new_message_tasks/addNewMessageAttachments.ts", "server/src/message/new_message_tasks/markThreadSeenForViewer.ts", "server/src/third_party_tasks/trello/actions.ts", "server/src/third_party_tasks/monday/actions.ts", "server/src/third_party_tasks/monday/api.ts", "server/src/third_party_tasks/asana/util.ts", "server/src/entity/task/TaskMutator.ts", "server/src/entity/task_assignee/TaskAssigneeMutator.ts", "server/src/entity/task_todo/TaskTodoMutator.ts", "server/src/message/new_message_tasks/addNewMessageTasks.ts", "server/src/message/new_message_tasks/publishNewMessageEvents.ts", "server/src/message/new_message_tasks/maybeUnresolveThread.ts", "common/const/MessageActions.ts", "server/src/message/util/getActionMessageContent.ts", "server/src/entity/notification/NotificationMutator.ts", "server/src/notifications/outbound/logging.ts", "server/src/asyncTier/jobs/sendSlackNotificationWithDelay.ts", "common/util/notifications.ts", "server/src/util/findSlackUserEmailMatch.ts", "server/src/deep_link_threads/index.ts", "server/src/notifications/outbound/util.ts", "server/src/email/util.ts", "common/const/Colors.ts", "common/util/middleElideFileName.ts", "common/ui/getStableColorPalette.ts", "server/src/util/email.ts", "server/src/asyncTier/jobs/sendEmailNotificationWithDelay.ts", "server/src/notifications/outbound/sendOutboundNotifications.ts", "server/src/entity/thread/update_thread_tasks/createThreadActionNotifications.ts", "server/src/message/util/getNotificationReplyActions.ts", "server/src/message/util/getUsersToNotify.ts", "server/src/bots/ApplicationSupportBot.ts", "server/src/message/new_message_tasks/maybeNotifyReferencedUsers.ts", "server/src/message/update_message_tasks/notifyReferencedUsers.ts", "server/src/message/update_message_tasks/publishUpdatedMessageEvents.ts", "server/src/message/update_message_tasks/updateMessageAttachments.ts", "server/src/message/update_message_tasks/updateMessageTask.ts", "server/src/asyncTier/jobs/generateLinkPreviews.ts", "server/src/entity/message_link_preview/MessageLinkPreviewMutator.ts", "server/src/message/new_message_tasks/scheduleGenerateLinkPreviews.tsx", "server/src/message/executeMessageTasks.ts", "server/src/entity/message_reaction/MessageReactionMutator.ts", "server/src/public/routes/platform/addGroupIDWhereOrgIDExists.ts", "server/src/admin/profiler.ts", "server/src/middleware/request_context.ts", "server/src/auth/session.ts", "common/auth/index.ts", "server/src/entity/user/ConsoleUserMutator.ts", "server/src/util/sampleTokenAppSecret.ts", "server/src/entity/email_subscription/EmailSubscriptionMutator.ts", "common/page_context/templating/handlebars.js", "server/src/public/routes/email/unsubscribe_thread/templates/handlebars.ts", "server/src/public/routes/email/unsubscribe_thread/index.ts", "server/src/public/routes/file/index.ts", "server/src/public/routes/notifications_logging/handlebars.ts", "server/src/util/redirectURI.ts", "server/src/util/notificationRedirectURI.ts", "server/src/public/routes/notifications_logging/NotificationLoggingHandler.ts", "server/src/const.ts", "server/src/public/routes/handlers/SendGridWebhookHandler.ts", "server/src/public/routes/notification-uri-test/handlebars.ts", "server/src/public/routes/notification-uri-test/NotificationRedirectURIHandler.ts", "server/src/public/routes/demo-apps/GetDemoAppsSignedTokenHandler.ts", "common/const/TeamProfiles.ts", "common/util/secondsToFormattedTimestamp.ts", "server/src/public/routes/demo-apps/utils.ts", "server/src/entity/page_visitor/PageVisitorMutator.ts", "server/src/public/routes/demo-apps/demos.ts", "server/src/public/routes/handlers/SlackLinkingConfirmationHandler.ts", "server/src/auth/encodeSlackLinkingToken.ts", "server/src/public/routes/handlers/TestbedTokensHandler.ts", "server/src/public/routes/sample-token/GetSampleSignedTokenHandler.ts", "server/src/public/routes/handlers/MondayAuthRedirectHandler.ts", "server/src/public/routes/handlers/MondayEventApiHandler.ts", "server/src/public/routes/docs-sample-token/GetDocsSampleSignedTokenHandler.ts", "server/src/public/routes/docs-sample-token/utils.ts", "server/src/public/routes/docs-sample-token/populateLiveComponents.ts", "server/src/public/routes/platform/users/DeletePlatformUserDataHandler.ts", "server/src/public/routes/platform/notifications/CreateNotificationHandler.ts", "server/src/util/selfServe.ts", "server/src/console/utils.ts", "common/const/Billing.ts", "server/src/public/routes/platform/applications/CreateApplicationHandler.ts", "server/src/public/routes/platform/threads/UpdateThreadHandler.ts", "server/src/public/routes/platform/threads/DeleteThreadHandler.ts", "server/src/public/routes/platform/messages/DeleteThreadMessageHandler.ts", "server/src/public/routes/platform/threads/ListThreadsHandler.ts", "server/src/public/routes/platform/notifications/ListNotificationsHandler.ts", "server/src/public/routes/platform/notifications/DeleteNotificationHandler.ts", "server/src/public/routes/platform/messages/UpdateThreadMessageHandler.ts", "common/util/appendMessageContent.ts", "server/src/public/routes/platform/messages/AppendMessageHandler.ts", "server/src/presence/context.ts", "server/src/presence/utils.ts", "server/src/public/routes/platform/presence/UpdateUserPresenceHandler.ts", "server/src/public/routes/handlers/Auth0LogsHandler.ts", "docs/lib/geoip/geoip.ts", "server/src/public/routes/platform/messages/ListMessagesHandler.ts", "server/src/public/routes/platform/preferences/ListUserPreferencesHandler.ts", "server/src/public/routes/platform/preferences/UpdateUserPreferencesHandler.tsx", "server/src/public/routes/platform/verify/ApplicationTokenHandler.ts", "server/src/public/routes/platform/webhooks/CreateWebhookHandler.ts", "server/src/public/routes/platform/webhooks/DeleteWebhookHandler.ts", "server/src/public/routes/warm-demo-users/DemoUserHandler.ts", "server/src/public/routes/warm-demo-users/HomepageDemoUser.ts", "opensource/sdk-js/packages/server/authToken.ts", "server/src/public/routes/platform/files/CreateFileHandler.ts", "server/src/public/routes/platform/files/util.ts", "opensource/cli/package.json", "server/src/public/routes/handlers/CliVersionHandler.ts", "server/src/public/routes/permissions/ExperimentalPlatformPermissionHandlers.ts", "server/src/public/routes/handlers/StripeWebhookHandler.ts", "server/src/util/stripe.ts", "server/src/public/routes/platform/org_members/ListPlatformOrganizationMembersHandler.ts", "server/src/public/routes/platform/customer/thoughtspot/ThoughtspotApplicationMigrationHandler.ts", "server/src/public/routes/platform/customer/community/CommunityGetUserHandler.ts", "server/src/schema/operations.ts", "server/src/schema/resolvers.ts", "server/src/public/queries/thread_by_external_id.ts", "server/src/util/graphql-iso-date.js", "server/src/util/graphql-type-uuid.js", "server/src/public/mutations/share_thread_to_email.ts", "server/src/public/mutations/util/sendErrors.ts", "server/src/public/mutations/add_thread_to_slack_channel.ts", "server/src/public/mutations/create_file.ts", "server/src/public/mutations/create_reaction.ts", "server/src/public/mutations/create_thread_message.ts", "common/page_context/util.ts", "server/src/public/mutations/delete_reaction.ts", "server/src/public/mutations/disconnect_third_party.ts", "server/src/public/mutations/log_events.ts", "server/src/public/mutations/set_file_upload_status.ts", "server/src/public/mutations/set_preference.ts", "server/src/public/mutations/set_subscribed.ts", "server/src/public/mutations/set_typing.ts", "server/src/public/mutations/update_message.ts", "server/src/public/queries/feature_flags.ts", "server/src/public/queries/ping.ts", "server/src/public/queries/task.ts", "server/src/public/queries/thread.ts", "server/src/auth/encodeSessionToJWT.ts", "server/src/public/queries/viewer.ts", "server/src/public/subscriptions/inbox.ts", "server/src/public/subscriptions/preferences.ts", "server/src/public/subscriptions/thread_events.ts", "server/src/schema/file.ts", "server/src/schema/inbox.ts", "server/src/schema/load_messages_result.ts", "server/src/schema/message.ts", "server/src/schema/message_annotation_attachment.ts", "server/src/schema/message_attachment.ts", "server/src/schema/message_file_attachment.ts", "server/src/schema/message_reaction.ts", "server/src/schema/org.ts", "server/src/schema/page_thread_added.ts", "server/src/schema/page_visitor.ts", "server/src/schema/page_visitors_updated.ts", "server/src/schema/task.ts", "server/src/schema/task_third_party_reference.ts", "server/src/schema/third_party_connection.ts", "server/src/schema/thread.ts", "server/src/schema/thread_message_added.ts", "server/src/schema/thread_message_updated.ts", "server/src/schema/thread_message_content_appended.ts", "server/src/schema/thread_participant.ts", "server/src/schema/thread_participants_updated_incremental.ts", "server/src/schema/thread_typing_users_updated.ts", "server/src/schema/user.ts", "server/src/public/mutations/refresh_file_upload_url.ts", "server/src/schema/s3_bucket.ts", "server/src/schema/heimdall_switch.ts", "server/src/public/mutations/set_deep_link_thread_id.ts", "server/src/public/mutations/clear_deep_link_thread_id.ts", "server/src/public/queries/application.ts", "server/src/schema/application.ts", "server/src/public/mutations/set_thread_resolved.ts", "server/src/schema/page_thread_resolved.ts", "server/src/schema/page_thread_unresolved.ts", "server/src/entity/slack_mirrored_thread/SlackMirroredThreadMutator.ts", "server/src/public/mutations/unlink_orgs.ts", "server/src/public/queries/annotations_on_page.ts", "server/src/public/mutations/set_annotation_visible.ts", "server/src/public/subscriptions/annotations_on_page_updated.ts", "server/src/public/mutations/reset_user_hidden_annotations.ts", "server/src/public/mutations/set_present_context.ts", "server/src/public/queries/users_by_external_id.ts", "server/src/public/mutations/mark_thread_seen.ts", "server/src/public/subscriptions/util/with_throttle.ts", "server/src/public/subscriptions/viewer_identity.ts", "server/src/public/queries/users.ts", "server/src/util/rateLimiter.ts", "server/src/public/mutations/send_sample_welcome_message.ts", "server/src/schema/console_user.ts", "server/src/schema/application_deployment_info.ts", "server/src/schema/admin_chat_user.ts", "server/src/public/queries/organization.ts", "server/src/public/queries/notifications.ts", "server/src/public/mutations/notifications/mark_notification_as_read.ts", "server/src/public/queries/activity.ts", "server/src/public/subscriptions/thread_activity_summary.ts", "server/src/schema/activity.ts", "server/src/schema/thread_message_removed.ts", "server/src/schema/thread_share_to_slack.ts", "server/src/public/mutations/set_thread_name.ts", "server/src/public/mutations/notifications/delete_notification.ts", "server/src/public/subscriptions/notification_events.ts", "server/src/schema/notification_added.ts", "server/src/schema/notification_read_state_updated.ts", "server/src/schema/customer_issue.ts", "server/src/schema/customer_issue_change.ts", "server/src/public/queries/notification_summary.ts", "server/src/public/subscriptions/util/with_transformation.ts", "server/src/public/subscriptions/notification_summary_updated.ts", "server/src/schema/notification_summary.ts", "server/src/public/mutations/set_thread_metadata.ts", "server/src/schema/thread_properties_updated.ts", "server/src/public/subscriptions/page_events_with_location.ts", "server/src/public/queries/message_by_external_id.ts", "server/src/public/mutations/log_deprecation.ts", "server/src/schema/notification_deleted.ts", "server/src/public/queries/notification_by_external_id.ts", "server/src/public/mutations/set_subscribed_by_external_id.ts", "server/src/public/mutations/update_thread_by_external_id.ts", "server/src/public/mutations/create_message_by_external_id.ts", "server/src/public/mutations/update_message_by_external_id.ts", "server/src/public/subscriptions/user_live_query.ts", "server/src/public/mutations/mark_thread_unseen_from_external_message_id.ts", "server/src/public/queries/message_content_search.ts", "server/src/public/queries/threads_at_location.ts", "server/src/schema/message_screenshot_attachment.ts", "server/src/schema/thread_created.ts", "server/src/public/mutations/hide_link_preview.ts", "server/src/public/mutations/create_thread.ts", "server/src/schema/page_thread_reply_added.ts", "server/src/public/mutations/clear_notifications_for_message.ts", "server/src/public/subscriptions/org_members_updated.ts", "server/src/schema/org_member_added.ts", "server/src/schema/org_member_removed.ts", "server/src/public/queries/org_members_by_ext_id_paginated.ts", "server/src/public/queries/organization_by_external_id.ts", "server/src/public/subscriptions/slack_connected.ts", "server/src/schema/thread_subscriber_updated.ts", "server/src/schema/customer.ts", "server/src/public/subscriptions/presence_live_query.ts", "server/src/public/mutations/mark_threads_seen.ts", "server/src/schema/thread_filterable_properties_match.ts", "server/src/schema/thread_filterable_properties_unmatch.ts", "server/src/public/schema.graphql", "server/src/public/queries/viewer_identity.ts", "server/src/schema/thread_deleted.ts", "server/src/schema/page_thread_deleted.ts", "external/src/graphql/MessageByExternalIDWithThread.graphql", "external/src/graphql/NotificationSummaryQuery.graphql", "external/src/graphql/NotificationsQuery.graphql", "external/src/graphql/OrgMembersByExtIDPaginatedQuery.graphql", "external/src/graphql/PresenceLiveQuerySubscription.graphql", "external/src/graphql/ThreadActivityQuery.graphql", "external/src/graphql/ThreadByExternalID2Query.graphql", "external/src/graphql/ThreadListQuery.graphql", "external/src/graphql/UsersByExternalIDQuery.graphql", "external/src/graphql/UsersQuery.graphql", "external/src/graphql/ViewerIdentityQuery.graphql", "common/util/convertToExternal/user.ts", "server/src/public/routes/platform/client/ClientGetViewerHandler.ts", "server/src/public/routes/platform/client/ClientGetUserHandler.ts", "server/src/public/routes/platform/client/ClientGetUsersHandler.ts", "common/util/convertToExternal/thread.ts", "server/src/public/routes/platform/client/util.ts", "server/src/public/routes/platform/client/ClientGetThreadHandler.ts", "server/src/public/routes/platform/client/ClientGetMessageHandler.ts", "server/src/public/routes/platform/client/ClientGetThreadCountsHandler.ts", "server/src/public/routes/platform/client/ClientGetThreadsHandler.ts", "server/src/public/routes/platform/client/ClientGetNotificationsHandler.ts", "common/util/convertToExternal/notification.ts", "server/src/public/routes/platform/client/ClientGetNotificationCountsHandler.ts", "server/src/public/routes/platform/client/ClientGetGroupMembersHandler.ts", "common/util/convertToExternal/presence.ts", "server/src/public/routes/platform/client/ClientGetPresenceHandler.ts", "server/src/public/routes/platform/customer/GetDbDumpHandler.ts", "server/src/public/routes/platform/customer/CopyFilesHandler.ts", "server/src/entity/message_attachment/MessageAttachmentMutator.ts", "server/src/entity/file/FileMutator.ts", "server/src/slack/message.ts", "common/util/paste.ts", "server/src/admin/routes/SlackLoginHandler.ts", "server/src/entity/slack_message/SlackMessageMutator.ts", "server/src/image_processing/badge.ts", "server/src/entity/image_variant/ImageVariantLoader.ts", "server/src/entity/image_variant/ImageVariantMutator.ts", "server/src/entity/extrernal_asset/ExternalAssetMutator.ts", "server/src/image_processing/util.ts", "server/src/image_processing/resizeOnly.ts", "server/src/asyncTier/jobs/databaseTidyUp.ts", "server/src/asyncTier/jobs/example.ts", "server/src/asyncTier/jobs/generateAWSCredentials.ts", "server/src/asyncTier/jobs/resizeProfilePicture.ts", "server/src/webhook/util.ts", "server/src/asyncTier/jobs/notifyWebhook.ts", "server/src/asyncTier/jobs/jiraRefreshTokenRotate.ts", "server/src/asyncTier/jobs/syncSlackChannelsList.ts", "server/src/asyncTier/jobs/syncSlackGreyUsers.ts", "server/src/asyncTier/jobs/wipeTemporaryTokensData.ts", "server/src/asyncTier/jobs/asyncWorkerHealthHeartbeatStaging.ts", "server/src/asyncTier/jobs/asyncWorkerHealthHeartbeatProd.ts", "server/src/asyncTier/jobs.ts", "server/src/asyncTier/asyncWorkerMain.ts"],
  "sourceRoot": "/radical/",
  "sourcesContent": ["import PgBoss from 'pg-boss';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nlet boss: PgBoss | undefined;\r\n\r\nexport function getBoss(): PgBoss {\r\n  if (boss === undefined) {\r\n    throw new Error('PgBoss has not been initialised');\r\n  }\r\n  return boss;\r\n}\r\n\r\nexport async function initBoss() {\r\n  if (boss !== undefined) {\r\n    throw new Error('PgBoss has been already initialised');\r\n  }\r\n\r\n  const logger = anonymousLogger();\r\n  const schema = `pgboss_${env.CORD_TIER}`;\r\n  const newBoss = new PgBoss({\r\n    host: env.POSTGRES_HOST,\r\n    port: Number(env.POSTGRES_PORT),\r\n    database: env.POSTGRES_DB,\r\n    user: env.POSTGRES_USER,\r\n    password: env.POSTGRES_PASSWORD,\r\n    schema,\r\n  });\r\n  newBoss.on('error', logger.exceptionLogger('pgboss error'));\r\n  await newBoss.start();\r\n  logger.info('pg-boss is ready', { schema });\r\n  boss = newBoss;\r\n  return boss;\r\n}\r\n", "// There is some TypeScript trickery in this file. It is optimised for making\r\n// the use of `magicEnv` look good. The call to `magicEnv` should look readable\r\n// and self-explanatory, and the type hints displayed by the IDE should be\r\n// useful.\r\n\r\n// Define types to declare variables as required, optional or having a default\r\n// value.  If these classes were empty, TypeScript would treat them as\r\n// interchangeable. By giving them different shapes (i.e. different members),\r\n// TypeScript will keep them apart.\r\nclass RequiredVariable {\r\n  public readonly req = true;\r\n}\r\nclass OptionalVariable {\r\n  public readonly opt = true;\r\n}\r\nclass VariableWithDefaultValue {\r\n  constructor(public readonly defaultValue: string) {}\r\n}\r\n\r\n// These are the helpers that are used by the caller of `magicEnv` to define\r\n// their environment fields.\r\nexport const required = new RequiredVariable();\r\nexport const optional = new OptionalVariable();\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const defaultValue = (defaultValue: string) =>\r\n  new VariableWithDefaultValue(defaultValue);\r\n\r\n// Here comes the main function of this module: `magicEnv`. It takes one\r\n// parameter: a JavaScript object with string keys and values of type\r\n// RequiredVariable, OptionalVariable or VariableWithDefaultValue.\r\n//\r\n// `magicEnv` is a template function, which is quite important.\r\n// `EnvDefinitionType` is the specific type of the environment definition.\r\n// That type must comply with the restriction that it is an object with string\r\n// keys and those variable types as values.  However, we will need the\r\n// *specific* type, i.e. a TypeScript type that contains the specific keys with\r\n// the corresponding value types. We get access to this type by templating this\r\n// function.\r\nexport function magicEnv<\r\n  EnvDefinitionType extends {\r\n    [key: string]:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue;\r\n  },\r\n>(\r\n  processEnv: { [key: string]: string | undefined },\r\n  envDefinition: EnvDefinitionType,\r\n) {\r\n  // Now start constructing the result of this function.\r\n  const env: Partial<{ [k in keyof EnvDefinitionType]: string }> = {};\r\n\r\n  // And now we iterate through the `envDefinition` object, which we received\r\n  // from the callback function.\r\n  for (const key of Object.keys(envDefinition) as (string &\r\n    keyof EnvDefinitionType)[]) {\r\n    // This is the value from the process environment\r\n    const value: string | undefined = processEnv[key];\r\n\r\n    // This is the value from the definition object at the top\r\n    const fieldDefinition:\r\n      | RequiredVariable\r\n      | OptionalVariable\r\n      | VariableWithDefaultValue = envDefinition[key];\r\n\r\n    if ((fieldDefinition as any).req) {\r\n      // This is a required variable.\r\n\r\n      if (value === undefined) {\r\n        throw new Error(`Missing key ${key} in environment`);\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    } else if ((fieldDefinition as any).opt) {\r\n      // This is an optional variable. `value` may be a string or undefined.\r\n\r\n      env[key] = value;\r\n    } else {\r\n      // This is a variable with a default value (the value of\r\n      // `fieldDefinition`)\r\n\r\n      if (value === undefined) {\r\n        env[key] = (fieldDefinition as VariableWithDefaultValue).defaultValue;\r\n      } else {\r\n        env[key] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the `env` object that we have just constructed, but return with a\r\n  // special type that we define here: it is an object which contains all the\r\n  // keys that the definition object has. The value type is `string`, except\r\n  // for fields that correspond to optional variables, those have type\r\n  // `string | undefined`. All fields are declared readonly.\r\n  return env as {\r\n    readonly [k in keyof EnvDefinitionType]: EnvDefinitionType[k] extends OptionalVariable\r\n      ? string | undefined\r\n      : string;\r\n  };\r\n}\r\n", "import {\r\n  magicEnv,\r\n  required,\r\n  optional,\r\n  defaultValue,\r\n} from 'server/src/config/MagicEnv.ts';\r\n\r\nexport default magicEnv(process.env, {\r\n  // `process.env.NODE_ENV` is used in our code, but also in many third party\r\n  // libraries we import, to switch between development and production mode.\r\n  // Just to make sure it is set in the process environment, we include it here.\r\n  NODE_ENV: required,\r\n\r\n  // Normally one of `prod`, `staging`, `dev`, `test`, or `loadtest`\r\n  CORD_TIER: required,\r\n\r\n  // Accept connections on these ports\r\n  API_SERVER_PORT: optional,\r\n  ADMIN_SERVER_PORT: optional,\r\n  METRICS_SERVER_PORT: optional,\r\n  STATUS_SERVER_PORT: optional,\r\n  CONSOLE_SERVER_PORT: optional,\r\n  DOCS_SERVER_PORT: optional,\r\n\r\n  // PostgreSQL connection configuration - required\r\n  POSTGRES_HOST: required,\r\n  POSTGRES_PORT: required,\r\n  POSTGRES_USER: required,\r\n  POSTGRES_PASSWORD: required,\r\n  POSTGRES_DB: required,\r\n\r\n  // PostgreSQL read-only server, if there is one (user/password/db setting same\r\n  // as above)\r\n  POSTGRES_READ_HOST: optional,\r\n  POSTGRES_READ_PORT: optional,\r\n\r\n  // Redis connection configuration\r\n  REDIS_PORT: required,\r\n  REDIS_HOST: required,\r\n  PREDIS_PORT: required,\r\n  PREDIS_HOST: required,\r\n\r\n  // URLs pointing to our own endpoints\r\n  TOP_SERVER_HOST: required,\r\n  APP_SERVER_HOST: required,\r\n  API_SERVER_HOST: required,\r\n  API_SERVER_HOST_PRODUCTION: required,\r\n  ADMIN_SERVER_HOST: required,\r\n  MARKETING_SERVER_HOST: required,\r\n  PUBLIC_UPLOADS_HOST: required,\r\n  CONSOLE_SERVER_HOST: required,\r\n  CORD_TO_HOST: required,\r\n  DOCS_SERVER_HOST: required,\r\n  CLACK_SERVER_HOST: optional,\r\n  COMMUNITY_SERVER_HOST: required,\r\n\r\n  // Slack App credentials - required\r\n  SLACK_APP_CLIENT_SECRET: required,\r\n  SLACK_DEV_APP_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_LOGIN_REDIRECT_HOST: optional,\r\n  SLACK_APP_REDIRECT_HOST: optional,\r\n  SLACK_SIGNING_SECRET: required,\r\n  SLACK_ADMIN_CLIENT_SECRET: required,\r\n  SLACK_ADMIN_SIGNING_SECRET: required,\r\n  SLACK_INTERNAL_BOT_TOKEN: required,\r\n  SLACK_INTERNAL_SIGNING_SECRET: required,\r\n  SLACK_CUSTOMER_UPDATES_BOT_TOKEN: required,\r\n\r\n  // S3 Bucket File storage\r\n  S3_ACCESS_KEY_ID: optional,\r\n  S3_ACCESS_KEY_SECRET: optional,\r\n  S3_REGION: required,\r\n  S3_BUCKET: required,\r\n  S3_PUBLIC_BUCKET: required,\r\n  S3_ENDPOINT: required,\r\n  S3_USE_PATH_BASED_URLS: required,\r\n\r\n  EMAIL_LINKS_TOKEN_SECRET: required,\r\n\r\n  // Jira App credentials - required\r\n  JIRA_APP_CLIENT_ID: required,\r\n  JIRA_APP_CLIENT_SECRET: required,\r\n\r\n  // Asana App credentials - required\r\n  ASANA_APP_CLIENT_ID: required,\r\n  ASANA_APP_CLIENT_SECRET: required,\r\n\r\n  // Linear App credentials - required\r\n  LINEAR_APP_CLIENT_ID: required,\r\n  LINEAR_APP_CLIENT_SECRET: required,\r\n\r\n  // Trello App credentials - required\r\n  TRELLO_APP_CLIENT_ID: required,\r\n  TRELLO_APP_CLIENT_SECRET: required,\r\n\r\n  // Monday App credentials - required\r\n  MONDAY_APP_CLIENT_ID: required,\r\n  MONDAY_APP_CLIENT_SECRET: required,\r\n\r\n  // Secret for session tokens - required\r\n  JWT_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing OAuth flow state variables encoding the user and org IDs\r\n  OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Secret for signing Slack OAuth flow state variables encoding the user and org IDs\r\n  SLACK_OAUTH_STATE_SIGNING_SECRET: required,\r\n\r\n  // Log level for console logging - optional ('info' if not provided)\r\n  LOGLEVEL: defaultValue('info'),\r\n\r\n  // Post error messages to this Slack channel,\r\n  CORD_OPS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post informational changes to prod setup, including deploy and db migration\r\n  // messages, to this Slack channel\r\n  PROD_CHANGES_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post security/SOC2 compliance messages to this Slack channel,\r\n  CORD_SECURITY_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post info about go redirects to this Slack channel\r\n  CORD_GO_REDIRECTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post messages from customers to this Slack channel\r\n  CORD_ALL_CUSTOMERS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Post client request messages to this Slack channel\r\n  CORD_CLIENT_REQUESTS_SLACK_CHANNEL_ID: optional,\r\n\r\n  // For sending search queries from the docs site to Slack\r\n  CORD_DOCS_SEARCH_SLACK_CHANNEL_ID: optional,\r\n\r\n  // Cloudwatch config - optional. If these are not provided, Cloudwatch\r\n  // logging is disabled\r\n  CLOUDWATCH_LOGLEVEL: optional,\r\n  CLOUDWATCH_AWS_REGION: defaultValue('eu-west-2'), // our default region, London\r\n  CLOUDWATCH_LOG_GROUP_NAME: optional,\r\n  CLOUDWATCH_LOG_STREAM_NAME: optional,\r\n\r\n  // Host used when developing locally but an externally accessible url is\r\n  // needed. (example: d92dd1d1fa99.ngrok.io)\r\n  EXTERNAL_API_HOST_FOR_DEVELOPMENT: optional,\r\n\r\n  // path to static files for the admin app\r\n  ADMIN_SERVER_STATIC_PATH: defaultValue('dist/server/admin'),\r\n\r\n  // path to static files for the console app\r\n  CONSOLE_SERVER_STATIC_PATH: defaultValue('dist/server/console'),\r\n\r\n  // path to static files for the docs app\r\n  DOCS_SERVER_STATIC_PATH: defaultValue('dist/docs/static'),\r\n\r\n  // API key used to send transactional email notifications through Sendgrid.\r\n  SENDGRID_API_KEY: required,\r\n\r\n  // HTTP Basic Auth name and password for SendGrid's Inbound Parse webhooks\r\n  SENDGRID_INBOUND_WEBHOOK_USER: required,\r\n  SENDGRID_INBOUND_WEBHOOK_PASSWORD: required,\r\n\r\n  // API key used to fetch feature flags from LaunchDarkly\r\n  LAUNCHDARKLY_API_KEY: optional,\r\n\r\n  // Number of extra workers to run the api server in: 'auto' makes one per CPU; otherwise a specific number can be used\r\n  NUM_WORKERS: optional,\r\n\r\n  // Encryption key used when storing secrets in the database\r\n  PLATFORM_SECRETS_ENCRYPTION_KEY: required,\r\n\r\n  // Encryption key used when generating file permalinks\r\n  FILE_PROXY_SIGNING_SECRET_KEY: required,\r\n\r\n  // sentry.io environment setting\r\n  SENTRY_ENVIRONMENT: optional,\r\n  SENTRY_RELEASE: optional,\r\n  SENTRY_TRACE_SAMPLE_RATE: optional,\r\n\r\n  // Auth0 Environment variables\r\n  // 1) For SPA application\r\n  AUTH0_CLIENT_ID: required,\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN: required,\r\n\r\n  // 2) For verifying incoming events\r\n  AUTH0_WEBHOOK_SECRET: required,\r\n\r\n  // 3) For server to server communication\r\n  AUTH0_MTM_CLIENT_ID: required,\r\n  AUTH0_MTM_CLIENT_SECRET: required,\r\n  AUTH0_GENERAL_DOMAIN: required,\r\n\r\n  // console.cord.com cord app credentials\r\n  DEV_CONSOLE_CORD_APP_SECRET: required,\r\n\r\n  // secret for signing admin tokens to serve as proof user is logged in to\r\n  // admin\r\n  ADMIN_TOKEN_SECRET: required,\r\n\r\n  // flag whether the SDK testbed should be built and served\r\n  INCLUDE_SDK_TESTBED: optional,\r\n\r\n  // secret for cookies on the docs web site\r\n  DOCS_COOKIE_PARSER_SECRET: optional,\r\n\r\n  // set email for all notifications when testing with users on testbed\r\n  TESTBED_USERS_EMAIL: optional,\r\n\r\n  // secret for creating searchable embeddings and generating search\r\n  // results within our docs\r\n  OPENAI_API_SECRET: required,\r\n\r\n  // secret for getting geographic information from an IP address\r\n  IPSTACK_API_SECRET: optional,\r\n\r\n  // Host for where we generate the ai chat bot in the docs\r\n  DOCS_AI_CHATBOT_SERVER_HOST: required,\r\n\r\n  // Google analytic events\r\n  GA_MEASUREMENT_ID: required,\r\n  GA_MEASUREMENT_PROTOCOL_API_SECRET: required,\r\n\r\n  // secret for stripe\r\n  STRIPE_SECRET_KEY: required,\r\n  STRIPE_WEBHOOK_SECRET_KEY: required,\r\n\r\n  DEMO_APPS_SHARED_SECRET: required,\r\n\r\n  // loops.so for sending newletters\r\n  LOOPS_SO_API_KEY: required,\r\n});\r\n", "import { hostname, userInfo } from 'os';\r\nimport { serializeError } from 'serialize-error';\r\nimport winston from 'winston';\r\nimport WinstonCloudWatch from 'winston-cloudwatch';\r\nimport Transport from 'winston-transport';\r\nimport * as Sentry from '@sentry/node';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport '@sentry/tracing';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { flatFormat } from 'server/src/logging/flatFormat.ts';\r\nimport packageData from 'package.json';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { JsonObject } from 'common/types/index.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker') and\r\n// `BUILDCONSTANTS.sentryDSN` with either `undefined` or a string value for a\r\n// Sentry DSN\r\ndeclare const BUILDCONSTANTS: {\r\n  loggingProcessName: string;\r\n  sentryDSN: undefined | string;\r\n};\r\n\r\n// The loglevel for the console output can be specified using the environment\r\n// variable `LOGLEVEL`\r\nconst logLevel = env.LOGLEVEL;\r\n\r\nconst defaultMeta: any = {\r\n  process: BUILDCONSTANTS.loggingProcessName,\r\n  serverVersion: packageData.version,\r\n  serverGitCommit: process.env.COMMIT_HASH || process.env.npm_package_gitHead,\r\n  serverHost: hostname(),\r\n};\r\n\r\nif (process.env.CORD_WORKER_NAME) {\r\n  defaultMeta.workerName = process.env.CORD_WORKER_NAME;\r\n}\r\n\r\n// Sentry logging\r\nconst sentryLogging = !!(BUILDCONSTANTS.sentryDSN && env.SENTRY_ENVIRONMENT);\r\nif (sentryLogging) {\r\n  Sentry.init({\r\n    dsn: BUILDCONSTANTS.sentryDSN,\r\n    environment: env.SENTRY_ENVIRONMENT,\r\n    release: env.SENTRY_RELEASE,\r\n    tracesSampleRate: parseFloat(env.SENTRY_TRACE_SAMPLE_RATE ?? '0'),\r\n    attachStacktrace: true,\r\n    normalizeDepth: 10,\r\n  });\r\n}\r\n\r\n// Winston logging\r\nconst winstonLogger = winston.createLogger({ defaultMeta });\r\n\r\nwinstonLogger.add(\r\n  new winston.transports.Console({\r\n    level: logLevel,\r\n    format: winston.format.combine(winston.format.timestamp(), flatFormat()),\r\n    handleExceptions: true,\r\n  }),\r\n);\r\n\r\n// Keep track of logging in a Prometheus metric. The cleanest way to do this is\r\n// by adding a separate transport, because that allows us to set the loglevel\r\n// for this independently. No matter what `env.LOGLEVEL` is set to, the\r\n// Prometheus metric keeps track of *all* log messages, even the 'silly' ones.\r\n// ('silly' is the name of the lowest loglevel in Prometheus.)\r\nconst counter = Counter({\r\n  name: 'ServerLogging',\r\n  help: 'Number of log messages emitted by server',\r\n  labelNames: ['level'],\r\n});\r\n\r\nconst LEVEL = Symbol.for('level');\r\nclass MetricLogger extends Transport {\r\n  log(info: any, next: () => void) {\r\n    counter.inc({ level: info[LEVEL] });\r\n    next();\r\n  }\r\n}\r\n\r\nexport type LoggingTags = { [tag: string]: number | string | boolean };\r\n\r\nwinstonLogger.add(new MetricLogger({ level: 'silly' }));\r\n\r\n// CloudWatch logging is configured via the environment\r\nlet winstonCW: WinstonCloudWatch | undefined = undefined;\r\nif (env.CLOUDWATCH_LOGLEVEL && !process.env.IS_TEST) {\r\n  if (!env.CLOUDWATCH_LOG_GROUP_NAME) {\r\n    throw new Error(\r\n      `CloudWatch logging is enabled (CLOUDWATCH_LOGLEVEL is set), so\r\n       CLOUDWATCH_LOG_GROUP_NAME must be provided, too!`,\r\n    );\r\n  }\r\n\r\n  // CloudWatch stream names must not contain ':' or '*' characters\r\n  const defaultStreamName = () =>\r\n    `${new Date().toISOString().replace(/:/g, '.')} ${\r\n      userInfo().username\r\n    } ${hostname()}(${process.pid})`;\r\n\r\n  winstonCW = new WinstonCloudWatch({\r\n    // \"name\" is optional with default value \"CloudWatch\" but the\r\n    // typedefinition has name as required. See\r\n    // https://githubmemory.com/repo/lazywithclass/winston-cloudwatch/issues/155\r\n    name: 'CloudWatch',\r\n    level: env.CLOUDWATCH_LOGLEVEL,\r\n    logGroupName: env.CLOUDWATCH_LOG_GROUP_NAME,\r\n    logStreamName: env.CLOUDWATCH_LOG_STREAM_NAME || defaultStreamName(),\r\n    awsRegion: env.CLOUDWATCH_AWS_REGION,\r\n    jsonMessage: true,\r\n  });\r\n  winstonLogger.add(winstonCW);\r\n} else {\r\n  if (env.CLOUDWATCH_LOG_GROUP_NAME || env.CLOUDWATCH_LOG_STREAM_NAME) {\r\n    throw new Error(\r\n      `Some CLOUDWATCH_* variables are set, but CLOUDWATCH_LOGLEVEL is not.`,\r\n    );\r\n  }\r\n}\r\n\r\nexport function flushAndCloseWinstonCloudWatch() {\r\n  if (winstonCW) {\r\n    return new Promise<void>((resolve, _reject) => {\r\n      winstonCW!.kthxbye((_err) => resolve());\r\n    });\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst SENTRY_LOG_LEVEL: Record<string, Sentry.SeverityLevel | undefined> = {\r\n  error: 'error',\r\n  warn: 'warning',\r\n};\r\n\r\nconst cleanupSequelizeError = (error: any) => {\r\n  // remove references to the instance object as they contain deep SQL information\r\n  // like db password, etc\r\n  const suberrors = error.errors;\r\n  if (Array.isArray(suberrors)) {\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    suberrors.forEach((error) => delete error.instance);\r\n  }\r\n};\r\n\r\nconst MAX_ORG_IDS_TO_LOG = 50;\r\n\r\nexport class Logger {\r\n  private readonly truncatedViewer: Record<string, unknown>;\r\n  private readonly metadata: JsonObject;\r\n  private appName: string | undefined;\r\n\r\n  constructor(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    this.truncatedViewer = { ...viewer };\r\n    this.metadata = { ...defaultMeta, ...additionalMeta };\r\n\r\n    if (\r\n      viewer.relevantOrgIDs &&\r\n      viewer.relevantOrgIDs.length > MAX_ORG_IDS_TO_LOG\r\n    ) {\r\n      this.truncatedViewer.relevantOrgIDs = [\r\n        ...viewer.relevantOrgIDs.slice(0, MAX_ORG_IDS_TO_LOG),\r\n        `(truncated from ${viewer.relevantOrgIDs.length} orgs)`,\r\n      ];\r\n    }\r\n\r\n    void this.addAppName(viewer);\r\n  }\r\n\r\n  public childLogger(viewer: Viewer, additionalMeta?: JsonObject) {\r\n    return new Logger(viewer, { ...this.metadata, ...additionalMeta });\r\n  }\r\n\r\n  private viewerToLog() {\r\n    return {\r\n      ...this.truncatedViewer,\r\n      ...(this.appName && { appName: this.appName }),\r\n    };\r\n  }\r\n\r\n  public log(\r\n    level: 'debug' | 'info' | 'warn' | 'error',\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    if (sentryLogging && !process.env.IS_TEST) {\r\n      const sentryLevel = SENTRY_LOG_LEVEL[level];\r\n      if (sentryLevel) {\r\n        const sentryEventID = Sentry.captureMessage(message, {\r\n          level: sentryLevel,\r\n          extra: { ...defaultMeta, ...meta },\r\n          tags: { loggingProcessName: BUILDCONSTANTS.loggingProcessName },\r\n          fingerprint: options?.sentryFingerPrint,\r\n          user: this.viewerToLog(),\r\n        });\r\n        meta = { ...this.metadata, ...meta, sentryEventID };\r\n      }\r\n    }\r\n\r\n    winstonLogger.log(level, message, {\r\n      viewer: this.viewerToLog(),\r\n      ...this.metadata,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  public debug(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('debug', message, meta, options);\r\n  }\r\n\r\n  public info(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('info', message, meta, options);\r\n  }\r\n\r\n  public warn(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('warn', message, meta, options);\r\n  }\r\n\r\n  public error(\r\n    message: string,\r\n    meta?: JsonObject,\r\n    options?: { sentryFingerPrint?: string[] },\r\n  ) {\r\n    this.log('error', message, meta, options);\r\n  }\r\n\r\n  public logLoggerInfo() {\r\n    this.info(\r\n      `Logging through winston. Console log level set to \"${logLevel}\", CloudWatch logging is ${\r\n        env.CLOUDWATCH_LOGLEVEL === undefined\r\n          ? 'disabled'\r\n          : `set to \"${env.CLOUDWATCH_LOGLEVEL}\"`\r\n      }`,\r\n    );\r\n  }\r\n\r\n  /**\r\n  Useful when dealing with promises:\r\n\r\n  ```\r\n  promise.catch(exceptionLogger('something broke'))\r\n  ```\r\n*/\r\n  public exceptionLogger =\r\n    (message: string, meta?: JsonObject, tags?: LoggingTags) => (error: any) =>\r\n      this.logException(\r\n        message,\r\n        error,\r\n        { ...this.metadata, ...meta },\r\n        tags,\r\n        'error',\r\n      );\r\n\r\n  /**\r\n  To be used imperatively:\r\n\r\n  ```\r\n  try {\r\n    // ...\r\n  } catch (e) {\r\n    logException('something broke', e)\r\n  }\r\n  ```\r\n*/\r\n  public logException(\r\n    message: string,\r\n    error: any,\r\n    meta?: JsonObject,\r\n    tags?: LoggingTags,\r\n    level: 'debug' | 'info' | 'warn' | 'error' = 'error',\r\n  ) {\r\n    // Make a good effort to produce a nice error log message from the given\r\n    // `message`, `error` (and optionally `meta`), but make sure that those\r\n    // efforts don't sabotage the logging, i.e. if something throws on the way,\r\n    // catch the error and make sure _something_ gets logged.\r\n    if (error.name?.startsWith('Sequelize')) {\r\n      cleanupSequelizeError(error);\r\n    }\r\n\r\n    let serializedError: any = undefined;\r\n    try {\r\n      serializedError = serializeError(error, { maxDepth: 50 });\r\n    } catch (e) {\r\n      winstonLogger.log(\r\n        level,\r\n        `logException: serializeError threw an exception (${message})`,\r\n        {\r\n          error: `${error}`,\r\n          viewer: this.viewerToLog(),\r\n          ...this.metadata,\r\n          ...meta,\r\n        },\r\n      );\r\n    }\r\n\r\n    if (serializedError !== undefined) {\r\n      // If serializing the error above failed, we have already logged a simple\r\n      // error representation to Winston above.\r\n      if (!message) {\r\n        try {\r\n          message = `${serializedError.name}: ${serializedError.message}`;\r\n        } catch (e) {\r\n          message = `${serializedError}`;\r\n        }\r\n      }\r\n\r\n      winstonLogger.log(level, message, {\r\n        error: serializedError,\r\n        viewer: this.viewerToLog(),\r\n        ...this.metadata,\r\n        ...meta,\r\n      });\r\n    }\r\n\r\n    if ((level === 'warn' || level === 'error') && !process.env.IS_TEST) {\r\n      Sentry.withScope((scope) => {\r\n        scope.setTags({\r\n          ...(error instanceof CordError && error.loggingTags),\r\n          ...tags,\r\n        });\r\n        // serializedError is undefined, if serializing failed\r\n        if (serializedError && error instanceof CordError) {\r\n          // Remove these properties, they'll get attached under other names\r\n          delete serializedError.loggingMetadata;\r\n          delete serializedError.loggingTags;\r\n        }\r\n        scope.setExtra('error', serializedError);\r\n\r\n        scope.setExtra('message', message);\r\n        scope.setExtra('meta', {\r\n          ...this.metadata,\r\n          ...(error instanceof CordError && error.loggingMetadata),\r\n          ...meta,\r\n        });\r\n        scope.setExtra('user', this.viewerToLog());\r\n\r\n        // We hand the original error object to Sentry\r\n        Sentry.captureException(error, {\r\n          level: SENTRY_LOG_LEVEL[level],\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private async addAppName(viewer: Viewer) {\r\n    if (!viewer?.platformApplicationID) {\r\n      return;\r\n    }\r\n\r\n    const app = await ApplicationEntity.findByPk(viewer.platformApplicationID);\r\n    this.appName = app?.name;\r\n  }\r\n}\r\n\r\nlet _anonymousLogger: Logger | undefined = undefined;\r\nexport function anonymousLogger() {\r\n  if (_anonymousLogger === undefined) {\r\n    _anonymousLogger = new Logger(Viewer.createAnonymousViewer());\r\n  }\r\n  return _anonymousLogger;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  UUID,\r\n  CustomLinks,\r\n  CustomNUX,\r\n  ApplicationEnvironment,\r\n} from 'common/types/index.ts';\r\nimport { getTypedFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { FeatureFlags } from 'common/const/FeatureFlags.ts';\r\n\r\nexport type CustomEmailTemplate = {\r\n  partnerName: string;\r\n  imageURL: string;\r\n  sender?: string;\r\n  logoConfig?: { height: string; width: string };\r\n};\r\n\r\nexport type ApplicationTierType = 'free' | 'starter' | 'premium';\r\n\r\nexport type CustomSlackAppDetails = {\r\n  clientID: string;\r\n  clientSecret: string;\r\n  signingSecret: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'applications',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customEmailTemplate!: CustomEmailTemplate | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: true,\r\n  })\r\n  enableEmailNotifications!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customLinks!: CustomLinks | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customS3Bucket!: UUID | null; // the s3 bucket to be used for this application\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  segmentWriteKey!: string | null; // the Segment Write key we use to write partner events\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  customNUX!: CustomNUX | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  iconURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'starter', 'premium'),\r\n    defaultValue: 'free',\r\n    allowNull: false,\r\n  })\r\n  type!: ApplicationTierType;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'production',\r\n      'staging',\r\n      'sample',\r\n      'sampletoken',\r\n      'demo',\r\n    ),\r\n    defaultValue: 'production',\r\n    allowNull: false,\r\n  })\r\n  environment!: ApplicationEnvironment;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportOrgID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  supportBotID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  supportSlackChannelID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  redirectURI!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  slackConnectAllOrgs!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookSubscriptions!: string[] | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: null,\r\n  })\r\n  customSlackAppDetails!: CustomSlackAppDetails | null;\r\n\r\n  public async isSupportChatEnabled(): Promise<boolean> {\r\n    const isSupportFlagEnabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.SUPPORT_CHAT_ENABLED,\r\n      {\r\n        userID: 'anonymous',\r\n        orgID: undefined,\r\n        platformApplicationID: this.id,\r\n        version: null,\r\n        customerID: this.customerID,\r\n      },\r\n    );\r\n\r\n    return Boolean(\r\n      isSupportFlagEnabled &&\r\n        this.supportBotID &&\r\n        this.supportOrgID &&\r\n        this.supportSlackChannelID,\r\n    );\r\n  }\r\n\r\n  public getCustomSlackAppDetails(): CustomSlackAppDetails | null {\r\n    const details = this.customSlackAppDetails;\r\n\r\n    if (\r\n      details &&\r\n      typeof details === 'object' &&\r\n      !Array.isArray(details) &&\r\n      typeof details.clientID === 'string' &&\r\n      typeof details.clientSecret === 'string' &&\r\n      typeof details.signingSecret === 'string'\r\n    ) {\r\n      return {\r\n        clientID: details.clientID,\r\n        clientSecret: details.clientSecret,\r\n        signingSecret: details.signingSecret,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n", "import * as LaunchDarkly from '@launchdarkly/node-server-sdk';\r\nimport type {\r\n  ApplicationEnvironment,\r\n  SimpleValue,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { FeatureFlags as CommonFeatureFlags } from 'common/const/FeatureFlags.ts';\r\nimport type { FeatureFlag } from 'common/const/FeatureFlags.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n  DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n  DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n} from 'server/src/email/index.ts';\r\n\r\nlet client: LaunchDarkly.LDClient | undefined = undefined;\r\nlet clientReady = false;\r\n\r\n// ADD NEW FLAGS HERE IF THEY ARE ONLY USED SERVER-SIDE.\r\n// If the new flag is also going to be used client side (in external/)\r\n// then add your new flag in common/const/FeatureFlags.ts\r\n//\r\n// See more explanation on how to define in flags in:\r\n// common/const/FeatureFlags.ts\r\nconst ServerOnlyFeatureFlags = {\r\n  QUERY_PARAM_DEEP_LINKS: {\r\n    key: 'query_param_deep_links',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'query_param_deep_links', boolean>,\r\n  NOTIFY_PAGE_VISITORS_OF_EVERY_MESSAGE: {\r\n    key: 'notify_page_visitors_of_every_new_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'notify_page_visitors_of_every_new_message', boolean>,\r\n  USER_IS_BLOCKED: {\r\n    key: 'user_is_blocked',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'user_is_blocked', boolean>,\r\n  SHOW_CORD_COPY_IN_TASKS: {\r\n    key: 'show-cord-copy-in-tasks',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-cord-copy-in-tasks', boolean>,\r\n  LOADER_CACHES: {\r\n    key: 'loader_caches',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'loader_caches', boolean>,\r\n  SUBSCRIBE_ALL_ORG_MEMBERS: {\r\n    key: 'subscribe_all_org_members',\r\n    defaultValue: false,\r\n  },\r\n  WRITE_TO_EVENTS_TABLE: {\r\n    key: 'write_to_events_table',\r\n    defaultValue: true,\r\n  },\r\n  ALLOW_MAGIC_GRAPHQL_ORG_ID_OVERRIDE: {\r\n    key: 'allow-magic-graph-ql-org-id-override',\r\n    defaultValue: true,\r\n  },\r\n  GRANULAR_PERMISSIONS: {\r\n    key: 'granular-permissions',\r\n    defaultValue: false,\r\n  },\r\n  SKIP_PUBLISH_USER_IDENTITY_UPDATE: {\r\n    key: 'skip_publish_user_identity_update',\r\n    defaultValue: false,\r\n  },\r\n  RATE_LIMITS: {\r\n    key: 'rate_limits',\r\n    defaultValue: { maxCount: 50000, seconds: 5 * 60 },\r\n  },\r\n  EMAIL_NOTIFICATION_TEMPLATE_ID: {\r\n    key: 'email-notification-template-id',\r\n    defaultValue: {\r\n      mention: DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n      share_to_email: DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n      thread_resolve: DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n    },\r\n  },\r\n} as const;\r\n\r\nexport const FeatureFlags = {\r\n  ...CommonFeatureFlags,\r\n  ...ServerOnlyFeatureFlags,\r\n} as const satisfies {\r\n  [key: string]: FeatureFlag<string, SimpleValue | object>;\r\n};\r\n\r\ntype MockClient =\r\n  | undefined\r\n  | ((\r\n      key: string,\r\n      user: FlagsUser,\r\n    ) => Promise<boolean | string | number | null>);\r\n// This is used in our test environments\r\nlet mockClient: MockClient;\r\n\r\nexport async function initFeatureFlags() {\r\n  if (client) {\r\n    throw new Error('Feature flags already initialized');\r\n  }\r\n  if (!env.LAUNCHDARKLY_API_KEY) {\r\n    return;\r\n  }\r\n  client = LaunchDarkly.init(env.LAUNCHDARKLY_API_KEY);\r\n  await client.waitForInitialization();\r\n  clientReady = true;\r\n}\r\n\r\nexport function closeFeatureFlags() {\r\n  if (client) {\r\n    client.close();\r\n    client = undefined;\r\n    clientReady = false;\r\n  }\r\n}\r\n\r\nexport type FlagsUser = {\r\n  userID: UUID | 'anonymous';\r\n  orgID?: UUID;\r\n  platformApplicationID: UUID | 'extension' | 'console';\r\n  version: string | null;\r\n  customerID?: UUID;\r\n  appEnvironment?: ApplicationEnvironment;\r\n};\r\n\r\n/**\r\n * Prefer flagsUserFromContext if you have a full context, as it has more info\r\n * in it.\r\n */\r\nexport function flagsUserFromViewer(viewer: Viewer): FlagsUser {\r\n  return {\r\n    userID: viewer.userID ?? 'anonymous',\r\n    orgID: viewer.orgID,\r\n    platformApplicationID: viewer.platformApplicationID ?? 'extension',\r\n    version: null,\r\n  };\r\n}\r\n\r\nexport function flagsUserFromContext(context: RequestContext): FlagsUser {\r\n  return {\r\n    ...flagsUserFromViewer(context.session.viewer),\r\n    version: context.clientVersion,\r\n    customerID: context.application?.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * For the REST API etc where there isn't a user. Prefer one of the other\r\n * functions if there is a user.\r\n */\r\nexport function flagsUserFromApplication(app: ApplicationEntity): FlagsUser {\r\n  return {\r\n    userID: 'anonymous',\r\n    platformApplicationID: app.id,\r\n    version: null,\r\n    customerID: app.customerID,\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the value of the given feature flag in LaunchDarkly for the given\r\n * user, or the default value if LaunchDarkly cannot be reached for any reason.\r\n */\r\nexport async function getTypedFeatureFlagValue<\r\n  K extends (typeof FeatureFlags)[keyof typeof FeatureFlags]['key'],\r\n  T,\r\n>(feature: FeatureFlag<K, T>, user: FlagsUser): Promise<T> {\r\n  const value = (await getFeatureFlagValue(feature.key, user)) as T | null;\r\n  return value === null ? feature.defaultValue : value;\r\n}\r\n\r\nexport async function getFeatureFlagValue(key: string, user: FlagsUser) {\r\n  // To allow us to mock feature flags for our tests\r\n  if (mockClient) {\r\n    return await mockClient(key, user);\r\n  }\r\n  if (!client || !clientReady) {\r\n    return null;\r\n  }\r\n  const versionValue = versionToNumber(user.version);\r\n  const ldUser = {\r\n    // The choice of delimiter here is restricted by LaunchDarkly's website\r\n    // currently being flaky for users with a key that contains characters that\r\n    // need to be percent-encoded, so we need to choose something that doesn't\r\n    // get encoded.\r\n    key: user.orgID ? `${user.userID}_${user.orgID}` : user.userID,\r\n    custom: {\r\n      userID: user.userID,\r\n      ...(user.orgID && { orgID: user.orgID }),\r\n      platformApplicationID: user.platformApplicationID,\r\n      ...(versionValue && { version: versionValue }),\r\n      ...(user.customerID && { customerID: user.customerID }),\r\n      ...(user.appEnvironment && { appEnvironment: user.appEnvironment }),\r\n    },\r\n  };\r\n  return await (client.variation(key, ldUser, null) as Promise<\r\n    boolean | string | number | null\r\n  >);\r\n}\r\n\r\nfunction versionToNumber(version: string | null): number | null {\r\n  if (!version) {\r\n    return null;\r\n  }\r\n  if (version.startsWith('dev-')) {\r\n    return -1;\r\n  }\r\n  const match = version.match(/^(\\d+)[.](\\d+)[.](\\d+)$/);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  return 100000 * (parseInt(match[1], 10) - 1) + parseInt(match[2], 10);\r\n}\r\n\r\nexport function initMockFeatureFlagForTest(fn: MockClient) {\r\n  mockClient = fn;\r\n}\r\n", "// ADD NEW FLAGS HERE ONLY IF YOU NEED THEM ON THE CLIENT-SIDE\r\n// If the new flag is only used server-side then add your new flag in:\r\n// server/src/featureflags/index.ts\r\n// If you need to use them in BOTH the client AND the server, you only need\r\n// to add them once, in this file.\r\n//\r\n// Ensure they're set up in LaunchDarkly before you add them here.  The key for\r\n// the flag must match the key in LaunchDarkly.\r\n//\r\n// The full set of valid values for a flag should be in the second type argument\r\n// to FeatureFlag, so if you have a three-state feature flag of \"yes\", \"no\", and\r\n// \"maybeso\", you should declare it as:\r\n//\r\n// MULTI_STATE_FLAG: {\r\n//   key: 'multi_state_flag',\r\n//   defaultValue: 'no',\r\n// } as FeatureFlag<'multi_state_flag', 'yes' | 'no' | 'maybeso'>\r\nexport const FeatureFlags = {\r\n  USE_NEW_CSS_COMPONENTS: {\r\n    key: 'Use_new_CSS_components',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'Use_new_CSS_components', Record<string, object>>,\r\n  SUPPORT_CHAT_ENABLED: {\r\n    key: 'support_chat_enabled',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'support_chat_enabled', boolean>,\r\n  ENABLE_ANNOTATIONS_SCREENSHOTS: {\r\n    key: 'enable_annotations_screenshots',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_screenshots', boolean>,\r\n  ENABLE_PLAINTEXT_ANNOTATIONS: {\r\n    key: 'enable_plaintext_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_plaintext_annotations', boolean>,\r\n  ENABLE_ATTACHMENTS: {\r\n    key: 'enable_attachments',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_attachments', boolean>,\r\n  EMAIL_SHARING: {\r\n    key: 'email_sharing',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'email_sharing', boolean>,\r\n  ENABLE_FORCE_REFRESH_PROVIDER: {\r\n    key: 'enable_force_refresh_provider',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_force_refresh_provider', boolean>,\r\n  MONDAY_TASKS: {\r\n    key: 'monday_tasks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'monday_tasks', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_CREATING_THREAD: {\r\n    key: 'take_screenshot_when_creating_thread',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_creating_thread', boolean>,\r\n  TAKE_SCREENSHOT_WHEN_SENDING_MESSAGE: {\r\n    key: 'take_screenshot_when_sending_message',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_when_sending_message', boolean>,\r\n  OPEN_THREAD_SAME_PAGE: {\r\n    key: 'open_thread_same_page',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'open_thread_same_page', boolean>,\r\n  SHOW_ACTIVATION_WELCOME_MESSAGE_NUX: {\r\n    key: 'show_activation_welcome_message_nux',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show_activation_welcome_message_nux', boolean>,\r\n  ENABLE_SLACK_FEATURES: {\r\n    key: 'enable-slack-features',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable-slack-features', boolean>,\r\n  ENABLE_DEV_CONSOLE_SELF_SERVE: {\r\n    key: 'enable-dev-console-self-serve',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable-dev-console-self-serve', boolean>,\r\n  // TODO: remove - no longer used\r\n  THREAD_STYLING_TWEAKS: {\r\n    key: 'thread_styling_tweaks',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'thread_styling_tweaks', boolean>,\r\n  REMOVE_TASKS_FEATURE: {\r\n    key: 'remove_tasks_feature',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'remove_tasks_feature', boolean>,\r\n  SHOW_COMMUNITY_IN_CONSOLE: {\r\n    key: 'show-community-in-console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-community-in-console', boolean>,\r\n  SHOW_CUSTOMER_ISSUES_IN_CONSOLE: {\r\n    key: 'show-customer-issues-in-console',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'show-customer-issues-in-console', boolean>,\r\n  TAKE_SCREENSHOT_OF_CANVAS_ONLY: {\r\n    key: 'take_screenshot_of_canvas_only',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'take_screenshot_of_canvas_only', boolean>,\r\n  SHOW_EVENTS_TAB_IN_CONSOLE: {\r\n    key: 'show_events_tab_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show_events_tab_in_console', boolean>,\r\n  ENABLE_TEXT_ANNOTATIONS: {\r\n    key: 'enable_text_annotations',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_text_annotations', boolean>,\r\n  ENABLE_EMAIL_NOTIFICATIONS: {\r\n    key: 'enable_email_notifications',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_email_notifications', boolean>,\r\n  ENABLE_ANNOTATIONS_OVERLAY: {\r\n    key: 'enable_annotations_overlay',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_annotations_overlay', boolean>,\r\n  ENABLE_SENTRY: {\r\n    key: 'enable_sentry',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'enable_sentry', boolean>,\r\n  CONSOLE_WEBINAR_BANNER: {\r\n    key: 'console_webinar_banner',\r\n    defaultValue: {},\r\n  } as FeatureFlag<'console_webinar_banner', object>,\r\n  ENABLE_VIDEO_CAPABILITIES: {\r\n    key: 'enable_video_capabilities',\r\n    defaultValue: false,\r\n  } as FeatureFlag<'enable_video_capabilities', boolean>,\r\n  SHOW_LINK_PREVIEWS: {\r\n    key: 'show-link-previews',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'show-link-previews', boolean>,\r\n  BILLING_ENABLED_IN_CONSOLE: {\r\n    key: 'billing_enabled_in_console',\r\n    defaultValue: true,\r\n  } as FeatureFlag<'billing_enabled_in_console', boolean>,\r\n  MENTION_NOTIFICATION_EMAIL_TEMPLATE_ID: {\r\n    key: 'mention_notification_email_template_id',\r\n    defaultValue: 'd-6309e6ccb36a4a769957795f475c8130',\r\n  } as FeatureFlag<\r\n    'mention_notification_email_template_id',\r\n    | 'd-6309e6ccb36a4a769957795f475c8130'\r\n    | 'd-8f2246c657a8498394e9caf181816bc3'\r\n    | 'd-8a8088e59eed4622b2d09078de372fe8'\r\n    | 'd-bc3669c391774addb7da37f92a3f97e3'\r\n  >,\r\n  SHOW_CONSOLE_LANDING_PAGE: {\r\n    key: 'show_console_landing_page',\r\n    defaultValue: false,\r\n  },\r\n} as const;\r\n\r\n// The generic type that makes this all work.  The first type parameter is\r\n// always set to a single string, and it makes it possible to do type inference\r\n// on the useFeatureFlag() call and figure out what the return value is.\r\nexport type FeatureFlag<K, T> = {\r\n  key: K;\r\n  defaultValue: T;\r\n};\r\n\r\n// The map of feature flag keys to the default value for that flag.  We have to\r\n// use `as any` in the assignment because TypeScript will only infer that the\r\n// return type is {[key: string]: union_of_all_flag_value_types} rather than\r\n// associating the right type with the right key.\r\nconst defaults: {\r\n  [P in keyof typeof FeatureFlags as (typeof FeatureFlags)[P]['key']]: (typeof FeatureFlags)[P]['defaultValue'];\r\n} = Object.fromEntries(\r\n  Object.entries(FeatureFlags).map(([_, v]) => [v.key, v.defaultValue]),\r\n) as any;\r\n\r\n/**\r\n * Returns an object that maps from feature flag keys to their default value.\r\n */\r\nexport function featureFlagDefaults() {\r\n  return defaults;\r\n}\r\n", "import * as sgMail from '@sendgrid/mail';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ThreadDetails } from 'server/src/util/email.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { getReplyToEmailAddress } from 'server/src/email/utils.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { DEFAULT_EMAIL_LOGO_WIDTH } from 'common/const/Sizes.ts';\r\nimport {\r\n  AUTH0_CUSTOM_LOGIN_DOMAIN,\r\n  CONSOLE_ORIGIN,\r\n} from 'common/const/Urls.ts';\r\nimport { AUTH0_CLIENT_ID } from 'common/const/Ids.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\r\n\r\nsgMail.default.setApiKey(env.SENDGRID_API_KEY);\r\nexport const DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID =\r\n  'd-6309e6ccb36a4a769957795f475c8130';\r\nexport const MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-8a8088e59eed4622b2d09078de372fe8';\r\nexport const DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID =\r\n  'd-fecc876acf684ff2bca887748d86e4e1';\r\nexport const SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-b70dc2c71ee541ee9e0c5f4cd84b32e3';\r\nexport const DEFAULT_THREAD_RESOLVE_TEMPLATE_ID =\r\n  'd-93aa618e7d0b4ba593c346f9a1f664c5';\r\nexport const THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID =\r\n  'd-37c14e17cc9649afb70495f029b3833d';\r\nconst SEND_CONSOLE_USER_INVITE_TEMPLATE_ID =\r\n  'd-ab157e4f588c4a30b6304e4e062b5f88';\r\nconst ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-1bbf5f1a7a2948529de051d44eb873c9';\r\nconst ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID =\r\n  'd-48ea1b657a2a4f9b95c9f81d38425306';\r\nconst REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID =\r\n  'd-bfe0627042f345f8b7877e6a97815359';\r\n\r\ntype UnsubscribeThreadTokenData = {\r\n  threadID: UUID;\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  appID: UUID | null;\r\n};\r\n\r\nexport type ActionIcon = 'mention' | 'task' | 'paperclip';\r\n\r\nexport const encodeUnsubscribeThreadToken = (\r\n  data: UnsubscribeThreadTokenData,\r\n) => jwt.sign(data, env.EMAIL_LINKS_TOKEN_SECRET, { algorithm: 'HS512' });\r\n\r\nexport const decodeUnsubscribeThreadToken = (token: string) =>\r\n  jwt.verify(token, env.EMAIL_LINKS_TOKEN_SECRET, {\r\n    algorithms: ['HS512'],\r\n  }) as UnsubscribeThreadTokenData;\r\n\r\nexport type SendActionEmailNotificationData = {\r\n  context: RequestContext;\r\n  recipientEmail: string;\r\n  actionText: string;\r\n  actionIconType: ActionIcon;\r\n  pageName: string;\r\n  pageURL: string;\r\n  providerName: string | undefined;\r\n  unsubscribeURL: string;\r\n  partnerDetails: CustomEmailTemplate | undefined;\r\n  threadDetails: ThreadDetails;\r\n  emailNotification: EmailOutboundNotificationEntity;\r\n  /** You can edit templates in SendGrid */\r\n  templateId: string;\r\n  notificationType: NotificationType;\r\n};\r\n/*\r\n  Common function used to send thread-action and reply notifications.\r\n  They are similar in that they both notify of an action eg resolving\r\n  /unresolving a thread or a reply or @mention message.\r\n  */\r\nexport async function sendActionEmailNotification({\r\n  context,\r\n  recipientEmail,\r\n  actionText,\r\n  actionIconType,\r\n  pageName,\r\n  pageURL,\r\n  providerName,\r\n  unsubscribeURL,\r\n  partnerDetails,\r\n  threadDetails,\r\n  emailNotification,\r\n  /** You can edit templates in SendGrid */\r\n  templateId,\r\n  notificationType,\r\n}: SendActionEmailNotificationData) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const {\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const threadingHeaders = await getThreadingHeaders(emailNotification);\r\n\r\n  // See https://stackoverflow.com/questions/1027395/detecting-outlook-autoreply-out-of-office-emails#comment64988838_25324691\r\n  // Request that MS Exchange does not send automated replies (like Out of Office)\r\n  // back to this email\r\n  const noAutoResponseHeader = { 'X-Auto-Response-Suppress': 'OOF' };\r\n\r\n  const unsubscribeHeaders = {\r\n    'List-Unsubscribe': `<${unsubscribeURL}>`,\r\n    'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\r\n  };\r\n\r\n  let eventType = '';\r\n  let emailType = '';\r\n  if (notificationType === 'reply') {\r\n    eventType = 'email-mention-notification-sent-v2';\r\n    emailType = 'mention v2';\r\n  } else if (notificationType === 'thread_action') {\r\n    eventType = 'email-thread-action-notification-sent';\r\n    emailType = 'thread action';\r\n  }\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: getReplyToEmailAddress(\r\n      context.logger,\r\n      partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n      emailNotification.id,\r\n    ),\r\n    templateId,\r\n    headers: {\r\n      ...threadingHeaders,\r\n      ...noAutoResponseHeader,\r\n      ...unsubscribeHeaders,\r\n    },\r\n    dynamicTemplateData: {\r\n      Action: actionText,\r\n      Action_Icon: actionIconType,\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Tool_Name: providerName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Unsubscribe_URL: unsubscribeURL,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Add_Explainer: false,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent ${emailType} email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: eventType,\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending ${emailType} email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n          from_address: mailData.from,\r\n          to_address: mailData.to,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\n// the EmailEmail repetition is intentional\r\nexport function sendShareThreadToEmailEmail(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  pageName: string,\r\n  pageURL: string,\r\n  partnerDetails: CustomEmailTemplate | undefined,\r\n  threadDetails: ThreadDetails,\r\n  emailNotification: EmailOutboundNotificationEntity | null,\r\n  templateID: string,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return true;\r\n  }\r\n\r\n  const {\r\n    senderName,\r\n    firstMessageDetails,\r\n    firstMessageUserDetails,\r\n    previousMessageDetails,\r\n    previousMessageUserDetails,\r\n    currentMessageDetails,\r\n    currentMessageUserDetails,\r\n    messagesCountLeft,\r\n  } = threadDetails;\r\n\r\n  const mailData = {\r\n    from: partnerDetails?.sender ?? 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    replyTo: emailNotification\r\n      ? getReplyToEmailAddress(\r\n          context.logger,\r\n          partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n          emailNotification.id,\r\n        )\r\n      : partnerDetails?.sender ?? `Cord <cord@cord.fyi>`,\r\n    templateId: templateID,\r\n    dynamicTemplateData: {\r\n      Page_Name: pageName,\r\n      Page_URL: pageURL,\r\n      Sender_Name: senderName,\r\n      First_Message_Details: firstMessageDetails,\r\n      First_Message_User_Details: firstMessageUserDetails,\r\n      Previous_Message_Details: previousMessageDetails,\r\n      Previous_Message_User_Details: previousMessageUserDetails,\r\n      Current_Message_Details: currentMessageDetails,\r\n      Current_Message_User_Details: currentMessageUserDetails,\r\n      Messages_Count_Left: messagesCountLeft,\r\n      Preview_Text: currentMessageDetails.message_preview,\r\n      Partner_Name: partnerDetails?.partnerName,\r\n      Partner_Image_URL: partnerDetails?.imageURL,\r\n      Image_Height: partnerDetails?.logoConfig?.height ?? 'auto',\r\n      Image_Width:\r\n        partnerDetails?.logoConfig?.width ?? DEFAULT_EMAIL_LOGO_WIDTH,\r\n    },\r\n  };\r\n  return sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(`Sent shareThreadToEmail email to ${recipientEmail}`);\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-share-thread-to-email-sent',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(\r\n        `Failed sending shareThreadToEmail email to ${recipientEmail}`,\r\n        {\r\n          error: error.response.body.errors,\r\n        },\r\n      );\r\n      return false;\r\n    });\r\n}\r\n\r\ntype ThreadingHeaders =\r\n  | {\r\n      'Message-ID': string;\r\n    }\r\n  | {\r\n      'Message-ID': string;\r\n      'In-Reply-To': string;\r\n      References: string;\r\n    };\r\n// Returns the email headers Message-ID, In-Reply-To and References to enable\r\n// threading of emails (in the email client) for the same Cord thread.\r\n// We also use these headers when handling inbound replies in SendGridWebhookHandler\r\n// if the notificationID is not in the 'to' address.\r\nasync function getThreadingHeaders(\r\n  emailNotification: EmailOutboundNotificationEntity,\r\n): Promise<ThreadingHeaders> {\r\n  const isFirstEmail =\r\n    (await EmailOutboundNotificationEntity.count({\r\n      where: {\r\n        email: emailNotification.email,\r\n        threadID: emailNotification.threadID,\r\n      },\r\n    })) === 1;\r\n\r\n  if (isFirstEmail) {\r\n    return {\r\n      'Message-ID': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  } else {\r\n    return {\r\n      'Message-ID': `<notif-${emailNotification.id}@cord.fyi>`,\r\n      'In-Reply-To': `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n      References: `<thread-${emailNotification.threadID}@cord.fyi>`,\r\n    };\r\n  }\r\n}\r\n\r\nexport async function sendEmailInviteConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  inviterName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n\r\n  const inviteLink = encodeURI(\r\n    `https://${AUTH0_CUSTOM_LOGIN_DOMAIN}/authorize?` +\r\n      'response_type=code&' +\r\n      `client_id=${AUTH0_CLIENT_ID}&` +\r\n      `redirect_uri=${CONSOLE_ORIGIN}/login&` +\r\n      'scope=openid email profile&' +\r\n      'screen_hint=signup&' +\r\n      `login_hint=${recipientEmail}`,\r\n  );\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: SEND_CONSOLE_USER_INVITE_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Invite_Link: inviteLink,\r\n      Inviter: inviterName,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to invite ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-invite-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessGrantedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_GRANTED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access granted to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-granted-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessDeniedEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  customer: CustomerEntity,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: ACCESS_DENIED_TO_CONSOLE_USER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Console_Link: `${CONSOLE_ORIGIN}/login?newcustomer=true`,\r\n      Customer_Name: customer.name,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent email to ${recipientEmail} to notify access denied to customer in cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-denied-access-console-user',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: {\r\n          from: mailData.from,\r\n          to: mailData.to,\r\n          customerID: customer.id,\r\n        },\r\n      });\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\n/**\r\n * Used for when a console user requests access to an existing customer\r\n */\r\nasync function sendRequestAccessEmailToConsoleUser(\r\n  context: RequestContext,\r\n  recipientEmail: string,\r\n  requesterEmail: string,\r\n  customerName: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const mailData = {\r\n    from: 'Cord <cord@cord.fyi>',\r\n    to: recipientEmail,\r\n    templateId: REQUEST_ACCESS_TO_CUSTOMER_TEMPLATE_ID,\r\n    dynamicTemplateData: {\r\n      Sender_Email: requesterEmail,\r\n      Customer_Name: customerName,\r\n      View_Access_Requests_Link: `${CONSOLE_ORIGIN}/usermanagement`,\r\n    },\r\n  };\r\n\r\n  return await sgMail.default\r\n    .send(mailData)\r\n    .then(() => {\r\n      context.logger.info(\r\n        `Sent request access email to ${recipientEmail} to cord console`,\r\n      );\r\n      logServerEvent({\r\n        session: context.session,\r\n        type: 'email-request-access-customer',\r\n        logLevel: LogLevel.DEBUG,\r\n        payload: { from: mailData.from, to: mailData.to, customerID },\r\n      });\r\n\r\n      return true;\r\n    })\r\n    .catch((error) => {\r\n      context.logger.error(`Failed sending email to ${recipientEmail}`, {\r\n        error: error.response.body.errors,\r\n        from_address: mailData.from,\r\n        to_address: mailData.to,\r\n      });\r\n      return false;\r\n    });\r\n}\r\n\r\nexport async function sendAccessRequestToCustomerConsoleUsers(\r\n  context: RequestContext,\r\n  requesterEmail: string,\r\n  customerID: UUID,\r\n) {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n\r\n  if (!customer) {\r\n    throw new Error('No customer, no customer invite!');\r\n  }\r\n  const approvedCustomerConsoleUsers =\r\n    await context.loaders.consoleUserLoader.loadConsoleUsersForCustomer(\r\n      customerID,\r\n    );\r\n\r\n  if (approvedCustomerConsoleUsers.length === 0) {\r\n    throw new Error('No console users in this customer');\r\n  }\r\n\r\n  return await Promise.all(\r\n    approvedCustomerConsoleUsers.map((consoleUser) =>\r\n      sendRequestAccessEmailToConsoleUser(\r\n        context,\r\n        consoleUser.email,\r\n        requesterEmail,\r\n        customer.name,\r\n        customer.id,\r\n      ),\r\n    ),\r\n  );\r\n}\r\n", "// See #8935:\r\n/// <reference lib=\"es2022\" />\r\n\r\nimport type OpenAI from 'openai';\r\n\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport type { Placement } from '@floating-ui/react-dom';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\n\r\nexport type {\r\n  DocumentAnnotationResult,\r\n  Screenshot,\r\n  DocumentLocation,\r\n  LocationTextConfig,\r\n  HighlightedTextConfig,\r\n  AdditionalTargetData,\r\n  Annotation,\r\n  AnnotationWithThreadID,\r\n  AnnotationCapturePosition,\r\n} from '@cord-sdk/types';\r\nexport { locationJson } from '@cord-sdk/types';\r\nimport { locationJson, MessageNodeType } from '@cord-sdk/types';\r\nimport type {\r\n  FlatJsonObject,\r\n  LocationFilterOptions,\r\n  ResolvedStatus,\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n  MessageContent,\r\n  MessageNode,\r\n  ViewerThreadStatus,\r\n} from '@cord-sdk/types';\r\n\r\nexport type {\r\n  MessageAnnotation,\r\n  ElementIdentifierVersion,\r\n  EntityMetadata,\r\n  NotificationListFilter,\r\n  ThreadListFilter,\r\n  JsonValue,\r\n  JsonObject,\r\n};\r\n\r\nexport type SimpleTranslationParameters = FlatJsonObject;\r\n\r\nexport enum DataTableQueries {\r\n  ADMIN_USERS = 'admin_users',\r\n  SET_ADMIN = 'set_admin',\r\n  USER_DETAILS = 'user_details',\r\n  ORG_DETAILS = 'org_details',\r\n  APP_DETAILS = 'app_details',\r\n  THREAD_DETAILS = 'thread_details',\r\n  MESSAGE_DETAILS = 'message_details',\r\n  CUSTOMER_DETAILS = 'customer_details',\r\n  ORG_MEMBER_DETAILS = 'org_member_details',\r\n  ID_SEARCH = 'id_search',\r\n  PROD_APPLICATIONS = 'prod_applications',\r\n  STAGING_APPLICATIONS = 'staging_applications',\r\n  SAMPLE_APPLICATIONS = 'sample_applications',\r\n  VERIFIED_CUSTOMERS = 'verified_customers',\r\n  SAMPLE_CUSTOMERS = 'sample_customers',\r\n  DEPLOYS = 'deploys',\r\n  PAGE_CONTEXTS = 'page_contexts',\r\n  BROWSER_METRICS = 'browser_metrics',\r\n  OS_METRICS = 'os_metrics',\r\n  GO_REDIRECTS = 'go_redirects',\r\n}\r\n\r\nexport type NonNullableKeys<T, K extends keyof T> = T & {\r\n  [P in K]: NonNullable<T[P]>;\r\n};\r\n\r\nexport type NullableKeys<T, K extends keyof T> = Omit<T, K> & {\r\n  [P in K]: T[P] | null;\r\n};\r\n\r\nexport type ElementOf<T extends Array<any>> = T[number];\r\n\r\n/**\r\n * A mapping type that effectively combines Required<T> and NonNullable<T> to\r\n * turn { foo?: string | undefined } into { foo: string }\r\n */\r\n// NOTE(9/9/2021): This is equivalent to Required<T> if we compiled with\r\n// --strictNullChecks, but we currently don't\r\nexport type ReallyRequired<T> = {\r\n  [P in keyof T]-?: NonNullable<T[P]>;\r\n};\r\n\r\nexport type { MessageContent, MessageNode };\r\nexport { MessageNodeType };\r\n\r\nexport type UUID = string;\r\n\r\nexport type Location = {\r\n  [k: string]: string | number | boolean;\r\n};\r\n\r\nexport type SortDirection = 'ascending' | 'descending';\r\n\r\nexport function isValidFlatJsonObject(obj: any): obj is FlatJsonObject {\r\n  if (!obj) {\r\n    return false;\r\n  }\r\n  if (typeof obj !== 'object' || Array.isArray(obj)) {\r\n    return false;\r\n  }\r\n  for (const [_, value] of Object.entries(obj)) {\r\n    const t = typeof value;\r\n    if (t !== 'string' && t !== 'number' && t !== 'boolean') {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function isLocation(obj: any): obj is Location {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function isValidMetadata(obj: any): obj is EntityMetadata {\r\n  return isValidFlatJsonObject(obj);\r\n}\r\n\r\nexport function toLocation(obj: any): Location | null {\r\n  return isLocation(obj) ? obj : null;\r\n}\r\n\r\n// We receive location as either Location or LocationFilterOptions from\r\n// our apis. Since Location type can be flat object with multiple properties\r\n// we have to check the property type to make sure we're getting the right value.\r\n// eg: {value: 'foo', ...} is Location\r\n// while {value: {value: 'foo'} ...} is LocationFilterOptions\r\nexport function getLocationFilter(\r\n  obj: LocationFilterOptions | Location | undefined,\r\n): LocationFilterOptions | undefined {\r\n  if (!obj) {\r\n    return undefined;\r\n  }\r\n\r\n  if (isLocation(obj)) {\r\n    return { value: obj, partialMatch: false };\r\n  }\r\n\r\n  if (isLocation(obj.value)) {\r\n    return obj;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Function to convert our external resolvedStatus filter enum\r\n// to our internal 'resolved' boolean property\r\nexport function getResolvedFromStatus(\r\n  status: ResolvedStatus,\r\n): boolean | undefined {\r\n  // we've not included a fallback value as this will just increase the chances\r\n  // of returning the wrong data somewhere. So we make sure to pass whatever\r\n  // we've said the default is for the API that's calling this.\r\n  switch (status) {\r\n    case 'resolved': {\r\n      return true;\r\n    }\r\n    case 'unresolved': {\r\n      return false;\r\n    }\r\n    case 'any': {\r\n      return undefined;\r\n    }\r\n    default: {\r\n      const unhandledStatus: never = status;\r\n      throw new Error('Invalid resolved status type ' + unhandledStatus);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getViewerThreadFilter(\r\n  viewerStatus: ViewerThreadStatus | ViewerThreadStatus[] | undefined,\r\n): ViewerThreadStatus[] {\r\n  if (!viewerStatus) {\r\n    return [];\r\n  }\r\n  if (typeof viewerStatus === 'string') {\r\n    return [viewerStatus];\r\n  }\r\n  return viewerStatus;\r\n}\r\n\r\nexport function metadataMatches(\r\n  metadata: EntityMetadata,\r\n  matcher: EntityMetadata,\r\n): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (metadata[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationMatches(context: Location, matcher: Location): boolean {\r\n  for (const [key, value] of Object.entries(matcher)) {\r\n    if (context[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction flatJsonObjectEqual(\r\n  a: FlatJsonObject | null,\r\n  b: FlatJsonObject | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  if (Object.keys(a).length !== Object.keys(b).length) {\r\n    return false;\r\n  }\r\n  for (const [key, value] of Object.entries(a)) {\r\n    if (b[key] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function locationEqual(a: Location | null, b: Location | null): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\nexport function metadataEqual(\r\n  a: EntityMetadata | null,\r\n  b: EntityMetadata | null,\r\n): boolean {\r\n  return flatJsonObjectEqual(a, b);\r\n}\r\n\r\n/**\r\n * Implements the canonical comparison for locations.  Currently, this sorts by\r\n * number of elements, then the JSON representation alphabetically, but we can\r\n * change that if we come up with something better.\r\n */\r\nexport function locationCompare(a: Location, b: Location): number {\r\n  const lengthA = Object.keys(a).length;\r\n  const lengthB = Object.keys(b).length;\r\n  if (lengthA !== lengthB) {\r\n    return lengthA - lengthB;\r\n  }\r\n  return locationJson(a).localeCompare(locationJson(b));\r\n}\r\n\r\nexport type PageContext = {\r\n  providerID: UUID | null;\r\n  data: Location;\r\n};\r\n\r\nexport function pageContextEqual(\r\n  a: PageContext | null,\r\n  b: PageContext | null,\r\n): boolean {\r\n  if (a === null && b === null) {\r\n    return true;\r\n  }\r\n  if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  // Two contexts from different providers are never equal\r\n  if (a.providerID !== b.providerID) {\r\n    return false;\r\n  }\r\n  // If either has data, compare the data, otherwise compare the locations\r\n  return isEqual(a.data, b.data);\r\n}\r\n\r\n// This returns a string key that is equivalent from an equality perspective to\r\n// comparing the pageContexts.  Specifically, the intention is that\r\n// pageContextEqual(a, b) === (pageContextKey(a) === pageContextKey(b))\r\n\r\n// The functioning of this depends a lot on our specific logic of\r\n// building PageContexts, such that, for instance,\r\n// a.location === b.location => a.providerID === b.providerID.\r\n\r\n// It also needs to stay consistent with the logic in server/src/util/hash.ts.\r\nexport function pageContextKey(pageContext: PageContext): string {\r\n  return jsonStableStringify({\r\n    providerID: pageContext.providerID,\r\n    data: pageContext.data,\r\n  });\r\n}\r\n\r\n/**\r\n * Convert a PageContext-like object into an actual PageContext.\r\n *\r\n * The PageContext types that we exchange with GraphQL allow nullable fields to\r\n * be undefined as well. This function takes such objects and returns a valid\r\n * PageContext.\r\n */\r\ntype PageContextLike = {\r\n  providerID?: UUID | null;\r\n  data: Location;\r\n};\r\nexport function toPageContext(pageContext: PageContextLike): PageContext;\r\nexport function toPageContext(pageContext: null | undefined): null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null;\r\nexport function toPageContext(\r\n  pageContext: PageContextLike | null | undefined,\r\n): PageContext | null {\r\n  if (!pageContext) {\r\n    return null;\r\n  }\r\n  const { providerID, data } = pageContext;\r\n  if (!isLocation(data)) {\r\n    throw new Error('Invalid context');\r\n  }\r\n  return {\r\n    providerID: providerID ?? null,\r\n    data,\r\n  };\r\n}\r\n\r\nexport type OrgMemberState = 'active' | 'inactive' | 'deleted'; // must match the keys in OrgMemberStateEnumType\r\n\r\nexport type UserType = 'person' | 'bot'; // must match the keys in UserTypeEnumType\r\n\r\nexport type UserState = 'active' | 'deleted'; // must match the keys in UserStateEnumType\r\n\r\nexport type ImportedSlackMessageType = 'reply' | 'supportBotReply'; // must match the keys in ImportedSlackMessageTypeEnumType\r\n\r\nexport type MessageType = 'action_message' | 'user_message'; //must match the keys in MessageTypeEnumType\r\n\r\nexport interface Todo {\r\n  id: UUID;\r\n  done: boolean;\r\n}\r\n\r\nexport enum MessageAttachmentType {\r\n  FILE = 'file',\r\n  ANNOTATION = 'annotation',\r\n  SCREENSHOT = 'screenshot',\r\n}\r\n\r\nexport const MessageAnnotationAttachmentTypeName =\r\n  'MessageAnnotationAttachment';\r\n\r\nexport function parseElementIdentifierVersion(\r\n  val: string,\r\n): ElementIdentifierVersion | null {\r\n  if (val === '1' || val === '2') {\r\n    return val;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport enum ElementIdentifierMatch {\r\n  EXACT = 'exact',\r\n  PARTIAL = 'partial',\r\n  NONE = 'none',\r\n}\r\n\r\nexport enum LocationMatch {\r\n  EXACT = 'exact',\r\n  SIBLING = 'sibling',\r\n  MULTIMEDIA = 'multimedia',\r\n  CHART = 'chart',\r\n  STALE = 'stale',\r\n  MAYBE_STALE = 'maybe_stale',\r\n  NONE = 'none',\r\n  // User has old extension, and does not have the latest identifier version\r\n  INCOMPATIBLE_IDENTIFIER_VERSION = 'incompatible_identifier_version',\r\n  // Used if fallback document coordinates are included, and we don't have an exact/sibling match\r\n  DOCUMENT_COORDINATES = 'document_coordinates',\r\n  // If we weren't able to annotate, so we're instead relying on the screenshot\r\n  // Examples: annotating a pdf, annotating an iframe we can't access\r\n  UNAVAILABLE = 'unavailable',\r\n  // If the annotation was on an inaccessible cross-domain iframe. We want to\r\n  // show it while the message is being drafted, but not after it's been posted\r\n  INACCESSIBLE_CROSS_DOMAIN_IFRAME = 'inaccessible_cross_domain_iframe',\r\n  OUTSIDE_ACCESSIBLE_VIRTUALISED_LIST = 'outside_accessible_virtualised_list',\r\n  OUTSIDE_INACCESSIBLE_VIRTUALISED_LIST = 'outside_inaccessible_virtualised_list',\r\n}\r\n\r\nexport function annotationHasLocation(annotation: MessageAnnotation) {\r\n  return annotation.location !== null || annotation.customLocation !== null;\r\n}\r\n\r\nexport const ThreadCreatedTypeName = 'ThreadCreated';\r\nexport const ThreadMessageAddedTypeName = 'ThreadMessageAdded';\r\nexport const ThreadMessageUpdatedTypeName = 'ThreadMessageUpdated';\r\nexport const ThreadMessageContentAppendedTypeName =\r\n  'ThreadMessageContentAppended';\r\nexport const ThreadMessageRemovedTypeName = 'ThreadMessageRemoved';\r\nexport const ThreadParticipantsUpdatedIncrementalTypeName =\r\n  'ThreadParticipantsUpdatedIncremental';\r\nexport const ThreadTypingUsersUpdatedTypeName = 'ThreadTypingUsersUpdated';\r\nexport const ThreadShareToSlackTypeName = 'ThreadShareToSlack';\r\nexport const ThreadPropertiesUpdatedTypeName = 'ThreadPropertiesUpdated';\r\nexport const ThreadSubscriberUpdatedTypeName = 'ThreadSubscriberUpdated';\r\nexport const ThreadDeletedTypeName = 'ThreadDeleted';\r\n\r\nexport const PageThreadAddedTypeName = 'PageThreadAdded';\r\nexport const PageThreadDeletedTypename = 'PageThreadDeleted';\r\nexport const PageThreadReplyAddedTypeName = 'PageThreadReplyAdded';\r\nexport const PageVisitorsUpdatedTypeName = 'PageVisitorsUpdated';\r\nexport const PageThreadResolvedTypeName = 'PageThreadResolved';\r\nexport const PageThreadUnresolvedTypeName = 'PageThreadUnresolved';\r\nexport const ThreadFilterablePropertiesMatchTypeName =\r\n  'ThreadFilterablePropertiesMatch';\r\nexport const ThreadFilterablePropertiesUnmatchTypeName =\r\n  'ThreadFilterablePropertiesUnmatch';\r\n\r\nexport const NotificationAddedTypeName = 'NotificationAdded';\r\nexport const NotificationReadStateUpdatedTypeName =\r\n  'NotificationReadStateUpdated';\r\nexport const NotificationDeletedTypeName = 'NotificationDeleted';\r\n\r\nexport const OrgMemberAddedTypeName = 'OrgMemberAdded';\r\nexport const OrgMemberRemovedTypeName = 'OrgMemberRemoved';\r\n\r\nexport const ConsoleGettingStartedUpdatedTypeName =\r\n  'ConsoleGettingStartedUpdated';\r\n\r\nexport const CustomerSubscriptionUpdatedTypeName =\r\n  'CustomerSubscriptionUpdated';\r\n\r\nexport type FileAttachmentInput = {\r\n  id: UUID;\r\n  fileID: UUID;\r\n};\r\n\r\n// Subset of winston log levels, which can be found in NpmConfigSetLevels type in winston type file\r\nexport enum LogLevel {\r\n  ERROR = 'error',\r\n  WARN = 'warn',\r\n  INFO = 'info',\r\n  DEBUG = 'debug',\r\n}\r\n\r\nexport type PopperPosition = Placement;\r\n\r\n// called when the sidebar shows and hides, with a reference to the Cord iframe\r\n// expected to make domain-specific document adjustments to accommodate the sidebar\r\n// in its two states (expanded / not).\r\nexport type DocumentMutator = (width: number | null) => void;\r\n\r\n// called with the document to initialize any mutator-specific elements and behavior\r\n// expected to return the actual mutator function\r\nexport type DocumentMutatorInitializer = (\r\n  document: Document,\r\n) => DocumentMutator;\r\n\r\nexport type SimpleValue = string | number | boolean;\r\n\r\nexport type PreferencesValueType = JsonValue;\r\n\r\nexport type PreferencesType = JsonObject;\r\n\r\nexport enum UserReference {\r\n  MENTION = 'mention',\r\n  ASSIGNEE = 'assignee',\r\n}\r\n\r\nexport type RuleProviderInfo = {\r\n  id: UUID; // the ID of the provider, should be unique among providers\r\n  name: string; // the name of the provider\r\n  iconURL?: string | null; // URL for a favicon-like image\r\n  nuxText?: string | null; // the text to show the user teaching them how to use Radical on this specific provider\r\n  disableAnnotations?: boolean; // if annotations should be disabled for this provider. example: slack static PDFs where due to the chrome pdf viewer we don't have access to the scroll position\r\n};\r\n\r\n// a ruleset provider should export all the rules specific to a SaaS, even when\r\n// those rules span across different domain names.\r\nexport type RuleProvider = RuleProviderInfo & {\r\n  domains: string[]; // the domains that this provider's rules cover\r\n  rules: ProviderRule[]; // deny and approve rules\r\n  mergeHashWithLocation?: boolean; // a fix for providers like Snowflake who have URLs with query parameters after the # in the URL\r\n  visibleInDiscoverToolsSection: boolean; // the state of wether the tool is visible in th Discover tools section in the NUX flow, i.e. internal tools should not be included, localhost should not be included\r\n  platformApplicationID: UUID | null; // Application ID of provider, if relevant\r\n\r\n  // the functions to call to mutate the document to make room for the sidebar.\r\n  // this is a list to allow per-domain granularity.\r\n  documentMutators: ProviderDocumentMutator[];\r\n};\r\n\r\nexport type ProviderRule = {\r\n  id: UUID;\r\n  type: ProviderRuleType;\r\n  matchPatterns: ProviderRuleMatchPatterns;\r\n  nameTemplate: string | null;\r\n  contextTransformation: PageContextTransformation;\r\n  observeDOMMutations: boolean;\r\n};\r\n\r\nexport type ProviderDocumentMutator =\r\n  | { id: UUID; type: 'default_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'custom_css'; config: CSSMutatorConfig }\r\n  | { id: UUID; type: 'fixed_elements'; config: null };\r\n\r\nexport type ProviderDocumentMutatorType = ProviderDocumentMutator['type'];\r\n\r\nexport type CSSMutatorConfig = {\r\n  cssTemplate: string;\r\n};\r\n\r\nexport type ProviderRuleType = 'allow' | 'deny';\r\n\r\nexport type ProviderRuleMatchPatterns = {\r\n  protocol?: string;\r\n  domain?: string;\r\n  path?: string;\r\n  hash?: string;\r\n  queryParams?: { [key: string]: string };\r\n  selector?: string;\r\n  contains?: string;\r\n};\r\n\r\nexport type ProviderRuleTestMatchType = 'allow' | 'deny' | 'none';\r\n\r\nexport type PageDetails = {\r\n  pageContext: PageContext;\r\n  pageName: string | null;\r\n};\r\n\r\nexport type MatchResult = (\r\n  | {\r\n      match: 'allow' | 'deny';\r\n      ruleID: UUID;\r\n    }\r\n  | {\r\n      match: 'none';\r\n    }\r\n) &\r\n  PageDetails;\r\n\r\nexport type PageContextTransformationType =\r\n  | 'default'\r\n  | 'replace'\r\n  | 'extend'\r\n  | 'metabase';\r\n\r\nexport type PageContextTransformation = {\r\n  type: PageContextTransformationType;\r\n  data: JsonObject | null;\r\n};\r\n\r\nexport type ProvidersResult = {\r\n  ruleProviders: RuleProvider[];\r\n  version: string;\r\n};\r\n\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n\r\nexport type LinearTeam = {\r\n  id: string;\r\n  name: string;\r\n  projects: {\r\n    nodes: Array<{\r\n      id: string;\r\n      name: string;\r\n    }>;\r\n  };\r\n};\r\n\r\nexport type AtlassianProject = {\r\n  // expand: 'description,lead,issueTypes,url,projectKeys,permissions,insight',\r\n  id: string; // 10000\r\n  key: string; // STLR\r\n  name: string; // 'Stellar'\r\n  issueTypes: Array<{\r\n    id: string; //'10001'\r\n    // description: 'Tasks track small, distinct pieces of work.';\r\n    name: string;\r\n    subtask: boolean;\r\n    // avatarId: 10318;\r\n    // hierarchyLevel: 0;\r\n  }>;\r\n  simplified: boolean;\r\n  style: string; // 'next-gen'\r\n  isPrivate: boolean;\r\n  entityId: UUID;\r\n  uuid: UUID;\r\n};\r\n\r\nexport type MondayBoard = {\r\n  id: string;\r\n  name: string;\r\n  subitem_board?: {\r\n    id: string;\r\n  };\r\n  groups: Array<{\r\n    id: string;\r\n    title: string;\r\n    position: string;\r\n  }>;\r\n};\r\n\r\nexport type JiraConnectionPreferences = {\r\n  projectID: string;\r\n  issueType: string;\r\n  subissueType?: string;\r\n};\r\n\r\nexport type AsanaConnectionPreferences = {\r\n  projectID: string | undefined;\r\n};\r\n\r\nexport type MondayConnectionPreferences = {\r\n  boardID: string;\r\n  groupID?: string;\r\n};\r\n\r\ntype TrelloList = {\r\n  id: UUID;\r\n  name: string;\r\n  closed?: string;\r\n  pos?: number;\r\n  softLimit?: string;\r\n  idBoard?: UUID;\r\n  subscriber: boolean;\r\n};\r\n\r\ntype TrelloBoard = {\r\n  id: UUID;\r\n  name: string;\r\n  idOrganization: UUID;\r\n  lists: TrelloList[];\r\n};\r\n\r\ntype TrelloOrg = {\r\n  id: UUID;\r\n  name: string;\r\n};\r\n\r\nexport type TrelloConnectionPreferencesType = {\r\n  id: UUID;\r\n  email: string;\r\n  boards: TrelloBoard[];\r\n  organizations: TrelloOrg[];\r\n};\r\n\r\nexport type TrelloCard = {\r\n  name: string;\r\n  desc: string;\r\n  idList: UUID;\r\n};\r\n\r\nexport type AsanaProject = {\r\n  gid: string;\r\n  name: string;\r\n};\r\n\r\nexport type JiraIssuePreviewData = {\r\n  key: string;\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  done: boolean;\r\n  priority: string;\r\n  subtasks: Array<{\r\n    id: string;\r\n    title: string;\r\n    done: boolean;\r\n  }>;\r\n};\r\n\r\nexport type AsanaTaskPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n};\r\n\r\nexport type LinearIssuePreviewData = {\r\n  title: string;\r\n  identifier: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  status: string;\r\n  priority: string;\r\n  done: boolean;\r\n  orgName: string | undefined;\r\n};\r\n\r\nexport type MondayItemPreviewData = {\r\n  title: string;\r\n  url: string;\r\n  assignee: string | undefined;\r\n  done: boolean;\r\n  assigneeColumnID: string | undefined;\r\n  statusColumnID: string | undefined;\r\n};\r\n\r\nexport type TaskPreviewData =\r\n  | AsanaTaskPreviewData\r\n  | JiraIssuePreviewData\r\n  | LinearIssuePreviewData\r\n  | MondayItemPreviewData;\r\n\r\nexport enum LinearIssueStateTypes {\r\n  BACKLOG = 'backlog',\r\n  TODO = 'unstarted',\r\n  IN_PROGRESS = 'started',\r\n  DONE = 'completed',\r\n  CANCELED = 'canceled',\r\n}\r\n\r\nexport type LinearConnectionPreferences = {\r\n  teamID: string;\r\n  projectID?: string;\r\n};\r\n\r\nexport type APICordTokenData = {\r\n  session_id: UUID;\r\n};\r\n\r\nexport type AppServerAuthTokenData = {\r\n  app_id: UUID;\r\n};\r\n\r\nexport type CustomerServerAuthTokenData = {\r\n  customer_id: UUID;\r\n};\r\n\r\nexport type NotificationChannels = {\r\n  slack: boolean;\r\n  email: boolean;\r\n};\r\n\r\nexport type CustomLinks = {\r\n  learnMore?: string | null;\r\n  upgradePlan?: string | null;\r\n  leaveFeedback?: string | null;\r\n};\r\n\r\nexport type ThirdPartyAuth = 'slack' | 'google' | 'ms-teams';\r\n\r\nexport type OutboundNotificationType =\r\n  | 'slack'\r\n  | 'email'\r\n  | 'slackEmailMatched'\r\n  | 'sharedToSlackChannel'\r\n  | 'sharedToEmail';\r\n\r\nexport type { Point2D } from '@cord-sdk/types';\r\n\r\nexport type CustomNUXStepContent = {\r\n  title: string | null;\r\n  text: string | null;\r\n  imageURL: string | null;\r\n};\r\n\r\nexport type CustomNUX = {\r\n  initialOpen: CustomNUXStepContent | null;\r\n  welcome: CustomNUXStepContent | null;\r\n};\r\n\r\nexport type SlackOAuthLinkOrgState = {\r\n  data: {\r\n    userID: string;\r\n    orgID: string;\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'link_org';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthConsoleUserState = {\r\n  data: {\r\n    platformApplicationID: string;\r\n  };\r\n  type: 'console_user';\r\n  nonce: string;\r\n};\r\n\r\nexport type SlackOAuthDecodeState =\r\n  | SlackOAuthLinkOrgState\r\n  | SlackOAuthConsoleUserState;\r\n\r\nexport type ThreadSupportStatusType = 'open' | 'closed';\r\n\r\nexport type UserWithOrgDetails = {\r\n  id: UUID;\r\n  externalID: string;\r\n  displayName: string;\r\n  fullName: string;\r\n  name: string | null;\r\n  shortName: string | null;\r\n  profilePictureURL: string | null;\r\n  metadata: EntityMetadata;\r\n  canBeNotifiedOnSlack: boolean;\r\n};\r\n\r\nexport type OutboundNotificationMetadata =\r\n  OutboundNotificationMetadataByType[OutboundNotificationType];\r\n\r\n// when adding new fields to existing metadata types, either make the new\r\n// fields optional or run a backfill migration\r\nexport type OutboundNotificationMetadataByType = {\r\n  slack: Record<string, never>;\r\n  email: Record<string, never>;\r\n  slackEmailMatched: Record<string, never>;\r\n  sharedToSlackChannel: {\r\n    type: 'sharedToSlackChannel';\r\n    targetSlackChannelID: string;\r\n  };\r\n  sharedToEmail: {\r\n    type: 'sharedToEmail';\r\n    targetEmail: string;\r\n  };\r\n};\r\n\r\n// Internal threads are the standard mirrored Slack threads\r\n// that users can share to their linked Slack org.\r\n// Support threads are the ones mirrored to a vendor's Slack org\r\n// and support channel after a support bot is mentioned.\r\nexport type ThreadMirrorType = 'internal' | 'support';\r\n\r\nexport type Tier = 'prod' | 'staging' | 'test' | 'dev';\r\n\r\nexport type SharedToSlackInfo = {\r\n  channel: string | null;\r\n  slackURL: string | null;\r\n};\r\n\r\nexport type ThreadMode =\r\n  // Only shows the first message, and optionally the number of replies\r\n  | 'collapsed'\r\n  // Can show all messages, also includes a composer to add a new message\r\n  | 'inline'\r\n  // Used in the sidebar only - thread spans across the whole page\r\n  | 'fullHeight'\r\n  // The initial state when we are creating a new thread - composer only\r\n  | 'newThread';\r\n\r\nexport type Announcement =\r\n  | 'welcome'\r\n  | 'completeProfile'\r\n  | 'connectOrgToSlack'\r\n  | 'linkProfileToSlack'\r\n  | 'slackIsConnected';\r\n\r\nexport type ReferencedUserData = { id: UUID; name: string };\r\n\r\nconst DEPLOYMENT_TYPES = ['sdk'] as const;\r\n\r\nexport type DeploymentType = (typeof DEPLOYMENT_TYPES)[number];\r\n\r\nexport function isDeploymentType(s: string): s is DeploymentType {\r\n  if (DEPLOYMENT_TYPES.includes(s as DeploymentType)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function toDeploymentType(\r\n  s: string | null | undefined,\r\n): DeploymentType | null {\r\n  if (s && isDeploymentType(s)) {\r\n    return s;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport type ApplicationEnvironment =\r\n  | 'production'\r\n  | 'staging'\r\n  | 'sample' // console self-serve test (not paying) app\r\n  | 'sampletoken' // sample token apps created for docs integration guide and demo apps opensource repos (wiped periodically)\r\n  | 'demo'; // temporary token apps created for docs and cord.com demo apps (wiped periodically)\r\n\r\n// NB you there are some classes of token you might expect are environments,\r\n// but actually all belong to one appID:\r\n// The docs live components are all in the CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID app\r\n// The e2e tests are all in the CORD_AUTOMATED_TESTS_APPLICATION_ID app\r\n// The CORD_PLAYGROUND_APPLICATION_ID has been retired from service\r\n\r\nexport type EmptyJsonObject = Record<string, never>;\r\n\r\nexport type CustomerType = 'verified' | 'sample';\r\n\r\nexport type CustomerImplementationStage =\r\n  | 'launched'\r\n  | 'implementing'\r\n  | 'proof_of_concept'\r\n  | 'inactive';\r\n\r\nexport type AdminCRTComingFrom = 'them' | 'us';\r\n\r\nexport type AdminCRTDecision = 'done' | 'accepted' | 'rejected' | 'pending';\r\n\r\nexport type AdminCRTCommunicationStatus =\r\n  | 'none'\r\n  | 'request_acked'\r\n  | 'decision_sent'\r\n  | 'decision_acked';\r\n\r\nexport type AdminCRTIssueType = 'request' | 'bug' | 'onboarding_step';\r\n\r\nexport type AdminCRTPriority = 'blocker' | 'high' | 'low';\r\n\r\nexport type AdminCRTCustomerIssue = {\r\n  customerID: UUID;\r\n  title: string;\r\n  body: string;\r\n  comingFrom: AdminCRTComingFrom;\r\n  decision: AdminCRTDecision;\r\n  communicationStatus: AdminCRTCommunicationStatus;\r\n  lastTouch?: string;\r\n  type: AdminCRTIssueType;\r\n  priority: AdminCRTPriority;\r\n  externallyVisible: boolean;\r\n  assignee?: UUID;\r\n};\r\n\r\nexport type DocsCachedEmbedding = {\r\n  url: string;\r\n  plaintext: string;\r\n  embedding?: OpenAI.CreateEmbeddingResponse | undefined;\r\n};\r\n\r\nexport type CordDotComCachedEmbedding = DocsCachedEmbedding & {\r\n  title: string;\r\n};\r\n\r\n// This is for the mouse move events within iframes\r\nexport type IframeMouseMoveData = { x: number; y: number; frame_id: string };\r\n\r\nexport type Maybe<T> = T | null | undefined;\r\nexport type Nullable<T> = T | null;\r\n", "// From: https://github.com/epoberezkin/fast-deep-equal/blob/a8e7172b6c411ec320d6045fd4afbd2abc1b4bde/src/index.jst\r\n// Copy-pasted directly due to import BS that I do not want to keep dealing with.\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2017 Evgeny Poberezkin\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\nfunction equal(a: any, b: any) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\r\n    if (a.constructor !== b.constructor) {\r\n      return false;\r\n    }\r\n\r\n    let length, i, keys;\r\n    if (Array.isArray(a)) {\r\n      length = a.length;\r\n      if (length != b.length) {\r\n        return false;\r\n      }\r\n      for (i = length; i-- !== 0; ) {\r\n        if (!equal(a[i], b[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (a instanceof Map && b instanceof Map) {\r\n      if (a.size !== b.size) {\r\n        return false;\r\n      }\r\n      for (i of a.entries()) {\r\n        if (!b.has(i[0])) {\r\n          return false;\r\n        }\r\n      }\r\n      for (i of a.entries()) {\r\n        if (!equal(i[1], b.get(i[0]))) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (a instanceof Set && b instanceof Set) {\r\n      if (a.size !== b.size) {\r\n        return false;\r\n      }\r\n      for (i of a.entries()) {\r\n        if (!b.has(i[0])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\r\n      // @ts-ignore\r\n      length = a.length;\r\n      // @ts-ignore\r\n      if (length != b.length) {\r\n        return false;\r\n      }\r\n      for (i = length; i-- !== 0; ) {\r\n        // @ts-ignore\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (a.constructor === RegExp) {\r\n      return a.source === b.source && a.flags === b.flags;\r\n    }\r\n    if (a.valueOf !== Object.prototype.valueOf) {\r\n      return a.valueOf() === b.valueOf();\r\n    }\r\n    if (a.toString !== Object.prototype.toString) {\r\n      return a.toString() === b.toString();\r\n    }\r\n\r\n    keys = Object.keys(a);\r\n    length = keys.length;\r\n    if (length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n\r\n    for (i = length; i-- !== 0; ) {\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    for (i = length; i-- !== 0; ) {\r\n      const key = keys[i];\r\n      if (!equal(a[key], b[key])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // true if both NaN, false otherwise\r\n  return a !== a && b !== b;\r\n}\r\nexport const isEqual = equal;\r\n", "import type {\r\n  GroupID,\r\n  Location,\r\n  MessageID,\r\n  OrganizationID,\r\n  ThreadID,\r\n  UUID,\r\n} from './core.js';\r\nimport type { TranslationResources } from './i18n.js';\r\nexport type { TranslationParameters, TranslationResources } from './i18n.js';\r\nimport type {\r\n  CoreNotificationData,\r\n  ICordNotificationSDK,\r\n} from './notifications.js';\r\nimport type { ICordPresenceSDK } from './presence.js';\r\nimport type {\r\n  ClientCreateMessage,\r\n  ICordActivitySDK,\r\n  ICordThreadSDK,\r\n  ThreadSummary,\r\n} from './thread.js';\r\nimport type { ICordUserSDK } from './user.js';\r\nimport type { ClientMessageData } from './message.js';\r\nimport type { ICordFileSDK } from './file.js';\r\nexport { resources as translationResources } from './i18n.js';\r\n\r\nexport * from './application.js';\r\nexport * from './auth.js';\r\nexport * from './batch.js';\r\nexport * from './core.js';\r\nexport * from './file.js';\r\nexport * from './group.js';\r\nexport * from './message.js';\r\nexport * from './messageNodes.js';\r\nexport * from './notifications.js';\r\nexport * from './organization.js';\r\nexport * from './preferences.js';\r\nexport * from './presence.js';\r\nexport * from './project.js';\r\nexport * from './thread.js';\r\nexport * from './user.js';\r\nexport * from './webhook.js';\r\n\r\nexport type Point2D = { x: number; y: number };\r\n\r\n// navigate, if present and returning true, overrides our default navigate behavior\r\nexport type NavigateFn = (\r\n  url: string,\r\n  location: Location | null,\r\n  info: { orgID: OrganizationID; threadID: ThreadID; groupID: GroupID },\r\n) => boolean | Promise<boolean>;\r\n\r\nexport type ScreenshotOptions = {\r\n  blur?: boolean;\r\n  show_blurred?: BlurDisplayLocation;\r\n  capture_when?: CaptureScreenshotEvent[];\r\n  show_screenshot?: boolean;\r\n};\r\n\r\nexport type CustomRenderers = Record<\r\n  string,\r\n  (m: Record<string, unknown>) => HTMLElement\r\n>;\r\n\r\ntype DeepPartial<T> = T extends object\r\n  ? {\r\n      [P in keyof T]?: DeepPartial<T[P]>;\r\n    }\r\n  : T;\r\n\r\nexport type Translations = {\r\n  [lang in string]: DeepPartial<TranslationResources>;\r\n};\r\n\r\nexport type CordSDKInitOptions = CordSDKOptions & {\r\n  client_auth_token?: string;\r\n  react_package_version?: string;\r\n  onInitError?: InitErrorCallback;\r\n};\r\n\r\nexport type BeforeMessageCreateFunction = (\r\n  message: ClientCreateMessage,\r\n  context: {\r\n    threadID: ThreadID;\r\n    firstMessage: boolean;\r\n  },\r\n) =>\r\n  | ClientCreateMessage\r\n  | null\r\n  | undefined\r\n  | Promise<ClientCreateMessage | null | undefined>;\r\n\r\nexport type CordSDKOptions = {\r\n  navigate?: NavigateFn | null;\r\n  enable_tasks?: boolean;\r\n  enable_annotations?: boolean;\r\n  enable_slack?: boolean;\r\n  /** @deprecated use `screenshot_options.blur` instead */\r\n  blur_screenshots?: boolean;\r\n  /** @deprecated use `screenshot_options.capture` instead */\r\n  enable_screenshot_capture?: boolean;\r\n  /** @deprecated use `screenshot_options.showBlurred` instead */\r\n  show_blurred_screenshots?: BlurDisplayLocation;\r\n  /**\r\n   * @deprecated The annotation_mode prop has been superseded by enable_annotations\r\n   */\r\n  annotation_mode?: AnnotationMode;\r\n  thread_options?: ThreadOptions;\r\n  screenshot_options?: ScreenshotOptions;\r\n  custom_renderers?: CustomRenderers;\r\n  custom_event_metadata?: JsonObject;\r\n  /**\r\n   * A set of translations to use in Cord components.  This is an object where\r\n   * the keys are language codes and the values are objects representing\r\n   * translation keys.  See [the detailed guide to customizing Cord's\r\n   * text](https://docs.cord.com/customization/translations) for more details.\r\n   */\r\n  translations?: Translations;\r\n  /**\r\n   * The user language to display in components.  This must be used in\r\n   * combination with the `translations` option to have any effect.\r\n   */\r\n  language?: string;\r\n  beforeMessageCreate?: BeforeMessageCreateFunction | null;\r\n};\r\n\r\nexport type InitErrorCallback = (error: { message: string }) => unknown;\r\n\r\nexport type LoadCallback = (sdk: ICordSDK) => unknown;\r\n\r\nexport type AnnotationCapturePosition = {\r\n  x: number;\r\n  y: number;\r\n  element: HTMLElement;\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport type AnnotationCaptureResult<L extends Location = {}> = {\r\n  extraLocation?: Partial<L>;\r\n  label?: string;\r\n};\r\n\r\nexport type AnnotationRenderPosition = {\r\n  coordinates?: {\r\n    x: number | string;\r\n    y: number | string;\r\n  };\r\n  element?: HTMLElement;\r\n};\r\n\r\nexport type Annotation<L extends Location = Location> = {\r\n  id: string;\r\n  location: L;\r\n};\r\n\r\nexport type AnnotationWithThreadID<L extends Location = Location> = {\r\n  id: string;\r\n  location: L;\r\n  threadID: ThreadID;\r\n};\r\n\r\nexport type AnnotationPositionRendererCallback<L extends Location = Location> =\r\n  (\r\n    annotation: Annotation<L>,\r\n    coordsRelativeToTarget: { x: number; y: number },\r\n  ) => AnnotationRenderPosition | null | undefined | void;\r\n\r\nexport type AnnotationHandler<L extends Location = Location> = {\r\n  getAnnotationPosition: AnnotationPositionRendererCallback<L>;\r\n  onAnnotationCapture: (\r\n    capturePosition: AnnotationCapturePosition,\r\n    element: HTMLElement,\r\n  ) => AnnotationCaptureResult | undefined | void;\r\n  onAnnotationClick: (annotation: AnnotationWithThreadID<L>) => unknown;\r\n};\r\n\r\nexport interface ICordAnnotationSDK {\r\n  /**\r\n   * @deprecated Use functions specific to the type of handler you are setting.\r\n   */\r\n  setAnnotationHandler<T extends keyof AnnotationHandler, L extends Location>(\r\n    type: T,\r\n    locationString: string,\r\n    handler: AnnotationHandler<L>[T] | null,\r\n  ): void;\r\n\r\n  setRenderHandler<L extends Location>(\r\n    location: L,\r\n    handler: AnnotationHandler<L>['getAnnotationPosition'],\r\n  ): void;\r\n  clearRenderHandler(location: Location): void;\r\n\r\n  setCaptureHandler<L extends Location>(\r\n    location: L,\r\n    handler: AnnotationHandler<L>['onAnnotationCapture'],\r\n  ): void;\r\n  clearCaptureHandler(location: Location): void;\r\n\r\n  setClickHandler<L extends Location>(\r\n    location: L,\r\n    handler: AnnotationHandler<L>['onAnnotationClick'],\r\n  ): void;\r\n  clearClickHandler(location: Location): void;\r\n\r\n  redrawAnnotations(): void;\r\n\r\n  /**\r\n   * Takes viewport coordinates and serializes them into a string which can\r\n   * later be turned back into viewport coordinates. This process encodes\r\n   * information about DOM structure and other information beyond just the\r\n   * coordinates so that they can be deserialized even by different users with\r\n   * different window sizes and even if the DOM has changed.\r\n   *\r\n   * This function is used by Cord whenever an annotation is created in order to\r\n   * save the position of that annotation to the Cord backend.\r\n   *\r\n   * @param coords The current coordinates relative to the browser's viewport.\r\n   * @returns An opaque serialized string, which can only be passed to `stringToViewportCoordinates`.\r\n   */\r\n  viewportCoordinatesToString(coords: Point2D): Promise<string | null>;\r\n\r\n  /**\r\n   * Takes a serialized string from `viewportCoordinatesToString` and converts\r\n   * it back into viewport coordinates. The new coordinates are adjusted for\r\n   * changes in window size, DOM structure, etc. This means that even if the\r\n   * string was generated by a user on a different computer with a different\r\n   * window size, the resulting coordinates should point to an element that\r\n   * \"feels like\" \"the same\" element, even if its coordinates are quite\r\n   * different from when the string was originally generated.\r\n   *\r\n   * This process can fail, for example if the DOM has changed too much or the\r\n   * original element simply does not exist in the DOM any more, and will return\r\n   * `null` in such cases.\r\n   *\r\n   * This function is used by Cord whenever an annotation is rendered in order\r\n   * to position the annotation on the screen.\r\n   *\r\n   * @param str A serialized string generated by `viewportCoordinatesToString`.\r\n   * @returns Viewport coordinates or `null`, as above.\r\n   */\r\n  stringToViewportCoordinates(str: string): Promise<Point2D | null>;\r\n}\r\n\r\nexport interface ICordSDK {\r\n  init(options: CordSDKInitOptions): Promise<void>;\r\n  options: CordSDKInitOptions;\r\n  updateOptions(options: CordSDKOptions): void;\r\n  destroy(): void;\r\n  addMonacoEditor(id: string, monacoEditor: unknown): void;\r\n  removeMonacoEditor(id: string): void;\r\n  addReactTree(id: string, reactTree: unknown): void;\r\n  removeReactTree(id: string): void;\r\n  annotation: ICordAnnotationSDK;\r\n  /** @deprecated Renamed to sdk.annotation. */\r\n  annotations: ICordAnnotationSDK;\r\n  presence: ICordPresenceSDK;\r\n  user: ICordUserSDK;\r\n  /** @deprecated All functions under sdk.activity have been renamed. */\r\n  activity: ICordActivitySDK;\r\n  thread: ICordThreadSDK;\r\n  notification: ICordNotificationSDK;\r\n  file: ICordFileSDK;\r\n  experimental: Record<string, never>;\r\n  groupID?: string;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    CordSDK?: ICordSDK;\r\n    cord?: ICordSDK;\r\n  }\r\n}\r\n\r\n/* cord-live-cursors */\r\n\r\nexport type LiveCursorsWebComponentEvents = Record<string, never>;\r\n\r\n/* cord-page-presence */\r\n\r\nexport type PagePresenceWebComponentEvents = {\r\n  update: [foo: number];\r\n};\r\n\r\n/* cord-presence-facepile */\r\n\r\nexport type PresenceFacepileWebComponentEvents = {\r\n  update: [foo: number];\r\n};\r\n\r\nexport type Orientation = 'horizontal' | 'vertical';\r\n\r\n/* cord-presence-observer */\r\n\r\nexport type PresenceObserverWebComponentEvents = {\r\n  change: [present: boolean];\r\n};\r\n\r\n/* cord-sidebar */\r\n\r\nexport type SidebarWebComponentEvents = {\r\n  open: [{ width?: number }];\r\n  close: [];\r\n  threadopen: [threadID: ThreadID];\r\n  threadclose: [threadID: ThreadID];\r\n};\r\n\r\n/* cord-sidebar-launcher */\r\n\r\nexport type SidebarLauncherWebComponentEvents = {\r\n  click: [];\r\n};\r\n\r\n/**\r\n * @deprecated Use CSS instead: target `.cord-badge` class\r\n * and apply any styles.\r\n */\r\nexport type BadgeStyle = 'badge' | 'badge_with_count' | 'none';\r\n\r\n/* cord-floating-threads */\r\n\r\nexport type FloatingThreadsWebComponentEvents = {\r\n  start: [];\r\n  finish: [threadID: ThreadID];\r\n  cancel: [];\r\n};\r\n\r\n/* cord-thread */\r\nexport type ThreadWebComponentEvents = {\r\n  threadinfochange: [threadInfo: ThreadInfo];\r\n  close: [threadInfo: ThreadCallbackInfoWithThreadID];\r\n  resolved: [threadInfo: ThreadCallbackInfo];\r\n  render: [];\r\n  loading: [];\r\n};\r\n\r\nexport type ThreadInfo = ThreadCallbackInfo & {\r\n  messageCount: number;\r\n};\r\n\r\nexport type ThreadCallbackInfo = {\r\n  thread: ThreadSummary;\r\n};\r\n\r\nexport type ThreadCallbackInfoWithThreadID = {\r\n  threadID: ThreadID;\r\n  thread: ThreadSummary | null;\r\n};\r\n\r\n/* cord-thread-list */\r\nexport type ThreadListWebComponentEvents = {\r\n  threadclick: [threadID: ThreadID, threadSummary: ThreadSummary];\r\n  threadmouseenter: [ThreadID, { thread: ThreadSummary }];\r\n  threadmouseleave: [ThreadID, { thread: ThreadSummary }];\r\n  threadresolve: [{ threadID: ThreadID; thread: ThreadSummary }];\r\n  threadreopen: [{ threadID: ThreadID; thread: ThreadSummary }];\r\n  render: [];\r\n  loading: [];\r\n};\r\n\r\n/* cord-composer */\r\nexport type ComposerWebComponentEvents = {\r\n  focus: [{ threadId: ThreadID; thread: ThreadSummary | null }];\r\n  blur: [{ threadId: ThreadID; thread: ThreadSummary | null }];\r\n  close: [{ threadId: ThreadID; thread: ThreadSummary | null }];\r\n  send: [\r\n    { threadId: ThreadID; messageId: MessageID; thread: ThreadSummary | null },\r\n  ];\r\n  threadreopen: [{ threadId: ThreadID; thread: ThreadSummary }];\r\n};\r\n\r\nexport const COMPOSER_SIZE = ['small', 'medium', 'large'] as const;\r\nexport type ComposerSize = (typeof COMPOSER_SIZE)[number];\r\n\r\n/* cord-inbox-launcher */\r\nexport type InboxLauncherWebComponentEvents = { click: [] };\r\n\r\n/* cord-inbox */\r\nexport type InboxWebComponentEvents = { closeRequested: [] };\r\n\r\n// cord-notification-list-launcher\r\nexport type NotificationListLauncherWebComponentEvents = { click: [] };\r\n\r\n// cord-notification\r\nexport type NotificationWebComponentEvents = {\r\n  click: [\r\n    MouseEvent,\r\n    {\r\n      notification: CoreNotificationData;\r\n      message: ClientMessageData | null;\r\n      location: Location | null;\r\n      destinationUrl: string;\r\n    },\r\n  ];\r\n};\r\n\r\n// cord-pin\r\nexport type PinWebComponentEvents = {\r\n  resolve: [ThreadSummary | null];\r\n  click: [ThreadSummary | null];\r\n  mouseenter: [ThreadSummary | null];\r\n  mouseleave: [ThreadSummary | null];\r\n};\r\n\r\n// cord-message\r\n\r\nexport type MessageInfo = {\r\n  threadId: string;\r\n  messageId: string;\r\n  thread: ThreadSummary;\r\n  message: ClientMessageData;\r\n};\r\n\r\nexport type MessageWebComponentEvents = {\r\n  click: [messageInfo: MessageInfo];\r\n  mouseenter: [messageInfo: MessageInfo];\r\n  mouseleave: [messageInfo: MessageInfo];\r\n  editstart: [messageInfo: MessageInfo];\r\n  editend: [messageInfo: MessageInfo];\r\n  threadresolve: [{ threadID: ThreadID; thread: ThreadSummary }];\r\n  threadreopen: [{ threadID: ThreadID; thread: ThreadSummary }];\r\n  render: [];\r\n  loading: [];\r\n};\r\n\r\n/* annotation types */\r\n\r\nexport type DocumentAnnotationResult = {\r\n  annotation: MessageAnnotation;\r\n  screenshot: Screenshot;\r\n  blurredScreenshot: Screenshot;\r\n};\r\n\r\nexport interface MessageAnnotation {\r\n  id: string;\r\n  location: DocumentLocation | null;\r\n  customLocation: Location | null;\r\n  customHighlightedTextConfig: HighlightedTextConfig | null;\r\n  customLabel: string | null;\r\n  coordsRelativeToTarget: { x: number; y: number } | null;\r\n  sourceID: UUID;\r\n  draft?: boolean;\r\n}\r\n\r\nexport type DocumentLocation = {\r\n  selector: string;\r\n  x: number;\r\n  y: number;\r\n  iframeSelectors: string[];\r\n  onChart: boolean | null;\r\n  textConfig: LocationTextConfig | null;\r\n  elementIdentifier: {\r\n    version: ElementIdentifierVersion;\r\n    identifier: JsonObject;\r\n  } | null;\r\n  highlightedTextConfig: HighlightedTextConfig | null;\r\n  multimediaConfig: MultimediaConfig | null;\r\n  // In some cases, we need to record more data to be able\r\n  // to provide some functionality.\r\n  additionalTargetData: AdditionalTargetData | null;\r\n};\r\n\r\nexport type LocationTextConfig = {\r\n  selectedCharOffset: number;\r\n  textToMatch: string;\r\n  textToMatchOffset: number;\r\n  nodeIndex: number;\r\n  xVsPointer: number;\r\n  yVsPointer: number;\r\n};\r\n\r\nexport type ElementIdentifierVersion = '1' | '2';\r\n\r\nexport type HighlightedTextConfig = {\r\n  startElementSelector: string;\r\n  endElementSelector: string;\r\n  startNodeIndex: number;\r\n  startNodeOffset: number;\r\n  endNodeIndex: number;\r\n  endNodeOffset: number;\r\n  selectedText: string;\r\n  // We added textToDisplay while developing this feature, so some annotations\r\n  // won't have it. Later, we should be able to make it required and correct any\r\n  // old annotations (by setting textToDisplay equal to selectedText)\r\n  textToDisplay: string | null;\r\n};\r\n\r\nexport type MultimediaConfig = {\r\n  currentTime: number;\r\n};\r\n\r\nexport const VIRTUALISED_LISTS = [\r\n  'monacoEditor',\r\n  'reactTree',\r\n  'konvaCanvas',\r\n] as const;\r\nexport type TargetType = (typeof VIRTUALISED_LISTS)[number];\r\n\r\nexport type AdditionalTargetData = {\r\n  targetType: TargetType;\r\n  monacoEditor: {\r\n    monacoID: string | null;\r\n    lineNumber: number;\r\n  } | null;\r\n  reactTree: {\r\n    key: string;\r\n    treeID: string | null;\r\n  } | null;\r\n  konvaCanvas: {\r\n    x: number;\r\n    y: number;\r\n  } | null;\r\n};\r\n\r\nexport type FileUploadStatus =\r\n  | 'uploaded'\r\n  | 'uploading'\r\n  | 'failed'\r\n  | 'cancelled';\r\nexport type Screenshot = null | {\r\n  id: UUID;\r\n  name: string;\r\n  mimeType: string;\r\n  url: string;\r\n  uploadStatus: FileUploadStatus;\r\n  size: number;\r\n};\r\n\r\n/* utility types */\r\n\r\nexport type JsonValue =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | JsonValue[]\r\n  | JsonObject;\r\n\r\nexport type JsonObject = { [key: string]: JsonValue | undefined };\r\n\r\nexport const BLUR_DISPLAY_LOCATIONS = ['everywhere', 'outside_page'] as const;\r\nexport type BlurDisplayLocation = (typeof BLUR_DISPLAY_LOCATIONS)[number];\r\n\r\nexport const CAPTURE_SCREENSHOT_EVENT = [\r\n  'new-annotation',\r\n  'share-via-email',\r\n  'new-thread',\r\n  'new-message',\r\n] as const;\r\nexport type CaptureScreenshotEvent = (typeof CAPTURE_SCREENSHOT_EVENT)[number];\r\nexport function isCaptureScreenshotEvent(\r\n  captureEvent: string,\r\n): captureEvent is CaptureScreenshotEvent {\r\n  return (\r\n    (CAPTURE_SCREENSHOT_EVENT as readonly string[]).indexOf(captureEvent) !== -1\r\n  );\r\n}\r\n\r\nexport function isBlurDisplayLocation(\r\n  behavior: string,\r\n): behavior is BlurDisplayLocation {\r\n  return (BLUR_DISPLAY_LOCATIONS as readonly string[]).indexOf(behavior) !== -1;\r\n}\r\n\r\nexport const ANNOTATION_MODES = [\r\n  'everywhere',\r\n  'custom_targets_only',\r\n  'none',\r\n] as const;\r\n\r\nexport type AnnotationMode = (typeof ANNOTATION_MODES)[number];\r\n\r\nexport function isAnnotationMode(mode: string): mode is AnnotationMode {\r\n  return (ANNOTATION_MODES as readonly string[]).indexOf(mode) !== -1;\r\n}\r\n\r\n// declare global {\r\n//   interface Element {\r\n//     addEventListener<K extends keyof CordCustomEvents>(\r\n//       type: K,\r\n//       listener: (this: Document, event: CordCustomEvents[K]) => void,\r\n//     ): void;\r\n//   }\r\n// }\r\n\r\n// type FT = Parameters<typeof f>;\r\n\r\n// type CustomEvents<T extends Record<string, Function>> = {\r\n//   [P in keyof T]: Parameters<T[P]>;\r\n// };\r\n\r\n// type TextComponentCustomEvents = CustomEvents<TextComponentEvents>;\r\n\r\nexport const CORD_ANNOTATION_LOCATION_DATA_ATTRIBUTE =\r\n  'data-cord-annotation-location';\r\n\r\nexport const CORD_ANNOTATION_ALLOWED_DATA_ATTRIBUTE =\r\n  'data-cord-annotation-allowed';\r\n\r\nexport const CORD_COMPONENT_WRAPS_DOM_DATA_ATTRIBUTE =\r\n  'data-cord-component-wraps-dom';\r\n\r\nexport const CORD_SCREENSHOT_TARGET_DATA_ATTRIBUTE =\r\n  'data-cord-screenshot-target';\r\n\r\nexport function locationJson(c: Partial<Location>): string {\r\n  return JSON.stringify(\r\n    Object.fromEntries(\r\n      Object.entries(c)\r\n        .filter(([_key, value]) => value !== undefined)\r\n        .sort(([keyA], [keyB]) => (keyA < keyB ? -1 : 1)),\r\n    ),\r\n  );\r\n}\r\n\r\nexport interface HTMLCordElement extends HTMLElement {\r\n  initialised?: true;\r\n  dispatchCordEvent(e: Event): void;\r\n}\r\n\r\nexport interface HTMLCordSidebarFunctions {\r\n  startComposer(): void;\r\n}\r\n\r\nexport interface HTMLCordSidebarElement\r\n  extends HTMLCordElement,\r\n    HTMLCordSidebarFunctions,\r\n    WithScreenshotConfig {}\r\n\r\nexport interface HTMLCordFloatingThreadsFunctions {\r\n  openThread(threadId: ThreadID): void;\r\n  createThread(): void;\r\n  cancelThread(): void;\r\n}\r\n\r\nexport interface HTMLCordFloatingThreadsElement\r\n  extends HTMLCordElement,\r\n    HTMLCordFloatingThreadsFunctions,\r\n    WithScreenshotConfig {}\r\n\r\nexport type LiveCursorsCursorPosition =\r\n  | {\r\n      viewportX: number;\r\n      viewportY: number;\r\n      click: boolean;\r\n    }\r\n  | null\r\n  | undefined;\r\n\r\nexport type LiveCursorsEventToLocationFnOptions = {\r\n  send_clicks?: boolean;\r\n};\r\n\r\nexport type LiveCursorsEventToLocationFn = (\r\n  e: MouseEvent,\r\n  options: LiveCursorsEventToLocationFnOptions,\r\n) => Promise<Location | null> | Location | null;\r\nexport type MultipleCursorsEventToLocationFn = LiveCursorsEventToLocationFn;\r\n\r\nexport type LiveCursorsLocationToDocumentFn = (\r\n  location: Location,\r\n) => Promise<LiveCursorsCursorPosition> | LiveCursorsCursorPosition;\r\nexport type MultipleCursorsLocationToDocumentFn =\r\n  LiveCursorsLocationToDocumentFn;\r\n\r\nexport interface HTMLCordLiveCursorsFunctions {\r\n  setTranslations(\r\n    eventToLocation: LiveCursorsEventToLocationFn,\r\n    locationToDocument: LiveCursorsLocationToDocumentFn,\r\n  ): void;\r\n}\r\nexport type HTMLCordMultipleCursorsFunctions = HTMLCordLiveCursorsFunctions;\r\n\r\nexport interface HTMLCordLiveCursorsElement\r\n  extends HTMLCordElement,\r\n    HTMLCordLiveCursorsFunctions {}\r\nexport type HTMLCordMultipleCursorsElement = HTMLCordLiveCursorsElement;\r\n\r\nexport type HTMLCordAnchoredThreadsElement = HTMLCordFloatingThreadsElement;\r\n\r\nexport type ThreadOptions = {\r\n  additional_subscribers_on_create: string[];\r\n};\r\n\r\nexport type HTMLCordThreadElement = WithScreenshotConfig;\r\n\r\n/**\r\n * Specify what DOM element to screenshot. This overrides Cord's\r\n * default screenshot behavior, which is to take a screenshot of\r\n * the current viewport.\r\n * Alternatively, you can provide Cord with your own screenshot,\r\n * using `screenshotUrlOverride`.\r\n *\r\n * You can set the `ScreenshotConfig` to `undefined` to re-enable Cord's\r\n * default behavior.\r\n */\r\nexport type ScreenshotConfig =\r\n  | {\r\n      /**\r\n       * The screenshot will only include this DOM\r\n       * element and all of its children. Unless a screenshotUrlOverride is provided,\r\n       * in which case the screenshot will be the image available at that URL.\r\n       */\r\n      targetElement?: HTMLElement;\r\n      /**\r\n       * Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.\r\n       */\r\n      cropRectangle?: Partial<{\r\n        /** X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement` */\r\n        x: number;\r\n        /** Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement` */\r\n        y: number;\r\n        /** By default, this is the width of the `targetElement` */\r\n        width: number;\r\n        /** By default, this is the height of the `targetElement` */\r\n        height: number;\r\n      }>;\r\n      /**\r\n       * If specified, Cord will NOT take a screenshot and use the image at this URL instead.\r\n       */\r\n      screenshotUrlOverride?: string;\r\n    }\r\n  | undefined;\r\n\r\nexport interface WithScreenshotConfig extends HTMLCordElement {\r\n  screenshotConfig: ScreenshotConfig;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'email_notifications',\r\n  timestamps: false,\r\n})\r\nexport class EmailOutboundNotificationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  email!: string;\r\n}\r\n", "import addrs from 'email-addresses';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport replyParser from 'node-email-reply-parser';\r\nimport type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\n\r\n// Parses an email address such as \"sponge@bob.com\" or\r\n// \"Sponge Bob <sponge@bob.com>\"\r\nexport function parseEmailAddress(emailAddress: string): addrs.ParsedMailbox {\r\n  const parsedAddress = addrs\r\n    .parseAddressList(emailAddress)\r\n    ?.find((email): email is addrs.ParsedMailbox => email.type === 'mailbox');\r\n  if (parsedAddress === undefined) {\r\n    throw new Error(`failed to parse email address: ${emailAddress}`);\r\n  }\r\n  return parsedAddress;\r\n}\r\n\r\n/**\r\n * Takes a sender email address and a notification ID, and returns a reply-to\r\n * email address such that replies to that address will be appended to the\r\n * thread associated with the notification ID.\r\n */\r\nexport function getReplyToEmailAddress(\r\n  logger: Logger,\r\n  senderEmailAddress: string,\r\n  notificationId: UUID,\r\n): string {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(senderEmailAddress);\r\n\r\n    // Applications can use a white-label (non-@cord.fyi) sender email. That's\r\n    // fine, but replies MUST come via cord.fyi; those emails get routed through\r\n    // SendGrid, who call a webhook (search this repo for\r\n    // SendGridWebhookHandler) so we can handle them and e.g. append reply\r\n    // contents to the appropriate thread.\r\n    const replyToAddress = `${parsedAddress.local}-${notificationId}@cord.fyi`;\r\n    if (parsedAddress.name) {\r\n      return `${parsedAddress.name} <${replyToAddress}>`;\r\n    }\r\n    return replyToAddress;\r\n  } catch (e) {\r\n    logger.logException('failed to parse email address', e);\r\n    return senderEmailAddress;\r\n  }\r\n}\r\n\r\n// If email name ends with \"-UUID\" then it returns that UUID\r\nexport function extractCordEmailUUID(emailAddress: string): UUID | null {\r\n  try {\r\n    const parsedAddress = parseEmailAddress(emailAddress);\r\n    const uuidLength = 36;\r\n    // check that the address ends with a dash \"-\" and then 36 UUID characters\r\n    if (\r\n      parsedAddress.local.length < 1 + uuidLength ||\r\n      parsedAddress.local.slice(-(1 + uuidLength))[0] !== '-'\r\n    ) {\r\n      return null;\r\n    }\r\n    const maybeUUID = parsedAddress.local.slice(-uuidLength);\r\n    return isUUID.default(maybeUUID) ? maybeUUID : null;\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'failed to parse email address',\r\n      e,\r\n      {},\r\n      undefined,\r\n      'warn',\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function emailTextToMessageContent(\r\n  emailText: string,\r\n  attachments: string,\r\n): MessageContent {\r\n  // Unlike Gmail, Mac Mail does not automatically add a standard email\r\n  // signature separator like '--' at the begining of a signature block\r\n  // so our library was not detecting it as such.\r\n  // As a result, we were sending the signature as part of the reply message.\r\n\r\n  // To overcome this, we break up the email content into fragments and\r\n  // disregard anything that comes after the quoted text reply.\r\n  // Unfortunately, this will still be an issue for users who add their\r\n  // signatures above the quoted text and have no signature separator.\r\n  const replyFragments = replyParser(emailText).getFragments();\r\n  let replyBeforeQuotedText = '';\r\n  for (const fragment of replyFragments) {\r\n    if (fragment.isQuoted()) {\r\n      break;\r\n    }\r\n    replyBeforeQuotedText += fragment.getContent();\r\n  }\r\n\r\n  let replyText = replyParser(replyBeforeQuotedText).getVisibleText({\r\n    // from the docs of replyParser:\r\n    // Using aggressive mode runs the risk of losing visible lines which are\r\n    // interspersed with quoted lines, but is useful when parsing e.g. emails\r\n    // from a 'reply by email' feature which contain a large block of quoted\r\n    // text.\r\n    aggressive: true,\r\n  });\r\n\r\n  if (Number(attachments) > 0) {\r\n    replyText = replyText + `\\n(Unable to display attached files)`;\r\n  }\r\n\r\n  return replyText\r\n    .split(/\\r?\\n/)\r\n    .filter((l) => l.length > 0)\r\n    .map((line) => ({\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [{ text: line }],\r\n    }));\r\n}\r\n\r\nexport async function getNotification(\r\n  toAddress: string,\r\n  inReplyToHeader: string | undefined,\r\n  fromEmail: string,\r\n  logger: Logger,\r\n) {\r\n  const notificationID = extractCordEmailUUID(toAddress);\r\n  if (notificationID) {\r\n    return await EmailOutboundNotificationEntity.findOne({\r\n      where: { id: notificationID },\r\n    });\r\n  }\r\n\r\n  if (inReplyToHeader) {\r\n    // Some mail clients, like Hubspot, do not respect the Reply-To email header\r\n    // and send their reply to the From header, which does not contain our notification\r\n    // ID.  In that case, we can try and pull out the ID we set in the 'Message-ID'\r\n    // header, which will now be the 'In-Reply-To' header in the incoming email\r\n    // (see getThreadingHeaders fn: these are headers which are used to thread\r\n    // messages nicely in email clients). This will either be the notification ID\r\n    // or thread ID, depending on whether this was a first notification or not.\r\n    // With the combination of the thread ID and the email this message came from,\r\n    // we should be able to find the Notification.\r\n    logger.debug(\r\n      'Unable to find notificationId in toAddress, will try to find from inReplyTo header',\r\n      {\r\n        toAddress,\r\n        inReplyToHeader,\r\n        fromEmail,\r\n      },\r\n    );\r\n\r\n    const threadOrNotificationID = extractCordEmailUUID(inReplyToHeader);\r\n\r\n    // First see if the ID we found is a notification ID\r\n    if (threadOrNotificationID) {\r\n      const notification = await EmailOutboundNotificationEntity.findOne({\r\n        where: { id: threadOrNotificationID },\r\n      });\r\n      if (notification) {\r\n        return notification;\r\n      }\r\n    }\r\n\r\n    let parsedFromEmail;\r\n\r\n    try {\r\n      const email = parseEmailAddress(fromEmail);\r\n      parsedFromEmail = email.address;\r\n    } catch (e: any) {\r\n      logger.warn('Error parsing from email', e);\r\n    }\r\n\r\n    // If we're still here, it wasn't a notification ID (or the notification has\r\n    // disappeared for some reason).  Assume it's a thread ID:\r\n    if (threadOrNotificationID && parsedFromEmail) {\r\n      return await EmailOutboundNotificationEntity.findOne({\r\n        where: { threadID: threadOrNotificationID, email: parsedFromEmail },\r\n      });\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getHeader(key: string, input: string) {\r\n  const pattern = new RegExp(`^${key}: (.+)$`, 'gm');\r\n  const match = pattern.exec(input);\r\n\r\n  return match?.[1];\r\n}\r\n\r\nexport type RelevantHeaders =\r\n  | Record<'messageID' | 'inReplyTo' | 'autoSubmitted', string | undefined>\r\n  | undefined;\r\n\r\n// We could use the mailparser npm package to do this but it would also require\r\n// adding another library as middleware (https://github.com/nodemailer/mailparser/issues/253)\r\n// and it didn't seem worth it for grabbing a couple of strings\r\n// Add more headers you might expect to find if you need them!\r\nexport function parseRelevantHeaders(headersString: string): RelevantHeaders {\r\n  // This is a specific ID for this incoming email and would be something like:\r\n  // '<CACnco=B99bM4+YPHkUNqgPT8azMcYCROss2BdPgA7pAoqW8egw@mail.gmail.com>',\r\n  const messageID = getHeader('Message-Id', headersString);\r\n  // This should be the Message-ID we set on the original email notification, which\r\n  // contains the threadID. See getThreadingHeaders.\r\n  const inReplyTo = getHeader('In-Reply-To', headersString);\r\n  // This is a header that should be set if a reply is automated, e.g. an OOO\r\n  const autoSubmitted = getHeader('Auto-Submitted', headersString);\r\n\r\n  return { messageID, inReplyTo, autoSubmitted };\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID, JsonObject, Tier } from 'common/types/index.ts';\r\nimport type { Session } from 'server/src/auth/index.ts';\r\n\r\n@Table({\r\n  tableName: 'events',\r\n  timestamps: false,\r\n})\r\nexport class EventEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  // The unique load of the page/DOM instance (i.e. window/DOM object) where\r\n  // the event was generated\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  pageLoadID!: UUID;\r\n\r\n  // The unique id of the extension installation\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  installationID!: UUID | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  version!: string | null;\r\n\r\n  // The version of the client logging this event\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  utmParameters!: Session['utmParameters'] | null;\r\n\r\n  // The logged-in user when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID | null;\r\n\r\n  // The user profile when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID | null;\r\n\r\n  // The platformApplicationID when the event was generated (if there was one)\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  // A monotically increasing (and usually sequential) index starting\r\n  // from zero at the beginning of the page that should help clarify\r\n  // the order of events in the case that the timestamps are inscrutable or too\r\n  // close to call.\r\n  @Column({\r\n    type: DataTypes.NUMBER,\r\n  })\r\n  eventNumber!: number;\r\n\r\n  // The timestamp as reported by the client (untrustworthy)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  clientTimestamp!: Date;\r\n\r\n  // The timestamp for when the event reached the server (not\r\n  // guaranteed to be the time the event happened due to batching\r\n  // on the client)\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  serverTimestamp!: Date;\r\n\r\n  // An arbitrary label to differentiate this event\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  type!: string;\r\n\r\n  // An arbitrary data payload to send along with the event. Please\r\n  // be sane about what you log here. Think in 10s of bytes, not in\r\n  // kilobytes or megabytes.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  payload!: JsonObject;\r\n\r\n  // A rich set of characteristics about the browser when the event\r\n  // generated.\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: JsonObject;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  tier!: Tier;\r\n}\r\n", "import type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nconst backgroundPromises = new Set<Promise<unknown>>();\r\n\r\n/**\r\n * Track a promise that we don't need to immediately await on, but do want to\r\n * make sure *eventually* finishes before server shutdown or test end or\r\n * similar. Calling `waitForEmptyBackground` will make sure that all of these\r\n * promises, as well as any that they (recursively) call into this function\r\n * with, are resolved.\r\n *\r\n * Generally prefer this to just a floating promise, so we at least have *some*\r\n * mechanism to keep track of it!\r\n */\r\nexport function backgroundPromise(p: Promise<unknown>, _logger?: Logger) {\r\n  backgroundPromises.add(p);\r\n  p.catch((e) => {\r\n    const logger = _logger ?? anonymousLogger();\r\n    logger.logException(`Error resolving background promise`, e);\r\n  }).finally(() => {\r\n    backgroundPromises.delete(p);\r\n  });\r\n}\r\n\r\n/**\r\n * Wait until all promises added to `backgroundPromise` are resolved, as well as\r\n * any that they add (recursively).\r\n */\r\nexport async function waitForEmptyBackground() {\r\n  while (backgroundPromises.size > 0) {\r\n    await Promise.all(backgroundPromises);\r\n\r\n    // Give the `.then` above a chance to run and remove the promise from the\r\n    // set. Empirically this doesn't seem to be necessary, but not sure if that\r\n    // is accidentally relying on non-contractual behaviour of `.then`, and this\r\n    // is simple and can't hurt.\r\n    await new Promise(process.nextTick);\r\n  }\r\n}\r\n", "import { EventEntity } from 'server/src/entity/event/EventEntity.ts';\r\nimport type { Session } from 'server/src/auth/index.ts';\r\nimport type {\r\n  LogEventInput,\r\n  LogLevelType,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport type {\r\n  DeploymentType,\r\n  JsonObject,\r\n  NullableKeys,\r\n} from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport {\r\n  FeatureFlags,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport class EventMutator {\r\n  constructor(public session: Session) {}\r\n\r\n  async createEvent(\r\n    input: Omit<\r\n      NullableKeys<LogEventInput, 'eventNumber' | 'clientTimestamp'>,\r\n      'customEventMetadata'\r\n    >,\r\n    version?: string | null,\r\n    deployment?: DeploymentType | null,\r\n  ): Promise<EventEntity | null> {\r\n    if (\r\n      process.env.NODE_ENV === 'production' && // in production\r\n      !!version && // if an event has a version defined\r\n      !version.includes('.') // and is a development version (timestamp, ex: 1607001220661)\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    // Extract the userID, orgID and applicationID from the server-side session.\r\n    // Don't trust the client to provide that information.\r\n    const {\r\n      utmParameters,\r\n      viewer: { userID, orgID, platformApplicationID },\r\n    } = this.session;\r\n\r\n    const platformApplication = await ApplicationEntity.findByPk(\r\n      platformApplicationID,\r\n    );\r\n\r\n    // Killswitch. This table is huge, these writes can get expensive.\r\n    const enabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.WRITE_TO_EVENTS_TABLE,\r\n      {\r\n        userID: userID ?? 'anonymous',\r\n        orgID,\r\n        platformApplicationID: platformApplicationID ?? 'extension',\r\n        version: version ?? null,\r\n        customerID: platformApplication?.customerID,\r\n      },\r\n    );\r\n    if (!enabled) {\r\n      return null;\r\n    }\r\n\r\n    const metadata = {\r\n      ...input.metadata,\r\n      deployment,\r\n    };\r\n\r\n    return await EventEntity.create({\r\n      ...input,\r\n      metadata,\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      version,\r\n      utmParameters,\r\n      tier: env.CORD_TIER,\r\n    });\r\n  }\r\n}\r\n\r\nexport function logServerEvent(args: {\r\n  session: Session;\r\n  type: string;\r\n  logLevel: LogLevelType;\r\n  payload?: JsonObject;\r\n  metadata?: JsonObject;\r\n}) {\r\n  const mutator = new EventMutator(args.session);\r\n  backgroundPromise(\r\n    mutator.createEvent({\r\n      pageLoadID: null,\r\n      clientTimestamp: null,\r\n      installationID: null,\r\n      eventNumber: null,\r\n      logLevel: args.logLevel,\r\n      type: args.type,\r\n      payload: args.payload ?? {},\r\n      metadata: args.metadata ?? {},\r\n    }),\r\n  );\r\n}\r\n", "// General sizing\r\nconst XSMALL = 2;\r\nconst SMALL = 4;\r\nconst MEDIUM = 8;\r\nconst LARGE = 16;\r\nconst XLARGE = 24;\r\nconst XXLARGE = 32;\r\nconst XXXLARGE = 48;\r\n\r\nconst AVATAR_BORDER_WIDTH_PX = XSMALL;\r\n\r\nconst CHECKBOX_DEFAULT_SIZE_PX = LARGE;\r\nconst MAIN_CHAT_AVATAR_SIZE_PX = XLARGE + AVATAR_BORDER_WIDTH_PX * 2;\r\nconst MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX = MEDIUM;\r\n\r\nexport const Sizes = {\r\n  // Sidebar\r\n  SIDEBAR_COMPACT_WIDTH: 312, // used when viewport width is <= VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_NORMAL_WIDTH: 416, // used when viewport width is > VIEWPORT_WIDTH_BREAKPOINT\r\n  SIDEBAR_MAX_WIDTH: 500,\r\n  VIEWPORT_WIDTH_BREAKPOINT: 1440,\r\n\r\n  // Navigation top bar\r\n  NAVIGATION_ITEM_SPACING_COMPACT: 12,\r\n  NAVIGATION_ITEM_SPACING_NORMAL: LARGE,\r\n\r\n  // subtract MEDIUM here, add it to the sidebar App.tsx container paddingBottom, to allow shadows to be visible\r\n  SIDEBAR_BOTTOM_SPACE: 96 - MEDIUM,\r\n\r\n  // Text\r\n  X_SMALL_TEXT_SIZE_PX: 10,\r\n  SMALL_TEXT_SIZE_PX: 12,\r\n  DEFAULT_TEXT_SIZE_PX: 14,\r\n  LARGE_TEXT_SIZE_PX: 18,\r\n  X_LARGE_TEXT_SIZE_PX: 24,\r\n  SMALL_LINE_HEIGHT_PX: 16,\r\n  DEFAULT_LINE_HEIGHT_PX: 20,\r\n  LARGE_LINE_HEIGHT_PX: 24,\r\n  X_LARGE_LINE_HEIGHT_PX: 32,\r\n  BOLD_TEXT_WEIGHT: 700,\r\n  NORMAL_TEXT_WEIGHT: 400,\r\n\r\n  // Spacing\r\n  SMALL_PADDING_PX: 6,\r\n  DEFAULT_PADDING_PX: 12,\r\n\r\n  DEFAULT_BORDER_RADIUS: SMALL,\r\n  LARGE_BORDER_RADIUS: MEDIUM,\r\n  SMALL_BORDER_RADIUS: XSMALL,\r\n\r\n  // Icon\r\n  DEFAULT_ICON_PADDING_PX: 4,\r\n\r\n  // Profile pics\r\n  PAGE_VISITORS_AVATAR_SIZE_PX: XLARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n  MAIN_CHAT_AVATAR_SIZE_PX,\r\n  MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  MESSAGE_LEFT_PADDING:\r\n    MAIN_CHAT_AVATAR_SIZE_PX + MAIN_CHAT_AVATAR_MARGIN_RIGHT_PX,\r\n  AVATAR_BORDER_WIDTH_PX,\r\n  FACEPILE_AVATAR_OVERLAP_SIZE_PX: SMALL,\r\n  NOTIFICATION_FACEPILE_SIZE: LARGE + AVATAR_BORDER_WIDTH_PX * 2,\r\n\r\n  // Composer\r\n  COMPOSER_ADD_BUTTON_HEIGHT_PX: XXLARGE,\r\n  COMPOSER_ADD_BUTTON_WIDTH_PX: XXLARGE,\r\n  COMPOSER_HORIZONTAL_PADDING: MEDIUM,\r\n  COMPOSER_VERTICAL_PADDING: 18,\r\n  MAX_COMPOSER_EDITOR_HEIGHT: 448,\r\n\r\n  // Messages\r\n  MESSAGE_BLOCK_BOTTOM_MARGIN: XLARGE,\r\n  MESSAGE_BOTTOM_MARGIN: MEDIUM * 1.5,\r\n  MESSAGE_CONTENTS_TOP_MARGIN: 5,\r\n  MESSAGE_PARAGRAPH_TOP_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_TOP_MARGIN: SMALL,\r\n  MESSAGE_REACTIONS_BOTTOM_MARGIN: -MEDIUM,\r\n  MESSAGE_SEEN_BY_BOTTOM_MARGIN: MEDIUM,\r\n  MESSAGE_REACTIONS_FACEPILE_OVERLAP: 6,\r\n  MESSAGE_PAST_REACTION_HEIGHT: LARGE,\r\n  MESSAGE_ANNOTATION_HEIGHT_PX: 40,\r\n  MESSAGES_KEBAB_MENU_WIDTH_PX: 196,\r\n  MESSAGE_HEIGHT_TRUNCATE_AT_PX: 300,\r\n  MESSAGE_HEIGHT_TRUNCATE_TO_PX: 200,\r\n  INFINITE_SCROLL_THRESHOLD_PX: 400,\r\n  MESSAGE_ATTACHMENT_PLACEHOLDER_HEIGHT_PX: 92,\r\n  // 277 is the height of kebab menu for your own message, with one line of 'seen by'\r\n  // We set the minHeight of the share to slack menu to this\r\n  MIN_KEBAB_SLACK_MENU_HEIGHT: 277,\r\n  // Distance between kebab menu and kebab menu icon\r\n  KEBAB_MENU_OFFSET: SMALL,\r\n\r\n  // Bullets / numbered / todo lists\r\n  BULLET_PADDING_LEFT: CHECKBOX_DEFAULT_SIZE_PX + MEDIUM,\r\n\r\n  // Todo - feed this into the menu itself (prob via more dynamic svg)\r\n  MESSAGE_MENU_HEIGHT: 32,\r\n\r\n  // Tooltip\r\n  TOOLTIP_HORIZONTAL_PADDING_PX: MEDIUM,\r\n  TOOLTIP_VERTICAL_PADDING_PX: SMALL,\r\n  TOOLTIP_LINE_HEIGHT_PX: LARGE,\r\n  TOOLTIP_MAX_WIDTH_PX: 180,\r\n  ANNOTATION_TOOLTIP_MAX_WIDTH_PX: 180,\r\n\r\n  // Attachments\r\n  ATTACHMENT_THUMBNAIL_PX: 58,\r\n  PDF_ATTACHMENT_PX: 90,\r\n\r\n  // Modal\r\n  MODAL_SELECT_CHANNELS_MAX_HEIGHT_PX: 240,\r\n\r\n  // ImageModal\r\n  IMAGE_MODAL_SMALL_SCALE: 0.66,\r\n  IMAGE_MODAL_BUTTON_HEIGHT_SCALE_PX: 40,\r\n  IMAGE_MODAL_MENU_MAX_WIDTH_PX: 180,\r\n  IMAGE_MODAL_MENU_TOP_POSITION_PX: 44,\r\n\r\n  // Success Popup\r\n  SUCCESS_POPUP_HEIGHT: 36,\r\n\r\n  // Annotation pointer\r\n  ANNOTATION_POINTER_MIN_GAP_VS_SCREEN_EDGE: MEDIUM,\r\n  ANNOTATION_POINTER_SMALL_SIZE_PX: 34, // 32 + 1 for border on each side, which is included in the svg\r\n\r\n  // Annotation arrow\r\n  ANNOTATION_ARROW_CIRCLE_RADIUS: 4,\r\n  ANNOTATION_ARROW_HORIZONTAL_MARGIN_FOR_TOOLTIP: XXLARGE,\r\n\r\n  // Charts in webpage\r\n  MIN_CHART_SIZE_PX: 50,\r\n  MAX_CHART_CONTAINER_SIZE_RATIO: 1.25,\r\n\r\n  // Login\r\n  LOGIN_BUTTON_WIDTH_PX: 354,\r\n  LOGIN_BUTTON_HEIGHT_PX: 56,\r\n  LOGIN_MARGIN_PX: 56,\r\n  LOGIN_BUTTON_TEXT_SIZE_PX: 18,\r\n  LOGIN_TITLE_TEXT_SIZE_PX: 36,\r\n  EMAIL_PROMPT_HEIGHT_PX: 128,\r\n  EMAIL_PROMPT_INPUT_VERTICAL_PADDING_PX: 14,\r\n\r\n  // Welcome\r\n  WELCOME_PARAGRAPH_MAX_WIDTH_PX: 400,\r\n  WELCOME_VIDEO_MAX_HEIGHT_PX: 300,\r\n  WELCOME_VIDEO_MAX_WIDTH_PX: 600,\r\n\r\n  // Workspace\r\n  WORKSPACE_HORIZONTAL_MARGIN_PX: 56,\r\n  WORKSPACE_VERTICAL_GAP_PX: 40,\r\n  WORKSPACE_VERTICAL_GAP_SMALL_PX: 32,\r\n  WORKSPACE_SMALL_PADDING_PX: 12,\r\n  WORKSPACE_XSMALL_PADDING_PX: 6,\r\n  WORKSPACE_PARAGRAPH_MAX_WIDTH_PX: 480,\r\n  WORKSPACE_WIDTH_PX: 576,\r\n  WORKSPACE_LOGIN_WIDTH_PX: 640,\r\n  WORKSPACE_LOGIN_BUTTON_HEIGHT_PX: 48,\r\n  WORKSPACE_LOGIN_ORG_IMAGE_SIZE_PX: XXXLARGE,\r\n  WORKSPACE_GET_STARTED_STEP_MAX_WIDTH_PX: 290,\r\n  WORKSPACE_GET_STARTED_STEP_MIN_WIDTH_PX: 230,\r\n  RECENTLY_SHARED_MIN_WIDTH_PX: 120,\r\n  RECENTLY_SHARED_MAX_WIDTH_PX: 240,\r\n  UPDATES_MAX_WIDTH_PX: 320,\r\n\r\n  // Extension popup\r\n  EXTENSION_POPUP_WIDTH: 360,\r\n  EXTENSION_POPUP_HEIGHT: 540,\r\n  EXTENSION_POPUP_START_CONVERSATION_BUTTON_HEIGHT: 60,\r\n\r\n  SPINNER_DEFAULT_HEIGHT_PX: 20,\r\n  SPINNER_LARGE_HEIGHT_PX: 40,\r\n  CHECKBOX_DEFAULT_SIZE_PX,\r\n\r\n  DEFAULT_ICON_SIZE: 24,\r\n  SMALL_ICON_SIZE: 16,\r\n  X_SMALL_ICON_SIZE: 12,\r\n\r\n  DEFAULT_BORDER_WIDTH: 1,\r\n\r\n  COLLAPSED_THREAD_MESSAGE_HEIGHT: 44,\r\n  ADD_THREAD_BUTTONS_HEIGHT: 60,\r\n  GAP_BETWEEN_THREADS: XLARGE,\r\n  GAP_BETWEEN_GROUPED_THREADS: MEDIUM,\r\n  LOAD_OLDER_MESSAGES_BUTTON_HEIGHT: 33,\r\n\r\n  THREAD_MESSAGE_PADDING: MEDIUM,\r\n\r\n  SCREENSHOT_BLUR_PX: 10,\r\n\r\n  //Screen Size for Embed\r\n\r\n  MINIMUM_SCREEN_WIDTH: 600,\r\n  MINIMUM_SCREEN_HEIGHT: 600,\r\n\r\n  // Puppet Auth\r\n  PUPPET_MODAL_TOP_MARGIN: 60,\r\n  PUPPET_MODAL_TOP_PADDING: 36,\r\n  PUPPET_MODAL_PADDING: 40,\r\n  PUPPET_MODAL_VERTICAL_PADDING_BUTTON: 10,\r\n  PUPPET_MODAL_VERTICAL_PADDING_TEXT_FIELD: 10,\r\n\r\n  // Launcher / Close sidebar button\r\n  LAUNCHER_ICON_HEIGHT: 60,\r\n  LAUNCHER_ICON_WIDTH: 60,\r\n  CLOSE_SIDEBAR_ICON_HEIGHT: 60,\r\n  CLOSE_SIDEBAR_ICON_WIDTH: 60,\r\n  LAUNCHER_FIXED_RIGHT_LENGTH: 16,\r\n  LAUNCHER_FIXED_BOTTOM_LENGTH: 16,\r\n\r\n  XSMALL,\r\n  SMALL,\r\n  MEDIUM,\r\n  LARGE,\r\n  XLARGE,\r\n  XXLARGE,\r\n  XXXLARGE,\r\n};\r\n\r\nexport type FontSize =\r\n  | 'xSmall'\r\n  | 'small'\r\n  | 'default'\r\n  | 'large'\r\n  | 'xLarge'\r\n  | 'inherit';\r\nexport const FontSizes: {\r\n  [fontSize in FontSize]: number | string;\r\n} = {\r\n  xSmall: Sizes.X_SMALL_TEXT_SIZE_PX,\r\n  small: Sizes.SMALL_TEXT_SIZE_PX,\r\n  default: Sizes.DEFAULT_TEXT_SIZE_PX,\r\n  large: Sizes.LARGE_TEXT_SIZE_PX,\r\n  xLarge: Sizes.X_LARGE_TEXT_SIZE_PX,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const LineHeights: { [fontSize in FontSize]: string } = {\r\n  xSmall: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  small: `${Sizes.SMALL_LINE_HEIGHT_PX}px`,\r\n  default: `${Sizes.DEFAULT_LINE_HEIGHT_PX}px`,\r\n  large: `${Sizes.LARGE_LINE_HEIGHT_PX}px`,\r\n  xLarge: `${Sizes.X_LARGE_LINE_HEIGHT_PX}px`,\r\n  inherit: 'inherit',\r\n};\r\n\r\nexport const MESSAGE_BLOCK_AVATAR_SIZE = 'l';\r\n\r\nexport const DEFAULT_EMAIL_LOGO_WIDTH = '140';\r\n", "// This is for important URLs to all kinds of services\r\n\r\nexport const TOP_SERVER_HOST = process.env.TOP_SERVER_HOST!;\r\nexport const APP_SERVER_HOST = process.env.APP_SERVER_HOST!;\r\nexport const API_SERVER_HOST = process.env.API_SERVER_HOST!;\r\nexport const API_SERVER_HOST_PRODUCTION =\r\n  process.env.API_SERVER_HOST_PRODUCTION!;\r\nexport const ADMIN_SERVER_HOST = process.env.ADMIN_SERVER_HOST!;\r\nexport const CONSOLE_SERVER_HOST = process.env.CONSOLE_SERVER_HOST!;\r\nexport const MARKETING_SERVER_HOST = process.env.MARKETING_SERVER_HOST!;\r\nexport const CORD_TO_HOST = process.env.CORD_TO_HOST!;\r\nexport const AUTH0_CUSTOM_LOGIN_DOMAIN = process.env.AUTH0_CUSTOM_LOGIN_DOMAIN!;\r\nexport const DOCS_SERVER_HOST = process.env.DOCS_SERVER_HOST!;\r\nexport const SLACK_APP_REDIRECT_HOST = process.env.SLACK_APP_REDIRECT_HOST;\r\n\r\nexport const TOP_ORIGIN = 'https://' + process.env.TOP_SERVER_HOST;\r\nexport const APP_ORIGIN = 'https://' + process.env.APP_SERVER_HOST;\r\nexport const API_ORIGIN = 'https://' + process.env.API_SERVER_HOST;\r\nexport const ADMIN_ORIGIN = 'https://' + process.env.ADMIN_SERVER_HOST;\r\nexport const CONSOLE_ORIGIN = 'https://' + process.env.CONSOLE_SERVER_HOST;\r\nexport const MARKETING_ORIGIN = 'https://' + process.env.MARKETING_SERVER_HOST;\r\nexport const CORD_TO_ORIGIN = 'https://' + process.env.CORD_TO_HOST;\r\nexport const AUTH0_ORIGIN = 'https://' + process.env.AUTH0_CUSTOM_LOGIN_DOMAIN;\r\nexport const DOCS_ORIGIN = 'https://' + process.env.DOCS_SERVER_HOST;\r\nexport const DOCS_AI_CHATBOT_SERVER_HOST =\r\n  process.env.DOCS_AI_CHATBOT_SERVER_HOST;\r\nexport const COMMUNITY_ORIGIN = 'https://' + process.env.COMMUNITY_SERVER_HOST;\r\n\r\n// See https://github.com/getcord/interactive-demos\r\nexport const DEMO_APPS_WEBHOOK_URL =\r\n  'https://cord-interactive-demos.vercel.app/events';\r\n", "import { DOCS_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nexport const SUPPORT_USER_UUID = 'c9a61e1d-7c8a-4c7e-838a-9d431cf4ed77';\r\nexport const RADICAL_ORG_ID = '6bba8678-b14e-4af7-b2f2-05ee807dfa82';\r\nexport const RADICAL_TEST_ORG_ID = '3689f86d-0c70-40de-a2f0-a4a9ea4994e3';\r\nexport const CORD_PLATFORM_ORG_ID = '746c0b57-7363-4766-9ee9-7ae8ec7531a8';\r\nexport const CORD_ADMIN_PLATFORM_ORG_ID =\r\n  '84ae9086-8414-4ed3-ab73-096e6438f095';\r\nexport const CORD_SDK_TEST_ORG_ID = 'edda098d-6db7-4202-a5ac-ff3293b78c47';\r\nexport const GILLIAN_TEST_SLACK_ORG_ID = 'f7ab9ab8-f5b2-41a4-a419-1b8076626d3f';\r\nexport const KAT_TEST_SLACK_ORG_ID = '4506fadd-f8dc-4795-9b5d-d28feda39d84';\r\nexport const CORD_SLACK_TEAM_ID = 'T012Y0TBQLW'; // radicalhqworkspace\r\nexport const CORD_TEST_SLACK_TEAM_ID = 'T015UJY6YQK'; // radicaltestorg\r\n\r\nexport const SLACK_APP_CLIENT_ID = '1100027398710.1180115520790';\r\nexport const SLACK_APP_ID = 'A015A3DFAP8';\r\nexport const SLACK_DEV_APP_CLIENT_ID = '1198644236835.1943446227956';\r\nexport const SLACK_ADMIN_LOGIN_APP_CLIENT_ID = '1100027398710.2437628320357';\r\nexport const SLACK_ADMIN_LOGIN_APP_ID = 'A02CVJG9EAH';\r\nexport const SLACK_DEV_APP_ID = 'A01TRD46PU4';\r\nexport const SLACK_INTERNAL_TOOLS_APP_ID = 'A04JKM945CM';\r\nexport const CORD_UPDATES_TEST_CHANNEL_ID = 'C0547K3V868';\r\n\r\n// As opposed to e.g. a customer's Slack app\r\nexport const CORD_SLACK_APP_IDS = [\r\n  SLACK_APP_ID,\r\n  SLACK_DEV_APP_ID,\r\n  SLACK_ADMIN_LOGIN_APP_ID,\r\n  SLACK_INTERNAL_TOOLS_APP_ID,\r\n];\r\n\r\nexport const CORD_APPLICATION_ID = '5a076ee9-8b9e-4156-9ac4-871bdc4569ec';\r\nexport const CORD_SDK_TEST_APPLICATION_ID =\r\n  'b6501bf5-46f7-4db7-9996-c42dd9f758b0';\r\nexport const CORD_SAMPLE_TOKEN_CUSTOMER_ID =\r\n  '1c367aca-37c9-4733-8bef-e9f11a7d0f17';\r\nexport const CORD_DEMO_APPS_TOKEN_CUSTOMER_ID =\r\n  '4383cf39-8b6a-4c33-9d8a-71567ed47a60';\r\nexport const CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID =\r\n  'aeb2797f-f0a3-485c-a317-4986e2c8343b';\r\nexport const CORD_AUTOMATED_TESTS_APPLICATION_ID =\r\n  'dfa86152-9e7e-4d2d-acd6-bfddef71f58e';\r\nexport const CLACK_APPLICATION_ID = '5fa22ba9-5446-4af8-bc93-7ce54a9aa0ba';\r\nexport const CORD_HOMEPAGE_APPLICATION_ID =\r\n  '29e6499a-bbed-4eb2-b057-b36d60ad76c9';\r\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID!;\r\n\r\nexport const CORD_CUSTOMER_ID = '12ed6251-28d5-4686-9a75-20a15bd31499';\r\n\r\nexport const CSS_CUSTOMIZATION_ON_DOCS_PREFIX = 'css-customization-';\r\nexport const BETA_V2_DOCS_PREFIX = 'beta2-';\r\nexport const LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX = 'live-css-docs-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX =\r\n  'live-component-docs-thread-';\r\nexport const LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-thread-';\r\nexport const LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX =\r\n  'live_component-docs-inbox-launcher-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX =\r\n  'live-component-docs-composer-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX =\r\n  'live-component-docs-message-content-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_PIN_THREAD_ID_PREFIX =\r\n  'live-component-docs-pin-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX =\r\n  'live-component-docs-reactions-thread-';\r\nexport const LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX =\r\n  'live-component-docs-external-notification-';\r\nexport const LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX =\r\n  'live-customization-docs-replacements-thread-';\r\nexport const DOCS_TOKEN_KEY = 'docs-token';\r\n\r\nexport const LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID = 'noavatar';\r\n\r\nexport const DOCS_LIVE_PAGE_LOCATIONS = {\r\n  cssCustomization: 'css-customization',\r\n  liveCss: 'live-css-docs',\r\n  liveThread: 'live-thread',\r\n  liveThreadList: 'live-thread-list',\r\n  livePin: 'live-pin',\r\n  livePinChartExample: 'live-pin-chart-example',\r\n  liveFloatingThreads: 'live-floating-threads',\r\n  liveSelectionComments: 'live-selection-comments',\r\n  liveSidebar: 'live-sidebar',\r\n  liveInbox: 'live-inbox',\r\n  liveInboxLauncher: 'live-inbox-launcher',\r\n  liveSidebarLauncher: 'live-sidebar-launcher',\r\n  livePagePresence: 'live-page-presence',\r\n  livePresenceFacepile: 'live-presence-facepile',\r\n  liveComposer: 'live-composer',\r\n  liveMessage: 'live-message',\r\n  liveMessageContent: 'live-message-content',\r\n  liveNotificationList: 'live-notification-list',\r\n  liveThreadedComments: 'live-threaded-comments',\r\n  liveReactions: 'live-reactions',\r\n  liveReplacementsTutorial: 'live-replacements-tutorial',\r\n  liveBetaV2Thread: 'live-beta-v2-thread',\r\n  liveBetaV2Threads: 'live-beta-v2-threads',\r\n};\r\n\r\nexport const CORD_DOCS_CLIENT_TOKEN = '__cord_docs_token__';\r\n\r\nexport const DOCS_URLS = {\r\n  tutorials: {\r\n    getProductionReady: {\r\n      addYourBranding: `${DOCS_ORIGIN}/get-started/live-css-editor`,\r\n    },\r\n    integrationGuide: `${DOCS_ORIGIN}/get-started/integration-guide`,\r\n    demoApps: `${DOCS_ORIGIN}/get-started/demo-apps`,\r\n  },\r\n  components: {\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread`,\r\n    threadList: `${DOCS_ORIGIN}/components/cord-thread-list`,\r\n    threadedComments: `${DOCS_ORIGIN}/components/cord-threaded-comments`,\r\n    sidebar: `${DOCS_ORIGIN}/components/cord-sidebar`,\r\n    inbox: `${DOCS_ORIGIN}/components/cord-inbox`,\r\n    inboxLauncher: `${DOCS_ORIGIN}/components/cord-inbox-launcher`,\r\n    sidebarLauncher: `${DOCS_ORIGIN}/components/cord-sidebar-launcher`,\r\n    composer: `${DOCS_ORIGIN}/components/cord-composer`,\r\n    message: `${DOCS_ORIGIN}/components/cord-message`,\r\n    messageContent: `${DOCS_ORIGIN}/components/cord-message-content`,\r\n    reactions: `${DOCS_ORIGIN}/components/cord-reactions`,\r\n  },\r\n  howTo: {\r\n    customThreadedComments: `${DOCS_ORIGIN}/customization/custom-threaded-comments`,\r\n    cssCustomization: `${DOCS_ORIGIN}/customization/css`,\r\n    replacements: `${DOCS_ORIGIN}/customization/custom-react-components/tutorial`,\r\n  },\r\n  getStarted: {\r\n    authenticateYourUser: `${DOCS_ORIGIN}/get-started/integration-guide/generate-an-auth-token`,\r\n  },\r\n  betaV2Components: {\r\n    threads: `${DOCS_ORIGIN}/components/cord-threads?version=2.0`,\r\n    thread: `${DOCS_ORIGIN}/components/cord-thread?version=2.0`,\r\n  },\r\n};\r\n\r\nexport const CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID = 'C05FAVBSSN7';\r\nexport const CORD_SELF_SERVE_SLACK_CHANNEL_ID = 'C05GR4WSV5Z';\r\n\r\n// Tokens created for the sample token and demo apps environment types both\r\n// create groups with this id.  Both of them need to use the same groupID because\r\n// it is hardcoded into the demo apps client code, and while the demo apps mostly\r\n// use the demo apps environment apps, they sometimes use sample app tokens.\r\nexport const DEMO_APPS_APP_GROUP_ID = 'my-first-group';\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { CreationOptional } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  CustomerImplementationStage,\r\n  CustomerType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\nexport type Addons = { [key: string]: string | number | boolean };\r\nexport type BillingType = 'stripe' | 'manual';\r\nexport type PricingTier = 'free' | 'pro' | 'scale';\r\n@Table({\r\n  tableName: 'customers',\r\n  timestamps: false,\r\n})\r\nexport class CustomerEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  sharedSecret!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('verified', 'sample'),\r\n    defaultValue: 'verified',\r\n    allowNull: false,\r\n  })\r\n  type!: CustomerType;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_s3_bucket'] ?? false;\r\n    },\r\n  })\r\n  enableCustomS3Bucket!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['custom_segment_write_key'] ?? false;\r\n    },\r\n  })\r\n  enableCustomSegmentWriteKey!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['addons']),\r\n    get() {\r\n      const addons = this.getDataValue('addons');\r\n      return addons['customer_support'] ?? false;\r\n    },\r\n  })\r\n  enableCustomerSupport!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'launched',\r\n      'implementing',\r\n      'proof_of_concept',\r\n      'inactive',\r\n    ),\r\n    allowNull: false,\r\n    defaultValue: 'proof_of_concept',\r\n  })\r\n  implementationStage!: CustomerImplementationStage;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  launchDate!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  slackChannel!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  signupCoupon!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: true,\r\n  })\r\n  stripeCustomerID!: CreationOptional<string | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('free', 'pro', 'scale'),\r\n    allowNull: true,\r\n    defaultValue: 'free',\r\n  })\r\n  pricingTier!: CreationOptional<PricingTier>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('active', 'inactive'),\r\n    allowNull: true,\r\n    defaultValue: 'inactive',\r\n  })\r\n  billingStatus!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('stripe', 'manual'),\r\n    allowNull: true,\r\n    defaultValue: null,\r\n  })\r\n  billingType!: CreationOptional<BillingType | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  addons!: CreationOptional<Addons>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  renewalDate!: CreationOptional<Date | null>;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: [],\r\n    allowNull: false,\r\n  })\r\n  planDescription!: CreationOptional<string[]>;\r\n}\r\n", "import { format } from 'winston';\r\nimport stringify from 'fast-json-stable-stringify';\r\n\r\nconst MESSAGE = Symbol.for('message');\r\n\r\n// This defines our custom log format for logging to the console.\r\n// It looks like `<LOGLEVEL> <TIMESTAMP>: <MESSAGE>[ <META>]`\r\n// where LOGLEVEL is a single capital letter (`EWIHVDS` for error, warn,\r\n// info, http, verbose, debug, silly) and META is a JSON object with\r\n// additional fields, such as `process` (`server`), `version` (taken from\r\n// package.json) etc.\r\n\r\nexport const flatFormat = format((info) => {\r\n  const { level, timestamp, message, splat: _, ...meta } = info;\r\n\r\n  let stringifiedMeta: string;\r\n  try {\r\n    stringifiedMeta = stringify(meta);\r\n  } catch (err) {\r\n    stringifiedMeta = `! stringify exception: ${err}`;\r\n  }\r\n\r\n  const formattedMessage = `${level\r\n    .substr(0, 1)\r\n    .toUpperCase()} ${timestamp}: ${message} ${stringifiedMeta}`;\r\n\r\n  (info as any)[MESSAGE] = formattedMessage;\r\n  return info;\r\n});\r\n", "{\r\n  \"name\": \"radical\",\r\n  \"version\": \"1.1093.0\",\r\n  \"description\": \"The monorepo for Radical\",\r\n  \"main\": \"index.js\",\r\n  \"repository\": \"ssh://radical@vault.phacility.com/source/monorepo.git\",\r\n  \"author\": \"jack@getradical.co\",\r\n  \"license\": \"NONE\",\r\n  \"private\": true,\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\",\r\n    \"migrate\": \"sequelize-cli db:migrate\",\r\n    \"migrate-down\": \"sequelize-cli db:migrate:undo\",\r\n    \"build\": \"npm run tsc-once && ./build/index.mjs --mode=production --clean\",\r\n    \"build-demo-apps\": \"demo-apps/build-demo-apps.sh\",\r\n    \"build-sample-apps\": \"npm run build-demo-apps\",\r\n    \"check-database-schema\": \"./build/index.mjs --mode=development --target=scripts/check-database-schema.ts && ./dist/scripts/check-database-schema.js --check\",\r\n    \"codegen\": \"node ./build/index.mjs --mode=development --target=scripts/generate-graphql-types.ts && node ./dist/scripts/generate-graphql-types.js && node ./scripts/generate-dayjs.mjs > opensource/sdk-js/packages/react/common/dayjs.ts\",\r\n    \"docs-codegen\": \"./scripts/docs-codegen.sh\",\r\n    \"local-dev\": \"./ops/local-dev.sh\",\r\n    \"watch\": \"./build/index.mjs --mode=development --clean && (./build/index.mjs --mode=development --watch --skipInitialBuild & npm run start-external-dev & npm run start-local-s3 & nodemon --config nodemon-server.json & nodemon --config nodemon-docs-server.json & npm run tsc)\",\r\n    \"watch-external\": \"./build/index.mjs --mode=development --watch --target=external\",\r\n    \"watch-server\": \"./build/index.mjs --mode=development --watch --target=server\",\r\n    \"db-ssh-tunnel\": \"lsof -i '@localhost:15432' >/dev/null || ssh -f -N -L 15432:database-prod-read.int.cord.com:5432 zero\",\r\n    \"db-ssh-tunnel-write\": \"lsof -i '@localhost:25432' >/dev/null || ssh -f -N -L 25432:database-prod.int.cord.com:5432 zero\",\r\n    \"start-external-dev\": \"http-server ./dist/external -c-1 -a :: --silent --port 8179 --cors --ssl --key ./localhost/localhost.key --cert ./localhost/localhost.crt\",\r\n    \"start-local-s3\": \"cat ./localhost/localhost.key ./localhost/localhost.crt > ./localhost/localhost.packed && cd ops && docker-compose up localstack\",\r\n    \"start-postgres\": \". ./.env && export POSTGRES_USER POSTGRES_DB POSTGRES_PORT POSTGRES_PASSWORD && cd ops && docker-compose up postgres\",\r\n    \"start-redis\": \"cd ops && docker-compose up redis\",\r\n    \"start-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/server/index.js\",\r\n    \"start-server-dev-snapshots\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps --heapsnapshot-signal=SIGUSR2 ./dist/server/index.js\",\r\n    \"start-server-prod\": \"node -r dotenv/config dist/generic/server/index.js\",\r\n    \"start-asyncWorker-dev\": \"node -r dotenv/config --enable-source-maps ./dist/asyncWorker/asyncWorker.js\",\r\n    \"start-asyncWorker-prod\": \"node -r dotenv/config dist/generic/asyncWorker/asyncWorker.js\",\r\n    \"start-docs-server-dev\": \"NODE_EXTRA_CA_CERTS=\\\"$(mkcert -CAROOT)/rootCA.pem\\\" node -r dotenv/config --enable-source-maps ./dist/docs/server/index.js\",\r\n    \"start-docs-server-prod\": \"node -r dotenv/config dist/generic/docs/server/index.js\",\r\n    \"tsc\": \"tsc --incremental false --noEmit --skipLibCheck --watch --preserveWatchOutput\",\r\n    \"tsc-once\": \"tsc --incremental false --noEmit --skipLibCheck\",\r\n    \"wipe-postgres\": \"cd ops && POSTGRES_USER= POSTGRES_DB= POSTGRES_PASSWORD= docker-compose down --volumes\",\r\n    \"install\": \"find node_modules/@sentry/ -type f -print0 | grep -z -E '\\\\.(js|js\\\\.map|d\\\\.ts)$' | if sed --version >/dev/null 2>&1 ; then xargs -0 sed --in-place 's/\\\\b__SENTRY__\\\\b/_CORDSNTRY/g;'; else xargs -0 sed -i '' -E 's/[[:<:]]__SENTRY__[[:>:]]/_CORDSNTRY/g;'; fi\",\r\n    \"postinstall\": \"patch-package\",\r\n    \"repl\": \"./build/index.mjs --mode=development --target=repl && node ./dist/repl/index.js\",\r\n    \"generate-docs-embeddings\": \"./build/index.mjs --mode=development --target=scripts/docs-generate-search-data.ts && ./dist/scripts/docs-generate-search-data.js\",\r\n    \"extract-demo-apps-to-sandpack-object\": \"./build/index.mjs --mode=development --target=scripts/extract-demo-apps-to-sandpack-file-object.ts && ./dist/scripts/extract-demo-apps-to-sandpack-file-object.js\",\r\n    \"prepare\": \"[ \\\"$(git config core.hooksPath)\\\" = \\\".githooks\\\" ] && git config --unset core.hooksPath ; ln -s ../../.githooks/prepare-commit-msg .git/hooks/ > /dev/null 2>&1 || true\"\r\n  },\r\n  \"jest\": {\r\n    \"extensionsToTreatAsEsm\": [\r\n      \".ts\",\r\n      \".tsx\",\r\n      \".graphql\"\r\n    ],\r\n    \"transform\": {\r\n      \"^.+\\\\.(tsx?$)|(js$)|(graphql$)\": \"<rootDir>/jest/transformer.mjs\"\r\n    },\r\n    \"resolver\": \"<rootDir>/jest/resolver.cjs\",\r\n    \"moduleDirectories\": [\r\n      \"<rootDir>\",\r\n      \"node_modules\"\r\n    ],\r\n    \"setupFiles\": [\r\n      \"<rootDir>/jest/setup-jest-env.js\"\r\n    ],\r\n    \"testPathIgnorePatterns\": [\r\n      \"/node_modules/\",\r\n      \"<rootDir>/dist/\",\r\n      \"<rootDir>/screenshotsDiff\",\r\n      \"<rootDir>/opensource/\"\r\n    ],\r\n    \"transformIgnorePatterns\": [\r\n      \"/node_modules/\"\r\n    ]\r\n  },\r\n  \"workspaces\": [\r\n    \"opensource/sdk-js/packages/*\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@apollo/client\": \"~3.10.4\",\r\n    \"@auth0/auth0-react\": \"^1.8.0\",\r\n    \"@aws-sdk/client-auto-scaling\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudfront\": \"^3.363.0\",\r\n    \"@aws-sdk/client-cloudwatch-logs\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ec2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-ecr\": \"^3.363.0\",\r\n    \"@aws-sdk/client-elastic-load-balancing-v2\": \"^3.363.0\",\r\n    \"@aws-sdk/client-iam\": \"^3.363.0\",\r\n    \"@aws-sdk/client-s3\": \"^3.363.0\",\r\n    \"@aws-sdk/client-secrets-manager\": \"^3.363.0\",\r\n    \"@aws-sdk/credential-provider-node\": \"^3.363.0\",\r\n    \"@codesandbox/sandpack-react\": \"^2.6.9\",\r\n    \"@emotion/react\": \"^11.11.1\",\r\n    \"@emotion/server\": \"^11.10.0\",\r\n    \"@emotion/styled\": \"^11.11.0\",\r\n    \"@floating-ui/react-dom\": \"^1.3.0\",\r\n    \"@giphy/js-fetch-api\": \"^5.4.0\",\r\n    \"@giphy/react-components\": \"^9.4.1\",\r\n    \"@graphql-tools/schema\": \"^8.5.0\",\r\n    \"@graphql-tools/utils\": \"^8.13.1\",\r\n    \"@heroicons/react\": \"^2.0.18\",\r\n    \"@launchdarkly/node-server-sdk\": \"^8.2.4\",\r\n    \"@leeoniya/ufuzzy\": \"^0.7.0\",\r\n    \"@material-ui/core\": \"^4.12.4\",\r\n    \"@material-ui/styles\": \"^4.11.5\",\r\n    \"@mui/material\": \"^5.13.7\",\r\n    \"@phosphor-icons/react\": \"^2.0.15\",\r\n    \"@pyroscope/nodejs\": \"^0.3.11\",\r\n    \"@radix-ui/react-label\": \"^2.0.2\",\r\n    \"@radix-ui/react-select\": \"^2.0.0\",\r\n    \"@radix-ui/react-slot\": \"^1.0.2\",\r\n    \"@radix-ui/react-tooltip\": \"^1.0.7\",\r\n    \"@segment/analytics-node\": \"^2.0.0\",\r\n    \"@sendgrid/mail\": \"^8.1.0\",\r\n    \"@sentry/browser\": \"^7.57.0\",\r\n    \"@sentry/node\": \"^7.59.3\",\r\n    \"@sentry/react\": \"^7.57.0\",\r\n    \"@sentry/tracing\": \"^7.59.3\",\r\n    \"@sentry/types\": \"^7.59.3\",\r\n    \"@slack/events-api\": \"^3.0.1\",\r\n    \"@slack/web-api\": \"6.11.1\",\r\n    \"@slack/webhook\": \"^7.0.2\",\r\n    \"@tanstack/react-query\": \"^4.32.6\",\r\n    \"@tanstack/react-virtual\": \"^3.5.0\",\r\n    \"@types/blueimp-md5\": \"^2.7.0\",\r\n    \"@types/emoji-js\": \"^3.5.2\",\r\n    \"@types/jsdom\": \"^16.2.5\",\r\n    \"@types/parse5\": \"^7.0.0\",\r\n    \"@types/ua-parser-js\": \"^0.7.36\",\r\n    \"@types/valid-data-url\": \"^2.0.0\",\r\n    \"@types/wcag-contrast\": \"^3.0.0\",\r\n    \"ajv\": \"^8.11.0\",\r\n    \"ajv-formats\": \"^2.1.1\",\r\n    \"apollo-server-core\": \"^3.12.1\",\r\n    \"apollo-server-express\": \"^3.12.1\",\r\n    \"at-least-node\": \"^1.0.0\",\r\n    \"auth0\": \"^3.7.2\",\r\n    \"axios\": \"^1.6.8\",\r\n    \"backo2\": \"^1.0.2\",\r\n    \"bluebird\": \"^3.7.2\",\r\n    \"blueimp-md5\": \"^2.18.0\",\r\n    \"buffer\": \"^5.6.0\",\r\n    \"cheerio\": \"^1.0.0-rc.12\",\r\n    \"classnames\": \"^2.5.1\",\r\n    \"cookie\": \"^0.4.1\",\r\n    \"cookie-parser\": \"^1.4.6\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"dataloader\": \"^2.0.0\",\r\n    \"dayjs\": \"^1.11.11\",\r\n    \"dockerode\": \"^3.3.0\",\r\n    \"dotenv\": \"^8.2.0\",\r\n    \"email-addresses\": \"^5.0.0\",\r\n    \"emoji-js\": \"^3.8.0\",\r\n    \"emoji-picker-element\": \"^1.16.0\",\r\n    \"express\": \"^4.19.2\",\r\n    \"express-basic-auth\": \"^1.2.0\",\r\n    \"fast-json-stable-stringify\": \"^2.1.0\",\r\n    \"form-data\": \"^3.0.1\",\r\n    \"framer-motion\": \"^6.5.1\",\r\n    \"free-email-domains\": \"^1.2.4\",\r\n    \"graphql\": \"^15.8.0\",\r\n    \"graphql-iso-date\": \"^3.6.1\",\r\n    \"graphql-redis-subscriptions\": \"^2.5.0\",\r\n    \"graphql-subscriptions\": \"^2.0.0\",\r\n    \"graphql-tag\": \"^2.12.6\",\r\n    \"graphql-type-json\": \"^0.3.2\",\r\n    \"graphql-type-uuid\": \"^0.2.0\",\r\n    \"handlebars\": \"^4.7.7\",\r\n    \"highcharts\": \"^10.2.1\",\r\n    \"highcharts-react-official\": \"^3.1.0\",\r\n    \"html-entities\": \"^2.1.0\",\r\n    \"i18next\": \"^23.8.2\",\r\n    \"ioredis\": \"^5.2.2\",\r\n    \"ipaddr.js\": \"^2.2.0\",\r\n    \"is-hotkey\": \"^0.2.0\",\r\n    \"iterall\": \"^1.3.0\",\r\n    \"jose\": \"^4.15.5\",\r\n    \"jotai\": \"^2.6.3\",\r\n    \"js-base64\": \"^3.7.7\",\r\n    \"jsdom\": \"^24.0.0\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"jss\": \"^10.9.0\",\r\n    \"jwks-rsa\": \"^2.0.5\",\r\n    \"jwt-encode\": \"^1.0.1\",\r\n    \"linkify-react\": \"^4.1.3\",\r\n    \"linkifyjs\": \"^4.1.3\",\r\n    \"markdown-to-jsx\": \"^7.4.0\",\r\n    \"multer\": \"^1.4.4-lts.1\",\r\n    \"nanoid\": \"^3.3.6\",\r\n    \"neat-csv\": \"^7.0.0\",\r\n    \"node-cache\": \"^5.1.2\",\r\n    \"node-email-reply-parser\": \"^0.1.4\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"oauth\": \"^0.9.15\",\r\n    \"open\": \"^8.4.2\",\r\n    \"openai\": \"^4.22.0\",\r\n    \"parse5\": \"^7.1.2\",\r\n    \"patch-package\": \"^6.5.1\",\r\n    \"pg\": \"^8.11.5\",\r\n    \"pg-boss\": \"^8.4.2\",\r\n    \"pg-copy-streams\": \"^5.1.1\",\r\n    \"prom-client\": \"^15.1.2\",\r\n    \"query-string\": \"^7.1.3\",\r\n    \"querystring\": \"^0.2.0\",\r\n    \"radash\": \"^11.0.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-bootstrap\": \"^1.6.6\",\r\n    \"react-country-region-selector\": \"^3.6.1\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-helmet\": \"^6.1.0\",\r\n    \"react-i18next\": \"^13.2.2\",\r\n    \"react-jss\": \"^10.9.0\",\r\n    \"react-markdown\": \"^8.0.5\",\r\n    \"react-popper\": \"^2.3.0\",\r\n    \"react-router-dom\": \"^6.8.2\",\r\n    \"react-sticky-box\": \"^2.0.5\",\r\n    \"react-syntax-highlighter\": \"^15.5.0\",\r\n    \"react-window\": \"^1.8.10\",\r\n    \"redlock\": \"^v5.0.0-beta.2\",\r\n    \"reflect-metadata\": \"^0.1.13\",\r\n    \"response-time\": \"^2.3.2\",\r\n    \"sequelize\": \"^6.37.0\",\r\n    \"sequelize-cli\": \"^6.6.1\",\r\n    \"sequelize-typescript\": \"^2.1.6\",\r\n    \"serialize-error\": \"^11.0.3\",\r\n    \"sha.js\": \"^2.4.11\",\r\n    \"sharp\": \"^0.32.6\",\r\n    \"slack-markdown\": \"0.1.1\",\r\n    \"slate\": \"^0.100.0\",\r\n    \"slate-history\": \"^0.100.0\",\r\n    \"slate-hyperscript\": \"^0.100.0\",\r\n    \"slate-react\": \"^0.100.1\",\r\n    \"stripe\": \"^15.4.0\",\r\n    \"subscriptions-transport-ws\": \"^0.9.19\",\r\n    \"supertest\": \"^6.1.6\",\r\n    \"typed-emitter\": \"^1.3.1\",\r\n    \"ua-parser-js\": \"^1.0.33\",\r\n    \"url\": \"^0.11.0\",\r\n    \"url-pattern\": \"^1.0.3\",\r\n    \"use-sync-external-store\": \"^1.2.0\",\r\n    \"uuid\": \"^8.3.2\",\r\n    \"valid-data-url\": \"^3.0.0\",\r\n    \"validator\": \"^13.7.0\",\r\n    \"wcag-contrast\": \"^3.0.0\",\r\n    \"winston\": \"^3.7.2\",\r\n    \"winston-cloudwatch\": \"^6.2.0\",\r\n    \"winston-transport\": \"^4.5.0\",\r\n    \"ws\": \"^7.5.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@cspell/eslint-plugin\": \"^6.31.1\",\r\n    \"@luckycatfactory/esbuild-graphql-loader\": \"^3.7.0\",\r\n    \"@microsoft/tsdoc\": \"^0.14.2\",\r\n    \"@sentry/cli\": \"^2.10.0\",\r\n    \"@types/analytics-node\": \"^3.1.5\",\r\n    \"@types/auth0\": \"^3.3.3\",\r\n    \"@types/backo2\": \"^1.0.1\",\r\n    \"@types/bluebird\": \"^3.5.32\",\r\n    \"@types/chrome\": \"^0.0.112\",\r\n    \"@types/cookie\": \"^0.4.0\",\r\n    \"@types/cookie-parser\": \"^1.4.3\",\r\n    \"@types/dockerode\": \"^3.2.6\",\r\n    \"@types/express\": \"^4.17.14\",\r\n    \"@types/jest\": \"^29.5.3\",\r\n    \"@types/jscodeshift\": \"^0.11.6\",\r\n    \"@types/jsonwebtoken\": \"^8.5.9\",\r\n    \"@types/multer\": \"^1.4.7\",\r\n    \"@types/node\": \"^14.18.54\",\r\n    \"@types/oauth\": \"^0.9.1\",\r\n    \"@types/pg\": \"^8.11.5\",\r\n    \"@types/pg-copy-streams\": \"^1.2.1\",\r\n    \"@types/query-string\": \"^6.3.0\",\r\n    \"@types/react\": \"^18.2.25\",\r\n    \"@types/react-dom\": \"^18.2.18\",\r\n    \"@types/react-helmet\": \"^6.1.6\",\r\n    \"@types/react-syntax-highlighter\": \"^15.5.6\",\r\n    \"@types/react-window\": \"^1.8.8\",\r\n    \"@types/response-time\": \"^2.3.5\",\r\n    \"@types/sha.js\": \"^2.4.0\",\r\n    \"@types/supertest\": \"^2.0.11\",\r\n    \"@types/uuid\": \"^8.3.4\",\r\n    \"@types/validator\": \"^13.7.3\",\r\n    \"@types/ws\": \"^7.2.5\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^7.5.0\",\r\n    \"@typescript-eslint/parser\": \"^7.5.0\",\r\n    \"@vanilla-extract/css\": \"^1.15.2\",\r\n    \"@vanilla-extract/esbuild-plugin\": \"^2.2.2\",\r\n    \"chokidar\": \"^3.5.3\",\r\n    \"csstype\": \"^3.1.3\",\r\n    \"esbuild\": \"^0.21.3\",\r\n    \"esbuild-plugin-svgr\": \"0.0.1\",\r\n    \"eslint\": \"^8.31.0\",\r\n    \"eslint-config-prettier\": \"^8.6.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\r\n    \"eslint-plugin-cypress\": \"^2.12.1\",\r\n    \"eslint-plugin-i18next\": \"^6.0.3\",\r\n    \"eslint-plugin-import\": \"^2.28.1\",\r\n    \"eslint-plugin-jest\": \"^27.9.0\",\r\n    \"eslint-plugin-no-lookahead-lookbehind-regexp\": \"^0.1.0\",\r\n    \"eslint-plugin-no-relative-import-paths\": \"^v1.5.2\",\r\n    \"eslint-plugin-prettier\": \"^5.0.1\",\r\n    \"eslint-plugin-react\": \"^7.32.2\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"fake-indexeddb\": \"^3.1.7\",\r\n    \"glob\": \"^10.3.10\",\r\n    \"http-server\": \"^14.0.0\",\r\n    \"ioredis-mock\": \"^7.4.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"jest-environment-jsdom\": \"^29.6.1\",\r\n    \"jscodeshift\": \"^0.14.0\",\r\n    \"lint-staged\": \"12.3.5\",\r\n    \"nodemon\": \"^3.0.1\",\r\n    \"pg-formatter\": \"^1.2.0\",\r\n    \"prettier\": \"^3.0.3\",\r\n    \"schema-dts\": \"^1.1.2\",\r\n    \"ts-prune\": \"latest\",\r\n    \"typescript\": \"~5.1.6\",\r\n    \"yargs\": \"^17.7.2\"\r\n  },\r\n  \"overrides\": {\r\n    \"@auth0/auth0-react\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\"\r\n    },\r\n    \"@material-ui/core\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\",\r\n      \"@types/react-dom\": \"^18.0.11\"\r\n    },\r\n    \"@material-ui/styles\": {\r\n      \"react\": \"^18.2.0\",\r\n      \"react-dom\": \"^18.2.0\",\r\n      \"@types/react\": \"^18.2.18\"\r\n    },\r\n    \"@sentry/cli\": {\r\n      \"strip-ansi\": \"^7.0.1\"\r\n    },\r\n    \"@slack/events-api\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"apollo-server-express\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"eslint-plugin-import\": {\r\n      \"debug\": \"^3.1.0\"\r\n    },\r\n    \"graphql-iso-date\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"graphql-postgres-subscriptions\": {\r\n      \"graphql\": \"$graphql\"\r\n    },\r\n    \"postgres-date\": \"2.1.0\"\r\n  }\r\n}\r\n", "import * as http from 'http';\r\nimport * as https from 'https';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport { promises as fsPromises } from 'fs';\r\nimport * as prom from 'prom-client';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nimport type { ListenPort } from 'server/src/util/port.ts';\r\nimport { getHostPortion } from 'server/src/util/port.ts';\r\n\r\n// Our build process replaces `BUILDCONSTANTS.loggingProcessName` with an\r\n// appropriate string (e.g. 'server' or 'asyncWorker')\r\ndeclare const BUILDCONSTANTS: { loggingProcessName: string };\r\n\r\n// Prometheus is an open source monitoring framework. The way it works is that\r\n// a central Prometheus server periodically (by default once a minute) connects\r\n// to the processes it is set up to monitor and obtains their metrics\r\n// measurements. Prometheus stores these time series of data, and typically\r\n// another open source product, Grafana, is used for visualising this data,\r\n// building dashboards etc.\r\n//\r\n// The kind of metrics that get collected include counters (\"How many requests\r\n// of type X have we had?\", which will be displayed as a graph showing\r\n// X-requests per second), and histograms e.g. for execution speed (\"How many\r\n// requests of type X have had that got processed faster than Y seconds?\",\r\n// which will be displayed as a graph showing the mean, median or p90\r\n// processing time over the day).\r\n//\r\n// So, for Prometheus to be able to show us metrics about our server, our\r\n// server has to collect those metrics and expose them so that the Prometheus\r\n// server can scrape them periodically. That is what this file does.\r\n//\r\n// The Prometheus client library (prom-client) does all of the hard work here,\r\n// of pre-aggregating the metrics in the format that the Prometheus server\r\n// expects. In this file, we just define a few helper functions that make it\r\n// even easier to define metrics and instrument the code to collect them.\r\n//\r\n// One important thing to understand is that the Prometheus client does not\r\n// store a list of all individual events, but aggregates data immediately. So,\r\n// e.g., when we instrument our code to keep track of how long certain GraphQL\r\n// operations take, the Prometheus client won't store the execution time of\r\n// each individual request, but rather increments a counter for a certain time\r\n// range. So the information that an individual request took 15ms is lost, and\r\n// instead the counter for \"events between 10 and 20ms\" is incremented. This\r\n// makes the collection of metrics very lightweight, and we do not have to\r\n// worry about the overhead it introduces. On the other hand we, of course,\r\n// don't have precise data for every single event anymore, but in practice, if\r\n// there are hundreds or thousands of such events, the bucketed data works just\r\n// as well.\r\n\r\nconst register = new prom.Registry();\r\nif (process.env.CORD_WORKER_NAME) {\r\n  // Remove any punctuation characters that might cause issues for prometheus\r\n  const sanitizedWorkerName = process.env.CORD_WORKER_NAME.replace(\r\n    /[^A-Za-z0-9 _-]/g,\r\n    '',\r\n  );\r\n  register.setDefaultLabels({ worker: sanitizedWorkerName });\r\n}\r\nprom.AggregatorRegistry.setRegistries([register]);\r\nprom.collectDefaultMetrics({\r\n  register,\r\n  prefix: `${BUILDCONSTANTS.loggingProcessName}_`,\r\n});\r\n\r\n// Helper functions to easily create metrics. They are bound to the Prometheus\r\n// register whose metrics we expose here. These function also provide some\r\n// reasonable defaults, e.g. the bucket boundaries for histograms.\r\nexport const Counter = (configuration: prom.CounterConfiguration<string>) =>\r\n  new prom.Counter({ registers: [register], ...configuration });\r\nexport const Gauge = (configuration: prom.GaugeConfiguration<string>) =>\r\n  new prom.Gauge({ registers: [register], ...configuration });\r\nexport const TimeHistogram = (\r\n  configuration: prom.HistogramConfiguration<string>,\r\n) =>\r\n  new prom.Histogram({\r\n    registers: [register],\r\n    buckets: logBuckets(0.001, 10, 13),\r\n    ...configuration,\r\n  });\r\nexport function logBuckets(min: number, max: number, buckets: number) {\r\n  // This function creates bucket boundaries for histograms that are\r\n  // logarithmically equidistant.\r\n  // E.g. logBuckets(0.001, 10, 5) -> [ 0.001, 0.01, 0.1, 1, 10 ].\r\n  // If you increase bucket number from 5 to 9, then you get one additional\r\n  // bucket boundary in the middle between each of those 5 in the example.\r\n  // ([0.001, x*0.001, 0.01, x*0.01, 0.1, x*0.1, 1, x*1, 10] with x approx 3.16)\r\n  const logMin = Math.log10(min);\r\n  const logMax = Math.log10(max);\r\n  const step = (logMax - logMin) / (buckets - 1);\r\n  return [...Array(buckets).keys()].map((i) => min * 10 ** (i * step));\r\n  // The default setting for histograms we use above in the `Histogram` helper\r\n  // uses logBuckets(0.001, 10, 13), which covers the range from 1ms to 10s\r\n  // and has the nice property that each bucket's upper limit is roughly\r\n  // twice that of the previous bucket, and three buckets cover exactly a\r\n  // factor of 10. In other words, the upper boundaries of the histogram\r\n  // buckets are:\r\n  // [ 0.001, 0.00215, 0.00464,\r\n  //   0.01,  0.0215,  0.0464,\r\n  //   0.1,   0.215,   0.464,\r\n  //   1,     2.15,    4.64,\r\n  //  10 ]\r\n  // Anything faster than 1ms is counted in the first bucket, anything faster\r\n  // in than 10s is counted in the last bucket, and anything slower than 10s\r\n  // is counted as \"slower than 10s\" (Prometheus automatically adds one more\r\n  // bucket with +Infinity as the upper limit.)\r\n  //\r\n  // * Why those limits? 0.001 and 10?\r\n  // For example, our GraphQL operations (at the time of writing this)\r\n  // typically are in the tenths or hundreds of milliseconds. The limits here\r\n  // are chosen to cover that area well with some margin at both sides. More\r\n  // generally: anything that's faster than a millisecond is so fast that we\r\n  // don't need to worry about it, whereas anything near 10s is so slow that\r\n  // it's effectively broken. So the range from 1ms to 10s is chosen to be\r\n  // sure that we capture the relevant region. If we have a problem and, for\r\n  // example, the execution time of some operation creeps up, than we still\r\n  // capture that development until the execution time becomes longer than 10s,\r\n  // but hopefully we would have spotted a problem before that happens.\r\n  //\r\n  // * Why 13 buckets?\r\n  // 13 happens to be one of the numbers where we will have buckets lining up\r\n  // with powers of 10, which is nice. Having more buckets means that we have\r\n  // more precise information in our histograms, but it adds to the memory\r\n  // overhead. 13 should be good enough to get a good idea what's going on.\r\n  //\r\n  // * Why \"logarithmically equidistant\"?\r\n  // Since we use these histograms for measuring the timing of many different\r\n  // kinds of processes, this is a good one-fits-all solution. If you knew\r\n  // that you want to measure times in the range of, say, 10 to 20ms, than\r\n  // you would probably just have a linear series of bucket boundaries (10,\r\n  // 11, 12, ..., 20). However, to have a reasonably good resultion for\r\n  // processes that take around 10ms and at the same time for those that take\r\n  // around 100 or 1000ms, it's better to have a constant factor between\r\n  // bucket boundaries. Here, the upper end of a bucket is at 2.15 times the\r\n  // lower end, and that way we nicely spread out just 13 buckets on the wide\r\n  // range from 1ms to 10s.\r\n}\r\n\r\nexport function incCounterWithAppID<T extends string>(\r\n  viewer: Viewer,\r\n  counter: prom.Counter<T>,\r\n  labels: prom.LabelValues<T> = {},\r\n  value = 1,\r\n): void {\r\n  counter.inc(\r\n    { appID: viewer.platformApplicationID || 'null', ...labels },\r\n    value,\r\n  );\r\n}\r\n\r\n// Ideally would be instantiated within the cluster-mode-only handler below, but\r\n// having it out here means that even workers do it, working around this issue:\r\n// https://github.com/siimon/prom-client/pull/449#issuecomment-922504343\r\nconst aggregatorRegistry = new prom.AggregatorRegistry();\r\n\r\nexport async function metricsMain(port: ListenPort, clusterMode: boolean) {\r\n  const app = clusterMode\r\n    ? (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', aggregatorRegistry.contentType);\r\n        aggregatorRegistry.clusterMetrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'aggregatorRegistry.clusterMetrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      }\r\n    : (_req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        res.setHeader('Content-type', register.contentType);\r\n        register.metrics().then(\r\n          (metrics) => res.end(metrics),\r\n          (err) => {\r\n            anonymousLogger().logException(\r\n              'register.metrics() threw an exception',\r\n              err,\r\n              undefined,\r\n              undefined,\r\n              'warn',\r\n            );\r\n            res.statusCode = 500;\r\n            res.end(`${err.message}`);\r\n          },\r\n        );\r\n      };\r\n\r\n  const server =\r\n    process.env.NODE_ENV === 'development' && !process.env.IS_TEST\r\n      ? https.createServer(\r\n          {\r\n            key: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.key',\r\n            ),\r\n            cert: await fsPromises.readFile(\r\n              path.posix.dirname(url.fileURLToPath(import.meta.url)) +\r\n                '/localhost.crt',\r\n            ),\r\n          },\r\n          app,\r\n        )\r\n      : http.createServer(app);\r\n\r\n  // Start our server\r\n  return await new Promise<void>((resolve, reject) => {\r\n    server.addListener('error', reject);\r\n    server.listen(port, () => {\r\n      server.removeListener('error', reject);\r\n      resolve();\r\n      const host = getHostPortion(server.address());\r\n      anonymousLogger().info(\r\n        `\uD83D\uDE80 Serving Prometheus metrics at https://${host}/`,\r\n      );\r\n    });\r\n  });\r\n}\r\n", "import { JwksClient } from 'jwks-rsa';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { GACookieType } from 'server/src/util/google-analytics.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nexport const SERVICE_USER_ID = 'service_user';\r\n\r\nexport enum AuthProviderType {\r\n  SLACK = 'slack',\r\n  PLATFORM = 'platform',\r\n}\r\n\r\nexport const jwksClient = new JwksClient({\r\n  jwksUri: `https://${env.AUTH0_CUSTOM_LOGIN_DOMAIN}/.well-known/jwks.json`,\r\n});\r\n\r\n// There is a surprising (and growing) amount of stuff that we'll want to store\r\n// as part of the user session. It makes sense to write this to a DB on the server\r\n// and to use a very small payload for network round trips (i.e. just the key to\r\n// the hash table value). This idea is the basis of the 'datr' cookie within\r\n// Facebook.\r\nexport interface Session {\r\n  viewer: Viewer;\r\n  isAdmin?: boolean;\r\n  console?: ConsoleSession;\r\n  utmParameters?: { [key: string]: string | string[] | undefined };\r\n  ga?: GACookieType;\r\n}\r\n\r\ninterface ConsoleSession {\r\n  email_verified: boolean;\r\n}\r\n\r\nexport interface Auth0Token {\r\n  iss: string;\r\n  sub: string;\r\n  'https://console.cord.com/email': string;\r\n  'https://console.cord.com/email_verified': boolean;\r\n  auth0UserID: string;\r\n  aud: string | string[];\r\n}\r\n\r\nexport function createAnonymousSession() {\r\n  return {\r\n    viewer: Viewer.createAnonymousViewer(),\r\n  };\r\n}\r\n\r\nexport class Viewer {\r\n  private constructor(\r\n    public readonly userID: UUID | undefined,\r\n    public readonly orgID: UUID | undefined,\r\n    public readonly platformApplicationID?: UUID,\r\n    public readonly externalUserID?: string,\r\n    public readonly externalOrgID?: string,\r\n    public readonly developerUserID?: string,\r\n    public readonly originalOrgID?: UUID,\r\n    public readonly relevantOrgIDs?: UUID[],\r\n  ) {\r\n    if (orgID !== undefined && relevantOrgIDs !== undefined) {\r\n      // Note that a constructed Viewer can have both of these fields set at the\r\n      // same time -- we do that in the third case below for backwards-compat.\r\n      // But you can't specify the creation of a Viewer with both of these, to\r\n      // try to force new code to \"do the right thing\".\r\n      if (relevantOrgIDs.length !== 1 || relevantOrgIDs[0] !== orgID) {\r\n        throw new Error(\r\n          'You specified both a single orgID and relevantOrgIDs. ' +\r\n            'You should pass undefined for the orgID to catch places not using relevantOrgIDs. Be bold!',\r\n        );\r\n      }\r\n    } else if (orgID !== undefined) {\r\n      this.relevantOrgIDs = [orgID];\r\n    }\r\n  }\r\n\r\n  static async createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  }: {\r\n    user: UserEntity;\r\n    org: OrgEntity | null;\r\n  }): Promise<Viewer> {\r\n    if (!user.platformApplicationID) {\r\n      throw new Error('Platform viewer must have platformApplicationID');\r\n    }\r\n\r\n    const relevantOrgIDs = org\r\n      ? undefined\r\n      : // OrgMembersLoader.loadAllImmediateOrgIDsForUser but we can't call that since we\r\n        // don't have a viewer yet!\r\n        (\r\n          await OrgMembersEntity.findAll({\r\n            where: {\r\n              userID: user.id,\r\n            },\r\n          })\r\n        ).map((e) => e.orgID);\r\n\r\n    return new Viewer(\r\n      user.id,\r\n      org?.id,\r\n      user.platformApplicationID,\r\n      user.externalID,\r\n      org?.externalID,\r\n      undefined,\r\n      undefined,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  static createLoggedInViewer(userID: UUID, orgID: UUID): Viewer {\r\n    return new Viewer(userID, orgID);\r\n  }\r\n\r\n  static createOrgViewer(orgID: UUID, platformApplicationID?: UUID): Viewer {\r\n    return new Viewer(undefined, orgID, platformApplicationID);\r\n  }\r\n\r\n  static createServiceViewer() {\r\n    return new Viewer(SERVICE_USER_ID, undefined);\r\n  }\r\n\r\n  static createAnonymousViewer() {\r\n    return new Viewer(undefined, undefined);\r\n  }\r\n\r\n  static createConsoleViewer(devUserID: string): Viewer {\r\n    return new Viewer(\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      undefined,\r\n      devUserID,\r\n    );\r\n  }\r\n\r\n  static createFromSerializedState(serializedViewer: Viewer): Viewer {\r\n    const {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n      ...rest\r\n    } = serializedViewer;\r\n    const _: Record<string, never> = rest;\r\n\r\n    return new Viewer(\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      externalUserID,\r\n      externalOrgID,\r\n      developerUserID,\r\n      originalOrgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a version of this Viewer with the orgID set to the given org ID,\r\n   * used in situations where a user logged into one org wants to take an action\r\n   * as themselves in another org, such as sending a message from the unified\r\n   * inbox.  If the orgID given is the same as this Viewer's org ID, just\r\n   * returns this Viewer again.\r\n   */\r\n  public viewerInOtherOrg(\r\n    orgID: UUID | undefined,\r\n    externalOrgID: string | undefined,\r\n    relevantOrgIDs?: UUID[],\r\n  ): Viewer {\r\n    if (orgID === this.orgID && orgID !== undefined) {\r\n      return this;\r\n    }\r\n    if (orgID === undefined && relevantOrgIDs === undefined) {\r\n      throw new Error('viewerInOtherOrg provided with no orgs at all');\r\n    }\r\n    return new Viewer(\r\n      this.userID,\r\n      orgID,\r\n      this.platformApplicationID,\r\n      this.externalUserID,\r\n      externalOrgID,\r\n      this.developerUserID,\r\n      this.originalOrgID ?? this.orgID,\r\n      relevantOrgIDs,\r\n    );\r\n  }\r\n}\r\n\r\nexport const assertViewerHasIdentity = (\r\n  viewer: Viewer,\r\n): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n} => {\r\n  if (!viewer.userID || !viewer.orgID) {\r\n    throw new Error('Viewer must not be anonymous.');\r\n  }\r\n\r\n  return {\r\n    userID: viewer.userID,\r\n    orgID: viewer.orgID,\r\n  };\r\n};\r\n\r\nexport function assertViewerHasPlatformIdentity(viewer: Viewer): {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  externalUserID: string;\r\n  externalOrgID: string;\r\n  platformApplicationID: string;\r\n} {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n  if (\r\n    !viewer.externalUserID ||\r\n    !viewer.externalOrgID ||\r\n    !viewer.platformApplicationID\r\n  ) {\r\n    throw new Error('Viewer must be a platform viewer');\r\n  }\r\n\r\n  return {\r\n    userID,\r\n    orgID,\r\n    platformApplicationID: viewer.platformApplicationID,\r\n    externalUserID: viewer.externalUserID,\r\n    externalOrgID: viewer.externalOrgID,\r\n  };\r\n}\r\n\r\nexport function viewerHasIdentity(viewer: Viewer) {\r\n  return !!viewer.userID && !!viewer.orgID;\r\n}\r\n\r\nexport function assertViewerHasUser(viewer: Viewer): UUID {\r\n  const { userID } = viewer;\r\n\r\n  if (!userID) {\r\n    throw new Error('Viewer user must not be anonymous.');\r\n  }\r\n\r\n  return userID;\r\n}\r\n\r\nexport function assertViewerHasOrg(viewer: Viewer): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  if (!orgID) {\r\n    throw new Error('Viewer org must not be anonymous.');\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\n/**\r\n * Does basically the same thing as `assertViewerHasOrg`, except it throws a\r\n * client-facing error -- the idea being that you call this when it's *their*\r\n * error for not giving us a single org ID, instead of our internal logic error.\r\n * This also centralises all of the places we require a single org ID for\r\n * writes, so we can refactor/rethink/categorize/whatever them later.\r\n */\r\nexport function assertViewerHasSingleOrgForWrite(\r\n  viewer: Viewer,\r\n  error: string,\r\n): UUID {\r\n  const { orgID } = viewer;\r\n\r\n  // Specifically check for viewer.orgID, and not\r\n  // viewer.relevantOrgIDs.length === 1, so that we error in the case\r\n  // where they didn't give us an org but the user happens to only be in\r\n  // one -- to prevent sudden explosions when that user is added to\r\n  // another org, require that they always explicitly specify.\r\n  if (!orgID) {\r\n    throw new ClientFacingError(error);\r\n  }\r\n\r\n  return orgID;\r\n}\r\n\r\nexport function assertViewerHasOrgs(viewer: Viewer): UUID[] {\r\n  const { relevantOrgIDs } = viewer;\r\n\r\n  if (!relevantOrgIDs) {\r\n    throw new Error('Viewer orgs must be nonempty.');\r\n  }\r\n\r\n  return relevantOrgIDs;\r\n}\r\n\r\nexport function assertViewerHasPlatformUser(viewer: Viewer) {\r\n  const { userID, externalUserID, platformApplicationID } = viewer;\r\n\r\n  if (!userID || !externalUserID || !platformApplicationID) {\r\n    throw new Error('Viewer must have a platform user');\r\n  }\r\n\r\n  return { userID, externalUserID, platformApplicationID };\r\n}\r\n\r\nexport function assertViewerHasPlatformApplicationID(viewer: Viewer): UUID {\r\n  const { platformApplicationID } = viewer;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new Error('Viewer must have a platform app ID');\r\n  }\r\n\r\n  return platformApplicationID;\r\n}\r\n\r\nexport function assertServiceViewer(viewer: Viewer) {\r\n  if (viewer.userID !== SERVICE_USER_ID) {\r\n    throw new Error('Viewer must be service user.');\r\n  }\r\n}\r\n\r\nexport function assertConsoleUser(viewer: Viewer) {\r\n  if (!viewer.developerUserID) {\r\n    throw new Error('User must have an email');\r\n  }\r\n\r\n  return { email: viewer.developerUserID };\r\n}\r\n\r\nexport function viewerIsUsingOrgsAsFilter(viewer: Viewer) {\r\n  // Right now, platform viewers are in one of two states:\r\n  //   - everything is org-less, in which case relevantOrgIDs is filled out and\r\n  //     orgID is undefined\r\n  //   - we have an org, either via the token or an explicit `filter`, which\r\n  //     sets orgID and sets relevantOrgIDs to [orgID]\r\n  // This code looks for the second case. This is a bit of a hack -- it is going\r\n  // to break as soon as we allow multiple org IDs as a filter (which will have\r\n  // to stuff them into relevantOrgIDs), but at least there's one codepath to\r\n  // update when we build that, through here.\r\n  return viewer.orgID !== undefined;\r\n}\r\n", "import type { JsonObject } from 'common/types/index.ts';\r\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\r\n\r\n// Extending Error type solution taken from here:\r\n// https://stackoverflow.com/questions/41102060/typescript-extending-error-class\r\nexport class CordError extends Error {\r\n  constructor(\r\n    message?: string,\r\n    public loggingMetadata?: JsonObject,\r\n    public loggingTags?: LoggingTags,\r\n  ) {\r\n    // 'Error' breaks prototype chain here\r\n    super(message);\r\n\r\n    // restore prototype chain\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n", "import type { JsonObject } from 'common/types/index.ts';\r\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\n\r\n/**\r\n * Most errors encountered during GraphQL requests are logged but are returned\r\n * to the user as \"generic GraphQL error\". If you instead throw a\r\n * ClientFacingError, the exact error text will be reported to them instead.\r\n */\r\nexport class ClientFacingError extends CordError {\r\n  message: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    loggingMetadata?: JsonObject,\r\n    loggingTags?: LoggingTags,\r\n  ) {\r\n    super(message, loggingMetadata, loggingTags);\r\n    this.message = message;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'org_members',\r\n  timestamps: false,\r\n})\r\nexport class OrgMembersEntity extends Model<\r\n  InferAttributes<OrgMembersEntity>,\r\n  InferCreationAttributes<OrgMembersEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n}\r\n", "import type { SequelizeOptions } from 'sequelize-typescript';\r\nimport { Sequelize } from 'sequelize-typescript';\r\n\r\nimport { DatabaseError, QueryTypes, Transaction } from 'sequelize';\r\nimport env from 'server/src/config/Env.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\nimport { EventEntity } from 'server/src/entity/event/EventEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { MessageReactionEntity } from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\r\nimport { MessageMentionEntity } from 'server/src/entity/message_mention/MessageMentionEntity.ts';\r\nimport { SlackChannelEntity } from 'server/src/entity/slack_channel/SlackChannelEntity.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport {\r\n  Gauge,\r\n  TimeHistogram,\r\n  logBuckets,\r\n} from 'server/src/logging/prometheus.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\r\nimport { SessionEntity } from 'server/src/entity/session/SessionEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\r\nimport { HeimdallEntity } from 'server/src/entity/heimdall/HeimdallEntity.ts';\r\nimport { EmailSubscriptionEntity } from 'server/src/entity/email_subscription/EmailSubscriptionEntity.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\r\nimport { ExternalAssetEntity } from 'server/src/entity/extrernal_asset/ExternalAssetEntity.ts';\r\nimport { ImageVariantEntity } from 'server/src/entity/image_variant/ImageVariantEntity.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\r\nimport { DeploysEntity } from 'server/src/entity/deploys/DeploysEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { TaskThirdPartySubscriptionEntity } from 'server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts';\r\nimport { ApplicationUsageMetricEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricEntity.ts';\r\nimport { ApplicationUsageMetricTypeEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { AdminGoRedirectEntity } from 'server/src/entity/go_redirect/AdminGoRedirectEntity.ts';\r\nimport type { WorkerType } from 'server/src/server.ts';\r\nimport { AdminCRTCustomerIssueEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueEntity.ts';\r\nimport { AdminCRTCustomerIssueChangeEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts';\r\nimport { AdminCRTCustomerIssueSubscriptionEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\r\nimport { WarmDemoUserEntity } from 'server/src/entity/demo/WarmDemoUserEntity.ts';\r\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\r\nimport { PermissionRuleEntity } from 'server/src/entity/permission/PermisssionRuleEntity.ts';\r\nimport { OrgOrgMembersEntity } from 'server/src/entity/org_org_members/OrgOrgMembersEntity.ts';\r\n\r\nconst {\r\n  POSTGRES_HOST,\r\n  POSTGRES_DB,\r\n  POSTGRES_PASSWORD,\r\n  POSTGRES_PORT,\r\n  POSTGRES_USER,\r\n} = env;\r\n\r\nconst MAX_QUERY_LOG_LENGTH = 10000;\r\n\r\ntype SequelizeWorkerType = WorkerType | 'async' | 'test' | 'master' | 'script';\r\n\r\nconst queryExecutionTimeMetric = TimeHistogram({\r\n  name: 'SequelizeQueryTime',\r\n  help: 'Execution time of Sequelize queries',\r\n  labelNames: ['type', 'appID'],\r\n});\r\n\r\nconst openDbConnectionsMetric = Gauge({\r\n  name: 'OpenDatabaseConnections',\r\n  help: 'Number of open database connections',\r\n});\r\n\r\nconst acquireTimeMetric = TimeHistogram({\r\n  name: 'SequelizePoolAcquireTime',\r\n  help: 'Time spent waiting to acquire a Sequelize connection',\r\n  // Like our default buckets, but extend the lower bound down to 10us because\r\n  // connection acquire should be very fast.\r\n  buckets: logBuckets(0.00001, 10, 19),\r\n});\r\n\r\n// These metrics use `sequelize.connectionManager as any` because the\r\n// connectionManager has a public property that holds the actual pool (a Pool\r\n// object from sequelize-pool), but it doesn't appear in the TS types.\r\n\r\nconst _availableConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolAvailable',\r\n  help: 'Number of available connections in the Sequelize connection pool',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.available);\r\n    }\r\n  },\r\n});\r\n\r\nconst _usingConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolUsed',\r\n  help: 'Number of in-use connections in the Sequelize connection pool',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.using);\r\n    }\r\n  },\r\n});\r\n\r\nconst _waitingConnectionsMetric = Gauge({\r\n  name: 'SequelizePoolWaiting',\r\n  help: 'Number of requests waiting for a Sequelize connection',\r\n  collect() {\r\n    if (sequelize) {\r\n      this.set((sequelize.connectionManager as any).pool.waiting);\r\n    }\r\n  },\r\n});\r\n\r\nconst acquireStarts = new WeakMap<object, number>();\r\n\r\nconst apiSequelizeOptions: SequelizeOptions = {\r\n  dialect: 'postgres',\r\n  host: POSTGRES_HOST,\r\n  port: Number(POSTGRES_PORT),\r\n  username: POSTGRES_USER,\r\n  password: POSTGRES_PASSWORD,\r\n  database: POSTGRES_DB,\r\n  schema: 'cord',\r\n  models: [\r\n    EventEntity,\r\n    MessageEntity,\r\n    MessageAttachmentEntity,\r\n    MessageLinkPreviewEntity,\r\n    ThreadParticipantEntity,\r\n    PageVisitorEntity,\r\n    OrgEntity,\r\n    UserEntity,\r\n    FileEntity,\r\n    PageEntity,\r\n    ThreadEntity,\r\n    PreallocatedThreadIDEntity,\r\n    MessageReactionEntity,\r\n    MessageMentionEntity,\r\n    SlackChannelEntity,\r\n    SlackMessageEntity,\r\n    UserPreferenceEntity,\r\n    DeploysEntity,\r\n    TaskEntity,\r\n    TaskTodoEntity,\r\n    TaskAssigneeEntity,\r\n    ThirdPartyConnectionEntity,\r\n    TaskThirdPartyReference,\r\n    TaskThirdPartySubscriptionEntity,\r\n    ApplicationEntity,\r\n    CustomerEntity,\r\n    SessionEntity,\r\n    OrgMembersEntity,\r\n    S3BucketEntity,\r\n    HeimdallEntity,\r\n    EmailSubscriptionEntity,\r\n    LinkedOrgsEntity,\r\n    LinkedUsersEntity,\r\n    SlackMirroredThreadEntity,\r\n    MessageOutboundNotificationEntity,\r\n    ConsoleUserEntity,\r\n    UserHiddenAnnotationsEntity,\r\n    ExternalAssetEntity,\r\n    ImageVariantEntity,\r\n    EmailOutboundNotificationEntity,\r\n    SlackMirroredSupportThreadEntity,\r\n    ApplicationUsageMetricEntity,\r\n    ApplicationUsageMetricTypeEntity,\r\n    NotificationEntity,\r\n    AdminGoRedirectEntity,\r\n    AdminCRTCustomerIssueEntity,\r\n    AdminCRTCustomerIssueChangeEntity,\r\n    AdminCRTCustomerIssueSubscriptionEntity,\r\n    ApplicationWebhookEntity,\r\n    WarmDemoUserEntity,\r\n    PermissionRuleEntity,\r\n    OrgOrgMembersEntity,\r\n  ],\r\n  benchmark: true,\r\n  logging: (...args) => {\r\n    // In `sequelize-typescript`, the arguments to `logging` are declared as\r\n    // `(msg: string, timing: number)` only, but Sequelize does give us an\r\n    // additional object full of information. Override the typing:\r\n    const [msg, timing_ms, sequelizeInfo] = args as unknown as [\r\n      string,\r\n      number,\r\n      any,\r\n    ];\r\n\r\n    // CloudWatch doesn't allow messages over a certain length, and well before\r\n    // that we hit the point where a human reading it will get the idea\r\n    // (inevitably, a gigantic WHERE clause). Serializing all that crap also\r\n    // takes CPU time. So cut down truly absurd messages to something a little\r\n    // less absurd.\r\n    const truncatedMsg =\r\n      msg.length <= MAX_QUERY_LOG_LENGTH\r\n        ? msg\r\n        : msg.substring(0, MAX_QUERY_LOG_LENGTH) +\r\n          ` (truncated from ${msg.length} bytes)`;\r\n\r\n    // The `sequelizeInfo` object may contain a huge amount of information,\r\n    // including full model definition and information on each and every type\r\n    // that exists in SQL, etc. etc.\r\n    // We pick a few fields to log:\r\n    // * type: the operation type such as 'SELECT', 'INSERT', etc. This is the\r\n    // Sequelize operation type, which is not the same as SQL, because it\r\n    // includes e.g. 'UPSERT'\r\n    // * bind: the parameter values bound to query placeholders (`$1`, `$2`,\r\n    // ...)\r\n    // * tableNames: just a list of the names of tables involved in this\r\n    // operation\r\n    const { type, bind, tableNames } = sequelizeInfo;\r\n\r\n    const storage = asyncLocalStorage?.getStore();\r\n\r\n    const logger = storage?.logger ?? anonymousLogger();\r\n    logger.debug(`Sequelize: ${truncatedMsg}`, {\r\n      sequelize: { type, bind, tableNames },\r\n      timing_ms,\r\n      operationName: storage?.operationName,\r\n      operationID: storage?.operationID,\r\n      platformApplicationID: storage?.platformApplicationID,\r\n    });\r\n\r\n    // time histogram work in units of seconds, we get milliseconds from\r\n    // Sequelize\r\n    queryExecutionTimeMetric.observe(\r\n      { type, appID: storage?.platformApplicationID },\r\n      timing_ms / 1000,\r\n    );\r\n  },\r\n  pool: {\r\n    // Maximum number of connection in pool\r\n    max: 50,\r\n\r\n    // Minimum number of connection in pool\r\n    min: 50,\r\n\r\n    // The number of times a connection can be used before discarding it for a\r\n    // replacement\r\n    maxUses: 500,\r\n\r\n    // Time out if the pool doesn't manage to establish a new connection within\r\n    // 10 seconds\r\n    acquire: 10000,\r\n  },\r\n  hooks: {\r\n    // on any new database connection we set the search path, so when\r\n    // database objects (tables, types, functions etc.) are given without\r\n    // explicitly specifying the schema they are in, they are found if\r\n    // they are in either cord or public.\r\n    // This is also done in `.sequelize-config.js` so that it applies in\r\n    // migrations, where statements such as `CREATE TABLE` will create\r\n    // objects in the first schema of the search_path (`cord`).\r\n    afterConnect: async (connection: any) => {\r\n      await connection.query('SET search_path=cord,public;');\r\n      openDbConnectionsMetric.inc(1);\r\n    },\r\n    afterDisconnect: (_connection: any) => {\r\n      openDbConnectionsMetric.dec(1);\r\n    },\r\n    beforePoolAcquire: (options) => {\r\n      acquireStarts.set(options, performance.now());\r\n    },\r\n    afterPoolAcquire: (_connection, options) => {\r\n      const start = acquireStarts.get(options);\r\n      if (start) {\r\n        const elapsed = performance.now() - start;\r\n        acquireStarts.delete(options);\r\n        acquireTimeMetric.observe(elapsed / 1000);\r\n      }\r\n    },\r\n  },\r\n  dialectOptions: {\r\n    // any SQL statement should timeout after 10s (10s is very conservative, we\r\n    // might want to reduce it further eventually).\r\n    statement_timeout: 10000,\r\n    // a transaction that does not send a statement for 5s should timeout\r\n    idle_in_transaction_session_timeout: 5000,\r\n  },\r\n};\r\n\r\nfunction initializeEntityRelationships() {\r\n  MessageEntity.hasMany(MessageMentionEntity, {\r\n    as: 'mentions',\r\n    foreignKey: 'messageID',\r\n  });\r\n\r\n  MessageEntity.hasMany(TaskEntity, {\r\n    as: 'tasks',\r\n    foreignKey: 'messageID',\r\n  });\r\n\r\n  TaskEntity.hasMany(TaskAssigneeEntity, {\r\n    as: 'assignees',\r\n    foreignKey: 'taskID',\r\n  });\r\n\r\n  TaskEntity.hasOne(MessageEntity, {\r\n    sourceKey: 'messageID',\r\n    foreignKey: 'id',\r\n    as: 'message',\r\n  });\r\n\r\n  TaskThirdPartyReference.hasOne(TaskEntity, {\r\n    as: 'task',\r\n    sourceKey: 'taskID',\r\n    foreignKey: 'id',\r\n  });\r\n\r\n  OrgEntity.hasOne(LinkedOrgsEntity, {\r\n    sourceKey: 'id',\r\n    foreignKey: 'linkedOrgID',\r\n  });\r\n\r\n  OrgMembersEntity.hasOne(UserEntity, {\r\n    sourceKey: 'userID',\r\n    foreignKey: 'id',\r\n  });\r\n\r\n  MessageEntity.hasOne(ThreadEntity, {\r\n    as: 'thread',\r\n    sourceKey: 'threadID',\r\n    foreignKey: 'id',\r\n  });\r\n}\r\n\r\nlet sequelize: Sequelize | undefined;\r\n\r\nexport function getSequelize(): Sequelize {\r\n  if (sequelize === undefined) {\r\n    throw new Error('Sequelize has not been initialised');\r\n  }\r\n  return sequelize;\r\n}\r\n\r\nfunction getSequelizeOptions(\r\n  workerType: SequelizeWorkerType,\r\n): SequelizeOptions {\r\n  switch (workerType) {\r\n    case 'api':\r\n    case 'test':\r\n    case 'master':\r\n    case 'script':\r\n      return apiSequelizeOptions;\r\n    case 'async':\r\n      return {\r\n        ...apiSequelizeOptions,\r\n        dialectOptions: {\r\n          // Set the statement timeout to 2 minutes (in milliseconds), to allow\r\n          // longer-running SQL statements in async jobs\r\n          ...apiSequelizeOptions.dialectOptions,\r\n          statement_timeout: 2 * 60 * 1000,\r\n        },\r\n      };\r\n    case 'admin':\r\n    case 'console':\r\n      return {\r\n        ...apiSequelizeOptions,\r\n        pool: {\r\n          ...apiSequelizeOptions.pool,\r\n          max: 20,\r\n          min: 0,\r\n        },\r\n      };\r\n    default: {\r\n      const _exhaustiveSwitchGuard: never = workerType;\r\n      throw new Error('Invalid worker type ' + workerType);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function initSequelize(workerType: SequelizeWorkerType) {\r\n  if (sequelize !== undefined) {\r\n    throw new Error('Sequelize has been already initialised');\r\n  }\r\n  const opts = getSequelizeOptions(workerType);\r\n  const seq = new Sequelize(opts);\r\n  initializeEntityRelationships();\r\n\r\n  await seq.authenticate();\r\n  sequelize = seq;\r\n}\r\n\r\nexport function shutdownSequelize() {\r\n  const s = sequelize;\r\n  sequelize = undefined;\r\n  return s ? s.close() : Promise.resolve();\r\n}\r\n\r\nconst MAX_RETRIES = 5;\r\n\r\nexport async function serializableTransactionWithRetries<T>(\r\n  body: (t: Transaction) => Promise<T>,\r\n) {\r\n  let lastException;\r\n  for (let retryCount = 0; retryCount < MAX_RETRIES; retryCount++) {\r\n    try {\r\n      return await getSequelize().transaction(\r\n        {\r\n          isolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\r\n        },\r\n        body,\r\n      );\r\n    } catch (e) {\r\n      if (\r\n        e instanceof DatabaseError &&\r\n        'code' in e.original &&\r\n        (e.original.code === '40001' || e.original.code === '40P01')\r\n      ) {\r\n        // Per https://www.postgresql.org/docs/current/errcodes-appendix.html,\r\n        // 40001 is serialization_error and 40P01 is deadlock_detected, which\r\n        // are the two cases we expect to have some chance of success if we\r\n        // retry\r\n        lastException = e;\r\n        // Exponential backoff to try to let other txns complete first. Wait\r\n        // 50ms, then 100ms, then 200ms, etc.\r\n        const exp = 2 ** retryCount;\r\n        const baseMs = 50 * exp;\r\n        const randMs = 50 * exp * Math.random();\r\n        await sleep(baseMs + randMs);\r\n        continue;\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n  throw lastException;\r\n}\r\n\r\nexport async function assertTransactionIsSerializable(\r\n  transaction: Transaction,\r\n) {\r\n  const type = await getSequelize().query<{ isolation_level: string }>(\r\n    `SELECT current_setting('transaction_isolation') AS isolation_level`,\r\n    {\r\n      type: QueryTypes.SELECT,\r\n      transaction,\r\n    },\r\n  );\r\n\r\n  // we have to lowercase the sequelize type as the value coming\r\n  // back from postgres is lowercase\r\n  const isSerializable =\r\n    type[0].isolation_level ===\r\n    Transaction.ISOLATION_LEVELS.SERIALIZABLE.toLowerCase();\r\n\r\n  if (!isSerializable) {\r\n    throw new Error('Transaction must be serializable');\r\n  }\r\n}\r\n", "export default function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n", "import {\r\n  Table,\r\n  Column,\r\n  PrimaryKey,\r\n  Model,\r\n  DefaultScope,\r\n} from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ImportedSlackMessageType,\r\n  MessageType,\r\n  EntityMetadata,\r\n  MessageNode,\r\n} from 'common/types/index.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\n\r\n@DefaultScope(() => ({\r\n  attributes: {\r\n    include: [\r\n      [\r\n        // We're sorting on this, so the format matters, and sorting alphabetically equals sorting chronologically.\r\n        Sequelize.literal('TO_CHAR(\"timestamp\", \\'YYYY-MM-DD HH24:MI:SS.US\\')'),\r\n        'createdAtWithMicros',\r\n      ],\r\n    ],\r\n  },\r\n}))\r\n@Table({\r\n  tableName: 'messages',\r\n  timestamps: false,\r\n})\r\nexport class MessageEntity extends Model<\r\n  InferAttributes<MessageEntity>,\r\n  InferCreationAttributes<MessageEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  externalID!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sourceID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    get(): MessageContent {\r\n      return cleanseMessageContent(this.getDataValue('content'));\r\n    },\r\n  })\r\n  content!: MessageContent;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  deletedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackChannelID!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackMessageTS!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('reply', 'supportBotReply'),\r\n    defaultValue: null,\r\n  })\r\n  importedSlackMessageType!: ImportedSlackMessageType | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  importedSlackMessageThreadTS!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  replyToEmailNotificationID!: UUID | null;\r\n\r\n  // Unto all those who wend near this line of code, hear me!\r\n  // If you add more things to this list instead of migrating it\r\n  // into a metadata value, a curse be upon ye!\r\n  @Column({\r\n    type: DataTypes.ENUM('action_message', 'user_message'),\r\n    defaultValue: 'user_message',\r\n  })\r\n  type!: CreationOptional<MessageType>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  iconURL!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  translationKey!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    defaultValue: '',\r\n  })\r\n  extraClassnames!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TSVECTOR,\r\n  })\r\n  contentTsVector!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.VIRTUAL,\r\n  })\r\n  createdAtWithMicros!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n    defaultValue: false,\r\n  })\r\n  skipLinkPreviews!: CreationOptional<boolean>;\r\n\r\n  isDeleted() {\r\n    return this.deletedTimestamp !== null;\r\n  }\r\n}\r\n\r\n// This section contains old node types that no longer matter.  To remove a node\r\n// type, copy all the relevant definitions from messageNodes.ts to here and\r\n// prefix them with Legacy, then apply the appropriate code inside `cleanseNode`\r\n// to convert them to supported node types.\r\n\r\nenum LegacyMessageNodeType {\r\n  ANNOTATION = 'annotation',\r\n  LINK_DEPRECATED = 'a',\r\n}\r\n\r\ntype LegacyMessageNodeBase = {\r\n  type?: LegacyMessageNodeType;\r\n  class?: string;\r\n};\r\n\r\ntype LegacyMessageNodeWithChildren = LegacyMessageNodeBase & {\r\n  children: LegacyMessageContent;\r\n};\r\n\r\ntype LegacyMessageAnnotationNode = LegacyMessageNodeWithChildren & {\r\n  type: LegacyMessageNodeType.ANNOTATION;\r\n  annotation: {\r\n    id: UUID;\r\n  };\r\n};\r\n\r\nexport type LegacyMessageLinkDeprecatedNode = LegacyMessageNodeBase & {\r\n  type: LegacyMessageNodeType.LINK_DEPRECATED;\r\n  text: string;\r\n  url: string;\r\n};\r\n\r\ntype LegacyMessageNode =\r\n  | MessageNode\r\n  | LegacyMessageAnnotationNode\r\n  | LegacyMessageLinkDeprecatedNode;\r\n\r\ntype LegacyMessageContent = LegacyMessageNode[];\r\n\r\nfunction cleanseMessageContent(\r\n  // Even though this column isn't nullable, Sequelize might not have loaded it\r\n  // because it only loaded a subset of columns, so we might get undefined\r\n  content: LegacyMessageContent | undefined,\r\n): MessageContent {\r\n  if (!content) {\r\n    return [];\r\n  }\r\n  return content.map(cleanseNode).filter(isDefined);\r\n}\r\n\r\nfunction cleanseNode(node: LegacyMessageNode): MessageNode | undefined {\r\n  if (node.type === LegacyMessageNodeType.ANNOTATION) {\r\n    return undefined;\r\n  } else if (node.type === LegacyMessageNodeType.LINK_DEPRECATED) {\r\n    return {\r\n      type: MessageNodeType.LINK,\r\n      url: node.url,\r\n      children: [{ text: node.text }],\r\n    };\r\n  }\r\n  if ('children' in node) {\r\n    return {\r\n      ...node,\r\n      children: cleanseMessageContent(node.children),\r\n    };\r\n  }\r\n  return node;\r\n}\r\n", "import md5 from 'blueimp-md5';\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport { unique } from 'radash';\r\nimport shajs from 'sha.js';\r\nimport dayjs from 'dayjs';\r\nimport Calendar from 'dayjs/plugin/calendar.js';\r\nimport isBetween from 'dayjs/plugin/isBetween.js';\r\n\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ReferencedUserData,\r\n} from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport {\r\n  CORD_PLATFORM_ORG_ID,\r\n  CORD_ADMIN_PLATFORM_ORG_ID,\r\n  GILLIAN_TEST_SLACK_ORG_ID,\r\n  RADICAL_ORG_ID,\r\n  RADICAL_TEST_ORG_ID,\r\n  KAT_TEST_SLACK_ORG_ID,\r\n  CORD_SLACK_TEAM_ID,\r\n  CORD_TEST_SLACK_TEAM_ID,\r\n} from 'common/const/Ids.ts';\r\nimport {\r\n  getMessageNodeChildren,\r\n  textFromNodeRecursive,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { trimStart } from '@cord-sdk/react/common/lib/trim.ts';\r\n\r\nconst uuidRegex =\r\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r\n\r\nexport const isEmployee = (orgID: UUID | undefined) =>\r\n  orgID === RADICAL_ORG_ID ||\r\n  orgID === RADICAL_TEST_ORG_ID ||\r\n  orgID === CORD_PLATFORM_ORG_ID ||\r\n  orgID === GILLIAN_TEST_SLACK_ORG_ID ||\r\n  orgID === KAT_TEST_SLACK_ORG_ID ||\r\n  orgID === CORD_ADMIN_PLATFORM_ORG_ID ||\r\n  process.env.NODE_ENV === 'development';\r\n\r\nexport const isInternalSlackOrg = (slackTeamID: string | undefined) =>\r\n  slackTeamID === CORD_SLACK_TEAM_ID || slackTeamID === CORD_TEST_SLACK_TEAM_ID;\r\n\r\nexport const assertUUID = (value: string): UUID => {\r\n  if (!uuidRegex.test(value)) {\r\n    throw new Error(`Invalid UUID ${value}`);\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\n/**\r\n * @deprecated MD5 is no longer secure, use sha256Hash instead.\r\n */\r\nexport function md5Hash(object: boolean | number | string | object) {\r\n  return md5(jsonStableStringify(object));\r\n}\r\n\r\nexport function sha256Hash(value: string) {\r\n  return shajs('sha256').update(value).digest('hex');\r\n}\r\nexport const SHA256_HASH_LENGTH = 64;\r\n\r\nexport function generateSalt() {\r\n  const buf = new Uint8Array(8);\r\n  crypto.getRandomValues(buf);\r\n  return Array.from(buf)\r\n    .map((b) => b.toString(16).padStart(2, '0'))\r\n    .join('');\r\n}\r\n\r\nexport function sha256HashAndSalt(\r\n  value: string,\r\n  salt: string = generateSalt(),\r\n) {\r\n  return 'sha256' + ':' + salt + ':' + sha256Hash(salt + ':' + value);\r\n}\r\n\r\nexport function prepareTextContent(textContent: string) {\r\n  return (\r\n    textContent\r\n      .trim()\r\n      .toLowerCase()\r\n      // Remove Zero Width No-Break Space (U+FEFF)\r\n      .replace(/[\\uFEFF\\n]/gm, '')\r\n  );\r\n}\r\n\r\nexport function doesTextQualify(text: string | undefined | null) {\r\n  return Boolean(text && text.length > 1 && text.trim());\r\n}\r\n\r\nexport function getSha256Salt(hash: string): string {\r\n  return hash?.split(':')[1] ?? '';\r\n}\r\n\r\nexport function matchesHash(value: string, hashWithSalt: string) {\r\n  return hashWithSalt === sha256HashAndSalt(value, getSha256Salt(hashWithSalt));\r\n}\r\n\r\nexport function isNotNull<T>(value: T | null): value is T {\r\n  return value !== null;\r\n}\r\n\r\nexport function isDefined<T>(value: T | null | undefined): value is T {\r\n  return value !== null && value !== undefined;\r\n}\r\n\r\nexport function getMentionedUserIDs(content: MessageContent): UUID[] {\r\n  let users: UUID[] = [];\r\n  for (const node of content) {\r\n    if (node.type === MessageNodeType.MENTION) {\r\n      users.push(node.user.id);\r\n    } else {\r\n      const children = getMessageNodeChildren(node);\r\n      if (children) {\r\n        users = [...users, ...getMentionedUserIDs(children)];\r\n      }\r\n    }\r\n  }\r\n\r\n  return unique(users);\r\n}\r\n\r\nexport function getReferencedUserIDs(content: MessageContent): UUID[] {\r\n  const accumulator = new Set<UUID>();\r\n  gatherReferencedUserIDs(content, accumulator);\r\n  return [...accumulator];\r\n}\r\n\r\nfunction gatherReferencedUserIDs(\r\n  nodes: MessageContent,\r\n  accumulator: Set<UUID>,\r\n) {\r\n  for (const node of nodes) {\r\n    if (\r\n      node.type === MessageNodeType.MENTION ||\r\n      node.type === MessageNodeType.ASSIGNEE\r\n    ) {\r\n      accumulator.add(node.user.id);\r\n      continue;\r\n    }\r\n    const children = getMessageNodeChildren(node);\r\n    if (children) {\r\n      gatherReferencedUserIDs(children, accumulator);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getReferencedUserIDsAndNames(\r\n  content: MessageContent,\r\n): ReferencedUserData[] {\r\n  const accumulator = new Map<UUID, string>();\r\n  gatherReferencedUserIDsAndName(content, accumulator);\r\n  return [...accumulator].map(([id, name]) => ({ id, name }));\r\n}\r\n\r\nfunction gatherReferencedUserIDsAndName(\r\n  nodes: MessageContent,\r\n  accumulator: Map<UUID, string>,\r\n) {\r\n  for (const node of nodes) {\r\n    if (\r\n      node.type === MessageNodeType.MENTION ||\r\n      node.type === MessageNodeType.ASSIGNEE\r\n    ) {\r\n      const userID = node.user.id;\r\n      const name = trimStart(textFromNodeRecursive(node), '@');\r\n      accumulator.set(userID, name);\r\n      continue;\r\n    }\r\n    const children = getMessageNodeChildren(node);\r\n    if (children) {\r\n      gatherReferencedUserIDsAndName(children, accumulator);\r\n    }\r\n  }\r\n}\r\n\r\n// JS replaceAll not well supported yet: https://caniuse.com/?search=replaceAll\r\nexport function replaceAll(str: string, replace: string, replaceWith: string) {\r\n  return str.split(replace).join(replaceWith);\r\n}\r\n\r\nexport type UserWithNames = {\r\n  displayName: string;\r\n  fullName: string;\r\n};\r\n\r\nexport type DisplayableUser = UserWithNames & {\r\n  id: UUID;\r\n  profilePictureURL: string | null;\r\n};\r\n\r\nexport function assert(predicate: boolean, message: string): asserts predicate {\r\n  if (!predicate) {\r\n    throw new Error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the supplied items using the specified combiner.\r\n *\r\n * @example\r\n * // Returns \"foo, bar, or baz\"\r\n * combine(\"or\", [\"foo\", \"bar\", \"baz\"])\r\n */\r\nexport function combine(combiner: string, items: string[]): string {\r\n  if (items.length === 0) {\r\n    return '';\r\n  } else if (items.length === 1) {\r\n    return items[0];\r\n  } else if (items.length === 2) {\r\n    return `${items[0]} ${combiner} ${items[1]}`;\r\n  } else {\r\n    return `${items.slice(0, -1).join(', ')}, ${combiner} ${\r\n      items[items.length - 1]\r\n    }`;\r\n  }\r\n}\r\n\r\nexport const CORD_DEEP_LINK_THREAD_QUERY_PARAM = 'cord_thread';\r\nexport const CORD_DEEP_LINK_MESSAGE_QUERY_PARAM = 'cord_message';\r\nexport const CORD_DEEP_LINK_QUERY_PARAM = 'cord_link';\r\n\r\nexport const CORD_ARGS_TO_REMOVE = [\r\n  // delete deeplinking query params from urls. We dont want them as part of\r\n  // the pageContext\r\n\r\n  // old deeplinking query params. Keep here to support old deeplinks.\r\n  CORD_DEEP_LINK_THREAD_QUERY_PARAM,\r\n  CORD_DEEP_LINK_MESSAGE_QUERY_PARAM,\r\n\r\n  // new (unified) deeplinking query param\r\n  CORD_DEEP_LINK_QUERY_PARAM,\r\n];\r\n\r\nexport function extractDeepLinkQueryParams(\r\n  url: string,\r\n): { threadID: UUID; messageID: UUID } | null {\r\n  try {\r\n    const parsed = new URL(url);\r\n    return extractDeepLinkQueryParamsV1(parsed);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// also see injectDeeplinkQueryParamsV1()\r\nfunction extractDeepLinkQueryParamsV1(\r\n  url: URL,\r\n): { threadID: UUID; messageID: UUID } | null {\r\n  const [version, threadID, messageID]: (string | undefined)[] = (\r\n    url.searchParams.get(CORD_DEEP_LINK_QUERY_PARAM) ?? ''\r\n  ).split('_');\r\n\r\n  if (version !== 'v1' || !threadID || !messageID) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    threadID,\r\n    messageID,\r\n  };\r\n}\r\n\r\ndayjs.extend(Calendar);\r\ndayjs.extend(isBetween);\r\n\r\nfunction getNowTimestamp() {\r\n  return dayjs(new Date(Date.now()));\r\n}\r\n\r\nexport function isTimestampTodayOrInTheFuture(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  return (\r\n    dayjs(timestamp).isSame(dayjs(now), 'day') ||\r\n    dayjs(timestamp).isAfter(dayjs(now), 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastSevenDays(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const sevenDaysBefore = now.subtract(7, 'day');\r\n\r\n  return (\r\n    dayjs(timestamp).isBetween(now, sevenDaysBefore, 'day') ||\r\n    dayjs(timestamp).isSame(sevenDaysBefore, 'date')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastThirtyDays(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const thirtyDaysBefore = now.subtract(30, 'day');\r\n\r\n  return (\r\n    dayjs(timestamp).isBetween(now, thirtyDaysBefore) ||\r\n    dayjs(timestamp).isSame(thirtyDaysBefore, 'date')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastThreeMonths(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const threeMonthsBefore = now.subtract(3, 'month');\r\n  return (\r\n    dayjs(timestamp).isBetween(now, threeMonthsBefore) ||\r\n    dayjs(timestamp).isSame(threeMonthsBefore, 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampFromPastYear(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const pastYear = now.subtract(1, 'year');\r\n  return (\r\n    dayjs(timestamp).isBetween(now, pastYear) ||\r\n    dayjs(timestamp).isSame(pastYear, 'day')\r\n  );\r\n}\r\n\r\nexport function isTimestampMoreThanAYearAgo(timestamp: string) {\r\n  const now = getNowTimestamp();\r\n  const pastYear = now.subtract(1, 'year');\r\n  return dayjs(timestamp).isBefore(pastYear, 'day');\r\n}\r\n\r\nexport function createDefaultSenderEmailName(applicationName: string) {\r\n  return applicationName.toLowerCase().split(/\\W/).join('') + '-notifications';\r\n}\r\n\r\n/**\r\n * in both the console UI and the API we don't allow editing the whole sender\r\n * field on customEmailTemplate, but only specific parts of it. This function\r\n * takes a 'sender' input and returns parts of the email.\r\n *\r\n * @example\r\n * const input = 'Cord <hello@cord.com>';\r\n * getEmailInfoFromSenderData(input); // {emailAddress: \"hello@cord.com\", domain: \"cord.com\", username: \"hello\" }\r\n */\r\ntype SenderInfo = {\r\n  domain: string;\r\n  emailAddress: string;\r\n  username: string;\r\n};\r\nexport function getEmailInfoFromSenderData(\r\n  sender?: string,\r\n): SenderInfo | undefined {\r\n  if (!sender) {\r\n    return undefined;\r\n  }\r\n\r\n  const mentionMatchingPattern = new RegExp(\r\n    '(<)' + // first match a \"<\"\r\n      '([^@]+)' + // then match anything that's not an @ symbol and is at least 1 char\r\n      '(@)' + // then match the @ so we can just access the domain itself easily\r\n      '([^>]+)', // then match anything that's not an > symbol and is at least 1 char\r\n    'gm',\r\n  );\r\n\r\n  let info: SenderInfo | undefined = undefined;\r\n  let match: RegExpExecArray | null;\r\n\r\n  while ((match = mentionMatchingPattern.exec(sender))) {\r\n    info = {\r\n      username: match[2],\r\n      domain: match[4],\r\n      emailAddress: match[0].substring(1),\r\n    };\r\n  }\r\n\r\n  return info;\r\n}\r\n\r\nexport function capitalizeFirstLetter(string: string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n", "import type { Node } from 'slate';\r\nimport { Element } from 'slate';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport type {\r\n  MessageAssigneeNode,\r\n  MessageContent,\r\n  MessageMentionNode,\r\n  MessageNode,\r\n  MessageNodeWithChildren,\r\n  MessageStyledBlockType,\r\n  MessageTextNode,\r\n  MessageTodoNode,\r\n  UUID,\r\n} from '@cord-sdk/types';\r\nimport { trimStart, trimEnd } from './trim.js';\r\n\r\nexport const MAX_BULLET_INDENT = 4;\r\n\r\n// '& Node' in return value stops Slate complaining when passing node to its methods\r\n// Casting to any is because TS doesn't seem to like combining the two to make the node\r\nexport function createMessageNode<\r\n  NodeType extends MessageNodeType,\r\n  NodeAttributes extends MessageNode<NodeType> = MessageNode<NodeType>,\r\n>(\r\n  nodeType: NodeType,\r\n  nodeAttributes: Omit<NodeAttributes, 'type'>,\r\n): MessageNode<NodeType> & Node {\r\n  return {\r\n    type: nodeType,\r\n    ...nodeAttributes,\r\n  } as any;\r\n}\r\n\r\nexport function createMessageTextNode(text: string): MessageTextNode {\r\n  return {\r\n    text,\r\n  };\r\n}\r\n\r\nexport function createFormattedMessageTextNode(input: {\r\n  text: string;\r\n  bold?: boolean;\r\n  italic?: boolean;\r\n  underline?: boolean;\r\n  code?: boolean;\r\n}): MessageTextNode {\r\n  return input;\r\n}\r\n\r\nexport function isMessageNodeType<NodeType extends MessageNodeType>(\r\n  node: Node | undefined,\r\n  nodeType: NodeType,\r\n): node is MessageNode<NodeType> {\r\n  return Boolean(node && Element.isElement(node) && node.type === nodeType);\r\n}\r\n\r\nexport function isMessageNodeText(node: MessageNode): node is MessageTextNode {\r\n  return !node.type && 'text' in node;\r\n}\r\n\r\nexport function createParagraphNode(text = '') {\r\n  return createMessageNode(MessageNodeType.PARAGRAPH, {\r\n    children: [{ text }],\r\n  });\r\n}\r\n\r\nexport function createMentionNode(userID: UUID, name: string) {\r\n  return createMessageNode(MessageNodeType.MENTION, {\r\n    user: { id: userID },\r\n    children: [{ text: `@${name}` }],\r\n  });\r\n}\r\n\r\nexport function createAssigneeNode(userID: UUID, name: string) {\r\n  return createMessageNode(MessageNodeType.ASSIGNEE, {\r\n    user: { id: userID },\r\n    children: [{ text: `+${name}` }],\r\n  });\r\n}\r\n\r\nexport function createLinkNode(url: string, text: string) {\r\n  return createMessageNode(MessageNodeType.LINK, {\r\n    url,\r\n    children: [{ text }],\r\n  });\r\n}\r\n\r\nexport function messageContentFromString(text: string): MessageContent {\r\n  return [createParagraphNode(text)];\r\n}\r\n\r\nfunction getInitialStyledBlockProps(\r\n  blockType: MessageStyledBlockType,\r\n  indent?: number,\r\n) {\r\n  if (blockType === MessageNodeType.TODO) {\r\n    return {\r\n      done: false,\r\n      todoID: uuid(),\r\n    };\r\n  } else if (\r\n    blockType === MessageNodeType.BULLET ||\r\n    blockType === MessageNodeType.NUMBER_BULLET\r\n  ) {\r\n    return {\r\n      indent,\r\n    };\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport function createStyledBlockNode(\r\n  blockType: MessageStyledBlockType,\r\n  text: string,\r\n  indent?: number,\r\n) {\r\n  return createMessageNode(blockType, {\r\n    children: messageContentFromString(text),\r\n    ...getInitialStyledBlockProps(blockType, indent),\r\n  });\r\n}\r\n\r\nconst findTodoNodesInSubtree = (\r\n  parent: MessageNode,\r\n  accumulator: MessageTodoNode[],\r\n): void => {\r\n  if (parent.type === MessageNodeType.TODO) {\r\n    accumulator.push(parent);\r\n  } else {\r\n    const children = getMessageNodeChildren(parent);\r\n    if (children) {\r\n      for (const node of children) {\r\n        findTodoNodesInSubtree(node, accumulator);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const todoNodesFromMessage = (messageContent: MessageContent) => {\r\n  const accumulator: MessageTodoNode[] = [];\r\n\r\n  for (const node of messageContent) {\r\n    findTodoNodesInSubtree(node, accumulator);\r\n  }\r\n\r\n  return accumulator;\r\n};\r\n\r\nexport function getMessageNodeChildren(node: MessageNode) {\r\n  return (node as MessageNodeWithChildren).children;\r\n}\r\n\r\nexport const textFromNodeRecursive = (node: MessageNode): string => {\r\n  let textArr: Array<string> = [];\r\n\r\n  if (isMessageNodeText(node)) {\r\n    return node.text;\r\n  }\r\n\r\n  const children = getMessageNodeChildren(node);\r\n  if (children) {\r\n    textArr = textArr.concat(\r\n      children.map((child) => textFromNodeRecursive(child)),\r\n    );\r\n  }\r\n\r\n  const result = textArr.join('');\r\n\r\n  return result;\r\n};\r\n\r\nexport function convertStructuredMessageToText(\r\n  messageContent: MessageContent,\r\n): string {\r\n  return messageContent\r\n    .map((node) => textFromNodeRecursive(node))\r\n    .join('\\n')\r\n    .trim();\r\n}\r\n\r\n// converts a list of MessageNode into text.\r\n// any whitespace or assignees at the start/end are removed.\r\nfunction taskTitleFromMessageNodes(\r\n  nodes: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\r\n): string {\r\n  let pending = '';\r\n  let text = '';\r\n\r\n  for (const node of nodes) {\r\n    if (node.type === MessageNodeType.ASSIGNEE) {\r\n      if (text.trim() === '') {\r\n        // no text was seen so far, so this is an assignee at the start of a\r\n        // message. We want to skip those.\r\n        continue;\r\n      }\r\n      // okay, we have seen some text already, but this assignee might be at\r\n      // the very end of the message. Hence let the assignee wait in the\r\n      // pending until we find non-empty text (which would mean the assignee is\r\n      // not at the end of the message)\r\n      pending += trimStart(textFromNodeRecursive(node), '+');\r\n      continue;\r\n    }\r\n\r\n    let newText = '';\r\n    if (isMessageNodeText(node)) {\r\n      newText = node.text;\r\n    } else if (node.type === MessageNodeType.MENTION) {\r\n      newText = trimStart(textFromNodeRecursive(node), '@');\r\n    }\r\n\r\n    const isEmpty = newText.trim() === '';\r\n    if (isEmpty) {\r\n      // this might be either trailing whitespace or whitespace in the middle\r\n      // of the message. For now, let's have it in pending until something\r\n      // non-empty arrives\r\n      pending += newText;\r\n    } else {\r\n      // we found some non-empty text so whatever was waiting in the pending\r\n      // can now finally become part of text\r\n      text += pending + newText;\r\n      pending = '';\r\n    }\r\n  }\r\n\r\n  return trimEnd(text.trim(), ':').trim();\r\n}\r\n\r\n// converts each MessageNode into text, returns the first non-empty one.\r\nexport function taskTitleFromMessageContent(\r\n  messageContent: MessageContent,\r\n): string {\r\n  for (let i = 0; i < messageContent.length; i++) {\r\n    const nodes: (\r\n      | MessageTextNode\r\n      | MessageAssigneeNode\r\n      | MessageMentionNode\r\n    )[] = [];\r\n    flattenMessage(messageContent[i], nodes);\r\n\r\n    const title = taskTitleFromMessageNodes(nodes);\r\n    if (title.length > 0) {\r\n      return title;\r\n    }\r\n  }\r\n\r\n  return 'Task created using Cord';\r\n}\r\n\r\nfunction flattenMessage(\r\n  node: MessageNode,\r\n  accumulator: (MessageTextNode | MessageAssigneeNode | MessageMentionNode)[],\r\n) {\r\n  if (\r\n    isMessageNodeText(node) ||\r\n    node.type === MessageNodeType.ASSIGNEE ||\r\n    node.type === MessageNodeType.MENTION\r\n  ) {\r\n    accumulator.push(node);\r\n    return;\r\n  }\r\n  const children = getMessageNodeChildren(node);\r\n  if (!children) {\r\n    return;\r\n  }\r\n\r\n  for (const child of children) {\r\n    flattenMessage(child, accumulator);\r\n  }\r\n}\r\n\r\n// message.content is null if message is deleted\r\nexport const findMessageNode = (\r\n  arr: MessageContent | null,\r\n  nodeType: MessageNodeType,\r\n): any => {\r\n  if (!arr) {\r\n    return null;\r\n  }\r\n  for (const item of arr) {\r\n    if (item.type === nodeType) {\r\n      return item;\r\n    }\r\n    if ('children' in item) {\r\n      const p = findMessageNode(item.children, nodeType);\r\n      if (p) {\r\n        return p;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n", "export function trimStart(s: string, c: string): string {\r\n  return trimImpl(s, c, { front: true, end: false });\r\n}\r\n\r\nexport function trimEnd(s: string, c: string): string {\r\n  return trimImpl(s, c, { front: false, end: true });\r\n}\r\n\r\nexport function trim(s: string, c: string): string {\r\n  return trimImpl(s, c, { front: true, end: true });\r\n}\r\n\r\nfunction trimImpl(\r\n  s: string,\r\n  c: string,\r\n  { front, end }: { front: boolean; end: boolean },\r\n): string {\r\n  if (c.length !== 1) {\r\n    throw new Error(`${c} must be a single character`);\r\n  }\r\n\r\n  let idxStart = 0;\r\n  let idxEnd = s.length;\r\n\r\n  if (front) {\r\n    while (idxStart < idxEnd && s[idxStart] === c) {\r\n      idxStart++;\r\n    }\r\n  }\r\n\r\n  if (end) {\r\n    while (idxEnd > idxStart && s[idxEnd - 1] === c) {\r\n      idxEnd--;\r\n    }\r\n  }\r\n\r\n  return s.slice(idxStart, idxEnd);\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID, JsonObject, EntityMetadata } from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { asSlackBotUserAuthData } from 'server/src/slack/types.ts';\r\nimport type { SlackBotCredentials } from 'server/src/slack/util.ts';\r\n\r\nexport type OrgEntityState = 'active' | 'inactive';\r\n\r\n@Table({\r\n  tableName: 'orgs',\r\n  timestamps: false,\r\n})\r\nexport class OrgEntity extends Model<\r\n  InferAttributes<OrgEntity>,\r\n  InferCreationAttributes<OrgEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.ENUM('inactive', 'active') })\r\n  state!: OrgEntityState;\r\n\r\n  // The following fields will be populated with information from the org's respective auth provider.\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  name!: string;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: true })\r\n  domain!: string | null;\r\n\r\n  // The following fields contain information related external auth providers (Slack, GSuite, etc).\r\n\r\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\r\n  externalID!: string; // provider-specific id\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n    unique: 'AppExternalIDUniqueness',\r\n  })\r\n  externalProvider!: AuthProviderType; // the provider this org originated from\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  externalAuthData!: JsonObject | null; // provider-specific access token\r\n\r\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false, allowNull: false })\r\n  internal!: CreationOptional<boolean>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  customSlackAppID!: string | null;\r\n\r\n  public async getLinkedOrg(): Promise<OrgEntity | null> {\r\n    // for now, only allow fetching the linked org for platform orgs. Once we\r\n    // need to feth the platform org that is linked to current Slack org, then\r\n    // we will need to update this code.\r\n    if (this.externalProvider !== 'platform') {\r\n      return null;\r\n    }\r\n    return await OrgEntity.findOne({\r\n      include: {\r\n        model: LinkedOrgsEntity,\r\n        required: true,\r\n        where: {\r\n          sourceOrgID: this.id,\r\n          sourceExternalProvider: this.externalProvider,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  public async loadLinkedSlackOrg() {\r\n    if (this.externalProvider === 'slack') {\r\n      return this;\r\n    }\r\n    const slackOrg = await this.getLinkedOrg();\r\n    return slackOrg?.externalProvider === 'slack' ? slackOrg : null;\r\n  }\r\n\r\n  public async getSlackBotCredentials(): Promise<SlackBotCredentials | null> {\r\n    const slackOrg = await this.loadLinkedSlackOrg();\r\n\r\n    if (slackOrg) {\r\n      const authData = asSlackBotUserAuthData(slackOrg.externalAuthData);\r\n      if (authData) {\r\n        return { org: slackOrg, ...authData };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\n\r\n@Table({\r\n  tableName: 'linked_orgs',\r\n  timestamps: false,\r\n})\r\nexport class LinkedOrgsEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    unique: true,\r\n  })\r\n  sourceOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n  })\r\n  sourceExternalProvider!: AuthProviderType;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  linkedOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('slack', 'platform'),\r\n  })\r\n  linkedExternalProvider!: AuthProviderType;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  mergerUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  linkedTimestamp!: Date;\r\n}\r\n", "import type { JsonValue } from 'common/types/index.ts';\r\n\r\nexport type SlackBotUserAuthData = {\r\n  bot_user_id: string;\r\n  bot_access_token: string;\r\n};\r\n\r\nexport function asSlackBotUserAuthData(\r\n  x: JsonValue,\r\n): SlackBotUserAuthData | null {\r\n  if (\r\n    x &&\r\n    typeof x === 'object' &&\r\n    !Array.isArray(x) &&\r\n    typeof x.bot_user_id === 'string' &&\r\n    typeof x.bot_access_token === 'string'\r\n  ) {\r\n    return {\r\n      bot_user_id: x.bot_user_id,\r\n      bot_access_token: x.bot_access_token,\r\n    };\r\n  }\r\n  return null;\r\n}\r\n\r\n// Annoyingly, Slack uses different sets of string constants to denote channel\r\n// types in different API methods.  Some API methods use single characters\r\n// ('C', 'G',...) in their response, others use lowercase words ('channel',\r\n// 'im',...). And then other methods use a different set of snake_case words\r\n// ('public_channel', 'private_channel'). And then, some responses may not have\r\n// a single channel type field, but rather a bunch of boolean fields\r\n// ('is_channel', 'is_group',...).\r\nexport enum SlackChannelType {\r\n  PUBLIC = 'C',\r\n  PRIVATE = 'G',\r\n}\r\n\r\nexport enum SlackMessageChannelType {\r\n  PUBLIC = 'channel',\r\n  IM = 'im',\r\n}\r\n\r\nexport type ChannelArchiveEvent = {\r\n  // Confusingly, this is the channel ID\r\n  channel: string;\r\n  user: string;\r\n};\r\n\r\nexport type ChannelUnarchiveEvent = ChannelArchiveEvent;\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  UserType,\r\n  UserState,\r\n  UUID,\r\n  EntityMetadata,\r\n} from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\n\r\nexport type UserEntityState = UserState;\r\n@Table({\r\n  tableName: 'users',\r\n  timestamps: false,\r\n})\r\nexport class UserEntity extends Model<\r\n  InferAttributes<UserEntity>,\r\n  InferCreationAttributes<UserEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  updatedTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.ENUM('person', 'bot'), defaultValue: 'person' })\r\n  userType!: CreationOptional<UserType>;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN, defaultValue: false })\r\n  admin!: CreationOptional<boolean>;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('active', 'deleted'),\r\n    defaultValue: 'active',\r\n    allowNull: false,\r\n  })\r\n  state!: CreationOptional<UserEntityState>;\r\n\r\n  // The following fields will be populated with information from the user's respective auth provider.\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  name!: string | null; // the user's full name\r\n\r\n  @Column({ type: DataTypes.DATE })\r\n  nameUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  screenName!: string | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  email!: string | null;\r\n\r\n  @Column({ type: DataTypes.STRING })\r\n  profilePictureURL!: string | null;\r\n\r\n  @Column({ type: DataTypes.DATE })\r\n  profilePictureURLUpdatedTimestamp!: Date | null;\r\n\r\n  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })\r\n  externalID!: CreationOptional<string>; // provider-specific user id\r\n\r\n  @Column({ type: DataTypes.ENUM('slack', 'platform') })\r\n  externalProvider!: AuthProviderType | null; // the provider used to log in\r\n\r\n  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })\r\n  platformApplicationID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { FileUploadStatus } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  getSignedDeleteURL,\r\n  getSignedDownloadURL,\r\n  getSignedUploadURL,\r\n} from 'server/src/files/upload.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { API_ORIGIN } from 'common/const/Urls.ts';\r\nimport { encodeFileProxyToken } from 'server/src/files/download.ts';\r\n\r\n@Table({\r\n  tableName: 'files',\r\n  timestamps: false,\r\n})\r\nexport class FileEntity extends Model<\r\n  InferAttributes<FileEntity>,\r\n  InferCreationAttributes<FileEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID; // the user who created this file\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  mimeType!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n  })\r\n  size!: number;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  uploadStatus!: FileUploadStatus;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  s3Bucket!: UUID | null;\r\n\r\n  // URL that points to S3, expires after 24 hours\r\n  async getSignedDownloadURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedDownloadURL(\r\n      this.id,\r\n      this.name,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n\r\n  // URL that points to our FileProxyHandler, never expires\r\n  getPermanentDownloadURL() {\r\n    return `${API_ORIGIN}/file?token=${encodeURIComponent(\r\n      encodeFileProxyToken({\r\n        id: this.id,\r\n      }),\r\n    )}`;\r\n  }\r\n\r\n  async getSignedUploadURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedUploadURL(\r\n      this.id,\r\n      this.size,\r\n      this.mimeType,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n\r\n  async getDeleteURL(\r\n    s3BucketLoader: S3BucketLoader = new S3BucketLoader(\r\n      Viewer.createAnonymousViewer(),\r\n    ),\r\n  ): Promise<string> {\r\n    const s3Bucket = this.s3Bucket\r\n      ? await s3BucketLoader.load(this.s3Bucket)\r\n      : undefined;\r\n    return getSignedDeleteURL(\r\n      this.id,\r\n      s3Bucket?.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(),\r\n    );\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport dayjs from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc.js';\r\nimport * as credentialProviderNode from '@aws-sdk/credential-provider-node';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  UPLOAD_URL_TTL_SECONDS,\r\n  DOWNLOAD_URL_TTL_SECONDS,\r\n  DELETE_URL_TTL_SECONDS,\r\n} from 'common/const/Timing.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\n\r\ndayjs.extend(utc);\r\n\r\nconst {\r\n  S3_ACCESS_KEY_ID,\r\n  S3_ACCESS_KEY_SECRET,\r\n  S3_BUCKET,\r\n  S3_ENDPOINT,\r\n  S3_REGION,\r\n  S3_PUBLIC_BUCKET,\r\n} = env;\r\n\r\nconst defaultS3Bucket: S3BucketConfig = {\r\n  bucket: S3_BUCKET,\r\n  region: S3_REGION,\r\n};\r\n\r\nexport const publicS3Bucket: S3BucketConfig = {\r\n  bucket: S3_PUBLIC_BUCKET,\r\n  region: S3_REGION,\r\n};\r\n\r\nexport interface S3BucketConfig {\r\n  bucket: string;\r\n  region: string;\r\n  accessKeyID?: string;\r\n  accessKeySecret?: string;\r\n}\r\n\r\nexport interface S3BucketConfigWithCredentials extends S3BucketConfig {\r\n  accessKeyID: string;\r\n  accessKeySecret: string;\r\n}\r\n\r\ninterface Credentials {\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n  sessionToken?: string;\r\n  expiration?: Date;\r\n}\r\nlet credentials: Credentials | null = null;\r\n\r\nfunction getCredentials() {\r\n  if (!credentials) {\r\n    throw new Error('Link signing credentials not initialized');\r\n  }\r\n  return credentials;\r\n}\r\n\r\nexport async function initializeLinkSigningCredentials() {\r\n  if (S3_ACCESS_KEY_ID && S3_ACCESS_KEY_SECRET) {\r\n    // there are credentials in the .env file - we'll just use these\r\n    credentials = {\r\n      accessKeyId: S3_ACCESS_KEY_ID,\r\n      secretAccessKey: S3_ACCESS_KEY_SECRET,\r\n    };\r\n    return;\r\n  }\r\n\r\n  return await refreshLinkSigningCredentials();\r\n}\r\n\r\nasync function refreshLinkSigningCredentials(): Promise<void> {\r\n  try {\r\n    credentials = await credentialProviderNode.defaultProvider({})();\r\n\r\n    // We want to refresh (at least) every 5 hours.\r\n    let refreshInMilliseconds = 5 * 60 * 60 * 1000; // 5 hours\r\n\r\n    if (credentials.expiration) {\r\n      const millisecondsUntilExpiration =\r\n        credentials.expiration.getTime() - Date.now();\r\n\r\n      // We want to create signed links that are valid for a certain period of\r\n      // time, but it's limited by the lifetime of these credentials. So we want\r\n      // to refresh the credentials soon enough: refresh no later than the\r\n      // current credentials expiry minus the time for which the signed links to\r\n      // be valid. For good measure add a 5 minute safety margin.\r\n      const maxTtlSeconds = Math.max(\r\n        DOWNLOAD_URL_TTL_SECONDS,\r\n        UPLOAD_URL_TTL_SECONDS,\r\n        DELETE_URL_TTL_SECONDS,\r\n      );\r\n      const needNewCredentialsInMilliseconds =\r\n        millisecondsUntilExpiration - (maxTtlSeconds + 5 * 60) * 1000;\r\n\r\n      if (needNewCredentialsInMilliseconds < 60 * 1000) {\r\n        // No point in trying too often. Wait at least one minute.\r\n        refreshInMilliseconds = 60000;\r\n      } else if (needNewCredentialsInMilliseconds < refreshInMilliseconds) {\r\n        // We want new credentials sooner than the default 5 hours from above.\r\n        refreshInMilliseconds = needNewCredentialsInMilliseconds;\r\n      }\r\n    }\r\n\r\n    anonymousLogger().info('Refreshed AWS credentials for S3 link signing', {\r\n      accessKeyId: credentials.accessKeyId,\r\n      nextRefreshInSeconds: refreshInMilliseconds / 1000,\r\n    });\r\n    setTimeoutAsync(refreshLinkSigningCredentials, refreshInMilliseconds);\r\n  } catch (err) {\r\n    // Something went wrong. Log the exception...\r\n    anonymousLogger().logException('refreshLinkSigningCredentials', err);\r\n    // ...then wait one second...\r\n    await sleep(1000);\r\n    // ...then retry.\r\n    return await refreshLinkSigningCredentials();\r\n  }\r\n}\r\n\r\nconst sha256 = (text: string) =>\r\n  crypto.createHash('sha256').update(text).digest();\r\n\r\nconst hmac256 = (text: string, key: any) =>\r\n  crypto.createHmac('sha256', key).update(text).digest();\r\n\r\nconst sortedEntries = (object: Record<string, string>) =>\r\n  Object.entries(object).sort(([key1], [key2]) => (key1 < key2 ? -1 : 1));\r\n\r\nexport const getSignedDownloadURL = (\r\n  fileId: UUID,\r\n  filename: string,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config?: S3BucketConfig,\r\n) =>\r\n  getSignedURL(fileId, DOWNLOAD_URL_TTL_SECONDS, config, 'GET', undefined, {\r\n    'response-content-disposition': `attachment; filename=\"${encodeURIComponent(\r\n      filename,\r\n    )}\"`,\r\n  });\r\n\r\nexport const getSignedUploadURL = (\r\n  key: string,\r\n  size: number,\r\n  mimeType: string,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config?: S3BucketConfig,\r\n) =>\r\n  getSignedURL(key, UPLOAD_URL_TTL_SECONDS, config, 'PUT', {\r\n    'Content-Length': `${size}`,\r\n    'Content-Type': mimeType,\r\n  });\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nexport const getSignedDeleteURL = (key: string, config?: S3BucketConfig) =>\r\n  getSignedURL(key, DELETE_URL_TTL_SECONDS, config, 'DELETE');\r\n\r\nexport function getPublicBucketDownloadURL(filename: string) {\r\n  return `https://${env.PUBLIC_UPLOADS_HOST}/${getPublicBucketKey(filename)}`;\r\n}\r\n\r\nexport function getPublicBucketKey(key: string) {\r\n  return env.S3_USE_PATH_BASED_URLS === 'true'\r\n    ? env.S3_PUBLIC_BUCKET + '/' + key\r\n    : key;\r\n}\r\n\r\n/*\r\n  Implementation of https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\r\n  Also documented here: https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\r\n  I did this manually because I didn't want to include aws-sdk which for some reason is massive.\r\n*/\r\nexport const getSignedURL = (\r\n  key: string,\r\n  expirationSeconds = 60, // default 1 minute\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  config: S3BucketConfig = defaultS3Bucket,\r\n  verb = 'GET',\r\n  additionalHeaders: Record<string, string> = {},\r\n  additionalQueryParams: Record<string, string> = {},\r\n) => {\r\n  // We need credentials to create a signed URL. If the S3BucketConfig includes\r\n  // them, then we use those (that's the case for 3rd party buckets). Otherwise,\r\n  // we get our global credentials, which are the ones supplied in the .env\r\n  // file, if any, or using the EC2 instance profile privileges instead.\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  const credentials: Credentials =\r\n    config.accessKeyID && config.accessKeySecret\r\n      ? {\r\n          accessKeyId: config.accessKeyID,\r\n          secretAccessKey: config.accessKeySecret,\r\n        }\r\n      : getCredentials();\r\n\r\n  let now = dayjs().utc();\r\n\r\n  // Round down the \"current time\" so that the signed URL doesn't change every\r\n  // second. This gives browsers some hope of having a cache hit for\r\n  // potentially-large images and files. Only do the rounding-down if the\r\n  // expiration time is long enough, since this effectively shaves time off of\r\n  // the expiration.\r\n  if (expirationSeconds > 2 * 60) {\r\n    now = now.second(0);\r\n  }\r\n  if (expirationSeconds > 2 * 60 * 60) {\r\n    now = now.minute(0);\r\n  }\r\n\r\n  const time = now.format('YYYYMMDD[T]HHmmss[Z]');\r\n  const date = now.format('YYYYMMDD');\r\n  const s3Endpoint = S3_ENDPOINT.replace('<REGION>', config.region);\r\n\r\n  const path =\r\n    '/' +\r\n    encodeRFC3986URIComponent(config.bucket) +\r\n    '/' +\r\n    key.split('/').map(encodeRFC3986URIComponent).join('/');\r\n  const host = new URL(s3Endpoint).host;\r\n\r\n  const headers = {\r\n    host: host,\r\n    ...additionalHeaders,\r\n  };\r\n\r\n  const signedHeaders = Object.keys(headers)\r\n    .map((header) => header.toLowerCase())\r\n    .sort()\r\n    .join(';');\r\n\r\n  const credential = [\r\n    credentials.accessKeyId,\r\n    date,\r\n    config.region,\r\n    's3',\r\n    'aws4_request',\r\n  ].join('/');\r\n\r\n  const query: Record<string, string> = {\r\n    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',\r\n    'X-Amz-Credential': credential,\r\n    'X-Amz-Date': time,\r\n    'X-Amz-Expires': `${expirationSeconds}`,\r\n    'X-Amz-SignedHeaders': signedHeaders,\r\n    ...additionalQueryParams,\r\n  };\r\n  if (credentials.sessionToken) {\r\n    query['X-Amz-Security-Token'] = credentials.sessionToken;\r\n  }\r\n\r\n  const canonicalQueryString = sortedEntries(query)\r\n    .map(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      ([key, value]) =>\r\n        `${encodeRFC3986URIComponent(key)}=${encodeRFC3986URIComponent(value)}`,\r\n    )\r\n    .join('&');\r\n\r\n  const canonicalHeaders = sortedEntries(headers)\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    .map(([key, value]) => `${key.toLowerCase()}:${value.trim()}\\n`)\r\n    .join('');\r\n\r\n  const canonicalRequestString = [\r\n    verb,\r\n    path,\r\n    canonicalQueryString,\r\n    canonicalHeaders,\r\n    signedHeaders,\r\n    'UNSIGNED-PAYLOAD',\r\n  ].join('\\n');\r\n\r\n  const stringToSign = [\r\n    'AWS4-HMAC-SHA256',\r\n    time,\r\n    [date, config.region, 's3', 'aws4_request'].join('/'),\r\n    sha256(canonicalRequestString).toString('hex'),\r\n  ].join('\\n');\r\n\r\n  const dateKey = hmac256(date, 'AWS4' + credentials.secretAccessKey);\r\n  const regionKey = hmac256(config.region, dateKey);\r\n  const serviceKey = hmac256('s3', regionKey);\r\n  const signingKey = hmac256('aws4_request', serviceKey);\r\n\r\n  const signature = hmac256(stringToSign, signingKey).toString('hex');\r\n\r\n  return `${s3Endpoint}${path}?${canonicalQueryString}&X-Amz-Signature=${signature}`;\r\n};\r\n\r\n/**\r\n * Encode a URI component according to RFC3986, like AWS expects us to.\r\n *\r\n * There are characters that JavaScript's encodeURIComponent does not encode,\r\n * but AWS expects them to be encoded.\r\n *\r\n * AWS cites RFC3986 for URI encoding here:\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\r\n *\r\n * The implementation is copy-pasted from MDN:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\r\n */\r\nfunction encodeRFC3986URIComponent(str: string) {\r\n  return encodeURIComponent(str).replace(\r\n    /[!'()*]/g,\r\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\r\n  );\r\n}\r\n", "// The amount of time that we consider a continuous train of messages\r\n// by a single message sender. If two messages are within this timeframe\r\n// from one another, we'll render them as a single visual block. If the messages\r\n// are further apart in time than this, we'll render them as two different blocks\r\n// each with their own message timestamp, profile pic, etc.\r\nexport const CONTIGUOUS_MESSAGE_BLOCK_TIMEOUT_SECONDS = 90;\r\n\r\n// Number of seconds that the undo button will be shown for after hiding an annotation\r\nexport const UNDO_HIDE_HOTSPOT_ANNOTATION_TIMEOUT_SECONDS = 5;\r\n\r\n// How long a signed URL from S3 should be valid for\r\nexport const UPLOAD_URL_TTL_SECONDS = 60 * 5; // 5 minutes\r\nexport const DOWNLOAD_URL_TTL_SECONDS = 60 * 60 * 4; // 4 hours\r\nexport const DELETE_URL_TTL_SECONDS = 60 * 10; // 10 minutes\r\n\r\n// Seconds until the typing indicator decays automatically\r\nexport const TYPING_TIMEOUT_TTL_SECONDS = 3;\r\n\r\n// Number of seconds that need to pass since a given page has lost\r\n// focus before we stop considering it the page the user is actively\r\n// on/looking at.\r\nexport const PAGE_PRESENCE_LOSS_TTL_SECONDS = 30;\r\n\r\n// Number of milliseconds between active presence pings to server.\r\nexport const PRESENCE_UPDATE_INTERVAL_MS =\r\n  (PAGE_PRESENCE_LOSS_TTL_SECONDS * 1000) / 2;\r\n\r\n// The minimum period between durable presence updates\r\nexport const DURABLE_PRESENCE_THROTTLE_MS = 60 * 1000; // 1 minute\r\n\r\n// How often to poll annotation locationMatch type in MessageAnnotationElement\r\nexport const ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 3000;\r\n// Same, but for composer annotations and AnnotationPointers in delegate\r\nexport const FAST_ANNOTATION_LOCATION_MATCH_INTERVAL_MS = 1000;\r\n\r\nexport const SCREENSHOT_TRANSITION_IN_MS = 200;\r\n\r\nexport const ANNOTATION_POINTER_TRANSITION_OUT_MS = 150;\r\n\r\n// How long annotation arrow should stick around before fading out (when adding to composer)\r\nexport const ANNOTATION_ARROW_ON_ADD_MS = 2000;\r\n\r\n// After this many seconds, we assume the upload failed (e.g. because the user closed browser)\r\nexport const MAX_FILE_UPLOADING_TIME_SECONDS = 60;\r\n\r\n// used in the set time out to pull the pop up out of view\r\nexport const SUCCESS_POP_UP_TIMEOUT_MS = 3000;\r\nexport const SUCCESS_POP_UP_TRANSITION_MS = 300;\r\n\r\n// this needs to be smaller than TYPING_TIMEOUT_TTL_SECONDS\r\nexport const TYPING_USER_THROTTLE_MS = 2000;\r\n\r\nexport const THREAD_LAYOUT_ANIMATION_SECONDS = 0.25;\r\n\r\nexport const ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS = 30;\r\nexport const ACCESS_TOKEN_MAX_AGE_SECONDS = 60 * 60 * 24; // 1 day\r\n\r\n// How long to keep a message ID when a user clicks a link to a message to a different page\r\n// we use the message ID to focus that message when the page loads\r\nexport const DEEP_LINK_THREAD_ID_TTL_SECONDS = 30;\r\n\r\n// How long to highlight a deepLinked message after we scroll to it\r\nexport const DEEP_LINK_MESSAGE_HIGHLIGHT_MS = 5000;\r\n\r\n// Clients whose version was successfully deployed more than X days ago\r\n// won't be able to communicate with the server. This is to avoid\r\n// costantly bumping into errors when deprecating APIs.\r\nexport const CLIENT_VERSION_MAX_DAYS_OLD = 60;\r\n\r\nexport const QUERY_POLL_INTERVAL = 3000;\r\n\r\nexport const SAMPLE_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60 * 7;\r\n\r\nexport const DOCS_TOKEN_EXPIRY_SECONDS = 24 * 60 * 60; // 1 day\r\n", "export default function setTimeoutAsync(\r\n  f: () => Promise<void>,\r\n  ms: number,\r\n): NodeJS.Timeout {\r\n  return setTimeout(() => void f(), ms);\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class S3BucketLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, S3BucketEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const buckets = await S3BucketEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(buckets, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async load(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('S3Bucket dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadAll() {\r\n    return await S3BucketEntity.findAll();\r\n  }\r\n\r\n  async loadForApplication(\r\n    application: ApplicationEntity,\r\n  ): Promise<S3BucketEntity | null> {\r\n    if (application.customS3Bucket) {\r\n      return await this.load(application.customS3Bucket);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { S3BucketConfigWithCredentials } from 'server/src/files/upload.ts';\r\n\r\n@Table({\r\n  tableName: 's3_buckets',\r\n  timestamps: false,\r\n})\r\nexport class S3BucketEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  region!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  accessKeyID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  accessKeySecret!: string; // encrypted\r\n\r\n  public getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT(): S3BucketConfigWithCredentials {\r\n    const [encrypted, authTag, iv] = this.accessKeySecret.split(':');\r\n\r\n    const decipher = crypto.createDecipheriv(\r\n      'aes-256-gcm',\r\n      env.PLATFORM_SECRETS_ENCRYPTION_KEY,\r\n      Buffer.from(iv, 'hex'),\r\n    );\r\n\r\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n    decrypted += decipher.final();\r\n\r\n    return {\r\n      bucket: this.name,\r\n      region: this.region,\r\n      accessKeyID: this.accessKeyID,\r\n      accessKeySecret: decrypted,\r\n    };\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\n\r\ninterface EntityWithID {\r\n  id: UUID;\r\n}\r\n\r\nfunction indexedMap<T>(entities: T[], f: (e: T) => string): Map<string, T> {\r\n  const m = new Map<string, T>();\r\n  entities.forEach((e) => m.set(f(e), e));\r\n  return m;\r\n}\r\n\r\nfunction indexedMapGrouped<T>(\r\n  entities: T[],\r\n  f: (e: T) => string,\r\n): Map<string, T[]> {\r\n  const m = new Map<string, T[]>();\r\n  entities.forEach((e) => {\r\n    const k = f(e);\r\n    let values = m.get(k);\r\n    if (values === undefined) {\r\n      values = [];\r\n      m.set(k, values);\r\n    }\r\n    values.push(e);\r\n  });\r\n  return m;\r\n}\r\n\r\nexport function inKeyOrder<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): (T | null)[] {\r\n  return inKeyOrderCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nfunction inKeyOrderCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): (T | null)[] {\r\n  const m = indexedMap(entities, f);\r\n  return keys.map((k) => m.get(k) ?? null);\r\n}\r\n\r\nexport function inKeyOrderOrNull<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): (T | null)[] {\r\n  return inKeyOrderOrNullCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nexport function inKeyOrderOrNullCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): (T | null)[] {\r\n  const m = indexedMap(entities, f);\r\n  return keys.map((k) => m.get(k) ?? null);\r\n}\r\n\r\nexport function inKeyOrderGrouped<T extends EntityWithID>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n): T[][] {\r\n  return inKeyOrderGroupedCustom(entities, keys, (e) => e.id);\r\n}\r\n\r\nexport function inKeyOrderGroupedCustom<T>(\r\n  entities: T[],\r\n  keys: readonly UUID[],\r\n  f: (e: T) => string,\r\n): T[][] {\r\n  const m = indexedMapGrouped(entities, f);\r\n  return keys.map((k) => m.get(k) ?? []);\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\ntype FileProxyTokenPayload = {\r\n  id: UUID;\r\n};\r\n\r\nexport function encodeFileProxyToken(payload: FileProxyTokenPayload): string {\r\n  const data = JSON.stringify({\r\n    ...payload,\r\n    time: Date.now(),\r\n  });\r\n\r\n  const iv = crypto.randomBytes(12);\r\n  const cipher = crypto.createCipheriv(\r\n    'aes-256-gcm',\r\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\r\n    iv,\r\n  );\r\n  const encrypted = Buffer.concat([\r\n    cipher.update(data, 'utf8'),\r\n    cipher.final(),\r\n  ]);\r\n  const authTag = cipher.getAuthTag();\r\n\r\n  return [\r\n    'v1',\r\n    encrypted.toString('hex'),\r\n    authTag.toString('hex'),\r\n    iv.toString('hex'),\r\n  ].join(':');\r\n}\r\n\r\nexport function decodeFileProxyToken(token: string) {\r\n  const [_version, encrypted, authTag, iv] = token.split(':');\r\n\r\n  const decipher = crypto.createDecipheriv(\r\n    'aes-256-gcm',\r\n    env.FILE_PROXY_SIGNING_SECRET_KEY,\r\n\r\n    Buffer.from(iv, 'hex'),\r\n  );\r\n\r\n  decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n  decrypted += decipher.final();\r\n\r\n  return JSON.parse(decrypted) as FileProxyTokenPayload;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  Location,\r\n  HighlightedTextConfig,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { DocumentLocationInput } from 'server/src/schema/resolverTypes.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\n\r\nexport type MessageAttachmentData =\r\n  | MessageFileAttachmentData\r\n  | MessageAnnotationAttachmentData\r\n  | MessageScreenshotAttachmentData;\r\n\r\nexport interface MessageFileAttachmentData {\r\n  fileID: UUID;\r\n}\r\n\r\nexport interface MessageScreenshotAttachmentData {\r\n  screenshotFileID: UUID | null | undefined;\r\n  blurredScreenshotFileID: UUID | null | undefined;\r\n}\r\n\r\nexport interface MessageAnnotationAttachmentData {\r\n  screenshotFileID: UUID | null | undefined;\r\n  blurredScreenshotFileID?: UUID | null;\r\n  location: DocumentLocationInput | null | undefined;\r\n  customLocation?: Location | null | undefined;\r\n  customHighlightedTextConfig?: HighlightedTextConfig | null | undefined;\r\n  customLabel?: string | null | undefined;\r\n  coordsRelativeToTarget?: { x: number; y: number } | null | undefined;\r\n}\r\n\r\n@Table({\r\n  tableName: 'message_attachments',\r\n  timestamps: false,\r\n})\r\nexport class MessageAttachmentEntity extends Model<\r\n  InferAttributes<MessageAttachmentEntity>,\r\n  InferCreationAttributes<MessageAttachmentEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n  })\r\n  type!: MessageAttachmentType;\r\n\r\n  @Column({\r\n    defaultValue: {},\r\n    type: DataTypes.JSONB,\r\n  })\r\n  data!: MessageAttachmentData;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n\r\n  getFileIDs(): UUID[] {\r\n    switch (this.type) {\r\n      case MessageAttachmentType.FILE:\r\n        return [(this.data as MessageFileAttachmentData).fileID];\r\n      case MessageAttachmentType.ANNOTATION: {\r\n        const data = this.data as MessageAnnotationAttachmentData;\r\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\r\n          isDefined,\r\n        );\r\n      }\r\n      case MessageAttachmentType.SCREENSHOT: {\r\n        const data = this.data as MessageScreenshotAttachmentData;\r\n        return [data.blurredScreenshotFileID, data.screenshotFileID].filter(\r\n          isDefined,\r\n        );\r\n      }\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n// NB: this seems to be something closer to bytes, not unicode characters, and\r\n// many emoji are multiple bytes (some up to like 10+).\r\nexport const REACTION_MAX_LENGTH = 127;\r\n\r\n@Table({\r\n  tableName: 'message_reactions',\r\n  timestamps: false,\r\n})\r\nexport class MessageReactionEntity extends Model<\r\n  InferAttributes<MessageReactionEntity>,\r\n  InferCreationAttributes<MessageReactionEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    validate: {\r\n      len: [1, REACTION_MAX_LENGTH],\r\n    },\r\n  })\r\n  unicodeReaction!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_mentions',\r\n  timestamps: false,\r\n})\r\nexport class MessageMentionEntity extends Model<\r\n  InferAttributes<MessageMentionEntity>,\r\n  InferCreationAttributes<MessageMentionEntity>\r\n> {\r\n  // before deleting or changing this column, please check the codebase for raw\r\n  // SQL statements using it. For example, see\r\n  // https://radical.phacility.com/D1158\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID; // the user that is being mentioned\r\n\r\n  // before deleting or changing this column, please check the codebase for raw\r\n  // SQL statements using it. For example, see\r\n  // https://radical.phacility.com/D1158\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: CreationOptional<Date>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_channels',\r\n  timestamps: false,\r\n})\r\nexport class SlackChannelEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  added!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  archived!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.NUMBER,\r\n    allowNull: false,\r\n  })\r\n  users!: number;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_messages',\r\n  timestamps: false,\r\n})\r\nexport class SlackMessageEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sharerOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  sharerUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { PreferencesValueType, UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'user_preferences',\r\n  timestamps: false,\r\n})\r\nexport class UserPreferenceEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  key!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  value!: PreferencesValueType;\r\n}\r\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'tasks',\r\n  timestamps: false,\r\n})\r\nexport class TaskEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  done!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  doneStatusLastUpdatedBy!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model, PrimaryKey } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'task_todos',\r\n  timestamps: false,\r\n})\r\nexport class TaskTodoEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  taskID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  done!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'task_assignees',\r\n  timestamps: false,\r\n})\r\nexport class TaskAssigneeEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  taskID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID; // the user that is being assigned\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  assignerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type JiraAuthData = {\r\n  cloudID: string;\r\n  refreshToken: string;\r\n};\r\n\r\nexport type AsanaAuthData = {\r\n  workspace: string;\r\n  refreshToken: string;\r\n};\r\n\r\nexport type LinearAuthData = {\r\n  // An access token is used instead of a refresh token because\r\n  // Linear provides access tokens that last 10 years instead of\r\n  // using refresh tokens.\r\n  // A user can have a max of 10 tokens per application and scope\r\n  // configuration. If the 11th token is requested then the oldest\r\n  // token is automatically revoked.\r\n  accessToken: string;\r\n};\r\n\r\nexport type TrelloAuthData = {\r\n  // An access token is given by trello which never expires\r\n  accessToken: string;\r\n  accessTokenSecret: string;\r\n};\r\n\r\nexport type MondayAuthData = {\r\n  // Monday supplies access tokens that don't expire\r\n  accessToken: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'third_party_connections',\r\n  timestamps: false,\r\n})\r\nexport class ThirdPartyConnectionEntity extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  userID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  orgID!: UUID;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\r\n  type!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalID!: string;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalEmail!: string;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  externalAuthData!:\r\n    | JiraAuthData\r\n    | AsanaAuthData\r\n    | LinearAuthData\r\n    | TrelloAuthData\r\n    | MondayAuthData\r\n    | null;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  connectedTimestamp!: Date;\r\n}\r\n", "import { DataTypes, Sequelize } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { assertUUID } from 'common/util/index.ts';\r\n\r\n// TODO: shouldn't this somehow reference the third_party_connection ENUM type we created in postgres?\r\nexport const ThirdPartyConnectionDataType = DataTypes.ENUM(\r\n  'asana',\r\n  'jira',\r\n  'linear',\r\n);\r\n\r\nexport const MAX_IDS_PER_QUERY = 1000;\r\n\r\nexport type UserOrgID = {\r\n  userID: UUID;\r\n  orgID: UUID;\r\n};\r\n\r\nexport function keyFor(userOrgID: UserOrgID): string {\r\n  return `${userOrgID.userID}/${userOrgID.orgID}`;\r\n}\r\n\r\nexport type PlatformID = {\r\n  platformApplicationID: UUID;\r\n  externalID: string;\r\n};\r\n\r\nexport function keyForPlatformID(platformID: PlatformID): string {\r\n  return `${platformID.platformApplicationID}/${platformID.externalID}`;\r\n}\r\n\r\n// there doesn't seem to be any sequelize-specific way to construct such a subquery\r\n// https://github.com/sequelize/sequelize/issues/2325\r\n// so I'm doing the best I can to not hardcode table and column names in here and to\r\n// ensure we're safe from SQL injection\r\nexport const timestampSubquery = (id: UUID) =>\r\n  Sequelize.literal(\r\n    `(\r\n      SELECT \"timestamp\"\r\n      FROM \"${MessageEntity.tableName}\"\r\n      WHERE \"id\" = '${assertUUID(id)}'\r\n    )`,\r\n  );\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Op } from 'sequelize';\r\nimport type { UUID, TaskPreviewData } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\n@Table({\r\n  tableName: 'task_third_party_references',\r\n  timestamps: false,\r\n})\r\nexport class TaskThirdPartyReference extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  taskID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  taskTodoID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, primaryKey: true })\r\n  externalID!: string;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType, primaryKey: true })\r\n  externalConnectionType!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.TEXT })\r\n  externalLocationID!: string | null;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  previewData!: TaskPreviewData | null;\r\n\r\n  @Column({ type: DataTypes.BOOLEAN })\r\n  imported!: boolean;\r\n\r\n  static async findForTask(\r\n    taskID: UUID,\r\n    externalConnectionType: ThirdPartyConnectionType,\r\n  ): Promise<TaskThirdPartyReference | null> {\r\n    return await TaskThirdPartyReference.findOne({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: null,\r\n        externalConnectionType,\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findAllForTask(taskID: UUID) {\r\n    return await TaskThirdPartyReference.findAll({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: { [Op.is]: null },\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findAllForTaskTodos(taskID: UUID, taskTodoIDs: UUID[]) {\r\n    return await TaskThirdPartyReference.findAll({\r\n      where: {\r\n        taskID,\r\n        taskTodoID: taskTodoIDs,\r\n      },\r\n    });\r\n  }\r\n\r\n  static async findTaskWithExternalID(\r\n    externalID: string,\r\n    externalConnectionType: ThirdPartyConnectionType,\r\n  ) {\r\n    return await TaskThirdPartyReference.findOne({\r\n      where: {\r\n        externalID,\r\n        externalConnectionType,\r\n        taskTodoID: { [Op.is]: null },\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID, Location, PageContext } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'pages',\r\n  timestamps: false,\r\n})\r\nexport class PageEntity extends Model<\r\n  InferAttributes<PageEntity, { omit: 'pageContext' }>,\r\n  InferCreationAttributes<PageEntity, { omit: 'pageContext' }>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    unique: 'orgID-providerID-contextHash-unique',\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    unique: 'orgID-providerID-contextHash-unique',\r\n  })\r\n  contextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n  })\r\n  contextData!: Location;\r\n\r\n  get pageContext(): PageContext {\r\n    return {\r\n      data: this.contextData,\r\n      providerID: null,\r\n    };\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\n\r\nimport type {\r\n  EntityMetadata,\r\n  ThreadSupportStatusType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\n\r\n@Table({\r\n  tableName: 'threads',\r\n  timestamps: false,\r\n})\r\nexport class ThreadEntity extends Model<\r\n  InferAttributes<ThreadEntity>,\r\n  InferCreationAttributes<ThreadEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  resolvedTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  resolverUserID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('open', 'closed'),\r\n    defaultValue: null,\r\n  })\r\n  supportStatus!: ThreadSupportStatusType | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  externalID!: CreationOptional<string>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  extraClassnames!: string | null;\r\n\r\n  public async belongsToViewerOrgs(viewer: Viewer): Promise<boolean> {\r\n    const { orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    if (this.orgID === orgID) {\r\n      return true;\r\n    }\r\n\r\n    // In some cases (e.g. unified inbox) we may be looking for a thread from an\r\n    // org the user is a member of, but not currently logged in as\r\n    const orgMembersLoader = new OrgMembersLoader(viewer);\r\n\r\n    return await orgMembersLoader.viewerCanAccessOrg(this.orgID);\r\n  }\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasPlatformApplicationID,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UserOrgID } from 'server/src/entity/common.ts';\r\nimport { MAX_IDS_PER_QUERY, keyFor } from 'server/src/entity/common.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\n\r\nexport class OrgMembersLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UserOrgID, OrgMembersEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => await this.loadBatch(keys),\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  private async loadBatch(\r\n    keys: readonly UserOrgID[],\r\n    transaction?: Transaction,\r\n  ): Promise<(OrgMembersEntity | null)[]> {\r\n    // By far the most common calling pattern is loading a bunch of memberships\r\n    // either all for the same org or all for the same user, in which case we\r\n    // can turn this into a set of efficient queries that do an equality check\r\n    // on the common one and an IN filter on the other.  If we end up with a\r\n    // calling pattern that tries to load a scattershot set of memberships\r\n    // across lots of different users and orgs (why?) we should improve this.\r\n    const usersByOrg = new Map<UUID, Set<UUID>>();\r\n    const orgsByUser = new Map<UUID, Set<UUID>>();\r\n    for (const key of keys) {\r\n      if (!usersByOrg.has(key.orgID)) {\r\n        usersByOrg.set(key.orgID, new Set());\r\n      }\r\n      usersByOrg.get(key.orgID)!.add(key.userID);\r\n      if (!orgsByUser.has(key.userID)) {\r\n        orgsByUser.set(key.userID, new Set());\r\n      }\r\n      orgsByUser.get(key.userID)!.add(key.orgID);\r\n    }\r\n\r\n    const promises = [];\r\n    if (usersByOrg.size < orgsByUser.size) {\r\n      // We have fewer orgs than users, so query by org.\r\n      for (const [orgID, userIDSet] of usersByOrg) {\r\n        const userIDs = [...userIDSet];\r\n\r\n        for (\r\n          let offset = 0;\r\n          offset < userIDs.length;\r\n          offset += MAX_IDS_PER_QUERY\r\n        ) {\r\n          promises.push(\r\n            OrgMembersEntity.findAll({\r\n              where: {\r\n                orgID,\r\n                userID: userIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\r\n              },\r\n              transaction,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      // We have fewer users than orgs, so query by user.\r\n      for (const [userID, orgIDSet] of orgsByUser) {\r\n        const orgIDs = [...orgIDSet];\r\n\r\n        for (\r\n          let offset = 0;\r\n          offset < orgIDs.length;\r\n          offset += MAX_IDS_PER_QUERY\r\n        ) {\r\n          promises.push(\r\n            OrgMembersEntity.findAll({\r\n              where: {\r\n                userID,\r\n                orgID: orgIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\r\n              },\r\n              transaction,\r\n            }),\r\n          );\r\n        }\r\n      }\r\n    }\r\n    const orgMembers = (await Promise.all(promises)).flat();\r\n    const index = new Map<string, OrgMembersEntity>();\r\n    for (const orgMember of orgMembers) {\r\n      index.set(\r\n        keyFor({ userID: orgMember.userID, orgID: orgMember.orgID }),\r\n        orgMember,\r\n      );\r\n    }\r\n    return keys.map((userOrgId) => index.get(keyFor(userOrgId)) ?? null);\r\n  }\r\n\r\n  async loadUserOrgMembership(\r\n    userID: UUID,\r\n    orgID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    try {\r\n      const key = { userID, orgID };\r\n      if (transaction) {\r\n        return (await this.loadBatch([key], transaction))[0];\r\n      } else {\r\n        return await this.dataloader.load(key);\r\n      }\r\n    } catch (e) {\r\n      anonymousLogger().logException('Org members dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async viewerCanAccessOrg(\r\n    orgID: UUID,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    if ((this.viewer.relevantOrgIDs ?? []).includes(orgID)) {\r\n      return true;\r\n    }\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const membership = await this.loadUserOrgMembership(\r\n      userID,\r\n      orgID,\r\n      transaction,\r\n    );\r\n    return !!membership;\r\n  }\r\n\r\n  async viewerCanAccessOrgExternalID(externalOrgID: string): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    const orgLoader = new OrgLoader(this.viewer);\r\n    const org = await orgLoader.loadPlatformOrg(\r\n      platformApplicationID,\r\n      externalOrgID,\r\n    );\r\n\r\n    if (!org) {\r\n      return false;\r\n    }\r\n    const membership = await this.loadUserOrgMembership(userID, org.id);\r\n    return !!membership;\r\n  }\r\n\r\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\r\n  async loadAllImmediateOrgIDsForUser() {\r\n    const entities = await OrgMembersEntity.findAll({\r\n      where: {\r\n        userID: this.viewer.userID,\r\n      },\r\n      raw: true,\r\n    });\r\n\r\n    return entities.map((e) => e.orgID);\r\n  }\r\n\r\n  // I.e. all orgs they are literally a member of, but not Slack connected orgs\r\n  async loadAllImmediateOrgsForUser() {\r\n    const orgIds = await this.loadAllImmediateOrgIDsForUser();\r\n\r\n    return await OrgEntity.findAll({\r\n      where: {\r\n        id: orgIds,\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadAllOrgIDsForUser() {\r\n    const platformOrgIDs = await this.loadAllImmediateOrgIDsForUser();\r\n\r\n    const slackOrgs = await LinkedOrgsEntity.findAll({\r\n      where: {\r\n        sourceOrgID: platformOrgIDs,\r\n      },\r\n    });\r\n\r\n    const slackOrgsIDs = slackOrgs.map((e) => e.linkedOrgID);\r\n\r\n    return [...platformOrgIDs, ...slackOrgsIDs];\r\n  }\r\n\r\n  // Use this function if you want to load orgMembership for a user that might\r\n  // not exist in a specified platform org but might exist in the Slack org linked\r\n  // to that specified platform org.\r\n  async loadForSpecifiedPlatformOrgOrLinkedSlackOrg(\r\n    context: RequestContext,\r\n    userID: UUID,\r\n    orgID: UUID,\r\n  ) {\r\n    const orgMembership = await this.loadUserOrgMembership(userID, orgID);\r\n    if (orgMembership) {\r\n      return orgMembership;\r\n    }\r\n\r\n    const linkedOrgID =\r\n      await context.loaders.linkedOrgsLoader.getConnectedSlackOrgID(orgID);\r\n    if (!linkedOrgID) {\r\n      return null;\r\n    }\r\n    return await this.loadUserOrgMembership(userID, linkedOrgID);\r\n  }\r\n\r\n  async loadNotifiableOrgMembers(limit: number | undefined) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    // find all non-deleted orgMembers of type \"person\"\r\n    return await OrgMembersEntity.findAll({\r\n      where: {\r\n        orgID,\r\n      },\r\n      include: [\r\n        {\r\n          model: UserEntity,\r\n          required: true,\r\n          where: { userType: 'person' },\r\n          // dont bother fetching UserEntity attributes\r\n          attributes: [],\r\n        },\r\n      ],\r\n      limit,\r\n    });\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\n\r\nimport DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { PlatformID } from 'server/src/entity/common.ts';\r\nimport {\r\n  MAX_IDS_PER_QUERY,\r\n  keyForPlatformID,\r\n} from 'server/src/entity/common.ts';\r\nimport { inKeyOrderOrNull } from 'server/src/entity/base/util.ts';\r\nimport { CORD_SLACK_APP_IDS } from 'common/const/Ids.ts';\r\n\r\nexport class OrgLoader {\r\n  viewer: Viewer;\r\n  platformOrgDataloader: DataLoader<PlatformID, OrgEntity | null, string>;\r\n  orgByIdDataloader: DataLoader<UUID, OrgEntity | null>;\r\n\r\n  constructor(viewer: Viewer, cache = false) {\r\n    this.viewer = viewer;\r\n    this.platformOrgDataloader = new DataLoader(\r\n      async (keys) => {\r\n        // By far the most common calling pattern is loading a bunch of orgs all\r\n        // from the same application, in which case we can turn this into a set of\r\n        // efficient queries (ideally one) that do an equality check on\r\n        // platformApplicationID and an IN filter on externalID.\r\n        const orgsByApplication = new Map<UUID, Set<string>>();\r\n        for (const key of keys) {\r\n          if (!orgsByApplication.has(key.platformApplicationID)) {\r\n            orgsByApplication.set(key.platformApplicationID, new Set());\r\n          }\r\n          orgsByApplication.get(key.platformApplicationID)!.add(key.externalID);\r\n        }\r\n        const promises = [];\r\n        for (const [platformApplicationID, orgIDSet] of orgsByApplication) {\r\n          const externalOrgIDs = [...orgIDSet];\r\n\r\n          for (\r\n            let offset = 0;\r\n            offset < externalOrgIDs.length;\r\n            offset += MAX_IDS_PER_QUERY\r\n          ) {\r\n            promises.push(\r\n              OrgEntity.findAll({\r\n                where: {\r\n                  externalProvider: AuthProviderType.PLATFORM,\r\n                  platformApplicationID,\r\n                  externalID: externalOrgIDs.slice(\r\n                    offset,\r\n                    offset + MAX_IDS_PER_QUERY,\r\n                  ),\r\n                },\r\n              }),\r\n            );\r\n          }\r\n        }\r\n        const orgs = (await Promise.all(promises)).flat();\r\n        const index = new Map<string, OrgEntity>();\r\n        for (const org of orgs) {\r\n          index.set(\r\n            keyForPlatformID({\r\n              platformApplicationID: org.platformApplicationID!,\r\n              externalID: org.externalID,\r\n            }),\r\n            org,\r\n          );\r\n        }\r\n        return keys.map(\r\n          (platformId) => index.get(keyForPlatformID(platformId)) ?? null,\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n    this.orgByIdDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const orgs = await OrgEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n        return inKeyOrderOrNull(orgs, keys);\r\n      },\r\n      { cache },\r\n    );\r\n  }\r\n\r\n  async loadOrg(id: UUID) {\r\n    return await this.orgByIdDataloader.load(id);\r\n  }\r\n\r\n  async loadSlackOrg(slackTeamID: string, slackAppID: string) {\r\n    // customSlackAppID column is null for our Cord apps.  This was to avoid\r\n    // doing a bigger migration when we introduced the ability to add external\r\n    // Slack apps\r\n    const customSlackAppID = CORD_SLACK_APP_IDS.includes(slackAppID)\r\n      ? null\r\n      : slackAppID;\r\n\r\n    return await OrgEntity.findOne({\r\n      where: {\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalID: slackTeamID,\r\n        customSlackAppID,\r\n        // Technically redundant, but allows postgres to use an index.\r\n        platformApplicationID: null,\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadPlatformOrg(platformApplicationID: string, externalOrgID: string) {\r\n    return await this.platformOrgDataloader.load({\r\n      platformApplicationID,\r\n      externalID: externalOrgID,\r\n    });\r\n  }\r\n\r\n  async loadByDomain(externalProvider: string, domain: string) {\r\n    return await OrgEntity.findOne({\r\n      where: { externalProvider, domain },\r\n    });\r\n  }\r\n\r\n  async loadAllActiveSlackOrgs() {\r\n    return await OrgEntity.findAll({\r\n      where: {\r\n        state: 'active',\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalAuthData: { [Op.ne]: null },\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'thread_participants',\r\n  timestamps: false,\r\n})\r\nexport class ThreadParticipantEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  // The timestamp of the last seen message, or NULL if no messages have been\r\n  // seen\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastSeenTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUnseenMessageTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastUnseenReactionTimestamp!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n  })\r\n  subscribed!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'page_visitors',\r\n  timestamps: false,\r\n})\r\nexport class PageVisitorEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  orgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastPresentTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'sessions',\r\n  timestamps: false,\r\n})\r\nexport class SessionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  applicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  issuedAt!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  expiresAt!: Date;\r\n}\r\n", "import { performance } from 'perf_hooks';\r\nimport { AsyncLocalStorage } from 'async_hooks';\r\nimport * as Sentry from '@sentry/node';\r\nimport type { Transaction } from '@sentry/types';\r\nimport type WebSocket from 'ws';\r\nimport { v4 as uuid } from 'uuid';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  TimeHistogram,\r\n  Gauge,\r\n  Counter,\r\n  incCounterWithAppID,\r\n} from 'server/src/logging/prometheus.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { isEmployee } from 'common/util/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\ntype AsyncLocalStorageType = {\r\n  operationName: string;\r\n  operationID: UUID;\r\n  platformApplicationID: UUID | undefined;\r\n  logger: Logger;\r\n};\r\n\r\n// Using AsyncLocalStorage is not free. We previously had it enabled only in\r\n// staging, but it's so darn useful we took the hit and enabled everywhere.\r\n// However, to try to make sure we don't completely depend on it and can still\r\n// turn it off again if need be, explicitly type this variable as being\r\n// potentially null (even though in practise it never is) so that callers have\r\n// to at least deal with it being missing at a TS level.\r\nexport const asyncLocalStorage: AsyncLocalStorage<AsyncLocalStorageType> | null =\r\n  new AsyncLocalStorage<AsyncLocalStorageType>();\r\n\r\nconst DO_NOT_LOG_OPERATIONS = ['PingQuery'];\r\n\r\ntype WebSocketWithDetails = WebSocket & {\r\n  cordOnCloseWebSocket?: () => void;\r\n  // Properties we add to the websocket so we can identify them in heap dumps\r\n  cordDebugInfo?: {\r\n    userID: UUID | undefined;\r\n    orgID: UUID | undefined;\r\n    socketID: UUID;\r\n    connectionID: UUID;\r\n    connectionStart: string;\r\n    connectionEnd?: string;\r\n  };\r\n};\r\n\r\n// In any case, production or not, we keep track of the GraphQL operation\r\n// execution times in this Prometheus metric:\r\nconst graphQlMetric = TimeHistogram({\r\n  name: `GraphQlExecTime`,\r\n  help: `Execution time of GraphQL operations in seconds`,\r\n  labelNames: ['operation'],\r\n});\r\n\r\n// Separate from the above histogram so we don't explode operation*appID*bucket.\r\nconst graphQLCounter = Counter({\r\n  name: 'GraphQlExecCount',\r\n  help: 'Total number of GraphQL operations executed',\r\n  labelNames: ['operation', 'appID'],\r\n});\r\n\r\nconst openWebsocketMetric = Gauge({\r\n  name: 'OpenWebsockets',\r\n  help: 'Number of open websocket connections',\r\n  labelNames: ['appID', 'clientVersion', 'endpoint', 'deployment'],\r\n});\r\n\r\nexport function websocketConnected(\r\n  socket: WebSocketWithDetails,\r\n  context: RequestContext,\r\n  endpoint: 'public' | 'admin',\r\n) {\r\n  const socketID = uuid();\r\n  const {\r\n    session: {\r\n      viewer: { userID, orgID, platformApplicationID: appID },\r\n    },\r\n    clientVersion,\r\n  } = context;\r\n\r\n  const openWebsocketMetricLabels = {\r\n    appID: appID || 'null',\r\n    clientVersion: clientVersion || 'null',\r\n    endpoint,\r\n    deployment: context.deployment ?? 'null',\r\n  };\r\n  const loggingInfo = { socketID, userID, orgID, appID, clientVersion };\r\n\r\n  openWebsocketMetric.inc(openWebsocketMetricLabels, 1);\r\n  context.logger.debug('performance', {\r\n    event: 'websocketConnected',\r\n    ...loggingInfo,\r\n  });\r\n\r\n  socket.cordOnCloseWebSocket = () => {\r\n    openWebsocketMetric.dec(openWebsocketMetricLabels, 1);\r\n    context.logger.debug('performance', {\r\n      event: 'websocketDisconnected',\r\n      ...loggingInfo,\r\n    });\r\n    if (socket.cordDebugInfo) {\r\n      socket.cordDebugInfo.connectionEnd = new Date().toUTCString();\r\n    }\r\n  };\r\n  socket.cordDebugInfo = {\r\n    userID,\r\n    orgID,\r\n    socketID,\r\n    connectionID: context.connectionID,\r\n    connectionStart: new Date().toUTCString(),\r\n  };\r\n}\r\n\r\nexport function websocketDisconnected(socket: WebSocketWithDetails) {\r\n  const { cordOnCloseWebSocket } = socket;\r\n  if (cordOnCloseWebSocket) {\r\n    delete socket.cordOnCloseWebSocket;\r\n    cordOnCloseWebSocket();\r\n  }\r\n}\r\n\r\n/**\r\n * Sorry about the \"any\" -- this is usable at two different types, the type of\r\n * the main \"execute\" and the type of the subscription \"customExecute\", which\r\n * pass arguments slightly differently. The code to adapt the differences is not\r\n * difficult, but convincing TS that it's correct is. If you want to try to fix\r\n * it, you probably have better ways to spend your time.\r\n */\r\nexport function graphQLExecutePerformanceWrapper(\r\n  previousExecuteFunction: any,\r\n): any {\r\n  const execute = (...args: any[]) => {\r\n    let operationFinished = () => {};\r\n\r\n    // Deal with the two different input types, for the main execute (passes\r\n    // multiple args) and the subscription execute (passes one object arg).\r\n    const context: RequestContext =\r\n      args.length > 1 ? args[3] : args[0].contextValue;\r\n    const variableValues = args.length > 1 ? args[4] : args[0].variableValues;\r\n    const operationName = args.length > 1 ? args[5] : args[0].operationName;\r\n\r\n    if (operationName && !DO_NOT_LOG_OPERATIONS.includes(operationName)) {\r\n      const { userID, orgID } = context.session.viewer;\r\n\r\n      // Have a random uuid just so we can unambiguously relate the log\r\n      // lines we send at the beginning and the end of this operation\r\n      const operationUUID =\r\n        asyncLocalStorage?.getStore()?.operationID ?? uuid();\r\n\r\n      // Before we execute the GraphQL operation: take the current time\r\n      // (`startTime`) and write a log line about the operation about to start\r\n      const startTime = performance.now();\r\n      context.logger.debug(`performance`, {\r\n        event: 'graphQlExecuteStart',\r\n        userID,\r\n        orgID,\r\n        operation: operationName,\r\n        operationUUID,\r\n      });\r\n\r\n      incCounterWithAppID(context.session.viewer, graphQLCounter, {\r\n        operation: operationName,\r\n      });\r\n\r\n      let sentryTransaction: Transaction | undefined;\r\n      if (isEmployee(orgID)) {\r\n        sentryTransaction = Sentry.startTransaction({\r\n          op: 'graphql',\r\n          name: operationName,\r\n          data: variableValues,\r\n        });\r\n      }\r\n\r\n      // This is going to get executed when the GraphQL operation has finished:\r\n      // we write another log line, register the execution time in the\r\n      // Prometheus metric, and write a row to the database (if enabled)\r\n      operationFinished = () => {\r\n        const durationMS = performance.now() - startTime;\r\n\r\n        // log to winston\r\n        context.logger.debug(`performance`, {\r\n          event: 'graphQlExecuteEnd',\r\n          userID: userID,\r\n          orgID: orgID,\r\n          operation: operationName,\r\n          operationUUID,\r\n          durationMS,\r\n        });\r\n\r\n        // update prometheus metric (prometheus values are in seconds)\r\n        graphQlMetric.observe({ operation: operationName }, durationMS / 1000);\r\n\r\n        if (sentryTransaction) {\r\n          Sentry.withScope((scope) => {\r\n            scope.setUser(userID ? { id: userID } : null);\r\n            sentryTransaction?.finish();\r\n          });\r\n        }\r\n      };\r\n    }\r\n\r\n    // An `ExecuteFunction` can return either a plain `ExecutionResult` or a `Promise<ExecutionResult>`, or\r\n    // `AsyncIterator<ExecutionResult>`.\r\n    const result = previousExecuteFunction(...args);\r\n\r\n    if ('next' in result) {\r\n      // The presence of a `next` field means that `result` is of type\r\n      // `AsyncIterator<ExecutionResult>`\r\n      return asyncIteratorFinally(result, operationFinished);\r\n    } else {\r\n      // `result` is a `ExecutionResult` or `Promise<ExecutionResult>`. Either\r\n      // way, we return it in the form of a `Promise<ExecutionResult>`.\r\n      return Promise.resolve(result).finally(operationFinished);\r\n    }\r\n  };\r\n\r\n  if (asyncLocalStorage) {\r\n    return (...args: any[]) => {\r\n      const context: RequestContext =\r\n        args.length > 1 ? args[3] : args[0].contextValue;\r\n      const operationName = args.length > 1 ? args[5] : args[0].operationName;\r\n      return asyncLocalStorage.run(\r\n        {\r\n          operationName,\r\n          operationID: uuid(),\r\n          platformApplicationID: context.session.viewer.platformApplicationID,\r\n          logger: context.logger,\r\n        },\r\n        execute,\r\n        ...args,\r\n      );\r\n    };\r\n  } else {\r\n    return execute;\r\n  }\r\n}\r\n\r\nfunction asyncIteratorFinally<T, TReturn, TNext>(\r\n  aiter: AsyncIterator<T, TReturn, TNext>,\r\n  finallyFunc: () => void,\r\n): AsyncIterator<T, TReturn, TNext> {\r\n  let finallyFuncHasBeenCalled = false;\r\n\r\n  return {\r\n    async next(...args) {\r\n      const item = await aiter.next(...args);\r\n      if (item.done) {\r\n        if (!finallyFuncHasBeenCalled) {\r\n          finallyFuncHasBeenCalled = true;\r\n          finallyFunc();\r\n        }\r\n      }\r\n      return item;\r\n    },\r\n  };\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { Tier } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'heimdall',\r\n  timestamps: false,\r\n})\r\nexport class HeimdallEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  tier!: Tier;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  key!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n  })\r\n  value!: boolean; // boolean is the only value supported for now.\r\n\r\n  isOn(): boolean {\r\n    return this.value;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'email_subscription',\r\n  timestamps: false,\r\n})\r\nexport class EmailSubscriptionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    allowNull: false,\r\n    defaultValue: false,\r\n  })\r\n  subscribed!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'linked_users',\r\n  timestamps: false,\r\n})\r\nexport class LinkedUsersEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  linkedUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  linkedOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  linkedTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_mirrored_threads',\r\n  timestamps: false,\r\n})\r\nexport class SlackMirroredThreadEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model, DataType } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\nimport type {\r\n  Location,\r\n  OutboundNotificationMetadata,\r\n  OutboundNotificationType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_notifications',\r\n  timestamps: false,\r\n})\r\nexport class MessageOutboundNotificationEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n  })\r\n  id!: string; // using a nano ID rather than a UUID\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'slack',\r\n      'email',\r\n      'slackEmailMatched',\r\n      'sharedToSlackChannel',\r\n      'sharedToEmail',\r\n    ),\r\n  })\r\n  type!: OutboundNotificationType;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  targetUserID!: UUID | null;\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  targetOrgID!: UUID;\r\n  @Column({\r\n    type: DataType.TIME,\r\n    allowNull: false,\r\n    defaultValue: Sequelize.literal('NOW()'),\r\n  })\r\n  timestamp!: Date;\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: OutboundNotificationMetadata;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  sharerUserID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  sharerOrgID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  location!: Location | null;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'console_users',\r\n  timestamps: false,\r\n})\r\nexport class ConsoleUserEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID; // Internal, autogenerated UUID\r\n\r\n  @Column({ type: DataTypes.STRING, unique: true })\r\n  email!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n  })\r\n  name: string | null | undefined;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: true })\r\n  picture: string | null | undefined;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  customerID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  verified!: boolean;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: true,\r\n  })\r\n  auth0UserID: string | null | undefined;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  pendingCustomerID!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: null,\r\n  })\r\n  loopsUserID!: string | null;\r\n\r\n  get idForLogging(): string {\r\n    const authSource = this.auth0UserID?.includes('|')\r\n      ? this.auth0UserID.substring(0, this.auth0UserID.indexOf('|'))\r\n      : 'unknown';\r\n    return `${this.email} [${authSource}]`;\r\n  }\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'user_hidden_annotations',\r\n  timestamps: false,\r\n})\r\nexport class UserHiddenAnnotationsEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  annotationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  pageContextHash!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  orgID!: UUID;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\n@Table({\r\n  tableName: 'external_assets',\r\n  timestamps: false,\r\n})\r\nexport class ExternalAssetEntity extends Model {\r\n  /**\r\n   * url from where the asset was downloaded\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  /**\r\n   * time when download happened\r\n   */\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n  })\r\n  downloadTimestamp!: Date;\r\n\r\n  /**\r\n   * sha384 hash of the downloaded contents\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  sha384!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\n@Table({\r\n  tableName: 'image_variants',\r\n  timestamps: false,\r\n})\r\nexport class ImageVariantEntity extends Model {\r\n  /**\r\n   * sha384 hash of the image this variant is based on\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  sourceSha384!: string;\r\n\r\n  /**\r\n   * description of how the base image was altered\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  variant!: string;\r\n\r\n  /**\r\n   * time this variant was created\r\n   */\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n  })\r\n  timestamp!: Date;\r\n\r\n  /**\r\n   * filename, i.e. key in our public S3 bucket\r\n   */\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  filename!: string;\r\n}\r\n", "import { Column, Table, Model } from 'sequelize-typescript';\r\nimport { DataTypes, Sequelize } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'slack_mirrored_support_threads',\r\n  timestamps: false,\r\n})\r\nexport class SlackMirroredSupportThreadEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  threadID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  threadOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  slackOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  slackChannelID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  slackMessageTimestamp!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { Tier, UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'deploys',\r\n  timestamps: false,\r\n})\r\nexport class DeploysEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('prod', 'staging', 'test', 'dev'),\r\n  })\r\n  tier!: Tier;\r\n\r\n  @Column({\r\n    type: DataTypes.DATE,\r\n  })\r\n  deployStartTime!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  deployFinishTime!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  success!: boolean | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  error!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  gitCommitHash!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  dockerImage!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  packageVersion!: string | null;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { ThirdPartyConnectionDataType } from 'server/src/entity/common.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type MondaySubscriptionDetails = {\r\n  boardID: string;\r\n  webhookID: string;\r\n};\r\n\r\n@Table({\r\n  tableName: 'task_third_party_subscriptions',\r\n  timestamps: false,\r\n})\r\nexport class TaskThirdPartySubscriptionEntity extends Model {\r\n  @Column({ type: DataTypes.UUID, primaryKey: true })\r\n  id!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  userID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  orgID!: UUID;\r\n\r\n  @Column({ type: ThirdPartyConnectionDataType })\r\n  externalConnectionType!: ThirdPartyConnectionType;\r\n\r\n  @Column({ type: DataTypes.JSONB })\r\n  subscriptionDetails!: MondaySubscriptionDetails;\r\n\r\n  @Column({ type: DataTypes.TIME })\r\n  createdTimestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'application_usage_metrics',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationUsageMetricEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  applicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  metricID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.DATE,\r\n    primaryKey: true,\r\n  })\r\n  date!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  })\r\n  value!: number;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n@Table({\r\n  tableName: 'application_usage_metric_types',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationUsageMetricTypeEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  metric!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { literal, DataTypes } from 'sequelize';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\nimport type { EntityMetadata, UUID } from 'common/types/index.ts';\r\nimport type { NotificationReadStatus } from 'server/src/schema/resolverTypes.ts';\r\nimport type { ThreadActionType } from 'server/src/notifications/types/thread_action.ts';\r\n\r\nexport type NotificationType =\r\n  | 'reply'\r\n  | 'reaction'\r\n  | 'external'\r\n  | 'thread_action';\r\nexport type SpecificNotificationEntity<T extends NotificationType> =\r\n  NotificationEntity & { type: T };\r\n\r\n/**\r\n * As with other `Entity`s, NotificationEntity is a layer directly on top of the\r\n * raw SQL table. The data here is organised as most convenient for the\r\n * database, not for UI rendering. For example, while we display a bunch of\r\n * reactions to the same message as a single notification in the UI, each\r\n * individual reaction has its own row in the DB and thus its own\r\n * NotificationEntity.\r\n *\r\n * @see Notification is the GraphQL type this is massaged into for UI rendering.\r\n */\r\n@Table({\r\n  tableName: 'notifications',\r\n  timestamps: false,\r\n})\r\nexport class NotificationEntity extends Model<\r\n  InferAttributes<NotificationEntity>,\r\n  InferCreationAttributes<NotificationEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID })\r\n  externalID!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: false })\r\n  recipientID!: UUID;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  senderID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  iconUrl!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('reply', 'reaction', 'external', 'thread_action'),\r\n    allowNull: false,\r\n  })\r\n  type!: NotificationType;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  aggregationKey!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('unread', 'read'),\r\n    allowNull: false,\r\n    defaultValue: 'unread',\r\n  })\r\n  readStatus!: CreationOptional<NotificationReadStatus>;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: false,\r\n    defaultValue: literal('CURRENT_TIMESTAMP'),\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  messageID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.ARRAY(DataTypes.TEXT), allowNull: true })\r\n  replyActions!: NotificationReplyAction[] | null;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  reactionID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: true })\r\n  threadID!: UUID | null;\r\n\r\n  @Column({ type: DataTypes.ENUM('resolve', 'unresolve'), allowNull: true })\r\n  threadActionType!: ThreadActionType | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  externalTemplate!: string | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  externalURL!: string | null;\r\n\r\n  @Column({ type: DataTypes.TEXT, allowNull: true })\r\n  extraClassnames!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n    allowNull: false,\r\n    defaultValue: {},\r\n  })\r\n  metadata!: CreationOptional<EntityMetadata>;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_go_redirects',\r\n  timestamps: false,\r\n})\r\nexport class AdminGoRedirectEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  name!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  creatorUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  updaterUserID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n    defaultValue: 0,\r\n  })\r\n  redirectCount!: number;\r\n}\r\n\r\nconst RESERVED_NAMES = ['name', 'edit'];\r\nconst MAX_REDIRECT_NAME_LENGTH = 40;\r\n\r\nexport function isValidRedirectName(name: string): boolean {\r\n  return (\r\n    !RESERVED_NAMES.includes(name) &&\r\n    !!name.match(/^[a-z0-9_-]+$/) &&\r\n    name.length <= MAX_REDIRECT_NAME_LENGTH\r\n  );\r\n}\r\n\r\nexport function canonicalizeRedirectName(name: string): string {\r\n  return name.toLowerCase();\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type {\r\n  AdminCRTComingFrom,\r\n  AdminCRTCommunicationStatus,\r\n  AdminCRTDecision,\r\n  AdminCRTIssueType,\r\n  AdminCRTPriority,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issues',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  customerID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  title!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  body!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('them', 'us'),\r\n  })\r\n  comingFrom!: AdminCRTComingFrom;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('done', 'pending', 'accepted', 'rejected'),\r\n  })\r\n  decision!: AdminCRTDecision;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM(\r\n      'none',\r\n      'request_acked',\r\n      'decision_sent',\r\n      'decision_acked',\r\n    ),\r\n  })\r\n  communicationStatus!: AdminCRTCommunicationStatus;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n    allowNull: true,\r\n  })\r\n  lastTouch!: Date | null;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('request', 'bug', 'onboarding_step'),\r\n    allowNull: true,\r\n  })\r\n  type!: AdminCRTIssueType;\r\n\r\n  @Column({\r\n    type: DataTypes.ENUM('blocker', 'high', 'low'),\r\n    allowNull: true,\r\n  })\r\n  priority!: AdminCRTPriority;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: true,\r\n  })\r\n  assignee!: UUID | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: Date;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n    defaultValue: false,\r\n  })\r\n  externallyVisible!: boolean;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { JsonValue, UUID } from 'common/types/index.ts';\r\n\r\nexport type AdminCRTIssueChangeDetail = {\r\n  created?: boolean;\r\n  updated?: Array<{\r\n    field: string;\r\n    oldValue: JsonValue;\r\n    newValue: JsonValue;\r\n  }>;\r\n};\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issue_changes',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueChangeEntity extends Model {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  issueID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  userID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.JSONB,\r\n  })\r\n  changeDetail!: AdminCRTIssueChangeDetail;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  timestamp!: Date;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'admin_crt_customer_issue_subscriptions',\r\n  timestamps: false,\r\n})\r\nexport class AdminCRTCustomerIssueSubscriptionEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  issueID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  userID!: UUID;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'message_link_previews',\r\n  timestamps: false,\r\n})\r\nexport class MessageLinkPreviewEntity extends Model<\r\n  InferAttributes<MessageLinkPreviewEntity>,\r\n  InferCreationAttributes<MessageLinkPreviewEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n  })\r\n  messageID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  url!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  img!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  title!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n  })\r\n  description!: string | null;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  lastScrapedTimestamp!: CreationOptional<Date>;\r\n\r\n  @Column({\r\n    type: DataTypes.BOOLEAN,\r\n  })\r\n  hidden!: boolean;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'application_webhooks',\r\n  timestamps: false,\r\n})\r\nexport class ApplicationWebhookEntity extends Model {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    unique: 'AppURLUniqueness',\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n    unique: 'AppURLUniqueness',\r\n  })\r\n  eventWebhookURL!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.TEXT),\r\n    defaultValue: null,\r\n  })\r\n  eventWebhookSubscriptions!: string[] | null;\r\n}\r\n", "import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'warm_demo_users',\r\n  timestamps: false,\r\n})\r\nexport class WarmDemoUserEntity extends Model<\r\n  InferAttributes<WarmDemoUserEntity>,\r\n  InferCreationAttributes<WarmDemoUserEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    defaultValue: DataTypes.UUIDV4,\r\n    type: DataTypes.UUID,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  demoGroup!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n  })\r\n  version!: number;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  userID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  orgID!: string;\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type { InferAttributes, InferCreationAttributes } from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'preallocated_thread_ids',\r\n  timestamps: false,\r\n})\r\nexport class PreallocatedThreadIDEntity extends Model<\r\n  InferAttributes<PreallocatedThreadIDEntity>,\r\n  InferCreationAttributes<PreallocatedThreadIDEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n    primaryKey: true,\r\n  })\r\n  id!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TEXT,\r\n    allowNull: false,\r\n  })\r\n  externalID!: string;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n}\r\n", "import type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport { Column, Model, PrimaryKey, Table } from 'sequelize-typescript';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\nconst PermissionValues = [\r\n  'thread:read',\r\n  'thread:send-message',\r\n  'thread-participant:read',\r\n  'message:read',\r\n] as const;\r\nexport type Permission = (typeof PermissionValues)[number];\r\n\r\n@Table({\r\n  tableName: 'permission_rules',\r\n  timestamps: false,\r\n})\r\nexport class PermissionRuleEntity extends Model<\r\n  InferAttributes<PermissionRuleEntity>,\r\n  InferCreationAttributes<PermissionRuleEntity>\r\n> {\r\n  @PrimaryKey\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    defaultValue: DataTypes.UUIDV4,\r\n  })\r\n  id!: CreationOptional<UUID>;\r\n\r\n  @Column({ type: DataTypes.UUID, allowNull: false })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: false })\r\n  resourceSelector!: string; // Actually a jsonpath.\r\n\r\n  @Column({ type: DataTypes.STRING, allowNull: false })\r\n  userSelector!: string; // Actually a jsonpath.\r\n\r\n  @Column({\r\n    type: DataTypes.ARRAY(DataTypes.ENUM(...PermissionValues)),\r\n    allowNull: false,\r\n  })\r\n  permissions!: Permission[];\r\n}\r\n", "import { Table, Column, Model } from 'sequelize-typescript';\r\nimport type {\r\n  CreationOptional,\r\n  InferAttributes,\r\n  InferCreationAttributes,\r\n} from 'sequelize';\r\nimport { DataTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n@Table({\r\n  tableName: 'org_org_members',\r\n  timestamps: false,\r\n})\r\nexport class OrgOrgMembersEntity extends Model<\r\n  InferAttributes<OrgOrgMembersEntity>,\r\n  InferCreationAttributes<OrgOrgMembersEntity>\r\n> {\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  childOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    primaryKey: true,\r\n    allowNull: false,\r\n  })\r\n  parentOrgID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.UUID,\r\n    allowNull: false,\r\n  })\r\n  platformApplicationID!: UUID;\r\n\r\n  @Column({\r\n    type: DataTypes.TIME,\r\n  })\r\n  createdTimestamp!: CreationOptional<Date>;\r\n}\r\n", "import type { Redis as RedisClient } from 'ioredis';\r\nimport Redis from 'ioredis';\r\nimport Redlock from 'redlock';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { isNotNull } from 'common/util/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nconst compareAndDelete = 'compareAndDelete';\r\nconst incrAndExpire = 'incrAndExpire';\r\ntype RedisWithOurCommands = RedisClient & {\r\n  // see defineCommand in initRedis\r\n  // compareAndDelete() executes a Lua script as a single transaction on redis\r\n  // that deletes the key if the value stored under the key matches the\r\n  // specified value. Returns 1 if key was deleted or 0 if not.\r\n  [compareAndDelete]: (key: string, val: string) => Promise<number>;\r\n  [incrAndExpire]: (key: string, expireInSec: number) => Promise<number>;\r\n};\r\nlet redis: RedisWithOurCommands | undefined;\r\n\r\nexport function getRedis(): RedisWithOurCommands {\r\n  if (redis === undefined) {\r\n    throw new Error('Redis has not been initialised');\r\n  }\r\n  return redis;\r\n}\r\n\r\nlet predis: RedisWithOurCommands | undefined;\r\n\r\nexport function getPredis(): RedisWithOurCommands {\r\n  if (predis === undefined) {\r\n    throw new Error('Predis has not been initialised');\r\n  }\r\n  return predis;\r\n}\r\n\r\nlet redlock: Redlock | undefined;\r\n\r\nexport function getRedlock(): Redlock {\r\n  if (redlock === undefined) {\r\n    throw new Error('Redis has not been initialised');\r\n  }\r\n  return redlock;\r\n}\r\n\r\nfunction addOurCommands(redisClient: RedisClient) {\r\n  redisClient.defineCommand(compareAndDelete, {\r\n    numberOfKeys: 1,\r\n    lua: `\r\nlocal currVal = redis.call(\"get\", KEYS[1])\r\nif currVal == ARGV[1] then\r\n  return redis.call(\"del\", KEYS[1])\r\nelse\r\n  return 0\r\nend`,\r\n  });\r\n  redisClient.defineCommand(incrAndExpire, {\r\n    numberOfKeys: 1,\r\n    // this lua script increments a value (which sets it to 1 if it did not\r\n    // exist before). If the value was just created, an expiry is set on the value.\r\n    lua: `\r\nlocal currVal = redis.call(\"incr\", KEYS[1])\r\nif currVal == 1 then\r\n  redis.call(\"expire\", KEYS[1], ARGV[1])\r\nend\r\nreturn currVal\r\n`,\r\n  });\r\n}\r\n\r\nexport function initRedis() {\r\n  const redisClient = createRedisClient();\r\n  const predisClient = createPredisClient();\r\n\r\n  [redisClient, predisClient].forEach((client) => addOurCommands(client));\r\n\r\n  redis = redisClient as RedisWithOurCommands;\r\n  predis = predisClient as RedisWithOurCommands;\r\n\r\n  // Used for adding Slack mirrored threads\r\n  redlock = new Redlock([redis]);\r\n}\r\n\r\nexport function createRedisClient(): RedisClient {\r\n  return new Redis.default(Number(env.REDIS_PORT), env.REDIS_HOST);\r\n}\r\n\r\nexport function createPredisClient(): RedisClient {\r\n  return new Redis.default(Number(env.PREDIS_PORT), env.PREDIS_HOST);\r\n}\r\n\r\n// This is a helper function to check for errors after a Redis MULTI\r\n// transaction is used.\r\nexport function multiOperationSucceeded(\r\n  errsAndVals: [Error | null, unknown][] | null,\r\n  message: string,\r\n): errsAndVals is [Error | null, unknown][] {\r\n  if (!errsAndVals) {\r\n    anonymousLogger().logException(\r\n      message,\r\n      new Error('Return value was empty'),\r\n    );\r\n    return false;\r\n  }\r\n  const errs = errsAndVals\r\n    .map((errAndVal) => errAndVal[0])\r\n    .filter(isNotNull)\r\n    .map((err) => err.message);\r\n  if (errs.length > 0) {\r\n    anonymousLogger().logException(message, errs[0], { allErrors: errs });\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n", "import * as crypto from 'crypto';\r\nimport type { PubSubEngine } from 'graphql-subscriptions';\r\nimport { PubSub } from 'graphql-subscriptions';\r\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\n\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { EntityMetadata, Location, UUID } from 'common/types/index.ts';\r\nimport { createRedisClient } from 'server/src/redis/index.ts';\r\nimport type { SlackMirroredThreadInfo } from 'server/src/schema/resolverTypes.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { LinkedUsersLoader } from 'server/src/entity/linked_users/LinkedUsersLoader.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport {\r\n  getTypedFeatureFlagValue,\r\n  FeatureFlags,\r\n} from 'server/src/featureflags/index.ts';\r\n\r\nlet pubSub: PubSubEngine | undefined;\r\n\r\nconst publishCounter = Counter({\r\n  name: 'PubSubEventPublished',\r\n  help: 'Pub-sub events published',\r\n  labelNames: ['name'],\r\n});\r\n\r\nconst subscribeCounter = Counter({\r\n  name: 'PubSubEventSubscribed',\r\n  help: 'Pub-sub events subscribed to',\r\n  labelNames: ['name'],\r\n});\r\n\r\nexport async function initPubSub() {\r\n  if (pubSub !== undefined) {\r\n    throw new Error('PubSub has been already initialised');\r\n  }\r\n\r\n  if (process.env.IS_TEST) {\r\n    // in-memory-only pubsub\r\n    pubSub = new PubSub();\r\n  } else {\r\n    pubSub = new RedisPubSub({\r\n      publisher: createRedisClient(),\r\n      subscriber: createRedisClient(),\r\n    });\r\n  }\r\n}\r\n\r\nfunction getPubSub(): PubSubEngine {\r\n  if (pubSub === undefined) {\r\n    throw new Error('PubSub has not been initialised');\r\n  }\r\n  return pubSub;\r\n}\r\n\r\ntype PubSubEvents = {\r\n  'page-thread-added-with-location': {\r\n    args: { orgID: string };\r\n    payload: { threadID: string; location: Location };\r\n  };\r\n  'page-thread-deleted': {\r\n    args: { orgID: string };\r\n    payload: { threadID: string };\r\n  };\r\n  'thread-filterable-properties-updated': {\r\n    args: { orgID: string };\r\n    payload: {\r\n      threadID: string;\r\n      changes: {\r\n        location?: { old: Location; new: Location };\r\n        resolved?: { old: boolean; new: boolean };\r\n        metadata?: { old: EntityMetadata; new: EntityMetadata };\r\n        orgID?: { old: UUID; new: UUID };\r\n        subscribers?: { added: UUID[]; removed: UUID[] };\r\n      };\r\n    };\r\n  };\r\n  'thread-created': {\r\n    args: { threadID: UUID };\r\n    payload: { threadID: UUID }; // This is redundant, but it makes the ThreadEvents subscription easier to implement\r\n  };\r\n  'thread-deleted': {\r\n    args: { threadID: UUID };\r\n    payload: { threadID: UUID }; // This is redundant, but it makes the ThreadEvents subscription easier to implement\r\n  };\r\n  'thread-message-added': {\r\n    args: { threadID: UUID };\r\n    payload: { messageID: UUID };\r\n  };\r\n  'thread-message-updated': {\r\n    args: { threadID: UUID };\r\n    payload: { messageID: UUID };\r\n  };\r\n  'thread-message-content-appended': {\r\n    args: { threadID: UUID };\r\n    payload: { messageID: UUID; appendedContent: string };\r\n  };\r\n  'thread-message-removed': {\r\n    args: { threadID: UUID };\r\n    payload: { messageID: UUID };\r\n  };\r\n  'thread-participants-updated-incremental': {\r\n    args: { threadID: UUID };\r\n    payload: { userID: UUID };\r\n  };\r\n  'thread-typing-users-updated': {\r\n    args: { threadID: UUID };\r\n    payload: { users: UUID[] };\r\n  };\r\n  'thread-share-to-slack': {\r\n    args: { threadID: UUID };\r\n    payload: { info: SlackMirroredThreadInfo | null };\r\n  };\r\n  'thread-properties-updated': {\r\n    args: { threadID: UUID };\r\n    payload: null;\r\n  };\r\n  'thread-subscriber-updated': {\r\n    args: { threadID: UUID };\r\n    payload: { userID: UUID };\r\n  };\r\n  'inbox-updated': {\r\n    args: { userID: UUID };\r\n    payload: { threadID: string; location: Location } | null;\r\n  };\r\n  'console-getting-started-updated': {\r\n    args: { applicationID: UUID };\r\n    payload: null;\r\n  };\r\n  'user-preference-updated': {\r\n    args: { userID: UUID };\r\n    payload: { key: string };\r\n  };\r\n  'user-identity': {\r\n    args: { userID: UUID };\r\n    payload: null;\r\n  };\r\n  'org-user-identity': {\r\n    args: { orgID: UUID };\r\n    payload: { userID: UUID };\r\n  };\r\n  'annotations-on-page-updated': {\r\n    args: {\r\n      pageContextHash: UUID;\r\n      orgID: UUID;\r\n    };\r\n    payload: null;\r\n  };\r\n  'incoming-slack-event': {\r\n    args: { tier: string };\r\n    payload: {\r\n      type: string;\r\n      event: unknown;\r\n    };\r\n  };\r\n  'pub-sub-health-check': {\r\n    args: null;\r\n    payload: null;\r\n  };\r\n  'notification-added': {\r\n    args: { userID: UUID };\r\n    payload: { notificationID: UUID };\r\n  };\r\n  'notification-read-state-updated': {\r\n    args: { userID: UUID };\r\n    payload: { notificationID: UUID };\r\n  };\r\n  'notification-deleted': {\r\n    args: { userID: UUID };\r\n    payload: { notificationID: UUID };\r\n  };\r\n  'context-presence': {\r\n    args: { orgID: UUID };\r\n    payload: { externalUserID: string } & (\r\n      | {\r\n          ephemeral: {\r\n            arrived?: Location;\r\n            departed?: Location;\r\n            sequenceNum: number;\r\n          };\r\n        }\r\n      | {\r\n          durable: {\r\n            context: Location;\r\n            timestamp: number;\r\n          };\r\n        }\r\n    );\r\n  };\r\n  'org-member-added': {\r\n    args: { orgID: UUID };\r\n    payload: { userID: UUID };\r\n  };\r\n  'org-member-removed': {\r\n    args: { orgID: UUID };\r\n    payload: { userID: UUID };\r\n  };\r\n  'restart-subscription': {\r\n    args: { userID: UUID };\r\n    payload: null;\r\n  };\r\n  'customer-subscription-updated': {\r\n    args: { customerID: UUID };\r\n    payload: { customerID: UUID };\r\n  };\r\n};\r\n\r\nexport type PubSubEventName = keyof PubSubEvents;\r\n\r\ntype PubSubEventNameArguments<T extends PubSubEventName> =\r\n  PubSubEvents[T]['args'];\r\n\r\ntype PubSubEventPayload<T extends PubSubEventName> = PubSubEvents[T]['payload'];\r\n\r\n/**\r\n * An event object flowing through pubsub.\r\n * The pubsub channel name is composed of the event name + args.\r\n */\r\nexport type PubSubEvent<T extends PubSubEventName = PubSubEventName> = {\r\n  /**\r\n   * What happened, for example 'thread-created'.\r\n   */\r\n  name: T;\r\n\r\n  /**\r\n   * Arguments for the event name, for example the hash of the page on which a thread was created.\r\n   */\r\n  args: PubSubEventNameArguments<T>;\r\n\r\n  /**\r\n   * Details about the specific event instance, for example the id of the thread that was just created.\r\n   */\r\n  payload: PubSubEventPayload<T>;\r\n};\r\n\r\nfunction channelName<T extends PubSubEventName>(\r\n  name: T,\r\n  args: PubSubEventNameArguments<T>,\r\n) {\r\n  return channelNameWithLimit(jsonStableStringify({ name, args }));\r\n}\r\n\r\nexport type PubSubAsyncIteratorArg<T extends PubSubEventName> = T extends any\r\n  ? readonly [T, PubSubEventNameArguments<T>]\r\n  : never;\r\n\r\nexport function pubSubAsyncIterator<T extends PubSubEventName>(\r\n  ...events: Array<PubSubAsyncIteratorArg<T>>\r\n) {\r\n  events.forEach(([name]) => subscribeCounter.inc({ name }));\r\n  return getPubSub().asyncIterator<PubSubEvent<T>>(\r\n    events.map(([name, args]) => channelName(name, args)),\r\n  );\r\n}\r\n\r\nexport async function subscribeToPubSubEvent<T extends PubSubEventName>(\r\n  name: T,\r\n  args: PubSubEventNameArguments<T>,\r\n  callback: (event: PubSubEvent<T>) => unknown,\r\n) {\r\n  subscribeCounter.inc({ name });\r\n  return await getPubSub().subscribe(channelName(name, args), callback, {});\r\n}\r\n\r\nexport function unsubscribeFromPubSub(subscriptionID: number) {\r\n  getPubSub().unsubscribe(subscriptionID);\r\n}\r\n\r\nexport function publishPubSubEvent<T extends PubSubEventName>(\r\n  name: T,\r\n  args: PubSubEventNameArguments<T>,\r\n  // this type magic makes it so events that have no payload don't need to explicitly pass a null argument\r\n  // for example user-identity\r\n  ...payload: PubSubEventPayload<T> extends null ? [] : [PubSubEventPayload<T>]\r\n) {\r\n  publishCounter.inc({ name });\r\n  const event: PubSubEvent<T> = { name, args, payload: payload[0] ?? null };\r\n  return getPubSub().publish(channelName(name, args), event);\r\n}\r\n\r\n// OTHER EVENTS\r\n\r\nexport async function publishUserIdentityUpdate({\r\n  userID,\r\n  orgID,\r\n  platformApplicationID,\r\n}: {\r\n  userID: UUID;\r\n  orgID?: UUID;\r\n  platformApplicationID: UUID | 'extension';\r\n}): Promise<unknown> {\r\n  const skipPublish = await getTypedFeatureFlagValue(\r\n    FeatureFlags.SKIP_PUBLISH_USER_IDENTITY_UPDATE,\r\n    {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID,\r\n      version: null,\r\n    },\r\n  );\r\n\r\n  // Used as an emergency measure if we see wild fan outs or odd behaviour from a\r\n  // customer\r\n  if (skipPublish) {\r\n    anonymousLogger().debug(\r\n      'Returning early from publishUserIdentityUpdate because LaunchDarkly flag is true',\r\n      { userID, orgID, platformApplicationID },\r\n    );\r\n    return;\r\n  }\r\n\r\n  const orgIDs = orgID\r\n    ? [orgID]\r\n    : (\r\n        await OrgMembersEntity.findAll({\r\n          where: {\r\n            userID,\r\n          },\r\n        })\r\n      ).map((org) => org.orgID);\r\n  const linkedUsers = await LinkedUsersLoader.loadConnectedUsers(\r\n    userID,\r\n    orgIDs,\r\n  );\r\n\r\n  return await Promise.all([\r\n    publishPubSubEvent('user-identity', { userID }),\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    ...orgIDs.map((orgID) =>\r\n      publishPubSubEvent('org-user-identity', { orgID }, { userID }),\r\n    ),\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    ...linkedUsers.map(({ userID, orgID }) =>\r\n      publishPubSubEvent('org-user-identity', { orgID }, { userID }),\r\n    ),\r\n  ]);\r\n}\r\n\r\n// Generic Functions\r\n\r\nconst MAX_CHANNEL_NAME_LENGTH = 1024;\r\n\r\n// this function ensures we never go over a specific channel length limit\r\nconst channelNameWithLimit = (channel: string): string => {\r\n  if (channel.length <= MAX_CHANNEL_NAME_LENGTH) {\r\n    // if the channel name is already under the limit, keep as-is\r\n    return channel;\r\n  }\r\n\r\n  // if above, calculate a sha1 hash of it (40 characters), append the channel name\r\n  // for debugging and further avoiding collisions, then truncate\r\n  const sha1 = crypto.createHash('sha1').update(channel).digest('hex');\r\n  return `${sha1}:${channel}`.substring(0, MAX_CHANNEL_NAME_LENGTH);\r\n};\r\n", "import DataLoader from 'dataloader';\r\nimport { Op } from 'sequelize';\r\nimport { unique } from 'radash';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport type { UserOrgID } from 'server/src/entity/common.ts';\r\nimport { keyFor } from 'server/src/entity/common.ts';\r\n\r\nexport class LinkedUsersLoader {\r\n  viewer: Viewer;\r\n  connectedUserDataloader: DataLoader<UserOrgID, LinkedUsersEntity | null>;\r\n  loadLinkedUserFromSourceOrgScopedDataloader: DataLoader<\r\n    UserOrgID,\r\n    LinkedUsersEntity | null\r\n  >;\r\n  loadPlatformUserFromLinkedDataloader: DataLoader<\r\n    {\r\n      linkedUserID: UUID;\r\n      linkedOrgID: UUID;\r\n      sourceOrgID: UUID;\r\n    },\r\n    LinkedUsersEntity | null\r\n  >;\r\n  loadPlatformUserFromLinkedUserIDDataloader: DataLoader<\r\n    {\r\n      linkedUserID: UUID;\r\n      sourceOrgID: UUID;\r\n    },\r\n    LinkedUsersEntity | null\r\n  >;\r\n  loadLatestLinkedUserFromSourceAllOrgsDataloader: DataLoader<\r\n    UUID,\r\n    LinkedUsersEntity | null\r\n  >;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.connectedUserDataloader = new DataLoader(\r\n      async (userOrgIDs) => {\r\n        const uniqUserOrgIDs = unique(\r\n          userOrgIDs,\r\n          ({ userID, orgID }) => `${userID}/${orgID}`,\r\n        );\r\n        const linkedUsers = await LinkedUsersEntity.findAll({\r\n          where: {\r\n            [Op.or]: uniqUserOrgIDs.map(({ userID, orgID }) => ({\r\n              [Op.or]: [\r\n                { sourceUserID: userID, sourceOrgID: orgID },\r\n                { linkedUserID: userID, linkedOrgID: orgID },\r\n              ],\r\n            })),\r\n          },\r\n        });\r\n\r\n        const index = new Map<string, LinkedUsersEntity>();\r\n        for (const linkedUser of linkedUsers) {\r\n          // the set of \"source\" userID-orgID pairs and \"linked\" userID-orgID\r\n          // pairs should not overlap since \"sourceOrgID\" is for platform orgs\r\n          // (e.g. Typeform) and linkedOrgIDs are non-platform orgs (Slack).\r\n          // Hence, there should not be any ambiguity caused by which\r\n          // index.set() is called first.\r\n          index.set(\r\n            keyFor({\r\n              userID: linkedUser.sourceUserID,\r\n              orgID: linkedUser.sourceOrgID,\r\n            }),\r\n            linkedUser,\r\n          );\r\n          index.set(\r\n            keyFor({\r\n              userID: linkedUser.linkedUserID,\r\n              orgID: linkedUser.linkedOrgID,\r\n            }),\r\n            linkedUser,\r\n          );\r\n        }\r\n\r\n        return userOrgIDs.map(\r\n          (userOrgID) => index.get(keyFor(userOrgID)) ?? null,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.loadLinkedUserFromSourceOrgScopedDataloader = new DataLoader(\r\n      async (userOrgIDs) => {\r\n        const uniqUserOrgIDs = unique(\r\n          userOrgIDs,\r\n          ({ userID, orgID }) => `${userID}/${orgID}`,\r\n        );\r\n        const linkedUsers = await LinkedUsersEntity.findAll({\r\n          where: {\r\n            [Op.or]: uniqUserOrgIDs.map(({ userID, orgID }) => ({\r\n              sourceUserID: userID,\r\n              sourceOrgID: orgID,\r\n            })),\r\n          },\r\n        });\r\n\r\n        const index = new Map<string, LinkedUsersEntity>();\r\n        for (const linkedUser of linkedUsers) {\r\n          index.set(\r\n            keyFor({\r\n              userID: linkedUser.sourceUserID,\r\n              orgID: linkedUser.sourceOrgID,\r\n            }),\r\n            linkedUser,\r\n          );\r\n        }\r\n\r\n        return userOrgIDs.map(\r\n          (userOrgID) => index.get(keyFor(userOrgID)) ?? null,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n    this.loadPlatformUserFromLinkedDataloader = new DataLoader(\r\n      async (input) => {\r\n        const uniqCombinations = unique(\r\n          input,\r\n          ({ linkedUserID, linkedOrgID, sourceOrgID }) =>\r\n            `${linkedUserID}/${linkedOrgID}/${sourceOrgID}`,\r\n        );\r\n        const linkedUsers = await LinkedUsersEntity.findAll({\r\n          where: {\r\n            [Op.or]: uniqCombinations.map(\r\n              ({ linkedUserID, linkedOrgID, sourceOrgID }) => ({\r\n                linkedUserID,\r\n                linkedOrgID,\r\n                sourceOrgID,\r\n              }),\r\n            ),\r\n          },\r\n        });\r\n\r\n        const keyForLinkedUserLinkedOrgSourceOrg = ({\r\n          linkedUserID,\r\n          linkedOrgID,\r\n          sourceOrgID,\r\n        }: {\r\n          linkedUserID: UUID;\r\n          linkedOrgID: UUID;\r\n          sourceOrgID: UUID;\r\n        }) => `${linkedUserID}/${linkedOrgID}/${sourceOrgID}`;\r\n\r\n        const index = new Map<string, LinkedUsersEntity>();\r\n        for (const linkedUser of linkedUsers) {\r\n          index.set(\r\n            keyForLinkedUserLinkedOrgSourceOrg({\r\n              linkedUserID: linkedUser.linkedUserID,\r\n              linkedOrgID: linkedUser.linkedOrgID,\r\n              sourceOrgID: linkedUser.sourceOrgID,\r\n            }),\r\n            linkedUser,\r\n          );\r\n        }\r\n\r\n        return input.map(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          (input) =>\r\n            index.get(\r\n              keyForLinkedUserLinkedOrgSourceOrg({\r\n                linkedUserID: input.linkedUserID,\r\n                linkedOrgID: input.linkedOrgID,\r\n                sourceOrgID: input.sourceOrgID,\r\n              }),\r\n            ) ?? null,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.loadPlatformUserFromLinkedUserIDDataloader = new DataLoader(\r\n      async (input) => {\r\n        const uniqCombinations = unique(\r\n          input,\r\n          ({ linkedUserID, sourceOrgID }) => `${linkedUserID}/${sourceOrgID}`,\r\n        );\r\n\r\n        const linkedUsers = await LinkedUsersEntity.findAll({\r\n          where: {\r\n            [Op.or]: uniqCombinations.map(({ linkedUserID, sourceOrgID }) => ({\r\n              linkedUserID,\r\n              sourceOrgID,\r\n            })),\r\n          },\r\n        });\r\n\r\n        const keyForLinkedUserSourceOrg = ({\r\n          linkedUserID,\r\n          sourceOrgID,\r\n        }: {\r\n          linkedUserID: UUID;\r\n          sourceOrgID: UUID;\r\n        }) => `${linkedUserID}/${sourceOrgID}`;\r\n\r\n        const index = new Map<string, LinkedUsersEntity>();\r\n        for (const linkedUser of linkedUsers) {\r\n          index.set(\r\n            keyForLinkedUserSourceOrg({\r\n              linkedUserID: linkedUser.linkedUserID,\r\n              sourceOrgID: linkedUser.sourceOrgID,\r\n            }),\r\n            linkedUser,\r\n          );\r\n        }\r\n\r\n        const toReturn = input.map(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          (input) =>\r\n            index.get(\r\n              keyForLinkedUserSourceOrg({\r\n                linkedUserID: input.linkedUserID,\r\n                sourceOrgID: input.sourceOrgID,\r\n              }),\r\n            ) ?? null,\r\n        );\r\n\r\n        return toReturn;\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.loadLatestLinkedUserFromSourceAllOrgsDataloader = new DataLoader(\r\n      async (sourceUserIDs) => {\r\n        const uniqUserIDs = unique(sourceUserIDs);\r\n        const linkedUsers = await LinkedUsersEntity.findAll({\r\n          where: {\r\n            sourceUserID: uniqUserIDs,\r\n          },\r\n          order: [['linkedTimestamp', 'ASC']],\r\n        });\r\n\r\n        // Multiple linkings may be returned for each user but as the results are\r\n        // sorted by ascending timestamp, the final index should have the latest linking\r\n        const index = new Map<string, LinkedUsersEntity>();\r\n        for (const linkedUser of linkedUsers) {\r\n          index.set(linkedUser.sourceUserID, linkedUser);\r\n        }\r\n\r\n        return sourceUserIDs.map(\r\n          (sourceUserID) => index.get(sourceUserID) ?? null,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  // If we ever need to use this function, then its implementation needs to be\r\n  // fixed. The bug in the current implementation is that a single Slack user\r\n  // can be linked to multiple platform users. This can happen if EITHER within\r\n  // the same platform org multiple users decide to link with the same Slack\r\n  // user OR if multiple platform orgs link with the same Slack org.\r\n  loadConnectedUser_DEPRECATED(userID: UUID, orgID: UUID) {\r\n    return this.connectedUserDataloader.load({ userID, orgID });\r\n  }\r\n\r\n  async loadLinkedUserFromSourceOrgScoped(\r\n    sourceUserID: UUID,\r\n    sourceOrgID: UUID,\r\n  ): Promise<LinkedUsersEntity | null> {\r\n    return await this.loadLinkedUserFromSourceOrgScopedDataloader.load({\r\n      userID: sourceUserID,\r\n      orgID: sourceOrgID,\r\n    });\r\n  }\r\n\r\n  async loadLatestLinkedUserFromSourceAllOrgs(\r\n    sourceUserID: UUID,\r\n  ): Promise<LinkedUsersEntity | null> {\r\n    return await this.loadLatestLinkedUserFromSourceAllOrgsDataloader.load(\r\n      sourceUserID,\r\n    );\r\n  }\r\n\r\n  // find linking of a Slack user to a user in a known platform org\r\n  loadPlatformUserFromLinked({\r\n    linkedUserID,\r\n    linkedOrgID,\r\n    sourceOrgID,\r\n  }: {\r\n    linkedUserID: UUID;\r\n    linkedOrgID: UUID;\r\n    sourceOrgID: UUID;\r\n  }) {\r\n    return this.loadPlatformUserFromLinkedDataloader.load({\r\n      linkedUserID,\r\n      linkedOrgID,\r\n      sourceOrgID,\r\n    });\r\n  }\r\n\r\n  // find linking of a Slack user to a user in a known platform org (w/o passing\r\n  // slack org id too)\r\n  loadPlatformUserFromLinkedUserID({\r\n    linkedUserID,\r\n    sourceOrgID,\r\n  }: {\r\n    linkedUserID: UUID;\r\n    sourceOrgID: UUID;\r\n  }) {\r\n    return this.loadPlatformUserFromLinkedUserIDDataloader.load({\r\n      linkedUserID,\r\n      sourceOrgID,\r\n    });\r\n  }\r\n\r\n  static async loadConnectedUsers(userID: UUID, orgIDs: UUID[]) {\r\n    const links = await LinkedUsersEntity.findAll({\r\n      where: {\r\n        [Op.or]: [\r\n          { sourceUserID: userID, sourceOrgID: orgIDs },\r\n          { linkedUserID: userID, linkedOrgID: orgIDs },\r\n        ],\r\n      },\r\n    });\r\n    return links.map((link) =>\r\n      link.sourceUserID === userID\r\n        ? { userID: link.linkedUserID, orgID: link.linkedOrgID }\r\n        : { userID: link.sourceUserID, orgID: link.sourceOrgID },\r\n    );\r\n  }\r\n}\r\n", "import Pg from 'pg';\r\n\r\nimport { getReadReplicaDbConfigFromEnv } from 'server/src/util/readReplicaDatabase.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { MetricsEntry } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricMutator.ts';\r\nimport { ApplicationUsageMetricMutator } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricMutator.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { ApplicationUsageMetricTypeMutator } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricTypeMutator.ts';\r\nimport {\r\n  applicationUsageMetricsQueries,\r\n  isApplicationUsageMetricType,\r\n} from 'server/src/metrics/applicationUsageMetrics.ts';\r\nimport type { ApplicationUsageMetricType } from 'server/src/metrics/applicationUsageMetrics.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'applicationUsageMetrics',\r\n  applicationUsageMetricsJob,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'daily',\r\n  cron: '30 6 * * *', // At 6:30am UTC every day\r\n  data: {},\r\n});\r\n\r\ntype ApplicationUsageMetricsData = {\r\n  metrics?: string[];\r\n  days?: number;\r\n  overwriteDays?: number;\r\n};\r\n\r\ntype MetricDefinition = {\r\n  query: string;\r\n  bind?: any[];\r\n  days?: number;\r\n};\r\n\r\nasync function applicationUsageMetricsJob(\r\n  options: ApplicationUsageMetricsData,\r\n  logger: Logger,\r\n) {\r\n  // Make a connection to the read replica. We can make all the heavy queries on\r\n  // there, and then later use a separate connection to write the newly\r\n  // calculated metrics into the `application_usage_metrics` table.\r\n  const config = getReadReplicaDbConfigFromEnv(env);\r\n  const pg = new Pg.Client(config);\r\n  await pg.connect();\r\n  await pg.query('SET search_path=cord,public;');\r\n\r\n  // The SQL implementations of all queries are in\r\n  // `server/src/metrics/applicationUsageMetrics.ts`\r\n  const metricQueries = applicationUsageMetricsQueries();\r\n\r\n  // For each type of metric, calculate missing values and then persist them to\r\n  // the `application_usage_metrics` table\r\n  const metrics = options.metrics ?? Object.keys(metricQueries);\r\n  for (const metric of metrics) {\r\n    if (isApplicationUsageMetricType(metric)) {\r\n      await materialiseMetric(\r\n        pg,\r\n        logger,\r\n        metric,\r\n        metricQueries[metric],\r\n        options.days,\r\n        options.overwriteDays,\r\n      );\r\n    } else {\r\n      logger.warn(\r\n        'applicationUsageMetricsJob: invalid metric given in job data',\r\n        { metric },\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * For a given metric, calculate and store values currently missing in the\r\n * `application_usage_metrics` table\r\n *\r\n * This function expects and SQL query (in `definition.query`) that calculates\r\n * the metric. The query must produce 3 columns: `applicationID`, `date` and\r\n * `value`. To simplify the writing of the metrics queries, they do not need to\r\n * check which appID/date tuples are already present in the\r\n * `application_usage_metrics` type, or worry about date ranges. In fact, they\r\n * shouldn't reference the `application_usage_metrics` table at all. If executed\r\n * on their own, these queries would produce the metric for all applications and\r\n * all times.\r\n *\r\n * This function wraps the given query, so that only the currently missing data\r\n * is calculated. Also no metrics are produces for an application before its\r\n * creation date.\r\n *\r\n * If the query does not include a row for a specific applicationID/date\r\n * combination, it counts as a zero value. That also simplifies query writing:\r\n * e.g. the number of messages per day can be implemented as a simple query\r\n * grouping all messages by application id and day and using the count of\r\n * message rows as the value. That query will not list any appID/day\r\n * combinations for which no messages exist, and thus this function will regard\r\n * that as a zero value for that appID/day and persist that.\r\n *\r\n * @param pg a `PgClient` connected to the read-only database (in prod that is\r\n * the read replica of our Aurora cluster, in dev it's just your local Postgres)\r\n * @param metric name of the metric (`ApplicationUsageMetricType`)\r\n * @param definition object containing the SQL query to calculate the metric\r\n * (`query`), optionally any placeholder values (`bind`) and the number of days\r\n * going back for which this metric should be calculated (`days` - defaults to\r\n * 30)\r\n */\r\nasync function materialiseMetric(\r\n  pg: Pg.Client,\r\n  logger: Logger,\r\n  metric: ApplicationUsageMetricType,\r\n  definition: MetricDefinition,\r\n  days?: number,\r\n  overwriteDays?: number,\r\n) {\r\n  const { query } = definition;\r\n\r\n  const metricID = await new ApplicationUsageMetricTypeMutator(\r\n    Viewer.createServiceViewer(),\r\n  ).getOrCreateMetricID(metric);\r\n\r\n  // These are the placeholder values part of the query definition passed to\r\n  // this function.\r\n  const bind = definition.bind ? [...definition.bind] : [];\r\n\r\n  // We are adding three more placeholders: the value of `days` and\r\n  // `overwriteDays` and the id of the metric. (The placeholder to be used for\r\n  // `days` is `$1` if after adding `days` to the array the array length is 1,\r\n  // and so forth. And then the same for `overwriteDays`, `metricID`.)\r\n  bind.push(days ?? definition.days ?? 30);\r\n  const daysPlaceholder = `$${bind.length}`;\r\n  bind.push(overwriteDays ?? 2);\r\n  const overwriteDaysPlaceholder = `$${bind.length}`;\r\n  bind.push(metricID);\r\n  const metricIDPlaceholder = `$${bind.length}`;\r\n\r\n  // The given query is turned into one that gives us all the desired\r\n  // behaviours. For that, we construct a matric of all applicationID/day\r\n  // combinations, for *all* existing applications and the last `days` days\r\n  // (default 30). We join that matrix with the matching rows of the given query\r\n  // in order to add the `value` to it. If the given query is missing some rows\r\n  // from our matrix, we just treat those as zero values. We then join with the\r\n  // `application_usage_metrics` table, just so we can check which of the rows\r\n  // we have now are already present in that table.\r\n  //\r\n  // After all the joining, we filter out the appID/date combinations that are\r\n  // already present in the `application_usage_metrics` table for the given\r\n  // metric. And we also filter out any appID/date combinations where the date\r\n  // is earlier than the creation date of the application.\r\n  //\r\n  // This may sound complicated, but it gives us exactly the data that we need\r\n  // to write into the `application_usage_metrics` table. Postgres is good at\r\n  // figuring out how to execute the query, and takes into account heuristics\r\n  // and estimates of table sizes etc. Given that we are running this async job\r\n  // once a day, we usually only need to calculate the metric of the last day\r\n  // (because all previous days are already in the `application_usage_metrics`\r\n  // table). Postgres might well use this for optimising the query plan.\r\n  //\r\n  // Also, keep in mind that in prod this query is run against the read replica\r\n  // of our Aurora cluster. So we don't add any load to the main prod db\r\n  // instance. Once we have the results of this query, we will insert the data\r\n  // (talking to the write instance, obviously).\r\n  const wrappedQuery = `\\\r\n    WITH q AS (${query.trim()})\r\n    SELECT\r\n      a.id AS \"applicationID\",\r\n      d.date::text AS \"date\",\r\n      COALESCE(q.value, 0)::integer AS \"value\"\r\n    FROM applications a\r\n    CROSS JOIN (\r\n      SELECT CURRENT_DATE-generate_series(1,${daysPlaceholder}) AS \"date\"\r\n    ) d\r\n    LEFT OUTER JOIN q ON (q.\"applicationID\", q.\"date\")=(a.\"id\", d.\"date\")\r\n    LEFT OUTER JOIN application_usage_metrics exm\r\n    ON (exm.\"applicationID\", exm.\"metricID\", exm.\"date\")=\r\n      (a.\"id\", ${metricIDPlaceholder}, d.\"date\")\r\n    WHERE d.\"date\" >= a.\"createdTimestamp\"::date\r\n    AND (\r\n      exm IS NULL\r\n      OR d.\"date\" >= (CURRENT_DATE-${overwriteDaysPlaceholder}::integer)\r\n    );`;\r\n\r\n  const startTime = performance.now();\r\n  const { rows } = await pg\r\n    .query<MetricsEntry>(wrappedQuery, bind)\r\n    .finally(() => {\r\n      const endTime = performance.now();\r\n      logger.info('applicationUsageMetricsJob: materialiseMetric - query', {\r\n        metric,\r\n        query: wrappedQuery,\r\n        bind,\r\n        durationMS: endTime - startTime,\r\n      });\r\n    });\r\n\r\n  if (rows.length) {\r\n    logger.info('applicationUsageMetricsJob: materialiseMetric - write', {\r\n      metric,\r\n      rows: rows.length,\r\n    });\r\n    await new ApplicationUsageMetricMutator(\r\n      Viewer.createServiceViewer(),\r\n    ).writeMetrics(metricID, rows);\r\n  }\r\n}\r\n", "export type DatabaseConfig = {\r\n  database?: string;\r\n  host?: string;\r\n  password?: string;\r\n  port?: number;\r\n  user?: string;\r\n};\r\n\r\nexport function getReadReplicaDbConfigFromEnv(\r\n  env: Record<string, string | undefined>,\r\n): DatabaseConfig {\r\n  return {\r\n    host: env.POSTGRES_READ_HOST ?? env.POSTGRES_HOST,\r\n    port: Number(env.POSTGRES_READ_PORT ?? env.POSTGRES_PORT),\r\n    database: env.POSTGRES_DB,\r\n    user: env.POSTGRES_USER,\r\n    password: env.POSTGRES_PASSWORD,\r\n  };\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertServiceViewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport type MetricsEntry = { applicationID: UUID; date: string; value: number };\r\n\r\nexport class ApplicationUsageMetricMutator {\r\n  constructor(public readonly viewer: Viewer) {}\r\n\r\n  /**\r\n   * Persist a batch of application usage metrics.\r\n   *\r\n   * Overwrites any existing values.\r\n   *\r\n   * @param metricID the metric ID for all rows to be written\r\n   * @param data objects containing `applicationID`/`date`/`value` fields\r\n   */\r\n  async writeMetrics(metricID: UUID, data: MetricsEntry[]) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    await getSequelize().query(\r\n      `INSERT INTO\r\n       application_usage_metrics (\"metricID\", \"applicationID\", \"date\", \"value\")\r\n       SELECT $1, *\r\n       FROM unnest($2::uuid[], $3::date[], $4::integer[])\r\n       ON CONFLICT (\"metricID\", \"applicationID\", \"date\")\r\n       DO UPDATE SET value=EXCLUDED.value;`,\r\n      {\r\n        type: QueryTypes.INSERT,\r\n        bind: [\r\n          metricID,\r\n          data.map((d) => d.applicationID),\r\n          data.map((d) => d.date),\r\n          data.map((d) => d.value),\r\n        ],\r\n      },\r\n    );\r\n  }\r\n}\r\n", "import { Sequelize } from 'sequelize';\r\n\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertServiceViewer } from 'server/src/auth/index.ts';\r\nimport type { ApplicationUsageMetricType } from 'server/src/metrics/applicationUsageMetrics.ts';\r\nimport { ApplicationUsageMetricTypeEntity } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricTypeEntity.ts';\r\n\r\nexport class ApplicationUsageMetricTypeMutator {\r\n  constructor(public readonly viewer: Viewer) {}\r\n\r\n  async getOrCreateMetricID(metric: ApplicationUsageMetricType) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    const [entity] = await ApplicationUsageMetricTypeEntity.findOrCreate({\r\n      where: { metric },\r\n      defaults: { id: Sequelize.literal('DEFAULT') },\r\n    });\r\n\r\n    return entity.id;\r\n  }\r\n}\r\n", "/**\r\n * Names of all application usage metric types in use\r\n */\r\nexport const applicationUsageMetricTypes = [\r\n  'number_of_messages',\r\n  'users_sent_message',\r\n  'users_sent_message_7d',\r\n  'users_sent_message_28d',\r\n  'users_activated',\r\n  'users_activated_7d',\r\n  'users_activated_28d',\r\n  'users_exposed_to_cord',\r\n  'users_exposed_to_cord_7d',\r\n  'users_exposed_to_cord_28d',\r\n] as const;\r\n\r\nexport type ApplicationUsageMetricType =\r\n  (typeof applicationUsageMetricTypes)[number];\r\n\r\nexport function isApplicationUsageMetricType(\r\n  x: any,\r\n): x is ApplicationUsageMetricType {\r\n  return (\r\n    typeof x === 'string' && applicationUsageMetricTypes.includes(x as any)\r\n  );\r\n}\r\n\r\ninterface MetricQuery {\r\n  query: string;\r\n  bind?: any[];\r\n}\r\n\r\nexport const applicationUsageMetricsQueries = (): Record<\r\n  ApplicationUsageMetricType,\r\n  MetricQuery\r\n> => ({\r\n  number_of_messages: {\r\n    // Group all messages by application ID (via their orgID) and the date part\r\n    // of the timestamp and count the number of messages with each appID/date\r\n    // combination. That simply gives us the number of messages written per day\r\n    // in an application.\r\n    query: `\r\n        SELECT\r\n            o.\"platformApplicationID\" AS \"applicationID\",\r\n            metrics_day(m.timestamp) AS \"date\",\r\n            COUNT(m) AS \"value\"\r\n        FROM messages m\r\n        INNER JOIN orgs o ON m.\"orgID\"=o.id\r\n        WHERE o.\"platformApplicationID\" IS NOT NULL\r\n        GROUP BY 1, 2`,\r\n  },\r\n  users_sent_message: usersSentMessage(1),\r\n  users_sent_message_7d: usersSentMessage(7),\r\n  users_sent_message_28d: usersSentMessage(28),\r\n  users_activated: usersActivated(1),\r\n  users_activated_7d: usersActivated(7),\r\n  users_activated_28d: usersActivated(28),\r\n  users_exposed_to_cord: usersExposedToCord(1),\r\n  users_exposed_to_cord_7d: usersExposedToCord(7),\r\n  users_exposed_to_cord_28d: usersExposedToCord(28),\r\n});\r\n\r\nfunction usersSentMessage(windowDays: number): MetricQuery {\r\n  // Calculate the number of users who authored messages over a window of N\r\n  // (`windowDays`) days. This means, if N=1, it calculates the number of\r\n  // message sending users for the day of `date` itself. For N=7, the value\r\n  // corresponds to the number of unique active users on the day of `date` and\r\n  // the six days before.\r\n  //\r\n  // This is how the query works: first we construct a matrix of all messages\r\n  // and the numbers from 0 to N-1, and we call these numbers \"shift\". (So each\r\n  // message is represented N times in the matrix, with a shift value of 0 to\r\n  // N-1.) Then we add \"shift\" days to the message timestamp (we only take date\r\n  // portion of the timestamp). So we now have N rows for each message, the\r\n  // first having the date set to the day the message was written, and then\r\n  // additional rows with the date set to the following N-1 days.\r\n  //\r\n  // Now we group these messages by their application ID (via the orgs table),\r\n  // and their shifted dates. And for each appID/date combination we count the\r\n  // number of unique message authors. Done.\r\n  //\r\n  // What we then have, is for any given appID/date combination, the number of\r\n  // unique message authors of messages written on the given date, or the N-1\r\n  // days before (because those messages all get the shift to the given date).\r\n  return {\r\n    query: `\r\n      SELECT\r\n        o.\"platformApplicationID\" AS \"applicationID\",\r\n        metrics_day(m.timestamp) + s.shift AS \"date\",\r\n        COUNT(DISTINCT m.\"sourceID\") AS \"value\"\r\n      FROM (SELECT generate_series(0, $1-1) AS shift) s\r\n      CROSS JOIN messages m\r\n      INNER JOIN orgs o ON m.\"orgID\"=o.id\r\n      WHERE o.\"platformApplicationID\" IS NOT NULL\r\n      GROUP BY 1, 2`,\r\n    bind: [windowDays],\r\n  };\r\n}\r\n\r\nfunction usersActivated(windowDays: number): MetricQuery {\r\n  // Calculate the \"activated users\" metric.\r\n  //\r\n  // First, collect all actions that happened in threads. That's messages\r\n  // written or reactions made. The `thread_actions` subquery returns rows of\r\n  // thread ids, user/org ids and dates of when things happened.\r\n  //\r\n  // Next, collect when a user was first active in a thread. Just by grouping\r\n  // the previous results by thread/user/org and taking the earliest (minimum)\r\n  // date.\r\n  //\r\n  // Then, calculate when we consider that a thread has become active. That's\r\n  // when not the first but the second user did something in the thread. This is\r\n  // not about a precise time, but just the day it happened. We are calculating\r\n  // daily time series anyway, and also this means that when two users start and\r\n  // comment on a thread the same day, they both count as activated, because\r\n  // they both did something in a thread that is considered active on that day.\r\n  // Just to clarify: once a thread has become active, it stays active. Meaning\r\n  // that if on a later day a user writes/reacts in that thread, that user will\r\n  // be considered activated, because they interacted with the thread in which\r\n  // they are not alone. Even if nobody else was active in that thread on the\r\n  // same day. On the other hand, when one user starts a thread and a second\r\n  // user reacts or comments the next day, then the first user wasn't activated,\r\n  // but the second was when they commented.\r\n  //\r\n  // Finally, we count the number of unique users in an application that were\r\n  // activated on a given day, by collecting all the users that did something on\r\n  // that day in a thread that had been active on the day or previously.\r\n  //\r\n  // For getting weekly/monthly number we do the same shifting as in the\r\n  // `usersSentMessage` query above. So, say for the weekly metric, when a user\r\n  // does a thing in a thread, we now act as if they did that thing on the day\r\n  // they did it, and then they did it six more times on the following days. So,\r\n  // if A starts a new thread on day 1, and B reacts on day 3, then A and B are\r\n  // both activated on day 3. Also on day 4, 5, 6, 7. On day 8, 9, we only count\r\n  // B as activated, because only B has been active within the time window of\r\n  // one week.\r\n  return {\r\n    query: `\r\n      WITH thread_actions AS NOT MATERIALIZED (\r\n        SELECT DISTINCT\r\n          \"threadID\",\r\n          \"sourceID\" AS \"userID\",\r\n          \"orgID\",\r\n          metrics_day(timestamp) AS \"day\"\r\n        FROM messages\r\n        UNION\r\n        SELECT m.\"threadID\", mr.\"userID\", m.\"orgID\", metrics_day(mr.timestamp)\r\n        FROM message_reactions mr INNER JOIN messages m ON mr.\"messageID\"=m.id\r\n      ), thread_user_first_action AS NOT MATERIALIZED (\r\n        SELECT\r\n          \"threadID\", \"userID\", \"orgID\",\r\n          min(\"day\") AS \"day\"\r\n        FROM thread_actions GROUP BY 1, 2, 3\r\n      ), thread_becomes_active AS (\r\n        SELECT DISTINCT\r\n          \"threadID\",\r\n          nth_value(day, 2) OVER w AS day\r\n        FROM thread_user_first_action\r\n        WINDOW w AS (PARTITION BY \"threadID\" ORDER BY day ASC)\r\n      )\r\n      SELECT\r\n        o.\"platformApplicationID\" AS \"applicationID\",\r\n        ta.day + s.shift AS \"date\",\r\n        COUNT(DISTINCT ta.\"userID\") AS \"value\"\r\n      FROM (SELECT generate_series(0, $1-1) AS shift) s\r\n      CROSS JOIN thread_actions ta\r\n      INNER JOIN orgs o ON ta.\"orgID\"=o.id\r\n      INNER JOIN thread_becomes_active tba USING(\"threadID\")\r\n      WHERE o.\"platformApplicationID\" IS NOT NULL\r\n      AND ta.day >= tba.day\r\n      GROUP BY 1, 2`,\r\n    bind: [windowDays],\r\n  };\r\n}\r\n\r\nfunction usersExposedToCord(windowDays: number): MetricQuery {\r\n  // Calculate the number of unique users who have been exposed to ANY Cord component.\r\n  // The weekly and monthly numbers are calculated using the same shifting logic seen in\r\n  // `usersSentMessage`. If a user is exposed to a Cord component on one day then we also count\r\n  // it as them being exposed to it every day following that day depending on the time window we have chosen.\r\n  return {\r\n    query: `\r\n      SELECT\r\n        e.\"platformApplicationID\" AS \"applicationID\",\r\n        metrics_day(e.\"serverTimestamp\") + s.shift AS \"date\",\r\n        COUNT(DISTINCT e.\"userID\") AS \"value\"\r\n      FROM (SELECT generate_series(0, $1-1) AS shift) s\r\n      CROSS JOIN events e\r\n      WHERE e.\"platformApplicationID\" IS NOT NULL\r\n      AND e.type = 'sdk-components-used'\r\n      GROUP BY 1,2`,\r\n    bind: [windowDays],\r\n  };\r\n}\r\n", "import type PgBoss from 'pg-boss';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\n\r\nimport type {\r\n  EmptyJsonObject,\r\n  JsonObject,\r\n  JsonValue,\r\n} from 'common/types/index.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\ntype JobOptions = {\r\n  concurrency: number;\r\n};\r\n\r\n// No particular reason for this value other than it felt right, and empirically\r\n// when we hotfixed the initial concurrency change during an incident with the\r\n// async tier it fixed things, so it's at least not a terrible value.\r\nconst DEFAULT_CONCURRENCY = 25;\r\n\r\nexport class AsyncTierJobDefinition<\r\n  N extends string,\r\n  D extends JsonObject | undefined = EmptyJsonObject,\r\n> {\r\n  public readonly schedules: AsyncJobSchedule<D>[] = [];\r\n\r\n  constructor(\r\n    public readonly name: N,\r\n    public readonly func: (\r\n      data: D,\r\n      logger: Logger,\r\n    ) => Promise<JsonValue | void>,\r\n    public readonly opts: JobOptions = { concurrency: DEFAULT_CONCURRENCY },\r\n  ) {}\r\n\r\n  schedule(schedule: AsyncJobSchedule<D>) {\r\n    this.schedules.push(schedule);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Register this job and their schedules with pgboss\r\n   *\r\n   * @param boss The pgboss insance to use\r\n   * @param tier Name of the tier we're running in ('prod', 'staging', 'dev')\r\n   * @param existingSchedulesByName an object mapping schedule names to\r\n   * `PgBoss.Schedule` object. These are the schedules present in the database.\r\n   */\r\n  async register(\r\n    boss: PgBoss,\r\n    tier: string,\r\n    existingSchedulesByName: Map<string, PgBoss.Schedule>,\r\n  ) {\r\n    const handler = async (data: D, logger: Logger) =>\r\n      await this.func(data, logger);\r\n\r\n    const wrappedHandler = (\r\n      job: PgBoss.JobWithDoneCallback<D, JsonValue | void>,\r\n    ) => {\r\n      const logger = new Logger(Viewer.createAnonymousViewer(), {\r\n        job: {\r\n          id: job.id,\r\n          name: job.name,\r\n          data: job.data,\r\n        },\r\n      });\r\n      logger.debug(`Starting job '${job.name}':${job.id}`);\r\n\r\n      handler(job.data, logger).then(\r\n        (result) => {\r\n          job.done(null, result);\r\n          logger.debug(`Completed job '${job.name}':${job.id}`);\r\n        },\r\n        (err) => {\r\n          try {\r\n            logger.logException(\r\n              `Exception thrown by job '${job.name}':${job.id} : ${err}`,\r\n              err,\r\n            );\r\n          } catch {\r\n            // If our attempt to log fails, there's not much we can do.  But we\r\n            // catch any exception here so that the following `job.done` is\r\n            // guaranteed to run.\r\n          }\r\n\r\n          job.done(err);\r\n        },\r\n      );\r\n    };\r\n\r\n    const bossOpts =\r\n      this.opts.concurrency > 1\r\n        ? {\r\n            teamSize: this.opts.concurrency,\r\n            teamConcurrency: this.opts.concurrency,\r\n            teamRefill: true,\r\n          }\r\n        : {};\r\n    await boss.work(this.name, bossOpts, wrappedHandler);\r\n\r\n    for (const schedule of this.schedules) {\r\n      if (schedule.tier === 'all' || schedule.tier === tier) {\r\n        const scheduledJobName = `schedule:${this.name}:${schedule.name}`;\r\n\r\n        const existingSchedule = existingSchedulesByName.get(scheduledJobName);\r\n        if (existingSchedule) {\r\n          existingSchedulesByName.delete(scheduledJobName);\r\n        }\r\n\r\n        const existingScheduleUpToDate =\r\n          existingSchedule &&\r\n          existingSchedule.cron === schedule.cron &&\r\n          isEqual(existingSchedule.data, schedule.data);\r\n\r\n        if (!existingScheduleUpToDate) {\r\n          if (existingSchedule) {\r\n            await boss.unschedule(scheduledJobName);\r\n          }\r\n\r\n          await boss.schedule(scheduledJobName, schedule.cron, schedule.data, {\r\n            tz: 'UTC',\r\n          });\r\n        }\r\n\r\n        await boss.work(scheduledJobName, wrappedHandler);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type AsyncJobSchedule<D extends JsonObject | undefined> = {\r\n  readonly tier: 'prod' | 'staging' | 'loadtest' | 'all';\r\n  readonly name: string;\r\n  readonly cron: string;\r\n  readonly data: D;\r\n};\r\n", "import type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'asyncWorkerHealthCheck',\r\n  asyncWorkerHealthCheck,\r\n).schedule({\r\n  tier: 'all',\r\n  name: 'everyOtherMinute',\r\n  cron: '*/2 * * * *', // At every 2nd minute https://crontab.guru/#*/2_*_*_*_*\r\n  data: {},\r\n});\r\n\r\nasync function asyncWorkerHealthCheck(_: EmptyJsonObject, logger: Logger) {\r\n  try {\r\n    // Just try to read from any table, notify us if that fails\r\n    await getSequelize().query('SELECT 1;');\r\n  } catch (e) {\r\n    logger.logException('PgBoss health check failed to read table', e);\r\n  }\r\n\r\n  try {\r\n    await publishPubSubEvent('pub-sub-health-check', null);\r\n  } catch (e) {\r\n    logger.logException('PgBoss health check failed to publish to pubsub', e);\r\n  }\r\n}\r\n", "import { GetCredentialReportCommand, IAMClient } from '@aws-sdk/client-iam';\r\nimport { AWS_REGION } from 'ops/aws/src/radical-stack/Config.ts';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nconst DAYS_MS = 24 * 60 * 60 * 1000;\r\n// Vanta agent alerts us when keys are >89 days old.\r\n// We want to be notified earlier.\r\nconst MAX_PW_AGE_MS = 79 * DAYS_MS;\r\nconst MAX_ACCESS_KEY_AGE_MS = 79 * DAYS_MS;\r\nconst MAX_CREDENTIALS_REPORT_AGE_MS = 7 * DAYS_MS;\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'awsCredentialsCheck',\r\n  checkAWSCredentials,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'daily',\r\n  cron: '0 10 * * 1-5', // \u201CEveryday at 10:00, excluding Sat/Sun\u201D\r\n  data: {},\r\n});\r\n\r\n/**\r\n * Automatically check credentials to comply with SOC II requirements.\r\n */\r\nasync function checkAWSCredentials(_: EmptyJsonObject, logger: Logger) {\r\n  const result = await new IAMClient({ region: AWS_REGION }).send(\r\n    new GetCredentialReportCommand({}),\r\n  );\r\n\r\n  if (!result || !result.Content) {\r\n    logger.error(`No result for AWS Credentials report`);\r\n    return;\r\n  }\r\n\r\n  const { default: neatCsv } = await import('neat-csv');\r\n  const { Content: csvContent, GeneratedTime } = result;\r\n  const csv: { [K in (typeof HEADERS)[number]]: string }[] = await neatCsv(\r\n    Buffer.from(csvContent.buffer),\r\n  );\r\n\r\n  if (csv) {\r\n    const today = new Date().getTime();\r\n\r\n    const usersWithoutMFA = [];\r\n    const usersWithAccessKeyTooOld = [];\r\n    const usersWithPwTooOld = [];\r\n    for (const data of csv) {\r\n      const {\r\n        user,\r\n        password_enabled,\r\n        password_last_changed,\r\n        mfa_active,\r\n        access_key_1_active,\r\n        access_key_2_active,\r\n        access_key_1_last_rotated,\r\n        access_key_2_last_rotated,\r\n      } = data;\r\n\r\n      if (password_enabled !== 'true') {\r\n        continue;\r\n      }\r\n\r\n      const passwordTooOld =\r\n        password_last_changed !== 'n/a' &&\r\n        today - new Date(password_last_changed).getTime() > MAX_PW_AGE_MS;\r\n      if (passwordTooOld) {\r\n        usersWithPwTooOld.push(user);\r\n      }\r\n\r\n      if (mfa_active !== 'true') {\r\n        usersWithoutMFA.push(user);\r\n      }\r\n\r\n      const noAccessKey =\r\n        access_key_1_active !== 'true' && access_key_2_active !== 'true';\r\n      if (noAccessKey) {\r\n        continue;\r\n      }\r\n\r\n      const activeAccessKeyTooOld =\r\n        isAccessKeyTooOld(\r\n          access_key_1_active,\r\n          access_key_1_last_rotated,\r\n          today,\r\n        ) ||\r\n        isAccessKeyTooOld(\r\n          access_key_2_active,\r\n          access_key_2_last_rotated,\r\n          today,\r\n        );\r\n      if (activeAccessKeyTooOld) {\r\n        usersWithAccessKeyTooOld.push(user);\r\n      }\r\n    }\r\n\r\n    if (!env.CORD_SECURITY_SLACK_CHANNEL_ID) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      GeneratedTime &&\r\n      today - GeneratedTime.getTime() > MAX_CREDENTIALS_REPORT_AGE_MS\r\n    ) {\r\n      backgroundPromise(\r\n        sendMessageToCord(\r\n          `AWS Credentials Report is too old. Is \"generateAWSCredentials\" async job running correctly?`,\r\n          env.CORD_SECURITY_SLACK_CHANNEL_ID,\r\n          'security',\r\n        ),\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (\r\n      usersWithAccessKeyTooOld.length ||\r\n      usersWithoutMFA.length ||\r\n      usersWithPwTooOld.length\r\n    ) {\r\n      let msg = `AWS Credentials Report ${\r\n        GeneratedTime ? `(Generated ${GeneratedTime.toUTCString()})` : ''\r\n      } :\\n`;\r\n      if (usersWithoutMFA.length) {\r\n        msg += `\\nUsers that must turn on MFA: ${usersWithoutMFA.join(',')}\\n`;\r\n        msg +=\r\n          'To turn on MFA, log into the AWS console and visit \"Security Credentials\" in the top right menu\\n';\r\n      }\r\n      if (usersWithPwTooOld.length) {\r\n        msg += `\\nUsers that must rotate their password: ${usersWithPwTooOld.join(\r\n          ',',\r\n        )}\\n`;\r\n        msg +=\r\n          'To rotate your password, log into the AWS console and visit \"Security Credentials\" in the top right menu\\n';\r\n      }\r\n      if (usersWithAccessKeyTooOld.length) {\r\n        msg += `\\nUsers that must rotate access key: ${usersWithAccessKeyTooOld.join(\r\n          ',',\r\n        )}`;\r\n        msg +=\r\n          '\\nTo rotate your key, you can run `./scripts/rotate-aws-access-key.sh`';\r\n      }\r\n      backgroundPromise(\r\n        sendMessageToCord(msg, env.CORD_SECURITY_SLACK_CHANNEL_ID, 'security'),\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction isAccessKeyTooOld(\r\n  accessKeyActive: string,\r\n  accessKeyLastRotated: string,\r\n  today: number,\r\n) {\r\n  return (\r\n    accessKeyActive === 'true' &&\r\n    accessKeyLastRotated !== 'n/a' &&\r\n    today - new Date(accessKeyLastRotated).getTime() > MAX_ACCESS_KEY_AGE_MS\r\n  );\r\n}\r\n\r\nconst HEADERS = [\r\n  'user',\r\n  'arn',\r\n  'user_creation_time',\r\n  'password_enabled',\r\n  'password_last_used',\r\n  'password_last_changed',\r\n  'password_next_rotation',\r\n  'mfa_active',\r\n  'access_key_1_active',\r\n  'access_key_1_last_rotated',\r\n  'access_key_1_last_used_date',\r\n  'access_key_1_last_used_region',\r\n  'access_key_1_last_used_service',\r\n  'access_key_2_active',\r\n  'access_key_2_last_rotated',\r\n  'access_key_2_last_used_date',\r\n  'access_key_2_last_used_region',\r\n  'access_key_2_last_used_service',\r\n  'cert_1_active',\r\n  'cert_1_last_rotated',\r\n  'cert_2_active',\r\n  'cert_2_last_rotated',\r\n] as const;\r\n", "import type { Tier } from 'ops/aws/src/common.ts';\r\n\r\n// AWS Environment values\r\nexport const AWS_REGION = 'eu-west-2';\r\n\r\n// Default resource owner, used for tagging resources with tags that Vanta reads\r\nexport const DEFAULT_OWNER = 'dmmiller@cord.com';\r\n\r\n// all the domains under which we serve the product\r\nexport const CORD_COM_DOMAINS = [\r\n  'cord.com',\r\n  'getradical.co',\r\n  'cord.so',\r\n  'cord.fyi',\r\n];\r\n\r\n// Web site domain name\r\nexport const WEB_SITE_DOMAIN = 'cord.com';\r\n\r\n// domains for which we set up gmail\r\nexport const GMAIL_DOMAINS = ['cord.com', 'cord.so', 'getradical.co'];\r\n\r\n// Domain TXT records, for Google site verification and such things\r\nexport const TXT_RECORDS = {\r\n  'getradical.co': [\r\n    'google-site-verification=BtgOe3c6_AitAdNHNDU-2dedVumtkfO5OAHpnUNrEyM',\r\n  ],\r\n  'cord.com': [\r\n    'google-site-verification=o0E3i6wuU7HmxGIf_D7jLS089pFF7l19xfj8OebZ8ds',\r\n    'google-site-verification=33uewWcG3InRmPHAs8TUHCjGTHZonvQzd7MxjPZSaEo',\r\n    'OSSRH-82140',\r\n    'ahrefs-site-verification_4b6190ed0dbc98695c8737c1ad9070106203ccfca7f7cd1f309a73010d2cf744',\r\n  ],\r\n  'cord.so': [\r\n    'google-site-verification=gjiL3OQHqmQnYx7KyujYpX29mEvyyxnCwfRfIMwr1cQ',\r\n  ],\r\n};\r\n\r\n// Domain keys for DKIM\r\nexport const DOMAIN_KEYS = {\r\n  'getradical.co': {\r\n    // google = Google (our email)\r\n    google:\r\n      'v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9UaUXI2l/R6DevMnY5lLzBGSmaK3sS5l1TGNMTu/oSlPTEaNJyiDt3b3zNrmoqWpMziPL6O5WwAG+l8CowD7gAnvjHujrIcPyP+EQ2k7+wh2pHk7prgITmTurljQKi2VedEfbRyT4u7UFctazXU0k4axUZGIjiQwrEAWR4ubgg9KEhZrFWPszOKeHTUsF9KahoasIJoPFfDS1FAiDYJcMDXAKg+4RjKM9aH42ADHht/gx98oQe4uwtJuCmfo/IvS5txTdRZMBeQ8Aip4jRRzqzdJVTTzsCE6eOnlsHyIpfWVtHK8uO41Est2s76EhpikVGt3NMRdsbHiJNgVYmmaCwIDAQAB',\r\n  },\r\n  'cord.com': {\r\n    // google = Google (our email)\r\n    google:\r\n      'v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiwzgkiUn2tEnh417+3ate4MfoK72XsUU2PKXAyQ8BOzmb3AcpnrYcyafFLWGxSZfFvai3F2PcRGe02JWDq2+x7YlS/JICm6vyyofM/F1qu1/YZv2+7xNyDEx0R2ccQGgOXrczX2ecWu7aHnCRWgQB0UtKE/78OYXEvoKeSQnFjmeY2v4KGu1W35gQ9o7Y44jNJrXKrsPTV+iIwuoaqh/F2zsDBgt0izEiiQcSaNJyXx3RKinQDhlKMTCR9gM4yQ4Zmi+S+M4BrZZ6WZD0P1sBiO5vfs4k7zCwWr2c+MLYwPIexw12T6socOtqcAjoHLkZ3gYHCGzNIz3Ct6aM/is4wIDAQAB',\r\n  },\r\n  'cord.so': {\r\n    // google = Google (our email)\r\n    // random strings: ...amazonses.com = Loops (marketing)\r\n    google:\r\n      'v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn/NFJgjIFscAVGv8jbgDL0wr+Dh3nJxKAyxy31FyhEzUIJYwEtR9KyQXWeAO7D/sCEQ7dA+Dqum6kuiLc/OSFg4vu8bkYkQb0Vw5+2eQbTKoh/DQ5ju8Txiudd0r0SzQGx7YWzmJcfLPe1Jqa4AaYraZRCLyRDbfdg9bhOxaLJ+aUbX7xZVPEL35RfkW2Stlf3Ny7rl25bHRPFUnJQJflOkldXLZyRknXGP3s6eCXoAH84WVNr5XjPbUEUFwS9/TbDj7QKcQIcAPwRPH8/4arvw2j8nSzZHpVidIVyPO+J8ToUnRia33JT6uvqgsE3jBEQTSJyFOGNXiJ8eu8G/SZQIDAQAB',\r\n    gw7lwwllla3tk33rzzpi4pkk7b7vzw65:\r\n      'CNAME:gw7lwwllla3tk33rzzpi4pkk7b7vzw65.dkim.amazonses.com.',\r\n    jgxjf2ny7ruwqsflekpn27zft64maxn7:\r\n      'CNAME:jgxjf2ny7ruwqsflekpn27zft64maxn7.dkim.amazonses.com.',\r\n    wwmfgpjwizpjhbulmahzlx65e22z6oko:\r\n      'CNAME:wwmfgpjwizpjhbulmahzlx65e22z6oko.dkim.amazonses.com.',\r\n  },\r\n  'cord.fyi': {\r\n    // s1, s2 = Sendgrid (product notifications)\r\n    s1: 'CNAME:s1.domainkey.u16847044.wl045.sendgrid.net',\r\n    s2: 'CNAME:s2.domainkey.u16847044.wl045.sendgrid.net',\r\n  },\r\n};\r\n\r\ntype SpfType = Record<string, string | Record<string, string> | undefined> & {\r\n  default: string;\r\n};\r\n\r\n// SPF records\r\nexport const SPF_RECORDS: SpfType = {\r\n  // _spf.google.com = Google (our email)\r\n  // amazonses.com = Loops (marketing)\r\n  // sendgrid.net = Sendgrid (product notifications)\r\n  default: 'v=spf1 include:_spf.google.com ~all',\r\n  'cord.com': 'v=spf1 include:_spf.google.com ~all',\r\n  'cord.so': {\r\n    '@': 'v=spf1 include:_spf.google.com ~all',\r\n    envelope: 'v=spf1 include:amazonses.com ~all',\r\n  },\r\n  'cord.fyi': 'v=spf1 include:sendgrid.net -all',\r\n};\r\n\r\n// CI/CD values\r\nexport const ECR_EXTERNAL_REPO_NAME = 'external';\r\nexport const ECR_SERVER_REPO_NAME = 'server';\r\nexport const ECR_ASYNC_WORKER_REPO_NAME = 'asyncworker';\r\nexport const ECR_ONCALL_REPO_NAME = 'oncall';\r\n\r\nexport const SLACK_OAUTH_STATE_SIGNING_SECRET = 'SlackOauthStateSigningSecret';\r\nexport const SLACK_OAUTH_STATE_SIGNING_KEY_REF_NAME =\r\n  'SlackOauthStateSigningSecretKey';\r\n\r\nexport const SENDGRID_INBOUND_WEBHOOK_SECRET = 'SendgridInboundWebhookSecret';\r\nexport const SENDGRID_INBOUND_WEBHOOK_SECRET_KEY_REF_NAME =\r\n  'SendgridInboundWebhookSecretKey';\r\n\r\nexport const WEB_SITE_CLOUDFRONT_DISTRIBUTION_ID = 'EOTEMRMTAGZBT';\r\nexport const WEB_SITE_CLOUDFRONT_DOMAIN_NAME = 'd21qsemrrrnblt.cloudfront.net';\r\n\r\nexport const CORD_COM_WILDCARD_CERTIFICATE_US_EAST_1 =\r\n  'arn:aws:acm:us-east-1:869934154475:certificate/179f1ac1-4c87-429c-87fd-e3b9a2af4f0b';\r\nexport const STAGING_CORD_COM_WILDCARD_CERTIFICATE_US_EAST_1 =\r\n  'arn:aws:acm:us-east-1:869934154475:certificate/6247511e-1ff8-4ca4-a008-b17cb7c1346b';\r\nexport const LOADTEST_CORD_COM_WILDCARD_CERTIFICATE_US_EAST_1 =\r\n  'arn:aws:acm:us-east-1:869934154475:certificate/793e84be-608a-4e54-bdee-efadbc068510';\r\n\r\ntype ScalingConstraints = {\r\n  minCapacity: number;\r\n  maxCapacity: number;\r\n};\r\nexport const SERVER_AUTOSCALING_CAPACITY: {\r\n  [k in Tier]: ScalingConstraints;\r\n} = {\r\n  prod: {\r\n    minCapacity: 6,\r\n    maxCapacity: 12,\r\n  },\r\n  staging: {\r\n    minCapacity: 2,\r\n    maxCapacity: 4,\r\n  },\r\n  loadtest: {\r\n    minCapacity: 4,\r\n    maxCapacity: 4,\r\n  },\r\n};\r\n", "import * as url from 'url';\r\nimport type { KnownBlock } from '@slack/web-api';\r\nimport { v4 as uuid } from 'uuid';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { Op } from 'sequelize';\r\nimport env from 'server/src/config/Env.ts';\r\n\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ThreadMirrorType,\r\n  FileAttachmentInput,\r\n} from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\n\r\nimport type { FileUploadStatus } from 'server/src/schema/resolverTypes.ts';\r\n\r\nimport {\r\n  Viewer,\r\n  AuthProviderType,\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n} from 'server/src/auth/index.ts';\r\nimport {\r\n  ADMIN_ORIGIN,\r\n  ADMIN_SERVER_HOST,\r\n  APP_ORIGIN,\r\n} from 'common/const/Urls.ts';\r\nimport {\r\n  CLACK_APPLICATION_ID,\r\n  CORD_SLACK_TEAM_ID,\r\n  RADICAL_ORG_ID,\r\n  SLACK_ADMIN_LOGIN_APP_CLIENT_ID,\r\n} from 'common/const/Ids.ts';\r\nimport {\r\n  userDisplayName,\r\n  loadLinkedSlackUserOrgScoped,\r\n  detailsForDisplay,\r\n} from 'server/src/entity/user/util.ts';\r\nimport { validateFileForUpload } from 'common/uploads/index.ts';\r\nimport { isInlineDisplayableImage } from '@cord-sdk/react/common/lib/uploads.ts';\r\n\r\nimport {\r\n  sendChannelMessage,\r\n  sendHelpMessage,\r\n  sendPrivateMessage,\r\n} from 'server/src/slack/api.ts';\r\nimport type { SlackBotUserAuthData } from 'server/src/slack/types.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { getSignedUploadURL } from 'server/src/files/upload.ts';\r\nimport { UserMutator } from 'server/src/entity/user/UserMutator.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { SlackUser } from 'server/src/slack/api.ts';\r\n\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport {\r\n  slackMrkdwnFromMessageContent,\r\n  mrkdwnEscapeText,\r\n} from 'server/src/slack/mrkdwn.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\nimport { SlackMessageLoader } from 'server/src/entity/slack_message/SlackMessageLoader.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { FileLoader } from 'server/src/entity/file/FileLoader.ts';\r\nimport { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { structuredMessageFromSlackMessage } from 'server/src/slack/message.ts';\r\nimport {\r\n  publishPubSubEvent,\r\n  publishUserIdentityUpdate,\r\n} from 'server/src/pubsub/index.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { MessageAttachmentLoader } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport { ADMIN_LOGIN_SLACK_REDIRECT_URL } from 'server/src/admin/routes/SlackLoginHandler.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { SlackMirroredThreadLoader } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadLoader.ts';\r\nimport { SlackMessageMutator } from 'server/src/entity/slack_message/SlackMessageMutator.ts';\r\nimport { SlackMirroredThreadMutator } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadMutator.ts';\r\nimport {\r\n  flagsUserFromContext,\r\n  getFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport { findSlackUserEmailMatch } from 'server/src/util/findSlackUserEmailMatch.ts';\r\nimport { withSlackMirroredThreadLock } from 'server/src/util/locks.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { getBadgedImageURL } from 'server/src/image_processing/badge.ts';\r\nimport { getResizedImageURL } from 'server/src/image_processing/resizeOnly.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport { FeatureFlag } from 'common/const/UserPreferenceKeys.ts';\r\nimport { injectDeeplinkQueryParamsV1 } from 'server/src/deep_link_threads/index.ts';\r\nimport { generateOutboundNotificationLoggingURL } from 'server/src/notifications/outbound/logging.ts';\r\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\r\nimport { supportStatusButton } from 'server/src/util/interactiveSupportButton.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { executeNewMessageCreationTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { createThreadMessage } from 'server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts';\r\nimport { forceExternalizeContent } from 'server/src/public/routes/platform/messages/util.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nconst addMessageToCorrectCordThreadCounter = Counter({\r\n  name: 'AddMessageToCorrectCordThread',\r\n  help: 'Slack messages added to a cord thread',\r\n  labelNames: ['channelType', 'isReply', 'hasAttachments'],\r\n});\r\n\r\nasync function findSlackUserID(\r\n  context: RequestContext,\r\n  userID: UUID,\r\n): Promise<string | null> {\r\n  // Find the external slack id, if it's a slack user or a platform user\r\n  // explicitly linked to a slack user.  Because this is for notifications, any\r\n  // linking should also be org-scoped (if it is a platform user linked to multiple\r\n  // Slack users, it will find the slack user from the org which is linked to the\r\n  // current platform org)\r\n  const originalOrLinkedUser =\r\n    await context.loaders.userLoader.loadSlackUserForUserOrgScoped(\r\n      context,\r\n      userID,\r\n    );\r\n\r\n  if (originalOrLinkedUser) {\r\n    return originalOrLinkedUser.externalID;\r\n  }\r\n\r\n  const orgID = context.session.viewer.orgID;\r\n  if (!orgID) {\r\n    return null;\r\n  }\r\n\r\n  // No explicitly linked Slack profile was found... but there may be an email\r\n  // matched profile\r\n\r\n  const org = await context.loaders.orgLoader.loadOrg(orgID);\r\n  const user = await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n\r\n  if (!org || !user) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    (await findSlackUserEmailMatch(context, org, user))?.externalID ?? null\r\n  );\r\n}\r\n\r\n// find the Slack bot credentials either in the viewer's org, or in the Slack\r\n// org that might be linked to viewer's org\r\nexport interface SlackBotCredentials extends SlackBotUserAuthData {\r\n  org: OrgEntity;\r\n}\r\nexport async function findSlackBotCredentials(\r\n  context: RequestContext,\r\n): Promise<SlackBotCredentials | null> {\r\n  const { orgID } = context.session.viewer;\r\n  if (!orgID) {\r\n    // If this is a user without an org, we should never be able to reach this code,\r\n    // but for correctness, this check exists.\r\n    return null;\r\n  }\r\n  const org = await context.loaders.orgLoader.loadOrg(orgID);\r\n  if (!org) {\r\n    throw new Error('Could not find org with ID ' + orgID);\r\n  }\r\n\r\n  return await org.getSlackBotCredentials();\r\n}\r\n\r\nasync function sendSlackNotification({\r\n  context,\r\n  senderUserID,\r\n  senderOrgID,\r\n  slackBotCredentials,\r\n  targetSlackUserID,\r\n  notificationTextBlocks,\r\n  messageBlocks,\r\n  messageID,\r\n}: {\r\n  context: RequestContext;\r\n  senderUserID: UUID;\r\n  senderOrgID: UUID;\r\n  slackBotCredentials: SlackBotCredentials;\r\n  targetSlackUserID: string;\r\n  notificationTextBlocks: string[];\r\n  messageBlocks: KnownBlock[];\r\n  messageID: string;\r\n}) {\r\n  const { username, iconURL } = await getUserAndAttributionForUser(\r\n    context,\r\n    senderUserID,\r\n    senderOrgID,\r\n  );\r\n\r\n  const notificationText = notificationTextBlocks\r\n    .filter((text) => !!text)\r\n    .join(' ');\r\n\r\n  const result = await sendPrivateMessage(\r\n    slackBotCredentials.bot_access_token,\r\n    targetSlackUserID,\r\n    notificationText,\r\n    messageBlocks,\r\n    username,\r\n    iconURL,\r\n  );\r\n\r\n  if (!result) {\r\n    return false;\r\n  }\r\n\r\n  const success = await SlackMessageEntity.create({\r\n    slackOrgID: slackBotCredentials.org.id,\r\n    slackChannelID: result.channelID,\r\n    slackMessageTimestamp: result.timestamp,\r\n    messageID,\r\n    sharerOrgID: senderOrgID,\r\n    sharerUserID: senderUserID,\r\n  });\r\n\r\n  if (!success) {\r\n    context.logger.warn('Failed call to SlackMessageEntity.create', {\r\n      messageID,\r\n      orgID: senderOrgID,\r\n      userID: senderUserID,\r\n      slackChannelId: result.channelID,\r\n      slackTimestamp: result.timestamp,\r\n    });\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function sendSlackMentionNotification({\r\n  actionText,\r\n  allImageURLs,\r\n  context,\r\n  messageContent,\r\n  messageID,\r\n  pageName,\r\n  providerName,\r\n  senderName,\r\n  senderOrgID,\r\n  senderUserID,\r\n  targetUserID,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  url,\r\n  annotationsHighlightedText,\r\n}: {\r\n  context: RequestContext;\r\n  senderUserID: UUID;\r\n  senderOrgID: UUID;\r\n  senderName: string;\r\n  targetUserID: UUID;\r\n  messageID: UUID;\r\n  url: string | null;\r\n  pageName: string | null | undefined;\r\n  providerName: string | undefined;\r\n  messageContent: MessageContent;\r\n  allImageURLs: string[];\r\n  actionText: string;\r\n  annotationsHighlightedText: string[];\r\n}): Promise<boolean> {\r\n  const [senderSlackUserID, targetSlackUserID] = await Promise.all([\r\n    findSlackUserID(context, senderUserID),\r\n    findSlackUserID(context, targetUserID),\r\n  ]);\r\n  if (!targetSlackUserID) {\r\n    return false;\r\n  }\r\n\r\n  const slackBotCredentials = await findSlackBotCredentials(context);\r\n  if (!slackBotCredentials) {\r\n    return false;\r\n  }\r\n\r\n  const messageAsMrkdwn: string = await slackMrkdwnFromMessageContent(\r\n    messageContent,\r\n    (userID: UUID) => findSlackUserID(context, userID),\r\n  );\r\n\r\n  const messageBlocks: KnownBlock[] = [];\r\n\r\n  // 1. if the receiving user is active:\r\n  // [Name] mentioned you on [page name](url)\r\n  // > [message]\r\n\r\n  // 2. if the receiving user is inactive:\r\n  // [Name] mentioned you in [SaaS tool] [with attachments] using Cord \u2013 the way your team collaborates in context.\r\n  // > [message]\r\n  // Don't leave 'em hanging, join the conversation.\r\n\r\n  // 3. If a Typeform user mentioned a Slack user and that Slack user has not\r\n  // previously used Cord or has been mentioned, then we attach extra explainer\r\n  // text.\r\n\r\n  // See https://api.slack.com/block-kit for documentation\r\n\r\n  const userName = senderSlackUserID ? `<@${senderSlackUserID}>` : senderName;\r\n\r\n  const headerPrefix = `${userName} ${actionText}`;\r\n\r\n  const pageNameTextWithURL = pageName\r\n    ? url\r\n      ? `on <${url}|${mrkdwnEscapeText(pageName)}>`\r\n      : `on ${mrkdwnEscapeText(pageName)}`\r\n    : url\r\n    ? `on <${url}>`\r\n    : '';\r\n\r\n  const pageNameText = pageName ? `on ${pageName}` : '';\r\n\r\n  const providerText = providerName ? `in ${providerName}:` : '';\r\n\r\n  const messageHeaderText = [\r\n    headerPrefix, // [name] mentioned you\r\n    pageNameTextWithURL, // on [channel name](url)\r\n    providerText, // in [tool]\r\n  ]\r\n    .filter((text) => !!text)\r\n    .join(' ');\r\n\r\n  messageBlocks.push({\r\n    type: 'section',\r\n    text: { type: 'mrkdwn', text: messageHeaderText },\r\n  });\r\n\r\n  messageBlocks.push({\r\n    type: 'section',\r\n    text: {\r\n      type: 'mrkdwn',\r\n      text: '> ' + messageAsMrkdwn.replace(/\\n/g, '\\n> '),\r\n    },\r\n  });\r\n\r\n  for (const highlightedText of annotationsHighlightedText) {\r\n    messageBlocks.push({\r\n      type: 'context',\r\n      elements: [\r\n        {\r\n          type: 'plain_text',\r\n          text: `\uD83D\uDCCC \"${highlightedText}\"`,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  for (const allImageURL of allImageURLs) {\r\n    messageBlocks.push({\r\n      type: 'image',\r\n      image_url: allImageURL,\r\n      alt_text: 'Image attached to the message',\r\n    });\r\n  }\r\n\r\n  const notificationTextBlocks = [\r\n    headerPrefix, // [name] mentioned you\r\n    pageNameText, // on [channel name]\r\n    providerText, // in [tool]:\r\n    `${messageAsMrkdwn}`, // [message text]\r\n  ];\r\n\r\n  return await sendSlackNotification({\r\n    context,\r\n    senderUserID,\r\n    senderOrgID,\r\n    slackBotCredentials,\r\n    targetSlackUserID,\r\n    notificationTextBlocks,\r\n    messageBlocks,\r\n    messageID,\r\n  });\r\n}\r\n\r\nexport async function sendSlackThreadActionNotification({\r\n  context,\r\n  actionText,\r\n  messageID,\r\n  pageName,\r\n  providerName,\r\n  senderName,\r\n  senderOrgID,\r\n  senderUserID,\r\n  targetUserID,\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  url,\r\n  ...rest\r\n}: {\r\n  context: RequestContext;\r\n  senderUserID: UUID;\r\n  senderOrgID: UUID;\r\n  senderName: string;\r\n  targetUserID: UUID;\r\n  messageID: UUID;\r\n  url: string | null;\r\n  pageName: string | null | undefined;\r\n  providerName: string | undefined;\r\n  actionText: string;\r\n}): Promise<boolean> {\r\n  // Make sure we're using all the props\r\n  const _: Record<string, never> = rest;\r\n\r\n  const [senderSlackUserID, targetSlackUserID] = await Promise.all([\r\n    findSlackUserID(context, senderUserID),\r\n    findSlackUserID(context, targetUserID),\r\n  ]);\r\n  if (!targetSlackUserID) {\r\n    return false;\r\n  }\r\n\r\n  const slackBotCredentials = await findSlackBotCredentials(context);\r\n  if (!slackBotCredentials) {\r\n    return false;\r\n  }\r\n\r\n  const messageBlocks: KnownBlock[] = [];\r\n  const userName = senderSlackUserID ? `<@${senderSlackUserID}>` : senderName;\r\n  const headerPrefix = `${userName} ${actionText}`;\r\n\r\n  const threadNameWithURL = pageName\r\n    ? url\r\n      ? `<${url}|${mrkdwnEscapeText(pageName)}>`\r\n      : `${mrkdwnEscapeText(pageName)}`\r\n    : url\r\n    ? ` <${url}>`\r\n    : '';\r\n\r\n  const pageNameText = pageName ? `${pageName}` : '';\r\n\r\n  const providerText = providerName ? `in ${providerName}:` : '';\r\n\r\n  const messageHeaderText = [\r\n    headerPrefix, // [name] resolved thread\r\n    threadNameWithURL, // [thread name](url)\r\n    providerText, // in [tool]\r\n  ]\r\n    .filter((text) => !!text)\r\n    .join(' ');\r\n\r\n  messageBlocks.push({\r\n    type: 'section',\r\n    text: { type: 'mrkdwn', text: messageHeaderText },\r\n  });\r\n\r\n  const notificationTextBlocks = [\r\n    headerPrefix, // [name] resolved thread\r\n    pageNameText, // [threadName]\r\n    providerText, // in [tool]:\r\n  ];\r\n\r\n  return await sendSlackNotification({\r\n    context,\r\n    senderUserID,\r\n    senderOrgID,\r\n    slackBotCredentials,\r\n    targetSlackUserID,\r\n    notificationTextBlocks,\r\n    messageBlocks,\r\n    messageID,\r\n  });\r\n}\r\n\r\n/**\r\n * Update or create a Slack user profile.\r\n *\r\n */\r\nasync function updateOrCreateSlackUserProfile(\r\n  org: OrgEntity,\r\n  slackUser: SlackUser,\r\n) {\r\n  const userMutator = new UserMutator(Viewer.createServiceViewer(), null);\r\n\r\n  // Slack profiles come with different subsets of `image_*` fields. Currently\r\n  // the largest we render a profile pic is 56x56 pixels, so choose something\r\n  // not much bigger than that to avoid large file download times\r\n  // In the future we may also wish to store larger ones again\r\n  let profilePictureURL: string | null = null;\r\n  for (const key of [\r\n    'image_192', // best compromise for looking good on retina screens but not being too large\r\n    'image_72',\r\n    'image_512',\r\n    'image_1024',\r\n    'image_original',\r\n    'image_48',\r\n    'image_32',\r\n    'image_24',\r\n  ] as (keyof SlackUser['profile'])[]) {\r\n    const value = slackUser.profile[key];\r\n\r\n    if (value) {\r\n      profilePictureURL = value;\r\n      break;\r\n    }\r\n  }\r\n\r\n  const [user, updated] = await getSequelize().transaction(async (tx) => {\r\n    return await userMutator.updateOrCreateExternalUserInSlackOrg(\r\n      {\r\n        name: slackUser.real_name,\r\n        screenName: slackUser.profile.display_name,\r\n        email: slackUser.profile.email,\r\n        profilePictureURL,\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalID: slackUser.id,\r\n      },\r\n      org.id,\r\n      slackUser.deleted, // slack user.deleted - to infer what state should be if it's not set explicitly in orgMemberState\r\n      tx,\r\n    );\r\n  });\r\n  if (user && updated) {\r\n    backgroundPromise(\r\n      publishUserIdentityUpdate({\r\n        userID: user.id,\r\n        platformApplicationID: 'extension',\r\n      }),\r\n    );\r\n  }\r\n  return user;\r\n}\r\n\r\nexport async function sendMessageToCord(\r\n  text: string,\r\n  slackChannelID?: string,\r\n  clackChannel?: string,\r\n): Promise<void> {\r\n  if (process.env.IS_TEST) {\r\n    return;\r\n  }\r\n  if (!slackChannelID && !clackChannel) {\r\n    throw new Error(\r\n      'Asked to send a message but gave no destinations, that probably is a bug',\r\n    );\r\n  }\r\n  if (slackChannelID) {\r\n    await sendChannelMessage({\r\n      slackBotCredentials: { bot_access_token: env.SLACK_INTERNAL_BOT_TOKEN },\r\n      channelID: slackChannelID,\r\n      text,\r\n    });\r\n  }\r\n  const clackBaseURL = env.CLACK_SERVER_HOST;\r\n  if (clackChannel && clackBaseURL) {\r\n    const messageContent = await structuredMessageFromSlackMessage(\r\n      { text },\r\n      Viewer.createOrgViewer(RADICAL_ORG_ID),\r\n    );\r\n    await createThreadMessage({\r\n      platformApplicationID: CLACK_APPLICATION_ID,\r\n      id: uuid(),\r\n      threadID: uuid(),\r\n      internalMessageID: uuid(),\r\n      authorID: 'ernest',\r\n      content: forceExternalizeContent(messageContent),\r\n      createThread: {\r\n        groupID: 'clack_all',\r\n        organizationID: 'clack_all',\r\n        location: { channel: clackChannel },\r\n        url: `https://${clackBaseURL}/channel/${clackChannel}`,\r\n        name: `#${clackChannel} - Clack`,\r\n      },\r\n      skipLinkPreviews: true,\r\n    });\r\n  }\r\n}\r\n\r\nexport async function sendReplyHelpMessage(\r\n  accessToken: string,\r\n  recipientUserID: string,\r\n) {\r\n  const text = `\uD83D\uDCA1 *Tip*: Click \"Reply in thread\" to respond to Cord messages using Slack.\r\n  Your response will appear on the same page as the Cord conversation.`;\r\n\r\n  return await sendHelpMessage(accessToken, recipientUserID, text);\r\n}\r\n\r\nexport async function sendWelcomeHelpMessage(\r\n  accessToken: string,\r\n  recipientUserID: string,\r\n  slackWorkspaceDomain: string,\r\n  onlyPostIfConversationEmpty = false,\r\n) {\r\n  const text = `Hi <@${recipientUserID}>, you'll be notified here when someone mentions you using Cord.\r\n\r\nThat way, you can chat, annotate, attach files, and create tasks with your team in any software.\r\n\r\n<${APP_ORIGIN}/${slackWorkspaceDomain}|Start collaborating anywhere.>`;\r\n\r\n  return await sendHelpMessage(\r\n    accessToken,\r\n    recipientUserID,\r\n    text,\r\n    onlyPostIfConversationEmpty,\r\n  );\r\n}\r\n\r\nexport async function addMessageToSelectedSlackChannel(\r\n  context: RequestContext,\r\n  slackBotCredentials: SlackBotCredentials,\r\n  channelID: string,\r\n  originalSharerUser: UserEntity,\r\n  message: MessageEntity,\r\n  thread: ThreadEntity,\r\n  mirrorType: ThreadMirrorType,\r\n  originalMessageThreadTS?: string,\r\n) {\r\n  const viewer: Viewer = context.session.viewer;\r\n  const blocks: KnownBlock[] = [];\r\n\r\n  let org: OrgEntity | null = null;\r\n\r\n  if (mirrorType === 'support' && !originalMessageThreadTS) {\r\n    org = await context.loaders.orgLoader.loadOrg(message.orgID);\r\n  }\r\n\r\n  // Usually we present a 'unified profile', displaying the latest updated name/pic,\r\n  // whether that's from a linked Slack account (in any org), platform API update, or user\r\n  // Settings update.  However, when sharing to Slack it makes sense to use\r\n  // the Slack profile, and the one tht is from the Slack workspace linked to this Cord org\r\n  // so we can @mention properly\r\n  const sharerSlackUser = await loadLinkedSlackUserOrgScoped(\r\n    originalSharerUser,\r\n    context,\r\n    message.orgID,\r\n  );\r\n\r\n  const sharerIsAuthor =\r\n    message.sourceID === sharerSlackUser?.id ||\r\n    message.sourceID === originalSharerUser.id;\r\n\r\n  const isScrapedSlackMessage = !!message.importedSlackMessageType;\r\n\r\n  const {\r\n    originalUser: authorOriginalUser,\r\n    slackLinkedUser: authorSlackLinkedUser,\r\n    username,\r\n    iconURL,\r\n  } = await getUserAndAttributionForUser(\r\n    context,\r\n    message.sourceID,\r\n    message.orgID,\r\n    isScrapedSlackMessage,\r\n    mirrorType,\r\n  );\r\n\r\n  if (!authorOriginalUser) {\r\n    return false;\r\n  }\r\n\r\n  const authorOriginalProfileDetailsForDisplay = await detailsForDisplay(\r\n    authorOriginalUser,\r\n    context,\r\n  );\r\n\r\n  // A helper fn used for turning @ mentions into proper Slack mentions - doesn't\r\n  // work if sharing to a support bot's workspace because the mentioned user (probably)\r\n  // isn't a member of that workspace so Slack will show the mention as a weird\r\n  // redacted rectangle.  Returning null here means our code will process the name\r\n  // as plain text instead\r\n  const findSlackUserIDHelper =\r\n    mirrorType === 'support'\r\n      ? async () => null\r\n      : (userID: UUID) => findSlackUserID(context, userID);\r\n\r\n  const content = await slackMrkdwnFromMessageContent(\r\n    message.content,\r\n    findSlackUserIDHelper,\r\n  );\r\n  const addQueryParamsToSharedToSlack =\r\n    message.url !== null &&\r\n    (await getFeatureFlagValue(\r\n      FeatureFlag.QUERY_PARAM_DEEP_LINKS_IN_SHARE_TO_SLACK,\r\n      flagsUserFromContext(context),\r\n    ));\r\n\r\n  let messageUrl: string | null;\r\n\r\n  // the check message.url !== null is to satisfy the typechecker\r\n  if (message.url !== null && addQueryParamsToSharedToSlack) {\r\n    messageUrl = injectDeeplinkQueryParamsV1(\r\n      context.logger,\r\n      message.url,\r\n      thread.id,\r\n      message.id,\r\n    );\r\n  } else {\r\n    messageUrl = message.url;\r\n  }\r\n\r\n  if (messageUrl !== null) {\r\n    const { userID: sharerUserID, orgID: sharerOrgID } =\r\n      assertViewerHasIdentity(context.session.viewer);\r\n\r\n    messageUrl = await generateOutboundNotificationLoggingURL({\r\n      messageID: message.id,\r\n      url: messageUrl,\r\n      targetOrgID: message.orgID,\r\n      targetUserID: null,\r\n      type: 'sharedToSlackChannel',\r\n      platformApplicationID: context.session.viewer.platformApplicationID,\r\n      metadata: {\r\n        type: 'sharedToSlackChannel',\r\n        targetSlackChannelID: channelID,\r\n      },\r\n      sharerUserID,\r\n      sharerOrgID,\r\n    });\r\n  }\r\n\r\n  let text = '';\r\n  const authorName =\r\n    // A support-mirrored message goes to another Slack workspace so not helpful\r\n    // to do a profile mention\r\n    mirrorType === 'support'\r\n      ? authorOriginalProfileDetailsForDisplay.displayName\r\n      : await userMention(authorSlackLinkedUser ?? authorOriginalUser, context);\r\n\r\n  // If this was a user_message, include the header that says \"So and so\r\n  // (replied|shared)\".  For an action_message, we skip that and just include\r\n  // the body.\r\n  if (message.type === 'user_message') {\r\n    if (originalMessageThreadTS) {\r\n      text = `${authorName} replied: `;\r\n    } else {\r\n      const mrkdownLink =\r\n        messageUrl === null\r\n          ? thread.name\r\n          : `<${messageUrl}${\r\n              thread.name ? `|${mrkdwnEscapeText(thread.name)}` : ''\r\n            }>`;\r\n      if (mirrorType === 'support') {\r\n        text = `${\r\n          (await detailsForDisplay(originalSharerUser, context)).displayName\r\n        } from ${org?.name} (orgID: ${org?.externalID}) opened a support request in a thread${\r\n          mrkdownLink ? ' in ' + mrkdownLink : ''\r\n        }`;\r\n      } else {\r\n        text = `${await userMention(\r\n          sharerSlackUser ?? originalSharerUser,\r\n          context,\r\n        )} shared ${\r\n          sharerIsAuthor ? 'their message' : `this message from ${authorName}`\r\n        }${mrkdownLink ? ' in ' + mrkdownLink : ''}`;\r\n      }\r\n    }\r\n    blocks.push({ type: 'section', text: { type: 'mrkdwn', text } });\r\n  }\r\n\r\n  // Present the body of the message like a blockquote (prefix every line with\r\n  // '> ')\r\n  blocks.push({\r\n    type: 'section',\r\n    text: { type: 'mrkdwn', text: '> ' + content.replace(/\\n/g, '\\n> ') },\r\n  });\r\n\r\n  const messageAttachmentLoader = new MessageAttachmentLoader(viewer);\r\n  const fileLoader = new FileLoader(viewer);\r\n\r\n  const attachedFiles: FileEntity[] = await messageAttachmentLoader\r\n    .loadAttachmentsForMessage(message.id)\r\n    .then((attachments) => {\r\n      const fileIDs: UUID[] = [];\r\n\r\n      for (const attachment of attachments) {\r\n        if (!('type' in attachment)) {\r\n          break;\r\n        }\r\n\r\n        switch (attachment.type) {\r\n          case MessageAttachmentType.FILE: {\r\n            const { fileID } = attachment.data as MessageFileAttachmentData;\r\n            fileIDs.push(fileID);\r\n            break;\r\n          }\r\n          case MessageAttachmentType.ANNOTATION: {\r\n            const { screenshotFileID, blurredScreenshotFileID } =\r\n              attachment.data as MessageAnnotationAttachmentData;\r\n            if (blurredScreenshotFileID) {\r\n              fileIDs.push(blurredScreenshotFileID);\r\n            } else if (screenshotFileID) {\r\n              fileIDs.push(screenshotFileID);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return fileLoader.loadFiles(fileIDs);\r\n    });\r\n\r\n  for (const fileEntity of attachedFiles) {\r\n    if (\r\n      fileEntity.uploadStatus === 'uploaded' &&\r\n      isInlineDisplayableImage(fileEntity.mimeType)\r\n    ) {\r\n      blocks.push({\r\n        type: 'image',\r\n        image_url: fileEntity.getPermanentDownloadURL(),\r\n        alt_text: 'attached image',\r\n      });\r\n    }\r\n  }\r\n  if (mirrorType === 'support' && !originalMessageThreadTS) {\r\n    // add close/reopen button to top message only\r\n    blocks.push(\r\n      {\r\n        type: 'divider',\r\n      },\r\n      supportStatusButton('close', thread.id),\r\n    );\r\n  }\r\n\r\n  const result = await sendChannelMessage({\r\n    slackBotCredentials,\r\n    channelID,\r\n    text,\r\n    blocks,\r\n    threadTS: originalMessageThreadTS,\r\n    username,\r\n    iconURL,\r\n  });\r\n\r\n  if (!result) {\r\n    return false;\r\n  }\r\n\r\n  const success = await SlackMessageEntity.create({\r\n    slackOrgID: slackBotCredentials.org.id,\r\n    slackChannelID: result.channelID,\r\n    slackMessageTimestamp: result.timestamp,\r\n    messageID: message.id,\r\n    sharerOrgID: message.orgID,\r\n    sharerUserID: originalSharerUser.id,\r\n  });\r\n\r\n  if (!success) {\r\n    context.logger.warn('Failed call to SlackMessageEntity.create', {\r\n      messageID: message.id,\r\n      sharerOrgID: message.orgID,\r\n      sharerUserID: originalSharerUser.id,\r\n      slackChannelID: result.channelID,\r\n      slackMessageTimestamp: result.timestamp,\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function addThreadToSelectedSlackChannel(\r\n  context: RequestContext,\r\n  slackBotCredentials: SlackBotCredentials,\r\n  channelID: string,\r\n  sharerUser: UserEntity,\r\n  threadID: UUID,\r\n  mirrorType: ThreadMirrorType,\r\n) {\r\n  return withSlackMirroredThreadLock(\r\n    threadID,\r\n    mirrorType,\r\n  )(async () => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (\r\n      mirrorType === 'internal' &&\r\n      (await context.loaders.slackMirroredThreadLoader.threadIsMirrored(\r\n        threadID,\r\n      ))\r\n    ) {\r\n      // Sorry, no can do. This thread is already being mirrored to Slack.\r\n      throw new ApiCallerError('thread_already_shared');\r\n    } else if (\r\n      mirrorType === 'support' &&\r\n      (await SlackMirroredSupportThreadEntity.findByPk(threadID))\r\n    ) {\r\n      // TODO: Set thread.supportStatus to open if it is closed\r\n      // from future interactive slack buttons\r\n      return false;\r\n    }\r\n\r\n    if (!thread) {\r\n      context.logger.warn('Failed to load thread', {\r\n        threadID: threadID,\r\n        slackChannelID: channelID,\r\n        sharerUserID: sharerUser.id,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    const messagesInThread = await context.loaders.messageLoader.loadMessages({\r\n      threadID,\r\n      ignoreDeleted: true,\r\n    });\r\n\r\n    if (messagesInThread.length === 0) {\r\n      context.logger.warn('Failed to load any messages in thread', {\r\n        threadID: threadID,\r\n        slackChannelID: channelID,\r\n        sharerUserID: sharerUser.id,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    const [firstThreadMessage, ...inThreadMessages] = messagesInThread;\r\n\r\n    const originalSlackMessage = await addMessageToSelectedSlackChannel(\r\n      context,\r\n      slackBotCredentials,\r\n      channelID,\r\n      sharerUser,\r\n      firstThreadMessage,\r\n      thread,\r\n      mirrorType,\r\n    );\r\n\r\n    if (!originalSlackMessage) {\r\n      context.logger.error(\r\n        'Failed to call addMessageToSelectedSlackChannel for first message in thread',\r\n        {\r\n          threadID: threadID,\r\n          messageID: firstThreadMessage.id,\r\n          slackChannelID: channelID,\r\n          sharerUserID: sharerUser.id,\r\n          orgID: firstThreadMessage.orgID,\r\n        },\r\n      );\r\n      return false;\r\n    }\r\n\r\n    for (const message of inThreadMessages) {\r\n      const sentMessage = await addMessageToSelectedSlackChannel(\r\n        context,\r\n        slackBotCredentials,\r\n        channelID,\r\n        sharerUser,\r\n        message,\r\n        thread,\r\n        mirrorType,\r\n        originalSlackMessage.timestamp,\r\n      );\r\n\r\n      if (!sentMessage) {\r\n        context.logger.error(\r\n          'Failed call to addMessageToSelectedSlackChannel for a message in thread',\r\n          {\r\n            threadID: threadID,\r\n            messageID: message.id,\r\n            slackChannelID: channelID,\r\n            sharerUserID: sharerUser.id,\r\n            orgID: message.orgID,\r\n          },\r\n        );\r\n      }\r\n    }\r\n\r\n    if (mirrorType === 'internal') {\r\n      await SlackMirroredThreadEntity.create({\r\n        threadID,\r\n        threadOrgID: thread.orgID,\r\n        slackOrgID: slackBotCredentials.org.id,\r\n        slackChannelID: originalSlackMessage.channelID,\r\n        slackMessageTimestamp: originalSlackMessage.timestamp,\r\n      });\r\n    } else if (mirrorType === 'support') {\r\n      await getSequelize().transaction(async (transaction) => {\r\n        await SlackMirroredSupportThreadEntity.create(\r\n          {\r\n            threadID,\r\n            threadOrgID: thread.orgID,\r\n            slackOrgID: slackBotCredentials.org.id,\r\n            slackChannelID: originalSlackMessage.channelID,\r\n            slackMessageTimestamp: originalSlackMessage.timestamp,\r\n          },\r\n          { transaction },\r\n        );\r\n\r\n        const threadMutator = new ThreadMutator(\r\n          context.session.viewer,\r\n          context.loaders,\r\n        );\r\n        await threadMutator.setThreadSupportStatus(\r\n          threadID,\r\n          'open',\r\n          transaction,\r\n        );\r\n      });\r\n    }\r\n\r\n    await publishPubSubEvent(\r\n      'thread-share-to-slack',\r\n      { threadID },\r\n      {\r\n        info: await context.loaders.threadLoader.loadSlackMirroredThreadInfoNoOrgCheck(\r\n          threadID,\r\n        ),\r\n      },\r\n    );\r\n\r\n    return true;\r\n  });\r\n}\r\n\r\nexport async function addMessageToCorrectCordThread(\r\n  logger: Logger,\r\n  accessToken: string,\r\n  event: any,\r\n  viewerFromSlack: Viewer,\r\n) {\r\n  const { channel, ts, thread_ts, text, files } = event;\r\n  // event.channel is the channelID i.e C01NWD8JBR8\r\n  // event.ts is the message timestamp i.e. 1614616185.003000\r\n  // event.text is the plain text message content, will need to add formatting later\r\n  // event.files is an array of attachments, with all its information\r\n  // If this message is a reply to an earlier message, event.thread_ts is the\r\n  // message timestamp of that message.\r\n\r\n  const { userID: userIDFromSlack } = assertViewerHasIdentity(viewerFromSlack);\r\n\r\n  const slackMirroredThreadLoader = new SlackMirroredThreadLoader(\r\n    viewerFromSlack,\r\n  );\r\n  const slackMirroredThread = await slackMirroredThreadLoader.loadFromSlackID(\r\n    channel,\r\n    thread_ts,\r\n  );\r\n\r\n  const orgID = assertViewerHasOrg(viewerFromSlack);\r\n\r\n  const slackMirroredSupportThread =\r\n    await SlackMirroredSupportThreadEntity.findOne({\r\n      where: {\r\n        slackChannelID: channel,\r\n        slackMessageTimestamp: thread_ts,\r\n        [Op.or]: { slackOrgID: orgID, threadOrgID: orgID },\r\n      },\r\n    });\r\n\r\n  let threadID: UUID;\r\n  let threadViewer: Viewer;\r\n  let context: RequestContext;\r\n  // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  let url: string | null = null;\r\n\r\n  if (slackMirroredThread) {\r\n    // This message is a reply to a Slack thread that was created by sharing a\r\n    // Cord thread to Slack.\r\n\r\n    threadID = slackMirroredThread.threadID;\r\n    threadViewer = Viewer.createLoggedInViewer(\r\n      userIDFromSlack,\r\n      slackMirroredThread.threadOrgID,\r\n    );\r\n    context = await contextWithSession(\r\n      { viewer: threadViewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n  } else if (slackMirroredSupportThread) {\r\n    threadID = slackMirroredSupportThread.threadID;\r\n\r\n    const application = await ApplicationEntity.findOne({\r\n      where: {\r\n        supportOrgID: slackMirroredSupportThread.slackOrgID,\r\n        supportSlackChannelID: slackMirroredSupportThread.slackChannelID,\r\n      },\r\n    });\r\n\r\n    if (!application) {\r\n      logger.debug(\r\n        'No application found with mirrored support thread details.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!application.supportBotID) {\r\n      logger.debug(\r\n        'Application matched with mirrored support thread details does not contain a support bot ID.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    const [user, org] = await Promise.all([\r\n      UserEntity.findByPk(application.supportBotID),\r\n      OrgEntity.findOne({\r\n        where: { id: slackMirroredSupportThread.threadOrgID },\r\n      }),\r\n    ]);\r\n\r\n    if (!user || !org) {\r\n      // We should not get here, as the support bot ID is created by us. So the user and org\r\n      // of this flow should always be present. But just in case...\r\n      logger.error(\r\n        'Could not match the relevant user and organization for the support bot.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    threadViewer = await Viewer.createLoggedInPlatformViewer({\r\n      user,\r\n      org,\r\n    });\r\n    context = await contextWithSession(\r\n      { viewer: threadViewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n  } else {\r\n    // If the Slack thread is not mirrored in Cord, this message might still be a\r\n    // reply to a single message that was shared from Cord to Slack.\r\n    // Using event.ts and event.channel, check whether the message reply is a\r\n    // reply to a shared message from cord by checking wether the origin\r\n\r\n    const slackMessageLoader = new SlackMessageLoader(viewerFromSlack);\r\n    const slackMessage = await slackMessageLoader.loadSlackMessage(\r\n      channel,\r\n      thread_ts,\r\n    );\r\n\r\n    if (slackMessage === null) {\r\n      // The message isn't a reply to a message shared from cord\r\n      return;\r\n    }\r\n\r\n    // the original message might not belong to the viewer's (Slack) org, but to\r\n    // the (platform) org which shared this message to Slack by linking their\r\n    // org to Slack. In that case `orgIDFromSlack` is the orgID of the Slack\r\n    // org, and `slackMessage.sharerOrgID` is the orgID of the platform org. The\r\n    // Cord thread belongs to the platform org.\r\n    // If the thread belongs to a regular Slack org, `orgIDFromSlack` is equal\r\n    // to `slackMessage.sharerOrgID`.\r\n    // Either way, we can construct a viewer that can access the thread using\r\n    // `slackMessage.sharerOrgID`.\r\n    threadViewer = Viewer.createLoggedInViewer(\r\n      userIDFromSlack,\r\n      slackMessage.sharerOrgID,\r\n    );\r\n    context = await contextWithSession(\r\n      { viewer: threadViewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n\r\n    const originalMessage = await context.loaders.messageLoader.loadMessage(\r\n      slackMessage.messageID,\r\n    );\r\n\r\n    if (originalMessage === null) {\r\n      return;\r\n    }\r\n\r\n    threadID = originalMessage.threadID;\r\n    url = originalMessage.url;\r\n  }\r\n\r\n  // The viewer will have been mutated by now,\r\n  // so we want to have the updated information\r\n  // in the logger\r\n  logger = logger.childLogger(threadViewer);\r\n\r\n  addMessageToCorrectCordThreadCounter.inc({\r\n    channelType: event.channel_type,\r\n    isReply: event.thread_ts ? 'true' : 'false',\r\n    hasAttachments: files ? files.length : 'false',\r\n  });\r\n\r\n  const structuredMessage = await structuredMessageFromSlackMessage(\r\n    { text },\r\n    viewerFromSlack,\r\n  );\r\n\r\n  const giphyFileID = await uploadGiphy(logger, event, viewerFromSlack);\r\n\r\n  const timestamp = new Date(Number(ts) * 1000);\r\n\r\n  const messageMutator = new MessageMutator(threadViewer, context.loaders);\r\n\r\n  const thread = await ThreadEntity.findByPk(threadID);\r\n\r\n  if (!thread) {\r\n    logger.debug('No thread found for this slack message.', {\r\n      event,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const message = await messageMutator.createMessage({\r\n    content: giphyFileID ? [] : structuredMessage,\r\n    thread,\r\n    id: uuid(),\r\n    url,\r\n    timestamp,\r\n    importedSlackChannelID: channel,\r\n    importedSlackMessageTS: ts,\r\n    importedSlackMessageType: slackMirroredSupportThread\r\n      ? 'supportBotReply'\r\n      : 'reply',\r\n    importedSlackMessageThreadTS: thread_ts || null,\r\n  });\r\n\r\n  let fileAttachments: FileAttachmentInput[] = [];\r\n  if (files && files.length) {\r\n    fileAttachments = await uploadMessageAttachments(\r\n      logger,\r\n      accessToken,\r\n      threadViewer,\r\n      files,\r\n    );\r\n  }\r\n  if (giphyFileID) {\r\n    fileAttachments.push({\r\n      id: uuid(),\r\n      fileID: giphyFileID,\r\n    });\r\n  }\r\n\r\n  const application = await ApplicationEntity.findByPk(\r\n    thread.platformApplicationID,\r\n  );\r\n  if (!application) {\r\n    throw new Error(`Could not find application for thread ${thread.id}`);\r\n  }\r\n  const page = await PageEntity.findOne({\r\n    where: {\r\n      contextHash: thread.pageContextHash,\r\n    },\r\n  });\r\n  if (!page) {\r\n    throw new Error(\r\n      `Could not find page for message ${message.id} and thread ${thread.id}`,\r\n    );\r\n  }\r\n\r\n  const flagsUser: FlagsUser = {\r\n    userID: threadViewer.userID || '',\r\n    orgID: threadViewer.orgID,\r\n    platformApplicationID: application?.id || '',\r\n    version: context.clientVersion,\r\n    customerID: application?.customerID || '',\r\n  };\r\n\r\n  await executeNewMessageCreationTasks({\r\n    context,\r\n    flagsUser,\r\n    application,\r\n    page,\r\n    thread,\r\n    message,\r\n    fileAttachments,\r\n    annotationAttachments: [],\r\n    isFirstMessage: false,\r\n    task: null,\r\n    screenshotAttachment: null,\r\n    // We only want to forward notifications to thread participants\r\n    // when the reply is coming from a support bot\r\n    sendNotifications: !!slackMirroredSupportThread,\r\n    subscribeToThread: false,\r\n  });\r\n}\r\n\r\nasync function userMention(user: UserEntity, context: RequestContext) {\r\n  const { displayName } = await detailsForDisplay(user, context);\r\n\r\n  return user.externalProvider === AuthProviderType.SLACK && user.externalID\r\n    ? `<https://app.slack.com/team/${user.externalID}|${displayName}>`\r\n    : displayName;\r\n}\r\n\r\nasync function uploadMessageAttachments(\r\n  logger: Logger,\r\n  accessToken: string,\r\n  viewer: Viewer,\r\n  files: any, // the slack api event.files object\r\n): Promise<FileAttachmentInput[]> {\r\n  // Get the relevant data from event.file\r\n  // and store it in an array of objects with type fileAttachments\r\n  type FileAttachment = {\r\n    id: string;\r\n    name: string;\r\n    mimetype: string;\r\n    size: number;\r\n    slackURL: string;\r\n  };\r\n\r\n  let fileAttachments: FileAttachment[] = [];\r\n\r\n  logger.debug(`uploadMessageAttachments`, { files });\r\n\r\n  if (Array.isArray(files)) {\r\n    fileAttachments = files\r\n      .map(({ name, mimetype, size, url_private }) => ({\r\n        id: uuid(),\r\n        name,\r\n        mimetype,\r\n        size,\r\n        slackURL: url_private,\r\n      }))\r\n      .filter(\r\n        (x): x is FileAttachment =>\r\n          typeof x.name === 'string' &&\r\n          typeof x.mimetype === 'string' &&\r\n          typeof x.size === 'number' &&\r\n          validateFileForUpload('attachment', {\r\n            name: x.name,\r\n            mimeType: x.mimetype,\r\n            size: x.size,\r\n          }).valid &&\r\n          typeof x.slackURL === 'string',\r\n      );\r\n  }\r\n\r\n  logger.debug(\r\n    `addMessageAttachmentToCordMessage: attaching ${fileAttachments.length} of ${files.length} attachments`,\r\n  );\r\n\r\n  // uploadedAndFailedAttachments is an array of FileAttachment or null\r\n  // where the null values are from attachments that failed to upload to our s3 bucket\r\n  const uploadedAndFailedAttachments = await Promise.all(\r\n    fileAttachments.map(async (attachment) => {\r\n      // for each fileAttachments\r\n      // check the attachment has the right mimetype and size\r\n      // fetch the attachment from slack using the url_private url and the bot accessToken\r\n      // requires file:read scope from slack api\r\n\r\n      const slackFileResponse = await fetch(attachment.slackURL, {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n\r\n      // At this point we have received only the response status and headers from Slack.\r\n      // If the status is okay (200), `slackFileResponse.body` will be a stream from which we\r\n      // can read the file contents. We pass that stream to the `fetch` call below.\r\n      // As a result, we do not download the whole file before we start the upload,\r\n      // but we stream the file contents directly from Slack's response into our PUT request to S3.\r\n\r\n      if (slackFileResponse.status !== 200) {\r\n        logger.error(\r\n          `Attachment download failed with status ${slackFileResponse.status}`,\r\n          { attachment },\r\n        );\r\n        return null;\r\n      }\r\n\r\n      await uploadToS3AndCreateFileEntity({\r\n        logger,\r\n        fileID: attachment.id,\r\n        fileName: attachment.name,\r\n        size: attachment.size,\r\n        mimetype: attachment.mimetype,\r\n        file: slackFileResponse.body!,\r\n        viewer,\r\n      });\r\n      return attachment;\r\n    }),\r\n  );\r\n\r\n  //To filter out failed uploads\r\n  const uploadedAttachments = uploadedAndFailedAttachments.filter(\r\n    (attachment): attachment is FileAttachment => !!attachment,\r\n  );\r\n\r\n  // Return the uploaded attachments so that they can be set as message\r\n  // attachments later in the logic.\r\n  return uploadedAttachments.map(({ id }) => ({ id: uuid(), fileID: id }));\r\n}\r\n\r\nexport const allowImportUser = (member: SlackUser) =>\r\n  member.id !== 'USLACKBOT' && !member.is_bot;\r\n\r\nexport { sendSlackMentionNotification, updateOrCreateSlackUserProfile };\r\n\r\nexport function slackAdminLoginURL(nonce: string, redirectPath: string) {\r\n  return url.format({\r\n    protocol: 'https',\r\n    host: 'slack.com',\r\n    pathname: '/openid/connect/authorize',\r\n    query: {\r\n      response_type: 'code',\r\n      scope: ['openid', 'profile', 'email'].join(','),\r\n      client_id: SLACK_ADMIN_LOGIN_APP_CLIENT_ID,\r\n      state: jwt.sign(\r\n        {\r\n          host: ADMIN_SERVER_HOST,\r\n          redirect_to: new URL(redirectPath, ADMIN_ORIGIN).href,\r\n        },\r\n        env.OAUTH_STATE_SIGNING_SECRET,\r\n        {\r\n          expiresIn: '1 min',\r\n          algorithm: 'HS512',\r\n        },\r\n      ),\r\n      team: CORD_SLACK_TEAM_ID,\r\n      nonce,\r\n      redirect_uri: ADMIN_LOGIN_SLACK_REDIRECT_URL,\r\n    },\r\n  });\r\n}\r\n\r\nasync function getUserAndAttributionForUser(\r\n  context: RequestContext,\r\n  userID: string,\r\n  orgID: string,\r\n  isScrapedSlackMessage = false,\r\n  mirrorType?: string,\r\n) {\r\n  const originalUser =\r\n    await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n\r\n  if (!originalUser) {\r\n    context.logger.error('Cant find profile for user');\r\n    return {};\r\n  }\r\n\r\n  // Usually the 'unified profile' prefers the latest updated name/pic, but when\r\n  // sharing to Slack it makes sense to prefer the profile linked to that Slack\r\n  // org, so we can @mention properly\r\n  const slackLinkedUser = await loadLinkedSlackUserOrgScoped(\r\n    originalUser,\r\n    context,\r\n    orgID,\r\n  );\r\n\r\n  const originalProfileDisplayDetails = await detailsForDisplay(\r\n    originalUser,\r\n    context,\r\n  );\r\n\r\n  let username: string | undefined;\r\n  let iconURL: string | undefined;\r\n\r\n  if (\r\n    await getFeatureFlagValue('impersonate_slack_message_author', {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID:\r\n        context.session.viewer.platformApplicationID ?? 'extension',\r\n      version: context.clientVersion,\r\n      customerID: context.application?.customerID,\r\n    })\r\n  ) {\r\n    // If it's a support message it will be going to another Slack workspace and it doesn't\r\n    // make sense to prefer the user's Slack profile over the 'normal' unified profile\r\n    username =\r\n      mirrorType === 'support'\r\n        ? originalProfileDisplayDetails.displayName\r\n        : slackLinkedUser\r\n        ? userDisplayName(slackLinkedUser)\r\n        : originalProfileDisplayDetails.displayName;\r\n    let badgeLogoURL: string | null = null;\r\n\r\n    if (\r\n      originalUser.externalProvider === AuthProviderType.PLATFORM &&\r\n      originalUser.platformApplicationID\r\n    ) {\r\n      const application = await context.loaders.applicationLoader.load(\r\n        originalUser.platformApplicationID,\r\n      );\r\n\r\n      if (application) {\r\n        username = `${username} (on ${application.name})`;\r\n        badgeLogoURL = application.iconURL;\r\n      }\r\n      // If the message originated from Slack in the first place, don't add '(via Cord)'\r\n    } else if (!isScrapedSlackMessage) {\r\n      // If it is a scraped slack message, we will use an unbadged picture\r\n      // so it looks like a normal Slack profile\r\n      username = `${username} (via Cord)`;\r\n      badgeLogoURL = `${APP_ORIGIN}/static/provider-icons/cord.png`;\r\n    }\r\n\r\n    iconURL =\r\n      mirrorType === 'support'\r\n        ? originalProfileDisplayDetails.profilePictureURL ?? undefined\r\n        : slackLinkedUser?.profilePictureURL ??\r\n          originalProfileDisplayDetails.profilePictureURL ??\r\n          undefined;\r\n\r\n    if (\r\n      iconURL &&\r\n      (badgeLogoURL || isScrapedSlackMessage) &&\r\n      (await getFeatureFlagValue('badge_attribution_avatar', {\r\n        userID,\r\n        orgID,\r\n        platformApplicationID:\r\n          context.session.viewer.platformApplicationID ?? 'extension',\r\n        version: context.clientVersion,\r\n      }))\r\n    ) {\r\n      try {\r\n        iconURL = badgeLogoURL\r\n          ? await getBadgedImageURL(iconURL, badgeLogoURL)\r\n          : await getResizedImageURL(iconURL);\r\n      } catch (err) {\r\n        context.logger.logException(\r\n          'getBadgedImageURL or getResizedImageURL',\r\n          err,\r\n          undefined,\r\n          undefined,\r\n          'warn',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    originalUser,\r\n    slackLinkedUser,\r\n    username,\r\n    iconURL,\r\n  };\r\n}\r\n\r\nexport function getSlackMessageURL(\r\n  domain: string,\r\n  slackChannelID: string,\r\n  slackMessageTS: string,\r\n  SlackThreadTS: string | null,\r\n) {\r\n  const tsWithoutPeriod = slackMessageTS.replace('.', '');\r\n  let slackURL = `https://${domain}.slack.com/archives/${slackChannelID}/p${tsWithoutPeriod}`;\r\n\r\n  if (SlackThreadTS) {\r\n    const threadTsWithoutPeriod = SlackThreadTS.replace('.', '');\r\n    slackURL += `?thread_ts=${threadTsWithoutPeriod}&cid=${slackChannelID}`;\r\n  }\r\n\r\n  return slackURL;\r\n}\r\n\r\nexport async function unlinkThreadOnSlackMessageDelete(\r\n  event: any,\r\n  org: OrgEntity,\r\n) {\r\n  if (\r\n    event.subtype === 'message_deleted' ||\r\n    (event.subtype === 'message_changed' &&\r\n      event.message &&\r\n      event.message.subtype === 'tombstone')\r\n  ) {\r\n    // A message was deleted or tombstoned. (A message is tombstoned if it is\r\n    // the top message of a Slack in thread with existing replies.)\r\n    const { channel } = event;\r\n    const timestamp = event.deleted_ts ?? event.message?.ts;\r\n\r\n    if (typeof channel === 'string' && typeof timestamp === 'string') {\r\n      const viewer = Viewer.createOrgViewer(org.id);\r\n\r\n      // If this message was shared from Cord, it is listed in the\r\n      // slack_messages table. If so, remove the corresponding entry in that\r\n      // table.\r\n      const slackMessageMutator = new SlackMessageMutator(viewer);\r\n      await slackMessageMutator.unlinkSlackMessage(channel, timestamp);\r\n\r\n      // If the deleted/tombstoned message was the top message of a Slack thread\r\n      // that was shared from Cord, unlink!\r\n      const slackMirroredThreadMutator = new SlackMirroredThreadMutator(viewer);\r\n      const linkedThreadInfo =\r\n        await slackMirroredThreadMutator.unlinkSlackThread(channel, timestamp);\r\n\r\n      if (linkedThreadInfo) {\r\n        // There actually was a linked Cord thread.\r\n        const { threadID, threadOrgID } = linkedThreadInfo;\r\n\r\n        const orgViewer = Viewer.createOrgViewer(threadOrgID);\r\n        const orgLoaders = await getNewLoaders(orgViewer);\r\n        const messageMutator = new MessageMutator(\r\n          Viewer.createOrgViewer(threadOrgID),\r\n          orgLoaders,\r\n        );\r\n        await messageMutator.resetSlackImportForThread(threadID);\r\n\r\n        if (event.subtype === 'message_changed') {\r\n          // The top-level Slack message was not fully deleted, but replaced with\r\n          // a tombstone.\r\n          const slackBotCredentials = await org.getSlackBotCredentials();\r\n          if (slackBotCredentials) {\r\n            await sendChannelMessage({\r\n              slackBotCredentials,\r\n              channelID: channel,\r\n              text: 'This message thread is no longer shared with Cord, because the top message has been deleted in Slack.',\r\n              threadTS: timestamp,\r\n            });\r\n          }\r\n        }\r\n\r\n        // Notify clients this thread is no longer shared to Slack\r\n        await publishPubSubEvent(\r\n          'thread-share-to-slack',\r\n          { threadID },\r\n          { info: null },\r\n        );\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nasync function uploadToS3AndCreateFileEntity({\r\n  logger,\r\n  fileID,\r\n  fileName,\r\n  size,\r\n  mimetype,\r\n  file,\r\n  viewer,\r\n}: {\r\n  logger: Logger;\r\n  fileID: string | UUID;\r\n  fileName: string;\r\n  size: number;\r\n  mimetype: string;\r\n  file: ReadableStream<Uint8Array>;\r\n  viewer: Viewer;\r\n}) {\r\n  const uploadURL = getSignedUploadURL(fileID, size, mimetype);\r\n\r\n  let fileUploadStatus: FileUploadStatus = 'uploading';\r\n\r\n  const uploadResponse = await fetch(uploadURL, {\r\n    method: 'PUT',\r\n    body: file,\r\n    headers: {\r\n      'Content-Length': `${size}`,\r\n      'Content-Type': mimetype,\r\n    },\r\n  });\r\n\r\n  if (uploadResponse.status !== 200) {\r\n    logger.error(\r\n      `Slack attachment upload failed with status ${uploadResponse.status}`,\r\n      {\r\n        fileID,\r\n        fileName,\r\n        status: uploadResponse.status,\r\n        statusText: uploadResponse.statusText,\r\n      },\r\n    );\r\n    return null;\r\n  }\r\n\r\n  fileUploadStatus = 'uploaded';\r\n\r\n  // Create file entity for the attachment\r\n  const loaders = await getNewLoaders(viewer);\r\n  const fileMutator = new FileMutator(viewer, loaders);\r\n\r\n  await fileMutator.createFileForUpload(\r\n    fileID,\r\n    fileName,\r\n    mimetype,\r\n    size,\r\n    fileUploadStatus,\r\n  );\r\n\r\n  return fileID;\r\n}\r\n\r\nasync function uploadGiphy(logger: Logger, msg: any, viewer: Viewer) {\r\n  // Check if this is a message from the giphy bot and if so, if it is in the expected format\r\n  if (msg.bot_profile?.name !== 'giphy' || !msg.blocks?.[0]?.image_url) {\r\n    return null;\r\n  }\r\n  const giphyURL = msg.blocks[0].image_url;\r\n  const image = await fetch(giphyURL);\r\n\r\n  if (image.status !== 200) {\r\n    logger.error(\r\n      `Giphy attachment download failed with status ${image.status}`,\r\n      { url: msg.blocks?.[0]?.image_url },\r\n    );\r\n    return null;\r\n  }\r\n\r\n  const contentLength = image.headers.get('Content-Length');\r\n  const contentType = image.headers.get('Content-Type');\r\n\r\n  if (!contentLength || !contentType) {\r\n    logger.error(\r\n      `Couldn't find necessary headers in order to upload giphy image`,\r\n      { url: msg.blocks?.[0]?.image_url, contentLength, contentType },\r\n    );\r\n    return null;\r\n  }\r\n\r\n  const fileID = uuid();\r\n\r\n  const result = await uploadToS3AndCreateFileEntity({\r\n    logger,\r\n    fileID,\r\n    fileName: `giphy_${msg.blocks[0].title?.text}`,\r\n    size: Number(contentLength),\r\n    mimetype: contentType,\r\n    file: image.body!,\r\n    viewer,\r\n  });\r\n\r\n  if (!result) {\r\n    return null;\r\n  }\r\n\r\n  return fileID;\r\n}\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport type { DisplayableUser } from 'common/util/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\n// Returns the Slack profile linked to the user but also from the workspace\r\n// linked to the viewer org (old, non-unified profile approach)\r\nexport async function loadLinkedSlackUserOrgScoped(\r\n  user: UserEntity,\r\n  context: RequestContext,\r\n  orgID: UUID,\r\n): Promise<UserEntity | null> {\r\n  if (user.externalProvider === 'slack') {\r\n    return user;\r\n  }\r\n\r\n  const linkedUser =\r\n    await context.loaders.linkedUsersLoader.loadLinkedUserFromSourceOrgScoped(\r\n      user.id,\r\n      orgID,\r\n    );\r\n  if (!linkedUser) {\r\n    return null;\r\n  }\r\n  return await context.loaders.userLoader.loadUser(linkedUser.linkedUserID);\r\n}\r\n\r\n// When choosing which profile name/picture we should display for a platform user,\r\n// we consider:\r\n// 1) Slack linked user details - across ANY org the user is linked in\r\n// 2) Information set via the platform API\r\n// And we choose the pieces of information with the most recent timestamps,\r\n// i.e. last write wins\r\nexport async function detailsForDisplay(\r\n  user: UserEntity,\r\n  context: RequestContext,\r\n): Promise<\r\n  DisplayableUser & { name: string | null; screenName: string | null }\r\n> {\r\n  async function determineUser() {\r\n    let platformUser: UserEntity | null =\r\n      user.externalProvider === 'platform' ? user : null;\r\n\r\n    // The user could be a Slack user if it's an extension user, in which case it's\r\n    // easy to choose the profile - just use the Slack info\r\n    // In the platform world, it could be a Slack user if we are dealing with profiles\r\n    // for the mention list, or for a message which was a reply from Slack (in a\r\n    // mirrored thread or a reply to a Cordbot notification).  In this case, we\r\n    // should check to see if there is a linked platform user, and if so we need to\r\n    // find the right profile based on that platform user's profile plus the profile\r\n    // of the Slack user they are MOST RECENTLY linked to - which might not actually\r\n    // be the one we started with (in the case that the platform user has linked\r\n    // to multiple different Slack users across different platform orgs)\r\n    if (user.externalProvider === 'slack') {\r\n      if (!context.session.viewer.platformApplicationID) {\r\n        return {\r\n          id: user.id,\r\n          ...getUnifiedProfile(null, user, undefined),\r\n        };\r\n      }\r\n\r\n      // Look to see if there is a platform user in the viewer org which is linked\r\n      // to this slack user\r\n      // Todo: how do we know which platform org we are looking in the context of,\r\n      // if we are taking orgs out of viewer?  We don't need to know for org members\r\n      // context list/mention list because we only load Slack IDs that are NOT already\r\n      // linked (or email matched).  But we will need to know for imported message\r\n      // authors.\r\n\r\n      let linking = null;\r\n      if (context.session.viewer.orgID) {\r\n        linking =\r\n          await context.loaders.linkedUsersLoader.loadPlatformUserFromLinkedUserID(\r\n            {\r\n              linkedUserID: user.id,\r\n              sourceOrgID: context.session.viewer.orgID,\r\n            },\r\n          );\r\n      }\r\n\r\n      // If there is, this platform user will be the basis of the next steps\r\n      // (as if we'd started with this platform user in the first place)\r\n      // If not, we will return the vanilla Slack profile\r\n      platformUser = linking\r\n        ? await context.loaders.userLoader.loadUser(linking.sourceUserID)\r\n        : null;\r\n\r\n      // But if the linked user is deleted, pretend there's nobody linked\r\n      if (platformUser?.state === 'deleted') {\r\n        platformUser = null;\r\n      }\r\n    }\r\n\r\n    // This is a Slack user and we didn't find a platform user connected to it,\r\n    // so just return the Slack user profile\r\n    if (!platformUser) {\r\n      return {\r\n        id: user.id,\r\n        ...getUnifiedProfile(null, user, undefined),\r\n      };\r\n    }\r\n\r\n    // Find the most recently linked slack user to the platform user - this may\r\n    // or may not be the one this resolver has been called for ('this')\r\n    const mostRecentLinking =\r\n      await context.loaders.linkedUsersLoader.loadLatestLinkedUserFromSourceAllOrgs(\r\n        platformUser.id,\r\n      );\r\n\r\n    const mostRecentLinkedProfile = mostRecentLinking\r\n      ? await context.loaders.userLoader.loadUser(\r\n          mostRecentLinking.linkedUserID,\r\n        )\r\n      : null;\r\n\r\n    const displayDetails = getUnifiedProfile(\r\n      platformUser,\r\n      mostRecentLinkedProfile,\r\n      mostRecentLinking?.linkedTimestamp,\r\n    );\r\n\r\n    return {\r\n      id: user.id,\r\n      name:\r\n        displayDetails.name ??\r\n        emailUsername(user.email, context.logger) ??\r\n        'Unknown',\r\n      screenName: displayDetails.screenName,\r\n      profilePictureURL: displayDetails.profilePictureURL ?? null,\r\n    };\r\n  }\r\n\r\n  const consolidatedUser = await determineUser();\r\n  return {\r\n    ...consolidatedUser,\r\n    displayName: userDisplayName(consolidatedUser),\r\n    fullName: userFullName(consolidatedUser),\r\n  };\r\n}\r\n\r\n// This function is a hack to improve UX for users for which we don't have\r\n// any name-related information (ie. no name, {first,last,screen}Name). For\r\n// such users, we pretend that their name is the username they use in their\r\n// email. At the moment this only affects platform users.\r\nfunction emailUsername(email: string | null, logger: Logger) {\r\n  if (!email) {\r\n    return null;\r\n  }\r\n\r\n  const atIndex = email.lastIndexOf('@');\r\n  if (atIndex === -1) {\r\n    // an email without @ sign. How strange.\r\n    // this should never happen, if it does I would like to know about\r\n    // this so that we can update the logic here.\r\n    logger.error('profile with strange email - @ missing', {\r\n      email,\r\n    });\r\n\r\n    return email;\r\n  }\r\n  return email.substring(0, atIndex);\r\n}\r\n\r\nfunction getUnifiedProfile(\r\n  platformUser: UserEntity | null,\r\n  slackUser: UserEntity | null,\r\n  linkedTimestamp: Date | undefined,\r\n) {\r\n  if (!platformUser && !slackUser) {\r\n    throw new Error('Must have at least one profile');\r\n  }\r\n\r\n  // If we're just dealing with a Slack profile, return the Slack profile info\r\n  if (!platformUser) {\r\n    return {\r\n      name: slackUser!.name,\r\n      screenName: slackUser!.screenName,\r\n      profilePictureURL: slackUser!.profilePictureURL,\r\n    };\r\n  }\r\n\r\n  // If we have a platform profile (and maybe a Slack profile), let's assemble\r\n  // the various possible options their names and profile picture could be\r\n  const nameOptions = [\r\n    {\r\n      // Api uploaded via platform api\r\n      timestamp: platformUser.nameUpdatedTimestamp,\r\n      fields: {\r\n        name: platformUser.name,\r\n        // in practice screenName can only be set via Slack\r\n        screenName: platformUser.screenName,\r\n      },\r\n    },\r\n    // Linked info: a platform user linked to a Slack user\r\n    {\r\n      timestamp: linkedTimestamp,\r\n      fields: {\r\n        name: slackUser?.name ?? null,\r\n        screenName: slackUser?.screenName ?? null,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const profilePictureOptions = [\r\n    // Api uploaded: via slack for extension user, or platform api for sdk user\r\n    {\r\n      timestamp: platformUser.profilePictureURLUpdatedTimestamp,\r\n      fields: {\r\n        profilePictureURL: platformUser.profilePictureURL,\r\n      },\r\n    },\r\n    // Linked info: a platform user linked to a Slack user\r\n    {\r\n      timestamp: linkedTimestamp,\r\n      fields: {\r\n        profilePictureURL: slackUser?.profilePictureURL ?? null,\r\n      },\r\n    },\r\n  ];\r\n\r\n  // Find the most recent names\r\n  const mostRecentNames = nameOptions.reduce((acc, el) =>\r\n    !acc.timestamp || (el.timestamp && el.timestamp > acc.timestamp) ? el : acc,\r\n  );\r\n\r\n  // And the most recent profile picture\r\n  const mostRecentProfilePictureURL = profilePictureOptions.reduce((acc, el) =>\r\n    !acc.timestamp || (el.timestamp && el.timestamp > acc.timestamp) ? el : acc,\r\n  );\r\n\r\n  return { ...mostRecentNames.fields, ...mostRecentProfilePictureURL.fields };\r\n}\r\n\r\nexport const userDisplayName = (user: {\r\n  name: string | null | undefined;\r\n  screenName: string | null | undefined;\r\n}) => user.screenName || user.name || 'unknown';\r\n\r\nexport const userFullName = (user: {\r\n  name: string | null | undefined;\r\n  screenName: string | null | undefined;\r\n}) => user.name || user.screenName || 'Unknown';\r\n", "import { Buffer } from 'buffer';\r\nimport isValidDataURL from 'valid-data-url';\r\n\r\nexport const MAX_UPLOAD_SIZE = 100 * 1024 * 1024; // 100 MB\r\nconst MAX_PROFILE_PICTURE_UPLOAD_SIZE = 5 * 1024 * 1024; // 5 MB\r\nexport const RESIZE_PROFILE_PICTURE_THRESHOLD = 0.1 * 1024 * 1024; // 0.1 MB\r\nconst MAX_APPLICATION_ASSET_UPLOAD_SIZE = 5 * 1024 * 1024; // 5 MB\r\n\r\nexport const MIN_RESIZED_PROFILE_PICTURE_DIMENSION = 512;\r\n\r\nconst ALLOWED_APPLICATION_ASSET_MIME_TYPES = [\r\n  'image/jpeg',\r\n  'image/jpg',\r\n  'image/png',\r\n  'image/gif',\r\n];\r\n\r\nconst ALLOWED_PROFILE_PICTURE_MIME_TYPES = [\r\n  'image/jpeg',\r\n  'image/jpg',\r\n  'image/png',\r\n];\r\n\r\n// This was based on\r\n// * https://slack.com/intl/en-gb/help/articles/1500002249342-Restricted-file-types-in-Slack-Connect\r\n// * https://support.google.com/mail/answer/6590?hl=en-GB#zippy=%2Cmessages-that-have-attachments\r\n// * https://support.microsoft.com/en-us/office/blocked-attachments-in-outlook-434752e1-02d3-4e90-9124-8b81e49a8519\r\nconst BANNED_FILE_EXTENSIONS = [\r\n  '.7z', // 7-ZIP\r\n  '.ade', // Microsoft Access project extension\r\n  '.adp', // Microsoft Access project\r\n  '.apk', // Android application\r\n  '.app', // Windows application\r\n  '.application', // ClickOnce deployment manifest file\r\n  '.appref-ms', // ClickOnce application reference file\r\n  '.appx', // Windows application\r\n  '.appxbundle', // Windows application\r\n  '.asp', // ASP file\r\n  '.aspx', // ASP file\r\n  '.asx', // ASF redirector file\r\n  '.bas', // BASIC source code\r\n  '.bat', // Windows batch file\r\n  '.bgi', // Borland graphics interface\r\n  '.cab', // Windows cabinet file\r\n  '.cer', // Certificate file\r\n  '.chm', // Windows help module\r\n  '.cmd', // Windows command script\r\n  '.cnt', // Microsoft help workshop application\r\n  '.com', // Windows command script\r\n  '.cpl', // Windows control panel\r\n  '.crt', // Certificate file\r\n  '.csh', // csh script\r\n  '.der', // X509 certificate file\r\n  '.diagcab', // Windows troubleshooting cabinet file\r\n  '.diagcfg', // Windows troubleshooting config file\r\n  '.dll', // Windows dynamically linked library\r\n  '.dmg', // MacOS disk image\r\n  '.exe', // Windows executable\r\n  '.fxp', // Microsoft FoxPro compiled source\r\n  '.gadget', // Windows Vista gadget\r\n  '.grp', // Microsoft program group\r\n  '.gz', // GZip file\r\n  '.hlp', // Windows help file\r\n  '.hpj', // AppWizard Help project\r\n  '.hta', // HTML application file\r\n  '.htc', // HTML component file\r\n  '.img', // Disk image\r\n  '.inf', // Information or setup file\r\n  '.ins', // Windows internet settings file\r\n  '.ipa', // iOS application\r\n  '.iso', // Disk image\r\n  '.isp', // IIS internet settings file\r\n  '.its', // Internet document set\r\n  '.jar', // Java binary code\r\n  '.jnlp', // Java Web Start file\r\n  '.js', // JavaScript source file\r\n  '.jse', // JScript encoded file\r\n  '.jsp', // Jakarta server pages source file\r\n  '.ksh', // ksh shell script\r\n  '.lib', // Generic library file\r\n  '.lnk', // Windows shortcut\r\n  '.mad', // Microsoft Access module shortcut\r\n  '.maf', // Microsoft Access file\r\n  '.mag', // Microsoft Access diagram shortcut\r\n  '.mam', // Microsoft Access macro shortcut\r\n  '.maq', // Microsoft Access query shortcut\r\n  '.mar', // Microsoft Access report shortcut\r\n  '.mas', // Microsoft Access stored procedures\r\n  '.mat', // Microsoft Access table shortcut\r\n  '.mau', // Media attachment unit\r\n  '.mav', // Microsoft Access view shortcut\r\n  '.maw', // Microsoft Access data access page\r\n  '.mcf', // Media container format\r\n  '.mda', // Microsoft Access add-in\r\n  '.mdb', // Microsoft Access application\r\n  '.mde', // Microsoft Access add-in\r\n  '.mdt', // Microsoft Access add-in data\r\n  '.mdw', // Microsoft Access workgroup information\r\n  '.mdz', // Microsoft Access wizard template\r\n  '.msc', // Microsoft management console snap-in\r\n  '.msh', // Microsoft shell\r\n  '.msh1', // Microsoft shell\r\n  '.msh1xml', // Microsoft shell\r\n  '.msh2', // Microsoft shell\r\n  '.msh2xml', // Microsoft shell\r\n  '.mshxml', // Microsoft shell\r\n  '.msi', // Windows installer\r\n  '.msix', // Windows installer\r\n  '.msixbundle', // Windows installer\r\n  '.msp', // Windows OS patch file\r\n  '.mst', // Windows installer settings file\r\n  '.msu', // Windows update file\r\n  '.nsh', // Nullsoft installer file\r\n  '.ops', // Office profile settings file\r\n  '.osd', // Open software description\r\n  '.pcd', // Microsoft visual test\r\n  '.pif', // Windows shortcut\r\n  '.pl', // Perl script\r\n  '.plg', // Developer Studio build log\r\n  '.prf', // Windows system file\r\n  '.prg', // Windows program file\r\n  '.printerexport', // Printer backup File\r\n  '.ps1', // Windows PowerShell script\r\n  '.ps1xml', // Windows PowerShell script\r\n  '.ps2', // Windows PowerShell script\r\n  '.ps2xml', // Windows PowerShell script\r\n  '.psc1', // Windows PowerShell script\r\n  '.psc2', // Windows PowerShell script\r\n  '.psd1', // Windows PowerShell script\r\n  '.psdm1', // Windows PowerShell script\r\n  '.pst', // MS Exchange address book file\r\n  '.py', // Python script\r\n  '.pyc', // Python script\r\n  '.pyo', // Python script\r\n  '.pyw', // Python script\r\n  '.pyz', // Python script\r\n  '.pyzw', // Python script\r\n  '.reg', // Windows Registry file\r\n  '.scf', // Windows Explorer command\r\n  '.scr', // Windows screensaver\r\n  '.sct', // Windows scriptlet\r\n  '.shb', // Windows shortcut\r\n  '.shs', // Shell scrap object\r\n  '.sys', // Windows system settings\r\n  '.tar', // TAR archive file\r\n  '.theme', // Windows desktop theme\r\n  '.tmp', // Temporary file\r\n  '.url', // URL file\r\n  '.vb', // Visual Basic source file\r\n  '.vbe', // Visual Basic executable\r\n  '.vbp', // Visual Basic project file\r\n  '.vbs', // Visual Basic script file\r\n  '.vhd', // Windows Virtual PC hard disk image\r\n  '.vhdx', // Windows Virtual PC hard disk image\r\n  '.vsmacros', // Visual Studio macros\r\n  '.vsw', // Microsoft Visio workspace file\r\n  '.vxd', // Windows virtual device driver\r\n  '.webpnp', // Internet printing file\r\n  '.website', // IE pinned site shortcut\r\n  '.ws', // Windows script file\r\n  '.wsc', // Windows scripting component\r\n  '.wsf', // Windows script file\r\n  '.wsh', // Windows script settings file\r\n  '.xbap', // Browser applications\r\n  '.xll', // Excel plugin\r\n  '.xnk', // Exchange public folder shortcut\r\n];\r\n\r\nconst BANNED_MIME_TYPES = [\r\n  'application/x-msdownload', // Windows executable\r\n  'application/x-ms-installer', // Windows installer\r\n];\r\n\r\n// Currently, only icons and images are uploaded from the dev portal.\r\n// Extend allowed types when new use cases arise.\r\nconst ALLOWED_APPLICATION_ASSET_NAMES = [\r\n  'icon',\r\n  'email-logo',\r\n  'nux-initial-open-image',\r\n  'nux-welcome-image',\r\n  'support-avatar',\r\n] as const;\r\n\r\nexport type ApplicationAssetNameType =\r\n  (typeof ALLOWED_APPLICATION_ASSET_NAMES)[number];\r\n\r\ntype FileUsage = 'attachment' | 'profile_picture' | 'application_asset';\r\n\r\ntype UploadValidator = {\r\n  nameValidator: (name: string) => boolean;\r\n  mimeTypeValidator: (mimeType: string) => boolean;\r\n  maxSize: number;\r\n};\r\n\r\nconst UPLOAD_VALIDATORS: Record<FileUsage, UploadValidator> = {\r\n  application_asset: {\r\n    nameValidator: (name: string) =>\r\n      ALLOWED_APPLICATION_ASSET_NAMES.includes(\r\n        name as ApplicationAssetNameType,\r\n      ),\r\n    mimeTypeValidator: (mimeType: string) =>\r\n      ALLOWED_APPLICATION_ASSET_MIME_TYPES.includes(mimeType),\r\n    maxSize: MAX_APPLICATION_ASSET_UPLOAD_SIZE,\r\n  },\r\n  profile_picture: {\r\n    nameValidator: (name: string) => {\r\n      const lowerName = name.toLowerCase();\r\n      return BANNED_FILE_EXTENSIONS.every((ext) => !lowerName.endsWith(ext));\r\n    },\r\n    mimeTypeValidator: (mimeType: string) =>\r\n      ALLOWED_PROFILE_PICTURE_MIME_TYPES.includes(mimeType),\r\n    maxSize: MAX_PROFILE_PICTURE_UPLOAD_SIZE,\r\n  },\r\n  attachment: {\r\n    nameValidator: (name: string) => {\r\n      const lowerName = name.toLowerCase();\r\n      return BANNED_FILE_EXTENSIONS.every((ext) => !lowerName.endsWith(ext));\r\n    },\r\n    mimeTypeValidator: (mimeType: string) =>\r\n      !BANNED_MIME_TYPES.includes(mimeType),\r\n    maxSize: MAX_UPLOAD_SIZE,\r\n  },\r\n};\r\n\r\ntype FileLike = {\r\n  name: string;\r\n  mimeType: string;\r\n  size: number;\r\n};\r\n\r\nexport type ValidationResult = {\r\n  readonly input: FileLike;\r\n  readonly name: boolean;\r\n  readonly mimeType: boolean;\r\n  readonly size: boolean;\r\n  readonly valid: boolean;\r\n};\r\n\r\nexport function validateFileForUpload(\r\n  kind: FileUsage,\r\n  input: FileLike,\r\n): ValidationResult {\r\n  const { name, mimeType, size } = input;\r\n  const validator = UPLOAD_VALIDATORS[kind];\r\n  if (!validator) {\r\n    throw new Error(`Could not find validator for type ${kind}`);\r\n  }\r\n  return {\r\n    input,\r\n    name: validator.nameValidator(name),\r\n    mimeType: validator.mimeTypeValidator(mimeType),\r\n    size: size < validator.maxSize,\r\n    get valid() {\r\n      return this.name && this.mimeType && this.size;\r\n    },\r\n  };\r\n}\r\n\r\nexport function assertValid(result: ValidationResult) {\r\n  // This should match the logic in\r\n  // server/src/public/routes/platform/files/util.ts, but it throws normal\r\n  // Errors\r\n  if (!result.name) {\r\n    throw new Error(`Cannot upload file named ${result.input.name}`);\r\n  }\r\n  if (!result.size) {\r\n    throw new Error(`Maximum file size exceeded`);\r\n  }\r\n  if (!result.mimeType) {\r\n    throw new Error(`Input ${result.input.mimeType} MIME type is not allowed`);\r\n  }\r\n}\r\n\r\nconst BASE64_SEPARATOR = ';base64,';\r\n\r\nexport function assertValidUploadDataURL(name: string, dataURL: string) {\r\n  // check string is valid data URL\r\n  const isValid = isValidDataURL(dataURL);\r\n  if (!isValid) {\r\n    throw new Error('Input is not valid dataURL');\r\n  }\r\n\r\n  // check if mime type is allowed\r\n  const separatorIndex = dataURL.indexOf(BASE64_SEPARATOR);\r\n  const mimeType = dataURL.substring(5, separatorIndex);\r\n  const buffer = bufferFromDataURL(dataURL);\r\n  assertValid(\r\n    validateFileForUpload('attachment', {\r\n      name,\r\n      mimeType,\r\n      size: buffer.length,\r\n    }),\r\n  );\r\n\r\n  return { mimeType, buffer };\r\n}\r\n\r\nexport function bufferFromDataURL(dataURL: string) {\r\n  const separatorIndex = dataURL.indexOf(BASE64_SEPARATOR);\r\n  return Buffer.from(\r\n    dataURL.substring(separatorIndex + BASE64_SEPARATOR.length),\r\n    'base64',\r\n  );\r\n}\r\n\r\nexport const readFileAsync = (file: Blob): Promise<string> =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result as string);\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n", "const ALLOWED_INLINE_IMAGE_MIME_TYPES = [\r\n  'image/jpeg',\r\n  'image/png',\r\n  'image/apng',\r\n  'image/webp',\r\n  'image/bmp',\r\n  'image/tiff',\r\n  'image/gif',\r\n];\r\n\r\nconst ALLOWED_INLINE_VIDEO_MIME_TYPES = [\r\n  'video/mp4',\r\n  'video/quicktime',\r\n  'video/webm',\r\n];\r\n\r\n/**\r\n * Returns whether the given file should be rendered as an inline image.  If\r\n * false, the file should be rendered as a download link.\r\n */\r\nexport function isInlineDisplayableImage(mimeType: string) {\r\n  return ALLOWED_INLINE_IMAGE_MIME_TYPES.includes(mimeType);\r\n}\r\n\r\nexport function isInlineDisplayableVideo(mimeType: string) {\r\n  return ALLOWED_INLINE_VIDEO_MIME_TYPES.includes(mimeType);\r\n}\r\n\r\nexport const readFileAsync = (file: Blob): Promise<string> =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result as string);\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n", "import * as Slack from '@slack/web-api';\r\nimport { unique } from 'radash';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport {\r\n  SLACK_APP_CLIENT_ID,\r\n  SLACK_DEV_APP_CLIENT_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { slackAuthRedirectURI } from 'common/util/oauth.ts';\r\nimport type {\r\n  ElementOf,\r\n  ReallyRequired,\r\n  SlackOAuthDecodeState,\r\n} from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\ninterface sendChannelMessageReturnType {\r\n  channelID: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport async function fetchAuthedSlackUser(\r\n  code: string,\r\n  isDevApp: boolean,\r\n  decodedState: SlackOAuthDecodeState,\r\n) {\r\n  // At this point, we don't have an access token, so we create the client without one\r\n  const slackClient = new Slack.WebClient();\r\n\r\n  const redirectURI = slackAuthRedirectURI(isDevApp);\r\n\r\n  const platformApplication = await ApplicationEntity.findByPk(\r\n    decodedState.data.platformApplicationID,\r\n  );\r\n\r\n  if (!platformApplication) {\r\n    throw new Error('Linking error - unable to find platform app');\r\n  }\r\n\r\n  // Returns a complete set of custom app details or null\r\n  const customAppDetails = platformApplication.getCustomSlackAppDetails();\r\n\r\n  const clientId =\r\n    customAppDetails?.clientID ??\r\n    (isDevApp ? SLACK_DEV_APP_CLIENT_ID : SLACK_APP_CLIENT_ID);\r\n\r\n  const clientSecret =\r\n    customAppDetails?.clientSecret ??\r\n    (isDevApp ? env.SLACK_DEV_APP_CLIENT_SECRET : env.SLACK_APP_CLIENT_SECRET);\r\n\r\n  const response = await slackClient.oauth.v2.access({\r\n    code,\r\n    client_id: clientId,\r\n    client_secret: clientSecret,\r\n    redirect_uri: redirectURI,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    let msg = 'Slack OAuth Failure';\r\n    if (response.error) {\r\n      msg += ': ' + response.error;\r\n    }\r\n    // TODO: Redirect to the auth app with an error\r\n    throw new Error(msg);\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nexport interface SlackUser {\r\n  id: string;\r\n  team_id: string;\r\n  name: string;\r\n  deleted: boolean;\r\n  real_name: string;\r\n  is_bot: boolean;\r\n  profile: {\r\n    email: string;\r\n    title: string;\r\n    real_name: string;\r\n    display_name: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    team: string;\r\n    // most Slack profiles have an `image_original` field, but some don't.\r\n    image_original?: string;\r\n    // there are other fields of smaller image sizes here that we could use:\r\n    // image_24, 32, 48, 72, 192, 512, 1024\r\n    image_1024?: string;\r\n    image_512?: string;\r\n    image_192?: string;\r\n    image_72?: string;\r\n    image_48?: string;\r\n    image_32?: string;\r\n    image_24?: string;\r\n  };\r\n}\r\n\r\ninterface SlackUserInfoResponse extends Slack.WebAPICallResult {\r\n  user: SlackUser;\r\n}\r\n\r\nexport async function fetchSlackUserInfo(\r\n  id: string,\r\n  accessToken: string,\r\n): Promise<SlackUserInfoResponse> {\r\n  const slackClient = new Slack.WebClient(accessToken);\r\n  const response = await slackClient.users.info({ user: id });\r\n  return response as SlackUserInfoResponse;\r\n}\r\n\r\ninterface SlackUsersListResponse extends Slack.WebAPICallResult {\r\n  members: SlackUser[];\r\n}\r\n\r\nexport async function fetchSlackUsersList(\r\n  accessToken: string,\r\n): Promise<SlackUser[]> {\r\n  let users: SlackUser[] = [];\r\n  const slackClient = new Slack.WebClient(accessToken);\r\n\r\n  let cursor = undefined;\r\n  do {\r\n    const response = (await slackClient.users.list({\r\n      cursor,\r\n      limit: 500,\r\n    })) as SlackUsersListResponse;\r\n\r\n    users = [...users, ...response.members];\r\n\r\n    cursor = response.response_metadata?.next_cursor;\r\n  } while (cursor !== undefined && cursor !== ''); // ffs slack\r\n\r\n  return users;\r\n}\r\n\r\nexport interface SlackTeam {\r\n  id: string;\r\n  name: string;\r\n  domain: string;\r\n  email_domain: string;\r\n  icon: {\r\n    // there are other fields of smaller image sizes here that we could use:\r\n    // image_34, 44, 68, 88, 102, 132, 230\r\n    image_original: string;\r\n  };\r\n}\r\n\r\ninterface SlackTeamInfoResponse extends Slack.WebAPICallResult {\r\n  team: SlackTeam;\r\n}\r\n\r\nexport async function fetchSlackTeamInfo(\r\n  accessToken: string,\r\n): Promise<SlackTeamInfoResponse> {\r\n  const slackClient = new Slack.WebClient(accessToken);\r\n  const response = await slackClient.team.info();\r\n  return response as SlackTeamInfoResponse;\r\n}\r\n\r\nexport async function sendPrivateMessage(\r\n  accessToken: string,\r\n  recipientUserID: string,\r\n  notificationText: string,\r\n  messageBlocks: Slack.KnownBlock[],\r\n  username: string | undefined,\r\n  iconURL: string | undefined,\r\n): Promise<sendChannelMessageReturnType | null> {\r\n  if (process.env.IS_TEST) {\r\n    return null;\r\n  }\r\n\r\n  const slackClient = new Slack.WebClient(accessToken);\r\n  // https://api.slack.com/methods/conversations.open\r\n  try {\r\n    const conversationResponse = await slackClient.conversations.open({\r\n      users: [recipientUserID].join(','),\r\n      return_im: true, // This tells us if the channel is new, so we can send a NUX message.\r\n    });\r\n\r\n    if (!conversationResponse.ok || !conversationResponse.channel?.id) {\r\n      console.log(conversationResponse);\r\n      return null;\r\n    }\r\n    const channelId = conversationResponse.channel.id;\r\n\r\n    // https://api.slack.com/methods/chat.postMessage\r\n    const response = await slackClient.chat.postMessage({\r\n      channel: channelId,\r\n      text: notificationText, // used for notifications\r\n      blocks: messageBlocks, // Actual body of the message\r\n      username,\r\n      icon_url: iconURL,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.log(response);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      channelID: response.channel as string,\r\n      timestamp: response.ts as string,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface SendChannelMessageArgs {\r\n  slackBotCredentials: { bot_access_token: string };\r\n  channelID: string;\r\n  text: string;\r\n  blocks?: Slack.KnownBlock[];\r\n  threadTS?: string;\r\n  username?: string;\r\n  iconURL?: string;\r\n}\r\n\r\nexport async function sendChannelMessage({\r\n  slackBotCredentials,\r\n  channelID,\r\n  text,\r\n  blocks,\r\n  threadTS,\r\n  username,\r\n  iconURL,\r\n}: SendChannelMessageArgs): Promise<sendChannelMessageReturnType | null> {\r\n  const slackClient = new Slack.WebClient(slackBotCredentials.bot_access_token);\r\n  try {\r\n    // https://api.slack.com/methods/chat.postMessage\r\n    const response = await slackClient.chat.postMessage({\r\n      channel: channelID,\r\n      thread_ts: threadTS,\r\n      text,\r\n      ...(blocks ? { blocks } : {}),\r\n      username,\r\n      icon_url: iconURL,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.log(response);\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      channelID: response.channel as string,\r\n      timestamp: response.ts as string,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function sendHelpMessage(\r\n  accessToken: string,\r\n  recipientUserID: string,\r\n  text: string,\r\n  onlyPostIfConversationEmpty = false,\r\n) {\r\n  const slackClient = new Slack.WebClient(accessToken);\r\n\r\n  const conversationResponse = await slackClient.conversations.open({\r\n    users: recipientUserID,\r\n    return_im: true, // This tells us if the channel is new, so we can send a NUX message.\r\n  });\r\n\r\n  if (!conversationResponse.ok || !conversationResponse.channel?.id) {\r\n    throw new Error('conversations.open failed');\r\n  }\r\n\r\n  const channelId = conversationResponse.channel.id;\r\n\r\n  if (onlyPostIfConversationEmpty && conversationResponse.channel?.latest) {\r\n    // There is at least one message in this conversation already.\r\n    return;\r\n  }\r\n\r\n  const postMessageResponse = await slackClient.chat.postMessage({\r\n    channel: channelId,\r\n    text,\r\n    blocks: [{ type: 'section', text: { type: 'mrkdwn', text } }],\r\n  });\r\n\r\n  if (!postMessageResponse.ok) {\r\n    throw new Error('conversations.open failed');\r\n  }\r\n}\r\n\r\nexport async function addCordBotToSlackChannels(\r\n  _context: RequestContext,\r\n  botAccessToken: string,\r\n  channelIDs: string[],\r\n) {\r\n  const slackClient = new Slack.WebClient(botAccessToken);\r\n\r\n  return await Promise.all(\r\n    channelIDs.map((channel) =>\r\n      slackClient.conversations.join({ channel }).then(\r\n        (_) => ({ success: true, channelID: channel, error: null }),\r\n        (error) => ({ success: false, channelID: channel, error }),\r\n      ),\r\n    ),\r\n  );\r\n}\r\n\r\n// A version of Slack.ConversationsListResponse with all the fields we care\r\n// about required and non-nullable\r\ntype ValidSlackChannelsListResponse = {\r\n  ok: boolean;\r\n  channels: ReallyRequired<\r\n    ElementOf<NonNullable<Slack.ConversationsListResponse['channels']>>\r\n  >[];\r\n};\r\n\r\nexport async function fetchSlackChannelList(slackClient: Slack.WebClient) {\r\n  let cursor = undefined;\r\n  const channels = [];\r\n\r\n  do {\r\n    const response: Slack.ConversationsListResponse =\r\n      await slackClient.conversations.list({\r\n        cursor,\r\n        types: 'public_channel',\r\n      });\r\n\r\n    if (!isValidSlackChannelsListResponse(response)) {\r\n      throw new Error(\r\n        'Malformed Slack API response (conversations.list.channels)',\r\n      );\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error('conversations.list failed');\r\n    }\r\n\r\n    channels.push(...response.channels);\r\n    cursor = response.response_metadata?.next_cursor;\r\n  } while (cursor);\r\n\r\n  // NOTE: num_members includes apps, therefore our bot is included in that\r\n  // number.\r\n  // NOTE: when there are more channels than what Slack returns in a single call\r\n  // to conversations.list, we do reperated calls using the \"cursor\" mechanism.\r\n  // Apparently, we may be getting some duplicates in that case. Hence we make\r\n  // the list unique first using `uniqBy`.\r\n  return unique(channels, ({ id }) => id).map(\r\n    ({ id, name, num_members, is_archived }) => ({\r\n      id,\r\n      name,\r\n      users: num_members,\r\n      archived: is_archived,\r\n    }),\r\n  );\r\n}\r\n\r\nfunction isValidSlackChannelsListResponse(\r\n  resp: Slack.ConversationsListResponse,\r\n): resp is ValidSlackChannelsListResponse & Slack.WebAPICallResult {\r\n  return (\r\n    resp &&\r\n    typeof resp === 'object' &&\r\n    Array.isArray(resp.channels) &&\r\n    resp.channels.every(\r\n      (x: any) =>\r\n        typeof x.id === 'string' &&\r\n        typeof x.name === 'string' &&\r\n        typeof x.num_members === 'number' &&\r\n        typeof x.is_archived === 'boolean',\r\n    )\r\n  );\r\n}\r\n", "import {\r\n  CORD_TEST_SLACK_TEAM_ID,\r\n  SLACK_APP_CLIENT_ID,\r\n  SLACK_DEV_APP_CLIENT_ID,\r\n} from 'common/const/Ids.ts';\r\nimport {\r\n  API_SERVER_HOST,\r\n  API_SERVER_HOST_PRODUCTION,\r\n  SLACK_APP_REDIRECT_HOST,\r\n} from 'common/const/Urls.ts';\r\n\r\nconst slackAuthRedirectHost = SLACK_APP_REDIRECT_HOST ?? API_SERVER_HOST;\r\nconst slackAuthRedirectStatePrefix = SLACK_APP_REDIRECT_HOST\r\n  ? `[${API_SERVER_HOST}]`\r\n  : '';\r\n\r\nexport const slackAuthRedirectURI = (isDevApp: boolean) =>\r\n  `https://${slackAuthRedirectHost}/auth/slack/redirect/${\r\n    isDevApp ? 'dev' : ''\r\n  }`;\r\n\r\nexport const slackLoginURL = (\r\n  state: string,\r\n  team?: string | null,\r\n  customClientID?: string,\r\n) => {\r\n  const logInToSlackDevApp = team === CORD_TEST_SLACK_TEAM_ID;\r\n\r\n  const redirectURI = slackAuthRedirectURI(logInToSlackDevApp);\r\n\r\n  // customClientID for an external Slack app, or our purple dev app for\r\n  // Radical Test Org workspace, otherwise the normal yellow one\r\n  const clientID =\r\n    customClientID ??\r\n    (logInToSlackDevApp ? SLACK_DEV_APP_CLIENT_ID : SLACK_APP_CLIENT_ID);\r\n\r\n  const botOAuthScopes = [\r\n    'channels:history',\r\n    'channels:join',\r\n    'channels:read',\r\n    'chat:write',\r\n    'chat:write.customize',\r\n    'im:history',\r\n    'im:write',\r\n    'team:read',\r\n    'users:read',\r\n    'users:read.email',\r\n    'files:read',\r\n  ];\r\n\r\n  return [\r\n    'https://slack.com/oauth/v2/authorize?',\r\n    `scope=${botOAuthScopes.join(',')}`,\r\n    `&client_id=${clientID}`,\r\n    `&redirect_uri=${encodeURIComponent(redirectURI)}`,\r\n    `&state=${slackAuthRedirectStatePrefix}${state}`,\r\n    team ? `&team=${team}` : '',\r\n  ].join('');\r\n};\r\n\r\nexport const JIRA_AUTH_REDIRECT_URL = `https://${API_SERVER_HOST_PRODUCTION}/auth/jira/redirect/`;\r\nexport const ASANA_AUTH_REDIRECT_URL = `https://${API_SERVER_HOST}/auth/asana/redirect/`;\r\nexport const LINEAR_AUTH_REDIRECT_URL = `https://${API_SERVER_HOST}/auth/linear/redirect/`;\r\nexport const TRELLO_AUTH_REDIRECT_URL = `https://${API_SERVER_HOST}/auth/trello/redirect/`;\r\nexport const TRELLO_AUTH_LOGIN_URL = `https://${API_SERVER_HOST}/auth/trello/login/`;\r\nexport const MONDAY_AUTH_REDIRECT_URL = `https://${API_SERVER_HOST}/auth/monday/redirect/`;\r\n", "import type { Sequelize } from 'sequelize';\r\nimport type { Request } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport type { Session } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { DeploymentType, UUID } from 'common/types/index.ts';\r\nimport { ApplicationLoader } from 'server/src/entity/application/ApplicationLoader.ts';\r\nimport { HeimdallLoader } from 'server/src/entity/heimdall/HeimdallLoader.ts';\r\nimport { SegmentLogger } from 'server/src/logging/segment.ts';\r\nimport heimdallSwitches from 'common/const/HeimdallSwitches.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport type RequestWithContext = Request & {\r\n  context: RequestContext;\r\n};\r\n\r\nexport function assertRequestHasContext(req: Request): RequestContext {\r\n  if (\r\n    !('context' in req) ||\r\n    typeof req.context !== 'object' ||\r\n    !req.context ||\r\n    !('connectionID' in req.context) ||\r\n    !('session' in req.context)\r\n  ) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  return (req as RequestWithContext).context;\r\n}\r\n\r\nexport type RequestContext = {\r\n  connectionID: UUID;\r\n  session: Session;\r\n  sequelize: Sequelize;\r\n  clientVersion: string | null;\r\n  deployment: DeploymentType | null;\r\n  logger: Logger;\r\n  segmentLogger: SegmentLogger;\r\n  application: ApplicationEntity | null;\r\n  loaders: RequestContextLoaders;\r\n};\r\n\r\nexport async function contextWithSession(\r\n  session: Session,\r\n  sequelize: Sequelize,\r\n  clientVersion: string | null,\r\n  deployment: DeploymentType | null,\r\n): Promise<RequestContext> {\r\n  const connectionID = uuid();\r\n  const heimdallLoader = new HeimdallLoader(session.viewer);\r\n  const applicationLoader = new ApplicationLoader(session.viewer);\r\n  const loggingToSegment = await heimdallLoader.load(\r\n    heimdallSwitches.LOG_TO_SEGMENT,\r\n  );\r\n  const application = session.viewer.platformApplicationID\r\n    ? await applicationLoader.load(session.viewer.platformApplicationID)\r\n    : null;\r\n  return await buildContext(\r\n    session,\r\n    sequelize,\r\n    clientVersion,\r\n    deployment,\r\n    connectionID,\r\n    application,\r\n    loggingToSegment?.isOn() ?? false,\r\n  );\r\n}\r\n\r\nasync function buildContext(\r\n  session: Session,\r\n  sequelize: Sequelize,\r\n  clientVersion: string | null,\r\n  deployment: DeploymentType | null,\r\n  connectionID: UUID,\r\n  application: ApplicationEntity | null,\r\n  logToSegment: boolean,\r\n) {\r\n  return {\r\n    connectionID,\r\n    session,\r\n    sequelize,\r\n    clientVersion,\r\n    application,\r\n    logger: new Logger(session.viewer, { connectionID, deployment }),\r\n    deployment,\r\n    segmentLogger: new SegmentLogger(\r\n      session,\r\n      clientVersion,\r\n      connectionID,\r\n      deployment,\r\n      logToSegment,\r\n      application,\r\n    ),\r\n    loaders: await getNewLoaders(session.viewer),\r\n  };\r\n}\r\n\r\nasync function contextWithOtherOrg(\r\n  context: RequestContext,\r\n  orgID: UUID,\r\n): Promise<RequestContext> {\r\n  const userID = assertViewerHasUser(context.session.viewer);\r\n  const [org, orgMembership] = await Promise.all([\r\n    context.loaders.orgLoader.loadOrg(orgID),\r\n    context.loaders.orgMembersLoader.loadUserOrgMembership(userID, orgID),\r\n  ]);\r\n  if (!org || !orgMembership) {\r\n    throw new CordError(\r\n      'Cannot create context for org user is not a member of',\r\n      { orgID },\r\n    );\r\n  }\r\n  return await buildContext(\r\n    {\r\n      ...context.session,\r\n      viewer: context.session.viewer.viewerInOtherOrg(\r\n        orgID,\r\n        org.externalProvider === 'platform' ? org.externalID : undefined,\r\n      ),\r\n    },\r\n    context.sequelize,\r\n    context.clientVersion,\r\n    context.deployment,\r\n    context.connectionID,\r\n    context.application,\r\n    context.segmentLogger.switchedOn,\r\n  );\r\n}\r\n\r\n// Used to make the unified inbox work - if a user is a member of orgs A and B,\r\n// logged in as org A but performing an action on a thread in org B from the\r\n// unified inbox, this will create a new context using the other org\r\nexport async function getRelevantContext(\r\n  originalContext: RequestContext,\r\n  threadOrgID?: UUID | null,\r\n) {\r\n  return !threadOrgID || originalContext.session.viewer.orgID === threadOrgID\r\n    ? originalContext\r\n    : await contextWithOtherOrg(originalContext, threadOrgID);\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\nexport class ApplicationLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, ApplicationEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const buckets = await ApplicationEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(buckets, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async load(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Application dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadAll() {\r\n    return await ApplicationEntity.findAll();\r\n  }\r\n\r\n  async loadApplicationsForConsoleUser(\r\n    customerID: UUID,\r\n  ): Promise<ApplicationEntity[]> {\r\n    return await ApplicationEntity.findAll({\r\n      where: { customerID },\r\n      order: [['name', 'ASC']],\r\n    });\r\n  }\r\n\r\n  async countActiveUsersForApplications(\r\n    applicationIDs: UUID[],\r\n  ): Promise<Map<UUID, number>> {\r\n    if (!applicationIDs.length) {\r\n      return new Map();\r\n    }\r\n\r\n    const results = await getSequelize().query<any>(\r\n      `SELECT applications.id AS id, COUNT(users) AS users_count\r\n        FROM cord.applications\r\n        LEFT JOIN cord.users on users.\"platformApplicationID\" = applications.id\r\n        WHERE applications.id IN (:application_ids)\r\n        AND users.state = 'active'\r\n        GROUP BY applications.id;`,\r\n      {\r\n        replacements: { application_ids: applicationIDs },\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    const retval = new Map<UUID, number>();\r\n    results.forEach((r) => retval.set(r.id, r.users_count));\r\n    return retval;\r\n  }\r\n\r\n  async countOrgsForApplications(\r\n    applicationIDs: UUID[],\r\n  ): Promise<Map<UUID, number>> {\r\n    if (!applicationIDs.length) {\r\n      return new Map();\r\n    }\r\n\r\n    const results = await getSequelize().query<any>(\r\n      `SELECT applications.id AS id, COUNT(orgs) AS orgs_count\r\n      FROM cord.applications\r\n      LEFT JOIN cord.orgs on orgs.\"platformApplicationID\" = applications.id\r\n      WHERE applications.id IN (:application_ids)\r\n      GROUP BY applications.id;`,\r\n      {\r\n        replacements: { application_ids: applicationIDs },\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    const retval = new Map<UUID, number>();\r\n    results.forEach((r) => retval.set(r.id, r.orgs_count));\r\n    return retval;\r\n  }\r\n\r\n  async getFirstOrgInApplication(\r\n    applicationID: UUID,\r\n  ): Promise<OrgEntity | undefined> {\r\n    const orgs = await OrgEntity.findAll({\r\n      where: {\r\n        platformApplicationID: applicationID,\r\n      },\r\n      order: [['createdTimestamp', 'ASC']],\r\n      limit: 1,\r\n    });\r\n\r\n    return orgs[0];\r\n  }\r\n\r\n  async getFirstUserInApplication(\r\n    applicationID: UUID,\r\n  ): Promise<UserEntity | undefined> {\r\n    const users = await UserEntity.findAll({\r\n      where: {\r\n        platformApplicationID: applicationID,\r\n      },\r\n      order: [['createdTimestamp', 'ASC']],\r\n      limit: 1,\r\n    });\r\n\r\n    return users[0];\r\n  }\r\n\r\n  async isComponentInitializedForApplication(\r\n    applicationID: UUID,\r\n  ): Promise<boolean> {\r\n    const [{ exists: initializedEventExists }] = await getSequelize().query<{\r\n      exists: boolean;\r\n    }>(\r\n      `SELECT EXISTS (\r\n        SELECT 1 FROM events e\r\n        WHERE e.type = 'sdk-components-used'\r\n        AND e.\"platformApplicationID\" = $1\r\n      )`,\r\n      {\r\n        bind: [applicationID],\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    return initializedEventExists;\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { HeimdallEntity } from 'server/src/entity/heimdall/HeimdallEntity.ts';\r\nimport env from 'server/src/config/Env.ts';\r\n\r\nexport class HeimdallLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    // TODO: Add caching.\r\n  }\r\n\r\n  async load(key: string) {\r\n    return await HeimdallEntity.findOne({\r\n      where: { key, tier: env.CORD_TIER },\r\n    });\r\n  }\r\n\r\n  async loadAll() {\r\n    return await HeimdallEntity.findAll({ where: { tier: env.CORD_TIER } });\r\n  }\r\n}\r\n", "import { Analytics } from '@segment/analytics-node';\r\nimport type { Session } from 'server/src/auth/index.ts';\r\nimport type { DeploymentType, JsonObject, UUID } from 'common/types/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport class SegmentLogger {\r\n  private partnerAnalytics: Analytics | null;\r\n  constructor(\r\n    public session: Session,\r\n    public clientVersion: string | null,\r\n    public connectionID: UUID,\r\n    public deployment: DeploymentType | null,\r\n    // TODO(flooey): We don't need a boolean value for this\r\n    public switchedOn: boolean,\r\n    application: ApplicationEntity | null,\r\n  ) {\r\n    if (application?.segmentWriteKey) {\r\n      this.partnerAnalytics = new Analytics({\r\n        writeKey: application.segmentWriteKey,\r\n      });\r\n    } else {\r\n      this.partnerAnalytics = null;\r\n    }\r\n  }\r\n\r\n  partnerLog(\r\n    eventName: string,\r\n    metadata: JsonObject,\r\n    payload: JsonObject,\r\n    customEventMetadata: JsonObject | undefined,\r\n  ): void {\r\n    if (\r\n      this.switchedOn &&\r\n      this.partnerAnalytics !== null &&\r\n      this.session.viewer.externalUserID &&\r\n      INCLUDED_EVENTS.has(eventName)\r\n    ) {\r\n      this.partnerAnalytics.track({\r\n        userId: this.session.viewer.externalUserID,\r\n        event: 'cord-' + eventName,\r\n        properties: {\r\n          organization_id: this.session.viewer.externalOrgID,\r\n          group_id: this.session.viewer.externalOrgID,\r\n          location: metadata.url,\r\n          method: payload.method,\r\n          type: payload.type,\r\n          task_provider: payload.provider,\r\n          mentions: payload.mentions,\r\n          attachments: payload.attachments,\r\n          annotations: payload.annotations,\r\n          new_thread: payload.newThread,\r\n          cord_location: payload.location,\r\n          to: payload.to,\r\n          thread_id: payload.threadID,\r\n          message_id: payload.messageID,\r\n          service: payload.service,\r\n          reason: payload.reason,\r\n          email: payload.email,\r\n          success: payload.success,\r\n          custom_event_metadata: customEventMetadata,\r\n        },\r\n        timestamp: new Date(),\r\n      });\r\n    }\r\n  }\r\n\r\n  publishMessageSendEvent(\r\n    thread: ThreadEntity,\r\n    message: MessageEntity,\r\n    newThread: boolean,\r\n    mentionsCount: number,\r\n  ) {\r\n    const metadata = {\r\n      url: thread.url,\r\n    };\r\n    const payload = {\r\n      mentions: mentionsCount,\r\n      threadID: thread.externalID,\r\n      newThread: newThread,\r\n      messageID: message.externalID,\r\n    };\r\n    // Currently not supported for this event because it is not easily available on the server\r\n    const customEventMetadata = {};\r\n    this.partnerLog('message-send', metadata, payload, customEventMetadata);\r\n  }\r\n}\r\n\r\nconst INCLUDED_EVENTS = new Set([\r\n  'click-share-thread-to-email-submit-button',\r\n  'click-thread-menu-share-to-email',\r\n  'click-upgrade-plan',\r\n  'connect-service-failed',\r\n  'connect-service-started',\r\n  'connect-service-successful',\r\n  'create-new-profile',\r\n  'create-task',\r\n  'disconnect-service',\r\n  'hover-for-presence',\r\n  'insert-assignee',\r\n  'insert-mention',\r\n  'logout',\r\n  'message-delete-undone',\r\n  'message-deleted',\r\n  'message-send',\r\n  /* Added to support a customer who uses the customEventMetadata field\r\n  that message-send used to send before we moved it server side \r\n  */\r\n  'message-send-ui',\r\n  'message-updated',\r\n  'navigate-to',\r\n  'remove-task',\r\n  'render-embedded-launcher',\r\n  'render-sidebar-open',\r\n  'select-profile',\r\n  'slack-login-launched',\r\n  'subscribed-to-thread',\r\n  'thread-resolved',\r\n  'thread-shared-to-email',\r\n  'thread-unresolved',\r\n  'toggle-sidebar-visibility',\r\n  'unsubscribed-from-thread',\r\n  'update-profile',\r\n]);\r\n", "const heimdallSwitches = {\r\n  AUTOMATIC_DEPLOYS_ON: 'automaticDeploy', // We only do automatic deployments when this is true.\r\n  LOG_TO_SEGMENT: 'LogToSegment', // We only log to segment when this is true\r\n};\r\n\r\nexport default heimdallSwitches;\r\n", "import DataLoader from 'dataloader';\r\nimport { unique } from 'radash';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasUser,\r\n  AuthProviderType,\r\n} from 'server/src/auth/index.ts';\r\nimport type {\r\n  Location,\r\n  UUID,\r\n  SortDirection,\r\n  Maybe,\r\n} from 'common/types/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport {\r\n  detailsForDisplay,\r\n  loadLinkedSlackUserOrgScoped,\r\n} from 'server/src/entity/user/util.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { PlatformID } from 'server/src/entity/common.ts';\r\nimport {\r\n  keyForPlatformID,\r\n  MAX_IDS_PER_QUERY,\r\n} from 'server/src/entity/common.ts';\r\nimport { LinkedOrgsLoader } from 'server/src/entity/linked_orgs/LinkedOrgsLoader.ts';\r\nimport type { RequestContextLoadersInternal } from 'server/src/RequestContextLoaders.ts';\r\nimport type { OrgMembersResult } from 'server/src/schema/resolverTypes.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\nimport { getPageContextHash } from 'server/src/util/hash.ts';\r\n\r\nexport class UserLoader {\r\n  dataloader: DataLoader<UUID, UserEntity | null>;\r\n  orgCheckedDataloader: DataLoader<UUID, UserEntity | null>;\r\n  loadUsersByEmailDataloader: DataLoader<\r\n    {\r\n      email: string;\r\n      orgID: UUID;\r\n    },\r\n    UserEntity[]\r\n  >;\r\n  platformProfileDataloader: DataLoader<PlatformID, UserEntity | null, string>;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: () => RequestContextLoadersInternal | null,\r\n    cache = false,\r\n  ) {\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const users = await UserEntity.findAll({\r\n          where: {\r\n            id: unique(keys),\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(users, keys);\r\n      },\r\n      { cache },\r\n    );\r\n\r\n    this.orgCheckedDataloader = new DataLoader(\r\n      async (userIDs) => {\r\n        // dataloader does not de-duplicate keys (probably because we set \"cache: false\")\r\n        const uniqUserIDs = unique(userIDs);\r\n        const orgIDs = await (\r\n          this.loaders()?.linkedOrgsLoader ?? new LinkedOrgsLoader(this.viewer)\r\n        ).getOrgIDs();\r\n\r\n        const users = await getSequelize().query<UserEntity>(\r\n          `SELECT users.* FROM users, org_members\r\n             WHERE users.id = ANY($1)\r\n             AND users.id = org_members.\"userID\"\r\n             AND org_members.\"orgID\" = ANY($2);`,\r\n          {\r\n            bind: [uniqUserIDs, orgIDs],\r\n            type: QueryTypes.SELECT,\r\n            model: UserEntity,\r\n          },\r\n        );\r\n\r\n        return inKeyOrder(users, userIDs);\r\n      },\r\n      { cache },\r\n    );\r\n\r\n    this.loadUsersByEmailDataloader = new DataLoader(\r\n      async (emailOrgs) => {\r\n        const emails = unique(emailOrgs.map(({ email }) => email));\r\n        const orgIDs = unique(emailOrgs.map(({ orgID }) => orgID));\r\n\r\n        const users = await getSequelize().query<UserEntity>(\r\n          `\r\n          SELECT users.*, org_members.\"orgID\" FROM org_members, users\r\n          WHERE users.\"email\" = ANY($1)\r\n          AND users.id = org_members.\"userID\"\r\n          AND org_members.\"orgID\" = ANY($2)\r\n          AND users.\"state\" !=  'deleted'\r\n          `,\r\n          {\r\n            bind: [emails, orgIDs],\r\n            type: QueryTypes.SELECT,\r\n            model: UserEntity,\r\n          },\r\n        );\r\n\r\n        const makeKey = (email: string, orgID: UUID) => `${email}/${orgID}`;\r\n\r\n        const index = new Map<string, UserEntity[]>();\r\n        for (const user of users) {\r\n          const key = makeKey(\r\n            user.email!,\r\n            (user.get({ plain: true }) as any).orgID, // orgID is not a column on UserEntity but is returned by this query, so it needs to be converted to a basic object to retrieve orgID\r\n          );\r\n          if (index.has(key)) {\r\n            index.get(key)!.push(user);\r\n          } else {\r\n            index.set(key, [user]);\r\n          }\r\n        }\r\n\r\n        return emailOrgs.map(\r\n          ({ email, orgID }) => index.get(makeKey(email, orgID)) ?? [],\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n\r\n    this.platformProfileDataloader = new DataLoader(\r\n      async (keys) => {\r\n        // By far the most common calling pattern is loading a bunch of users\r\n        // all from the same application, in which case we can turn this into a\r\n        // set of efficient queries (ideally one) that do an equality check on\r\n        // platformApplicationID and an IN filter on externalID.\r\n        const usersByApplication = new Map<UUID, Set<string>>();\r\n        for (const key of keys) {\r\n          if (!usersByApplication.has(key.platformApplicationID)) {\r\n            usersByApplication.set(key.platformApplicationID, new Set());\r\n          }\r\n          usersByApplication\r\n            .get(key.platformApplicationID)!\r\n            .add(key.externalID);\r\n        }\r\n        const promises = [];\r\n        for (const [platformApplicationID, userIDSet] of usersByApplication) {\r\n          const externalUserIDs = [...userIDSet];\r\n\r\n          for (\r\n            let offset = 0;\r\n            offset < externalUserIDs.length;\r\n            offset += MAX_IDS_PER_QUERY\r\n          ) {\r\n            promises.push(\r\n              getSequelize().query<UserEntity>(\r\n                `\r\n          SELECT users.* FROM users\r\n            WHERE users.\"platformApplicationID\" = $1\r\n            AND users.\"externalID\" = ANY($2)\r\n            AND users.state != 'deleted'\r\n          `,\r\n                {\r\n                  bind: [\r\n                    platformApplicationID,\r\n                    externalUserIDs.slice(offset, offset + MAX_IDS_PER_QUERY),\r\n                  ],\r\n                  type: QueryTypes.SELECT,\r\n                  model: UserEntity,\r\n                },\r\n              ),\r\n            );\r\n          }\r\n        }\r\n        const users = (await Promise.all(promises)).flat();\r\n        const index = new Map<string, UserEntity>();\r\n        for (const user of users) {\r\n          index.set(\r\n            keyForPlatformID({\r\n              platformApplicationID: user.platformApplicationID!,\r\n              externalID: user.externalID,\r\n            }),\r\n            user,\r\n          );\r\n        }\r\n        return keys.map(\r\n          (platformId) => index.get(keyForPlatformID(platformId)) ?? null,\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n  }\r\n\r\n  async loadUser(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Failed to loadUser', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadUsers(ids: UUID[]) {\r\n    const users = await Promise.all(ids.map((uid) => this.loadUser(uid)));\r\n    return users.filter(isDefined);\r\n  }\r\n\r\n  async loadUserInAnyViewerOrg(id: UUID) {\r\n    try {\r\n      if (id === this.viewer.userID) {\r\n        // Don't do an org check when loading yourself, since if you aren't in\r\n        // any orgs at all, you won't share any orgs with yourself, and so can't\r\n        // see yourself, which is silly.\r\n        return await this.loadUser(id);\r\n      }\r\n      return await this.orgCheckedDataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Failed to loadUserInAnyViewerOrg', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadUsersInViewerOrgs(userIDs: UUID[]) {\r\n    const orgIDs = await (\r\n      this.loaders()?.orgMembersLoader ?? new OrgMembersLoader(this.viewer)\r\n    ).loadAllOrgIDsForUser();\r\n\r\n    return await getSequelize().query<UserEntity>(\r\n      `SELECT users.* FROM users, org_members\r\n         WHERE users.id = ANY($1)\r\n         AND users.id = org_members.\"userID\"\r\n         AND org_members.\"orgID\" = ANY($2);`,\r\n      {\r\n        bind: [userIDs, orgIDs],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n  }\r\n\r\n  async loadUsersInApplication(appID: UUID, limit: number) {\r\n    return await UserEntity.findAll({\r\n      where: { platformApplicationID: appID },\r\n      order: [['createdTimestamp', 'DESC']],\r\n      limit,\r\n    });\r\n  }\r\n\r\n  async loadUsersInOrg(userIDs: UUID[], orgID: UUID) {\r\n    return await getSequelize().query<UserEntity>(\r\n      `\r\n      SELECT users.* FROM users, org_members\r\n      WHERE users.id = ANY($1)\r\n      AND users.id = org_members.\"userID\"\r\n      AND org_members.\"orgID\" = $2;\r\n    `,\r\n      {\r\n        bind: [userIDs, orgID],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n  }\r\n\r\n  async loadUserInOrg(userID: UUID, orgID: UUID) {\r\n    const results = await this.loadUsersInOrg([userID], orgID);\r\n    return results.length > 0 ? results[0] : null;\r\n  }\r\n\r\n  async loadUsersNoOrgCheck(userIDs: UUID[]): Promise<UserEntity[]> {\r\n    const results = await this.dataloader.loadMany(userIDs);\r\n    return results.filter(\r\n      (x): x is UserEntity => isDefined(x) && !(x instanceof Error),\r\n    );\r\n  }\r\n\r\n  async loadAllUsersInOrgPaginatedByUserID(\r\n    orgID: UUID,\r\n    after?: UUID,\r\n    limit?: number,\r\n  ): Promise<OrgMembersResult> {\r\n    const bindVariables = [orgID];\r\n\r\n    let afterCondition = '';\r\n    if (after) {\r\n      bindVariables.push(after);\r\n      afterCondition = `AND org_members.\"userID\" > $${bindVariables.length}`;\r\n    }\r\n\r\n    let limitCondition = '';\r\n    if (limit) {\r\n      bindVariables.push(limit.toString());\r\n      limitCondition = `LIMIT $${bindVariables.length}`;\r\n    }\r\n\r\n    const users = await getSequelize().query<UserEntity>(\r\n      `SELECT users.* FROM users, org_members\r\n      WHERE users.id = org_members.\"userID\"\r\n      AND org_members.\"orgID\" = $1\r\n      AND users.state != 'deleted'\r\n      ${afterCondition}\r\n      ORDER BY org_members.\"userID\" ASC\r\n      ${limitCondition}\r\n    `,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n\r\n    return {\r\n      users,\r\n      hasMore: isDefined(limit) ? users.length === limit : false,\r\n      token: users.at(-1)?.id,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * We have a valid match if any permutation of the query matches every\r\n   * part of a user's name. E.g.\r\n   * User: \"James Bond\" -> \"James\" = Match.\r\n   * User: \"James Bond\" -> \"James B\" = Match.\r\n   * User: \"James Bond\" -> \"Bond Jam\" = Match.\r\n   * \"James Bond\" -> \"James Wond\" = Not a match.\r\n   * \"James Bond\" -> \"ames\" = Not a match.\r\n   *\r\n   * Perhaps sub-optimally,\r\n   * \"James Bond\" -> \"James James\" = is a match.\r\n   * which it didn't use to be with our old front end\r\n   * approach, but I don't think is particularly bad.\r\n   */\r\n  async loadNameFilteredUsersInOrg(\r\n    orgID: UUID,\r\n    nameQuery: string | null,\r\n    platformApplicationID: UUID | null,\r\n    limit: number,\r\n    location: Maybe<Location> = undefined,\r\n    sortDirection: Maybe<SortDirection> = 'descending',\r\n  ): Promise<UserEntity[]> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const bindVariables = [orgID, userID, limit.toString()];\r\n    let appIDCondition = '';\r\n    let joinedConditionsArray: string[] = [];\r\n\r\n    if (platformApplicationID) {\r\n      bindVariables.push(platformApplicationID);\r\n      appIDCondition = `AND users.\"platformApplicationID\" = $${bindVariables.length}`;\r\n    } else {\r\n      appIDCondition = 'AND users.\"platformApplicationID\" IS NULL';\r\n    }\r\n\r\n    if (nameQuery) {\r\n      // We will search for matches in the name OR screenName fields\r\n      const nameFieldNames = ['name', 'screenName'];\r\n\r\n      const nameMatchConditions: string[][] = Array.from(\r\n        { length: nameFieldNames.length },\r\n        () => [],\r\n      );\r\n\r\n      // We want to allow for searches which specify a name in a different order from\r\n      // the database value, e.g. 'Bond James' should still match 'James Bond'\r\n      for (const token of nameQuery.split(' ')) {\r\n        bindVariables.push(token.toLowerCase());\r\n        nameFieldNames.forEach((field, index) =>\r\n          // There is an index on LOWER(user.name) and LOWER(user.screenName), which\r\n          // is faster than using ILIKE.\r\n          // We want to accept words which match our query words from the START only\r\n          // e.g. 'da' should match 'dave' but not 'adam'\r\n          // This means the search word could either be the very start of the db field,\r\n          // so 'searchWord%', or it could be the start of a subsequent word, which we\r\n          // find by '% searchWord%'\r\n          nameMatchConditions[index].push(\r\n            `(LOWER(users.\"${field}\") LIKE $${bindVariables.length} || '%' OR LOWER(users.\"${field}\") LIKE '% ' || $${bindVariables.length} || '%')`,\r\n          ),\r\n        );\r\n      }\r\n\r\n      // Whether it's the name or screenName field, each of the queried words must\r\n      // yield a match, so we combine with AND.  I.e. if you search 'James Bond' you\r\n      // must find a name which matches both 'James' AND 'Bond' - not e.g. 'James Dean'\r\n      joinedConditionsArray = nameMatchConditions.map((fieldConditions) =>\r\n        fieldConditions.join(' AND '),\r\n      );\r\n    }\r\n\r\n    let leftJoin = '';\r\n    let orderBy = '';\r\n\r\n    if (location) {\r\n      const [pageContextHash] = getPageContextHash({\r\n        providerID: null,\r\n        data: location,\r\n      });\r\n      bindVariables.push(pageContextHash);\r\n      leftJoin = `\r\n        LEFT JOIN page_visitors \r\n          ON org_members.\"orgID\" = page_visitors.\"orgID\" \r\n          AND org_members.\"userID\" = page_visitors.\"userID\" \r\n          AND page_visitors.\"pageContextHash\" = $${bindVariables.length}`;\r\n\r\n      // 0 goes to the top of the list, and 1 is at the bottom\r\n      const sortOrderCase =\r\n        sortDirection === 'descending' ? 'THEN 1 ELSE 0' : 'THEN 0 ELSE 1';\r\n      // If the viewer has been on the page, put them last so they are between\r\n      // those that have visited, and those that haven't.\r\n      orderBy = `\r\n        ORDER BY\r\n          CASE WHEN page_visitors.\"lastPresentTimestamp\" IS NULL ${sortOrderCase} END,\r\n          CASE WHEN users.id = $2 THEN 1 ELSE 0 END,\r\n          page_visitors.\"lastPresentTimestamp\" ${\r\n            sortDirection === 'descending' ? 'DESC' : 'ASC'\r\n          }`;\r\n    } else {\r\n      // Always put the viewer last\r\n      orderBy = `\r\n      ORDER BY \r\n        CASE WHEN users.id = $2 THEN 1 ELSE 0 END`;\r\n    }\r\n\r\n    const joinedConditions =\r\n      joinedConditionsArray.length > 0\r\n        ? `AND (\r\n      ${joinedConditionsArray.join(' OR ')}\r\n    )`\r\n        : '';\r\n\r\n    return await getSequelize().query<UserEntity>(\r\n      `\r\n    SELECT users.* FROM users, org_members\r\n    ${leftJoin}\r\n      WHERE users.id = org_members.\"userID\"\r\n      ${appIDCondition}\r\n      AND org_members.\"orgID\" = $1\r\n      AND users.state != 'deleted'\r\n      ${joinedConditions}\r\n      ${orderBy}\r\n      LIMIT $3;\r\n    `,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n  }\r\n\r\n  async loadUsersByExternalIDsInOrg(\r\n    externalIDs: string[],\r\n    orgIDs: UUID[],\r\n  ): Promise<UserEntity[]> {\r\n    const results = await getSequelize().query<UserEntity>(\r\n      `\r\n      SELECT DISTINCT ON (users.id) users.* FROM users, org_members\r\n      WHERE users.\"externalID\" = ANY($1)\r\n      AND users.id = org_members.\"userID\"\r\n      AND org_members.\"orgID\" = ANY($2);\r\n    `,\r\n      {\r\n        bind: [externalIDs, orgIDs],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n    return results;\r\n  }\r\n\r\n  async loadUserForEmailInOrg(email: string, orgID: UUID) {\r\n    return await this.loadUsersByEmailDataloader.load({ email, orgID });\r\n  }\r\n\r\n  async loadUserForSlackUserWithinViewerOrg(slackUserID: string) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const results = await getSequelize().query<UserEntity>(\r\n      `\r\n        SELECT users.* FROM users, org_members\r\n        WHERE users.id = org_members.\"userID\"\r\n        AND org_members.\"orgID\" = $1\r\n        AND users.\"externalProvider\" = $2\r\n        AND users.\"externalID\" = $3\r\n        LIMIT 1;\r\n    `,\r\n      {\r\n        bind: [orgID, AuthProviderType.SLACK, slackUserID],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n    // raw queries will return an array even if we only ask for one row\r\n    return results.length > 0 ? results[0] : null;\r\n  }\r\n\r\n  async loadSlackUserForUserOrgScoped(context: RequestContext, userID: UUID) {\r\n    const user = await UserEntity.findByPk(userID);\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    if (!user) {\r\n      return undefined;\r\n    }\r\n    return await loadLinkedSlackUserOrgScoped(user, context, orgID);\r\n  }\r\n\r\n  // This function does not work if the application uses sock puppets,\r\n  // use loadUndeletedSockPuppets instead.\r\n  async loadUserByExternalID(platformApplicationID: UUID, externalID: string) {\r\n    return await this.platformProfileDataloader.load({\r\n      platformApplicationID,\r\n      externalID,\r\n    });\r\n  }\r\n\r\n  async loadUndeletedUser(externalUserID: string, platformApplicationID: UUID) {\r\n    const users = await getSequelize().query<UserEntity>(\r\n      `SELECT * FROM users\r\n         WHERE \"externalID\" = $1\r\n         AND \"platformApplicationID\" = $2\r\n         AND state != 'deleted';`,\r\n      {\r\n        bind: [externalUserID, platformApplicationID],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n\r\n    return users.length > 0 ? users[0] : null;\r\n  }\r\n\r\n  async loadReferencedUserData(context: RequestContext, userIDs: UUID[]) {\r\n    const users = await this.dataloader.loadMany(userIDs);\r\n    return await Promise.all(\r\n      users\r\n        .filter((p): p is UserEntity => p instanceof UserEntity)\r\n        .map(async (u) => {\r\n          // Will pick the most recent name and profile pic where there is a choice\r\n          // between platform uploaded, Slack linked and user uploaded\r\n          const displayProfile = await detailsForDisplay(u, context);\r\n\r\n          return {\r\n            id: u.id,\r\n            name: displayProfile.displayName,\r\n          };\r\n        }),\r\n    );\r\n  }\r\n\r\n  clearAll() {\r\n    this.dataloader.clearAll();\r\n    this.orgCheckedDataloader.clearAll();\r\n    this.loadUsersByEmailDataloader.clearAll();\r\n    this.platformProfileDataloader.clearAll();\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\nimport { unique } from 'radash';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrgs } from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\n\r\nexport class LinkedOrgsLoader {\r\n  viewer: Viewer;\r\n  linkedSlackOrgIDDataloader: DataLoader<UUID, UUID | null>;\r\n  allConnectedOrgIDsPromise: Promise<UUID[]> | null = null;\r\n\r\n  constructor(viewer: Viewer, cache = false) {\r\n    this.viewer = viewer;\r\n    this.linkedSlackOrgIDDataloader = new DataLoader(\r\n      async (sourceOrgIDs) => {\r\n        const uniqOrgIDs = unique(sourceOrgIDs);\r\n        const linkedOrgs = await LinkedOrgsEntity.findAll({\r\n          where: {\r\n            sourceOrgID: uniqOrgIDs,\r\n          },\r\n        });\r\n\r\n        const index = new Map(\r\n          linkedOrgs.map((linkedOrg) => [linkedOrg.sourceOrgID, linkedOrg]),\r\n        );\r\n\r\n        return sourceOrgIDs.map(\r\n          (sourceOrgID) => index.get(sourceOrgID)?.linkedOrgID || null,\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n  }\r\n\r\n  async getConnectedSlackOrgID(orgID: UUID) {\r\n    return await this.linkedSlackOrgIDDataloader.load(orgID);\r\n  }\r\n\r\n  private async getAllConnectedOrgIDsImpl(): Promise<UUID[]> {\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    const orgLinks = await LinkedOrgsEntity.findAll({\r\n      where: {\r\n        [Op.or]: [{ sourceOrgID: orgIDs }, { linkedOrgID: orgIDs }],\r\n      },\r\n    });\r\n\r\n    const orgIDsSet = new Set(orgIDs);\r\n    return orgLinks.map((orgLink) =>\r\n      orgIDsSet.has(orgLink.sourceOrgID)\r\n        ? orgLink.linkedOrgID\r\n        : orgLink.sourceOrgID,\r\n    );\r\n  }\r\n\r\n  async getAllConnectedOrgIDs(): Promise<UUID[]> {\r\n    if (this.allConnectedOrgIDsPromise === null) {\r\n      this.allConnectedOrgIDsPromise = this.getAllConnectedOrgIDsImpl();\r\n    }\r\n\r\n    return await this.allConnectedOrgIDsPromise;\r\n  }\r\n\r\n  async getOrgIDs(): Promise<UUID[]> {\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    const connectedOrgIDs = await this.getAllConnectedOrgIDs();\r\n    return [...orgIDs, ...connectedOrgIDs];\r\n  }\r\n\r\n  // Input is an orgID (for the fn to make sense it should be a Slack org id),\r\n  // output is an array containing that orgID plus any platform orgs it is linked to\r\n  async getAllConnectedPlatformOrgs(orgID: UUID) {\r\n    const linkedPlatformOrgIDs = (\r\n      await LinkedOrgsEntity.findAll({\r\n        where: {\r\n          linkedOrgID: orgID,\r\n        },\r\n      })\r\n    ).map((o) => o.sourceOrgID);\r\n\r\n    return [orgID, ...linkedPlatformOrgIDs];\r\n  }\r\n\r\n  clearAll() {\r\n    this.linkedSlackOrgIDDataloader.clearAll();\r\n    this.allConnectedOrgIDsPromise = null;\r\n  }\r\n}\r\n", "import { v5 as uuidv5 } from 'uuid';\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\nimport type { Location, JsonValue, PageContext } from 'common/types/index.ts';\r\n\r\nconst RADICAL_UUID_NAMESPACE = uuidv5('getradical.co', uuidv5.DNS);\r\n\r\n// hash a scalar or an object using uuid v5: https://stackoverflow.com/a/28776880\r\n// if the input is an object, the keys will be presorted to ensure consistency.\r\n// example: {a: 1, b: 2} will hash the same as {b: 2, a: 1}\r\nexport const uuidHash = (object: JsonValue) =>\r\n  uuidv5(jsonStableStringify(object), RADICAL_UUID_NAMESPACE);\r\n\r\nfunction isLocationOnly(data: Location) {\r\n  return 'location' in data && Object.keys(data).length === 1;\r\n}\r\n\r\n// this is the function that decides what the contextHash and contextData of a\r\n// PageEntity will be\r\nexport function getPageContextHash(\r\n  pageContext: PageContext,\r\n): readonly [string, Location] {\r\n  let hashInput = null;\r\n  if (isLocationOnly(pageContext.data)) {\r\n    // Backwards compatibility for previous scheme\r\n    hashInput = {\r\n      location: pageContext.data.location,\r\n      data: null,\r\n    };\r\n  } else {\r\n    hashInput = {\r\n      providerID: null,\r\n      data: pageContext.data,\r\n    };\r\n  }\r\n  return [uuidHash(hashInput), pageContext.data] as const;\r\n}\r\n", "import type { Attributes, WhereOptions } from 'sequelize';\r\nimport { QueryTypes, Op } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\n\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport { INITIAL_MESSAGES_COUNT } from 'common/const/Api.ts';\r\nimport { timestampSubquery } from 'server/src/entity/common.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { RequestContextLoadersInternal } from 'server/src/RequestContextLoaders.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { asyncFilter } from 'common/util/asyncFilter.ts';\r\n\r\n// Don't let clients hammer our database with outrageous requests\r\nconst MAX_LIMIT = 100;\r\n\r\ninterface LoadMessagesArgs {\r\n  cursor?: UUID;\r\n  range?: number | 'unlimited';\r\n  ignoreDeleted?: boolean;\r\n}\r\n\r\nexport class MessageLoader {\r\n  dataloader: DataLoader<UUID, MessageEntity | null>;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: () => RequestContextLoadersInternal,\r\n  ) {\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const where: WhereOptions<Attributes<MessageEntity>> = {\r\n          id: keys as UUID[],\r\n        };\r\n\r\n        if (this.viewer.platformApplicationID) {\r\n          where.platformApplicationID = this.viewer.platformApplicationID;\r\n        } else {\r\n          // all orgs a user is in within a platform, or their slack org\r\n          const orgIDs =\r\n            await this.loaders().orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n          // org that the viewer org is 'linked' to (platform with slack or\r\n          // vice versa)\r\n          const viewerLinkedOrgID =\r\n            await this.loaders().linkedOrgsLoader.getAllConnectedOrgIDs();\r\n\r\n          // In the case of Slack imported messages the viewer orgID is not actually\r\n          // one of the orgIDs returned above, because the viewer userID is a Slack\r\n          // user, while the viewer orgID is the platform org\r\n          const allOrgIDs = [\r\n            ...new Set([viewer.orgID, ...orgIDs, ...viewerLinkedOrgID]),\r\n          ].filter(isDefined);\r\n\r\n          where.orgID = allOrgIDs;\r\n        }\r\n\r\n        const messages = await MessageEntity.findAll({\r\n          where,\r\n        });\r\n\r\n        const filteredMessages = this.viewer.platformApplicationID\r\n          ? await asyncFilter(messages, (m) =>\r\n              this.loaders().privacyLoader.viewerHasMessage(m),\r\n            )\r\n          : messages;\r\n\r\n        return inKeyOrder(filteredMessages, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  // Making sure we get both platform and slack orgID, so we load all messages\r\n  private async getAllOrgIDs() {\r\n    // all orgs a user is in within a platform, or their slack org\r\n    const orgIDs =\r\n      await this.loaders().orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    // org that the viewer org is 'linked' to (platform with slack or\r\n    // vice versa)\r\n    const linkedOrgID =\r\n      await this.loaders().linkedOrgsLoader.getAllConnectedOrgIDs();\r\n\r\n    // In the case of Slack imported messages the viewer orgID is not actually\r\n    // one of the orgIDs returned above, because the viewer userID is a Slack\r\n    // user, while the viewer orgID is the platform org\r\n    return [...new Set([...orgIDs, ...linkedOrgID])];\r\n  }\r\n\r\n  async loadMessage(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Message dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadMessageByExternalID(\r\n    externalID: string,\r\n    platformApplicationID: UUID,\r\n  ) {\r\n    try {\r\n      const message = await MessageEntity.findOne({\r\n        where: { externalID, platformApplicationID },\r\n      });\r\n      const canSee =\r\n        await this.loaders().privacyLoader.viewerHasMessage(message);\r\n      return canSee ? message : null;\r\n    } catch (e) {\r\n      anonymousLogger().logException('Message load error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // This method will return args.range number of messages which are not deleted.\r\n  // It will then add all deleted messages with timestamps within the range of\r\n  // timestamps of the returned messages.\r\n  private async loadOlderMessages(args: LoadMessagesArgs & { threadID: UUID }) {\r\n    const allOrgIDs = await this.getAllOrgIDs();\r\n\r\n    return await getSequelize().query<MessageEntity>(\r\n      `WITH\r\n      upper_cursor_message AS (\r\n        SELECT m.timestamp FROM messages m WHERE id=$1\r\n      ),\r\n      lower_cursor_message AS (\r\n        SELECT m.timestamp FROM messages m\r\n        LEFT OUTER JOIN upper_cursor_message ucm ON TRUE\r\n        WHERE \"threadID\"=$2\r\n        AND \"orgID\"=ANY($3)\r\n        AND \"deletedTimestamp\" IS NULL\r\n        AND m.timestamp < COALESCE(ucm.timestamp, 'infinity')\r\n        ORDER BY m.timestamp DESC OFFSET $4-1 LIMIT 1\r\n      )\r\n      SELECT m.*\r\n        FROM messages m\r\n        LEFT OUTER JOIN upper_cursor_message ucm ON TRUE\r\n        LEFT OUTER JOIN lower_cursor_message lcm ON TRUE\r\n        WHERE \"threadID\"=$2\r\n        AND \"orgID\"=ANY($3)\r\n        AND m.timestamp <= COALESCE(ucm.timestamp, 'infinity')\r\n        AND m.timestamp >= COALESCE(lcm.timestamp, '-infinity')\r\n        ORDER BY m.timestamp ASC;`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        model: MessageEntity,\r\n        bind: [\r\n          args.cursor ?? null,\r\n          args.threadID,\r\n          allOrgIDs,\r\n          typeof args.range === 'number'\r\n            ? Math.min(MAX_LIMIT, Math.abs(args.range))\r\n            : INITIAL_MESSAGES_COUNT,\r\n        ],\r\n      },\r\n    );\r\n  }\r\n\r\n  // Note this will only genuinely return all messages if args.range is 'unlimited'\r\n  // In general this should be avoided, to prevent excessive requests being made\r\n  private async loadAll(args: LoadMessagesArgs & { where: WhereOptions }) {\r\n    const allOrgIDs = await this.getAllOrgIDs();\r\n    args.where = { ...args.where, orgID: allOrgIDs };\r\n\r\n    let range;\r\n    if (typeof args.range === 'undefined') {\r\n      // Default if no range arg specified\r\n      range = -INITIAL_MESSAGES_COUNT;\r\n    }\r\n    if (typeof args.range === 'number') {\r\n      // Return the number specified, but cap at MAX_LIMIT if applicable\r\n      range = Math.sign(args.range) * Math.min(MAX_LIMIT, Math.abs(args.range));\r\n    }\r\n    if (args.range === 'unlimited') {\r\n      // For limited use cases: actually return ALL messages\r\n      range = undefined;\r\n    }\r\n\r\n    if (args.cursor) {\r\n      // If the range is positive, go forward from the cursor\r\n      args.where = {\r\n        ...args.where,\r\n        timestamp: {\r\n          [range && range > 0 ? Op.gt : Op.lt]: timestampSubquery(args.cursor),\r\n        },\r\n      };\r\n    }\r\n\r\n    if (args.ignoreDeleted) {\r\n      args.where = {\r\n        ...args.where,\r\n        deletedTimestamp: { [Op.is]: null },\r\n      };\r\n    }\r\n\r\n    // Get `Math.abs(range)` messages. To select the right messages (in\r\n    // combination with the WHERE condition on timestamp above), we need to\r\n    // order the messages here in descending timestamp order if `range < 0`,\r\n    // or ascending if `range > 0`.\r\n    const messages = await MessageEntity.findAll({\r\n      where: args.where,\r\n      // Intentional array of arrays here\r\n      order: [['timestamp', range && range < 0 ? 'DESC' : 'ASC']],\r\n      limit: range ? Math.abs(range) : undefined,\r\n    });\r\n\r\n    // Always return messages in chronological order, i.e. with ascending\r\n    // timestamps.\r\n    return messages.sort(\r\n      (a, b) => a.timestamp.getTime() - b.timestamp.getTime(),\r\n    );\r\n  }\r\n\r\n  async loadMessagesFromMultipleThreads(\r\n    args: LoadMessagesArgs & { threadIDs: UUID[] },\r\n  ): Promise<MessageEntity[]> {\r\n    const where: WhereOptions<MessageEntity> = {\r\n      threadID: args.threadIDs,\r\n    };\r\n\r\n    return await this.loadAll({ ...args, where });\r\n  }\r\n\r\n  async loadMessages(\r\n    args: LoadMessagesArgs & { threadID: UUID },\r\n  ): Promise<MessageEntity[]> {\r\n    const where: WhereOptions<MessageEntity> = {\r\n      threadID: args.threadID,\r\n    };\r\n    if (args.ignoreDeleted === true && args.range !== 'unlimited') {\r\n      return await this.loadAll({ ...args, where });\r\n    }\r\n\r\n    return await this.loadOlderMessages({ ...args, threadID: args.threadID });\r\n  }\r\n\r\n  // loads the newest messages back until (and including) a specified message\r\n  async loadNewestUntilTarget({\r\n    threadID,\r\n    targetMessage,\r\n  }: {\r\n    threadID: UUID;\r\n    targetMessage: UUID;\r\n  }): Promise<MessageEntity[]> {\r\n    const orgIDs =\r\n      await this.loaders().orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    const messages = await MessageEntity.findAll({\r\n      where: {\r\n        threadID,\r\n        orgID: orgIDs,\r\n        timestamp: {\r\n          [Op.gte]: timestampSubquery(targetMessage),\r\n        },\r\n        deletedTimestamp: { [Op.is]: null },\r\n      },\r\n    });\r\n\r\n    // Always return messages in chronological order, i.e. with ascending\r\n    // timestamps.\r\n    return messages.sort(\r\n      (a, b) => a.timestamp.getTime() - b.timestamp.getTime(),\r\n    );\r\n  }\r\n}\r\n", "// How many messages to load when you first open a channel\r\nexport const INITIAL_MESSAGES_COUNT = 20;\r\n\r\n// How many more to load on button press for threads\r\nexport const THREAD_LOAD_MORE_MESSAGES_COUNT = 10;\r\n\r\n// How long the redirect ID is\r\nexport const NOTIFICATION_LOGGING_REDIRECT_ID_LENGTH = 21;\r\n\r\n// How many users to load when querying users by name for mention list\r\n// (Per org, so max 20 for platform and max 20 for Slack, if connected)\r\nexport const MAX_NAME_FILTERED_AUTOCOMPLETE_ORG_USERS = 20;\r\n\r\n// Controls for how large the page size can be when fetching lists of threads\r\nexport const DEFAULT_THREAD_INITIAL_PAGE_SIZE = 10;\r\nexport const THREAD_INITIAL_PAGE_SIZE_LIMIT = 1000;\r\n\r\n// Controls for the page loads when fetching lists of notifications\r\nexport const DEFAULT_NOTIFICATION_INITIAL_PAGE_SIZE = 10;\r\n\r\n// Controls for the page loads when fetching lists of group members\r\nexport const DEFAULT_GROUP_MEMBERS_INITIAL_PAGE_SIZE = 10;\r\n", "export async function asyncFilter<T>(\r\n  arr: T[],\r\n  pred: (elem: T) => Promise<boolean>,\r\n): Promise<T[]> {\r\n  const preds = await Promise.all(arr.map((elem) => pred(elem)));\r\n  return arr.filter((_, idx) => preds[idx]);\r\n}\r\n", "import { Op, QueryTypes } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasIdentity,\r\n} from 'server/src/auth/index.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport {\r\n  inKeyOrder,\r\n  inKeyOrderGroupedCustom,\r\n} from 'server/src/entity/base/util.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\n\r\nexport type MessageAttachment =\r\n  | MessageAttachmentEntity\r\n  | MessageLinkPreviewEntity;\r\nexport class MessageAttachmentLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, MessageAttachmentEntity | null>;\r\n  dataloaderForMessage: DataLoader<\r\n    UUID,\r\n    (MessageAttachmentEntity | MessageLinkPreviewEntity)[]\r\n  >;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        assertViewerHasIdentity(this.viewer);\r\n\r\n        const attachments = await MessageAttachmentEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(attachments, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.dataloaderForMessage = new DataLoader(\r\n      async (keys) => {\r\n        const [messageAttachments, messageLinkPreviews] = await Promise.all([\r\n          MessageAttachmentEntity.findAll({\r\n            where: { messageID: keys },\r\n          }),\r\n          MessageLinkPreviewEntity.findAll({\r\n            where: { messageID: keys, hidden: { [Op.ne]: true } },\r\n          }),\r\n        ]);\r\n        return inKeyOrderGroupedCustom(\r\n          [...messageAttachments, ...messageLinkPreviews],\r\n          keys,\r\n          (a) => a.messageID,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadAttachmentsForMessage(\r\n    messageID: UUID,\r\n  ): Promise<MessageAttachment[]> {\r\n    return await this.dataloaderForMessage.load(messageID);\r\n  }\r\n\r\n  async loadThreadHasAnnotations(threadID: UUID): Promise<boolean> {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const [{ count }] = await getSequelize().query<{ count: number }>(\r\n      `SELECT COUNT(*) as count\r\n      FROM message_attachments ma\r\n      INNER JOIN messages m ON ma.\"messageID\" = m.\"id\"\r\n      WHERE\r\n        m.\"threadID\" = $1\r\n        AND m.\"orgID\" = $2\r\n        AND ma.type = $3\r\n      `,\r\n      {\r\n        bind: [threadID, orgID, MessageAttachmentType.ANNOTATION],\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n    return count > 0;\r\n  }\r\n\r\n  // Pass includeDeleted=true if you want to include annotations that belong to\r\n  // messages that have been deleted. This is useful for FloatingThreads in\r\n  // which user might delete the first message of a thread but we still want to\r\n  // return the annotation to show the floating pin. Annotations from threads\r\n  // with all messages deleted are not returned.\r\n  async loadAnnotationAttachmentsOnPage(\r\n    pageContextHash: UUID,\r\n    includeDeleted: boolean,\r\n  ) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const threadIsNonEmpty = `AND EXISTS (\r\n          SELECT 1 FROM messages WHERE \"deletedTimestamp\" IS NULL\r\n          AND type = 'user_message'\r\n          AND \"orgID\" = $2\r\n          AND \"threadID\" = t.id\r\n        )`;\r\n    const messageIsNotDeleted = `AND m.\"deletedTimestamp\" IS NULL`;\r\n\r\n    return await getSequelize().query(\r\n      `SELECT ma.*\r\n       FROM message_attachments ma\r\n       INNER JOIN messages m ON ma.\"messageID\" = m.\"id\"\r\n       INNER JOIN threads t ON m.\"threadID\" = t.\"id\"\r\n       WHERE\r\n          t.\"pageContextHash\" = $1\r\n          AND t.\"orgID\"= $2\r\n          AND t.\"resolvedTimestamp\" IS NULL\r\n          AND ma.type = $3\r\n          ${includeDeleted ? threadIsNonEmpty : messageIsNotDeleted}\r\n      `,\r\n      {\r\n        bind: [pageContextHash, orgID, MessageAttachmentType.ANNOTATION],\r\n        type: QueryTypes.SELECT,\r\n        model: MessageAttachmentEntity,\r\n      },\r\n    );\r\n  }\r\n\r\n  async loadAttachment(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Msg attachment dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getAttachmentFromFileID(fileID: string) {\r\n    return await MessageAttachmentEntity.findOne({\r\n      where: {\r\n        [Op.or]: [{ data: { fileID } }, { data: { screenshotFileID: fileID } }],\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport function getFileAttachmentEntities(\r\n  attachments: MessageAttachment[],\r\n): MessageAttachmentEntity[] {\r\n  return attachments.map((a) => ('type' in a ? a : null)).filter(isDefined);\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class FileLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, FileEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const files = await FileEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(files, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadFile(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('File dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadFiles(fileIDs: UUID[]): Promise<FileEntity[]> {\r\n    const results = await this.dataloader.loadMany(fileIDs);\r\n    return results.filter((x) => !(x instanceof Error)) as FileEntity[];\r\n  }\r\n}\r\n", "import DataLoader from 'dataloader';\r\n\r\nimport {\r\n  inKeyOrder,\r\n  inKeyOrderGroupedCustom,\r\n} from 'server/src/entity/base/util.ts';\r\nimport { MessageReactionEntity } from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\n\r\nexport class MessageReactionLoader {\r\n  dataloader: DataLoader<UUID, MessageReactionEntity | null>;\r\n  dataloaderForMessage: DataLoader<UUID, MessageReactionEntity[]>;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    cache = false,\r\n  ) {\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const messageReactions = await MessageReactionEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(messageReactions, keys);\r\n      },\r\n      { cache },\r\n    );\r\n\r\n    this.dataloaderForMessage = new DataLoader(\r\n      async (keys) => {\r\n        const messageReactions = await MessageReactionEntity.findAll({\r\n          where: { messageID: keys },\r\n          // Intentional array of arrays here\r\n          order: [['timestamp', 'ASC']],\r\n        });\r\n\r\n        return inKeyOrderGroupedCustom(\r\n          messageReactions,\r\n          keys,\r\n          (r) => r.messageID,\r\n        );\r\n      },\r\n      { cache },\r\n    );\r\n  }\r\n\r\n  async loadReactionNoOrgCheck(id: UUID) {\r\n    return await this.dataloader.load(id);\r\n  }\r\n\r\n  async loadReactionsForMessageNoOrgCheck(\r\n    messageID: UUID,\r\n  ): Promise<MessageReactionEntity[]> {\r\n    return await this.dataloaderForMessage.load(messageID);\r\n  }\r\n\r\n  async loadReactionForMessageByUser(messageID: UUID, unicodeReaction: string) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const reactionEntity = await MessageReactionEntity.findOne({\r\n      where: {\r\n        messageID,\r\n        userID,\r\n\r\n        unicodeReaction,\r\n      },\r\n    });\r\n\r\n    return reactionEntity;\r\n  }\r\n\r\n  clearAll() {\r\n    this.dataloader.clearAll();\r\n    this.dataloaderForMessage.clearAll();\r\n  }\r\n}\r\n", "import DataLoader from 'dataloader';\r\n\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { SlackChannelEntity } from 'server/src/entity/slack_channel/SlackChannelEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { LinkedOrgsLoader } from 'server/src/entity/linked_orgs/LinkedOrgsLoader.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class SlackChannelLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<string, SlackChannelEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys: readonly string[]) => {\r\n        const orgIDs = await new LinkedOrgsLoader(this.viewer).getOrgIDs();\r\n\r\n        const slackChannels = await SlackChannelEntity.findAll({\r\n          where: { slackID: [...keys], orgID: orgIDs },\r\n        });\r\n\r\n        const slackChannelById = Object.fromEntries(\r\n          slackChannels.map((entity) => [entity.slackID, entity]),\r\n        );\r\n\r\n        const result = keys.map(\r\n          (key) =>\r\n            (slackChannelById[key] as SlackChannelEntity | undefined) || null,\r\n        );\r\n        return result;\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadSlackChannel(\r\n    slackChannelID: string,\r\n  ): Promise<SlackChannelEntity | null> {\r\n    try {\r\n      return await this.dataloader.load(slackChannelID);\r\n    } catch (e) {\r\n      anonymousLogger().logException('SlackChannel dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadJoinableSlackChannels(orgIDs: UUID[]) {\r\n    return await SlackChannelEntity.findAll({\r\n      where: { orgID: orgIDs, added: false, archived: false },\r\n      order: [['users', 'DESC']],\r\n    });\r\n  }\r\n\r\n  async loadJoinedSlackChannels(orgIDs: UUID[]) {\r\n    return await SlackChannelEntity.findAll({\r\n      where: { orgID: orgIDs, added: true, archived: false },\r\n      order: [['users', 'DESC']],\r\n    });\r\n  }\r\n}\r\n", "import type {\r\n  PreferencesType,\r\n  PreferencesValueType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\n\r\nexport class UserPreferenceLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadPreferences(): Promise<PreferencesType> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const entities = await UserPreferenceEntity.findAll({\r\n      where: {\r\n        userID,\r\n      },\r\n    });\r\n\r\n    return Object.fromEntries(entities.map(({ key, value }) => [key, value]));\r\n  }\r\n\r\n  async loadPreferenceValueForViewer<T extends PreferencesValueType>(\r\n    key: string,\r\n  ): Promise<T | undefined> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    return await this.loadPreferenceValueForUser(key, userID);\r\n  }\r\n\r\n  async loadPreferenceValueForUser<T extends PreferencesValueType>(\r\n    key: string,\r\n    userID: UUID,\r\n  ): Promise<T | undefined> {\r\n    const entity = await UserPreferenceEntity.findOne({\r\n      where: { userID, key },\r\n    });\r\n\r\n    if (!entity) {\r\n      return undefined;\r\n    }\r\n\r\n    return entity.value as T;\r\n  }\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { inKeyOrderGroupedCustom } from 'server/src/entity/base/util.ts';\r\n\r\nexport class TaskLoader {\r\n  dataloaderForMessage: DataLoader<UUID, TaskEntity>;\r\n\r\n  constructor(private viewer: Viewer) {\r\n    this.dataloaderForMessage = new DataLoader(\r\n      async (keys) => {\r\n        const tasks = await TaskEntity.findAll({\r\n          where: { messageID: keys },\r\n        });\r\n        return inKeyOrderGroupedCustom(tasks, keys, (t) => t.messageID).map(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          (tasks) => tasks[0],\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadTaskForMessageNoOrgCheck(messageID: UUID) {\r\n    return await this.dataloaderForMessage.load(messageID);\r\n  }\r\n\r\n  async loadTask(taskID: UUID, orgID: UUID) {\r\n    return await TaskEntity.findOne({\r\n      where: { id: taskID, orgID },\r\n    });\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\n\r\nexport class TaskAssigneeLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadTaskAssigneesForTaskNoOrgCheck(taskID: UUID) {\r\n    return await TaskAssigneeEntity.findAll({\r\n      where: { taskID },\r\n    });\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\n\r\nexport class TaskTodoLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadTaskTodosNoOrgCheck(taskID: UUID): Promise<TaskTodoEntity[]> {\r\n    return await TaskTodoEntity.findAll({\r\n      where: { taskID },\r\n    });\r\n  }\r\n}\r\n", "import type { Attributes } from 'sequelize';\r\nimport { QueryTypes } from 'sequelize';\r\n\r\nimport DataLoader from 'dataloader';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { inKeyOrderOrNullCustom } from 'server/src/entity/base/util.ts';\r\n\r\nexport class PageLoader {\r\n  private primaryPageForThreadDataloader: DataLoader<UUID, PageEntity | null>;\r\n\r\n  constructor(private viewer: Viewer) {\r\n    this.primaryPageForThreadDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const rows = await getSequelize().query<\r\n          { threadID: UUID } & Attributes<PageEntity>\r\n        >(\r\n          `SELECT t.id as \"threadID\", p.* FROM pages p, threads t\r\n         WHERE p.\"orgID\" = t.\"orgID\"\r\n          AND p.\"contextHash\" = t.\"pageContextHash\"\r\n          AND t.id = ANY($1);`,\r\n          {\r\n            bind: [keys],\r\n            type: QueryTypes.SELECT,\r\n          },\r\n        );\r\n        return inKeyOrderOrNullCustom(rows, keys, (r) => r.threadID).map(\r\n          (r) => r && PageEntity.build(r),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async getPageFromContextHash(contextHash: UUID, orgOverride?: UUID) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    return await PageEntity.findOne({\r\n      where: {\r\n        contextHash,\r\n        orgID: orgOverride ?? orgID,\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadPrimaryPageForThreadNoOrgCheck(threadID: UUID) {\r\n    return await this.primaryPageForThreadDataloader.load(threadID);\r\n  }\r\n}\r\n", "import type { Transaction, WhereOptions } from 'sequelize';\r\nimport { Op, QueryTypes, Sequelize } from 'sequelize';\r\n\r\nimport DataLoader from 'dataloader';\r\nimport { unique, isEmpty } from 'radash';\r\nimport {\r\n  filteredBatchLoad,\r\n  findFirstEntity,\r\n} from 'server/src/util/filteredBatchLoad.ts';\r\nimport {\r\n  locationEqual,\r\n  locationMatches,\r\n  metadataMatches,\r\n} from 'common/types/index.ts';\r\nimport type {\r\n  EntityMetadata,\r\n  Location,\r\n  Maybe,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasUser,\r\n  assertViewerHasOrgs,\r\n  assertViewerHasPlatformApplicationID,\r\n  viewerIsUsingOrgsAsFilter,\r\n  assertViewerHasPlatformUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type {\r\n  SlackMirroredThreadInfo,\r\n  ThreadSortInput,\r\n  PageThreadsResult,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport { getSlackMessageURL } from 'server/src/slack/util.ts';\r\nimport { timestampSubquery } from 'server/src/entity/common.ts';\r\nimport {\r\n  inKeyOrder,\r\n  inKeyOrderGroupedCustom,\r\n  inKeyOrderOrNullCustom,\r\n} from 'server/src/entity/base/util.ts';\r\nimport type { RequestContextLoadersInternal } from 'server/src/RequestContextLoaders.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromViewer,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { asyncFilter } from 'common/util/asyncFilter.ts';\r\nimport {\r\n  adjustCounts,\r\n  countedItems,\r\n} from 'server/src/util/filteredApproximateCount.ts';\r\nimport type { ViewerThreadStatus } from '@cord-sdk/types';\r\nimport type { PubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nexport type ThreadCollectionFilter = {\r\n  location?: Location;\r\n  partialMatch?: boolean;\r\n  metadata?: EntityMetadata;\r\n  viewer?: ViewerThreadStatus[];\r\n  resolved?: boolean;\r\n};\r\n\r\nexport function updateMightBeRelevant(\r\n  logger: Logger,\r\n  filter: ThreadCollectionFilter,\r\n  payload: PubSubEvent<'thread-filterable-properties-updated'>['payload'],\r\n  userID: UUID,\r\n): boolean {\r\n  if (Object.keys(payload.changes).length === 0) {\r\n    logger.warn('Got a thread-filterable-properties-updated with no changes', {\r\n      threadID: payload.threadID,\r\n    });\r\n    return false;\r\n  }\r\n\r\n  if (payload.changes.orgID) {\r\n    // Something changing orgID is always relevant\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    (isDefined(filter.location) &&\r\n      isDefined(payload.changes.location) &&\r\n      matchesLocationFilter(payload.changes.location.old, filter) !==\r\n        matchesLocationFilter(payload.changes.location.new, filter)) ||\r\n    (isDefined(filter.metadata) &&\r\n      isDefined(payload.changes.metadata) &&\r\n      metadataMatches(payload.changes.metadata.old, filter.metadata) !==\r\n        metadataMatches(payload.changes.metadata.new, filter.metadata)) ||\r\n    (isDefined(filter.resolved) && isDefined(payload.changes.resolved)) ||\r\n    (isDefined(filter.viewer) &&\r\n      filter.viewer.includes('subscribed') &&\r\n      isDefined(payload.changes.subscribers) &&\r\n      (payload.changes.subscribers.added.includes(userID) ||\r\n        payload.changes.subscribers.removed.includes(userID)))\r\n  );\r\n}\r\n\r\nfunction matchesLocationFilter(\r\n  location: Location,\r\n  filter: ThreadCollectionFilter,\r\n): boolean {\r\n  if (!filter.location) {\r\n    return true;\r\n  }\r\n  if (filter.partialMatch) {\r\n    return locationMatches(location, filter.location);\r\n  } else {\r\n    return locationEqual(location, filter.location);\r\n  }\r\n}\r\n\r\nexport type ThreadCounts = {\r\n  totalThreadCount: number;\r\n  resolvedThreadCount: number;\r\n  unreadThreadCount: number;\r\n  unreadSubscribedThreadCount: number;\r\n  newThreadCount: number;\r\n  emptyThreadCount: number;\r\n};\r\n\r\nexport class ThreadLoader {\r\n  private threadByIDNoOrgCheckDataloader: DataLoader<UUID, ThreadEntity | null>;\r\n  private messagesCountNoOrgCheckDataloader: DataLoader<UUID, number>;\r\n  private messagesCountExcludingDeletedNoOrgCheckDataloader: DataLoader<\r\n    UUID,\r\n    number\r\n  >;\r\n  private newMessageCountDataloader: DataLoader<UUID, number>;\r\n  private newReactionCountDataloader: DataLoader<UUID, number>;\r\n  private messagesReplyCountDataloader: DataLoader<UUID, number>;\r\n  private userMessagesCountDataloader: DataLoader<UUID, number>;\r\n  private actionMessagesCountDataloader: DataLoader<UUID, number>;\r\n  private firstUnseenMessageIDDataloader: DataLoader<UUID, UUID | null>;\r\n  private replyingUserIDsDataloader: DataLoader<UUID, UUID[]>;\r\n  private actionMessageReplyingUserIDsDataloader: DataLoader<UUID, UUID[]>;\r\n  private slackMirroredThreadInfoDataloader: DataLoader<\r\n    UUID,\r\n    SlackMirroredThreadInfo | null\r\n  >;\r\n  private initialMessagesDataloader: DataLoader<\r\n    [UUID, Maybe<number>],\r\n    MessageEntity[]\r\n  >;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: () => RequestContextLoadersInternal,\r\n  ) {\r\n    this.threadByIDNoOrgCheckDataloader = new DataLoader(\r\n      async (keys) => {\r\n        // If we have a platformApplicationID, check that we match. If not\r\n        // (Slack sync in particular), well I guess we just have to trust\r\n        // things. (This will end up `undefined` which tells Sequelize \"don't\r\n        // actually care about this column\".)\r\n        const { platformApplicationID } = this.viewer;\r\n\r\n        const threads = await ThreadEntity.findAll({\r\n          where: {\r\n            id: keys,\r\n            ...(platformApplicationID && { platformApplicationID }),\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(threads, keys);\r\n      },\r\n      {\r\n        cache: false,\r\n      },\r\n    );\r\n    this.messagesCountNoOrgCheckDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const counts = await MessageEntity.count({\r\n          group: ['threadID'],\r\n          where: { threadID: keys },\r\n          attributes: [[Sequelize.literal(countedItems()), 'items']],\r\n        });\r\n        const adjustedCounts = await adjustCounts(\r\n          counts,\r\n          async (messageID: UUID) =>\r\n            !!(await this.loaders().messageLoader.loadMessage(messageID)),\r\n        );\r\n        return inKeyOrderOrNullCustom(\r\n          adjustedCounts,\r\n          keys,\r\n          (c) => c.threadID as UUID,\r\n        ).map((c) => (c ? c.count : 0));\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.messagesCountExcludingDeletedNoOrgCheckDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const counts = await MessageEntity.count({\r\n          group: ['threadID'],\r\n          where: { threadID: keys, deletedTimestamp: { [Op.is]: null } },\r\n          attributes: [[Sequelize.literal(countedItems()), 'items']],\r\n        });\r\n        const adjustedCounts = await adjustCounts(\r\n          counts,\r\n          async (messageID: UUID) =>\r\n            !!(await this.loaders().messageLoader.loadMessage(messageID)),\r\n        );\r\n        return inKeyOrderOrNullCustom(\r\n          adjustedCounts,\r\n          keys,\r\n          (c) => c.threadID as UUID,\r\n        ).map((c) => (c ? c.count : 0));\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.newMessageCountDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const userID = assertViewerHasUser(this.viewer);\r\n\r\n        const counts = await getSequelize().query<{\r\n          threadID: string;\r\n          count: number;\r\n        }>(\r\n          // We are getting a count from messages we find where they have not been\r\n          // deleted, and the viewer isn't the author of the message, and the message\r\n          // timestamp is greater than that of the thread_participant if they exist.\r\n          // If a user is mentioned then they become a thread_participant but the\r\n          // lastSeenTimestamp is set to null.\r\n          // Using COALESCE allows us use the first non-null value we get from the list\r\n          // within the brackets. In this case, if there isn't a thread_participant\r\n          // the first value will be NULL and it will take 'TRUE' as the value instead\r\n          // if FALSE is the value taken, the message count will be 0\r\n          // The nested COALESCE ensures that if thread_participant does exist but if\r\n          // the 'lastSeenTimestamp' is NULL then it will default to\r\n          // '-infinity'::timestamp which is always smaller than 'timestamp'\r\n          // in order to correctly contribute to the new messages count.\r\n          `\r\n          SELECT m.\"threadID\", COUNT(*)::integer\r\n            FROM messages m\r\n            LEFT JOIN thread_participants tp ON (m.\"threadID\" = tp.\"threadID\" AND tp.\"userID\" = $2)\r\n            WHERE m.\"threadID\" = ANY($1)\r\n              AND m.\"deletedTimestamp\" IS NULL\r\n              AND m.\"sourceID\" != $2\r\n              AND m.timestamp > COALESCE(tp.\"lastSeenTimestamp\", '-infinity'::timestamp)\r\n            GROUP BY m.\"threadID\"\r\n        `,\r\n          { bind: [keys, userID], type: QueryTypes.SELECT },\r\n        );\r\n\r\n        return inKeyOrderOrNullCustom(counts, keys, (c) => c.threadID).map(\r\n          (c) => (c ? c.count : 0),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.newReactionCountDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const userID = assertViewerHasUser(this.viewer);\r\n\r\n        const reactionCounts = await getSequelize().query<{\r\n          threadID: UUID;\r\n          count: number;\r\n        }>(\r\n          // We are getting a count from messages reactions added on any of the viewer's messages\r\n          // and the reaction timestamp is greater than that of the thread_participant if they exist.\r\n          `\r\n          SELECT m.\"threadID\", COUNT(*)::integer\r\n            FROM messages m\r\n            INNER JOIN message_reactions mr ON (mr.\"messageID\" = m.id)\r\n            LEFT JOIN thread_participants tp ON (m.\"threadID\" = tp.\"threadID\" AND tp.\"userID\" = $2)\r\n          WHERE m.\"threadID\" = ANY($1)\r\n            AND m.\"deletedTimestamp\" IS NULL\r\n            AND m.\"sourceID\" = $2\r\n            AND mr.\"userID\" != $2\r\n            AND mr.timestamp > COALESCE(tp.\"lastSeenTimestamp\", '-infinity'::timestamp)\r\n          GROUP BY m.\"threadID\"\r\n        `,\r\n          { bind: [keys, userID], type: QueryTypes.SELECT },\r\n        );\r\n        return inKeyOrderOrNullCustom(\r\n          reactionCounts,\r\n          keys,\r\n          (c) => c.threadID,\r\n        ).map((c) => c?.count ?? 0);\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.messagesReplyCountDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const counts = await getSequelize().query<{\r\n          threadID: string;\r\n          items: UUID[];\r\n          count: number;\r\n        }>(\r\n          // NB: assign the row_number() *before* filtering deleted messages, so\r\n          // that we count the *replies* (i.e., not the first message) whether\r\n          // or not the first message is deleted.\r\n          `\r\n            SELECT \"threadID\", COUNT(*), ${countedItems()} as \"items\" FROM (\r\n              SELECT *, row_number() OVER (PARTITION BY \"threadID\" ORDER BY timestamp ASC) AS index\r\n              FROM messages\r\n              WHERE \"threadID\" = ANY($1)\r\n            ) x\r\n            WHERE type = 'user_message'\r\n            AND \"deletedTimestamp\" IS NULL\r\n            AND index>1\r\n            GROUP BY \"threadID\";\r\n          `,\r\n          {\r\n            bind: [keys],\r\n            type: QueryTypes.SELECT,\r\n          },\r\n        );\r\n        const adjustedCounts = await adjustCounts(\r\n          counts,\r\n          async (messageID: UUID) =>\r\n            !!(await this.loaders().messageLoader.loadMessage(messageID)),\r\n        );\r\n        return inKeyOrderOrNullCustom(\r\n          adjustedCounts,\r\n          keys,\r\n          (c) => c.threadID,\r\n        ).map((c) => (c ? c.count : 0));\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.userMessagesCountDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const counts = await MessageEntity.count({\r\n          group: ['threadID'],\r\n          where: {\r\n            threadID: keys,\r\n            deletedTimestamp: { [Op.is]: null },\r\n            type: 'user_message',\r\n          },\r\n          attributes: [[Sequelize.literal(countedItems()), 'items']],\r\n        });\r\n        const adjustedCounts = await adjustCounts(\r\n          counts,\r\n          async (messageID: UUID) =>\r\n            !!(await this.loaders().messageLoader.loadMessage(messageID)),\r\n        );\r\n        return inKeyOrderOrNullCustom(\r\n          adjustedCounts,\r\n          keys,\r\n          (c) => c.threadID as UUID,\r\n        ).map((c) => (c ? c.count : 0));\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.actionMessagesCountDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const counts = await MessageEntity.count({\r\n          group: ['threadID'],\r\n          where: {\r\n            threadID: keys,\r\n            deletedTimestamp: { [Op.is]: null },\r\n            type: 'action_message',\r\n          },\r\n        });\r\n        return inKeyOrderOrNullCustom(\r\n          counts,\r\n          keys,\r\n          (c) => c.threadID as UUID,\r\n        ).map((c) => (c ? c.count : 0));\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.firstUnseenMessageIDDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const userID = assertViewerHasUser(this.viewer);\r\n\r\n        const results = await getSequelize().query<{\r\n          threadID: string;\r\n          messageID: string;\r\n        }>(\r\n          `\r\n          SELECT DISTINCT ON (m.\"threadID\") m.\"threadID\", m.id as \"messageID\"\r\n          FROM messages m\r\n          LEFT JOIN thread_participants tp ON (m.\"threadID\" = tp.\"threadID\" AND tp.\"userID\" = $2)\r\n          WHERE m.\"threadID\" = ANY($1)\r\n            AND m.\"deletedTimestamp\" IS NULL\r\n            AND m.\"sourceID\" != $2\r\n            AND m.timestamp > COALESCE(tp.\"lastSeenTimestamp\", '-infinity'::timestamp)\r\n          ORDER BY m.\"threadID\", m.timestamp`,\r\n          { bind: [keys, userID], type: QueryTypes.SELECT },\r\n        );\r\n\r\n        return inKeyOrderOrNullCustom(results, keys, (c) => c.threadID).map(\r\n          (c) => c?.messageID ?? null,\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.replyingUserIDsDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const rows = await getSequelize().query<{\r\n          threadID: UUID;\r\n          sourceID: UUID;\r\n        }>(\r\n          `SELECT DISTINCT m.\"threadID\", m.\"sourceID\"\r\n          FROM messages m\r\n          INNER JOIN (\r\n            SELECT \"threadID\", MIN(timestamp) as \"firstMessageTimestamp\"\r\n            FROM messages\r\n            WHERE \"threadID\" = ANY($1)\r\n            GROUP BY \"threadID\"\r\n          ) t ON (t.\"threadID\" = m.\"threadID\")\r\n          WHERE m.\"deletedTimestamp\" IS NULL\r\n            AND m.timestamp != t.\"firstMessageTimestamp\"\r\n            AND m.type = 'user_message'\r\n            `,\r\n          { bind: [keys], type: QueryTypes.SELECT },\r\n        );\r\n        return inKeyOrderGroupedCustom(rows, keys, (r) => r.threadID).map(\r\n          (group) => group.map((r) => r.sourceID),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.actionMessageReplyingUserIDsDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const rows = await getSequelize().query<{\r\n          threadID: UUID;\r\n          sourceID: UUID;\r\n        }>(\r\n          `SELECT DISTINCT m.\"threadID\", m.\"sourceID\"\r\n          FROM messages m\r\n          INNER JOIN (\r\n            SELECT \"threadID\", MIN(timestamp) as \"firstMessageTimestamp\"\r\n            FROM messages\r\n            WHERE \"threadID\" = ANY($1)\r\n            GROUP BY \"threadID\"\r\n          ) t ON (t.\"threadID\" = m.\"threadID\")\r\n          WHERE m.\"deletedTimestamp\" IS NULL\r\n            AND m.timestamp != t.\"firstMessageTimestamp\"\r\n            AND m.type = 'action_message'`,\r\n          { bind: [keys], type: QueryTypes.SELECT },\r\n        );\r\n        return inKeyOrderGroupedCustom(rows, keys, (r) => r.threadID).map(\r\n          (group) => group.map((r) => r.sourceID),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.slackMirroredThreadInfoDataloader = new DataLoader(\r\n      async (keys) => {\r\n        // Fetch the slack_mirrored_threads row for the given threadID, if there is\r\n        // one. Also look up the name of the Slack channel, because we want to\r\n        // include that in the object we return.\r\n        const rows = await getSequelize().query<{\r\n          threadID: UUID;\r\n          slackChannelID: string;\r\n          slackMessageTimestamp: string;\r\n          slackOrgID: string;\r\n          threadOrgID: string;\r\n          channel: string | null;\r\n        }>(\r\n          `SELECT\r\n            smt.\"threadID\",\r\n            smt.\"slackChannelID\",\r\n            smt.\"slackMessageTimestamp\",\r\n            smt.\"slackOrgID\",\r\n            smt.\"threadOrgID\",\r\n            sc.\"name\" AS channel\r\n          FROM slack_mirrored_threads smt\r\n          LEFT OUTER JOIN slack_channels sc\r\n            ON (smt.\"slackOrgID\", smt.\"slackChannelID\") = (sc.\"orgID\", sc.\"slackID\")\r\n          WHERE smt.\"threadID\" = ANY($1);`,\r\n          { bind: [keys], type: QueryTypes.SELECT },\r\n        );\r\n        const mirroredInfo = inKeyOrderOrNullCustom(\r\n          rows,\r\n          keys,\r\n          (r) => r.threadID,\r\n        );\r\n\r\n        const orgLoader = loaders().orgLoader;\r\n\r\n        return await Promise.all(\r\n          mirroredInfo.map(async (mi) => {\r\n            if (!mi) {\r\n              return null;\r\n            }\r\n\r\n            // This Cord thread is shared to Slack!\r\n            const {\r\n              slackChannelID,\r\n              slackMessageTimestamp,\r\n              channel,\r\n              slackOrgID,\r\n            } = mi;\r\n\r\n            let slackURL: string | null = null;\r\n\r\n            const slackOrg = await orgLoader.loadOrg(slackOrgID);\r\n\r\n            if (slackOrg?.domain) {\r\n              slackURL = getSlackMessageURL(\r\n                slackOrg.domain,\r\n                slackChannelID,\r\n                slackMessageTimestamp,\r\n                null,\r\n              );\r\n            }\r\n\r\n            return { channel, slackURL };\r\n          }),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.initialMessagesDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const userID = assertViewerHasUser(this.viewer);\r\n\r\n        const [threadParticipants, messageCounts] = await Promise.all([\r\n          Promise.all(\r\n            keys.map(([threadID]) =>\r\n              this.loaders().threadParticipantLoader.loadForUserNoOrgCheck({\r\n                threadID,\r\n                userID,\r\n              }),\r\n            ),\r\n          ),\r\n          Promise.all(\r\n            keys.map(([threadID]) =>\r\n              this.loadMessagesCountNoOrgCheck(threadID),\r\n            ),\r\n          ),\r\n        ]);\r\n\r\n        const hasMessage = async (m: MessageEntity) =>\r\n          await this.loaders().privacyLoader.viewerHasMessage(m);\r\n\r\n        return await Promise.all(\r\n          keys.map(async ([threadID, initialFetchCount], i) => {\r\n            const messageWhereOptions: WhereOptions<MessageEntity> = {\r\n              threadID,\r\n            };\r\n\r\n            // If there are 3 or fewer messages and they didn't ask for a\r\n            // specific number, just return them all\r\n            if (messageCounts[i] < 4 && !isDefined(initialFetchCount)) {\r\n              const unfiltered = await MessageEntity.findAll({\r\n                where: messageWhereOptions,\r\n                order: [['timestamp', 'ASC']],\r\n              });\r\n              return await asyncFilter(unfiltered, hasMessage);\r\n            }\r\n\r\n            const [\r\n              firstMessageOfThread,\r\n              lastMessageOfThread,\r\n              lastMessagesOfThreadUnfiltered,\r\n            ] = await Promise.all([\r\n              findFirstEntity(\r\n                MessageEntity,\r\n                {\r\n                  where: messageWhereOptions,\r\n                  order: [['timestamp', 'ASC']],\r\n                },\r\n                hasMessage,\r\n              ),\r\n              findFirstEntity(\r\n                MessageEntity,\r\n                {\r\n                  where: messageWhereOptions,\r\n                  order: [['timestamp', 'DESC']],\r\n                },\r\n                hasMessage,\r\n              ),\r\n              isDefined(initialFetchCount)\r\n                ? filteredBatchLoad<MessageEntity, string | null>(\r\n                    async (token, limit) => {\r\n                      const result = await getSequelize().query(\r\n                        `\r\n                        WITH\r\n                        cursor_message AS (\r\n                          SELECT m.timestamp FROM messages m WHERE id=$1\r\n                        )\r\n                        SELECT m.*\r\n                          FROM messages m\r\n                          LEFT OUTER JOIN cursor_message ucm ON TRUE\r\n                          WHERE \"threadID\"=$2\r\n                          AND m.timestamp < COALESCE(ucm.timestamp, 'infinity')\r\n                          ORDER BY m.timestamp DESC\r\n                          LIMIT $3\r\n                `,\r\n                        {\r\n                          bind: [token, threadID, limit],\r\n                          type: QueryTypes.SELECT,\r\n                          model: MessageEntity,\r\n                        },\r\n                      );\r\n                      return {\r\n                        items: result,\r\n                        token:\r\n                          result.length > 0\r\n                            ? result[result.length - 1].id\r\n                            : null,\r\n                        hasMore: result.length === limit,\r\n                      };\r\n                    },\r\n                    hasMessage,\r\n                    null,\r\n                    initialFetchCount,\r\n                  ).then((result) => result.items)\r\n                : threadParticipants[i]\r\n                ? // This will fetch all messages that are 'new' for the user,\r\n                  // plus the message immediately before that (the last 'read'\r\n                  // message), with a cap of 50 messages\r\n                  //\r\n                  // TODO(flooey): Rewrite this to use filteredBatchLoad rather\r\n                  // than filtering below.\r\n                  getSequelize().query(\r\n                    `\r\n                      SELECT * FROM messages\r\n                      WHERE \"threadID\" = $1\r\n                      AND \"timestamp\" >= (\r\n                        SELECT COALESCE(MAX(timestamp), '-infinity'::timestamp) FROM messages\r\n                        WHERE \"threadID\" = $1\r\n                          AND timestamp <= (\r\n                            SELECT \"lastSeenTimestamp\"\r\n                            FROM thread_participants\r\n                            WHERE \"threadID\" = $1 AND \"userID\" = $2\r\n                            LIMIT 1\r\n                          )\r\n                      )\r\n                      ORDER BY \"timestamp\" DESC LIMIT 50;\r\n                    `,\r\n                    {\r\n                      bind: [threadID, userID],\r\n                      type: QueryTypes.SELECT,\r\n                      // have state model otherwise it can't use the entity's properties\r\n                      model: MessageEntity,\r\n                    },\r\n                  )\r\n                : // If viewer is not a thread participant, and there are more than 3\r\n                  // messages this will render collapsed similar to if all messages\r\n                  // were read.\r\n                  [],\r\n            ]);\r\n\r\n            if (!firstMessageOfThread || !lastMessageOfThread) {\r\n              return [];\r\n            } else if (firstMessageOfThread.id === lastMessageOfThread.id) {\r\n              return [firstMessageOfThread];\r\n            } else {\r\n              const lastMessagesOfThread = await asyncFilter(\r\n                lastMessagesOfThreadUnfiltered,\r\n                hasMessage,\r\n              );\r\n\r\n              return [\r\n                firstMessageOfThread,\r\n                ...lastMessagesOfThread\r\n                  .filter(\r\n                    ({ id }) =>\r\n                      id !== firstMessageOfThread.id &&\r\n                      id !== lastMessageOfThread.id,\r\n                  )\r\n                  .reverse(),\r\n                lastMessageOfThread,\r\n              ];\r\n            }\r\n          }),\r\n        );\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads a thread by its ID. Will return null either if the thread doesn't\r\n   * exist, or if the viewer doesn't have permission to see the thread.\r\n   *\r\n   * Does *not* do a strict \"org check\", i.e., this will return any thread the\r\n   * viewer is allowed to see, even if it doesn't match the org(s) in the Viewer\r\n   * object.\r\n   */\r\n  async loadThread(threadID: UUID): Promise<ThreadEntity | null> {\r\n    const thread = await this.threadByIDNoOrgCheckDataloader.load(threadID);\r\n    const canSee = await this.loaders().privacyLoader.viewerHasThread(\r\n      thread,\r\n      false,\r\n    );\r\n    return canSee ? thread : null;\r\n  }\r\n\r\n  /**\r\n   * Loads a list of threads.\r\n   * @see loadThread\r\n   */\r\n  async loadThreads(ids: UUID[]): Promise<ThreadEntity[]> {\r\n    return (await Promise.all(ids.map((id) => this.loadThread(id)))).filter(\r\n      isDefined,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads a thread by its external ID. Will return null either if the thread\r\n   * doesn't exist, or if the viewer doesn't have permission to see the thread.\r\n   *\r\n   * Note that this does *not* do a strict \"org check\", i.e., this will return\r\n   * any thread the viewer is allowed to see, even if it doesn't match the org(s)\r\n   * in the Viewer object.\r\n   */\r\n  async loadByExternalID(\r\n    externalThreadID: string,\r\n    transaction?: Transaction,\r\n  ): Promise<ThreadEntity | null> {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    const thread = await ThreadEntity.findOne({\r\n      where: {\r\n        externalID: externalThreadID,\r\n        platformApplicationID,\r\n      },\r\n      transaction,\r\n    });\r\n\r\n    const canSee = await this.loaders().privacyLoader.viewerHasThread(\r\n      thread,\r\n      false,\r\n      transaction,\r\n    );\r\n    return canSee ? thread : null;\r\n  }\r\n\r\n  /**\r\n   * Loads a thread by its external ID. Will return null either if the thread\r\n   * doesn't exist, or if the viewer doesn't have permission to see the thread.\r\n   *\r\n   * Note that this *does* do a strict \"org check\", i.e., the thread's org is\r\n   * checked against the org(s) in the Viewer object. This means this function\r\n   * can return null even if the viewer can nominally see the thread, because it\r\n   * doesn't match their *current* Viewer object.\r\n   */\r\n  async loadByExternalIDStrictOrgCheck(\r\n    externalThreadID: string,\r\n    transaction?: Transaction,\r\n  ): Promise<ThreadEntity | null> {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    const thread = await ThreadEntity.findOne({\r\n      where: {\r\n        externalID: externalThreadID,\r\n        platformApplicationID,\r\n      },\r\n      transaction,\r\n    });\r\n\r\n    const canSee = await this.loaders().privacyLoader.viewerHasThread(\r\n      thread,\r\n      true,\r\n      transaction,\r\n    );\r\n    return canSee ? thread : null;\r\n  }\r\n\r\n  /**\r\n   * You generally shouldn't need to call this function:\r\n   *\r\n   * - If you want to check if the viewer can see a particular thread ID, just\r\n   *   load it with loadThread (since you typically actually want the thread,\r\n   *   not *just* to check if you can see it).\r\n   * - If you want to check if the viewer can see a particular ThreadEntity,\r\n   *   ideally fix the loading code to come through viewerHasThread and check\r\n   *   privacy on load, or use loadThread on the ID if you must.\r\n   */\r\n  async assertViewerHasThread(id: UUID): Promise<void> {\r\n    const thread = await this.loadThread(id);\r\n    if (!thread) {\r\n      throw new Error('Viewer does not have permission to access thread');\r\n    }\r\n  }\r\n\r\n  private async loadThreadsForPageImpl({\r\n    filter,\r\n    sort,\r\n    limit,\r\n    after,\r\n    skipOrgCheck,\r\n  }: {\r\n    filter?: ThreadCollectionFilter;\r\n    sort?: Maybe<ThreadSortInput>;\r\n    limit?: Maybe<number>;\r\n    after?: Maybe<UUID>;\r\n    skipOrgCheck?: boolean;\r\n  }): Promise<PageThreadsResult> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    // Used to check if more threads exist for the hasMore field\r\n    const limitPlusOne = limit ? limit + 1 : undefined;\r\n\r\n    // Default behaviour is to return all threads, reverse-chrono ordered by\r\n    // most recent reply's timestamp.\r\n    const whereConditions = [];\r\n    const extraJoins = [];\r\n\r\n    const ascending = sort?.sortDirection === 'ascending';\r\n    const orderByDirection = ascending ? 'ASC' : 'DESC';\r\n\r\n    const makeTimeOrderByCondition = (threadID: string) => `\r\n      SELECT ${\r\n        sort?.sortBy === 'first_message_timestamp' ? 'MIN' : 'MAX'\r\n      }(\"timestamp\") FROM messages\r\n      WHERE \"threadID\"=${threadID} AND \"deletedTimestamp\" IS NULL\r\n  `;\r\n    const orderByCondition = makeTimeOrderByCondition('t.id');\r\n    const bindVariables: unknown[] = [];\r\n\r\n    // This is a bit unfortunate. Postgres doesn't like unused bind parameters,\r\n    // so we need to do this in an if/else. But we also want to re-use the\r\n    // `orgIDs` bind below, ideally without sending the entire list twice -- so\r\n    // we are below relying on the fact that this ends up as `$1`. Basically be\r\n    // careful if you are changing anything about the first element of\r\n    // `bindVariables` or `$1`.\r\n    if (skipOrgCheck) {\r\n      bindVariables.push(platformApplicationID);\r\n      whereConditions.push('t.\"platformApplicationID\" = $1');\r\n    } else {\r\n      bindVariables.push(orgIDs);\r\n      whereConditions.push('t.\"orgID\" = ANY($1)');\r\n    }\r\n\r\n    if (filter?.resolved === true) {\r\n      whereConditions.push(`t.\"resolvedTimestamp\" IS NOT NULL`);\r\n    } else if (filter?.resolved === false) {\r\n      whereConditions.push(`t.\"resolvedTimestamp\" IS NULL`);\r\n    }\r\n\r\n    if (filter?.metadata) {\r\n      bindVariables.push(JSON.stringify(filter.metadata));\r\n      whereConditions.push(`t.\"metadata\" @> $${bindVariables.length}`);\r\n    }\r\n    if (filter?.viewer) {\r\n      const viewerConditions: string[] = [];\r\n      for (const f of unique(filter.viewer)) {\r\n        switch (f) {\r\n          case 'subscribed':\r\n            bindVariables.push(userID);\r\n            extraJoins.push(`INNER JOIN thread_participants tp\r\n              ON (t.id = tp.\"threadID\" AND tp.\"userID\" = $${bindVariables.length})`);\r\n            viewerConditions.push('tp.\"subscribed\" = TRUE');\r\n            break;\r\n          case 'mentioned':\r\n            bindVariables.push(userID);\r\n            viewerConditions.push(\r\n              `t.id IN (\r\n                SELECT \"threadID\" from messages m\r\n                  INNER JOIN message_mentions mm ON (m.id = mm.\"messageID\")\r\n                WHERE mm.\"userID\" = $${bindVariables.length}\r\n                  AND m.type = 'user_message'\r\n                  AND m.\"deletedTimestamp\" IS NULL\r\n              )`,\r\n            );\r\n            break;\r\n          default: {\r\n            const _f: never = f;\r\n            throw new Error(`Unknown filter: ${f}`);\r\n          }\r\n        }\r\n      }\r\n      if (viewerConditions.length) {\r\n        whereConditions.push(`(${viewerConditions.join(' OR ')})`);\r\n      }\r\n    }\r\n\r\n    if (filter?.location) {\r\n      bindVariables.push(JSON.stringify(filter.location));\r\n      extraJoins.push(`INNER JOIN pages p\r\n         ON (p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`);\r\n      whereConditions.push(`p.\"contextData\" ${\r\n        filter.partialMatch ? '@>' : '='\r\n      } $${bindVariables.length}::jsonb\r\n      `);\r\n      if (!skipOrgCheck) {\r\n        whereConditions.push(`p.\"orgID\" = ANY($1)`);\r\n      }\r\n    }\r\n\r\n    const limitCondition = isDefined(limitPlusOne)\r\n      ? `LIMIT ${limitPlusOne}`\r\n      : '';\r\n    let paginationCondition = '';\r\n    if (after) {\r\n      bindVariables.push(after);\r\n      paginationCondition = `WHERE orderTime ${\r\n        ascending ? '>' : '<'\r\n      } (${makeTimeOrderByCondition(`$${bindVariables.length}`)})`;\r\n    }\r\n\r\n    const threads = await getSequelize().query(\r\n      `WITH unsortedThreads AS (\r\n         SELECT t.*, (${orderByCondition}) AS orderTime\r\n         FROM threads t\r\n         ${extraJoins.join(' ')}\r\n         WHERE ${whereConditions.join(' AND ')}\r\n       )\r\n       SELECT * FROM unsortedThreads\r\n       ${paginationCondition}\r\n       ORDER BY orderTime ${orderByDirection} NULLS LAST\r\n       ${limitCondition};`,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n        model: ThreadEntity,\r\n      },\r\n    );\r\n\r\n    const hasMore =\r\n      typeof limitPlusOne === 'number'\r\n        ? threads.length === limitPlusOne\r\n        : false;\r\n\r\n    const threadsToReturn = isDefined(limit)\r\n      ? threads.slice(0, limit)\r\n      : threads;\r\n\r\n    return {\r\n      threads: threadsToReturn,\r\n      hasMore,\r\n      token: threadsToReturn.at(-1)?.id,\r\n    };\r\n  }\r\n\r\n  async loadThreadsForPage(args: {\r\n    filter?: ThreadCollectionFilter;\r\n    sort?: Maybe<ThreadSortInput>;\r\n    limit?: Maybe<number>;\r\n    after?: Maybe<UUID>;\r\n  }): Promise<PageThreadsResult> {\r\n    const enablePerms = await getTypedFeatureFlagValue(\r\n      FeatureFlags.GRANULAR_PERMISSIONS,\r\n      flagsUserFromViewer(this.viewer),\r\n    );\r\n\r\n    if (!enablePerms || viewerIsUsingOrgsAsFilter(this.viewer)) {\r\n      return await this.loadThreadsForPageImpl(args);\r\n    }\r\n\r\n    const loaded = await filteredBatchLoad(\r\n      async (token, limit) => {\r\n        const batch = await this.loadThreadsForPageImpl({\r\n          ...args,\r\n          limit,\r\n          after: token,\r\n          skipOrgCheck: true,\r\n        });\r\n        return {\r\n          items: batch.threads,\r\n          token: batch.token,\r\n          hasMore: batch.hasMore,\r\n        };\r\n      },\r\n      async (t) => await this.loaders().privacyLoader.viewerHasThread(t, false),\r\n      args.after,\r\n      args.limit,\r\n    );\r\n\r\n    return {\r\n      threads: loaded.items,\r\n      hasMore: loaded.hasMore,\r\n      // The token might point at a thread that got filtered out, and since they\r\n      // are just thread IDs we don't want to leak its existence, so force-reset\r\n      // to the last thread we are returning.\r\n      token: loaded.items.at(-1)?.id,\r\n    };\r\n  }\r\n\r\n  async threadMatchesFilter(threadID: UUID, filter: ThreadCollectionFilter) {\r\n    const { userID, platformApplicationID } = assertViewerHasPlatformUser(\r\n      this.viewer,\r\n    );\r\n\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n\r\n    const bindVariables = [threadID, platformApplicationID, orgIDs];\r\n    const whereConditions = [\r\n      't.id = $1',\r\n      't.\"platformApplicationID\" = $2',\r\n      't.\"orgID\" = ANY($3)',\r\n    ];\r\n    const extraJoins = [];\r\n\r\n    if (filter.location) {\r\n      bindVariables.push(JSON.stringify(filter.location));\r\n      extraJoins.push(`INNER JOIN pages p\r\n        ON(p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`);\r\n      whereConditions.push(\r\n        `p.\"contextData\" ${filter.partialMatch ? '@>' : '='} $${\r\n          bindVariables.length\r\n        }::jsonb`,\r\n      );\r\n    }\r\n\r\n    if (filter.resolved === true) {\r\n      whereConditions.push('t.\"resolvedTimestamp\" IS NOT NULL');\r\n    } else if (filter.resolved === false) {\r\n      whereConditions.push('t.\"resolvedTimestamp\" IS NULL');\r\n    }\r\n\r\n    if (filter?.metadata) {\r\n      bindVariables.push(JSON.stringify(filter.metadata));\r\n      whereConditions.push(`t.\"metadata\" @> $${bindVariables.length}`);\r\n    }\r\n\r\n    if (filter?.viewer) {\r\n      const viewerConditions: string[] = [];\r\n      for (const f of unique(filter.viewer)) {\r\n        switch (f) {\r\n          case 'subscribed':\r\n            bindVariables.push(userID);\r\n            extraJoins.push(`INNER JOIN thread_participants tp\r\n              ON (t.id = tp.\"threadID\" AND tp.\"userID\" = $${bindVariables.length})`);\r\n            viewerConditions.push('tp.\"subscribed\" = TRUE');\r\n            break;\r\n          case 'mentioned':\r\n            bindVariables.push(userID);\r\n            viewerConditions.push(\r\n              `t.id IN (\r\n                  SELECT \"threadID\" from messages m\r\n                    INNER JOIN message_mentions mm ON (m.id = mm.\"messageID\")\r\n                  WHERE mm.\"userID\" = $${bindVariables.length}\r\n                    AND m.type = 'user_message'\r\n                    AND m.\"deletedTimestamp\" IS NULL\r\n                )`,\r\n            );\r\n            break;\r\n          default: {\r\n            const _f: never = f;\r\n            throw new Error(`Unknown filter: ${f}`);\r\n          }\r\n        }\r\n      }\r\n      if (viewerConditions.length) {\r\n        whereConditions.push(`(${viewerConditions.join(' OR ')})`);\r\n      }\r\n    }\r\n\r\n    const threads = await getSequelize().query<{ id: UUID }>(\r\n      ` SELECT t.id\r\n          FROM threads t\r\n          ${extraJoins.join(' ')}\r\n          WHERE ${whereConditions.join(' AND ')}\r\n        `,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    return threads.length > 0;\r\n  }\r\n\r\n  async loadThreadActivitySummary({\r\n    location,\r\n    partialMatch,\r\n    metadata,\r\n    viewer,\r\n    resolved,\r\n  }: ThreadCollectionFilter): Promise<ThreadCounts> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      this.viewer,\r\n    );\r\n\r\n    const extraConditions = [];\r\n    let extraJoin = '';\r\n\r\n    const bindVariables: (string | string[] | Location)[] = [\r\n      orgIDs,\r\n      userID,\r\n      platformApplicationID,\r\n    ];\r\n\r\n    if (location) {\r\n      bindVariables.push(JSON.stringify(location));\r\n      extraJoin = `INNER JOIN pages p\r\n      ON(p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`;\r\n      extraConditions.push(\r\n        `p.\"contextData\" ${partialMatch ? '@>' : '='} $${\r\n          bindVariables.length\r\n        }::jsonb`,\r\n      );\r\n      extraConditions.push(`p.\"orgID\" = ANY($1)`);\r\n    }\r\n\r\n    if (!isEmpty(metadata)) {\r\n      bindVariables.push(JSON.stringify(metadata));\r\n      extraConditions.push(`t.\"metadata\" @> $${bindVariables.length}::jsonb`);\r\n    }\r\n\r\n    if (viewer) {\r\n      const viewerConditions: string[] = [];\r\n      for (const f of unique(viewer)) {\r\n        switch (f) {\r\n          case 'subscribed':\r\n            viewerConditions.push('tp.\"subscribed\" = TRUE');\r\n            break;\r\n          case 'mentioned':\r\n            viewerConditions.push(\r\n              `t.id IN (\r\n                  SELECT \"threadID\" from messages m\r\n                    INNER JOIN message_mentions mm ON (m.id = mm.\"messageID\")\r\n                  WHERE mm.\"userID\" = $2\r\n                    AND m.type = 'user_message'\r\n                    AND m.\"deletedTimestamp\" IS NULL\r\n                )`,\r\n            );\r\n            break;\r\n          default: {\r\n            const _f: never = f;\r\n            throw new Error(`Unknown filter: ${f}`);\r\n          }\r\n        }\r\n      }\r\n      if (viewerConditions.length) {\r\n        extraConditions.push(`(${viewerConditions.join(' OR ')})`);\r\n      }\r\n    }\r\n\r\n    if (resolved === true) {\r\n      extraConditions.push(`t.\"resolvedTimestamp\" IS NOT NULL`);\r\n    } else if (resolved === false) {\r\n      extraConditions.push(`t.\"resolvedTimestamp\" IS NULL`);\r\n    }\r\n    const extraCondition =\r\n      extraConditions.length > 0 ? `AND ${extraConditions.join(' AND ')}` : '';\r\n\r\n    const result = await getSequelize().query<ThreadCounts>(\r\n      `\r\n      WITH thread_props AS (\r\n        SELECT EXISTS (\r\n            SELECT 1 FROM messages\r\n            WHERE \"deletedTimestamp\" IS NULL\r\n              AND type = 'user_message'\r\n              AND \"threadID\" = t.id\r\n              AND \"platformApplicationID\" = $3\r\n          ) AS has_message,\r\n          EXISTS (\r\n            SELECT 1 FROM messages\r\n            WHERE \"deletedTimestamp\" IS NULL\r\n              AND type = 'user_message'\r\n              AND \"threadID\" = t.id\r\n              AND \"platformApplicationID\" = $3\r\n              AND timestamp > COALESCE(tp.\"lastSeenTimestamp\", '-infinity'::timestamp)\r\n          ) AS has_unread,\r\n          EXISTS (\r\n            SELECT 1 FROM messages\r\n            WHERE \"deletedTimestamp\" IS NULL\r\n              AND type = 'user_message'\r\n              AND \"threadID\" = t.id\r\n              AND \"platformApplicationID\" = $3\r\n          ) AND tp.\"lastSeenTimestamp\" IS NULL AS all_unread,\r\n          COALESCE(tp.subscribed, FALSE) AS subscribed,\r\n          t.\"resolvedTimestamp\" IS NOT NULL AS resolved\r\n        FROM threads t\r\n        LEFT JOIN thread_participants tp ON (tp.\"threadID\", tp.\"userID\", tp.\"orgID\") = (t.id, $2, t.\"orgID\")\r\n        ${extraJoin}\r\n        WHERE t.\"orgID\" = ANY($1)\r\n        ${extraCondition}\r\n      )\r\n      SELECT\r\n        (COUNT(*) FILTER (WHERE has_message))::integer AS \"totalThreadCount\",\r\n        (COUNT(*) FILTER (WHERE has_unread AND NOT resolved))::integer AS \"unreadThreadCount\",\r\n        (COUNT(*) FILTER (WHERE has_unread AND subscribed AND NOT resolved))::integer AS \"unreadSubscribedThreadCount\",\r\n        (COUNT(*) FILTER (WHERE resolved))::integer AS \"resolvedThreadCount\",\r\n        (COUNT(*) FILTER (WHERE all_unread AND NOT resolved))::integer AS \"newThreadCount\",\r\n        (COUNT(*) FILTER (WHERE NOT has_message))::integer AS \"emptyThreadCount\"\r\n      FROM thread_props\r\n      `,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: bindVariables,\r\n      },\r\n    );\r\n    return result[0];\r\n  }\r\n\r\n  async loadNewMessageCountNoOrgCheck(threadID: UUID): Promise<number> {\r\n    return await this.newMessageCountDataloader.load(threadID);\r\n  }\r\n\r\n  async loadNewReactionsCountNoOrgCheck(threadID: UUID): Promise<number> {\r\n    return await this.newReactionCountDataloader.load(threadID);\r\n  }\r\n\r\n  async getFirstUnseenMessageIDNoOrgCheck(\r\n    threadID: UUID,\r\n  ): Promise<UUID | null> {\r\n    return await this.firstUnseenMessageIDDataloader.load(threadID);\r\n  }\r\n\r\n  async loadMessagesCountExcludingDeletedNoOrgCheck(\r\n    threadID: UUID,\r\n    cursor?: UUID,\r\n  ): Promise<number> {\r\n    if (cursor) {\r\n      // Can't easily coalesce multiple queries with a cursor into a single\r\n      // query in the dataloader, so just do it by hand here.\r\n      return await MessageEntity.count({\r\n        where: {\r\n          threadID,\r\n          deletedTimestamp: { [Op.is]: null },\r\n          timestamp: { [Op.lt]: timestampSubquery(cursor) },\r\n        },\r\n      });\r\n    } else {\r\n      return await this.messagesCountExcludingDeletedNoOrgCheckDataloader.load(\r\n        threadID,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of messages in a thread including any deleted messages\r\n   * and any action messages (resolved/unresolved).\r\n   */\r\n  async loadMessagesCountNoOrgCheck(threadID: UUID): Promise<number> {\r\n    return await this.messagesCountNoOrgCheckDataloader.load(threadID);\r\n  }\r\n\r\n  async loadUserMessagesCountNoOrgCheck(threadID: UUID): Promise<number> {\r\n    return await this.userMessagesCountDataloader.load(threadID);\r\n  }\r\n  async loadActionMessagesCountNoOrgCheck(threadID: UUID): Promise<number> {\r\n    return await this.actionMessagesCountDataloader.load(threadID);\r\n  }\r\n\r\n  /**\r\n   * Returns the number of replies in a thread excluding any deleted messages\r\n   * and any action messages (resolved/unresolved).\r\n   * The first message in the thread is ignored in this count as it is not a reply.\r\n   */\r\n  async loadReplyCount(threadID: UUID) {\r\n    return await this.messagesReplyCountDataloader.load(threadID);\r\n  }\r\n\r\n  // This is called once to load the initial messages for a thread\r\n  // loads the first message of thread\r\n  // loads the 10 previous messages either before any unread\r\n  // loads unread messages based on thread participant lastSeenTimestamp\r\n  async loadInitialMessagesNoOrgCheck(\r\n    threadID: UUID,\r\n    initialFetchCount: Maybe<number>,\r\n  ) {\r\n    return await this.initialMessagesDataloader.load([\r\n      threadID,\r\n      initialFetchCount,\r\n    ]);\r\n  }\r\n\r\n  async loadRecentlyActiveThreads(orgID: UUID): Promise<UUID[]> {\r\n    // TODO: Add pagination?\r\n    const rows = await getSequelize().query<{ threadID: UUID }>(\r\n      `SELECT \"threadID\" FROM\r\n         (SELECT DISTINCT ON (\"threadID\") \"threadID\", timestamp\r\n          FROM messages\r\n          WHERE\r\n            \"orgID\" = $1\r\n            AND \"deletedTimestamp\" IS NULL\r\n          ORDER BY \"threadID\", timestamp DESC) as subquery\r\n       ORDER BY timestamp DESC\r\n       LIMIT 20;`,\r\n      { bind: [orgID], type: QueryTypes.SELECT },\r\n    );\r\n\r\n    return rows.map((row) => row.threadID);\r\n  }\r\n\r\n  async loadMessagesCountBeforeNoOrgCheck(\r\n    threadID: UUID,\r\n    messageID: UUID,\r\n  ): Promise<number> {\r\n    const rows = await getSequelize().query<{ count: number }>(\r\n      `SELECT COUNT(m) AS count FROM messages m\r\n       WHERE \"threadID\"=$1\r\n       AND \"deletedTimestamp\" IS NULL\r\n       AND timestamp < (\r\n           SELECT timestamp FROM messages\r\n           WHERE \"threadID\"=$1 AND \"id\"=$2\r\n       );`,\r\n      {\r\n        bind: [threadID, messageID],\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    return rows[0]?.count ?? 0;\r\n  }\r\n\r\n  async loadSlackMirroredThreadInfoNoOrgCheck(\r\n    threadID: UUID,\r\n  ): Promise<SlackMirroredThreadInfo | null> {\r\n    return await this.slackMirroredThreadInfoDataloader.load(threadID);\r\n  }\r\n\r\n  async hasUserMessagesNoOrgCheck(threadID: UUID): Promise<boolean> {\r\n    return await this.userMessagesCountDataloader\r\n      .load(threadID)\r\n      .then((c) => c > 0);\r\n  }\r\n\r\n  async loadReplyingUserIDsNoOrgCheck(threadID: UUID) {\r\n    return await this.replyingUserIDsDataloader.load(threadID);\r\n  }\r\n\r\n  /**\r\n   * Returns all the authors of action messages in the thread's replies.\r\n   */\r\n  async loadActionMessageReplyingUserIDsNoOrgCheck(threadID: UUID) {\r\n    return await this.actionMessageReplyingUserIDsDataloader.load(threadID);\r\n  }\r\n}\r\n", "import type { Attributes, FindOptions, Model, ModelStatic } from 'sequelize';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { asyncFilter } from 'common/util/asyncFilter.ts';\r\n\r\ntype Result<T, U> = {\r\n  items: T[];\r\n  token: U;\r\n  hasMore: boolean;\r\n};\r\n\r\n/**\r\n * Load items one batch/page at a time, filtering as we go, attempting to end up\r\n * with a fixed number of items in the end.\r\n *\r\n * @param loadBatch Load a single batch/page of items. Takes a pagination token\r\n * and a target number of items to load. Returns a batch of items along with\r\n * pagination information.\r\n *\r\n * @param filterItem Determine if a particular item is valid. Return `true` if\r\n * the item is valid, `false` to remove it (same as List.filter).\r\n *\r\n * @param initialToken The initial pagination token to start the first batch at.\r\n *\r\n * @param limit How many items we ultimately would like.\r\n *\r\n * @returns The final batch of items along with pagination information.\r\n */\r\nexport async function filteredBatchLoad<T, U>(\r\n  loadBatch: (token: U, limit: number | undefined) => Promise<Result<T, U>>,\r\n  filterItem: (item: T) => Promise<boolean>,\r\n  initialToken: U,\r\n  limit: number | null | undefined,\r\n): Promise<Result<T, U>> {\r\n  const result: Result<T, U> = {\r\n    items: [],\r\n    hasMore: true,\r\n    token: initialToken,\r\n  };\r\n\r\n  while (result.hasMore && (!isDefined(limit) || result.items.length < limit)) {\r\n    const next = await loadBatch(result.token, limit ?? undefined);\r\n    const filteredItems = await asyncFilter(next.items, filterItem);\r\n    result.items.push(...filteredItems);\r\n    result.hasMore = next.hasMore;\r\n    result.token = next.token;\r\n  }\r\n\r\n  if (isDefined(limit) && result.items.length > limit) {\r\n    result.items = result.items.slice(0, limit);\r\n    result.hasMore = true;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport async function findFirstEntity<M extends Model>(\r\n  model: ModelStatic<M>,\r\n  options: FindOptions<Attributes<M>>,\r\n  filterItem: (item: M) => Promise<boolean>,\r\n): Promise<M | undefined> {\r\n  const batch = await filteredBatchLoad(\r\n    async (offset, limit) => {\r\n      const items = await model.findAll({ ...options, offset, limit });\r\n      return {\r\n        items,\r\n        token: offset + (limit ?? 0),\r\n        hasMore: items.length === limit,\r\n      };\r\n    },\r\n    filterItem,\r\n    0,\r\n    1,\r\n  );\r\n\r\n  return batch.items[0];\r\n}\r\n", "import type { GroupedCountResultItem } from 'sequelize';\r\nimport { asyncFilter } from 'common/util/asyncFilter.ts';\r\n\r\nconst CUTOFF = 50;\r\nexport const NUM_SAMPLE_ITEMS = CUTOFF;\r\n\r\n/**\r\n * Compute a count of items in the case where some of the items will be filtered\r\n * out (and so shouldn't be counted), but that filtering is expensive, and so we\r\n * want to make an approximate count. An example is counting the number of\r\n * messages in a thread: with the new permission model, you might not be able to\r\n * see all of them, but we don't want to load every single message in the thread\r\n * in order to check that.\r\n *\r\n * @param unfilteredCount The unfiltered count.\r\n * @param sampleItems An arbitrary sampling of the items which we are counting.\r\n *   Must be at least `NUM_SAMPLE_ITEMS` long, or all the items if there are\r\n *   fewer than that.\r\n * @param filterItem Filtering function.\r\n * @returns The approximated filtered count.\r\n */\r\nexport async function filteredApproximateCount<T>(\r\n  unfilteredCount: number,\r\n  sampleItems: T[],\r\n  filterItem: (item: T) => Promise<boolean>,\r\n): Promise<number> {\r\n  if (\r\n    unfilteredCount >= NUM_SAMPLE_ITEMS &&\r\n    sampleItems.length < NUM_SAMPLE_ITEMS\r\n  ) {\r\n    throw new Error('Not enough items provided');\r\n  }\r\n\r\n  if (unfilteredCount < CUTOFF) {\r\n    const rest = await asyncFilter(sampleItems, filterItem);\r\n    return rest.length;\r\n  }\r\n\r\n  // TODO: be smarter.\r\n  return unfilteredCount;\r\n}\r\n\r\n/**\r\n * A wrapper around `filteredApproximateCount` for the common case where we are\r\n * using it on the result of a Sequelize count query (or manual SQL equivalent).\r\n * Each item in `counts` should have both the `count` field required by the TS\r\n * types, but also an `items` field containing `NUM_SAMPLE_ITEMS` items in it.\r\n * (Sequelize's TS types are lacking here so there's no good way to statically\r\n * enforce that.)\r\n */\r\nexport async function adjustCounts<T extends GroupedCountResultItem, U>(\r\n  unfilteredCounts: T[],\r\n  filterItem: (item: U) => Promise<boolean>,\r\n): Promise<T[]> {\r\n  return await Promise.all(\r\n    unfilteredCounts.map(async (item) => {\r\n      const count = await filteredApproximateCount(\r\n        item.count,\r\n        item.items as U[],\r\n        filterItem,\r\n      );\r\n      return { ...item, count };\r\n    }),\r\n  );\r\n}\r\n\r\n/**\r\n * Returns a bit of SQL which can be used with a count query to get a sample of\r\n * the IDs of the elements which were actually counted. This is useful to pass\r\n * to the functions above, which want both the complete (unfiltered) count and a\r\n * sampling of items to filter and adjust that count. See its various callsites\r\n * for examples of how to use with both sequelize and with raw SQL -- it's not\r\n * hard but much easier to explain by looking at examples than in a docblock.\r\n *\r\n * It works using the `array_agg` postgres function. Consider the following SQL\r\n * for counting messages in a set of threads:\r\n *     SELECT \"threadID\", COUNT(1) FROM messages\r\n *       WHERE \"threadID\" IN (...) GROUP BY \"threadID\"\r\n * But we want the IDs of the messages that were counted. We can't just add \"id\"\r\n * to the list of selected columns since we aren't aggregating on that column.\r\n * What we do instead is this:\r\n *     SELECT \"threadID\", COUNT(1), array_agg(\"id\") FROM messages\r\n *       WHERE \"threadID\" IN (...) GROUP BY \"threadID\"\r\n * Which tells postgres to collect up the aggregated ids into a list and return\r\n * them to us. This function generates that SQL for you, alongside an array\r\n * slice so you only get as many IDs as the functions above actually care about,\r\n * instead of a potentially very long list of everything.\r\n *\r\n * Implemented as a function instead of a constant string so that we can add\r\n * `columnName` as a param later if need be (though I've not done so yet since\r\n * it's always \"id\" right now and it means I don't have to worry about SQL\r\n * escapting/injection issues).\r\n */\r\nexport function countedItems() {\r\n  return `(array_agg(\"id\"))[1:${NUM_SAMPLE_ITEMS}]`;\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport type { Location, UUID } from 'common/types/index.ts';\r\nimport { locationJson } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrgs } from 'server/src/auth/index.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport class PageVisitorLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  loadForContextHash(\r\n    pageContextHash: UUID,\r\n    orgOverride?: UUID, // for unified inbox\r\n  ): Promise<PageVisitorEntity[]> {\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n\r\n    return getSequelize().query(\r\n      `SELECT pv.*\r\n       FROM page_visitors pv\r\n       INNER JOIN users u ON u.id=pv.\"userID\"\r\n       WHERE u.state != 'deleted'\r\n       AND pv.\"pageContextHash\"=$1\r\n       AND pv.\"orgID\"=ANY($2);`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [pageContextHash, orgOverride ? [orgOverride] : orgIDs],\r\n        model: PageVisitorEntity,\r\n      },\r\n    );\r\n  }\r\n\r\n  async latestForContext(matcher: Location, exactMatch: boolean) {\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    const latest = new Map<UUID, { context: Location; timestamp: number }>();\r\n    // This query retrieves one row per user ('DISTINCT ON (pv.\"userID\")'),\r\n    // where that row contains the most recent matching context they were seen\r\n    // on.  There are a number of ways to do this, as described at\r\n    // https://stackoverflow.com/questions/3800551/select-first-row-in-each-group-by-group\r\n    // In general, I thought SELECT DISTINCT ON was the easiest to read and went\r\n    // with that, but other options may have better performance if that becomes\r\n    // a concern.\r\n    const results = await getSequelize().query<{\r\n      contextData: Location;\r\n      externalUserID: string;\r\n      lastPresentTimestamp: Date;\r\n    }>(\r\n      `SELECT DISTINCT ON (pv.\"userID\")\r\n       p.\"contextData\" as \"contextData\", u.\"externalID\" as \"externalUserID\", pv.\"lastPresentTimestamp\" as \"lastPresentTimestamp\"\r\n       FROM pages p INNER JOIN page_visitors pv \r\n                    ON (p.\"orgID\" = pv.\"orgID\" AND p.\"contextHash\" = pv.\"pageContextHash\")\r\n                    INNER JOIN users u\r\n                    ON (u.id = pv.\"userID\")\r\n       WHERE \"contextData\" ${exactMatch ? '=' : '@>'} $1::jsonb\r\n         AND p.\"orgID\" = ANY($2)\r\n         AND u.state != 'deleted'\r\n       ORDER BY pv.\"userID\", \"lastPresentTimestamp\" DESC`,\r\n      {\r\n        bind: [locationJson(matcher), orgIDs],\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n    for (const row of results) {\r\n      latest.set(row.externalUserID, {\r\n        context: row.contextData,\r\n        timestamp: row.lastPresentTimestamp.getTime(),\r\n      });\r\n    }\r\n    return latest;\r\n  }\r\n}\r\n", "import type { WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport DataLoader from 'dataloader';\r\nimport { unique } from 'radash';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\nimport {\r\n  inKeyOrderGroupedCustom,\r\n  inKeyOrderOrNullCustom,\r\n} from 'server/src/entity/base/util.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { RequestContextLoadersInternal } from 'server/src/RequestContextLoaders.ts';\r\nimport { asyncFilter } from 'common/util/asyncFilter.ts';\r\n\r\nexport class ThreadParticipantLoader {\r\n  loadForUserNoOrgCheckDataloader: DataLoader<\r\n    { userID: UUID; threadID: UUID },\r\n    ThreadParticipantEntity | null\r\n  >;\r\n  loadForThreadIDNoOrgCheckDataloader: DataLoader<\r\n    UUID,\r\n    ThreadParticipantEntity[]\r\n  >;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: () => RequestContextLoadersInternal,\r\n  ) {\r\n    this.loadForUserNoOrgCheckDataloader = new DataLoader(\r\n      async (userThreadPairs) => {\r\n        function getKey(x: { threadID: UUID; userID: UUID }) {\r\n          return `${x.threadID}/${x.userID}`;\r\n        }\r\n\r\n        const uniqPairs = unique(userThreadPairs, getKey);\r\n\r\n        const all = await ThreadParticipantEntity.findAll({\r\n          where: { [Op.or]: [...uniqPairs] },\r\n        });\r\n\r\n        // We can't directly match up `all` with `userThreadPairs` since the\r\n        // pairs are not simple strings (they are, well, pairs). So we use\r\n        // `getKey` to match up the two -- turn the pairs into keys (preserving\r\n        // their order from the original `userThreadPairs`), at which point we\r\n        // can use `inKeyOrder` family functions to match everything up.\r\n        return inKeyOrderOrNullCustom(all, userThreadPairs.map(getKey), getKey);\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.loadForThreadIDNoOrgCheckDataloader = new DataLoader(\r\n      async (keys) => {\r\n        const participants = await ThreadParticipantEntity.findAll({\r\n          where: { threadID: unique(keys) },\r\n        });\r\n        return inKeyOrderGroupedCustom(participants, keys, (p) => p.threadID);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadForThreadIDNoOrgCheck(\r\n    threadID: UUID,\r\n  ): Promise<ThreadParticipantEntity[]> {\r\n    const participants =\r\n      await this.loadForThreadIDNoOrgCheckDataloader.load(threadID);\r\n    return await asyncFilter(\r\n      participants,\r\n      async (p) => await this.loaders().privacyLoader.viewerHasParticipant(p),\r\n    );\r\n  }\r\n\r\n  async loadForUser(args: {\r\n    threadID: UUID;\r\n    userID: UUID;\r\n  }): Promise<ThreadParticipantEntity | null> {\r\n    const { orgID } = assertViewerHasIdentity(this.viewer);\r\n    const participant = await ThreadParticipantEntity.findOne({\r\n      where: { threadID: args.threadID, orgID, userID: args.userID },\r\n    });\r\n    const canSee =\r\n      await this.loaders().privacyLoader.viewerHasParticipant(participant);\r\n    return canSee ? participant : null;\r\n  }\r\n\r\n  async loadForUserNoOrgCheck(args: { threadID: UUID; userID: UUID }) {\r\n    return await this.loadForUserNoOrgCheckDataloader.load(args);\r\n  }\r\n\r\n  async loadNewlyActiveThreads(): Promise<UUID[]> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const orgMembersLoader = new OrgMembersLoader(this.viewer);\r\n    const orgIDFilter = await orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    const lastUnseenCondition = {\r\n      [Op.or]: [\r\n        { lastUnseenMessageTimestamp: { [Op.ne]: null } },\r\n        { lastUnseenReactionTimestamp: { [Op.ne]: null } },\r\n      ],\r\n    };\r\n\r\n    const threadParticipantEntities = await ThreadParticipantEntity.findAll({\r\n      where: {\r\n        userID,\r\n        orgID: orgIDFilter,\r\n        subscribed: true,\r\n        ...lastUnseenCondition,\r\n      },\r\n      order: [['lastUnseenMessageTimestamp', 'DESC']],\r\n    });\r\n\r\n    return (\r\n      await asyncFilter(\r\n        threadParticipantEntities,\r\n        async (p) => await this.loaders().privacyLoader.viewerHasParticipant(p),\r\n      )\r\n    ).map(({ threadID }) => threadID);\r\n  }\r\n\r\n  async loadSubscriberIDsForThreadNoOrgCheck(threadID: UUID): Promise<UUID[]> {\r\n    return (\r\n      await ThreadParticipantEntity.findAll({\r\n        where: {\r\n          threadID,\r\n          subscribed: true,\r\n        },\r\n      })\r\n    ).map((p) => p.userID);\r\n  }\r\n\r\n  async loadSubscribedNoOrgCheck(threadID: UUID) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const data = await this.loadForUserNoOrgCheck({\r\n      userID,\r\n      threadID,\r\n    });\r\n\r\n    return data?.subscribed === true;\r\n  }\r\n\r\n  async isViewerThreadParticipantNoOrgCheck(threadID: UUID) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const threadParticipant = await this.loadForUserNoOrgCheck({\r\n      userID,\r\n      threadID,\r\n    });\r\n\r\n    return threadParticipant ? true : false;\r\n  }\r\n\r\n  async loadInboxCount() {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const orgMembersLoader = new OrgMembersLoader(this.viewer);\r\n    const orgIDFilter = await orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    const lastUnseenCondition = {\r\n      [Op.or]: [\r\n        { lastUnseenMessageTimestamp: { [Op.not]: null } },\r\n        { lastUnseenReactionTimestamp: { [Op.not]: null } },\r\n      ],\r\n    };\r\n\r\n    const where: WhereOptions<ThreadParticipantEntity> = {\r\n      userID,\r\n      orgID: orgIDFilter,\r\n      subscribed: true,\r\n      ...lastUnseenCondition,\r\n    };\r\n\r\n    return await ThreadParticipantEntity.count({ where });\r\n  }\r\n\r\n  async loadThreadsInArchive(): Promise<UUID[]> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const orgMembersLoader = new OrgMembersLoader(this.viewer);\r\n\r\n    const orgIDFilter = await orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    // This query loads the most recently active 20 channels that:\r\n    // - the user participates in\r\n    // - the user is subscribed to\r\n    // - the channel is not in user's inbox\r\n    // The subquery computes latest activity timestamp for each threadID. The\r\n    // outer query only takes the latest 20.\r\n    const [rows] = await getSequelize().query(\r\n      `\r\n      SELECT\r\n        subquery.\"threadID\" as id\r\n      FROM (\r\n        SELECT\r\n          DISTINCT ON (tp.\"threadID\")\r\n          tp.\"threadID\",\r\n          m.\"timestamp\"\r\n        FROM\r\n          thread_participants as tp,\r\n          messages as m\r\n        WHERE\r\n          tp.\"userID\" = $1\r\n          AND tp.\"orgID\" = ANY($2)\r\n          AND tp.\"subscribed\" = TRUE\r\n          AND tp.\"lastUnseenMessageTimestamp\" IS NULL\r\n          AND tp.\"threadID\" = m.\"threadID\"\r\n          AND m.\"deletedTimestamp\" IS NULL\r\n        ORDER BY\r\n          tp.\"threadID\",\r\n          m.\"timestamp\" DESC\r\n      ) as subquery\r\n      ORDER BY\r\n        subquery.\"timestamp\" DESC\r\n      LIMIT 20;`,\r\n      {\r\n        bind: [userID, orgIDFilter],\r\n      },\r\n    );\r\n    return rows.map((row: any) => row.id);\r\n  }\r\n\r\n  async loadSeenByUsers(message: MessageEntity): Promise<UserEntity[]> {\r\n    const timestamp = message.lastUpdatedTimestamp ?? message.timestamp;\r\n    const seenByUsers = await ThreadParticipantEntity.findAll({\r\n      where: {\r\n        threadID: message.threadID,\r\n        [Op.or]: {\r\n          lastSeenTimestamp: { [Op.not]: null, [Op.gt]: timestamp },\r\n          // A user has always seen their own messages\r\n          userID: message.sourceID,\r\n        },\r\n      },\r\n    });\r\n    const userIDs = (\r\n      await asyncFilter(\r\n        seenByUsers,\r\n        async (p) => await this.loaders().privacyLoader.viewerHasParticipant(p),\r\n      )\r\n    ).map((user: ThreadParticipantEntity) => user.userID);\r\n    const userLoader = new UserLoader(this.viewer, this.loaders, false);\r\n    const users = await userLoader.loadUsersInOrg(userIDs, message.orgID);\r\n    return users;\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { EmailSubscriptionEntity } from 'server/src/entity/email_subscription/EmailSubscriptionEntity.ts';\r\n\r\nexport class EmailSubscriptionLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async isUserSubscribedToThread(\r\n    userID: UUID,\r\n    threadID: UUID,\r\n  ): Promise<boolean> {\r\n    const result = await EmailSubscriptionEntity.findOne({\r\n      where: { userID, threadID },\r\n    });\r\n\r\n    return result?.subscribed ?? true; // If no entry, the user hasn't opted-out of email subscription\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasOrgs,\r\n} from 'server/src/auth/index.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport class SlackMirroredThreadLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadFromThreadID(\r\n    threadID: UUID,\r\n  ): Promise<SlackMirroredThreadEntity | null> {\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n    return await SlackMirroredThreadEntity.findOne({\r\n      where: {\r\n        threadID,\r\n        [Op.or]: { slackOrgID: orgIDs, threadOrgID: orgIDs },\r\n      },\r\n    });\r\n  }\r\n\r\n  async loadFromSlackID(\r\n    slackChannelID: string,\r\n    slackMessageTimestamp: string,\r\n  ): Promise<SlackMirroredThreadEntity | null> {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    return await SlackMirroredThreadEntity.findOne({\r\n      where: {\r\n        slackChannelID,\r\n        slackMessageTimestamp,\r\n        [Op.or]: { slackOrgID: orgID, threadOrgID: orgID },\r\n      },\r\n    });\r\n  }\r\n\r\n  async threadIsMirrored(threadID: UUID) {\r\n    // Super lightweight check whether the threadID is already present in the\r\n    // table. (No need to construct SlackMirroredThreadEntity objects just to\r\n    // find out if there is one.)\r\n    const [rows] = await getSequelize().query(\r\n      `SELECT 1 FROM slack_mirrored_threads WHERE \"threadID\"=$1 LIMIT 1;`,\r\n      {\r\n        bind: [threadID],\r\n      },\r\n    );\r\n\r\n    return rows.length > 0;\r\n  }\r\n}\r\n", "import type { Transaction, WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\n\r\nexport class ConsoleUserLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    // TODO: Add dataloader, that keys on email, not on id.\r\n  }\r\n\r\n  async loadUser(email: string, transaction?: Transaction) {\r\n    return await ConsoleUserEntity.findOne({\r\n      where: { email },\r\n      transaction,\r\n    });\r\n  }\r\n\r\n  async loadConsoleUsersForCustomer(\r\n    customerID: UUID,\r\n    includingPendingUsers?: boolean,\r\n  ): Promise<ConsoleUserEntity[]> {\r\n    let whereOptions: WhereOptions = {\r\n      customerID,\r\n    };\r\n\r\n    if (includingPendingUsers) {\r\n      whereOptions = {\r\n        [Op.or]: {\r\n          customerID,\r\n          pendingCustomerID: customerID,\r\n        },\r\n      };\r\n    }\r\n\r\n    return await ConsoleUserEntity.findAll({\r\n      where: whereOptions,\r\n      order: ['pendingCustomerID'],\r\n    });\r\n  }\r\n\r\n  async loadPendingUserInCustomer(\r\n    email: string,\r\n    pendingCustomerID: string,\r\n    transaction?: Transaction,\r\n  ) {\r\n    return await ConsoleUserEntity.findOne({\r\n      where: { email, pendingCustomerID },\r\n      transaction,\r\n    });\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { DeploysEntity } from 'server/src/entity/deploys/DeploysEntity.ts';\r\nimport type { Tier } from 'common/types/index.ts';\r\n\r\n// We cache these because we only care if the user's version is more than 60\r\n// days old, so once we've loaded a valid finish time for a particular version,\r\n// we don't need to ever check if it's changed, because it's basically\r\n// irrelevant.  (This cache resets on restart, which will be at least once a\r\n// day generally.)\r\nconst mostRecentDeployCache = new Map<string, Date>();\r\n\r\nexport class DeploysLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadMostRecentSuccessfulDeploymentCached(\r\n    version: string,\r\n    tier: Tier,\r\n  ): Promise<Date | null> {\r\n    try {\r\n      const key = `${tier}/${version}`;\r\n      if (mostRecentDeployCache.has(key)) {\r\n        return mostRecentDeployCache.get(key)!;\r\n      }\r\n      const deploy = await DeploysEntity.findOne({\r\n        where: {\r\n          packageVersion: version,\r\n          tier,\r\n          success: true,\r\n          deployFinishTime: {\r\n            [Op.ne]: null,\r\n          },\r\n        },\r\n        order: [['deployFinishTime', 'DESC']],\r\n      });\r\n      if (deploy?.deployFinishTime) {\r\n        mostRecentDeployCache.set(key, deploy.deployFinishTime);\r\n      }\r\n      return deploy?.deployFinishTime ?? null;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { inKeyOrder } from 'server/src/entity/base/util.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class CustomerLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, CustomerEntity | null>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const buckets = await CustomerEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n        return inKeyOrder(buckets, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async load(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Customer dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async loadAll() {\r\n    return await CustomerEntity.findAll();\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { JsonObject, UUID } from 'common/types/index.ts';\r\n\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport class ApplicationUsageMetricLoader {\r\n  constructor(public readonly viewer: Viewer) {}\r\n\r\n  /**\r\n   * Load stored application usage metrics from the database and return them in\r\n   * the format in which we deliver them in GraphQL: an array of JSON objects,\r\n   * one per day, in chronological order. Each object contains the field `date`,\r\n   * with a date string, and fields for the requested metrics.\r\n   */\r\n  async loadUsageMetrics(\r\n    applicationID: UUID,\r\n    metrics: string[],\r\n    days: number,\r\n  ): Promise<JsonObject[]> {\r\n    const rows = await getSequelize().query<{ data: JsonObject }>(\r\n      `SELECT\r\n        jsonb_build_object('date', d.day) ||\r\n        jsonb_object_agg(mt.metric, m.value)\r\n        AS data\r\n      FROM (SELECT CURRENT_DATE-generate_series(1,$1) AS day) d\r\n      CROSS JOIN application_usage_metric_types mt\r\n      LEFT OUTER JOIN application_usage_metrics m\r\n        ON m.\"applicationID\"=$2\r\n        AND m.date=d.day\r\n        AND m.\"metricID\"=mt.id\r\n      WHERE mt.metric=ANY($3)\r\n      GROUP BY d.day ORDER BY d.day;`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [days, applicationID, metrics],\r\n      },\r\n    );\r\n\r\n    return rows.map((row) => row.data);\r\n  }\r\n\r\n  async loadLatestUsage(metric: string, applicationIDs: UUID[]) {\r\n    const rows = await getSequelize().query<{ data: JsonObject }>(\r\n      `SELECT\r\n      m.date,\r\n      m.\"applicationID\",\r\n      jsonb_object_agg(mt.metric, m.value) AS data\r\n    FROM application_usage_metrics m\r\n    JOIN application_usage_metric_types mt ON m.\"metricID\" = mt.id\r\n    WHERE\r\n      m.date = (\r\n        SELECT\r\n          MAX(date)\r\n        FROM\r\n          application_usage_metrics\r\n      )\r\n      AND mt.metric=$1\r\n      and m.\"applicationID\"=ANY($2)\r\n    GROUP BY\r\n      m.date,\r\n      m.\"applicationID\";`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [metric, applicationIDs],\r\n      },\r\n    );\r\n\r\n    return rows.map((row) => row.data);\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport type { NotificationListFilter, UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { createNotificationsQueryExpressionsFromFilters } from 'server/src/notifications/fetch.ts';\r\n\r\nexport class NotificationLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadUnreadNotificationCount(\r\n    userID: UUID,\r\n    filter?: NotificationListFilter,\r\n  ) {\r\n    const {\r\n      bindVariables: partialBind,\r\n      extraJoins,\r\n      extraCondition,\r\n    } = await createNotificationsQueryExpressionsFromFilters({\r\n      filter,\r\n      platformApplicationID: this.viewer.platformApplicationID,\r\n      ltCreatedTimestamp: undefined,\r\n      limit: undefined,\r\n      viewer: this.viewer,\r\n    });\r\n\r\n    const bindVariables = [...partialBind, userID];\r\n    const recipientFilter = `WHERE n.\"recipientID\" = $${bindVariables.length}`;\r\n\r\n    // To get an unread count correctly aggregated, we count the number of\r\n    // distinct aggregation keys (to only count once the rows which will get\r\n    // aggregated into a single Notification), except we need to count each null\r\n    // aggregation key individually (since null means \"do not aggregate\", i.e.,\r\n    // we do not aggregate all the nulls together despite them nominally sharing\r\n    // a key).\r\n    const result = await getSequelize().query<{ count: number }>(\r\n      `SELECT COALESCE(\r\n           COUNT(DISTINCT n.\"aggregationKey\") +\r\n             SUM(n.\"aggregationKey\" IS NULL::int),\r\n           0\r\n         )::int AS count\r\n         FROM \"cord\".notifications as n\r\n         ${extraJoins}\r\n         ${recipientFilter} AND n.\"readStatus\" = 'unread'\r\n         ${extraCondition}\r\n        `,\r\n      { bind: bindVariables, type: QueryTypes.SELECT },\r\n    );\r\n\r\n    return result[0].count;\r\n  }\r\n\r\n  async notificationMatchesFilter(\r\n    notificationID: UUID,\r\n    filter: NotificationListFilter | undefined,\r\n  ) {\r\n    const {\r\n      bindVariables: partialBind,\r\n      extraJoins,\r\n      extraCondition,\r\n    } = await createNotificationsQueryExpressionsFromFilters({\r\n      filter,\r\n      platformApplicationID: this.viewer.platformApplicationID,\r\n      ltCreatedTimestamp: undefined,\r\n      limit: undefined,\r\n      viewer: this.viewer,\r\n    });\r\n    const bindVariables = [...partialBind, notificationID];\r\n    const idFilter = `WHERE n.\"id\" = $${bindVariables.length}`;\r\n\r\n    const notification = await getSequelize().query(\r\n      `\r\n      SELECT n.id\r\n      FROM notifications n\r\n      ${extraJoins}\r\n      ${idFilter}\r\n      ${extraCondition}\r\n      `,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n        model: NotificationEntity,\r\n      },\r\n    );\r\n\r\n    return notification.length > 0;\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport { buildThreadActionNotification } from 'server/src/notifications/types/thread_action.ts';\r\nimport { getLocationFilter } from 'common/types/index.ts';\r\nimport type { UUID, NotificationListFilter } from 'common/types/index.ts';\r\nimport type { Notification } from 'server/src/schema/resolverTypes.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type {\r\n  NotificationType,\r\n  SpecificNotificationEntity,\r\n} from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { buildExternalNotification } from 'server/src/notifications/types/external.ts';\r\nimport { buildReactionNotification } from 'server/src/notifications/types/reaction.ts';\r\nimport { buildReplyNotification } from 'server/src/notifications/types/reply.ts';\r\nimport { Counter, incCounterWithAppID } from 'server/src/logging/prometheus.ts';\r\nimport { isNotNull } from 'common/util/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\n\r\nconst fetchedCounter = Counter({\r\n  name: 'NotificationEntityFetched',\r\n  help: 'Count of NotificationEntity fetched by notificationsResolver',\r\n  labelNames: ['appID', 'type'],\r\n});\r\n\r\nconst sentCounter = Counter({\r\n  name: 'NotificationSentToClient',\r\n  help: 'Count of GraphQL Notification objects returned to client from notificationsResolver',\r\n  labelNames: ['appID'],\r\n});\r\n\r\nexport async function fetchAndBuildNotifications(\r\n  context: RequestContext,\r\n  {\r\n    ltCreatedTimestamp,\r\n    limit,\r\n    filter,\r\n  }: {\r\n    ltCreatedTimestamp: Date | undefined;\r\n    limit: number | undefined;\r\n    filter: NotificationListFilter | undefined;\r\n  },\r\n): Promise<{ entities: NotificationEntity[]; nodes: Notification[] }> {\r\n  const userID = assertViewerHasUser(context.session.viewer);\r\n  const {\r\n    bindVariables: partialBind,\r\n    extraJoins,\r\n    extraCondition,\r\n    limitCondition,\r\n  } = await createNotificationsQueryExpressionsFromFilters({\r\n    ltCreatedTimestamp,\r\n    limit,\r\n    filter,\r\n    platformApplicationID: context.session.viewer.platformApplicationID,\r\n    viewer: context.session.viewer,\r\n  });\r\n  const bindVariables = [...partialBind, userID];\r\n  const recipientFilter = `WHERE n.\"recipientID\" = $${bindVariables.length}`;\r\n\r\n  const entities = await getSequelize().query(\r\n    `\r\n    SELECT n.*\r\n    FROM notifications n\r\n    ${extraJoins}\r\n    ${recipientFilter}\r\n    ${extraCondition}\r\n    ORDER BY n.\"createdTimestamp\" DESC\r\n    ${limitCondition};`,\r\n    {\r\n      bind: bindVariables,\r\n      type: QueryTypes.SELECT,\r\n      model: NotificationEntity,\r\n    },\r\n  );\r\n\r\n  entities.forEach((e) =>\r\n    incCounterWithAppID(context.session.viewer, fetchedCounter, {\r\n      type: e.type,\r\n    }),\r\n  );\r\n\r\n  const aggregatedEntities = aggregateNotificationEntities(entities);\r\n\r\n  const maybeNodes = await Promise.all(\r\n    Array.from(aggregatedEntities.values()).map((notifEntities) =>\r\n      buildNotification(context, notifEntities),\r\n    ),\r\n  );\r\n\r\n  const nodes = maybeNodes.filter(isNotNull);\r\n  incCounterWithAppID(context.session.viewer, sentCounter, {}, nodes.length);\r\n  return { entities, nodes };\r\n}\r\n\r\nexport async function buildNotification(\r\n  context: RequestContext,\r\n  notifs: NotificationEntity[],\r\n): Promise<Notification | null> {\r\n  try {\r\n    // Unfortunately we can't move assertCorrectAggregation out here, because\r\n    // being inside the switch affects TypeScript's type inference. Fundamentally\r\n    // the type inference isn't smart enough to express what we want (some way to\r\n    // tie the type of notifs[0].type to the type of *all* of notifs) so we do it\r\n    // this way.\r\n    const ty = notifs[0].type;\r\n    switch (ty) {\r\n      case 'reply':\r\n        assertCorrectAggregation(notifs, ty);\r\n        return await buildReplyNotification(context, notifs[0]);\r\n      case 'reaction':\r\n        assertCorrectAggregation(notifs, ty);\r\n        return await buildReactionNotification(context, notifs);\r\n      case 'external':\r\n        assertCorrectAggregation(notifs, ty);\r\n        return await buildExternalNotification(context, notifs[0]);\r\n      case 'thread_action':\r\n        assertCorrectAggregation(notifs, ty);\r\n        return await buildThreadActionNotification(context, notifs[0]);\r\n      default: {\r\n        // Force a TypeScript error if we forgot a case above (so if you get an\r\n        // error here, you forgot a case above). So the only way we ever get\r\n        // here is if the server and the DB disagree about valid notif types\r\n        // (e.g., when switching branches locally, or after a prod revert or\r\n        // similar).\r\n        const _: never = ty;\r\n        throw new Error('Invalid notification type: ' + ty);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    context.logger.logException('Failed to create notification', e, {\r\n      notifID: notifs[0].id,\r\n      notifType: notifs[0].type,\r\n      userID: context.session.viewer.userID,\r\n    });\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction aggregateNotificationEntities(notifs: NotificationEntity[]) {\r\n  // The Map type maintains insertion order, which is important to maintain\r\n  // proper sorting. Assuming notifs is passed sorted in reverse chronological\r\n  // order, this will mean aggregated notifications will end up in the list at\r\n  // the timestamp of the newest notification, which is what we want.\r\n  const m = new Map<UUID, NotificationEntity[]>();\r\n\r\n  notifs.forEach((n) => {\r\n    // For notifications with a null aggregation key, do not aggregate them,\r\n    // i.e., pick a unique key (their id) which will never show up again.\r\n    const key = n.aggregationKey ?? n.id;\r\n    if (!m.has(key)) {\r\n      m.set(key, []);\r\n    }\r\n    m.get(key)!.push(n);\r\n  });\r\n\r\n  return m;\r\n}\r\n\r\nconst aggregates: { [x in NotificationType]?: boolean } = {\r\n  reaction: true,\r\n};\r\n\r\nfunction assertCorrectAggregation<T extends NotificationType>(\r\n  notifs: NotificationEntity[],\r\n  ty: T,\r\n): asserts notifs is SpecificNotificationEntity<T>[] {\r\n  if (notifs.length > 1 && !aggregates[ty]) {\r\n    throw new Error(\r\n      `Notification type ${ty} should not be aggregated (has ${notifs.length})`,\r\n    );\r\n  }\r\n\r\n  notifs.forEach((n) => {\r\n    if (n.type !== ty) {\r\n      throw new Error(\r\n        `Invalid aggregation of ${ty}, found unexpected ${n.type}`,\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @description Function to create SQL expressions from the provided notifications filters.\r\n * Since we need multiple joins and expressions to parse the filters and we fetch\r\n * notifications from multiple places, we can just use this instead of duplicating the code.\r\n *\r\n * @note this code assumes that the notifications table has been aliased to `n` in the main query.\r\n */\r\nexport async function createNotificationsQueryExpressionsFromFilters({\r\n  ltCreatedTimestamp,\r\n  limit,\r\n  filter,\r\n  platformApplicationID,\r\n  viewer,\r\n}: {\r\n  ltCreatedTimestamp: Date | undefined;\r\n  limit: number | undefined;\r\n  filter: NotificationListFilter | undefined;\r\n  platformApplicationID: string | undefined;\r\n  viewer: Viewer;\r\n}) {\r\n  const bindVariables = [];\r\n  // make sure we don't return notifications for deleted messages\r\n  const extraConditions = ['m.\"deletedTimestamp\" IS NULL'];\r\n  // only create the joins if we need them\r\n  let extraJoins = '';\r\n\r\n  if (ltCreatedTimestamp) {\r\n    bindVariables.push(JSON.stringify(ltCreatedTimestamp));\r\n    extraConditions.push(\r\n      `n.\"createdTimestamp\" < $${bindVariables.length}::timestamp`,\r\n    );\r\n  }\r\n\r\n  if (filter?.metadata) {\r\n    bindVariables.push(JSON.stringify(filter?.metadata));\r\n    extraConditions.push(`n.\"metadata\" @> $${bindVariables.length}::jsonb`);\r\n  }\r\n\r\n  // since reaction notifications do not have a message ID, we\r\n  // have to join on the message_reactions table to get the message id then\r\n  // join on messages to get the org id for the filter\r\n  extraJoins = `\r\n      LEFT JOIN message_reactions mr ON n.\"reactionID\" = mr.id\r\n      LEFT JOIN messages m ON CASE \r\n        WHEN n.\"messageID\" IS NULL THEN mr.\"messageID\"\r\n        ELSE n.\"messageID\" END = m.id`;\r\n\r\n  const orgMembersLoader = new OrgMembersLoader(viewer);\r\n  const orgIDs = await orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n  if (orgIDs.length === 0) {\r\n    throw new ApiCallerError('group_not_found');\r\n  }\r\n  if (filter?.groupID || filter?.organizationID) {\r\n    const org = await OrgEntity.findOne({\r\n      where: {\r\n        externalID: filter.groupID ?? filter.organizationID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n    if (!org) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n\r\n    if (!orgIDs.includes(org.id)) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n    bindVariables.push(org.id);\r\n    extraConditions.push(\r\n      `((m.\"orgID\" = $${bindVariables.length} AND n.\"type\" != 'external') OR n.\"type\" = 'external')`,\r\n    );\r\n  } else {\r\n    // We still want to only get notifications that the user can see, if any are type reply or reaction then\r\n    // we also check the orgID. If they are type external then we do not check the org.\r\n    bindVariables.push(orgIDs);\r\n    extraConditions.push(\r\n      `((m.\"orgID\" = ANY($${bindVariables.length}) AND n.\"type\" != 'external') OR n.\"type\" = 'external')`,\r\n    );\r\n  }\r\n\r\n  const locationFilter = getLocationFilter(filter?.location);\r\n  if (locationFilter) {\r\n    // We have to join on all the tables as in the org join above\r\n    // to get thread data which contains pageContextHash.\r\n\r\n    // As a result, if both organization and location filters are applied,\r\n    // all necessary joins will still be done.\r\n    // NOTE: if we're to add another JOIN clause for a separate filter,\r\n    // we'll have to rethink this logic\r\n    extraJoins = `\r\n    LEFT JOIN message_reactions mr ON n.\"reactionID\" = mr.id\r\n    LEFT JOIN messages m ON CASE\r\n      WHEN n.\"messageID\" IS NULL THEN mr.\"messageID\"\r\n      ELSE n.\"messageID\" END = m.id\r\n    LEFT JOIN threads t ON m.\"threadID\" = t.id\r\n    INNER JOIN pages p ON (p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`;\r\n\r\n    bindVariables.push(JSON.stringify(locationFilter.value));\r\n    extraConditions.push(\r\n      `p.\"contextData\" ${locationFilter.partialMatch ? '@>' : '='} $${\r\n        bindVariables.length\r\n      }::jsonb`,\r\n    );\r\n  }\r\n\r\n  let limitCondition = '';\r\n  if (limit) {\r\n    bindVariables.push(limit);\r\n    limitCondition = `LIMIT $${bindVariables.length}`;\r\n  }\r\n\r\n  const extraCondition = `AND ${extraConditions.join(' AND ')}`;\r\n\r\n  return { bindVariables, extraJoins, extraCondition, limitCondition };\r\n}\r\n", "import { assert } from 'common/util/index.ts';\r\nimport type { SpecificNotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { Notification } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type ThreadActionType = 'resolve' | 'unresolve';\r\n\r\nexport async function buildThreadActionNotification(\r\n  context: RequestContext,\r\n  notif: SpecificNotificationEntity<'thread_action'>,\r\n): Promise<Notification | null> {\r\n  assert(\r\n    notif.recipientID === context.session.viewer.userID,\r\n    'Viewer must be notif recipient',\r\n  );\r\n\r\n  if (notif.senderID === null) {\r\n    throw new Error('Thread action notif must have a sender');\r\n  }\r\n\r\n  if (notif.threadID === null) {\r\n    throw new Error('Thread action notif must have a threadID');\r\n  }\r\n\r\n  const [sender, thread] = await Promise.all([\r\n    context.loaders.userLoader.loadUser(notif.senderID),\r\n    context.loaders.threadLoader.loadThread(notif.threadID),\r\n  ]);\r\n\r\n  // Notifs for thread actions don't necessarily require a sender. However, we currently\r\n  // only create the notifs when we have an `actor` so it's always associated with a\r\n  // message and a user - the content for the notification has also followed this logic\r\n  // and doesn't handle the case where we might not have a sender, hence the check below.\r\n  if (sender === null) {\r\n    throw new Error('Unable to load sender');\r\n  }\r\n\r\n  if (thread === null) {\r\n    throw new Error('Unable to load thread');\r\n  }\r\n\r\n  if (!notif.threadActionType) {\r\n    throw new Error(\r\n      'threadActionType must be present for thread action notifs',\r\n    );\r\n  }\r\n  const [header, translationKey] = headerText(notif.threadActionType);\r\n\r\n  return {\r\n    id: notif.id,\r\n    externalID: notif.externalID,\r\n    senders: [sender],\r\n    iconUrl: null,\r\n    header: [\r\n      {\r\n        user: sender,\r\n      },\r\n      {\r\n        text: ` ${header} `,\r\n        bold: false,\r\n      },\r\n      {\r\n        text: thread.name,\r\n        bold: true,\r\n      },\r\n    ],\r\n    headerTranslationKey: translationKey,\r\n    headerSimpleTranslationParams: { threadName: thread.name },\r\n    readStatus: notif.readStatus,\r\n    timestamp: notif.createdTimestamp,\r\n    extraClassnames: notif.extraClassnames,\r\n    metadata: notif.metadata,\r\n    attachment: { thread },\r\n  };\r\n}\r\n\r\nexport function headerText(action: ThreadActionType): [string, string] {\r\n  switch (action) {\r\n    case 'resolve':\r\n      return [`resolved the thread`, 'cord.thread_resolve'];\r\n    case 'unresolve':\r\n      return [`reopened the thread`, 'cord.thread_unresolve'];\r\n    default: {\r\n      const _: never = action;\r\n      throw new Error('Unknown thread action type: ' + action);\r\n    }\r\n  }\r\n}\r\n", "import { assert } from 'common/util/index.ts';\r\nimport type { SpecificNotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type {\r\n  Notification,\r\n  NotificationHeaderNode,\r\n} from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport async function buildExternalNotification(\r\n  context: RequestContext,\r\n  notif: SpecificNotificationEntity<'external'>,\r\n): Promise<Notification> {\r\n  assert(\r\n    notif.recipientID === context.session.viewer.userID,\r\n    'Viewer must be notif recipient',\r\n  );\r\n\r\n  if (notif.externalTemplate === null || notif.externalURL === null) {\r\n    throw new Error('External notif must have template and URL');\r\n  }\r\n\r\n  const [sender, recipient] = await Promise.all([\r\n    notif.senderID ? context.loaders.userLoader.loadUser(notif.senderID) : null,\r\n    context.loaders.userLoader.loadUser(notif.recipientID),\r\n  ]);\r\n\r\n  if (recipient === null) {\r\n    throw new Error('Unable to load recipient');\r\n  }\r\n\r\n  return {\r\n    id: notif.id,\r\n    externalID: notif.externalID,\r\n    senders: sender ? [sender] : [],\r\n    iconUrl: notif.iconUrl,\r\n    header: externalHeader(notif.externalTemplate, sender, recipient),\r\n    headerTranslationKey: null,\r\n    headerSimpleTranslationParams: null,\r\n    attachment: { url: notif.externalURL },\r\n    readStatus: notif.readStatus,\r\n    timestamp: notif.createdTimestamp,\r\n    extraClassnames: notif.extraClassnames,\r\n    metadata: notif.metadata,\r\n  };\r\n}\r\n\r\nfunction externalHeader(\r\n  template: string,\r\n  sender: UserEntity | null,\r\n  recipient: UserEntity,\r\n) {\r\n  // We need to split the template into literal parts and templated parts -- so\r\n  // \"{{actor}} ate a sandwich\" becomes [\"{{actor}}\", \" ate a sandwich\"]. Use a\r\n  // regexp with string.split to do that. Normally, string.split does not\r\n  // include the matched characters in the result -- \"hi test\".split(\" \")\r\n  // results in [\"hi\", \"test\"] -- the space is lost. But we do want every\r\n  // character of the input to appear in the split output somewhere, we just\r\n  // want to use the regex to help tokenize.  It turns out that string.split\r\n  // will implicitly insert any capturing groups into the result, so we can wrap\r\n  // the whole regex in a capturing group to include the actual text that we\r\n  // matched as part of the output. Any other groups therefore need to be\r\n  // non-capturing.\r\n  //\r\n  // The regex thus represents:\r\n  // - A capturing group around the whole thing\r\n  // - Two braces \"{{\"\"\r\n  // - Optionally followed by whitespace\r\n  // - Followed by \"actor\" or \"recipient\" (using a non-capturing group)\r\n  // - Optionally followed by whitespace\r\n  // - Two braces \"}}\"\r\n  const re = /({{ *(?:actor|recipient) *}})/;\r\n  const result: NotificationHeaderNode[] = [];\r\n  for (const segment of template.split(re)) {\r\n    if (segment === '') {\r\n      continue;\r\n    } else if (segment.match(re) === null) {\r\n      result.push({ text: segment, bold: false });\r\n    } else if (sender && segment.includes('actor')) {\r\n      result.push({ user: sender });\r\n    } else if (segment.includes('recipient')) {\r\n      result.push({ user: recipient });\r\n    } else {\r\n      throw new Error(`What did we match?! ${segment}`);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n", "import { unique } from 'radash';\r\nimport { isNotNull } from 'common/util/index.ts';\r\nimport type { SpecificNotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type {\r\n  Notification,\r\n  NotificationHeaderNode,\r\n  NotificationSender,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport type { SimpleTranslationParameters } from 'common/types/index.ts';\r\n\r\nexport async function buildReactionNotification(\r\n  context: RequestContext,\r\n  notifs: SpecificNotificationEntity<'reaction'>[],\r\n): Promise<Notification | null> {\r\n  const firstNotif = notifs[0];\r\n  const firstNotifReaction = firstNotif.reactionID;\r\n\r\n  if (firstNotifReaction === null) {\r\n    throw new Error('Reaction notif must have reactionID');\r\n  }\r\n\r\n  notifs.forEach((notification) => {\r\n    if (!notification.senderID) {\r\n      throw new Error(`Reaction notif must have a sender`);\r\n    }\r\n  });\r\n\r\n  const [maybeSenders, message, reactionUnicode] = await Promise.all([\r\n    Promise.all(\r\n      notifs.map((n) => context.loaders.userLoader.loadUser(n.senderID!)),\r\n    ),\r\n    (async () => {\r\n      const reaction =\r\n        await context.loaders.messageReactionLoader.loadReactionNoOrgCheck(\r\n          firstNotifReaction,\r\n        );\r\n      if (!reaction) {\r\n        return null;\r\n      }\r\n      return await context.loaders.messageLoader.loadMessage(\r\n        reaction.messageID,\r\n      );\r\n    })(),\r\n    (async () => {\r\n      // TODO (notifications) revisit with smarter logic designs once options\r\n      // have been explored.\r\n      // Displaying aggregated reaction notifications will only show the most\r\n      // recent reaction unicode from the group.\r\n      const reaction =\r\n        await context.loaders.messageReactionLoader.loadReactionNoOrgCheck(\r\n          firstNotifReaction,\r\n        );\r\n\r\n      return reaction?.unicodeReaction ?? null;\r\n    })(),\r\n  ]);\r\n\r\n  if (message === null) {\r\n    throw new Error('Unable to load message');\r\n  }\r\n\r\n  if (reactionUnicode === null) {\r\n    throw new Error('Unable to load message reaction');\r\n  }\r\n\r\n  // If the underlying message has been deleted, don't return a notification\r\n  if (message.deletedTimestamp) {\r\n    return null;\r\n  }\r\n\r\n  const senders = unique(maybeSenders.filter(isNotNull), (u) => u.id);\r\n  if (senders.length === 0) {\r\n    throw new Error('Unable to load any senders');\r\n  }\r\n\r\n  await context.loaders.threadLoader.assertViewerHasThread(message.threadID);\r\n\r\n  const [header, headerTranslationKey, headerSimpleTranslationParams] =\r\n    getHeader(senders, reactionUnicode);\r\n\r\n  return {\r\n    id: firstNotif.id,\r\n    externalID: firstNotif.externalID,\r\n    senders,\r\n    iconUrl: null,\r\n    header,\r\n    headerTranslationKey,\r\n    headerSimpleTranslationParams,\r\n    attachment: {\r\n      message,\r\n    },\r\n    readStatus: firstNotif.readStatus,\r\n    timestamp: firstNotif.createdTimestamp,\r\n    extraClassnames: firstNotif.extraClassnames,\r\n    metadata: firstNotif.metadata,\r\n  };\r\n}\r\n\r\nfunction getHeader(\r\n  senders: NotificationSender[],\r\n  reactionUnicode: string,\r\n): [NotificationHeaderNode[], string, SimpleTranslationParameters] {\r\n  // Three cases, depending on how many people reacted:\r\n  // - One person: NAME reacted to your message\r\n  // - Two people: NAME and NAME reacted to your message\r\n  // - Three+ people: NAME and N others reacted to your message\r\n\r\n  if (senders.length === 0) {\r\n    // This should be verified by the creation function above...\r\n    throw new Error('Notification must have at least one sender!');\r\n  } else if (senders.length === 1) {\r\n    return [\r\n      [\r\n        {\r\n          user: senders[0],\r\n        },\r\n        {\r\n          text: ` reacted ${reactionUnicode} to your message`,\r\n          bold: false,\r\n        },\r\n      ],\r\n      'cord.reaction_single',\r\n      { reaction: reactionUnicode },\r\n    ];\r\n  } else if (senders.length === 2) {\r\n    return [\r\n      [\r\n        {\r\n          user: senders[0],\r\n        },\r\n        {\r\n          text: ' and ',\r\n          bold: true,\r\n        },\r\n        {\r\n          user: senders[1],\r\n        },\r\n        {\r\n          text: ` reacted ${reactionUnicode} to your message`,\r\n          bold: false,\r\n        },\r\n      ],\r\n      'cord.reaction_double',\r\n      { reaction: reactionUnicode },\r\n    ];\r\n  } else {\r\n    return [\r\n      [\r\n        {\r\n          user: senders[0],\r\n        },\r\n        {\r\n          text: ` and ${senders.length - 1} others`,\r\n          bold: true,\r\n        },\r\n        {\r\n          text: ` reacted ${reactionUnicode} to your message`,\r\n          bold: false,\r\n        },\r\n      ],\r\n      'cord.reaction_overflow',\r\n      { reaction: reactionUnicode, count: senders.length - 1 },\r\n    ];\r\n  }\r\n}\r\n", "import { assert } from 'common/util/index.ts';\r\nimport type { SpecificNotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { Notification } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport async function buildReplyNotification(\r\n  context: RequestContext,\r\n  notif: SpecificNotificationEntity<'reply'>,\r\n): Promise<Notification | null> {\r\n  assert(\r\n    notif.recipientID === context.session.viewer.userID,\r\n    'Viewer must be notif recipient',\r\n  );\r\n\r\n  if (notif.messageID === null) {\r\n    throw new Error('Reply notif must have messageID');\r\n  }\r\n\r\n  if (notif.replyActions === null) {\r\n    throw new Error('No reply actions');\r\n  }\r\n\r\n  if (notif.senderID === null) {\r\n    throw new Error('Reply notif must have a sender');\r\n  }\r\n\r\n  const [sender, message] = await Promise.all([\r\n    context.loaders.userLoader.loadUser(notif.senderID),\r\n    context.loaders.messageLoader.loadMessage(notif.messageID),\r\n  ]);\r\n\r\n  if (sender === null) {\r\n    throw new Error('Unable to load sender');\r\n  }\r\n\r\n  if (message === null) {\r\n    throw new Error('Unable to load message');\r\n  }\r\n\r\n  // If the underlying message has been deleted, don't return a notification\r\n  if (message.deletedTimestamp) {\r\n    return null;\r\n  }\r\n\r\n  const thread = await context.loaders.threadLoader.loadThread(\r\n    message.threadID,\r\n  );\r\n\r\n  if (thread === null) {\r\n    throw new Error('Unable to load thread');\r\n  }\r\n\r\n  const [header, connective, translationKey] = headerText(notif.replyActions);\r\n\r\n  return {\r\n    id: notif.id,\r\n    externalID: notif.externalID,\r\n    senders: [sender],\r\n    iconUrl: null,\r\n    header: [\r\n      {\r\n        user: sender,\r\n      },\r\n      {\r\n        text: ` ${header} ${connective} `,\r\n        bold: false,\r\n      },\r\n      {\r\n        text: thread.name,\r\n        bold: true,\r\n      },\r\n    ],\r\n    headerTranslationKey: translationKey,\r\n    headerSimpleTranslationParams: { threadName: thread.name },\r\n    attachment: {\r\n      message,\r\n    },\r\n    readStatus: notif.readStatus,\r\n    timestamp: notif.createdTimestamp,\r\n    extraClassnames: notif.extraClassnames,\r\n    metadata: notif.metadata,\r\n  };\r\n}\r\n\r\nexport function headerText(\r\n  actions: NotificationReplyAction[],\r\n): [string, string, string] {\r\n  if (actions.includes('unassign-task')) {\r\n    let text = 'unassigned you from a task';\r\n    let key = 'cord.reply_unassign';\r\n    if (actions.includes('mention')) {\r\n      text = 'mentioned you and ' + text;\r\n      key = 'cord.reply_mention_unassign';\r\n    }\r\n    return [text, 'in', key];\r\n  } else if (actions.includes('assign-task')) {\r\n    let text = 'assigned you to a task';\r\n    let key = 'cord.reply_assign';\r\n    if (actions.includes('mention')) {\r\n      text = 'mentioned you and ' + text;\r\n      key = 'cord.reply_mention_assign';\r\n    }\r\n    return [text, 'in', key];\r\n  } else if (actions.includes('mention')) {\r\n    let text = 'mentioned you';\r\n    let key = 'cord.reply_mention';\r\n    if (actions.includes('attach-file')) {\r\n      text += ' and sent you a file';\r\n      key = 'cord.reply_mention_attachment';\r\n    }\r\n    return [text, 'in', key];\r\n  } else if (actions.includes('create-thread')) {\r\n    return ['created a new thread', 'named', 'cord.thread_create'];\r\n  } else {\r\n    return ['replied', 'on', 'cord.reply'];\r\n  }\r\n}\r\n", "import isJWT from 'validator/lib/isJWT.js';\r\nimport type { Transaction, WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport type { Request, Response, NextFunction } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { verify } from 'jsonwebtoken';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport type { EntityMetadata, JsonObject, UUID } from 'common/types/index.ts';\r\nimport { AuthProviderType, Viewer } from 'server/src/auth/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { combine } from 'common/util/index.ts';\r\nimport type { LoggingTags } from 'server/src/logging/Logger.ts';\r\nimport { UserMutator } from 'server/src/entity/user/UserMutator.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\nconst ApiErrors = {\r\n  // Database queries\r\n  project_not_found: {\r\n    statusCode: 401,\r\n    message: 'Platform project not found.',\r\n  },\r\n  group_not_found: {\r\n    statusCode: 401,\r\n    message: 'Platform group not found.',\r\n  },\r\n  organization_not_found: {\r\n    statusCode: 401,\r\n    message: 'Platform organization not found.',\r\n  },\r\n  group_already_exists: {\r\n    statusCode: 409,\r\n    message: 'Platform group already exists.',\r\n  },\r\n  organization_already_exists: {\r\n    statusCode: 409,\r\n    message: 'Platform organization already exists.',\r\n  },\r\n  user_not_found: {\r\n    statusCode: 401,\r\n    message: 'Platform user not found.',\r\n  },\r\n  user_already_exists: {\r\n    statusCode: 409,\r\n    message: 'Platform user already exists.',\r\n  },\r\n  user_not_in_group: {\r\n    statusCode: 401,\r\n    message: 'The user is not a member of the group.',\r\n  },\r\n  user_not_in_organization: {\r\n    statusCode: 401,\r\n    message: 'The user is not a member of the oranization.',\r\n  },\r\n  invalid_user_id: {\r\n    statusCode: 401,\r\n    message: 'Invalid user id',\r\n  },\r\n  group_members_missing: {\r\n    statusCode: 401,\r\n    message: 'Could not find some group members',\r\n  },\r\n\r\n  // Request input\r\n  invalid_request: {\r\n    statusCode: 400,\r\n    message: 'Invalid request.',\r\n  },\r\n  unexpected_field: {\r\n    statusCode: 400,\r\n    message: 'Unexpected field.',\r\n  },\r\n  invalid_field: {\r\n    statusCode: 400,\r\n    message: 'Invalid field type.',\r\n  },\r\n  missing_field: {\r\n    statusCode: 400,\r\n    message: 'Missing field in request.',\r\n  },\r\n  // Authorization\r\n  invalid_project_token: {\r\n    statusCode: 401,\r\n    message: 'Invalid project token.',\r\n  },\r\n  invalid_customer_token: {\r\n    statusCode: 401,\r\n    message: 'Invalid customer token.',\r\n  },\r\n  expired_access_token: {\r\n    statusCode: 401,\r\n    message: 'Access token has expired.',\r\n  },\r\n  invalid_access_token: {\r\n    statusCode: 401,\r\n    message: 'Invalid access token.',\r\n  },\r\n  invalid_authorization_header: {\r\n    statusCode: 401,\r\n    message: 'Invalid authorization header.',\r\n  },\r\n  invalid_session_token: {\r\n    statusCode: 401,\r\n    message: 'Invalid session token.',\r\n  },\r\n  missing_authorization_header: {\r\n    statusCode: 401,\r\n    message: 'Missing authorization header.',\r\n  },\r\n  // Only used when a console user has logged in with auth0 using a different\r\n  // type of connection. We match this in AuthErrorPage.tsx\r\n  invalid_console_user: {\r\n    statusCode: 401,\r\n    message: 'User has logged in with different connection type.',\r\n  },\r\n\r\n  // Thread\r\n  thread_already_exists: {\r\n    statusCode: 409,\r\n    message: 'Thread already exists.',\r\n  },\r\n  thread_not_found: {\r\n    statusCode: 404,\r\n    message: 'Thread not found.',\r\n  },\r\n\r\n  // Sharing Threads\r\n  invalid_email: {\r\n    statusCode: 400,\r\n    message: 'Invalid email address.',\r\n  },\r\n  group_not_connected_to_slack: {\r\n    statusCode: 400,\r\n    message: 'Group not connected to a Slack Workspace.',\r\n  },\r\n  slack_credentials_not_found: {\r\n    statusCode: 404,\r\n    message: 'Could not retrieve slack bot credentials',\r\n  },\r\n  slack_channel_not_found: {\r\n    statusCode: 404,\r\n    message: 'Cannot load slack channel',\r\n  },\r\n  thread_already_shared: {\r\n    statusCode: 400,\r\n    message: 'Thread already shared to slack channel.',\r\n  },\r\n\r\n  // Message\r\n  message_already_exists: {\r\n    statusCode: 409,\r\n    message: 'Message already exists.',\r\n  },\r\n  message_not_found: {\r\n    statusCode: 404,\r\n    message: 'Message not found.',\r\n  },\r\n  message_edit_forbidden: {\r\n    statusCode: 403,\r\n    message: 'This user cannot edit this message.',\r\n  },\r\n  message_not_appendable: {\r\n    statusCode: 400,\r\n    message:\r\n      'The request references a message that can not support appending. It must contain a markdown node only.',\r\n  },\r\n\r\n  // Notification\r\n  notification_not_found: {\r\n    statusCode: 404,\r\n    message: 'Notification not found.',\r\n  },\r\n\r\n  // Files\r\n  file_not_found: {\r\n    statusCode: 404,\r\n    message: 'File not found.',\r\n  },\r\n  file_belongs_to_different_user: {\r\n    statusCode: 403,\r\n    message: 'Cannot attach files owned by another user',\r\n  },\r\n  file_too_large: {\r\n    statusCode: 413,\r\n    message: 'Maximum file size exceeded',\r\n  },\r\n  file_name_not_allowed: {\r\n    statusCode: 400,\r\n    message: 'File name is not allowed',\r\n  },\r\n  file_type_not_allowed: {\r\n    statusCode: 400,\r\n    message: 'File MIME type is not allowed',\r\n  },\r\n\r\n  //Webhook\r\n  webhook_url_not_verified: {\r\n    statusCode: 400,\r\n    message: 'Cannot verify event webhook URL.',\r\n  },\r\n};\r\n\r\nexport type PlatformErrorNameType = keyof typeof ApiErrors;\r\n\r\nexport class ApiCallerError extends CordError {\r\n  statusCode: number;\r\n\r\n  constructor(\r\n    errorName: PlatformErrorNameType,\r\n    { message, code }: { message?: string; code?: number } = {},\r\n    loggingMetadata?: JsonObject,\r\n    loggingTags?: LoggingTags,\r\n  ) {\r\n    const app_id = (loggingMetadata?.app_id ?? 'unknown') as string;\r\n    super(message, loggingMetadata, {\r\n      ...loggingTags,\r\n      api_caller_error: true,\r\n      app_id: app_id,\r\n    });\r\n    this.name = errorName;\r\n    this.message = this.message || ApiErrors[errorName].message;\r\n    this.statusCode = code || ApiErrors[errorName].statusCode;\r\n  }\r\n}\r\n\r\nfunction createMissingFieldsMessage(missingFields: string[]) {\r\n  return `Missing ${generateFieldsListString(missingFields, 'required')}`;\r\n}\r\n\r\nexport function createInvalidRequestMessage(\r\n  requiredFields?: readonly string[],\r\n  optionalFields?: readonly string[],\r\n) {\r\n  const numberOfRequiredFields = requiredFields ? requiredFields.length : 0;\r\n\r\n  const expectedMessage =\r\n    requiredFields && requiredFields.length > 0\r\n      ? `${numberOfRequiredFields} ${generateFieldsListString(\r\n          requiredFields,\r\n          'required',\r\n        )}`\r\n      : '';\r\n\r\n  const optionalFieldsMessage =\r\n    optionalFields && optionalFields.length > 0\r\n      ? `${optionalFields.length} ${generateFieldsListString(\r\n          optionalFields,\r\n          'optional',\r\n        )}`\r\n      : '';\r\n\r\n  // Outputs something like 'Expected 3 required fields: name, email and address. 2 optional fields: age and colour'\r\n\r\n  return ['Expected', expectedMessage, optionalFieldsMessage]\r\n    .filter((s) => s.length > 0)\r\n    .join(' ');\r\n}\r\n\r\nfunction createUnexpectedFieldMessage(\r\n  invalidFieldName: string,\r\n  requiredFields: string[],\r\n  optionalFields?: string[],\r\n) {\r\n  const expectedMessage =\r\n    requiredFields && requiredFields.length > 0\r\n      ? `${requiredFields.length} ${generateFieldsListString(\r\n          requiredFields,\r\n          'required',\r\n        )}`\r\n      : '';\r\n\r\n  const optionalFieldsMessage =\r\n    optionalFields && optionalFields.length > 0\r\n      ? `${optionalFields.length} ${generateFieldsListString(\r\n          optionalFields,\r\n          'optional',\r\n        )}`\r\n      : '';\r\n\r\n  return `${invalidFieldName} is not a valid field name for this request. Expected ${[\r\n    expectedMessage,\r\n    optionalFieldsMessage,\r\n  ]\r\n    .filter((s) => s.length > 0)\r\n    .join(' ')}`;\r\n}\r\n\r\nexport function createInvalidInputTypeMessage(\r\n  fieldName: string,\r\n  expectedInputType: string,\r\n) {\r\n  return `Input type for ${fieldName} is not valid, expected ${expectedInputType}.`;\r\n}\r\n\r\n// Outputs a list depending on how many elements are in the array and if the\r\n// fields are received, required or optional.\r\nfunction generateFieldsListString(\r\n  fields: readonly string[],\r\n  fieldsType?: 'required' | 'optional',\r\n) {\r\n  let fieldsString = '';\r\n  if (fields.length === 0) {\r\n    return ' fields.';\r\n  }\r\n  if (fields.length === 1) {\r\n    fieldsString = `${fieldsType ?? ''} field: ${fields[0]}.`;\r\n  }\r\n  if (fields.length > 1) {\r\n    fieldsString = `${fieldsType ?? ''} fields: ${fields\r\n      .slice(0, -1)\r\n      .join(', ')} and ${fields.slice(-1).join('')}.`;\r\n  }\r\n  return fieldsString;\r\n}\r\n\r\n/*\r\n  The validateInput function validates that the request data we receive in an API route\r\n  conforms to the expected structure (required + optional fields, valid field values).\r\n  When you call this function you can supply either required, optional or both. Each of these\r\n  objects' keys should be the expected field names, and the values must be validation functions\r\n  which will be invoked with the value of each respective field.\r\n  The validation function must return either true if the value for that field is valid,\r\n  or a string in case of an error, representing in plain language the expected type of that field,\r\n  for example \"number\" or \"a list of strings\". This string will be part of the validation error\r\n  message returned by the API, for example returning \"string\" will result in this error message:\r\n  \"Input type for first_name is not valid, expected string\"\r\n*/\r\n\r\ntype ValidationFunction = (value: any) => true | string;\r\ntype InputFields = { [fieldName: string]: ValidationFunction };\r\n\r\nexport function validateInput<T>(\r\n  input: any,\r\n  {\r\n    required = {},\r\n    optional = {},\r\n  }: {\r\n    required?: InputFields;\r\n    optional?: InputFields;\r\n  },\r\n): T {\r\n  if (typeof input !== 'object') {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const receivedFields = Object.keys(input);\r\n  const requiredFields = Object.keys(required);\r\n  const optionalFields = Object.keys(optional);\r\n\r\n  const missingRequiredFields = requiredFields.filter(\r\n    (field) => input[field] === undefined,\r\n  );\r\n  if (missingRequiredFields.length > 0) {\r\n    throw new ApiCallerError('missing_field', {\r\n      message: createMissingFieldsMessage(missingRequiredFields),\r\n    });\r\n  }\r\n\r\n  for (const key of receivedFields) {\r\n    if (!requiredFields.includes(key) && !optionalFields.includes(key)) {\r\n      throw new ApiCallerError('unexpected_field', {\r\n        message: createUnexpectedFieldMessage(\r\n          key,\r\n          requiredFields,\r\n          optionalFields,\r\n        ),\r\n      });\r\n    }\r\n\r\n    const validationFunction = required[key] || optional[key];\r\n    const validationResult = validationFunction(input[key]);\r\n    if (validationResult !== true) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: createInvalidInputTypeMessage(key, validationResult),\r\n      });\r\n    }\r\n  }\r\n\r\n  return input;\r\n}\r\n\r\nexport function forwardHandlerExceptionsToNext(\r\n  handler: (req: Request, res: Response, next: NextFunction) => unknown,\r\n) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    void (async () => {\r\n      try {\r\n        await handler(req, res, next);\r\n      } catch (e) {\r\n        next(e);\r\n      }\r\n    })();\r\n  };\r\n}\r\n\r\nexport function isCordSignedToken(accessToken: string) {\r\n  try {\r\n    verify(accessToken, env.JWT_SIGNING_SECRET, {\r\n      algorithms: ['HS512'],\r\n    });\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function verifyBearerTokenInAuthorizationHeaders(\r\n  header: string | undefined,\r\n) {\r\n  if (!header) {\r\n    throw new ApiCallerError('missing_authorization_header', {\r\n      message: 'Authorization header bearer token must be present.',\r\n    });\r\n  }\r\n\r\n  if (header.indexOf('Bearer') !== 0) {\r\n    throw new ApiCallerError('invalid_authorization_header', {\r\n      message: 'Expecting a token with a Bearer prefix.',\r\n    });\r\n  }\r\n  const token = header.replace('Bearer ', '').trim();\r\n\r\n  if (!isJWT.default(token)) {\r\n    throw new ApiCallerError('invalid_authorization_header', {\r\n      message: createInvalidInputTypeMessage(\r\n        'authorization header bearer token',\r\n        'JWT',\r\n      ),\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport async function createPlatformOrganization(\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  name: string,\r\n  status: string | undefined,\r\n  metadata: EntityMetadata | undefined,\r\n  transaction?: Transaction,\r\n) {\r\n  return await OrgEntity.create(\r\n    {\r\n      name,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      externalID,\r\n      state: status === 'deleted' ? 'inactive' : 'active',\r\n      metadata,\r\n      platformApplicationID,\r\n    },\r\n    { transaction },\r\n  );\r\n}\r\n\r\nexport async function findOrCreatePlatformOrganization(\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  name: string,\r\n  status: string | undefined,\r\n) {\r\n  return await OrgEntity.findOrCreate({\r\n    where: { platformApplicationID, externalID, name, state: status },\r\n    defaults: {\r\n      name,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      externalID,\r\n      state: status === 'deleted' ? 'inactive' : 'active',\r\n      platformApplicationID,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function findOrCreatePlatformApplication(\r\n  id: UUID,\r\n  name: string,\r\n  environment: string,\r\n  customerID: UUID,\r\n  eventWebhookURL: string,\r\n  eventWebhookSubscriptions: string[],\r\n  sharedSecret: string,\r\n) {\r\n  return await ApplicationEntity.findOrCreate({\r\n    where: { id },\r\n    defaults: {\r\n      name,\r\n      environment,\r\n      customerID,\r\n      eventWebhookURL,\r\n      eventWebhookSubscriptions,\r\n      sharedSecret,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function createPlatformUser(\r\n  context: RequestContext | null,\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  email: string | undefined | null,\r\n  name: string | undefined | null,\r\n  short_name: string | undefined | null,\r\n  profile_picture_url: string | null | undefined,\r\n  status: string | undefined,\r\n  metadata: EntityMetadata | null | undefined,\r\n  tx?: Transaction | null | undefined,\r\n) {\r\n  if (tx) {\r\n    return await doCreatePlatformUser(\r\n      context,\r\n      platformApplicationID,\r\n      externalID,\r\n      email,\r\n      name,\r\n      short_name,\r\n      profile_picture_url,\r\n      status,\r\n      metadata,\r\n      tx,\r\n    );\r\n  } else {\r\n    return await getSequelize().transaction(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      async (tx) =>\r\n        await doCreatePlatformUser(\r\n          context,\r\n          platformApplicationID,\r\n          externalID,\r\n          email,\r\n          name,\r\n          short_name,\r\n          profile_picture_url,\r\n          status,\r\n          metadata,\r\n          tx,\r\n        ),\r\n    );\r\n  }\r\n}\r\n\r\nasync function doCreatePlatformUser(\r\n  context: RequestContext | null,\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  email: string | undefined | null,\r\n  name: string | undefined | null,\r\n  screen_name: string | undefined | null,\r\n  profile_picture_url: string | null | undefined,\r\n  status: string | undefined,\r\n  metadata: EntityMetadata | null | undefined,\r\n  tx: Transaction,\r\n) {\r\n  const [user, isNewUser] = await new UserMutator(\r\n    Viewer.createServiceViewer(),\r\n    context?.loaders ?? null,\r\n  ).findOrCreateExternalUser(\r\n    {\r\n      name: name ?? null,\r\n      screenName: screen_name ?? null,\r\n      email: email ?? null,\r\n      profilePictureURL: profile_picture_url ?? null,\r\n      externalID,\r\n      platformApplicationID,\r\n      state: status,\r\n      metadata: metadata ?? {},\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n    },\r\n    tx,\r\n  );\r\n\r\n  if (!isNewUser) {\r\n    throw new ApiCallerError('user_already_exists', {\r\n      message: `The platform user with id ${user.externalID} already exists, to update user please make a PUT request to users/<USER_ID>.`,\r\n    });\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\nexport async function updatePlatformOrganizationMembers(\r\n  org: OrgEntity,\r\n  members: (string | number)[],\r\n  transaction?: Transaction,\r\n) {\r\n  const newMembers = members.map((member) => member.toString());\r\n  const userMap = new Map(\r\n    (\r\n      await UserEntity.findAll({\r\n        where: {\r\n          externalID: newMembers,\r\n          platformApplicationID: org.platformApplicationID,\r\n          externalProvider: AuthProviderType.PLATFORM,\r\n        },\r\n        transaction,\r\n      })\r\n    ).map((user) => [user.externalID, user]),\r\n  );\r\n  if (newMembers.length !== userMap.size) {\r\n    const missingMembers = new Set<string>();\r\n    newMembers.map((member) => {\r\n      if (!userMap.has(member)) {\r\n        missingMembers.add(member);\r\n      }\r\n    });\r\n    throw new ApiCallerError('user_not_found', {\r\n      message: `Platform ${\r\n        missingMembers.size > 1 ? 'users' : 'user'\r\n      } ${combine('and', [...missingMembers])} not found.`,\r\n    });\r\n  }\r\n\r\n  const orgMemberships = new Set(\r\n    (\r\n      await OrgMembersEntity.findAll({\r\n        where: {\r\n          orgID: org.id,\r\n        },\r\n        transaction,\r\n      })\r\n    ).map((om) => om.userID),\r\n  );\r\n  const addedMembers = new Set<UUID>();\r\n\r\n  await OrgMembersEntity.bulkCreate(\r\n    newMembers\r\n      .filter((member) => {\r\n        const user = userMap.get(member)!;\r\n        return !orgMemberships.has(user.id);\r\n      })\r\n      .map((member) => {\r\n        const user = userMap.get(member)!;\r\n        addedMembers.add(user.id);\r\n        return {\r\n          userID: user.id,\r\n          orgID: org.id,\r\n        };\r\n      }),\r\n    { ignoreDuplicates: true, transaction },\r\n  );\r\n\r\n  // Capture the ids of the ones we are about to delete\r\n  const userToDeleteWhere: WhereOptions<OrgMembersEntity> = {\r\n    orgID: org.id,\r\n    userID: { [Op.notIn]: [...userMap.values()].map((user) => user.id) },\r\n  };\r\n  const deleted = await OrgMembersEntity.findAll({\r\n    where: userToDeleteWhere,\r\n    transaction,\r\n  });\r\n\r\n  await OrgMembersEntity.destroy({\r\n    where: userToDeleteWhere,\r\n    transaction,\r\n  });\r\n\r\n  const deletedMembersIds = deleted.map((om) => om.userID);\r\n\r\n  return { added: [...addedMembers], deleted: deletedMembersIds };\r\n}\r\n\r\n/**\r\n * Create a new user. Can also add it to an org if you pass `orgID`.\r\n */\r\nexport async function createDummyPlatformUser({\r\n  applicationID,\r\n  orgID,\r\n  firstName,\r\n  profilePicture,\r\n  transaction,\r\n  externalID,\r\n  email,\r\n  dummy,\r\n}: {\r\n  applicationID: UUID;\r\n  orgID?: UUID;\r\n  firstName?: string;\r\n  profilePicture?: string;\r\n  transaction?: Transaction;\r\n  externalID?: string;\r\n  email?: string;\r\n  dummy?: boolean;\r\n}) {\r\n  const newUser = await createPlatformUser(\r\n    null,\r\n    applicationID,\r\n    externalID ?? uuid(), // ExternalID\r\n    email,\r\n    firstName, // Name\r\n    undefined, // Screen name\r\n    profilePicture,\r\n    'active',\r\n    { dummy: dummy ?? true },\r\n    transaction,\r\n  );\r\n\r\n  if (orgID) {\r\n    await OrgMembersEntity.upsert(\r\n      {\r\n        userID: newUser.id,\r\n        orgID: orgID,\r\n      },\r\n      { transaction },\r\n    );\r\n  }\r\n\r\n  return newUser;\r\n}\r\n", "import type { CreationAttributes, Transaction } from 'sequelize';\r\nimport { Op, Sequelize } from 'sequelize';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { AuthProviderType, SERVICE_USER_ID } from 'server/src/auth/index.ts';\r\nimport type { EntityMetadata, UUID } from 'common/types/index.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport type { UserEntityState } from 'server/src/entity/user/UserEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\ntype UserData = {\r\n  name: string | null;\r\n  screenName: string | null;\r\n  email: string | null;\r\n  profilePictureURL: string | null;\r\n  externalID: string;\r\n  externalProvider: AuthProviderType | null;\r\n  metadata?: EntityMetadata;\r\n  platformApplicationID?: string;\r\n  state?: string;\r\n};\r\n\r\nconst nowOrNull = (before: any, after: any) => {\r\n  if (!isDefined(before) && !isDefined(after)) {\r\n    return null;\r\n  } else if (before === after) {\r\n    return null;\r\n  } else {\r\n    return Sequelize.fn('NOW') as any as Date;\r\n  }\r\n};\r\n\r\nexport class UserMutator {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {}\r\n\r\n  async findOrCreateExternalUser(\r\n    userData: UserData,\r\n    transaction?: Transaction,\r\n  ) {\r\n    if (this.viewer.userID !== SERVICE_USER_ID) {\r\n      throw new Error('Only a service user can create users.');\r\n    }\r\n\r\n    if (\r\n      userData.externalProvider === AuthProviderType.PLATFORM &&\r\n      !userData.platformApplicationID\r\n    ) {\r\n      throw new Error(\r\n        'platformApplicationID must be defined to create a platform user',\r\n      );\r\n    }\r\n\r\n    const { externalProvider, externalID, platformApplicationID } = userData;\r\n\r\n    const result = await UserEntity.findOrCreate({\r\n      where: {\r\n        externalProvider,\r\n        externalID,\r\n        ...(platformApplicationID && { platformApplicationID }),\r\n      },\r\n      defaults: {\r\n        ...userData,\r\n        userType: 'person',\r\n        nameUpdatedTimestamp: nowOrNull(undefined, userData.name),\r\n        profilePictureURLUpdatedTimestamp: nowOrNull(\r\n          undefined,\r\n          userData.profilePictureURL,\r\n        ),\r\n      } as any, // \"as any\" to work around deficiency in sequelize types, not combined with \"where\" items.\r\n      transaction,\r\n    });\r\n    this.loaders?.userLoader.clearAll();\r\n    return result;\r\n  }\r\n\r\n  async updateOrCreateExternalUserInSlackOrg(\r\n    userData: UserData,\r\n    orgID: UUID,\r\n    userDeletedInSlack: boolean,\r\n    transaction: Transaction,\r\n  ): Promise<[UserEntity | null, boolean]> {\r\n    // We could use UserEntity.upsert here, except that it does not tell\r\n    // us whether it ended up doing an insert or an update, and we have\r\n    // to return that piece of information. So we have to do this in\r\n    // stages instead: first findOrCreate (which does INSERT and if it fails\r\n    // SELECT). If no new row was created, we check if the data of the\r\n    // existing one needs updating.\r\n\r\n    const [user, isNewUser] = await this.findOrCreateExternalUser(\r\n      userData,\r\n      transaction,\r\n    );\r\n\r\n    // if the user is set to deleted, they would not be able to log in\r\n    if (user.state === 'deleted') {\r\n      return [null, false];\r\n    }\r\n\r\n    if (userDeletedInSlack) {\r\n      await OrgMembersEntity.destroy({\r\n        where: { orgID, userID: user.id },\r\n        transaction,\r\n      });\r\n    } else {\r\n      await OrgMembersEntity.findOrCreate({\r\n        where: { orgID, userID: user.id },\r\n        defaults: {} as any, // \"as any\" to work around deficiency in sequelize types, not combined with \"where\" items.\r\n        transaction,\r\n      });\r\n    }\r\n\r\n    if (isNewUser) {\r\n      return [user, true];\r\n    } else {\r\n      const { externalProvider, externalID, ...updateFields } = userData;\r\n\r\n      // Don't update any undefined fields\r\n      const filteredUpdateFields = Object.fromEntries(\r\n        Object.entries(updateFields).filter(\r\n          ([_, value]) => value !== undefined,\r\n        ),\r\n      );\r\n\r\n      const userChanged = Object.entries(filteredUpdateFields).some(\r\n        ([key, value]) => !isEqual(user[key as keyof UserData], value),\r\n      );\r\n\r\n      if (!userChanged) {\r\n        return [user, false];\r\n      }\r\n\r\n      // Update the timestamps if name or profilePictureURL have changed\r\n      const nameUpdatedTimestamp = nowOrNull(\r\n        user.name,\r\n        filteredUpdateFields.name,\r\n      );\r\n      const profilePictureURLUpdatedTimestamp = nowOrNull(\r\n        user.profilePictureURL,\r\n        filteredUpdateFields.profilePictureURL,\r\n      );\r\n\r\n      const [_numberOfRows, users] = await UserEntity.update(\r\n        {\r\n          ...filteredUpdateFields,\r\n          ...(nameUpdatedTimestamp && { nameUpdatedTimestamp }),\r\n          ...(profilePictureURLUpdatedTimestamp && {\r\n            profilePictureURLUpdatedTimestamp,\r\n          }),\r\n        },\r\n        {\r\n          where: { externalProvider, externalID },\r\n          returning: true,\r\n          transaction,\r\n        },\r\n      );\r\n      this.loaders?.userLoader.clearAll();\r\n\r\n      if (users.length > 0) {\r\n        return [users[0], true];\r\n      } else {\r\n        throw new Error('User got deleted between SELECT and UPDATE');\r\n      }\r\n    }\r\n  }\r\n\r\n  async updateProfilePictureURL(url: string) {\r\n    const fields = { profilePictureURL: url };\r\n    await UserEntity.update(fields, { where: { id: this.viewer.userID } });\r\n    this.loaders?.userLoader.clearAll();\r\n  }\r\n\r\n  async updateUser(\r\n    user: UserEntity,\r\n    data: {\r\n      name: string | undefined | null;\r\n      email: string | undefined;\r\n      screenName: string | undefined | null;\r\n      profilePictureURL: string | null | undefined;\r\n      state: UserEntityState | undefined;\r\n      metadata?: EntityMetadata;\r\n    },\r\n    transaction: Transaction,\r\n  ) {\r\n    const { name, email, screenName, profilePictureURL, state, metadata } =\r\n      data;\r\n\r\n    if (\r\n      (name !== undefined && user.name !== name) ||\r\n      (email !== undefined && user.email !== email) ||\r\n      (screenName !== undefined && user.screenName !== screenName) ||\r\n      (profilePictureURL !== undefined &&\r\n        user.profilePictureURL !== profilePictureURL) ||\r\n      (state !== undefined && user.state !== state) ||\r\n      (metadata !== undefined && !isEqual(user.metadata, metadata))\r\n    ) {\r\n      const nameUpdatedTimestamp = nowOrNull(user.name, name);\r\n      const profilePictureURLUpdatedTimestamp = nowOrNull(\r\n        user.profilePictureURL,\r\n        profilePictureURL,\r\n      );\r\n\r\n      await user.update(\r\n        {\r\n          ...data,\r\n          ...(nameUpdatedTimestamp && { nameUpdatedTimestamp }),\r\n          ...(profilePictureURLUpdatedTimestamp && {\r\n            profilePictureURLUpdatedTimestamp,\r\n          }),\r\n        },\r\n        { transaction },\r\n      );\r\n      this.loaders?.userLoader.clearAll();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async findOrCreateAndUpdateApplicationSupportBot(\r\n    application: ApplicationEntity,\r\n    name: string,\r\n    profilePictureURL: string,\r\n    transaction: Transaction,\r\n  ) {\r\n    const bot = application.supportBotID\r\n      ? await UserEntity.findByPk(application.supportBotID, { transaction })\r\n      : await UserEntity.create(\r\n          { userType: 'bot', platformApplicationID: application.id },\r\n          { transaction },\r\n        );\r\n\r\n    if (!bot) {\r\n      throw new Error('No support bot found');\r\n    }\r\n\r\n    const result = await bot.update(\r\n      {\r\n        name,\r\n        // technically this might not have changed but it doesn't matter\r\n        // since this is the only way to set the support bot's profile (not\r\n        // through Settings or slack linking)\r\n        nameUpdatedTimestamp: Sequelize.fn('NOW'),\r\n        profilePictureURL,\r\n        // same as for nameUpdatedTimestamp\r\n        profilePictureURLUpdatedTimestamp: Sequelize.fn('NOW'),\r\n      },\r\n      { transaction },\r\n    );\r\n    this.loaders?.userLoader.clearAll();\r\n    return result;\r\n  }\r\n\r\n  async rawBulkCreate(\r\n    records: CreationAttributes<UserEntity>[],\r\n    transaction?: Transaction,\r\n  ) {\r\n    const result = await UserEntity.bulkCreate(records, {\r\n      transaction,\r\n      updateOnDuplicate: [\r\n        'name',\r\n        'screenName',\r\n        'nameUpdatedTimestamp',\r\n        'email',\r\n        'profilePictureURL',\r\n        'profilePictureURLUpdatedTimestamp',\r\n        'externalProvider',\r\n        'state',\r\n        'metadata',\r\n      ],\r\n      conflictWhere: { platformApplicationID: { [Op.ne]: null } },\r\n    });\r\n    this.loaders?.userLoader.clearAll();\r\n    return result;\r\n  }\r\n}\r\n", "import DataLoader from 'dataloader';\r\nimport { Op } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  inKeyOrder,\r\n  inKeyOrderGroupedCustom,\r\n} from 'server/src/entity/base/util.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class MessageLinkPreviewLoader {\r\n  viewer: Viewer;\r\n  dataloader: DataLoader<UUID, MessageLinkPreviewEntity | null>;\r\n  dataloaderForMessage: DataLoader<UUID, MessageLinkPreviewEntity[]>;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.dataloader = new DataLoader(\r\n      async (keys) => {\r\n        const linkPreviews = await MessageLinkPreviewEntity.findAll({\r\n          where: {\r\n            id: keys as UUID[],\r\n          },\r\n        });\r\n\r\n        return inKeyOrder(linkPreviews, keys);\r\n      },\r\n      { cache: false },\r\n    );\r\n\r\n    this.dataloaderForMessage = new DataLoader(\r\n      async (keys) => {\r\n        const linkPreviews = await MessageLinkPreviewEntity.findAll({\r\n          where: { messageID: keys, hidden: { [Op.ne]: true } },\r\n        });\r\n        return inKeyOrderGroupedCustom(linkPreviews, keys, (a) => a.messageID);\r\n      },\r\n      { cache: false },\r\n    );\r\n  }\r\n\r\n  async loadLinkPreviewsForMessage(\r\n    messageID: UUID,\r\n  ): Promise<MessageLinkPreviewEntity[]> {\r\n    return await this.dataloaderForMessage.load(messageID);\r\n  }\r\n\r\n  async loadLinkPreview(id: UUID) {\r\n    try {\r\n      return await this.dataloader.load(id);\r\n    } catch (e) {\r\n      anonymousLogger().logException('Msg link preview dataloader error', e);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { Transaction } from 'sequelize';\r\nimport type { RequestContextLoadersInternal } from 'server/src/RequestContextLoaders.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasPlatformApplicationID,\r\n  assertViewerHasUser,\r\n  viewerIsUsingOrgsAsFilter,\r\n} from 'server/src/auth/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { Permission } from 'server/src/entity/permission/PermisssionRuleEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  getTypedFeatureFlagValue,\r\n  flagsUserFromViewer,\r\n  FeatureFlags,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\n\r\n/**\r\n * Unlike most loaders, this loader SHOULD NOT be called directly (only from\r\n * other loaders) -- you shouldn't be needing to directly evaluate low-level\r\n * privacy, but rather the other loaders should be doing it for you before\r\n * returning their results.\r\n */\r\nexport class PrivacyLoader {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: () => RequestContextLoadersInternal,\r\n  ) {}\r\n\r\n  private async granularPermissionsEnabled() {\r\n    return await getTypedFeatureFlagValue(\r\n      FeatureFlags.GRANULAR_PERMISSIONS,\r\n      flagsUserFromViewer(this.viewer),\r\n    );\r\n  }\r\n\r\n  private async viewerPermissionJson(transaction?: Transaction) {\r\n    // TODO: refactor UserLoader.loadUser so that it can take a Transaction, and\r\n    // then call it here.\r\n    const user = await UserEntity.findByPk(assertViewerHasUser(this.viewer), {\r\n      transaction,\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error('Could not load our own user?');\r\n    }\r\n\r\n    return await this.userPermissionJson(user, transaction);\r\n  }\r\n\r\n  private async userPermissionJson(\r\n    user: UserEntity,\r\n    _transaction?: Transaction,\r\n  ) {\r\n    return { id: user.externalID, metadata: user.metadata };\r\n  }\r\n\r\n  private async threadPermissionJson(\r\n    thread: ThreadEntity,\r\n    _transaction?: Transaction,\r\n  ) {\r\n    return {\r\n      id: thread.externalID,\r\n      metadata: thread.metadata,\r\n    };\r\n  }\r\n\r\n  private async messagePermissionJson(message: MessageEntity) {\r\n    return {\r\n      id: message.externalID,\r\n      metadata: message.metadata,\r\n    };\r\n  }\r\n\r\n  private async hasMatchingPermissionRule(\r\n    userJson: unknown,\r\n    resourceJson: unknown,\r\n    permission: Permission,\r\n    transaction?: Transaction,\r\n  ) {\r\n    const rules = await getSequelize().query(\r\n      `SELECT id FROM permission_rules\r\n          WHERE \"platformApplicationID\" = $1\r\n          AND $2 @@ \"userSelector\"\r\n          AND $3 @@ \"resourceSelector\"\r\n          AND $4 = ANY(\"permissions\")\r\n          LIMIT 1`,\r\n      {\r\n        bind: [\r\n          assertViewerHasPlatformApplicationID(this.viewer),\r\n          userJson,\r\n          resourceJson,\r\n          permission,\r\n        ],\r\n        type: QueryTypes.SELECT,\r\n        transaction,\r\n      },\r\n    );\r\n\r\n    return rules.length > 0;\r\n  }\r\n\r\n  async viewerHasThread(\r\n    thread: ThreadEntity | null,\r\n    strictOrgCheck: boolean,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    if (!thread) {\r\n      return false;\r\n    }\r\n\r\n    if (strictOrgCheck) {\r\n      const orgIDs = assertViewerHasOrgs(this.viewer);\r\n      if (orgIDs.includes(thread.orgID)) {\r\n        return true;\r\n      }\r\n\r\n      if (viewerIsUsingOrgsAsFilter(this.viewer)) {\r\n        return false;\r\n      }\r\n    } else {\r\n      const canAccess =\r\n        await this.loaders().orgMembersLoader.viewerCanAccessOrg(\r\n          thread.orgID,\r\n          transaction,\r\n        );\r\n      if (canAccess) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    const enablePerms = await this.granularPermissionsEnabled();\r\n    const { platformApplicationID } = this.viewer;\r\n    if (enablePerms && platformApplicationID) {\r\n      const [userJson, threadJson] = await Promise.all([\r\n        this.viewerPermissionJson(transaction),\r\n        this.threadPermissionJson(thread, transaction),\r\n      ]);\r\n      const hasRule = await this.hasMatchingPermissionRule(\r\n        userJson,\r\n        threadJson,\r\n        'thread:read',\r\n        transaction,\r\n      );\r\n\r\n      if (hasRule) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  async viewerHasMessage(message: MessageEntity | null): Promise<boolean> {\r\n    if (!message) {\r\n      return false;\r\n    }\r\n\r\n    const thread = await this.loaders().threadLoader.loadThread(\r\n      message.threadID,\r\n    );\r\n\r\n    if (!thread) {\r\n      return false;\r\n    }\r\n\r\n    const enablePerms = await this.granularPermissionsEnabled();\r\n    if (!enablePerms) {\r\n      // In the old model, if you can see a thread, you can see all of its\r\n      // messages.\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      await this.loaders().orgMembersLoader.viewerCanAccessOrg(message.orgID)\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    const [userJson, threadJson, messageJson] = await Promise.all([\r\n      this.viewerPermissionJson(),\r\n      this.threadPermissionJson(thread),\r\n      this.messagePermissionJson(message),\r\n    ]);\r\n\r\n    const [hasThreadRule, hasMessageRule] = await Promise.all([\r\n      this.hasMatchingPermissionRule(userJson, threadJson, 'message:read'),\r\n      this.hasMatchingPermissionRule(userJson, messageJson, 'message:read'),\r\n    ]);\r\n\r\n    if (hasThreadRule || hasMessageRule) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  async viewerHasParticipant(\r\n    participant: ThreadParticipantEntity | null,\r\n  ): Promise<boolean> {\r\n    if (!participant) {\r\n      return false;\r\n    }\r\n\r\n    // Can always see your own participation.\r\n    if (participant.userID === this.viewer.userID) {\r\n      return true;\r\n    }\r\n\r\n    const thread = await this.loaders().threadLoader.loadThread(\r\n      participant.threadID,\r\n    );\r\n    if (!thread) {\r\n      return false;\r\n    }\r\n\r\n    // In the pre-permissions world, can see all participants. (This check is\r\n    // not strictly necessary -- the one immediately below should always return\r\n    // true since you must be a member of the org to see and send to the thread\r\n    // -- but being defensive.)\r\n    const enablePerms = await this.granularPermissionsEnabled();\r\n    if (!enablePerms) {\r\n      return true;\r\n    }\r\n\r\n    // You can always see the participation from people who participate in the\r\n    // thread by right of being a member of the thread's org. (Simple, legacy,\r\n    // pre-permission model.)\r\n    const participantMembershipInThreadOrg =\r\n      await this.loaders().orgMembersLoader.loadUserOrgMembership(\r\n        participant.userID,\r\n        thread.orgID,\r\n      );\r\n    if (participantMembershipInThreadOrg) {\r\n      return true;\r\n    }\r\n\r\n    const participantUser = await this.loaders().userLoader.loadUser(\r\n      participant.userID,\r\n    );\r\n    if (!participantUser) {\r\n      return false;\r\n    }\r\n\r\n    const [userJson, threadJson, participantUserJson] = await Promise.all([\r\n      this.viewerPermissionJson(),\r\n      this.threadPermissionJson(thread),\r\n      this.userPermissionJson(participantUser),\r\n    ]);\r\n\r\n    const [hasThreadRule, hasParticipantUserRule] = await Promise.all([\r\n      this.hasMatchingPermissionRule(\r\n        userJson,\r\n        threadJson,\r\n        'thread-participant:read',\r\n      ),\r\n      this.hasMatchingPermissionRule(\r\n        userJson,\r\n        participantUserJson,\r\n        'thread-participant:read',\r\n      ),\r\n    ]);\r\n\r\n    if (hasThreadRule || hasParticipantUserRule) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  async viewerCanSendMessageToThread(\r\n    thread: ThreadEntity,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    const [canSeeThread, enablePerms] = await Promise.all([\r\n      this.viewerHasThread(thread, false, transaction),\r\n      this.granularPermissionsEnabled(),\r\n    ]);\r\n\r\n    if (!enablePerms) {\r\n      if (!canSeeThread) {\r\n        // This should return false, but I'm not confident in all of the\r\n        // callsites / Slack linking / etc, so let's make sure before we break\r\n        // things.\r\n        new Logger(this.viewer).warn(\r\n          `Privacy logic error: sending to thread viewer cannot see: ${thread.id}`,\r\n        );\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    // You can't send messages to threads you can't read. We could relax this in\r\n    // the future -- it's a little weird to have a write-only thread, but it's\r\n    // meaningful enough there could be use-cases for it. However, for now, it's\r\n    // a lot simpler to both reason about and code if you assume you can always\r\n    // see the thread if you're manipulating it in any way.\r\n    if (!canSeeThread) {\r\n      return false;\r\n    }\r\n\r\n    const canAccessOrg =\r\n      await this.loaders().orgMembersLoader.viewerCanAccessOrg(\r\n        thread.orgID,\r\n        transaction,\r\n      );\r\n    if (canAccessOrg) {\r\n      return true;\r\n    }\r\n\r\n    const [userJson, threadJson] = await Promise.all([\r\n      this.viewerPermissionJson(transaction),\r\n      this.threadPermissionJson(thread, transaction),\r\n    ]);\r\n    return await this.hasMatchingPermissionRule(\r\n      userJson,\r\n      threadJson,\r\n      'thread:send-message',\r\n      transaction,\r\n    );\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\nexport class MessageMentionLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadMentionedUsersForThread(threadID: UUID) {\r\n    return await getSequelize().query(\r\n      `\r\n        SELECT DISTINCT u.* FROM users u\r\n        INNER JOIN message_mentions mm ON (u.id = mm.\"userID\")\r\n        INNER JOIN messages m ON (mm.\"messageID\" = m.id)\r\n        WHERE m.\"threadID\" = $1\r\n      `,\r\n      {\r\n        bind: [threadID],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport { MessageLoader } from 'server/src/entity/message/MessageLoader.ts';\r\nimport { MessageAttachmentLoader } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport { FileLoader } from 'server/src/entity/file/FileLoader.ts';\r\nimport { MessageReactionLoader } from 'server/src/entity/message_reaction/MessageReactionLoader.ts';\r\nimport { SlackChannelLoader } from 'server/src/entity/slack_channel/SlackChannelLoader.ts';\r\nimport { UserPreferenceLoader } from 'server/src/entity/user_preference/UserPreferenceLoader.ts';\r\nimport { TaskLoader } from 'server/src/entity/task/TaskLoader.ts';\r\nimport { TaskAssigneeLoader } from 'server/src/entity/task_assignee/TaskAssigneeLoader.ts';\r\nimport { TaskTodoLoader } from 'server/src/entity/task_todo/TaskTodoLoader.ts';\r\nimport { PageLoader } from 'server/src/entity/page/PageLoader.ts';\r\nimport { ThreadLoader } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport { PageVisitorLoader } from 'server/src/entity/page_visitor/PageVisitorLoader.ts';\r\nimport { ThreadParticipantLoader } from 'server/src/entity/thread_participant/ThreadParticipantLoader.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { ApplicationLoader } from 'server/src/entity/application/ApplicationLoader.ts';\r\nimport { HeimdallLoader } from 'server/src/entity/heimdall/HeimdallLoader.ts';\r\nimport { EmailSubscriptionLoader } from 'server/src/entity/email_subscription/EmailSubscriptionLoader.ts';\r\nimport { LinkedOrgsLoader } from 'server/src/entity/linked_orgs/LinkedOrgsLoader.ts';\r\nimport { LinkedUsersLoader } from 'server/src/entity/linked_users/LinkedUsersLoader.ts';\r\nimport { SlackMirroredThreadLoader } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadLoader.ts';\r\nimport { ConsoleUserLoader } from 'server/src/entity/user/ConsoleUserLoader.ts';\r\nimport { DeploysLoader } from 'server/src/entity/deploys/DeploysLoader.ts';\r\nimport { CustomerLoader } from 'server/src/entity/customer/CustomerLoader.ts';\r\nimport { ApplicationUsageMetricLoader } from 'server/src/entity/application_usage_metric/ApplicationUsageMetricLoader.ts';\r\nimport { NotificationLoader } from 'server/src/entity/notification/NotificationLoader.ts';\r\nimport { MessageLinkPreviewLoader } from 'server/src/entity/message_link_preview/MessageLinkPreviewLoader.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromViewer,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { PrivacyLoader } from 'server/src/entity/privacy/PrivacyLoader.ts';\r\nimport { MessageMentionLoader } from 'server/src/entity/message_mention/MessageMentionLoader.ts';\r\n\r\nexport type RequestContextLoaders = {\r\n  userLoader: UserLoader;\r\n  orgLoader: OrgLoader;\r\n  messageLoader: MessageLoader;\r\n  messageAttachmentLoader: MessageAttachmentLoader;\r\n  messageReactionLoader: MessageReactionLoader;\r\n  messageMentionLoader: MessageMentionLoader;\r\n  fileLoader: FileLoader;\r\n  pageLoader: PageLoader;\r\n  threadLoader: ThreadLoader;\r\n  pageVisitorLoader: PageVisitorLoader;\r\n  threadParticipantLoader: ThreadParticipantLoader;\r\n  slackChannelLoader: SlackChannelLoader;\r\n  userPreferenceLoader: UserPreferenceLoader;\r\n  taskLoader: TaskLoader;\r\n  deploysLoader: DeploysLoader;\r\n  taskAssigneeLoader: TaskAssigneeLoader;\r\n  taskTodoLoader: TaskTodoLoader;\r\n  orgMembersLoader: OrgMembersLoader;\r\n  s3BucketLoader: S3BucketLoader;\r\n  applicationLoader: ApplicationLoader;\r\n  customerLoader: CustomerLoader;\r\n  heimdallLoader: HeimdallLoader;\r\n  emailSubscriptionLoader: EmailSubscriptionLoader;\r\n  linkedOrgsLoader: LinkedOrgsLoader;\r\n  linkedUsersLoader: LinkedUsersLoader;\r\n  slackMirroredThreadLoader: SlackMirroredThreadLoader;\r\n  consoleUserLoader: ConsoleUserLoader;\r\n  applicationUsageMetricLoader: ApplicationUsageMetricLoader;\r\n  notificationLoader: NotificationLoader;\r\n  messageLinkPreviewLoader: MessageLinkPreviewLoader;\r\n};\r\n\r\nexport type RequestContextLoadersInternal = RequestContextLoaders & {\r\n  privacyLoader: PrivacyLoader;\r\n};\r\n\r\nexport async function getNewLoaders(\r\n  viewer: Viewer,\r\n): Promise<RequestContextLoaders> {\r\n  const flagsUser = flagsUserFromViewer(viewer);\r\n  const cache = await getTypedFeatureFlagValue(\r\n    FeatureFlags.LOADER_CACHES,\r\n    flagsUser,\r\n  );\r\n\r\n  // Because some loaders themselves need a reference to the loaders object,\r\n  // they take that as an anonymous function which returns the loaders instead,\r\n  // to avoid a circular definition dependency.\r\n  const loaders: RequestContextLoadersInternal = {\r\n    fileLoader: new FileLoader(viewer),\r\n    messageAttachmentLoader: new MessageAttachmentLoader(viewer),\r\n    messageLoader: new MessageLoader(viewer, () => loaders),\r\n    messageMentionLoader: new MessageMentionLoader(viewer),\r\n    orgLoader: new OrgLoader(viewer, cache),\r\n    userLoader: new UserLoader(viewer, () => loaders, cache),\r\n    pageLoader: new PageLoader(viewer),\r\n    threadLoader: new ThreadLoader(viewer, () => loaders),\r\n    pageVisitorLoader: new PageVisitorLoader(viewer),\r\n    threadParticipantLoader: new ThreadParticipantLoader(viewer, () => loaders),\r\n    messageReactionLoader: new MessageReactionLoader(viewer, cache),\r\n    slackChannelLoader: new SlackChannelLoader(viewer),\r\n    userPreferenceLoader: new UserPreferenceLoader(viewer),\r\n    deploysLoader: new DeploysLoader(viewer),\r\n    taskLoader: new TaskLoader(viewer),\r\n    taskAssigneeLoader: new TaskAssigneeLoader(viewer),\r\n    taskTodoLoader: new TaskTodoLoader(viewer),\r\n    orgMembersLoader: new OrgMembersLoader(viewer),\r\n    s3BucketLoader: new S3BucketLoader(viewer),\r\n    applicationLoader: new ApplicationLoader(viewer),\r\n    customerLoader: new CustomerLoader(viewer),\r\n    heimdallLoader: new HeimdallLoader(viewer),\r\n    emailSubscriptionLoader: new EmailSubscriptionLoader(viewer),\r\n    linkedOrgsLoader: new LinkedOrgsLoader(viewer, cache),\r\n    linkedUsersLoader: new LinkedUsersLoader(viewer),\r\n    slackMirroredThreadLoader: new SlackMirroredThreadLoader(viewer),\r\n    consoleUserLoader: new ConsoleUserLoader(viewer),\r\n    applicationUsageMetricLoader: new ApplicationUsageMetricLoader(viewer),\r\n    notificationLoader: new NotificationLoader(viewer),\r\n    messageLinkPreviewLoader: new MessageLinkPreviewLoader(viewer),\r\n    privacyLoader: new PrivacyLoader(viewer, () => loaders),\r\n  };\r\n\r\n  return loaders;\r\n}\r\n", "// We break the bit of text into three parts: we split off all whitespace\r\n// the beginning (`wsStart`) and end (`wsEnd`). The bit in the middle is\r\n// the remaining text, and that does not begin or end with whitespace.\r\n\r\nexport function splitStringToWsAndText(string: string) {\r\n  const [_, wsStart, middleText, wsEnd] = string.match(/^(\\s*)(.*?)(\\s*)$/s)!;\r\n\r\n  return [wsStart, middleText, wsEnd];\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type {\r\n  MessageContent,\r\n  MessageNode,\r\n  MessageNodeWithChildren,\r\n  MessageTextNode,\r\n} from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { splitStringToWsAndText } from 'server/src/util/splitStringToWsAndText.ts';\r\n\r\n// Slack docs say they will accept text messages up to 40,000 characters, but\r\n// in practice we see errors if text length exceeds 3,000 characters.  Pick a\r\n// max length after which we will truncate\r\nconst MAX_SLACK_TEXT_LENGTH = 2970;\r\n\r\ntype ImplHelpers = {\r\n  lookUpSlackUserID(userID: UUID): Promise<string | null>;\r\n};\r\n\r\n// Convert `MessageContent` to a string of Slack Mrkdwn. This is an async\r\n// function, because some content may require database lookups.\r\nexport async function slackMrkdwnFromMessageContentImpl(\r\n  content: MessageContent,\r\n  helpers: ImplHelpers,\r\n): Promise<string> {\r\n  // Convert the message content into a list of text segments. Each of these\r\n  // can already contain some Mrkdwn syntax, but the bold/italic/code\r\n  // formatting has not been converted to Mrkdwn.\r\n  const segments: MrkdwnSegment[] = await nodesToMrkdwnSegments(\r\n    content,\r\n    helpers,\r\n  );\r\n\r\n  // Keep track off whether bold/italic/code are currently on.\r\n  const formattingState: MrkdwnFormatting = {\r\n    bold: false,\r\n    italic: false,\r\n    code: false,\r\n  };\r\n\r\n  // The eventual output\r\n  let output = '';\r\n\r\n  // Keep track in what order we've started bold/italic/code blocks.\r\n  const formattingStack: Array<keyof MrkdwnFormatting> = [];\r\n\r\n  // This stores whitespace that we have taken from the end of a segment and\r\n  // not yet added to `output`.\r\n  let remainingWhitespace = '';\r\n\r\n  // Okay, let's start! Iterate through those text segments.\r\n  for (const segment of segments) {\r\n    // `text` may already contain some Mrkdwn, but we still have to apply\r\n    // bold/italic/code formatting.\r\n    let { text } = segment;\r\n\r\n    // Special characters for text formatting in Mrkdwn (in\r\n    // bold/italics/strikethrough/as code) are '*', '_', '~' and '`',\r\n    // respectively. If these characters appear in the text, we have to jump\r\n    // through a hoop to get it displayed: by using Slack's `<!date>` tag for\r\n    // embedding a date, then giving it an invalid date, we can provide a\r\n    // fallback text that will\r\n    // be displayed verbatim.\r\n    text = text.replace(/([*~_`]+)/, (...m) => `<!date^00000000^{_}|${m[1]}>`);\r\n\r\n    // We break the bit of text into three parts: we split off all whitespace\r\n    // the beginning (`wsStart`) and end (`wsEnd`). The bit in the middle is\r\n    // the remaining text, and that does not begin or end with whitespace.\r\n    let [wsStart, middle, wsEnd] = splitStringToWsAndText(text); // eslint-disable-line prefer-const\r\n\r\n    if (!middle) {\r\n      // If `middle` is empty it means that the text segment is either empty or\r\n      // contains only whitespace characters. In that case we append all that\r\n      // to `remainingWhitespace` and move on to the next segment.\r\n      remainingWhitespace += wsStart + wsEnd;\r\n      continue;\r\n    }\r\n\r\n    // `whiteSpace` is all the whitespace before the main text (`middle`), i.e.\r\n    // it's the carry-over whitespace from earlier, plus `wsStart`.\r\n    let whiteSpace = remainingWhitespace + wsStart;\r\n    // We are going to deal with `whiteSpace` and `middle` next, and leave the\r\n    // remaining whitespace at the end to the next iteration.\r\n    remainingWhitespace = wsEnd;\r\n\r\n    const whiteSpaceContainsLineBreak = whiteSpace.indexOf('\\n') >= 0;\r\n\r\n    // Are there formatting modes we have to switch off? Yes, if there are any\r\n    // that we previously switched on, but are set to `false` in this\r\n    // segment.  Also yes, if the leading whitespace contain a line break, in\r\n    // which case we need to switch off all formatting before that. (We'll\r\n    // switch the right ones back one below where we do `formattingOn`.)\r\n    let formattingOff = '';\r\n    while (\r\n      formattingStack.length &&\r\n      (whiteSpaceContainsLineBreak ||\r\n        formattingTypes.some((key) => formattingState[key] && !segment[key]))\r\n    ) {\r\n      // When we are in here, we know there is a formatting mode that neeeds\r\n      // switching off. But we have to switch them off in the right order,\r\n      // i.e. the reverse of the order in which they were switched on. So,\r\n      // let's switch off the formatting that was switched on last. It might\r\n      // be that we switch something off here, that is set to on for this\r\n      // segment though. In that case, we'll switch it back on in the next\r\n      // step.\r\n      // For example:\r\n      //   [ { text: 'foo', italic: true, bold: true },\r\n      //     { text: 'bar', bold: true } ]\r\n      // will become: `_*foo*_ *bar*`, because when we process 'foo' we'll\r\n      // switch on italic and then bold (that's just the order in which we\r\n      // switch on things), but then the next segment only wants bold on. So,\r\n      // because of how Markdown works, we switch off bold, so we can switch\r\n      // off italics, so for 'bar' we switch bold back on again.\r\n      const key = formattingStack.pop()!;\r\n      formattingOff += formattingCharacters[key];\r\n      formattingState[key] = false;\r\n    }\r\n\r\n    // Are there formatting modes we have to switch on?\r\n    let formattingOn = '';\r\n    for (const key of formattingTypes) {\r\n      if (segment[key] && !formattingState[key]) {\r\n        formattingOn += formattingCharacters[key];\r\n        formattingStack.push(key);\r\n        formattingState[key] = true;\r\n      }\r\n    }\r\n\r\n    // If there is no whitespace at the beginning of the segment at all, but we\r\n    // want to switch off or on some formatting, then we have to inject a\r\n    // space. It will get injected after the `formattingOff` characters, but\r\n    // before the `formattingOn` ones. We are using unicode's zero width\r\n    // space, so it won't show.\r\n    if (output && !whiteSpace && (formattingOff || formattingOn)) {\r\n      whiteSpace = '\\u200b';\r\n    }\r\n\r\n    // If `middle` contains a line break (it wouldn't be at the beginning or end,\r\n    // but could be somewhere inside), we also need to terminate all formatting before\r\n    // it and switch it on again afterwards.\r\n    if (formattingStack.length && middle.indexOf('\\n') >= 0) {\r\n      const on = formattingStack.map((key) => formattingCharacters[key]);\r\n      const off = [...on].reverse();\r\n      middle = middle.replace(\r\n        /\\s*\\n\\s*/g,\r\n        ([m]) => `${off.join()}${m}${on.join('')}`,\r\n      );\r\n    }\r\n\r\n    // Okay, now add to the output: formattingOff characters, then whatever\r\n    // whitespace we have at the beginning, then formattingOn characters,\r\n    // and then the payload text.\r\n    output += formattingOff + whiteSpace + formattingOn + middle;\r\n  }\r\n\r\n  // All segments have been processed. If some formatting modes are on, we have\r\n  // to switch them off now.\r\n  output += formattingStack\r\n    .reverse()\r\n    .map((key) => formattingCharacters[key])\r\n    .join('');\r\n\r\n  // Append any remaining whitespace.\r\n  output += remainingWhitespace;\r\n\r\n  // Any sequence of whitespace that ends in a new-line will be replaced with a\r\n  // single newline. And then we can just trim whitespace at the beginning\r\n  // and end, and there we have our result.\r\n  output = output.replace(/\\s+\\n/g, '\\n').trim();\r\n  if (output.length > MAX_SLACK_TEXT_LENGTH) {\r\n    output = output.slice(0, MAX_SLACK_TEXT_LENGTH) + '...(message too long)';\r\n  }\r\n  return output;\r\n}\r\n\r\n// A segment of Mrkdwn. The text may contain mrkdwn constructs, but bold/italic\r\n// formatting has not been applied.\r\ntype MrkdwnSegment = { text: string } & MrkdwnFormatting;\r\ntype MrkdwnFormatting = {\r\n  bold?: boolean;\r\n  italic?: boolean;\r\n  code?: boolean;\r\n};\r\nconst formattingCharacters: Record<keyof MrkdwnFormatting, string> = {\r\n  bold: '*',\r\n  italic: '_',\r\n  code: '`',\r\n};\r\nconst formattingTypes: Array<keyof MrkdwnFormatting> = [\r\n  'italic',\r\n  'bold',\r\n  'code',\r\n];\r\n\r\nasync function nodesToMrkdwnSegments(\r\n  nodes: MessageNode[],\r\n  helpers: ImplHelpers,\r\n): Promise<MrkdwnSegment[]> {\r\n  // As we produce segments of Mrkdwn, some of them will be produced right\r\n  // here, some will be produced async. So we keep a list of ready segments\r\n  // and promises, which will get converted to a list of segments at the end.\r\n  const segments: Array<MrkdwnSegment[] | Promise<MrkdwnSegment[]>> = [];\r\n\r\n  // If we encounter NUMBER_BULLET nodes on this level, we need to know how\r\n  // many we have seen already.\r\n  let numberBulletCount = 0;\r\n\r\n  for (const node of nodes) {\r\n    if (node.type === undefined) {\r\n      // `node` is a `MessageTextNode`. Copy over the formatting states\r\n      // (bold/italic), escape some special characters in the text.\r\n      segments.push([{ ...node, text: mrkdwnEscapeText(node.text) }]);\r\n      continue;\r\n    }\r\n\r\n    switch (node.type) {\r\n      case MessageNodeType.PARAGRAPH:\r\n        segments.push(nodesToMrkdwnSegments(node.children, helpers));\r\n        segments.push([{ text: '\\n' }]);\r\n        break;\r\n      case MessageNodeType.LINK: {\r\n        const nodeText = (node.children[0] as MessageTextNode).text;\r\n        segments.push([\r\n          {\r\n            text: `<${node.url}|${nodeText}>`,\r\n          },\r\n        ]);\r\n        break;\r\n      }\r\n      case MessageNodeType.BULLET:\r\n        segments.push(newLinePrefixAndIndent('\u2022 ', '  ', node, helpers));\r\n        break;\r\n      case MessageNodeType.NUMBER_BULLET:\r\n        segments.push(\r\n          newLinePrefixAndIndent(\r\n            `${++numberBulletCount}. `,\r\n            '  ',\r\n            node,\r\n            helpers,\r\n          ),\r\n        );\r\n        break;\r\n      case MessageNodeType.QUOTE:\r\n        segments.push(newLinePrefixAndIndent('> ', '  ', node, helpers));\r\n        break;\r\n      case MessageNodeType.TODO:\r\n        segments.push(newLinePrefixAndIndent('[] ', '  ', node, helpers));\r\n        break;\r\n      case MessageNodeType.MENTION:\r\n      case MessageNodeType.ASSIGNEE: {\r\n        const userID = node.user.id;\r\n        segments.push(\r\n          helpers.lookUpSlackUserID(userID).then((slackUserID) => {\r\n            if (slackUserID) {\r\n              return [{ text: `<@${slackUserID}>` }];\r\n            } else {\r\n              return nodesToMrkdwnSegments(node.children, helpers);\r\n            }\r\n          }),\r\n        );\r\n        break;\r\n      }\r\n      case MessageNodeType.CODE:\r\n        segments.push(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          nodesToMrkdwnSegments(node.children, helpers).then((segments) =>\r\n            segments.map((segment) => ({\r\n              ...segment,\r\n              code: true,\r\n            })),\r\n          ),\r\n        );\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Convert our `Array<MrkdwnSegment[] | Promise<MrkdwnSegment[]>>` into one\r\n  // `Promise<MrkdwnSegment[]>` (via `Promise<MrkdwnSegment[][]>`).\r\n  return await Promise.all(segments).then((arrayOfArrays) =>\r\n    arrayOfArrays.flat(),\r\n  );\r\n}\r\n\r\n// Helper function for those constructs that begin with some prefix and then\r\n// indent every line of text, like a bullet list item or a quote.\r\nasync function newLinePrefixAndIndent(\r\n  prefix: string,\r\n  indent: string,\r\n  node: MessageNodeWithChildren,\r\n  helpers: ImplHelpers,\r\n): Promise<MrkdwnSegment[]> {\r\n  return [\r\n    { text: `\\n${prefix}` },\r\n    ...(await nodesToMrkdwnSegments(node.children, helpers)).map((segment) => ({\r\n      ...segment,\r\n      text: segment.text.replace(/\\n/g, `\\n${indent}`),\r\n    })),\r\n  ];\r\n}\r\n\r\nexport function mrkdwnEscapeText(text: string): string {\r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '\\u200b&gt;');\r\n}\r\n", "import type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { slackMrkdwnFromMessageContentImpl } from 'server/src/slack/mrkdwnImpl.ts';\r\nexport { mrkdwnEscapeText } from 'server/src/slack/mrkdwnImpl.ts';\r\n\r\nexport async function slackMrkdwnFromMessageContent(\r\n  content: MessageContent,\r\n  lookUpSlackUserID: (userID: UUID) => Promise<string | null>,\r\n): Promise<string> {\r\n  return await slackMrkdwnFromMessageContentImpl(content, {\r\n    lookUpSlackUserID,\r\n  });\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsLoader } from 'server/src/entity/linked_orgs/LinkedOrgsLoader.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\nexport class SlackMessageLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async loadSlackMessage(\r\n    slackChannelID: string,\r\n    slackMessageTimestamp: string,\r\n  ): Promise<SlackMessageEntity | null> {\r\n    const orgIDs = await new LinkedOrgsLoader(this.viewer).getOrgIDs();\r\n\r\n    return await SlackMessageEntity.findOne({\r\n      where: { slackChannelID, slackMessageTimestamp, sharerOrgID: orgIDs },\r\n    });\r\n  }\r\n}\r\n\r\n// QUESTION: Should I be using the dataloader here?\r\n// QUESTION: Is .findOne() the correct solution here?\r\n//      .findAll() returns \"multiple\", though there should only be one?\r\n//      .findByPk() doesn't seem to be able to take multiple strings i.e. slackChannelID, slackMessageTimestamp...\r\n", "import type { Transaction } from 'sequelize';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type {\r\n  UUID,\r\n  ImportedSlackMessageType,\r\n  MessageType,\r\n  ThreadMirrorType,\r\n  EntityMetadata,\r\n} from 'common/types/index.ts';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { Counter, incCounterWithAppID } from 'server/src/logging/prometheus.ts';\r\nimport {\r\n  isMessageNodeType,\r\n  getMessageNodeChildren,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport type { MessageTextNode, MessageContent } from '@cord-sdk/types';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  contextWithSession,\r\n  getRelevantContext,\r\n} from 'server/src/RequestContext.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { SlackBotCredentials } from 'server/src/slack/util.ts';\r\nimport {\r\n  addMessageToSelectedSlackChannel,\r\n  findSlackBotCredentials,\r\n} from 'server/src/slack/util.ts';\r\nimport { withSlackMirroredThreadLock } from 'server/src/util/locks.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\nimport type { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport type {\r\n  RequestContextLoaders,\r\n  RequestContextLoadersInternal,\r\n} from 'server/src/RequestContextLoaders.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\n\r\nconst counter = Counter({\r\n  name: 'MessageCreated',\r\n  help: 'Count of created messages',\r\n  labelNames: ['appID'],\r\n});\r\n\r\ninterface CreateMessageArgs {\r\n  id: UUID;\r\n  externalID?: string;\r\n  thread: ThreadEntity;\r\n  content: MessageContent;\r\n  url: string | null | undefined;\r\n  timestamp?: Date;\r\n  importedSlackChannelID?: string | null;\r\n  importedSlackMessageTS?: string | null;\r\n  importedSlackMessageType?: ImportedSlackMessageType | null;\r\n  importedSlackMessageThreadTS?: string | null;\r\n  replyToEmailNotificationID?: UUID | null;\r\n  type?: MessageType | null;\r\n  iconURL?: string;\r\n  translationKey?: string | null;\r\n  metadata?: EntityMetadata;\r\n  extraClassnames?: string;\r\n  skipLinkPreviews?: boolean;\r\n}\r\n\r\ninterface CreateMessageArgsUnsafe extends CreateMessageArgs {\r\n  sourceID: UUID;\r\n  deletedTimestamp?: Date;\r\n  lastUpdatedTimestamp?: Date;\r\n}\r\n\r\nfunction undefinedNull<T>(x: T | undefined): T | null {\r\n  return x === undefined ? null : x;\r\n}\r\n\r\nexport class MessageMutator {\r\n  logger: Logger;\r\n  loaders: RequestContextLoadersInternal;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    loaders: RequestContextLoaders,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n    this.loaders = loaders as RequestContextLoadersInternal;\r\n  }\r\n\r\n  async mirrorMessageToSlack(\r\n    args: CreateMessageArgsUnsafe,\r\n    message: MessageEntity,\r\n  ): Promise<void> {\r\n    incCounterWithAppID(this.viewer, counter);\r\n\r\n    const { threadID } = message;\r\n    const context = await contextWithSession(\r\n      { viewer: this.viewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n\r\n    const promises = await Promise.allSettled([\r\n      context.loaders.slackMirroredThreadLoader.loadFromThreadID(threadID),\r\n      SlackMirroredSupportThreadEntity.findByPk(threadID),\r\n    ]);\r\n\r\n    const [slackMirroredThread, slackMirroredSupportThread] = promises.map(\r\n      (promise) => {\r\n        if (promise.status === 'fulfilled') {\r\n          return promise.value;\r\n        }\r\n        return null;\r\n      },\r\n    );\r\n\r\n    if (\r\n      slackMirroredThread &&\r\n      (args.importedSlackChannelID !== slackMirroredThread.slackChannelID ||\r\n        args.importedSlackMessageThreadTS !==\r\n          slackMirroredThread.slackMessageTimestamp)\r\n    ) {\r\n      addMessageToMirroredSlackThread(\r\n        message,\r\n        this.viewer,\r\n        context,\r\n        threadID,\r\n        slackMirroredThread,\r\n        'internal',\r\n      ).catch(\r\n        this.logger.exceptionLogger(\r\n          'Importing Slack reply from mirrored support thread or reply from Cord thread to mirrored internal thread failed.',\r\n        ),\r\n      );\r\n    }\r\n\r\n    if (\r\n      slackMirroredSupportThread &&\r\n      (args.importedSlackChannelID !==\r\n        slackMirroredSupportThread.slackChannelID ||\r\n        args.importedSlackMessageThreadTS !==\r\n          slackMirroredSupportThread.slackMessageTimestamp)\r\n    ) {\r\n      addMessageToMirroredSlackThread(\r\n        message,\r\n        this.viewer,\r\n        context,\r\n        threadID,\r\n        slackMirroredSupportThread,\r\n        'support',\r\n      ).catch(\r\n        this.logger.exceptionLogger(\r\n          'Importing Slack reply from mirrored internal thread or reply from Cord thread to mirrored support thread failed.',\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  async createMessage(\r\n    args: CreateMessageArgs,\r\n    transaction?: Transaction,\r\n  ): Promise<MessageEntity> {\r\n    return await this.createMessageImpl(\r\n      {\r\n        ...args,\r\n        sourceID: assertViewerHasUser(this.viewer),\r\n      },\r\n      transaction,\r\n    );\r\n  }\r\n\r\n  async createMessageExternal(\r\n    args: CreateMessageArgsUnsafe,\r\n    transaction?: Transaction,\r\n  ): Promise<MessageEntity> {\r\n    return await this.createMessageImpl(args, transaction);\r\n  }\r\n\r\n  private async createMessageImpl(\r\n    args: CreateMessageArgsUnsafe,\r\n    transaction?: Transaction,\r\n  ): Promise<MessageEntity> {\r\n    const canSend =\r\n      await this.loaders.privacyLoader.viewerCanSendMessageToThread(\r\n        args.thread,\r\n        transaction,\r\n      );\r\n    if (!canSend) {\r\n      throw new Error(\r\n        `User ${this.viewer.userID} is not allowed to send message to thread ${args.thread.id}`,\r\n      );\r\n    }\r\n\r\n    const message = await MessageEntity.create(\r\n      {\r\n        id: args.id,\r\n        externalID: args.externalID,\r\n        sourceID: args.sourceID,\r\n        orgID: args.thread.orgID,\r\n        threadID: args.thread.id,\r\n        platformApplicationID: args.thread.platformApplicationID,\r\n        content: args.content,\r\n        url: args.url,\r\n        ...(args.timestamp ? { timestamp: args.timestamp } : null),\r\n        ...(args.lastUpdatedTimestamp\r\n          ? { lastUpdatedTimestamp: args.lastUpdatedTimestamp }\r\n          : null),\r\n        ...(args.deletedTimestamp\r\n          ? { deletedTimestamp: args.deletedTimestamp }\r\n          : null),\r\n        importedSlackChannelID: undefinedNull(args.importedSlackChannelID),\r\n        importedSlackMessageTS: undefinedNull(args.importedSlackMessageTS),\r\n        importedSlackMessageType: undefinedNull(args.importedSlackMessageType),\r\n        importedSlackMessageThreadTS: undefinedNull(\r\n          args.importedSlackMessageThreadTS,\r\n        ),\r\n        replyToEmailNotificationID: undefinedNull(\r\n          args.replyToEmailNotificationID,\r\n        ),\r\n        type: args.type ?? undefined,\r\n        iconURL: args.iconURL,\r\n        translationKey: args.translationKey,\r\n        metadata: args.metadata,\r\n        extraClassnames: args.extraClassnames ?? '',\r\n        skipLinkPreviews: args.skipLinkPreviews ?? false,\r\n      },\r\n      { transaction },\r\n    );\r\n\r\n    const mirror = () => this.mirrorMessageToSlack(args, message);\r\n    if (transaction) {\r\n      transaction.afterCommit(mirror);\r\n    } else {\r\n      await mirror();\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  async updateContent(\r\n    logger: Logger,\r\n    message: MessageEntity,\r\n    content: MessageContent,\r\n  ): Promise<boolean> {\r\n    assertViewerIsMessageOwner(this.logger, this.viewer, message);\r\n    return await this.updateContentWithoutCheckingOwnership(message, content);\r\n  }\r\n\r\n  private async updateContentWithoutCheckingOwnership(\r\n    message: MessageEntity,\r\n    content: MessageContent,\r\n  ): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const id = message.id;\r\n\r\n    const [updateCount] = await MessageEntity.update(\r\n      {\r\n        content,\r\n        lastUpdatedTimestamp: Sequelize.fn('NOW'),\r\n      },\r\n      { where: { id, sourceID: userID, orgID: message.orgID } },\r\n    );\r\n\r\n    return updateCount === 1;\r\n  }\r\n\r\n  async setDeleted(message: MessageEntity, deleted: boolean) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    assertViewerIsMessageOwner(this.logger, this.viewer, message);\r\n\r\n    const [updateCount] = await MessageEntity.update(\r\n      {\r\n        deletedTimestamp: deleted ? Sequelize.fn('NOW') : null,\r\n      },\r\n      { where: { id: message.id, sourceID: userID, orgID: message.orgID } },\r\n    );\r\n    return updateCount === 1;\r\n  }\r\n\r\n  async deleteMessage(message: MessageEntity): Promise<boolean> {\r\n    const { orgID } = assertViewerHasIdentity(this.viewer);\r\n\r\n    assertViewerIsMessageOwner(this.logger, this.viewer, message);\r\n\r\n    const { id } = message;\r\n\r\n    const messageDeleted = await MessageEntity.destroy({\r\n      where: {\r\n        id,\r\n        orgID,\r\n      },\r\n    });\r\n\r\n    return messageDeleted === 1;\r\n  }\r\n\r\n  async removeAssignees(\r\n    messageID: string,\r\n    removedAssignees: TaskAssigneeEntity[],\r\n  ) {\r\n    const message = await this.loaders.messageLoader.loadMessage(messageID);\r\n    const content = message?.content ?? [];\r\n    const newContent = convertAssignees(content, removedAssignees);\r\n    const [updateCount] = await MessageEntity.update(\r\n      {\r\n        content: newContent,\r\n        lastUpdatedTimestamp: Sequelize.fn('NOW'),\r\n      },\r\n      { where: { id: messageID } },\r\n    );\r\n\r\n    return updateCount === 1;\r\n  }\r\n\r\n  async resetSlackImportForThread(threadID: UUID) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    await MessageEntity.update(\r\n      {\r\n        importedSlackChannelID: null,\r\n        importedSlackMessageTS: null,\r\n        importedSlackMessageType: null,\r\n        importedSlackMessageThreadTS: null,\r\n      },\r\n      {\r\n        where: { threadID, orgID },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nfunction convertAssignees(\r\n  content: MessageContent,\r\n  removedAssignees: TaskAssigneeEntity[],\r\n): MessageContent {\r\n  return content.map((node) => {\r\n    if (isMessageNodeType(node, MessageNodeType.ASSIGNEE)) {\r\n      const removed = removedAssignees.find(\r\n        (assignee) => assignee.userID === node.user.id,\r\n      );\r\n      if (removed !== undefined) {\r\n        return {\r\n          type: undefined,\r\n          text: (node.children[0] as MessageTextNode).text,\r\n        };\r\n      } else {\r\n        return node;\r\n      }\r\n    }\r\n    let children = null;\r\n    try {\r\n      children = getMessageNodeChildren(node);\r\n    } catch (_) {\r\n      children = null;\r\n    }\r\n    if (children !== null && children !== undefined) {\r\n      return {\r\n        ...node,\r\n        children: convertAssignees(children, removedAssignees),\r\n      };\r\n    }\r\n    return node;\r\n  });\r\n}\r\n\r\nexport function assertViewerIsMessageOwner(\r\n  logger: Logger,\r\n  viewer: Viewer,\r\n  message: MessageEntity,\r\n) {\r\n  if (viewer.userID !== message.sourceID) {\r\n    logger.error('User does not have write permissions to message.', {\r\n      actingUser: viewer.userID,\r\n      messageOwner: message.sourceID,\r\n    });\r\n    throw new Error(\r\n      'User does not have write permissions to message created by another user',\r\n    );\r\n  }\r\n}\r\n\r\nasync function addMessageToMirroredSlackThread(\r\n  message: MessageEntity,\r\n  viewer: Viewer,\r\n  originalContext: RequestContext,\r\n  threadID: UUID,\r\n  mirroredThread: SlackMirroredThreadEntity | SlackMirroredSupportThreadEntity,\r\n  mirrorType: ThreadMirrorType,\r\n) {\r\n  return await withSlackMirroredThreadLock(\r\n    threadID,\r\n    mirrorType,\r\n  )(async () => {\r\n    // While we were waiting to acquire the lock, the Cord thread might have get\r\n    // shared to Slack, in which case this message was already imported to\r\n    // Slack. Let's quickly check whether that is the case, and if so, stop\r\n    // here.\r\n    if (\r\n      (await SlackMessageEntity.count({\r\n        where: {\r\n          slackOrgID: mirroredThread.slackOrgID,\r\n          slackChannelID: mirroredThread.slackChannelID,\r\n          messageID: message.id,\r\n        },\r\n      })) > 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let slackBotCredentials: SlackBotCredentials | null = null;\r\n\r\n    const context = await getRelevantContext(originalContext, message.orgID);\r\n    if (mirrorType === 'internal') {\r\n      slackBotCredentials = await findSlackBotCredentials(context);\r\n      if (!slackBotCredentials) {\r\n        context.logger.warn(\r\n          'addMessageToMirroredSlackThread: no Slack bot credentials available for viewer',\r\n          { viewerOrgID: viewer.orgID, viewerUserID: viewer.userID },\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (slackBotCredentials.org.id !== mirroredThread.slackOrgID) {\r\n        context.logger.warn(\r\n          'addMessageToMirroredSlackThread: Slack workspace mismatch',\r\n          {\r\n            viewerOrgID: viewer.orgID,\r\n            linkedSlackOrgID: slackBotCredentials.org.id,\r\n            mirroredTheadSlackOrgID: mirroredThread.slackOrgID,\r\n          },\r\n        );\r\n        return;\r\n      }\r\n    } else if (mirrorType === 'support') {\r\n      const supportOrg = await context.loaders.orgLoader.loadOrg(\r\n        mirroredThread.slackOrgID,\r\n      );\r\n      if (!supportOrg) {\r\n        throw new Error(\r\n          'Could not find org with ID ' + mirroredThread.slackOrgID,\r\n        );\r\n      }\r\n\r\n      slackBotCredentials = await supportOrg.getSlackBotCredentials();\r\n    }\r\n\r\n    if (!slackBotCredentials) {\r\n      throw new Error('No valid slackBotCredentials found.');\r\n    }\r\n\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n    if (!thread) {\r\n      throw new Error('Thread does not exist');\r\n    }\r\n\r\n    const user = await context.loaders.userLoader.loadUserInAnyViewerOrg(\r\n      message.sourceID,\r\n    );\r\n    if (!user) {\r\n      throw new Error('User does not exist');\r\n    }\r\n\r\n    await addMessageToSelectedSlackChannel(\r\n      context,\r\n      slackBotCredentials,\r\n      mirroredThread.slackChannelID,\r\n      user,\r\n      message,\r\n      thread,\r\n      mirrorType,\r\n      mirroredThread.slackMessageTimestamp,\r\n    );\r\n  });\r\n}\r\n", "import { getRedlock } from 'server/src/redis/index.ts';\r\nimport type { ThreadMirrorType, UUID } from 'common/types/index.ts';\r\n\r\nconst LOCK_TTL_MS = 5000;\r\ntype CheckAborted = () => void;\r\n\r\n/**\r\n * Execute some asynchronous code non-concurrently by holding a lock.\r\n *\r\n * @param lockName the name of the lock that shall be held while executing the\r\n * given function. Can be a single string or an array of string if multiple\r\n * locks need to be held.\r\n * @returns a function that can be called with a single argument `func`. `func`\r\n * is the function to execute while holding the lock. The `func` may take a\r\n * single argument named `checkAborted` of type `() => void`. Calling\r\n * `checkAborted` within `func` will throw an exception if the lock has expired\r\n * and could not be extended in time. This is a complication due to the\r\n * distributed nature of the locks. In theory, after any `await` within `func`,\r\n * the lock may have expired. This is unlikely to happen, as the redlock library\r\n * will attempt to extend the lock in time before it expires, but this may fail.\r\n * Following any `await` within `func` you should call this `checkAborted` if\r\n * you would rather throw an exception at this point in time the lock is no\r\n * longer held. Often times, though, it may be preferrably to just continue and\r\n * finish whatever operation is going on, so `checkAborted` should not be\r\n * called. If, on the other hand, you encapsulate all your database operations\r\n * inside a transaction, calling `checkAborted` is unproblematic, as throwing an\r\n * exception will simply roll back the transaction.\r\n * @returns the return value of the `func`\r\n */\r\nexport function withLock(lockName: string | string[]) {\r\n  const locks: string[] = typeof lockName === 'string' ? [lockName] : lockName;\r\n\r\n  return <ReturnType>(\r\n    func: (checkAborted: CheckAborted) => Promise<ReturnType>,\r\n  ) =>\r\n    getRedlock().using(locks, LOCK_TTL_MS, (signal) =>\r\n      func(() => {\r\n        if (signal.aborted) {\r\n          throw signal.error;\r\n        }\r\n      }),\r\n    );\r\n}\r\n\r\nexport const withSlackMirroredThreadLock = (\r\n  threadID: UUID,\r\n  mirrorType: ThreadMirrorType,\r\n) => withLock(`SlackMirroredThread:${threadID}:${mirrorType}`);\r\n", "import FormData from 'form-data';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { JIRA_AUTH_REDIRECT_URL } from 'common/util/oauth.ts';\r\nimport type { AtlassianProject } from 'common/types/index.ts';\r\nimport type { AtlassianDocument } from 'server/src/third_party_tasks/jira/util.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport type { JiraAuthData } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\n\r\ntype Identity = {\r\n  account_type: string;\r\n  account_id: string;\r\n  email: string;\r\n  name: string;\r\n  picture: string;\r\n  account_status: string;\r\n  nickname: string;\r\n  locale: string;\r\n  extended_profile: object;\r\n  email_verified: boolean;\r\n};\r\n\r\ntype Resource = {\r\n  id: string;\r\n  url: string;\r\n  name: string;\r\n  scopes: string[];\r\n  avatarURL: string;\r\n};\r\n\r\ntype AtlassianUserType = 'atlassian' | 'app' | 'customer' | 'unknown';\r\n\r\ntype AtlassianUser = {\r\n  accountId: string;\r\n  accountType: AtlassianUserType;\r\n  displayName: string;\r\n  emailAddress: string | null;\r\n  avatarUrls: Record<string, string>;\r\n  active: boolean;\r\n};\r\n\r\ntype AtlassianIssue = {\r\n  id: string;\r\n  key: string;\r\n  fields: {\r\n    summary: string;\r\n    description: AtlassianDocument;\r\n    subtasks: Array<AtlassianIssue>;\r\n    attachment: Array<{\r\n      id: string;\r\n      mimeType: string;\r\n      content: string; // url\r\n      thumbnail: string; // url\r\n    }>;\r\n    status: {\r\n      statusCategory: {\r\n        id: number;\r\n        key: 'new' | 'indeterminate' | 'done';\r\n        name: string;\r\n      };\r\n    };\r\n    assignee: AtlassianUser | null;\r\n    project: {\r\n      self: string; // url\r\n      id: string;\r\n      key: string;\r\n      name: string;\r\n      avatarUrls: {\r\n        [resolution: string]: string; // url\r\n      };\r\n    };\r\n    priority: {\r\n      name: string;\r\n      iconUrl: string;\r\n    };\r\n  };\r\n};\r\n\r\nexport async function completeOAuthFlow(code: string) {\r\n  const response = await fetch('https://auth.atlassian.com/oauth/token', {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      grant_type: 'authorization_code',\r\n      client_id: env.JIRA_APP_CLIENT_ID,\r\n      client_secret: env.JIRA_APP_CLIENT_SECRET,\r\n      code,\r\n      redirect_uri: JIRA_AUTH_REDIRECT_URL,\r\n    }),\r\n  });\r\n\r\n  const { access_token, refresh_token } = await response.json();\r\n\r\n  if (!access_token) {\r\n    throw new Error('Access token not received');\r\n  }\r\n  if (!refresh_token) {\r\n    throw new Error('Refresh token not received');\r\n  }\r\n\r\n  const [identity, accessible_resources] = await Promise.all([\r\n    me(access_token),\r\n    accessibleResources(access_token),\r\n  ]);\r\n\r\n  const cloudID = accessible_resources[0].id;\r\n\r\n  const projects = await fetchProjects(access_token, cloudID);\r\n\r\n  return {\r\n    refreshToken: refresh_token as string,\r\n    identity,\r\n    cloudID,\r\n    projects: projects.values,\r\n  };\r\n}\r\n\r\nasync function me(accessToken: string): Promise<Identity> {\r\n  const response = await fetch('https://api.atlassian.com/me', {\r\n    headers: {\r\n      Authorization: `Bearer ${accessToken}`,\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function accessibleResources(accessToken: string): Promise<Resource[]> {\r\n  const response = await fetch(\r\n    'https://api.atlassian.com/oauth/token/accessible-resources',\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n      },\r\n    },\r\n  );\r\n\r\n  return await response.json();\r\n}\r\n\r\n// This function fetches the accessToken. However, once we migrate our JIRA app to rotating refreshTokens, then:\r\n// 1) The refreshToken we used for fetching the accessToken becomes invalid.\r\n// 2) JIRA's response will contain a new refreshToken that must replace the current one in the DB.\r\nexport async function fetchAccessToken(\r\n  viewer: Viewer,\r\n  refreshToken: string,\r\n  cloudID: string,\r\n) {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n  const response = await fetch('https://auth.atlassian.com/oauth/token', {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      grant_type: 'refresh_token',\r\n      client_id: env.JIRA_APP_CLIENT_ID,\r\n      client_secret: env.JIRA_APP_CLIENT_SECRET,\r\n      refresh_token: refreshToken,\r\n    }),\r\n  });\r\n\r\n  const responseJSON = await handleResponseJSON<{\r\n    access_token: string;\r\n    expires_in: number;\r\n    refresh_token?: string;\r\n  }>(response);\r\n\r\n  // if this JIRA app is using rotating refreshTokens, then we need to update\r\n  // the refreshToken in the DB\r\n  // https://community.developer.atlassian.com/t/4-aug-2021-action-required-deprecating-persistent-refresh-tokens/50348\r\n  if (responseJSON.refresh_token) {\r\n    const newExternalAuthData: JiraAuthData = {\r\n      cloudID,\r\n      refreshToken: responseJSON.refresh_token,\r\n    };\r\n    await ThirdPartyConnectionEntity.update(\r\n      { externalAuthData: newExternalAuthData },\r\n      {\r\n        where: {\r\n          userID,\r\n          orgID,\r\n          type: 'jira',\r\n        },\r\n      },\r\n    );\r\n  }\r\n\r\n  return responseJSON;\r\n}\r\n\r\nexport async function fetchProjects(accessToken: string, cloudID: string) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/project/search?expand=issueTypes`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n      },\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON<{\r\n    maxResults: number;\r\n    startAt: number;\r\n    total: number;\r\n    isLast: boolean;\r\n    values: AtlassianProject[];\r\n  }>(response);\r\n}\r\n\r\nexport async function createIssue(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  summary: string,\r\n  description: AtlassianDocument,\r\n  projectID: string,\r\n  issueType: string,\r\n  assigneeID: string | null,\r\n  parentIssueID?: string,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        update: {},\r\n        fields: {\r\n          // Summary must be fewer than 255 chars\r\n          // https://community.atlassian.com/t5/Jira-questions/Summary-must-be-less-than-255-characters/qaq-p/989632\r\n          summary: summary.slice(0, 254),\r\n          description,\r\n          issuetype: { id: issueType },\r\n          project: { id: projectID },\r\n          assignee: { id: assigneeID },\r\n          parent: { id: parentIssueID },\r\n          // components: [{ id: '10000' }],\r\n          // reporter: {\r\n          //   id: '5b10a2844c20165700ede21g',\r\n          // },\r\n          // fixVersions: [{ id: '10001' }],\r\n          // priority: {\r\n          //   id: '20000',\r\n          // },\r\n          // timetracking: {\r\n          //   remainingEstimate: '5',\r\n          //   originalEstimate: '10',\r\n          // },\r\n          // security: {\r\n          //   id: '10000',\r\n          // },\r\n          // environment: {\r\n          //   type: 'doc',\r\n          //   version: 1,\r\n          //   content: [\r\n          //     {\r\n          //       type: 'paragraph',\r\n          //       content: [\r\n          //         {\r\n          //           text: 'UAT',\r\n          //           type: 'text',\r\n          //         },\r\n          //       ],\r\n          //     },\r\n          //   ],\r\n          // },\r\n          // versions: [{ id: '10000' }],\r\n          // duedate: '2019-05-11',\r\n        },\r\n      }),\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON<{\r\n    id: string;\r\n    key: string;\r\n  }>(response);\r\n}\r\n\r\nexport async function assignIssue(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n  assigneeID: string | null,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/assignee`,\r\n    {\r\n      method: 'put',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ accountId: assigneeID }),\r\n    },\r\n  );\r\n\r\n  await handleResponse(response);\r\n}\r\n\r\nexport async function addIssueWatcher(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n  watcherID: string,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/watchers`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(watcherID),\r\n    },\r\n  );\r\n\r\n  await handleResponse(response);\r\n}\r\n\r\nexport async function addIssueAttachment(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n  filename: string,\r\n  contentType: string,\r\n  stream: ReadableStream<Uint8Array>,\r\n  filesize: number,\r\n) {\r\n  const form = new FormData();\r\n  form.append('file', stream, {\r\n    filename,\r\n    contentType,\r\n    knownLength: filesize,\r\n  });\r\n\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/attachments`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        'X-Atlassian-Token': 'no-check',\r\n        Accept: 'application/json',\r\n      },\r\n      body: form.getBuffer(),\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\nexport async function getIssueTransitions(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/transitions`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON<{\r\n    transitions: Array<{\r\n      id: string;\r\n      isAvailable: boolean;\r\n      to: {\r\n        id: string;\r\n        statusCategory: {\r\n          id: number;\r\n          key: 'new' | 'indeterminate' | 'done';\r\n          name: string;\r\n        };\r\n      };\r\n    }>;\r\n  }>(response);\r\n}\r\n\r\nexport async function transitionIssue(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n  transitionID: string,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/transitions`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        transition: { id: transitionID },\r\n      }),\r\n    },\r\n  );\r\n\r\n  return await handleResponse(response);\r\n}\r\n\r\nexport async function addIssueComment(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n  comment: AtlassianDocument,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}/comment`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        body: comment,\r\n      }),\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\nexport async function getIssue(\r\n  accessToken: string,\r\n  cloudID: string,\r\n  issueID: string,\r\n) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/issue/${issueID}?fields=*all&properties=*all`,\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        Accept: 'application/json',\r\n      },\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON<AtlassianIssue>(response);\r\n}\r\n\r\nexport async function getServerInfo(cloudID: string) {\r\n  const response = await fetch(\r\n    `https://api.atlassian.com/ex/jira/${cloudID}/rest/api/3/serverInfo`,\r\n    {\r\n      headers: {\r\n        Accept: 'application/json',\r\n      },\r\n    },\r\n  );\r\n\r\n  return await handleResponseJSON<{ baseUrl: string }>(response);\r\n}\r\n\r\nasync function handleResponseJSON<T>(response: Response) {\r\n  const textResponse = await handleResponse(response);\r\n\r\n  try {\r\n    return JSON.parse(textResponse) as T;\r\n  } catch (e) {\r\n    throw new Error('Could not deserialize response JSON: ' + textResponse);\r\n  }\r\n}\r\n\r\nasync function handleResponse(response: Response) {\r\n  const textResponse = await response.text();\r\n\r\n  if (response.status >= 400) {\r\n    if (response.status === 403) {\r\n      throw new Error(Errors.EXTERNAL_API_FORBIDDEN_RESPONSE);\r\n    } else {\r\n      throw new Error(textResponse);\r\n    }\r\n  }\r\n\r\n  return textResponse;\r\n}\r\n", "import NodeCache from 'node-cache';\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\n\r\n// This will probably eventually be moved to redis or something.\r\n// For now it's basically memcached.\r\n\r\nexport const cache = new NodeCache();\r\n\r\nexport async function cachedResult<T>(\r\n  valueGenerator: () => Promise<T>,\r\n  key: string,\r\n  timeToLiveSeconds = 0,\r\n): Promise<T> {\r\n  let value = cache.get<T>(key);\r\n  if (value === undefined) {\r\n    // TODO: concurrent cache misses will cause multiple generator awaits\r\n    // debounce them somehow\r\n    value = await valueGenerator();\r\n    cache.set(key, value, timeToLiveSeconds);\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nexport function cacheKey(\r\n  data: Record<string, string | number | boolean>,\r\n): string {\r\n  return jsonStableStringify(data);\r\n}\r\n", "import { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\nimport type { PreferencesValueType, UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nexport class UserPreferenceMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async setViewerPreference(\r\n    key: string,\r\n    value: PreferencesValueType,\r\n  ): Promise<void> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    return await this.setPreferenceForUser(userID, key, value);\r\n  }\r\n\r\n  async setPreferenceForUser(\r\n    userID: UUID,\r\n    key: string,\r\n    value: PreferencesValueType,\r\n  ): Promise<void> {\r\n    const entity = await UserPreferenceEntity.findOne({\r\n      where: { userID, key },\r\n    });\r\n    const changed = !entity || !isEqual(entity.value, value);\r\n    if (!changed) {\r\n      return;\r\n    }\r\n    await UserPreferenceEntity.upsert({\r\n      userID,\r\n      key,\r\n      value,\r\n    });\r\n\r\n    await publishPubSubEvent('user-preference-updated', { userID }, { key });\r\n  }\r\n}\r\n", "export enum FeatureFlag {\r\n  LOG_GRAPHQL_TO_CONSOLE = 'log_graphql_to_console',\r\n  DEEP_LINK_MESSAGE_FROM_NOTIFICATION = 'deep_link_message_from_notification',\r\n  QUERY_PARAM_DEEP_LINKS = 'query_param_deep_links',\r\n  QUERY_PARAM_DEEP_LINKS_IN_SHARE_TO_SLACK = 'query_param_deep_links_in_share_to_slack',\r\n  EMAIL_SHARING = 'email_sharing',\r\n}\r\n// FEATURE_NAME = 'feature_featureName',\r\n\r\n// For storing wether the welcome page in the NUX flow has been seen\r\nexport const NUX_WELCOME_PAGE_SEEN = 'nux_init_welcome_page_seen';\r\n\r\n// For collapsing the steps that you have in the NUX workspace page\r\nexport const NUX_STEPS_COLLAPSED = 'nux_init_steps_collapsed';\r\n\r\n// For dismissing the completed steps that you have in the NUX workspace page\r\nexport const NUX_STEPS_DISMISSED = 'nux_init_steps_dismissed';\r\n\r\n// For persisting the information that the user has watched the nux video\r\nexport const NUX_VIDEO_WATCHED = 'nux_init_video_watched';\r\n\r\n// For persisting the information that the user has opened the Slack info modal\r\nexport const NUX_SLACK_INFO_OPENED = 'nux_slack_info_opened';\r\n\r\n// For showing and hiding the message debug\r\nexport const ENABLE_MESSAGE_DEBUG = 'enable_message_debug';\r\n\r\n// For showing and hiding the thread debug\r\nexport const ENABLE_THREAD_DEBUG = 'enable_thread_debug';\r\n\r\n// For storing the last channel a user shared to, so we can use that as the default option\r\nexport const SLACK_CHANNEL_IDS_SHARED_TO = 'slack_channel_ids_shared_to';\r\n\r\n// For storing the Jira connection configuration\r\nexport const LINEAR_CONNECTION_PREFERENCES = 'linear_connection_preferences';\r\n\r\n// For storing the Jira connection configuration\r\nexport const JIRA_CONNECTION_PREFERENCES = 'jira_connection_preferences';\r\n\r\n// For storing the list that cards/tasks should be made in Trello\r\nexport const TRELLO_CONNECTED_LIST = 'trello_list';\r\n\r\n// For storing the Asana connection configuration\r\nexport const ASANA_CONNECTION_PREFERENCES = 'asana_connection_preferences';\r\n\r\n// For storing the Monday connection configuration\r\nexport const MONDAY_CONNECTION_PREFERENCES = 'monday_connection_preferences';\r\n\r\n// The user's preferred task type when creating a new task in the composer\r\n// (cord, jira, asana, etc)\r\nexport const DEFAULT_TASK_TYPE = 'default_task_type';\r\n\r\nexport const NOTIFICATION_CHANNELS = 'notification_channels';\r\n\r\n// If user in embed partner has seen initial welcome message in expanded sidebar\r\nexport const INTEGRATION_WELCOME_NUX_SEEN = 'integration_welcome_nux_seen';\r\n\r\n// For first sock puppet who has not updated their name and profile\r\n// picture yet. Also shown if default avatar used.\r\nexport const INTEGRATION_COMPLETE_PROFILE_NUX_SEEN =\r\n  'integration_complete_profile_nux_seen';\r\n\r\n// Track initial page visits to determine which NUX to show\r\nexport const INTEGRATION_PAGE_VISIT_COUNT = 'integration_page_visit_count';\r\n\r\n// For embed orgs who have not connected to slack\r\nexport const INTEGRATION_CONNECT_SLACK_NUX_SEEN =\r\n  'integration_connect_slack_nux_seen';\r\n\r\n// For embed users who are now connected to a slack org\r\nexport const INTEGRATION_SLACK_IS_CONNECTED_NUX_SEEN =\r\n  'integraton_slack_is_connected_nux_seen';\r\n\r\n// One-time override that makes sure that \"Slack is Connected\" NUX announcement\r\n// is shown next.\r\nexport const INTEGRATION_SLACK_IS_CONNECTED_NUX_WAS_FORCED =\r\n  'integration_slack_is_connected_nux_was_forced ';\r\n\r\n// For embed users who have not linked to a slack profile but their org is\r\n// linked to slack already\r\nexport const INTEGRATION_LINK_SLACK_PROFILE_NUX_SEEN =\r\n  'integration_link_slack_profile_nux_seen';\r\n\r\n// For Cord2.0 Nux\r\nexport const CONVERSATION_NUX_DISMISSED = 'conversation_nux_dismissed';\r\nexport const INBOX_NUX_DISMISSED = 'inbox_nux_dismissed';\r\nexport const LAUNCHER_NUX_DISMISSED = 'launcher_nux_dismissed';\r\n\r\nexport const DISABLE_HOTSPOT_ANNOTATIONS = 'disable_hotspot_annotations';\r\n\r\nexport const INBOX_READ_SECTION_CLOSED = 'inbox_read_section_closed';\r\n\r\nexport const ACTIVATION_FIRST_MESSAGE_SENT = 'activation_first_message_sent';\r\n\r\nexport const USER_PREFERENCE_KEY_LENGTH_LIMIT = 1000;\r\n", "import type { JsonValue, UUID } from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n  Viewer,\r\n} from 'server/src/auth/index.ts';\r\nimport type {\r\n  AsanaAuthData,\r\n  JiraAuthData,\r\n  LinearAuthData,\r\n  TrelloAuthData,\r\n} from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { cache, cacheKey } from 'server/src/util/cache.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport { UserPreferenceMutator } from 'server/src/entity/user_preference/UserPreferenceMutator.ts';\r\nimport { UserPreferenceLoader } from 'server/src/entity/user_preference/UserPreferenceLoader.ts';\r\nimport { DEFAULT_TASK_TYPE } from 'common/const/UserPreferenceKeys.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport type {\r\n  TaskInputType,\r\n  ThirdPartyConnectionType,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { AtlassianDocumentNode } from 'server/src/third_party_tasks/jira/util.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport {\r\n  FeatureFlags,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\n// fancy way of determining the result type of the function based on the\r\n// value of the `type` input argument\r\ntype ResultType<T extends ThirdPartyConnectionType> = T extends 'linear'\r\n  ? LinearAuthData\r\n  : T extends 'asana'\r\n  ? AsanaAuthData\r\n  : T extends 'jira'\r\n  ? JiraAuthData\r\n  : T extends 'trello'\r\n  ? TrelloAuthData\r\n  : never;\r\n\r\nexport async function getExternalAuthData<T extends ThirdPartyConnectionType>(\r\n  viewer: Viewer,\r\n  type: T,\r\n): Promise<ResultType<T> | null> {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n  const connection = await ThirdPartyConnectionEntity.findOne({\r\n    where: { userID, orgID, type },\r\n  });\r\n\r\n  if (!connection?.externalAuthData) {\r\n    return null;\r\n  }\r\n\r\n  return connection.externalAuthData as ResultType<T>;\r\n}\r\n\r\nconst credentialsCacheKey = (\r\n  userID: UUID,\r\n  orgID: UUID,\r\n  type: ThirdPartyConnectionType,\r\n) => cacheKey({ type: `${type}_credentials`, userID, orgID });\r\n\r\nexport async function removeExternalConnection(\r\n  viewer: Viewer,\r\n  type: ThirdPartyConnectionType,\r\n) {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n  cache.del(credentialsCacheKey(userID, orgID, type));\r\n\r\n  const defaultTaskType = await new UserPreferenceLoader(\r\n    viewer,\r\n  ).loadPreferenceValueForViewer<TaskInputType>(DEFAULT_TASK_TYPE);\r\n\r\n  if (defaultTaskType === type) {\r\n    await new UserPreferenceMutator(viewer).setViewerPreference(\r\n      DEFAULT_TASK_TYPE,\r\n      'cord',\r\n    );\r\n  }\r\n\r\n  const count = await ThirdPartyConnectionEntity.destroy({\r\n    where: { userID, orgID, type },\r\n  });\r\n\r\n  return count > 0;\r\n}\r\n\r\nexport function handleThirdPartyException(\r\n  message: string,\r\n  exception: any,\r\n  type: ThirdPartyConnectionType,\r\n  viewer?: Viewer,\r\n) {\r\n  backgroundPromise(\r\n    (async () => {\r\n      const logger = new Logger(viewer ?? Viewer.createAnonymousViewer());\r\n      if (\r\n        viewer &&\r\n        exception.message === Errors.EXTERNAL_API_FORBIDDEN_RESPONSE\r\n      ) {\r\n        try {\r\n          logger.logException(message, exception, undefined, undefined, 'warn');\r\n\r\n          // TODO: check if the access token is actually invalid before removing it\r\n          await removeExternalConnection(viewer, type);\r\n        } catch (e) {\r\n          // whatever\r\n        }\r\n      } else {\r\n        logger.logException(message, exception);\r\n      }\r\n    })(),\r\n  );\r\n}\r\n\r\nexport const publishMessageUpdateForTask = async (\r\n  reference: TaskThirdPartyReference,\r\n) => {\r\n  // notify subscribers so that user's UI reflects the changes\r\n\r\n  const task = await TaskEntity.findByPk(reference.taskID);\r\n  if (!task) {\r\n    return;\r\n  }\r\n\r\n  const message = await MessageEntity.findByPk(task.messageID);\r\n  if (!message) {\r\n    return;\r\n  }\r\n\r\n  backgroundPromise(\r\n    publishPubSubEvent(\r\n      'thread-message-updated',\r\n      { threadID: message.threadID },\r\n      { messageID: message.id },\r\n    ),\r\n  );\r\n};\r\n\r\nconst generateLinearTaskFooterText = (\r\n  url: string,\r\n  pageTitle: string,\r\n  showCordCopy: boolean,\r\n  orgDomain?: string,\r\n  platformApplicationName?: string,\r\n) => {\r\n  if (platformApplicationName) {\r\n    // Embedded version\r\n    return `Continue the Conversation on [${\r\n      pageTitle || 'this page'\r\n    }](${url}) in ${platformApplicationName}\r\n    ${showCordCopy ? 'Powered by [Cord](https://cord.com)' : ''}`;\r\n  } else {\r\n    // Extension version\r\n    return `Created from [${pageTitle || 'this page'}](${url})\r\n    Continue the conversation with [Cord](https://app.cord.com/${\r\n      orgDomain ?? ''\r\n    })`;\r\n  }\r\n};\r\n\r\nconst generateAsanaOrMondayTaskFooterText = (\r\n  url: string,\r\n  pageTitle: string,\r\n  showCordCopy: boolean,\r\n  orgDomain?: string,\r\n  platformApplicationName?: string,\r\n): string => {\r\n  const pageLink = `<a href=\"${encodeURI(url)}\">${\r\n    pageTitle || 'this page'\r\n  }</a>`;\r\n\r\n  if (platformApplicationName) {\r\n    // Embedded version\r\n    const cordLink = `<a href=\"${encodeURI('https://cord.com')}\">Cord</a>`;\r\n\r\n    return `Continue the Conversation on ${pageLink} in ${platformApplicationName}\\n${\r\n      showCordCopy ? `Powered by ${cordLink}` : ''\r\n    }`;\r\n  } else {\r\n    // Extension version\r\n    const cordLink = `<a href=\"${encodeURI(\r\n      `https://app.cord.com/${orgDomain ?? ''}`,\r\n    )}\">Cord</a>`;\r\n\r\n    return `Created from ${pageLink}\\nContinue the conversation with ${cordLink}`;\r\n  }\r\n};\r\n\r\nconst generateJiraTaskFooterText = (\r\n  url: string,\r\n  pageTitle: string,\r\n  showCordCopy?: boolean,\r\n  orgDomain?: string,\r\n  platformApplicationName?: string,\r\n) => {\r\n  if (platformApplicationName) {\r\n    // Embedded version\r\n    const copy = [\r\n      {\r\n        type: 'text',\r\n        text: 'Continue the Conversation on ',\r\n      },\r\n      {\r\n        type: 'text',\r\n        text: pageTitle || 'this page',\r\n        marks: [\r\n          {\r\n            type: 'link',\r\n            attrs: { href: url },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: 'text',\r\n        text: ` in ${platformApplicationName}`,\r\n      },\r\n    ];\r\n    if (showCordCopy) {\r\n      copy.concat([\r\n        {\r\n          type: 'text',\r\n          text: `\\nPowered by `,\r\n        },\r\n        {\r\n          type: 'text',\r\n          text: 'Cord',\r\n          marks: [\r\n            {\r\n              type: 'link',\r\n              attrs: { href: 'https://cord.com' },\r\n            },\r\n          ],\r\n        },\r\n      ]);\r\n    }\r\n    return copy;\r\n  } else {\r\n    // Extension version\r\n    return [\r\n      {\r\n        type: 'text',\r\n        text: 'Created from ',\r\n      },\r\n      {\r\n        type: 'text',\r\n        text: pageTitle || 'this page',\r\n        marks: [\r\n          {\r\n            type: 'link',\r\n            attrs: { href: url },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: 'text',\r\n        text: `\\nContinue the conversation with `,\r\n      },\r\n      {\r\n        type: 'text',\r\n        text: 'Cord',\r\n        marks: [\r\n          {\r\n            type: 'link',\r\n            attrs: { href: `https://app.cord.com/${orgDomain ?? ''}` },\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport async function getTaskFooterText(\r\n  viewer: Viewer,\r\n  message: MessageEntity,\r\n  connectionType: ThirdPartyConnectionType,\r\n): Promise<string | AtlassianDocumentNode[]> {\r\n  const { orgID, userID } = assertViewerHasIdentity(viewer);\r\n\r\n  let application;\r\n  if (viewer.platformApplicationID) {\r\n    application = await ApplicationEntity.findByPk(\r\n      viewer.platformApplicationID,\r\n    );\r\n  }\r\n\r\n  const showCordCopy = await getTypedFeatureFlagValue(\r\n    FeatureFlags.SHOW_CORD_COPY_IN_TASKS,\r\n    {\r\n      userID,\r\n      orgID,\r\n      platformApplicationID: viewer.platformApplicationID ?? 'extension',\r\n      version: null,\r\n      customerID: application?.customerID,\r\n    },\r\n  );\r\n\r\n  const org = await OrgEntity.findByPk(orgID);\r\n  if (!org) {\r\n    return '';\r\n  }\r\n\r\n  const thread = await ThreadEntity.findByPk(message.threadID);\r\n  if (!thread) {\r\n    return '';\r\n  }\r\n\r\n  let applicationName: string | undefined;\r\n  if (org.platformApplicationID) {\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    const application = await ApplicationEntity.findByPk(\r\n      org.platformApplicationID,\r\n    );\r\n    if (!application) {\r\n      return '';\r\n    }\r\n\r\n    applicationName = application.name;\r\n  }\r\n\r\n  if (message.url === null) {\r\n    // TODO: maybe we want at least some footer if there is no URL\r\n    return '';\r\n  }\r\n\r\n  switch (connectionType) {\r\n    case 'linear': {\r\n      return generateLinearTaskFooterText(\r\n        message.url,\r\n        thread.name,\r\n        showCordCopy,\r\n        org.domain ?? undefined,\r\n        applicationName,\r\n      );\r\n    }\r\n    case 'asana':\r\n    case 'monday': {\r\n      return generateAsanaOrMondayTaskFooterText(\r\n        message.url,\r\n        thread.name,\r\n        showCordCopy,\r\n        org.domain ?? undefined,\r\n        applicationName,\r\n      );\r\n    }\r\n    case 'jira': {\r\n      return generateJiraTaskFooterText(\r\n        message.url,\r\n        thread.name,\r\n        showCordCopy,\r\n        org.domain ?? undefined,\r\n        applicationName,\r\n      );\r\n    }\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nconst GRAPHQL_ENDPOINTS = {\r\n  linear: {\r\n    endpoint: 'https://api.linear.app/graphql',\r\n    authHeader: (token: string) => `Bearer ${token}`,\r\n  },\r\n  monday: {\r\n    endpoint: 'https://api.monday.com/v2',\r\n    authHeader: (token: string) => token,\r\n  },\r\n} as const;\r\n\r\nexport async function thirdPartyGraphQLRequest<T extends JsonValue = JsonValue>(\r\n  service: keyof typeof GRAPHQL_ENDPOINTS,\r\n  query: string,\r\n  accessToken: string,\r\n  variables: object | null = null,\r\n): Promise<T> {\r\n  const response = await fetch(GRAPHQL_ENDPOINTS[service].endpoint, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: GRAPHQL_ENDPOINTS[service].authHeader(accessToken),\r\n    },\r\n    body: JSON.stringify({ query, variables }),\r\n  });\r\n  const responseText = await response.text();\r\n  let responseJson;\r\n  try {\r\n    responseJson = JSON.parse(responseText);\r\n  } catch (e) {\r\n    throw new Error('Failed to obtain JSON response from: ' + responseText);\r\n  }\r\n\r\n  if (responseJson.errors || responseJson.error_message) {\r\n    if (\r\n      responseJson.errors &&\r\n      responseJson.errors[0].message === 'authentication failed'\r\n    ) {\r\n      throw new Error(Errors.EXTERNAL_API_FORBIDDEN_RESPONSE);\r\n    } else {\r\n      throw new Error(\r\n        responseJson.errors\r\n          ? JSON.stringify(responseJson.errors)\r\n          : responseJson.error_message,\r\n      );\r\n    }\r\n  }\r\n\r\n  return responseJson.data;\r\n}\r\n\r\nasync function getThirdPartyExternalIDs(\r\n  viewer: Viewer,\r\n  users: UserEntity[],\r\n  thirdPartyType: ThirdPartyConnectionType,\r\n): Promise<(string | undefined)[]> {\r\n  try {\r\n    const orgID = assertViewerHasOrg(viewer);\r\n    const connections = await ThirdPartyConnectionEntity.findAll({\r\n      where: {\r\n        userID: users.map(({ id }) => id),\r\n        orgID,\r\n        type: thirdPartyType,\r\n      },\r\n    });\r\n\r\n    const userIDtoAccountID = new Map(\r\n      connections.map((connection) => [\r\n        connection.userID,\r\n        connection.externalID,\r\n      ]),\r\n    );\r\n\r\n    return users.map((user) => userIDtoAccountID.get(user.id));\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      'getThirdPartyExternalIDs',\r\n      e,\r\n      thirdPartyType,\r\n      viewer,\r\n    );\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getThirdPartyMatchedAccounts(\r\n  viewer: Viewer,\r\n  taskAssigneeUserIDs: UUID[],\r\n  thirdPartyType: ThirdPartyConnectionType,\r\n): Promise<[string[], UserEntity[]]> {\r\n  if (taskAssigneeUserIDs.length === 0) {\r\n    // nothing to do\r\n    return [[], []];\r\n  }\r\n\r\n  try {\r\n    const { orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const userLoader = new UserLoader(viewer, () => null);\r\n    const users = await userLoader.loadUsersInOrg(taskAssigneeUserIDs, orgID);\r\n\r\n    const mondayProfileAccountIDs = await getThirdPartyExternalIDs(\r\n      viewer,\r\n      users,\r\n      thirdPartyType,\r\n    );\r\n\r\n    const matchedAccountIDs = mondayProfileAccountIDs.filter(isDefined);\r\n\r\n    const unmatchedUsers = users.filter(\r\n      (_user, i) => !mondayProfileAccountIDs[i],\r\n    );\r\n\r\n    return [matchedAccountIDs, unmatchedUsers];\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      'getThirdPartyMatchedAccounts',\r\n      e,\r\n      thirdPartyType,\r\n      viewer,\r\n    );\r\n    return [[], []];\r\n  }\r\n}\r\n\r\nexport async function findTaskAndMessageEntitiesFromExternalTaskID(\r\n  externalTaskID: string,\r\n  thirdPartyType: ThirdPartyConnectionType,\r\n) {\r\n  const thirdPartyTaskEntity =\r\n    await TaskThirdPartyReference.findTaskWithExternalID(\r\n      externalTaskID,\r\n      thirdPartyType,\r\n    );\r\n\r\n  if (!thirdPartyTaskEntity) {\r\n    return null;\r\n  }\r\n  const taskID = thirdPartyTaskEntity.taskID;\r\n\r\n  const taskEntity = await TaskEntity.findByPk(taskID);\r\n\r\n  if (!taskEntity) {\r\n    throw new Error(`Could not find task entity`);\r\n  }\r\n\r\n  const messageEntity = await MessageEntity.findByPk(taskEntity.messageID);\r\n\r\n  if (!messageEntity) {\r\n    throw new Error(`Could not find task message`);\r\n  }\r\n  return {\r\n    thirdPartyTaskEntity,\r\n    taskEntity,\r\n    messageEntity,\r\n  };\r\n}\r\n", "import type {\r\n  MessageContent,\r\n  MessageNode,\r\n  MessageTextNode,\r\n} from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\n\r\nconst textNodeStyleToMarks = (node: MessageTextNode) => {\r\n  const marks = [];\r\n  if (node.bold) {\r\n    marks.push({ type: 'strong' });\r\n  }\r\n  if (node.italic) {\r\n    marks.push({ type: 'em' });\r\n  }\r\n  if (node.underline) {\r\n    marks.push({ type: 'underline' });\r\n  }\r\n  return marks;\r\n};\r\n\r\nexport type AtlassianDocument = {\r\n  type: 'doc';\r\n  version: 1;\r\n  content: AtlassianDocumentNode[];\r\n};\r\n\r\nexport type AtlassianDocumentNode = {\r\n  type: string;\r\n  text?: string;\r\n  marks?: any[];\r\n  content?: AtlassianDocumentNode[];\r\n};\r\n\r\nexport const emptyFooter: AtlassianDocumentNode[] = [\r\n  {\r\n    type: 'text',\r\n    text: '',\r\n  },\r\n];\r\n\r\nconst convertNodeListToAtlassianDocumentNodes = (\r\n  nodes: MessageNode[],\r\n): AtlassianDocumentNode[] => {\r\n  const convertedNodes = nodes\r\n    .map(convertNodeToAtlassianDocumentNode)\r\n    .filter((node): node is AtlassianDocumentNode => node !== undefined);\r\n\r\n  const resultNodes: AtlassianDocumentNode[] = [];\r\n\r\n  //  merge sequential bullet/ordered lists\r\n  for (const node of convertedNodes) {\r\n    if (\r\n      node.type === 'bulletList' &&\r\n      resultNodes.length > 0 &&\r\n      resultNodes[resultNodes.length - 1].type === 'bulletList'\r\n    ) {\r\n      resultNodes[resultNodes.length - 1].content = [\r\n        ...resultNodes[resultNodes.length - 1].content!,\r\n        ...node.content!,\r\n      ];\r\n    } else if (\r\n      node.type === 'orderedList' &&\r\n      resultNodes.length > 0 &&\r\n      resultNodes[resultNodes.length - 1].type === 'orderedList'\r\n    ) {\r\n      resultNodes[resultNodes.length - 1].content = [\r\n        ...resultNodes[resultNodes.length - 1].content!,\r\n        ...node.content!,\r\n      ];\r\n    } else {\r\n      resultNodes.push(node);\r\n    }\r\n  }\r\n\r\n  return resultNodes;\r\n};\r\n\r\nconst wrapTextInParagraphIfNecessary = (\r\n  node: AtlassianDocumentNode,\r\n): AtlassianDocumentNode => {\r\n  if (node.type === 'text') {\r\n    return {\r\n      type: 'paragraph',\r\n      content: [node],\r\n    };\r\n  } else {\r\n    return node;\r\n  }\r\n};\r\n\r\nconst convertNodeToAtlassianDocumentNode = (\r\n  node: MessageNode,\r\n): AtlassianDocumentNode | undefined => {\r\n  if (node.type === undefined) {\r\n    if (!node.text) {\r\n      return undefined;\r\n    }\r\n\r\n    return {\r\n      type: 'text',\r\n      text: node.text,\r\n      marks: textNodeStyleToMarks(node),\r\n    };\r\n  } else {\r\n    switch (node.type) {\r\n      case MessageNodeType.LINK: {\r\n        const nodeText = (node.children[0] as MessageTextNode).text;\r\n        if (nodeText.length === 0) {\r\n          return undefined;\r\n        }\r\n        return {\r\n          type: 'text',\r\n          text: nodeText,\r\n          marks: [\r\n            {\r\n              type: 'link',\r\n              attrs: { href: node.url },\r\n            },\r\n          ],\r\n        };\r\n      }\r\n      case MessageNodeType.PARAGRAPH:\r\n      case MessageNodeType.MARKDOWN: {\r\n        const content = convertNodeListToAtlassianDocumentNodes(node.children);\r\n        if (content.length === 0) {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          type: 'paragraph',\r\n          content,\r\n        };\r\n      }\r\n      case MessageNodeType.TODO:\r\n      case MessageNodeType.BULLET: {\r\n        const content = convertNodeListToAtlassianDocumentNodes(node.children);\r\n        if (content.length === 0) {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          type: 'bulletList',\r\n          content: [\r\n            {\r\n              type: 'listItem',\r\n              content: content.map(wrapTextInParagraphIfNecessary),\r\n            },\r\n          ],\r\n        };\r\n      }\r\n      case MessageNodeType.NUMBER_BULLET: {\r\n        const content = convertNodeListToAtlassianDocumentNodes(node.children);\r\n        if (content.length === 0) {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          type: 'orderedList',\r\n          content: [\r\n            {\r\n              type: 'listItem',\r\n              content: content.map(wrapTextInParagraphIfNecessary),\r\n            },\r\n          ],\r\n        };\r\n      }\r\n      case MessageNodeType.ASSIGNEE:\r\n        return {\r\n          type: 'text',\r\n          text: (node.children[0] as MessageTextNode).text, // TODO: strip +\r\n        };\r\n      case MessageNodeType.MENTION:\r\n        return {\r\n          type: 'text',\r\n          text: (node.children[0] as MessageTextNode).text, // TODO: strip @\r\n        };\r\n      case MessageNodeType.QUOTE: {\r\n        const content = convertNodeListToAtlassianDocumentNodes(node.children);\r\n        if (content.length === 0) {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          type: 'blockquote',\r\n          content: content.map(wrapTextInParagraphIfNecessary),\r\n        };\r\n      }\r\n      case MessageNodeType.CODE: {\r\n        const content = convertNodeListToAtlassianDocumentNodes(node.children);\r\n        if (content.length === 0) {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          type: 'codeBlock',\r\n          content: content.map(wrapTextInParagraphIfNecessary),\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport function messageContentToAtlassianDocument(\r\n  content: MessageContent,\r\n  footer: AtlassianDocumentNode[],\r\n): AtlassianDocument {\r\n  return {\r\n    type: 'doc',\r\n    version: 1,\r\n    content: convertNodeListToAtlassianDocumentNodes(content)\r\n      .map(wrapTextInParagraphIfNecessary)\r\n      .concat({\r\n        type: 'paragraph',\r\n        content: footer,\r\n      }),\r\n  };\r\n}\r\n\r\nexport function unmatchedUsersToAtlassianDocument(\r\n  users: Array<{\r\n    name: string | null;\r\n    screenName: string | null;\r\n    email: string | null;\r\n  }>,\r\n): AtlassianDocument {\r\n  return {\r\n    type: 'doc',\r\n    version: 1,\r\n    content: [\r\n      {\r\n        type: 'paragraph',\r\n        content: [\r\n          {\r\n            type: 'text',\r\n            text: 'This task was assigned to the following Cord users who did not have Jira connected:',\r\n          },\r\n        ],\r\n      },\r\n\r\n      {\r\n        type: 'bulletList',\r\n        content: users.map((user) => ({\r\n          type: 'listItem',\r\n          content: [\r\n            {\r\n              type: 'paragraph',\r\n              content: [\r\n                {\r\n                  type: 'text',\r\n                  text: [userDisplayName(user), user.email || '']\r\n                    .join(' ')\r\n                    .trim(),\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        })),\r\n      },\r\n    ],\r\n  };\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport {\r\n  addIssueAttachment,\r\n  addIssueComment,\r\n  addIssueWatcher,\r\n  assignIssue,\r\n  createIssue,\r\n  fetchAccessToken,\r\n  fetchProjects,\r\n  getIssue,\r\n  getIssueTransitions,\r\n  getServerInfo,\r\n  transitionIssue,\r\n} from 'server/src/third_party_tasks/jira/api.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport type { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport type {\r\n  JiraConnectionPreferences,\r\n  JiraIssuePreviewData,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  textFromNodeRecursive,\r\n  todoNodesFromMessage,\r\n  taskTitleFromMessageContent,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport {\r\n  getExternalAuthData,\r\n  getTaskFooterText,\r\n  getThirdPartyMatchedAccounts,\r\n  handleThirdPartyException,\r\n  publishMessageUpdateForTask,\r\n} from 'server/src/third_party_tasks/util.ts';\r\nimport { cache, cacheKey } from 'server/src/util/cache.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { JIRA_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport {\r\n  emptyFooter,\r\n  messageContentToAtlassianDocument,\r\n  unmatchedUsersToAtlassianDocument,\r\n} from 'server/src/third_party_tasks/jira/util.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\n\r\ntype CachedJiraCredentials = { accessToken: string; cloudID: string };\r\nconst CACHE_TTL_EXPIRATION_DELTA_SECONDS = 30;\r\n\r\nasync function getJiraCredentials(\r\n  viewer: Viewer,\r\n): Promise<CachedJiraCredentials | null> {\r\n  try {\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const key = cacheKey({ type: 'jira_credentials', userID, orgID });\r\n\r\n    let credentials = cache.get<CachedJiraCredentials>(key);\r\n    if (credentials !== undefined) {\r\n      return credentials;\r\n    }\r\n\r\n    const externalAuthData = await getExternalAuthData(viewer, 'jira');\r\n    if (!externalAuthData) {\r\n      return null;\r\n    }\r\n\r\n    const { refreshToken, cloudID } = externalAuthData;\r\n    const response = await fetchAccessToken(viewer, refreshToken, cloudID);\r\n\r\n    credentials = {\r\n      accessToken: response.access_token,\r\n      cloudID,\r\n    };\r\n\r\n    cache.set<CachedJiraCredentials>(\r\n      key,\r\n      credentials,\r\n      // subtract a small amount of time to avoid the risk of the action happening\r\n      // between when the token expires as determined by the remote server versus\r\n      // when we receive and store it here (probably a couple of seconds).\r\n      response.expires_in - CACHE_TTL_EXPIRATION_DELTA_SECONDS,\r\n    );\r\n\r\n    return credentials;\r\n  } catch (e) {\r\n    handleThirdPartyException('getJiraCredentials', e, 'jira', viewer);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function fetchJiraProjects(viewer: Viewer) {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return [];\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    const projectsResponse = await fetchProjects(accessToken, cloudID);\r\n\r\n    return projectsResponse.values;\r\n  } catch (e) {\r\n    handleThirdPartyException(`fetchJiraProjects`, e, 'jira', viewer);\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function getProjectAndIssueTypes(viewer: Viewer) {\r\n  try {\r\n    const userID = assertViewerHasUser(viewer);\r\n    const response = await UserPreferenceEntity.findOne({\r\n      where: {\r\n        userID,\r\n        key: JIRA_CONNECTION_PREFERENCES,\r\n      },\r\n    });\r\n\r\n    if (!response) {\r\n      throw new Error('user preferences missing');\r\n    }\r\n\r\n    return response.value as JiraConnectionPreferences;\r\n  } catch (e) {\r\n    handleThirdPartyException(`getProjectAndIssueTypes`, e, 'jira', viewer);\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport async function createSimpleJiraTask(viewer: Viewer, task: TaskEntity) {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    const preferences = await getProjectAndIssueTypes(viewer);\r\n    if (!preferences) {\r\n      return;\r\n    }\r\n\r\n    const { projectID, issueType } = preferences;\r\n    if (!issueType || !projectID) {\r\n      return;\r\n    }\r\n\r\n    const message = await MessageEntity.findByPk(task.messageID);\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    const title = taskTitleFromMessageContent(message.content);\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'jira');\r\n    if (typeof footerText === 'string') {\r\n      footerText = emptyFooter;\r\n    }\r\n\r\n    const description = messageContentToAtlassianDocument(\r\n      message.content,\r\n      footerText,\r\n    );\r\n\r\n    const { id } = await createIssue(\r\n      accessToken,\r\n      cloudID,\r\n      title,\r\n      description,\r\n      projectID,\r\n      issueType,\r\n      null,\r\n    );\r\n\r\n    const previewData = await getJiraIssuePreviewData(viewer, id);\r\n\r\n    const reference = await TaskThirdPartyReference.create({\r\n      taskID: task.id,\r\n      externalID: id,\r\n      externalConnectionType: 'jira',\r\n      previewData,\r\n      externalLocationID: cloudID,\r\n    });\r\n\r\n    await publishMessageUpdateForTask(reference);\r\n\r\n    // initial done state\r\n    if (task.done) {\r\n      await updateJiraTask(viewer, reference, true);\r\n    }\r\n  } catch (e) {\r\n    handleThirdPartyException(`createSimpleJiraTask`, e, 'jira', viewer);\r\n  }\r\n}\r\n\r\nexport async function updateJiraTaskAssigneeAndWatchers(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  taskAssigneeUserIDs: UUID[],\r\n) {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    const thirdPartyReference = await TaskThirdPartyReference.findForTask(\r\n      taskID,\r\n      'jira',\r\n    );\r\n    if (!thirdPartyReference) {\r\n      return;\r\n    }\r\n\r\n    const issueID = thirdPartyReference.externalID;\r\n\r\n    const [matchedJiraAccountIDs, unmatchedUsers] =\r\n      await getThirdPartyMatchedAccounts(viewer, taskAssigneeUserIDs, 'jira');\r\n\r\n    const [assigneeAccountID, ...watcherAccountIDs] = matchedJiraAccountIDs;\r\n\r\n    await Promise.all([\r\n      assignIssue(accessToken, cloudID, issueID, assigneeAccountID),\r\n      ...watcherAccountIDs.map((watcherID) =>\r\n        addIssueWatcher(accessToken, cloudID, issueID, watcherID),\r\n      ),\r\n    ]);\r\n\r\n    await updateTaskPreviewData(viewer, thirdPartyReference);\r\n\r\n    if (unmatchedUsers.length > 0) {\r\n      await addIssueComment(\r\n        accessToken,\r\n        cloudID,\r\n        issueID,\r\n        unmatchedUsersToAtlassianDocument(unmatchedUsers),\r\n      );\r\n    }\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `updateJiraTaskAssigneeAndWatchers`,\r\n      e,\r\n      'jira',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function createJiraSubtasks(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  todos: TaskTodoEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    const [preferences, thirdPartyReference, task] = await Promise.all([\r\n      getProjectAndIssueTypes(viewer),\r\n      TaskThirdPartyReference.findForTask(taskID, 'jira'),\r\n      TaskEntity.findByPk(taskID),\r\n    ]);\r\n\r\n    if (!preferences || !thirdPartyReference || !task) {\r\n      return;\r\n    }\r\n\r\n    const { projectID, subissueType } = preferences;\r\n    if (!projectID || !subissueType) {\r\n      return;\r\n    }\r\n\r\n    const { messageID } = task;\r\n\r\n    const message = await MessageEntity.findByPk(messageID);\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    const issueID = thirdPartyReference.externalID;\r\n\r\n    // extract the message nodes for only the todos that should be created,\r\n    // for example if you edit a message to add another TODO item in the list\r\n    const createdTodoIDs = new Set(todos.map((todo) => todo.id));\r\n    const todoNodes = todoNodesFromMessage(message.content).filter((node) =>\r\n      createdTodoIDs.has(node.todoID),\r\n    );\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'jira');\r\n    if (typeof footerText === 'string') {\r\n      footerText = emptyFooter;\r\n    }\r\n\r\n    const description = messageContentToAtlassianDocument(\r\n      [{ text: '' }],\r\n      footerText,\r\n    );\r\n\r\n    const subIssues = await Promise.all(\r\n      todoNodes.map((todoNode) =>\r\n        createIssue(\r\n          accessToken,\r\n          cloudID,\r\n          textFromNodeRecursive(todoNode),\r\n          description,\r\n          projectID,\r\n          subissueType,\r\n          null,\r\n          issueID,\r\n        ),\r\n      ),\r\n    );\r\n\r\n    const references = await Promise.all(\r\n      subIssues.map((subIssue, index) =>\r\n        TaskThirdPartyReference.create({\r\n          taskID,\r\n          taskTodoID: todoNodes[index].todoID,\r\n          externalID: subIssue.id,\r\n          externalConnectionType: 'jira',\r\n          previewData: null,\r\n          externalLocationID: cloudID,\r\n        }),\r\n      ),\r\n    );\r\n\r\n    // initial done state\r\n    await Promise.all(\r\n      todoNodes.map((todoNode, index) => {\r\n        if (!todos.find(({ id }) => todoNode.todoID === id)?.done) {\r\n          return null;\r\n        }\r\n\r\n        const reference = references.find(\r\n          (ref) => ref.externalID === subIssues[index].id,\r\n        );\r\n        if (!reference) {\r\n          return null;\r\n        }\r\n\r\n        return updateJiraTask(viewer, reference, true);\r\n      }),\r\n    );\r\n\r\n    await publishMessageUpdateForTask(thirdPartyReference);\r\n  } catch (e) {\r\n    handleThirdPartyException(`createJiraSubtasks`, e, 'jira', viewer);\r\n  }\r\n}\r\n\r\nexport async function addJiraTaskAttachments(\r\n  viewer: Viewer,\r\n  externalIssueID: UUID,\r\n  files: FileEntity[],\r\n) {\r\n  if (files.length === 0) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n    const s3BucketLoader = new S3BucketLoader(viewer);\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    await Promise.all(\r\n      files\r\n        .filter((file) => file.uploadStatus === 'uploaded')\r\n        .map(async (file) => {\r\n          const url = await file.getSignedDownloadURL(s3BucketLoader);\r\n          const response = await fetch(url);\r\n\r\n          if (response.status === 200) {\r\n            await addIssueAttachment(\r\n              accessToken,\r\n              cloudID,\r\n              externalIssueID,\r\n              file.name,\r\n              file.mimeType,\r\n              response.body!,\r\n              file.size,\r\n            );\r\n          }\r\n        }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException(`addJiraTaskAttachments`, e, 'jira', viewer);\r\n  }\r\n}\r\n\r\nexport async function updateJiraTask(\r\n  viewer: Viewer,\r\n  reference: TaskThirdPartyReference,\r\n  done: boolean,\r\n) {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n    const issueID = reference.externalID;\r\n\r\n    const { transitions } = await getIssueTransitions(\r\n      accessToken,\r\n      cloudID,\r\n      issueID,\r\n    );\r\n\r\n    const transitionToStatusKey = done ? 'done' : 'new';\r\n\r\n    const transition = transitions.find(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      (transition) =>\r\n        transition.isAvailable &&\r\n        transition.to.statusCategory.key === transitionToStatusKey,\r\n    );\r\n\r\n    if (!transition) {\r\n      throw new Error(\r\n        `Couldn't transition Jira issue ${issueID} to ${transitionToStatusKey} due to missing transition`,\r\n      );\r\n    }\r\n\r\n    await transitionIssue(accessToken, cloudID, issueID, transition.id);\r\n\r\n    // update the preview after the task is updated\r\n    await updateTaskPreviewData(viewer, reference);\r\n  } catch (e) {\r\n    handleThirdPartyException(`updateJiraTask`, e, 'jira', viewer);\r\n  }\r\n}\r\n\r\nasync function getBaseURLForCloudInstance(\r\n  cloudID: string,\r\n): Promise<string | null> {\r\n  try {\r\n    const key = cacheKey({\r\n      type: 'jira_cloud_base_url',\r\n      cloudID,\r\n    });\r\n\r\n    let value = cache.get<string>(key);\r\n    if (value === undefined) {\r\n      const { baseUrl } = await getServerInfo(cloudID);\r\n      value = baseUrl;\r\n      cache.set(key, value);\r\n    }\r\n\r\n    return value;\r\n  } catch (e) {\r\n    handleThirdPartyException(`getBaseURLForCloudInstance`, e, 'jira');\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function updateTaskPreviewData(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n) {\r\n  // only update the preview if this is not a TODO issue\r\n  if (!externalReference.taskTodoID) {\r\n    const issueID = externalReference.externalID;\r\n    const previewData = await getJiraIssuePreviewData(viewer, issueID);\r\n    await externalReference.update({ previewData });\r\n    await publishMessageUpdateForTask(externalReference);\r\n  }\r\n}\r\n\r\nasync function getJiraIssuePreviewData(\r\n  viewer: Viewer,\r\n  issueID: string,\r\n): Promise<JiraIssuePreviewData | null> {\r\n  try {\r\n    const credentials = await getJiraCredentials(viewer);\r\n    if (!credentials) {\r\n      return null;\r\n    }\r\n\r\n    const { accessToken, cloudID } = credentials;\r\n\r\n    const [issue, baseURL] = await Promise.all([\r\n      getIssue(accessToken, cloudID, issueID),\r\n      getBaseURLForCloudInstance(cloudID),\r\n    ]);\r\n\r\n    if (!baseURL) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      key: issue.key,\r\n      title: issue.fields.summary,\r\n      url: `${baseURL}/browse/${issue.key}`,\r\n      assignee: issue.fields.assignee?.displayName,\r\n      status: issue.fields.status.statusCategory.name,\r\n      done: issue.fields.status.statusCategory.key === 'done',\r\n      priority: issue.fields.priority.name,\r\n      subtasks: issue.fields.subtasks.map((subtask) => ({\r\n        id: subtask.id,\r\n        title: subtask.fields.summary,\r\n        done: subtask.fields.status.statusCategory.key === 'done',\r\n      })),\r\n    };\r\n  } catch (e) {\r\n    handleThirdPartyException(`getJiraIssuePreviewData`, e, 'jira', viewer);\r\n    return null;\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport type {\r\n  AsanaConnectionPreferences,\r\n  AsanaTaskPreviewData,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { AsanaUserInfo } from 'server/src/third_party_tasks/asana/api.ts';\r\nimport {\r\n  addAsanaTaskFollowers,\r\n  addCommentOnAsanaTask,\r\n  attachFile,\r\n  createTask,\r\n  getAccessToken,\r\n  getAsanaProjects,\r\n  getAsanaUsers,\r\n  getTask,\r\n  setAsanaTaskAsignee,\r\n  getUserInfo,\r\n  setTaskClosed,\r\n  subscribeToUpdates,\r\n} from 'server/src/third_party_tasks/asana/api.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n  assertViewerHasUser,\r\n  Viewer,\r\n} from 'server/src/auth/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport {\r\n  taskTitleFromMessageContent,\r\n  textFromNodeRecursive,\r\n  todoNodesFromMessage,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport {\r\n  getExternalAuthData,\r\n  getTaskFooterText,\r\n  handleThirdPartyException,\r\n  publishMessageUpdateForTask,\r\n  removeExternalConnection,\r\n} from 'server/src/third_party_tasks/util.ts';\r\nimport type { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport { cache, cacheKey } from 'server/src/util/cache.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { ASANA_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport { messageContentToAsanaHtml } from 'server/src/third_party_tasks/asana/util.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\n\r\ntype CachedAsanaCredentials = {\r\n  accessToken: string;\r\n  workspace: string;\r\n};\r\nasync function getAsanaCredentials(viewer: Viewer) {\r\n  try {\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const key = cacheKey({ type: 'asana_credentials', userID, orgID });\r\n\r\n    let credentials = cache.get<CachedAsanaCredentials>(key);\r\n    if (credentials !== undefined) {\r\n      return credentials;\r\n    }\r\n    const externalData = await getExternalAuthData(viewer, 'asana');\r\n    if (externalData === null) {\r\n      return null;\r\n    }\r\n    const response = await getAccessToken(externalData.refreshToken);\r\n    if (!response.success) {\r\n      if (response.error === 'invalid_grant') {\r\n        cache.del(key);\r\n        await removeExternalConnection(viewer, 'asana');\r\n      }\r\n      throw new Error(response.error);\r\n    }\r\n    credentials = {\r\n      accessToken: response.access_token,\r\n      workspace: externalData.workspace,\r\n    };\r\n    cache.set<CachedAsanaCredentials>(\r\n      key,\r\n      credentials,\r\n      // subtract a small amount of time (30 seconds) to avoid the risk of the\r\n      // action happening between when the token expires as determined by the\r\n      // remote server versus when we receive and store it here (probably a\r\n      // couple of seconds).\r\n      response.expires_in - 30,\r\n    );\r\n    return credentials;\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Couldn't obtain Asana credentials`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getSelectedProject(viewer: Viewer) {\r\n  const userID = assertViewerHasUser(viewer);\r\n  // TODO: In this case, wouldn't we want to allow a different selection for a\r\n  // different orgID?\r\n  const response = await UserPreferenceEntity.findOne({\r\n    where: {\r\n      userID,\r\n      key: ASANA_CONNECTION_PREFERENCES,\r\n    },\r\n  });\r\n\r\n  return response ? (response.value as AsanaConnectionPreferences) : undefined;\r\n}\r\n\r\nexport async function createAsanaTask(viewer: Viewer, task: TaskEntity) {\r\n  const logger = new Logger(viewer);\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return;\r\n    }\r\n    const { accessToken, workspace } = credentials;\r\n    const message = await MessageEntity.findByPk(task.messageID);\r\n    if (!message) {\r\n      throw new Error(\r\n        `Failed to fetch message ${task.messageID} linked to task ${task.id}`,\r\n      );\r\n    }\r\n    const title = taskTitleFromMessageContent(message.content);\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'asana');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const htmlNotes = messageContentToAsanaHtml(message.content, footerText);\r\n    const project = (await getSelectedProject(viewer))?.projectID;\r\n    const asanaTaskGID = await createTask(\r\n      accessToken,\r\n      workspace,\r\n      project,\r\n      title,\r\n      htmlNotes,\r\n      undefined, // no parent task\r\n      task.done,\r\n    );\r\n    if (!asanaTaskGID) {\r\n      throw new Error(`failed to create Asana task for task ${task.id}`);\r\n    }\r\n\r\n    const previewData = await getAsanaTaskPreviewData(viewer, asanaTaskGID);\r\n\r\n    await TaskThirdPartyReference.create({\r\n      taskID: task.id,\r\n      externalID: asanaTaskGID,\r\n      externalConnectionType: 'asana',\r\n      previewData,\r\n    });\r\n\r\n    await subscribeToUpdates(logger, accessToken, asanaTaskGID);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to create Asana task for task ${task.id}`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function addAsanaTaskAssignees(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  taskAssignees: UUID[],\r\n) {\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return;\r\n    }\r\n    const { accessToken, workspace } = credentials;\r\n    const [asanaUserIDs, unmatchedUsers] = await getAsanaAsigneeAndFollowers(\r\n      viewer,\r\n      accessToken,\r\n      workspace,\r\n      taskAssignees,\r\n    );\r\n\r\n    const taskConnection = await TaskThirdPartyReference.findForTask(\r\n      taskID,\r\n      'asana',\r\n    );\r\n    if (!taskConnection) {\r\n      throw new Error(`Failed to find taskConnection for task ${taskID}`);\r\n    }\r\n\r\n    const asanaTask = await getTask(accessToken, taskConnection.externalID);\r\n    if (!asanaTask) {\r\n      throw new Error(\r\n        `Failed to get Asana task ${taskConnection.externalID} when updating task ${taskID}`,\r\n      );\r\n    }\r\n\r\n    const [assigneeGID, ...followerGIDs]: [string?, ...string[]] = asanaUserIDs;\r\n\r\n    const promises = [];\r\n    if (assigneeGID) {\r\n      promises.push(\r\n        setAsanaTaskAsignee(\r\n          accessToken,\r\n          assigneeGID,\r\n          taskConnection.externalID,\r\n        ),\r\n      );\r\n    }\r\n    if (followerGIDs.length > 0) {\r\n      promises.push(\r\n        addAsanaTaskFollowers(\r\n          accessToken,\r\n          followerGIDs,\r\n          taskConnection.externalID,\r\n        ),\r\n      );\r\n    }\r\n    if (unmatchedUsers.length > 0) {\r\n      const additionalText = additionalTextForTask(unmatchedUsers);\r\n      promises.push(\r\n        addCommentOnAsanaTask(\r\n          accessToken,\r\n          additionalText,\r\n          taskConnection.externalID,\r\n          true, // isPinned - let's pin this comment\r\n        ),\r\n      );\r\n    }\r\n    await Promise.all(promises);\r\n\r\n    // update the preview after assignees are updated\r\n    await updateAsanaTaskPreview(viewer, taskConnection);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to add Asana assignees to task ${taskID}`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nasync function getAsanaAsigneeAndFollowers(\r\n  viewer: Viewer,\r\n  accessToken: string,\r\n  workspace: string,\r\n  taskAssigneeUserIDs: UUID[],\r\n): Promise<[string[], UserEntity[]]> {\r\n  if (taskAssigneeUserIDs.length === 0) {\r\n    // nothing to do\r\n    return [[], []];\r\n  }\r\n  const orgID = assertViewerHasOrg(viewer);\r\n  const userLoader = new UserLoader(viewer, () => null);\r\n  const users = await userLoader.loadUsersInOrg(taskAssigneeUserIDs, orgID);\r\n\r\n  const asanaUserGIDs = await getAsanaUserGIDs(\r\n    viewer,\r\n    accessToken,\r\n    workspace,\r\n    users,\r\n  );\r\n\r\n  const foundAsanaUserIDs = asanaUserGIDs.filter(\r\n    (gid): gid is string => gid !== undefined,\r\n  );\r\n  const unmatchedUsers = users.filter((_user, i) => !asanaUserGIDs[i]);\r\n  return [foundAsanaUserIDs, unmatchedUsers];\r\n}\r\n\r\nfunction additionalTextForTask(noMatchUsers: UserEntity[]) {\r\n  if (noMatchUsers.length === 0) {\r\n    return '';\r\n  }\r\n  return [\r\n    'This task was assigned to the following Cord users who did not have Asana connected:',\r\n    ...noMatchUsers.map((user) => `${userDisplayName(user)} (${user.email})`),\r\n  ].join('\\n');\r\n}\r\n\r\nasync function getAsanaUserGIDs(\r\n  viewer: Viewer,\r\n  accessToken: string,\r\n  workspace: string,\r\n  users: UserEntity[],\r\n): Promise<(string | undefined)[]> {\r\n  const logger = new Logger(viewer);\r\n  // first check if user connected their account\r\n  const orgID = assertViewerHasOrg(viewer);\r\n  const connections = await ThirdPartyConnectionEntity.findAll({\r\n    where: {\r\n      userID: users.map(({ id }) => id),\r\n      orgID,\r\n      type: 'asana',\r\n    },\r\n  });\r\n  const idToAsanaID = new Map(\r\n    connections.map((connection) => [connection.userID, connection.externalID]),\r\n  );\r\n  // try to check if the user email exists on Asana\r\n  // TODO: In the future we likely want to store this list of asanaUsers\r\n  // instead of fetching it each time\r\n  const asanaUsers =\r\n    (await getAsanaUsers(logger, accessToken, workspace)) ?? [];\r\n  const emailToAsanaID = new Map(\r\n    asanaUsers.map((asanaUser) => [asanaUser.email, asanaUser.gid]),\r\n  );\r\n\r\n  return users.map((user) => {\r\n    return (\r\n      idToAsanaID.get(user.id) ||\r\n      (user.email ? emailToAsanaID.get(user.email) : undefined)\r\n    );\r\n  });\r\n}\r\n\r\nexport async function addAsanaTaskAttachments(\r\n  viewer: Viewer,\r\n  asanaTaskGID: string,\r\n  files: FileEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    const s3BucketLoader = new S3BucketLoader(viewer);\r\n    if (credentials === null) {\r\n      return;\r\n    }\r\n    const { accessToken } = credentials;\r\n    await Promise.all(\r\n      files\r\n        .filter((file) => file.uploadStatus === 'uploaded')\r\n        .map(async (file) => {\r\n          const url = await file.getSignedDownloadURL(s3BucketLoader);\r\n          const response = await fetch(url);\r\n\r\n          if (response.status === 200) {\r\n            // Our annotation files are currently named just \"A\" and Asana\r\n            // wouldn't show nice image thumbnail for them. Naming the attachment\r\n            // \"annotation.png\" fixed the problem and a thumbnail now shows for\r\n            // attached annotations.\r\n            await attachFile(\r\n              accessToken,\r\n              asanaTaskGID,\r\n              file.name,\r\n              file.mimeType,\r\n              response.body!,\r\n              file.size,\r\n            );\r\n          } else {\r\n            throw new Error(\r\n              `failed to attach file ${file.id} to Asana task ${asanaTaskGID}`,\r\n            );\r\n          }\r\n        }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to attach file to Asana task ${asanaTaskGID}`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function updateAsanaTask(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n  done: boolean,\r\n) {\r\n  try {\r\n    if (externalReference.externalConnectionType !== 'asana') {\r\n      throw new Error(\r\n        `Expected connection type \"asana\", got ${externalReference.externalConnectionType}`,\r\n      );\r\n    }\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return;\r\n    }\r\n    const { accessToken } = credentials;\r\n    await setTaskClosed(accessToken, done, externalReference.externalID);\r\n\r\n    // update the preview after the task is updated\r\n    await updateAsanaTaskPreview(viewer, externalReference);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to update task ${externalReference.taskID} on Asana`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function createAsanaSubtasks(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  todos: TaskTodoEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return [];\r\n    }\r\n    const { accessToken, workspace } = credentials;\r\n    const [task, taskConnection] = await Promise.all([\r\n      TaskEntity.findByPk(taskID),\r\n      TaskThirdPartyReference.findForTask(taskID, 'asana'),\r\n    ]);\r\n\r\n    if (task === null) {\r\n      throw new Error(`Failed to fetch task ${taskID}`);\r\n    }\r\n    if (taskConnection === null) {\r\n      throw new Error(\r\n        `Failed to fetch asana taskConnection for task ${taskID}`,\r\n      );\r\n    }\r\n\r\n    const message = await MessageEntity.findByPk(task.messageID);\r\n    if (!message) {\r\n      throw new Error(\r\n        `Failed to fetch message ${task.messageID} linked to task ${task.id}`,\r\n      );\r\n    }\r\n    const createdTodoMap = new Map(todos.map((todo) => [todo.id, todo]));\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'asana');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const htmlNotes = messageContentToAsanaHtml([], footerText);\r\n    const todoNodes = todoNodesFromMessage(message.content).filter((node) =>\r\n      createdTodoMap.has(node.todoID),\r\n    );\r\n    const project = (await getSelectedProject(viewer))?.projectID;\r\n    const asanaTaskGIDs = await Promise.all(\r\n      todoNodes.map((todoNode) =>\r\n        createTask(\r\n          accessToken,\r\n          workspace,\r\n          project,\r\n          textFromNodeRecursive(todoNode),\r\n          htmlNotes,\r\n          taskConnection.externalID,\r\n          createdTodoMap.get(todoNode.todoID)?.done,\r\n        ),\r\n      ),\r\n    );\r\n\r\n    return await Promise.all(\r\n      asanaTaskGIDs.map((asanaTaskGID, i) => {\r\n        if (!asanaTaskGID) {\r\n          throw new Error(`failed to create Asana subtask for task ${task.id}`);\r\n        }\r\n        return TaskThirdPartyReference.create({\r\n          taskID: task.id,\r\n          externalID: asanaTaskGID,\r\n          externalConnectionType: 'asana',\r\n          taskTodoID: todoNodes[i].todoID,\r\n          previewData: null,\r\n        });\r\n      }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to create subtasks on Asana for task ${taskID}`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n    return [];\r\n  }\r\n}\r\n\r\n// this is the function to call whenever Asana tells us that a task's completed\r\n// status has been changed in Asana.\r\nexport async function onAsanaUserChangedTaskStatus(\r\n  asanaUserGID: string,\r\n  taskGID: string,\r\n) {\r\n  try {\r\n    let logger = anonymousLogger();\r\n    // TODO: What happens if a task was closed in Asana by someone who does not\r\n    // have Cord account connected? Should we use someone else's access token to\r\n    // access the task details?\r\n    const connection = await ThirdPartyConnectionEntity.findOne({\r\n      where: {\r\n        externalID: asanaUserGID,\r\n        type: 'asana',\r\n      },\r\n    });\r\n\r\n    if (!connection?.externalAuthData) {\r\n      logger.info(\r\n        `Asana task's (${taskGID}) was updated, but we failed to find the extenal connection for user ${asanaUserGID}`,\r\n      );\r\n      return;\r\n    }\r\n    const connectionViewer = Viewer.createLoggedInViewer(\r\n      connection.userID,\r\n      connection.orgID,\r\n    );\r\n    logger = new Logger(connectionViewer);\r\n\r\n    const taskConnectionPromise = TaskThirdPartyReference.findOne({\r\n      where: {\r\n        externalID: taskGID,\r\n        externalConnectionType: 'asana',\r\n      },\r\n      include: [\r\n        {\r\n          model: TaskEntity,\r\n          required: true,\r\n          as: 'task',\r\n        },\r\n      ],\r\n    }) as any as Promise<\r\n      TaskThirdPartyReference & {\r\n        task: TaskEntity;\r\n      }\r\n    >;\r\n    // ^^^ extra type-casting so that Typescript knows we've fetched not just the\r\n    // TaskThirdPartyReference, but also the associated task\r\n\r\n    const [taskConnection, credentials] = await Promise.all([\r\n      taskConnectionPromise,\r\n      getAsanaCredentials(connectionViewer),\r\n    ]);\r\n\r\n    if (!taskConnection) {\r\n      throw new Error(`Failed to find Cord task for the Asana task ${taskGID}`);\r\n    }\r\n\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n    const asanaTask = await getTask(credentials.accessToken, taskGID);\r\n    if (!asanaTask) {\r\n      throw new Error(`Failed to fetch Asana task ${taskGID}`);\r\n    }\r\n\r\n    const completed = asanaTask.completed;\r\n    if (completed !== true && completed !== false) {\r\n      throw new Error(\r\n        `Invalid value for asana 'completed' task field ${completed}`,\r\n      );\r\n    }\r\n\r\n    if (completed === taskConnection.task.done) {\r\n      // nothing to be done, task's done status is already the same as on Asana\r\n      // This can happen when a user closes a task in Cord, we tell Asana about\r\n      // it and now Asana is telling us that the task status has changed.\r\n      return;\r\n    }\r\n\r\n    // for now, update the Cord task's done status only. In the future handle\r\n    // changes in assignees too.\r\n    await TaskEntity.update(\r\n      {\r\n        done: completed,\r\n        doneStatusLastUpdatedBy: connection.userID,\r\n      },\r\n      {\r\n        where: {\r\n          id: taskConnection.taskID,\r\n        },\r\n      },\r\n    );\r\n\r\n    // update asana's task preview\r\n    if (!taskConnection.previewData) {\r\n      await updateAsanaTaskPreview(connectionViewer, taskConnection);\r\n    } else {\r\n      const newPreviewData: AsanaTaskPreviewData = {\r\n        ...(taskConnection.previewData as AsanaTaskPreviewData),\r\n        done: completed,\r\n      };\r\n      await setAsanaTaskPreview(taskConnection, newPreviewData);\r\n    }\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to update task from a webhook`,\r\n      e,\r\n      'asana',\r\n    );\r\n  }\r\n}\r\n\r\nasync function updateAsanaTaskPreview(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n) {\r\n  // only update the preview if this is not a TODO issue\r\n  if (!externalReference.taskTodoID) {\r\n    const taskID = externalReference.externalID;\r\n    const previewData = await getAsanaTaskPreviewData(viewer, taskID);\r\n    if (previewData) {\r\n      await setAsanaTaskPreview(externalReference, previewData);\r\n    }\r\n  }\r\n}\r\n\r\nasync function setAsanaTaskPreview(\r\n  externalReference: TaskThirdPartyReference,\r\n  previewData: AsanaTaskPreviewData,\r\n) {\r\n  await externalReference.update({ previewData });\r\n  await publishMessageUpdateForTask(externalReference);\r\n}\r\n\r\nexport async function fetchAsanaProjects(viewer: Viewer) {\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return [];\r\n    }\r\n    const projects = await getAsanaProjects(\r\n      credentials.accessToken,\r\n      credentials.workspace,\r\n    );\r\n    if (!projects) {\r\n      throw new Error(`Asana api returned undefined projects`);\r\n    }\r\n    return projects;\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to fetch projects for Asana`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function getAsanaTaskPreviewData(\r\n  viewer: Viewer,\r\n  asanaTaskGID: string,\r\n): Promise<AsanaTaskPreviewData | null> {\r\n  try {\r\n    const credentials = await getAsanaCredentials(viewer);\r\n    if (credentials === null) {\r\n      return null;\r\n    }\r\n\r\n    const task = await getTask(credentials.accessToken, asanaTaskGID);\r\n    if (!task) {\r\n      throw new Error(`Failed to fetch Asana task ${asanaTaskGID}`);\r\n    }\r\n\r\n    return {\r\n      title: task.name,\r\n      assignee: task.assignee?.name,\r\n      url: task.permalink_url,\r\n      done: task.completed,\r\n    };\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to fetch Asana task preview`,\r\n      e,\r\n      'asana',\r\n      viewer,\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n// function to call when Asana tells us that assignee field changed\r\nexport async function onAsanaAssigneeChanged(\r\n  asanaAssignerGID: string,\r\n  taskGID: string,\r\n  newAssigneeGID: string | undefined,\r\n) {\r\n  let logger = anonymousLogger();\r\n  try {\r\n    const taskConnection = await TaskThirdPartyReference.findOne({\r\n      where: {\r\n        externalID: taskGID,\r\n        externalConnectionType: 'asana',\r\n      },\r\n    });\r\n    if (!taskConnection) {\r\n      throw new Error(`Failed to find Cord task for the Asana task ${taskGID}`);\r\n    }\r\n\r\n    const message = await MessageEntity.findOne({\r\n      include: [\r\n        {\r\n          model: TaskEntity,\r\n          required: true,\r\n          as: 'tasks',\r\n          where: {\r\n            id: taskConnection.taskID,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    if (!message) {\r\n      throw new Error(\r\n        `Failed to find the message for the taskID ${taskConnection.taskID}`,\r\n      );\r\n    }\r\n\r\n    // TODO: What if the task assignee was changed by someone who did not connect\r\n    // their account?\r\n    const connection = await ThirdPartyConnectionEntity.findOne({\r\n      where: {\r\n        externalID: asanaAssignerGID,\r\n        type: 'asana',\r\n        orgID: message.orgID,\r\n      },\r\n    });\r\n    if (!connection?.externalAuthData) {\r\n      throw new Error(\r\n        `External connection ${connection} or external auth data ${connection?.externalAuthData} is missing`,\r\n      );\r\n    }\r\n    const connectionViewer = Viewer.createLoggedInViewer(\r\n      connection.userID,\r\n      connection.orgID,\r\n    );\r\n    logger = new Logger(connectionViewer);\r\n\r\n    const credentials = await getAsanaCredentials(connectionViewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    let newCordAssignee: UUID | undefined = undefined;\r\n    let asanaAssigneeInfo: AsanaUserInfo | undefined = undefined;\r\n    if (newAssigneeGID) {\r\n      [newCordAssignee, asanaAssigneeInfo] = await getCordUserID(\r\n        credentials.accessToken,\r\n        newAssigneeGID,\r\n        connection.orgID,\r\n      );\r\n    }\r\n\r\n    if (newCordAssignee) {\r\n      await TaskAssigneeEntity.upsert({\r\n        taskID: taskConnection.taskID,\r\n        userID: newCordAssignee,\r\n        orgID: connection.orgID,\r\n      });\r\n    }\r\n\r\n    // update task preview data - there are actually a few cases depending on\r\n    // whether we have existing preview data and whether we needed to fetch the\r\n    // Asana user information in the process\r\n    if (!taskConnection.previewData) {\r\n      // this is unlikely but possible\r\n      await updateAsanaTaskPreview(connectionViewer, taskConnection);\r\n    } else if (!newAssigneeGID) {\r\n      // the task is unassigned\r\n      const newPreviewData: AsanaTaskPreviewData = {\r\n        ...(taskConnection.previewData as AsanaTaskPreviewData),\r\n        assignee: undefined,\r\n      };\r\n      await setAsanaTaskPreview(taskConnection, newPreviewData);\r\n    } else if (asanaAssigneeInfo) {\r\n      const newPreviewData: AsanaTaskPreviewData = {\r\n        ...(taskConnection.previewData as AsanaTaskPreviewData),\r\n        assignee: asanaAssigneeInfo.name,\r\n      };\r\n      await setAsanaTaskPreview(taskConnection, newPreviewData);\r\n    } else {\r\n      await updateAsanaTaskPreview(connectionViewer, taskConnection);\r\n    }\r\n  } catch (e) {\r\n    logger.logException('Failed to update assignee from Asana webhook', e);\r\n    return;\r\n  }\r\n}\r\n\r\n// try to convert from Asana userGID to Cord userID. First by checking whether\r\n// we have connection in the third_party_connections table, second by trying to\r\n// match the asana user's email to a cord user. In the second case, Asana\r\n// user information needs to be fetched from Asana and will be part of the\r\n// return value.\r\nasync function getCordUserID(\r\n  accessToken: string,\r\n  asanaUserGID: string,\r\n  orgID: string,\r\n): Promise<[UUID | undefined, AsanaUserInfo | undefined]> {\r\n  let logger = anonymousLogger();\r\n  try {\r\n    const connection = await ThirdPartyConnectionEntity.findOne({\r\n      where: {\r\n        externalID: asanaUserGID,\r\n        orgID,\r\n        type: 'asana',\r\n      },\r\n    });\r\n    if (connection) {\r\n      return [connection.userID, undefined];\r\n    }\r\n    logger = new Logger(Viewer.createOrgViewer(orgID));\r\n\r\n    // the user is not connected, let's try to match on email\r\n    const userInfo = await getUserInfo(accessToken, asanaUserGID);\r\n    if (!userInfo?.email) {\r\n      throw new Error(`Failed to get email for asana user ${asanaUserGID}`);\r\n    }\r\n    const users = await getSequelize().query<UserEntity>(\r\n      `\r\n    SELECT users.* FROM users, org_members\r\n    WHERE users.id = org_members.\"userID\"\r\n    AND users.email = $1\r\n    AND org_members.\"orgID\" = $2\r\n    LIMIT 1;\r\n    `,\r\n      {\r\n        bind: [userInfo.email, orgID],\r\n        type: QueryTypes.SELECT,\r\n        model: UserEntity,\r\n      },\r\n    );\r\n    const user = users.length > 0 ? users[0] : null;\r\n\r\n    return [user?.id, userInfo];\r\n  } catch (e) {\r\n    logger.logException(`Failed to convert Asana userGID to Cord userID`, e);\r\n    return [undefined, undefined];\r\n  }\r\n}\r\n", "import FormData from 'form-data';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { ASANA_AUTH_REDIRECT_URL } from 'common/util/oauth.ts';\r\nimport type { AsanaProject, DeepPartial } from 'common/types/index.ts';\r\nimport { ASANA_EVENTS_PATH } from 'server/src/public/routes/MainRouter.ts';\r\nimport { API_SERVER_HOST } from 'common/const/Urls.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\n// exchange OAuth code for a token that can be used to e.g. create tasks\r\n// https://developers.asana.com/docs/oauth (Token Exchange endpoint)\r\nexport async function completeOAuthFlow(\r\n  code: string,\r\n): Promise<[string, DeepPartial<AsanaUserInfo>]> {\r\n  // unlike server/src/jira/api.ts completeOAuthFlow(), Asana's server expects\r\n  // params to be form encoded and not JSON encoded\r\n  const params = new URLSearchParams();\r\n  params.append('grant_type', 'authorization_code');\r\n  params.append('client_id', env.ASANA_APP_CLIENT_ID);\r\n  params.append('client_secret', env.ASANA_APP_CLIENT_SECRET); // never have this in the browser,\r\n  params.append('redirect_uri', ASANA_AUTH_REDIRECT_URL);\r\n  params.append('code', code);\r\n  const response = await fetch('https://app.asana.com/-/oauth_token', {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n    },\r\n    body: params,\r\n  });\r\n  const { access_token, refresh_token } = await response.json();\r\n\r\n  const userInfo = await getUserInfo(access_token, 'me');\r\n  if (userInfo === undefined) {\r\n    throw new Error('Could not fetch Asana user information');\r\n  }\r\n\r\n  return [refresh_token, userInfo];\r\n}\r\n\r\n// https://developers.asana.com/docs/oauth (Token Exchange endpoint)\r\n// Note: Unlike Jira (which returns 403), Asana API returns code 400 when\r\n// refreshToken is invalid (invalid_grant error)\r\nexport async function getAccessToken(refreshToken: string): Promise<\r\n  | {\r\n      success: true;\r\n      access_token: string;\r\n      expires_in: number;\r\n    }\r\n  | {\r\n      success: false;\r\n      error: string;\r\n      error_description: string;\r\n    }\r\n> {\r\n  const params = new URLSearchParams();\r\n  params.append('grant_type', 'refresh_token');\r\n  params.append('refresh_token', refreshToken);\r\n  params.append('client_id', env.ASANA_APP_CLIENT_ID);\r\n  params.append('client_secret', env.ASANA_APP_CLIENT_SECRET); // never have this in the browser,\r\n  params.append('redirect_uri', ASANA_AUTH_REDIRECT_URL);\r\n\r\n  // params.append('code', code);\r\n  const response = await fetch('https://app.asana.com/-/oauth_token', {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n    },\r\n    body: params,\r\n  });\r\n  const data = await response.json();\r\n  // Example response:\r\n  // {\r\n  //     access_token: 'ey...',\r\n  //     token_type: 'bearer',\r\n  //     expires_in: 3600,\r\n  //     data: {\r\n  //       id: 1199949433766429,\r\n  //         gid: '1199949433766429',\r\n  //         name: 'Jozef Mokry',\r\n  //         email: 'jozef@cord.com'\r\n  //     }\r\n  // }\r\n  return {\r\n    success: response.status === 200,\r\n    ...data,\r\n  };\r\n}\r\n\r\nexport type AsanaUserInfo = {\r\n  gid: string;\r\n  email: string;\r\n  name: string;\r\n  photo: string | null;\r\n  resource_type: 'user';\r\n  workspaces: Array<{\r\n    gid: string;\r\n    name: string;\r\n    resource_type: 'workspace';\r\n  }>;\r\n};\r\n\r\n// returns DeepPartial<AsanaUserInfo> instead of AsanaUserInfo just to be on\r\n// the safe side since data comes from a 3rd party\r\nexport async function getUserInfo(accessToken: string, asanaUserGID = 'me') {\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/users/${asanaUserGID}`,\r\n    {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    },\r\n  );\r\n  // Example response:\r\n  //   data: {\r\n  //     gid: '1199954802624710',\r\n  //     email: 'developer@cord.com',\r\n  //     name: 'Developer',\r\n  //     photo: null,\r\n  //     resource_type: 'user',\r\n  //     workspaces: [\r\n  //       {\r\n  //         gid: '1199945221905854',\r\n  //         name: 'cord.com',\r\n  //         resource_type: 'workspace',\r\n  //       },\r\n  //     ],\r\n  //   },\r\n  // };\r\n  const json = await handleResponseJSON<{ data: AsanaUserInfo }>(response);\r\n  return json.data;\r\n}\r\n\r\n// https://developers.asana.com/docs/create-a-task\r\nexport async function createTask(\r\n  accessToken: string,\r\n  workspaceGID: string,\r\n  project: string | undefined,\r\n  title: string,\r\n  htmlNotes: string,\r\n  parentAsanaTaskGID?: string,\r\n  completed?: boolean,\r\n) {\r\n  const params = {\r\n    data: {\r\n      name: title,\r\n      html_notes: htmlNotes,\r\n      workspace: workspaceGID,\r\n      parent: parentAsanaTaskGID,\r\n      projects: project ? [project] : undefined,\r\n      completed: completed ? true : false,\r\n    },\r\n  };\r\n  const response = await fetch('https://app.asana.com/api/1.0/tasks', {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${accessToken}`,\r\n    },\r\n    body: JSON.stringify(params),\r\n  });\r\n  const json = await handleResponseJSON<{ data: { gid: string } }>(response);\r\n  return json.data.gid;\r\n}\r\n\r\n// https://developers.asana.com/docs/get-a-task\r\nexport async function getTask(accessToken: string, taskGID: string) {\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}`,\r\n    {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    },\r\n  );\r\n  const json = await handleResponseJSON<{\r\n    data: {\r\n      assignee: {\r\n        gid: string;\r\n        name: string;\r\n      } | null;\r\n      completed: boolean;\r\n      permalink_url: string;\r\n      name: string;\r\n      // and a bunch of other fields that we don't need right now\r\n    };\r\n  }>(response);\r\n  return json.data;\r\n}\r\n\r\nexport async function setAsanaTaskAsignee(\r\n  accessToken: string,\r\n  assigneeGID: string,\r\n  taskGID: string,\r\n) {\r\n  const params = {\r\n    data: {\r\n      assignee: assigneeGID,\r\n    },\r\n  };\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}`,\r\n    {\r\n      method: 'put',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(params),\r\n    },\r\n  );\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\nexport async function addAsanaTaskFollowers(\r\n  accessToken: string,\r\n  followerGIDs: string[],\r\n  taskGID: string,\r\n) {\r\n  const params = {\r\n    data: {\r\n      followers: followerGIDs,\r\n    },\r\n  };\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}/addFollowers`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(params),\r\n    },\r\n  );\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\nexport async function addCommentOnAsanaTask(\r\n  accessToken: string,\r\n  comment: string,\r\n  taskGID: string,\r\n  isPinned = false,\r\n) {\r\n  const params = {\r\n    data: {\r\n      text: comment,\r\n      is_pinned: isPinned,\r\n    },\r\n  };\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}/stories`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(params),\r\n    },\r\n  );\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\nexport async function attachFile(\r\n  accessToken: string,\r\n  taskGID: string,\r\n  filename: string,\r\n  contentType: string,\r\n  stream: ReadableStream<Uint8Array>,\r\n  filesize: number,\r\n): Promise<unknown> {\r\n  const formData = new FormData();\r\n  formData.append('file', stream, {\r\n    contentType,\r\n    filename,\r\n    knownLength: filesize,\r\n  });\r\n\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}/attachments`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: formData.getBuffer(),\r\n    },\r\n  );\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\n// https://developers.asana.com/docs/update-a-task\r\nexport async function setTaskClosed(\r\n  accessToken: string,\r\n  closed: boolean,\r\n  taskGID: string,\r\n) {\r\n  const params = {\r\n    data: {\r\n      completed: closed,\r\n    },\r\n  };\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/tasks/${taskGID}`,\r\n    {\r\n      method: 'put',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: JSON.stringify(params),\r\n    },\r\n  );\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\n// https://developers.asana.com/docs/establish-a-webhook\r\nexport async function subscribeToUpdates(\r\n  logger: Logger,\r\n  accessToken: string,\r\n  taskGID: string,\r\n) {\r\n  let targetHost = API_SERVER_HOST;\r\n  if (process.env.NODE_ENV === 'development') {\r\n    if (!process.env.EXTERNAL_API_HOST_FOR_DEVELOPMENT) {\r\n      logger.error(\r\n        'A publicly available URL is needed to set up Asana webhook. ' +\r\n          'Set EXTERNAL_API_HOST_FOR_DEVELOPMENT in your .env file if you want to receive webhooks ' +\r\n          'locally.',\r\n      );\r\n      return;\r\n    }\r\n    targetHost = process.env.EXTERNAL_API_HOST_FOR_DEVELOPMENT;\r\n  }\r\n  const params = {\r\n    data: {\r\n      target: `https://${targetHost}${ASANA_EVENTS_PATH}`,\r\n      resource: taskGID,\r\n    },\r\n  };\r\n  const response = await fetch(`https://app.asana.com/api/1.0/webhooks`, {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${accessToken}`,\r\n    },\r\n    body: JSON.stringify(params),\r\n  });\r\n  return await handleResponseJSON(response);\r\n}\r\n\r\ntype AsanaUser = {\r\n  gid: string;\r\n  email: string;\r\n};\r\nexport async function getAsanaUsers(\r\n  logger: Logger,\r\n  accessToken: string,\r\n  workspace: string,\r\n): Promise<AsanaUser[] | undefined> {\r\n  const users: AsanaUser[] = [];\r\n  let fetchUrl:\r\n    | string\r\n    | undefined = `https://app.asana.com/api/1.0/users?opt_fields=gid,email&limit=100&workspace=${workspace}`;\r\n  // to avoid infinite while loop, just in case.\r\n  //TODO: This will break for companies with over maxFetchCount*limit=10k Asana users.\r\n  let maxFetchCount = 100;\r\n  while (maxFetchCount-- > 0 && fetchUrl) {\r\n    const response: Response = await fetch(fetchUrl, {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n    const json = await handleResponseJSON<{\r\n      errors?: any;\r\n      data?: AsanaUser[];\r\n      next_page?: { uri: string };\r\n    }>(response);\r\n    if (json.errors || !json.data) {\r\n      logger.error(`Could not fetch Asana users: ${json.errors}`);\r\n      return undefined;\r\n    }\r\n    const newUsers: AsanaUser[] = json.data;\r\n    users.push(...newUsers);\r\n    fetchUrl = json.next_page?.uri;\r\n  }\r\n  return users;\r\n}\r\n\r\nexport async function getAsanaProjects(accessToken: string, workspace: string) {\r\n  const response = await fetch(\r\n    `https://app.asana.com/api/1.0/projects?workspace=${workspace}`,\r\n    {\r\n      method: 'get',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    },\r\n  );\r\n  const json = await handleResponseJSON<{ data: AsanaProject[] }>(response);\r\n  return json.data;\r\n}\r\n\r\nasync function handleResponseJSON<T = unknown>(response: Response) {\r\n  const textResponse = await response.text();\r\n\r\n  if (response.status >= 400) {\r\n    // Note: Unlike Jira, Asana returns 401 when we make a request to it with\r\n    // invalid accessToken\r\n    if (response.status === 401) {\r\n      throw new Error(Errors.EXTERNAL_API_FORBIDDEN_RESPONSE);\r\n    } else {\r\n      throw new Error(textResponse);\r\n    }\r\n  }\r\n  try {\r\n    return JSON.parse(textResponse) as T;\r\n  } catch (e) {\r\n    throw new Error('Could not deserialize response JSON: ' + textResponse);\r\n  }\r\n}\r\n", "import type { Request } from 'express';\r\nimport { Router } from 'express';\r\nimport cors from 'cors';\r\nimport multer from 'multer';\r\nimport basicAuth from 'express-basic-auth';\r\nimport responseTime from 'response-time';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport CreateThreadHandler from 'server/src/public/routes/platform/threads/CreateThreadHandler.ts';\r\nimport GetApplicationHandler from 'server/src/public/routes/platform/applications/GetApplicationHandler.ts';\r\nimport DeletePlatformOrganizationsHandler from 'server/src/public/routes/platform/orgs/DeletePlatformOrganizationsHandler.ts';\r\nimport DeleteApplicationHandler from 'server/src/public/routes/platform/applications/DeleteApplicationHandler.ts';\r\nimport UpdateApplicationHandler from 'server/src/public/routes/platform/applications/UpdateApplicationHandler.ts';\r\nimport ListApplicationsHandler from 'server/src/public/routes/platform/applications/ListApplicationsHandler.ts';\r\nimport {\r\n  VerifyAppServerAuthToken,\r\n  VerifyCustomerServerAuthToken,\r\n} from 'server/src/public/routes/middleware/VerifyAPIAccessToken.ts';\r\nimport IndexHandler from 'server/src/public/routes/handlers/IndexHandler.ts';\r\nimport SlackAuthRedirectHandler from 'server/src/public/routes/handlers/SlackAuthRedirectHandler.ts';\r\nimport JiraAuthRedirectHandler from 'server/src/public/routes/handlers/JiraAuthRedirectHandler.ts';\r\nimport SlackEventApiHandler from 'server/src/public/routes/handlers/SlackEventApiHandler.ts';\r\nimport SlackInteractiveEventApiHandler from 'server/src/public/routes/handlers/SlackInteractiveEventApiHandler.ts';\r\nimport AsanaAuthRedirectHandler from 'server/src/public/routes/handlers/AsanaAuthRedirectHandler.ts';\r\nimport LinearAuthRedirectHandler from 'server/src/public/routes/handlers/LinearAuthRedirectHandler.ts';\r\nimport AsanaEventApiHandler from 'server/src/public/routes/handlers/AsanaEventApiHandler.ts';\r\nimport {\r\n  TrelloAuthLoginHandler,\r\n  TrelloAuthRedirectHandler,\r\n} from 'server/src/public/routes/handlers/TrelloAuthHandlers.ts';\r\nimport LinearEventApiHandler from 'server/src/public/routes/handlers/LinearEventApiHandler.ts';\r\nimport PlatformErrorHandler from 'server/src/public/routes/middleware/PlatformErrorHandler.ts';\r\nimport APIAuthorizeHandler from 'server/src/public/routes/platform/APIAuthorizeHandler.ts';\r\nimport ListPlatformOrganizationsHandler from 'server/src/public/routes/platform/orgs/ListPlatformOrganizationsHandler.ts';\r\nimport GetPlatformOrganizationHandler from 'server/src/public/routes/platform/orgs/GetPlatformOrganizationHandler.ts';\r\nimport CreatePlatformOrganizationsHandler from 'server/src/public/routes/platform/orgs/CreatePlatformOrganizationsHandler.ts';\r\nimport UpdatePlatformOrganizationsHandler from 'server/src/public/routes/platform/orgs/UpdatePlatformOrganizationsHandler.ts';\r\nimport UpdatePlatformOrganizationMembersHandler from 'server/src/public/routes/platform/org_members/UpdatePlatformOrganizationMembersHandler.ts';\r\nimport ListPlatformUsersHandler from 'server/src/public/routes/platform/users/ListPlatformUsersHandler.ts';\r\nimport GetPlatformUserHandler from 'server/src/public/routes/platform/users/GetPlatformUserHandler.ts';\r\nimport CreatePlatformUserHandler from 'server/src/public/routes/platform/users/CreatePlatformUserHandler.ts';\r\nimport UpdatePlatformUserHandler from 'server/src/public/routes/platform/users/UpdatePlatformUserHandler.ts';\r\nimport PlatformBatchHandler from 'server/src/public/routes/platform/PlatformBatchHandler.ts';\r\nimport GetThreadMessageHandler from 'server/src/public/routes/platform/messages/GetThreadMessageHandler.ts';\r\nimport ListThreadMessagesHandler from 'server/src/public/routes/platform/messages/ListThreadMessagesHandler.ts';\r\nimport CreateThreadMessageHandler from 'server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts';\r\n\r\nimport {\r\n  takeHeapSnapshot,\r\n  writeOutCPUProfile,\r\n} from 'server/src/admin/profiler.ts';\r\nimport { RequestContextMiddleware } from 'server/src/middleware/request_context.ts';\r\nimport {\r\n  RenderUnsubscribeThreadPage,\r\n  UnsubscribeThreadHandler,\r\n} from 'server/src/public/routes/email/unsubscribe_thread/index.ts';\r\nimport { FileProxyHandler } from 'server/src/public/routes/file/index.ts';\r\nimport NotificationLoggingHandler from 'server/src/public/routes/notifications_logging/NotificationLoggingHandler.ts';\r\nimport {\r\n  SLACK_EVENT_PATH,\r\n  SLACK_INTERACTIVE_EVENT_PATH,\r\n} from 'server/src/const.ts';\r\nimport SendGridWebhookHandler from 'server/src/public/routes/handlers/SendGridWebhookHandler.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport NotificationRedirectURIHandler from 'server/src/public/routes/notification-uri-test/NotificationRedirectURIHandler.ts';\r\nimport GetDemoAppsSignedTokenHandler from 'server/src/public/routes/demo-apps/GetDemoAppsSignedTokenHandler.ts';\r\nimport {\r\n  ADMIN_ORIGIN,\r\n  DOCS_ORIGIN,\r\n  MARKETING_ORIGIN,\r\n  TOP_ORIGIN,\r\n} from 'common/const/Urls.ts';\r\nimport SlackLinkingConfirmationHandler from 'server/src/public/routes/handlers/SlackLinkingConfirmationHandler.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport TestbedTokensHandler from 'server/src/public/routes/handlers/TestbedTokensHandler.ts';\r\nimport GetSampleSignedTokenHandler from 'server/src/public/routes/sample-token/GetSampleSignedTokenHandler.ts';\r\nimport MondayAuthRedirectHandler from 'server/src/public/routes/handlers/MondayAuthRedirectHandler.ts';\r\nimport MondayEventApiHandler from 'server/src/public/routes/handlers/MondayEventApiHandler.ts';\r\nimport GetDocsSampleSignedTokenHandler from 'server/src/public/routes/docs-sample-token/GetDocsSampleSignedTokenHandler.ts';\r\nimport DeletePlatformUserDataHandler from 'server/src/public/routes/platform/users/DeletePlatformUserDataHandler.ts';\r\nimport CreateNotificationHandler from 'server/src/public/routes/platform/notifications/CreateNotificationHandler.ts';\r\nimport GetThreadHandler from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\nimport CreateApplicationHandler from 'server/src/public/routes/platform/applications/CreateApplicationHandler.ts';\r\nimport UpdateThreadHandler from 'server/src/public/routes/platform/threads/UpdateThreadHandler.ts';\r\nimport DeleteThreadHandler from 'server/src/public/routes/platform/threads/DeleteThreadHandler.ts';\r\nimport DeleteThreadMessageHandler from 'server/src/public/routes/platform/messages/DeleteThreadMessageHandler.ts';\r\nimport ListThreadsHandler from 'server/src/public/routes/platform/threads/ListThreadsHandler.ts';\r\nimport ListNotificationsHandler from 'server/src/public/routes/platform/notifications/ListNotificationsHandler.ts';\r\nimport DeleteNotificationHandler from 'server/src/public/routes/platform/notifications/DeleteNotificationHandler.ts';\r\nimport UpdateThreadMessageHandler from 'server/src/public/routes/platform/messages/UpdateThreadMessageHandler.ts';\r\nimport AppendMessageHandler from 'server/src/public/routes/platform/messages/AppendMessageHandler.ts';\r\nimport UpdateUserPresenceHandler from 'server/src/public/routes/platform/presence/UpdateUserPresenceHandler.ts';\r\nimport { Counter, TimeHistogram } from 'server/src/logging/prometheus.ts';\r\nimport Auth0LogsHandler from 'server/src/public/routes/handlers/Auth0LogsHandler.ts';\r\nimport ListMessagesHandler from 'server/src/public/routes/platform/messages/ListMessagesHandler.ts';\r\nimport ListUserPreferencesHandler from 'server/src/public/routes/platform/preferences/ListUserPreferencesHandler.ts';\r\nimport UpdateUserPreferencesHandler from 'server/src/public/routes/platform/preferences/UpdateUserPreferencesHandler.tsx';\r\nimport ApplicationTokenHandler from 'server/src/public/routes/platform/verify/ApplicationTokenHandler.ts';\r\nimport CreateWebhookHandler from 'server/src/public/routes/platform/webhooks/CreateWebhookHandler.ts';\r\nimport DeleteWebhookHandler from 'server/src/public/routes/platform/webhooks/DeleteWebhookHandler.ts';\r\nimport DemoUserHandler from 'server/src/public/routes/warm-demo-users/DemoUserHandler.ts';\r\nimport CreateFileHandler from 'server/src/public/routes/platform/files/CreateFileHandler.ts';\r\nimport { MAX_UPLOAD_SIZE } from 'common/uploads/index.ts';\r\nimport CliVersionHandler from 'server/src/public/routes/handlers/CliVersionHandler.ts';\r\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\r\nimport {\r\n  deprecated,\r\n  deprecatedFunction,\r\n} from 'server/src/logging/deprecate.ts';\r\nimport ExperimentalPlatformPermissionHandlers from 'server/src/public/routes/permissions/ExperimentalPlatformPermissionHandlers.ts';\r\nimport StripeWebhookHandler from 'server/src/public/routes/handlers/StripeWebhookHandler.ts';\r\nimport ListPlatformOrganizationMembersHandler from 'server/src/public/routes/platform/org_members/ListPlatformOrganizationMembersHandler.ts';\r\nimport ThoughtspotApplicationMigrationHandler from 'server/src/public/routes/platform/customer/thoughtspot/ThoughtspotApplicationMigrationHandler.ts';\r\nimport CommunityGetUserHandler from 'server/src/public/routes/platform/customer/community/CommunityGetUserHandler.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport ClientGetViewerHandler from 'server/src/public/routes/platform/client/ClientGetViewerHandler.ts';\r\nimport ClientGetUserHandler from 'server/src/public/routes/platform/client/ClientGetUserHandler.ts';\r\nimport ClientGetUsersHandler from 'server/src/public/routes/platform/client/ClientGetUsersHandler.ts';\r\nimport ClientGetThreadHandler from 'server/src/public/routes/platform/client/ClientGetThreadHandler.ts';\r\nimport ClientGetMessageHandler from 'server/src/public/routes/platform/client/ClientGetMessageHandler.ts';\r\nimport ClientGetThreadCountsHandler from 'server/src/public/routes/platform/client/ClientGetThreadCountsHandler.ts';\r\nimport ClientGetThreadsHandler from 'server/src/public/routes/platform/client/ClientGetThreadsHandler.ts';\r\nimport ClientGetNotificationsHandler from 'server/src/public/routes/platform/client/ClientGetNotificationsHandler.ts';\r\nimport ClientGetNotificationCountsHandler from 'server/src/public/routes/platform/client/ClientGetNotificationCountsHandler.ts';\r\nimport ClientGetGroupMembersHandler from 'server/src/public/routes/platform/client/ClientGetGroupMembersHandler.ts';\r\nimport ClientGetPresenceHandler from 'server/src/public/routes/platform/client/ClientGetPresenceHandler.ts';\r\nimport GetDbDumpHandler from 'server/src/public/routes/platform/customer/GetDbDumpHandler.ts';\r\nimport CopyFilesHandler from 'server/src/public/routes/platform/customer/CopyFilesHandler.ts';\r\n\r\nexport const ASANA_EVENTS_PATH = '/asana/events';\r\nexport const LINEAR_EVENTS_PATH = '/linear/events';\r\nexport const MONDAY_EVENTS_PATH_BASE = '/monday/events';\r\nexport const MONDAY_EVENTS_PATH = MONDAY_EVENTS_PATH_BASE + '/:subscriptionId';\r\nexport const UNSUBSCRIBE_PATH = '/email/unsubscribe_thread';\r\nexport const TYPEFORM_NOTIFICATION_LOGGING_PATH = '/typeform';\r\nexport const DEFAULT_NOTIFICATION_LOGGING_PATH = '/redirect';\r\n\r\n// TODO remove and set envs up properly once new site is launched\r\nconst TEMPORARY_V5_CORD_DOT_COM_ORIGINS = [\r\n  'https://cord-v5-cord.vercel.app',\r\n  'https://v5.cord.com/',\r\n];\r\n\r\nconst restApiCalls = Counter({\r\n  name: 'RestApiCalls',\r\n  help: 'Tracks how often each REST API method is called',\r\n  labelNames: ['route', 'appID', 'statusCode', 'cordSource'],\r\n});\r\n\r\nconst restApiCallExecTime = TimeHistogram({\r\n  name: 'RestApiCallExecTime',\r\n  help: 'Tracks how long each REST API path call takes in s',\r\n  labelNames: ['route', 'appID'],\r\n});\r\n\r\nconst MainRouter = Router();\r\n\r\nMainRouter.get('/', IndexHandler);\r\nMainRouter.get('/auth/slack/redirect', SlackAuthRedirectHandler);\r\n// Special flow for Radical Test Org app\r\nMainRouter.get('/auth/slack/redirect/dev', SlackAuthRedirectHandler);\r\nMainRouter.get(\r\n  '/auth/slack/linking-confirmation',\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  SlackLinkingConfirmationHandler,\r\n);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/auth/jira/redirect/', JiraAuthRedirectHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/auth/asana/redirect/', AsanaAuthRedirectHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/auth/linear/redirect', LinearAuthRedirectHandler);\r\nMainRouter.get('/auth/trello/login', TrelloAuthLoginHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/auth/trello/redirect', TrelloAuthRedirectHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/auth/monday/redirect', MondayAuthRedirectHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get(UNSUBSCRIBE_PATH, RenderUnsubscribeThreadPage);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.post(UNSUBSCRIBE_PATH, UnsubscribeThreadHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.get('/file', FileProxyHandler);\r\nMainRouter.post(SLACK_EVENT_PATH, SlackEventApiHandler);\r\nMainRouter.post(SLACK_INTERACTIVE_EVENT_PATH, SlackInteractiveEventApiHandler);\r\nMainRouter.post(ASANA_EVENTS_PATH, AsanaEventApiHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.post(LINEAR_EVENTS_PATH, LinearEventApiHandler);\r\n// eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nMainRouter.post(MONDAY_EVENTS_PATH, MondayEventApiHandler);\r\n\r\nconst ignoreUploadedFiles = multer({\r\n  // Filter out all files to not store them for now but\r\n  // still pass on the message.\r\n  fileFilter: (_req, _file, cb) => {\r\n    cb(null, false);\r\n  },\r\n}); // for parsing multipart/form-data\r\nconst uploadedFiles = multer({\r\n  dest: '/tmp/uploads/',\r\n  limits: {\r\n    fileSize: MAX_UPLOAD_SIZE,\r\n  },\r\n});\r\n// Sendgrid's Inbound Parse webhook endpoint\r\nMainRouter.post(\r\n  '/sendgrid',\r\n\r\n  // Only SendGrid should be able to post to this endpoint\r\n  basicAuth({\r\n    users: {\r\n      [env.SENDGRID_INBOUND_WEBHOOK_USER]:\r\n        env.SENDGRID_INBOUND_WEBHOOK_PASSWORD,\r\n    },\r\n  }),\r\n\r\n  // parse multipart/form-data\r\n  // Allow all files through to not throw an error\r\n  // and drop replies with attachments.\r\n  // (TODO) Properly implement support for attachments by\r\n  // uploading files to s3 and attaching to message.\r\n  ignoreUploadedFiles.any(),\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  SendGridWebhookHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  TYPEFORM_NOTIFICATION_LOGGING_PATH + '/:redirectID',\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  NotificationLoggingHandler,\r\n);\r\nMainRouter.get(\r\n  DEFAULT_NOTIFICATION_LOGGING_PATH + '/:redirectID',\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  NotificationLoggingHandler,\r\n);\r\n\r\nMainRouter.use(cors());\r\n\r\n// Developer API\r\n\r\nMainRouter.use(\r\n  '/v1/*',\r\n  (req, _res, next) =>\r\n    asyncLocalStorage\r\n      ? asyncLocalStorage.run(\r\n          {\r\n            operationName: `REST: ${req.method} ${req.baseUrl}`,\r\n            operationID: uuid(),\r\n            logger: anonymousLogger(),\r\n            // Filled in by VerifyAppServerAuthToken.\r\n            platformApplicationID: undefined,\r\n          },\r\n          next,\r\n        )\r\n      : next(),\r\n  responseTime((req, res, time) => {\r\n    const request = req as Request;\r\n    const { appID, body, query, headers } = request;\r\n\r\n    if (appID) {\r\n      const route = `${request.method} ${request.route?.path}`;\r\n\r\n      const cordSource =\r\n        headers['x-cord-source'] && typeof headers['x-cord-source'] === 'string'\r\n          ? headers['x-cord-source']\r\n          : '';\r\n\r\n      if (cordSource === 'cli') {\r\n        const md = `*${route}* called from app: <${ADMIN_ORIGIN}/applications/${appID}|${appID}>`;\r\n        void sendMessageToCord(md, undefined, 'cli-events');\r\n      }\r\n\r\n      restApiCalls.inc({\r\n        route,\r\n        appID,\r\n        statusCode: res.statusCode,\r\n        cordSource,\r\n      });\r\n\r\n      // update prometheus metric (prometheus values are in seconds not ms)\r\n      restApiCallExecTime.observe({ route, appID }, time / 1000);\r\n    }\r\n\r\n    const operationID = asyncLocalStorage?.getStore()?.operationID;\r\n\r\n    anonymousLogger().debug('Platform', {\r\n      appID,\r\n      headers,\r\n      endpoint: `${req.method} ${req.url}`,\r\n      statusCode: res.statusCode,\r\n      duration: time,\r\n      payload: body,\r\n      query,\r\n      ...(operationID && { operationID }),\r\n    });\r\n  }),\r\n);\r\n\r\nMainRouter.post('/v1/authorize', APIAuthorizeHandler);\r\n\r\nMainRouter.get('/v1/verify', VerifyAppServerAuthToken, ApplicationTokenHandler);\r\n\r\n// Organizations routes (deprecated - renamed groups, see below)\r\n// These paths should continue to work, however success/error messages\r\n// will now refer to 'group' rather than 'organization'\r\nMainRouter.use('/v1/organizations', (req, _res, next) => {\r\n  deprecated('api: /v1/organizations', req.appID);\r\n  next();\r\n});\r\n\r\nMainRouter.get(\r\n  '/v1/organizations',\r\n  VerifyAppServerAuthToken,\r\n  ListPlatformOrganizationsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/organizations/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  GetPlatformOrganizationHandler,\r\n);\r\nMainRouter.post(\r\n  '/v1/organizations',\r\n  VerifyAppServerAuthToken,\r\n  CreatePlatformOrganizationsHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/organizations/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  UpdatePlatformOrganizationsHandler,\r\n);\r\nMainRouter.delete(\r\n  '/v1/organizations/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  DeletePlatformOrganizationsHandler,\r\n);\r\n\r\nMainRouter.post(\r\n  '/v1/organizations/:orgID/members',\r\n  VerifyAppServerAuthToken,\r\n  UpdatePlatformOrganizationMembersHandler,\r\n);\r\n\r\n// Groups routes\r\nMainRouter.get(\r\n  '/v1/groups',\r\n  VerifyAppServerAuthToken,\r\n  ListPlatformOrganizationsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/groups/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  GetPlatformOrganizationHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/groups/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  UpdatePlatformOrganizationsHandler,\r\n);\r\nMainRouter.delete(\r\n  '/v1/groups/:orgID',\r\n  VerifyAppServerAuthToken,\r\n  DeletePlatformOrganizationsHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  '/v1/groups/:orgID/members',\r\n  VerifyAppServerAuthToken,\r\n  ListPlatformOrganizationMembersHandler,\r\n);\r\n\r\nMainRouter.post(\r\n  '/v1/groups/:orgID/members',\r\n  VerifyAppServerAuthToken,\r\n  UpdatePlatformOrganizationMembersHandler,\r\n);\r\n\r\n// Users routes\r\nMainRouter.get('/v1/users', VerifyAppServerAuthToken, ListPlatformUsersHandler);\r\nMainRouter.get(\r\n  '/v1/users/:userID',\r\n  VerifyAppServerAuthToken,\r\n  GetPlatformUserHandler,\r\n);\r\nMainRouter.post(\r\n  '/v1/users',\r\n  VerifyAppServerAuthToken,\r\n  CreatePlatformUserHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/users/:userID',\r\n  VerifyAppServerAuthToken,\r\n  UpdatePlatformUserHandler,\r\n);\r\n\r\n// User Presence\r\nMainRouter.put(\r\n  '/v1/users/:userID/presence',\r\n  VerifyAppServerAuthToken,\r\n  UpdateUserPresenceHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  '/v1/users/:userID/preferences',\r\n  VerifyAppServerAuthToken,\r\n  ListUserPreferencesHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/users/:userID/preferences',\r\n  VerifyAppServerAuthToken,\r\n  UpdateUserPreferencesHandler,\r\n);\r\n\r\nMainRouter.delete(\r\n  '/v1/users/:userID',\r\n  VerifyAppServerAuthToken,\r\n  DeletePlatformUserDataHandler,\r\n);\r\n\r\n// Threads & Messages\r\nMainRouter.get('/v1/threads', VerifyAppServerAuthToken, ListThreadsHandler);\r\nMainRouter.post('/v1/threads', VerifyAppServerAuthToken, CreateThreadHandler);\r\nMainRouter.get(\r\n  '/v1/threads/:threadID/messages/:messageID',\r\n  VerifyAppServerAuthToken,\r\n  GetThreadMessageHandler,\r\n);\r\nMainRouter.post(\r\n  '/v1/threads/:threadID/messages',\r\n  VerifyAppServerAuthToken,\r\n  CreateThreadMessageHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/threads/:threadID/messages/:messageID',\r\n  VerifyAppServerAuthToken,\r\n  UpdateThreadMessageHandler,\r\n);\r\nMainRouter.post(\r\n  '/v1/threads/:threadID/messages/:messageID/append',\r\n  VerifyAppServerAuthToken,\r\n  AppendMessageHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/threads/:threadID/messages',\r\n  VerifyAppServerAuthToken,\r\n  ListThreadMessagesHandler,\r\n);\r\nMainRouter.delete(\r\n  '/v1/threads/:threadID/messages/:messageID',\r\n  VerifyAppServerAuthToken,\r\n  DeleteThreadMessageHandler,\r\n);\r\nMainRouter.get('/v1/messages', VerifyAppServerAuthToken, ListMessagesHandler);\r\n\r\n// Notifications\r\nMainRouter.post(\r\n  '/v1/notifications',\r\n  VerifyAppServerAuthToken,\r\n  CreateNotificationHandler,\r\n);\r\nMainRouter.delete(\r\n  '/v1/notifications/:notificationID',\r\n  VerifyAppServerAuthToken,\r\n  DeleteNotificationHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/users/:userID/notifications',\r\n  VerifyAppServerAuthToken,\r\n  ListNotificationsHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  '/v1/threads/:threadID',\r\n  VerifyAppServerAuthToken,\r\n  GetThreadHandler,\r\n);\r\nMainRouter.put(\r\n  '/v1/threads/:threadID',\r\n  VerifyAppServerAuthToken,\r\n  UpdateThreadHandler,\r\n);\r\nMainRouter.delete(\r\n  '/v1/threads/:threadID',\r\n  VerifyAppServerAuthToken,\r\n  DeleteThreadHandler,\r\n);\r\n\r\n// File routes\r\nMainRouter.post(\r\n  '/v1/files',\r\n  VerifyAppServerAuthToken,\r\n  uploadedFiles.single('file'),\r\n  CreateFileHandler,\r\n);\r\n\r\n// Appications (aka. Projects) routes\r\nMainRouter.get(\r\n  ['/v1/applications', '/v1/projects'],\r\n  VerifyCustomerServerAuthToken,\r\n  ListApplicationsHandler,\r\n);\r\nMainRouter.get(\r\n  ['/v1/applications/:appID', '/v1/projects/:appID'],\r\n  VerifyCustomerServerAuthToken,\r\n  GetApplicationHandler,\r\n);\r\nMainRouter.post(\r\n  ['/v1/applications', '/v1/projects'],\r\n  VerifyCustomerServerAuthToken,\r\n  CreateApplicationHandler,\r\n);\r\nMainRouter.put(\r\n  ['/v1/applications/:appID', '/v1/projects/:appID'],\r\n  VerifyCustomerServerAuthToken,\r\n  UpdateApplicationHandler,\r\n);\r\nMainRouter.delete(\r\n  ['/v1/applications/:appID', '/v1/projects/:appID'],\r\n  VerifyCustomerServerAuthToken,\r\n  DeleteApplicationHandler,\r\n);\r\n\r\n// Webhook subscription routes within applications\r\nMainRouter.post(\r\n  ['/v1/applications/:appID/webhooks', '/v1/projects/:appID/webhooks'],\r\n  VerifyAppServerAuthToken,\r\n  CreateWebhookHandler,\r\n);\r\nMainRouter.delete(\r\n  [\r\n    '/v1/applications/:appID/webhooks/:webhookID',\r\n    '/v1/projects/:appID/webhooks/:webhookID',\r\n  ],\r\n  VerifyAppServerAuthToken,\r\n  DeleteWebhookHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  '/v1/customer/dbdump',\r\n  VerifyCustomerServerAuthToken,\r\n  GetDbDumpHandler,\r\n);\r\nMainRouter.get(\r\n  `/v1/customer/copyfiles`,\r\n  VerifyCustomerServerAuthToken,\r\n  CopyFilesHandler,\r\n);\r\n\r\n// Client-token routes to replicate JS APIs for SSR\r\nMainRouter.get(\r\n  '/v1/client/viewer',\r\n  RequestContextMiddleware,\r\n  ClientGetViewerHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/user/:userID',\r\n  RequestContextMiddleware,\r\n  ClientGetUserHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/users',\r\n  RequestContextMiddleware,\r\n  ClientGetUsersHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/threads',\r\n  RequestContextMiddleware,\r\n  ClientGetThreadsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/thread/:threadID',\r\n  RequestContextMiddleware,\r\n  ClientGetThreadHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/threadCounts',\r\n  RequestContextMiddleware,\r\n  ClientGetThreadCountsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/message/:messageID',\r\n  RequestContextMiddleware,\r\n  ClientGetMessageHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/notifications',\r\n  RequestContextMiddleware,\r\n  ClientGetNotificationsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/notificationCounts',\r\n  RequestContextMiddleware,\r\n  ClientGetNotificationCountsHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/groupMembers/:groupID',\r\n  RequestContextMiddleware,\r\n  ClientGetGroupMembersHandler,\r\n);\r\nMainRouter.get(\r\n  '/v1/client/presence',\r\n  RequestContextMiddleware,\r\n  ClientGetPresenceHandler,\r\n);\r\n\r\n// Experimental routes\r\nMainRouter.post(\r\n  '/v1/experimental/permissions',\r\n  VerifyAppServerAuthToken,\r\n  ExperimentalPlatformPermissionHandlers.create,\r\n);\r\nMainRouter.delete(\r\n  '/v1/experimental/permissions/:ruleID',\r\n  VerifyAppServerAuthToken,\r\n  ExperimentalPlatformPermissionHandlers.delete,\r\n);\r\n\r\nMainRouter.post('/v1/batch', VerifyAppServerAuthToken, PlatformBatchHandler);\r\n\r\n// Customer specific endpoints\r\nMainRouter.post(\r\n  '/v1/thoughtspot/application_migration',\r\n  VerifyCustomerServerAuthToken,\r\n  ThoughtspotApplicationMigrationHandler,\r\n);\r\n\r\nMainRouter.get(\r\n  '/v1/community/users/:userID',\r\n  VerifyAppServerAuthToken,\r\n  CommunityGetUserHandler,\r\n);\r\n\r\n// Error handler\r\nMainRouter.use('/v1', PlatformErrorHandler);\r\n\r\n// Performance profiling\r\nMainRouter.get('/cpu-profile', RequestContextMiddleware, writeOutCPUProfile);\r\nMainRouter.get('/heap-snapshot', RequestContextMiddleware, takeHeapSnapshot);\r\n\r\n// Route suggested in the console for testing the notification URI payload\r\nMainRouter.get('/debug/redirect-uri', NotificationRedirectURIHandler);\r\n\r\nMainRouter.post(\r\n  '/playground-token',\r\n  cors({\r\n    origin: [DOCS_ORIGIN, ...TEMPORARY_V5_CORD_DOT_COM_ORIGINS, TOP_ORIGIN],\r\n    optionsSuccessStatus: 200,\r\n  }),\r\n  deprecatedFunction(GetDemoAppsSignedTokenHandler, 'api: /playground-token'),\r\n);\r\n\r\nMainRouter.post(\r\n  '/demo-apps-token',\r\n  cors({\r\n    origin: [DOCS_ORIGIN, ...TEMPORARY_V5_CORD_DOT_COM_ORIGINS, TOP_ORIGIN],\r\n    optionsSuccessStatus: 200,\r\n  }),\r\n  GetDemoAppsSignedTokenHandler,\r\n);\r\n\r\nMainRouter.post('/sample-token', GetSampleSignedTokenHandler);\r\n\r\nMainRouter.post(\r\n  '/docs-sample-token',\r\n  cors({\r\n    origin: [DOCS_ORIGIN, /https:\\/\\/pr\\d+-docs\\.dev\\.cord\\.com$/],\r\n    optionsSuccessStatus: 200,\r\n  }),\r\n  GetDocsSampleSignedTokenHandler,\r\n);\r\n\r\n// Not currently in use: 'warm' demo user for quicker startup in demo apps.  We\r\n// didn't end up adding this for the new cord.com but may look to add it in at\r\n// some point\r\nMainRouter.get(\r\n  '/demo-token',\r\n  cors({\r\n    origin: [\r\n      DOCS_ORIGIN,\r\n      MARKETING_ORIGIN,\r\n      ...TEMPORARY_V5_CORD_DOT_COM_ORIGINS,\r\n    ],\r\n    optionsSuccessStatus: 200,\r\n  }),\r\n  DemoUserHandler,\r\n);\r\n\r\n// Auth0 logs\r\nMainRouter.post('/logs/auth0', Auth0LogsHandler);\r\n\r\nif (env.INCLUDE_SDK_TESTBED) {\r\n  MainRouter.get('/sdk/test/tokens', TestbedTokensHandler);\r\n}\r\n\r\n// CLI\r\nMainRouter.get('/v1/cli-version', CliVersionHandler);\r\n\r\n// Stripe webhooks\r\nMainRouter.post('/stripe/webhook', StripeWebhookHandler);\r\n\r\nexport default MainRouter;\r\n", "import type { Request, Response } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport type { Transaction } from 'sequelize';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport {\r\n  assertTransactionIsSerializable,\r\n  serializableTransactionWithRetries,\r\n} from 'server/src/entity/sequelize.ts';\r\nimport type { CreateThreadVariables } from '@cord-sdk/api-types';\r\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\r\nimport { publishNewThreadEvents } from 'server/src/entity/thread/new_thread_tasks/publishNewThreadEvents.ts';\r\n\r\nasync function CreateThreadHandler(req: Request, res: Response) {\r\n  const {\r\n    id: externalID,\r\n    groupID,\r\n    url,\r\n    name,\r\n    location,\r\n    metadata,\r\n    extraClassnames,\r\n    addSubscribers,\r\n    ...rest\r\n  } = validate.CreateThreadVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n  if (!app) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID: groupID,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('group_not_found');\r\n  }\r\n\r\n  const viewer = Viewer.createOrgViewer(org.id, platformApplicationID);\r\n\r\n  const thread =\r\n    // We use SERIALIZABLE here because it's needed to ensure the threads and\r\n    // preallocated_thread_ids tables remain consistent, see thread_by_external_id.ts\r\n    await serializableTransactionWithRetries(async (transaction) => {\r\n      const { thread: newThread } = await createThread({\r\n        id: externalID,\r\n        url,\r\n        location,\r\n        name,\r\n        metadata,\r\n        extraClassnames,\r\n        addSubscribers,\r\n        transaction,\r\n        viewer,\r\n        platformApplicationID,\r\n      });\r\n\r\n      await publishNewThreadEvents(location, newThread, transaction);\r\n\r\n      return newThread;\r\n    });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Thread created.',\r\n    threadID: thread.externalID,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(CreateThreadHandler);\r\n\r\nexport async function createThread({\r\n  platformApplicationID,\r\n  id: externalID,\r\n  url,\r\n  location,\r\n  name,\r\n  metadata,\r\n  extraClassnames,\r\n  addSubscribers,\r\n  transaction,\r\n  viewer,\r\n  ...rest\r\n}: Omit<CreateThreadVariables, 'groupID'> & {\r\n  platformApplicationID: string;\r\n  transaction: Transaction;\r\n  viewer: Viewer;\r\n}) {\r\n  await assertTransactionIsSerializable(transaction);\r\n  // Check that all properties in CreateThreadVariables are destructured\r\n  const _: Record<string, never> = rest;\r\n  if (externalID) {\r\n    validateExternalID(externalID, 'id');\r\n\r\n    const existingThread = await ThreadEntity.findOne({\r\n      where: {\r\n        externalID,\r\n        platformApplicationID,\r\n      },\r\n      transaction,\r\n    });\r\n\r\n    if (existingThread) {\r\n      throw new ApiCallerError('thread_already_exists');\r\n    }\r\n  }\r\n  const { page } = await new PageMutator(viewer).getPageCreateIfNotExists(\r\n    { data: location, providerID: null },\r\n    transaction,\r\n  );\r\n  const threadIDEntity = externalID\r\n    ? await PreallocatedThreadIDEntity.findOne({\r\n        where: {\r\n          platformApplicationID,\r\n          externalID,\r\n        },\r\n        transaction,\r\n      })\r\n    : undefined;\r\n\r\n  const thread = await new ThreadMutator(viewer, null).createThreadOnPage(\r\n    threadIDEntity?.id ?? uuid(),\r\n    url,\r\n    page,\r\n    name,\r\n    transaction,\r\n    platformApplicationID,\r\n    externalID ?? null,\r\n    metadata,\r\n    extraClassnames ?? undefined,\r\n    addSubscribers,\r\n  );\r\n\r\n  return { thread, page };\r\n}\r\n", "import isUUID from 'validator/lib/isUUID.js';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\n// This file contains utilities for handling \"external IDs\", which are IDs that\r\n// our partners supply us to identify objects that they created.  We allow them\r\n// to use mostly arbitrary strings for this, since how they identify objects can\r\n// vary in lots of ways.  Any time an ID appears in an API, it should be an\r\n// external ID.\r\n//\r\n// There are some cases where a partner might get access to an object that they\r\n// didn't create (eg, they have a thread list which contains both threads they\r\n// created and threads created via a sidebar component), in which case we need\r\n// to supply them with an ID.  We call these \"externalized IDs\", which are our\r\n// internal IDs (generally our normal UUIDs) with a \"cord:\" prefix.  We disallow\r\n// \"cord:\"-prefixed values as external IDs, so that it's unambiguous which kind\r\n// of ID it is when we see one.\r\n//\r\n// When creating an object, just check isValidExternalID.\r\n//\r\n// When reading an object, the general pattern is:\r\n//\r\n// if (isExternalizedID(id)) {\r\n//   readByID(extractInternalID(id));\r\n// } else if (!isValidExternalID(id)) {\r\n//   throw new Error(\"Invalid identifier\");\r\n// } else {\r\n//   readByExternalID(id);\r\n// }\r\n\r\n// emails can be up to 320 chars long\r\nconst MAX_EXTERNAL_ID_LENGTH = 320;\r\nconst ID_TO_EXTERNAL_ID_PREFIX = 'cord:';\r\n\r\nexport function isValidExternalID(id: string | number): boolean {\r\n  const stringifiedID = id.toString();\r\n\r\n  // This counts the number of Unicode characters, whereas id.length reports the\r\n  // number of UTF-16 code units; see\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\r\n  const charLength = [...stringifiedID].length;\r\n  if (charLength <= 0 || MAX_EXTERNAL_ID_LENGTH < charLength) {\r\n    return false;\r\n  }\r\n  // Don't allow external IDs that could be confused with our\r\n  // internal-ID-as-external-ID strings\r\n  if (stringifiedID.startsWith(ID_TO_EXTERNAL_ID_PREFIX)) {\r\n    return false;\r\n  }\r\n  // Don't allow any values from the \"Other\" Unicode category (control\r\n  // characters, private use characters, unassigned code points, etc)\r\n  if (stringifiedID.match(/\\p{C}/u)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function externalizeID(id: UUID): string {\r\n  return `${ID_TO_EXTERNAL_ID_PREFIX}${id}`;\r\n}\r\n\r\nexport function isExternalizedID(externalID: string): boolean {\r\n  return (\r\n    externalID.startsWith(ID_TO_EXTERNAL_ID_PREFIX) &&\r\n    isUUID.default(externalID.substring(ID_TO_EXTERNAL_ID_PREFIX.length))\r\n  );\r\n}\r\n\r\nexport function extractInternalID(externalizedID: string): UUID | null {\r\n  if (!isExternalizedID(externalizedID)) {\r\n    return null;\r\n  }\r\n  return externalizedID.substring(ID_TO_EXTERNAL_ID_PREFIX.length);\r\n}\r\n", "import { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport type { ClientAuthTokenData } from '@cord-sdk/types';\r\nimport {\r\n  createInvalidInputTypeMessage,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport function validateExternalID(id: string | number, fieldName: string) {\r\n  if (!isValidExternalID(id)) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: createInvalidInputTypeMessage(fieldName, 'identifier'),\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Same items within ClientAuthTokenData but user_id and group_id are type\r\n * string, app_id is required, and the organization_* fields have been removed (will be moved into\r\n * group_* if present)\r\n */\r\nexport type InternalClientAuthTokenData = Omit<\r\n  ClientAuthTokenData,\r\n  'user_id' | 'organization_id' | 'group_id' | 'organization_details' | 'app_id'\r\n> & {\r\n  user_id: string;\r\n  group_id?: string;\r\n  app_id: string;\r\n};\r\n", "import Ajv from 'ajv';\r\nimport type { ErrorObject, DefinedError, AnySchema } from 'ajv';\r\nimport { fullFormats } from 'ajv-formats/dist/formats.js';\r\nimport addFormat from 'ajv-formats';\r\nimport { schema } from '@cord-sdk/api-types';\r\nimport type {\r\n  ClientAuthTokenData,\r\n  Types,\r\n  UpdatePlatformUserVariables,\r\n} from '@cord-sdk/api-types';\r\n\r\nimport type { PlatformErrorNameType } from 'server/src/public/routes/platform/util.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\ntype TypeKey = keyof Types;\r\n\r\nconst ajv = new Ajv.default({\r\n  allErrors: true,\r\n  coerceTypes: false,\r\n  useDefaults: false,\r\n  allowUnionTypes: true,\r\n  keywords: ['propertyOrder'], // as propertyOrder is not a default key in json schemas and so crashes as we're running on strict mode\r\n  verbose: true, // Include the reference to the part of the schema (schema and parentSchema) and validated data in errors\r\n});\r\n\r\naddFormat.default(ajv, ['date-time', 'uri', 'uuid']);\r\n\r\n// This overrides the email format in ajv to also accept empty strings\r\najv.addFormat('email', {\r\n  validate: (data: any) => {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n    return data.match(fullFormats['email']);\r\n  },\r\n});\r\n\r\ntype InputWithFields = {\r\n  [instancePath: string]: { input: string | null; fields: string[] };\r\n};\r\n\r\nfunction getErrorMessage(typeName: TypeKey, errors: ErrorObject[]) {\r\n  const errorMessages: string[] = [];\r\n  const requiredFieldErrors: InputWithFields = {};\r\n  const additionalFieldErrors: InputWithFields = {};\r\n  // DefinedError is a type for all pre-defined keywords errors\r\n  // as we have no user defined keywords we can use DefinedErrors\r\n  for (const error of errors as DefinedError[]) {\r\n    const field = error.instancePath.slice(1); // removing the forward slash if instance path exists\r\n    const schemaPath = error.schemaPath;\r\n\r\n    // We don't want to go through each case of the anyOf\r\n    if (schemaPath.includes('anyOf') && error.keyword !== 'anyOf') {\r\n      continue;\r\n    }\r\n\r\n    const errorData = JSON.stringify(error.data);\r\n    // to add more error types https://ajv.js.org/api.html#error-parameters\r\n    switch (error.keyword) {\r\n      case 'required': {\r\n        const instancePath = error.instancePath;\r\n        if (!requiredFieldErrors[instancePath]) {\r\n          requiredFieldErrors[instancePath] = { input: null, fields: [] };\r\n          requiredFieldErrors[instancePath]['input'] = errorData;\r\n        }\r\n        requiredFieldErrors[instancePath]['fields'].push(\r\n          error.params.missingProperty,\r\n        );\r\n        break;\r\n      }\r\n      case 'type': {\r\n        let params: string;\r\n        if (Array.isArray(error.params.type)) {\r\n          params = error.params.type.join(' or ');\r\n        } else {\r\n          params = error.params.type;\r\n        }\r\n        errorMessages.push(\r\n          `Input ${errorData} for ${field} must be type ${params}`,\r\n        );\r\n        break;\r\n      }\r\n      case 'format':\r\n      case 'minLength':\r\n      case 'maxLength':\r\n        errorMessages.push(`Input ${errorData} for ${field} ${error.message}`);\r\n        break;\r\n      case 'additionalProperties': {\r\n        const instancePath = error.instancePath;\r\n        if (!additionalFieldErrors[instancePath]) {\r\n          additionalFieldErrors[instancePath] = { input: null, fields: [] };\r\n          additionalFieldErrors[instancePath]['input'] = errorData;\r\n        }\r\n        additionalFieldErrors[instancePath]['fields'].push(\r\n          error.params.additionalProperty,\r\n        );\r\n        break;\r\n      }\r\n      case 'enum':\r\n        errorMessages.push(\r\n          `Input ${errorData} for ${field} ${\r\n            error.message\r\n          }: ${error.params.allowedValues.join(' or ')}`,\r\n        );\r\n        break;\r\n      case 'anyOf':\r\n        errorMessages.push(\r\n          `Input ${errorData} for ${field} must match one of: ${decodeSchema(\r\n            error.schema,\r\n          )}`,\r\n        );\r\n        break;\r\n      case 'maxItems': {\r\n        if (Array.isArray(error.data)) {\r\n          errorMessages.push(\r\n            `Input has ${error.data.length} items and ${error.message}`,\r\n          );\r\n        } else {\r\n          errorMessages.push(`${field} ${error.message}`);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        errorMessages.push(`Input ${errorData} for ${field} ${error.message}`);\r\n        break;\r\n    }\r\n  }\r\n  // We compile messages with list of fields that are required\r\n  Object.values(requiredFieldErrors).forEach((requiredFieldError) => {\r\n    const errorMessage = generateFieldsMessageWithInput(\r\n      requiredFieldError,\r\n      'required',\r\n    );\r\n\r\n    if (errorMessage) {\r\n      errorMessages.push(errorMessage);\r\n    }\r\n  });\r\n\r\n  // We compile messages with a list of fields that are invalid\r\n  Object.values(additionalFieldErrors).map((additionalFieldError) => {\r\n    const errorMessage = generateFieldsMessageWithInput(\r\n      additionalFieldError,\r\n      'unexpected',\r\n    );\r\n\r\n    if (errorMessage) {\r\n      errorMessages.push(errorMessage);\r\n    }\r\n  });\r\n\r\n  const schemaDescription = getSchemaDescription(typeName);\r\n\r\n  return `Invalid ${typeName}:\\n${errorMessages.join(',\\n')}.${\r\n    schemaDescription ?? ''\r\n  }`;\r\n}\r\n\r\nexport const validate = Object.fromEntries(\r\n  (Object.keys(schema) as TypeKey[]).map((typeName) => {\r\n    const typeSchema = schema[typeName];\r\n    const validator = ajv.compile<Types[TypeKey]>(typeSchema);\r\n\r\n    const isClientAuthTokenData = typeName === 'ClientAuthTokenData';\r\n\r\n    const errorName: PlatformErrorNameType = isClientAuthTokenData\r\n      ? 'invalid_session_token'\r\n      : 'invalid_request';\r\n\r\n    const code = isClientAuthTokenData ? 401 : 400;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    function validate(value: any) {\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      const schemaDescription = getSchemaDescription(typeName);\r\n      const isObject =\r\n        value && typeof value === 'object' && !Array.isArray(value);\r\n      if (!isObject) {\r\n        throw new ApiCallerError(errorName, {\r\n          message:\r\n            `Invalid ${typeName}:\\n` +\r\n            'Expected JSON object.' +\r\n            `${schemaDescription ?? ''}`,\r\n          code,\r\n        });\r\n      }\r\n\r\n      if (validator(value)) {\r\n        return value;\r\n      }\r\n\r\n      if (validator.errors && validator.errors.length) {\r\n        const message = getErrorMessage(typeName, validator.errors);\r\n        throw new ApiCallerError(errorName, {\r\n          message,\r\n          code,\r\n        });\r\n      } else {\r\n        // When `valid` is false, `validator.errors` should always contain one or more\r\n        // errors. If not, we still need to throw *some* error.\r\n        throw new ApiCallerError('invalid_request', {\r\n          message: 'Invalid request',\r\n        });\r\n      }\r\n    }\r\n\r\n    return [typeName, validate] as const;\r\n  }),\r\n) as { [T in TypeKey]: (value: unknown) => Types[T] };\r\n\r\nexport function getSchemaDescription(typeName: TypeKey) {\r\n  const schemaByType = schema[typeName];\r\n  if (!('description' in schemaByType)) {\r\n    return null;\r\n  }\r\n\r\n  if (typeof schemaByType.description !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  return `\\nRefer to ${schemaByType.description}`;\r\n}\r\n\r\nfunction generateFieldsMessageWithInput(\r\n  data: InputWithFields[keyof InputWithFields],\r\n  type: 'required' | 'unexpected',\r\n) {\r\n  if (!data.input) {\r\n    return null;\r\n  }\r\n\r\n  if (data.fields.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  if (type === 'unexpected') {\r\n    return `Input ${data.input} has unexpected ${generateFieldsListToString(\r\n      data.fields,\r\n    )}`;\r\n  }\r\n  return `Input ${data.input} requires ${generateFieldsListToString(\r\n    data.fields,\r\n  )}`;\r\n}\r\n\r\nfunction generateFieldsListToString(fields: string[]) {\r\n  let fieldsString = '';\r\n  if (fields.length === 0) {\r\n    return '';\r\n  }\r\n  if (fields.length === 1) {\r\n    fieldsString = `field: ${fields[0]}`;\r\n  }\r\n  if (fields.length > 1) {\r\n    fieldsString = `fields: ${fields.slice(0, -1).join(', ')} and ${fields\r\n      .slice(-1)\r\n      .join('')}`;\r\n  }\r\n  return fieldsString;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\nfunction decodeSchema(schema?: AnySchema[]) {\r\n  const message: string[] = [];\r\n  if (!schema) {\r\n    return '';\r\n  }\r\n\r\n  schema?.map((schemaItem) => {\r\n    if (typeof schemaItem !== 'boolean') {\r\n      const item = schemaItem.format ?? schemaItem.type ?? '';\r\n      message.push(item.toString());\r\n    }\r\n  });\r\n\r\n  return message.join(', ');\r\n}\r\n\r\ntype InputDataWithEmail = UpdatePlatformUserVariables | ClientAuthTokenData;\r\n\r\nexport function removeEmptyStringEmailIfExists<T extends InputDataWithEmail>(\r\n  data: T,\r\n): T | Exclude<T, 'email'> {\r\n  const dataCopy = { ...data };\r\n  if ('email' in dataCopy && dataCopy.email === '') {\r\n    delete dataCopy.email;\r\n    return dataCopy;\r\n  }\r\n\r\n  if (\r\n    'user_details' in dataCopy &&\r\n    dataCopy['user_details'] &&\r\n    'email' in dataCopy.user_details &&\r\n    dataCopy.user_details.email === ''\r\n  ) {\r\n    delete dataCopy.user_details.email;\r\n    return dataCopy;\r\n  }\r\n\r\n  return data;\r\n}\r\n", "// @generated\r\nexport default {\r\n  CreateApplicationVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/applications/',\r\n    type: 'object',\r\n    properties: {\r\n      emailSettings: { $ref: '#/definitions/Partial<EmailSettings>' },\r\n      name: {\r\n        description: 'Name of the project',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'URL for the project icon. It should be a square image of 256x256. This\\nwill be used as the avatar for messages and emails coming from your\\nproject.  If not specified, the Cord logo will be used.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      eventWebhookURL: {\r\n        description: 'The URL that the events webhook is sent to',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      redirectURI: {\r\n        description:\r\n          'Custom url link contained in email and slack notifications. These notifications are sent when a user is\\nmentioned or thread is shared and by default, the link points to the page where the conversation happened.\\nFor more information, please refer to the [API docs](/customization/redirect-link)',\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'emailSettings',\r\n      'name',\r\n      'iconURL',\r\n      'eventWebhookURL',\r\n      'redirectURI',\r\n    ],\r\n    required: ['name'],\r\n    definitions: {\r\n      'Partial<EmailSettings>': {\r\n        type: 'object',\r\n        properties: {\r\n          name: {\r\n            description:\r\n              \"Name to show in both the subject and the body of the email.\\nDefaults to your project's name.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          imageURL: {\r\n            description:\r\n              'URL for your logo image. The default for this is the Cord logo.',\r\n            type: ['null', 'string'],\r\n          },\r\n          sender: {\r\n            description:\r\n              'Email from which notifications for your service will be sent from.\\nThis will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          logoConfig: {\r\n            description:\r\n              'Customization for your logo size. Providing either a height (maximum 120) or\\nwidth (maximum 240) will result in the image being proportionally resized to\\nfit in a container of that size. The default value is `{\"width\": 140}`.',\r\n            anyOf: [\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  width: { minimum: 0, maximum: 240, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['width'],\r\n                required: ['width'],\r\n              },\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  height: { minimum: 0, maximum: 120, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['height'],\r\n                required: ['height'],\r\n              },\r\n              { type: 'null' },\r\n            ],\r\n          },\r\n          enableEmailNotifications: {\r\n            description:\r\n              'Whether you want your users to receive notification emails. The default value is true.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'name',\r\n          'imageURL',\r\n          'sender',\r\n          'logoConfig',\r\n          'enableEmailNotifications',\r\n        ],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateApplicationVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/applications/',\r\n    type: 'object',\r\n    properties: {\r\n      emailSettings: { $ref: '#/definitions/Partial<EmailSettings>' },\r\n      name: {\r\n        description: 'Name of the project',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'URL for the project icon. It should be a square image of 256x256. This\\nwill be used as the avatar for messages and emails coming from your\\nproject.  If not specified, the Cord logo will be used.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      eventWebhookURL: {\r\n        description: 'The URL that the events webhook is sent to',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      redirectURI: {\r\n        description:\r\n          'Custom url link contained in email and slack notifications. These notifications are sent when a user is\\nmentioned or thread is shared and by default, the link points to the page where the conversation happened.\\nFor more information, please refer to the [API docs](/customization/redirect-link)',\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'emailSettings',\r\n      'name',\r\n      'iconURL',\r\n      'eventWebhookURL',\r\n      'redirectURI',\r\n    ],\r\n    definitions: {\r\n      'Partial<EmailSettings>': {\r\n        type: 'object',\r\n        properties: {\r\n          name: {\r\n            description:\r\n              \"Name to show in both the subject and the body of the email.\\nDefaults to your project's name.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          imageURL: {\r\n            description:\r\n              'URL for your logo image. The default for this is the Cord logo.',\r\n            type: ['null', 'string'],\r\n          },\r\n          sender: {\r\n            description:\r\n              'Email from which notifications for your service will be sent from.\\nThis will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          logoConfig: {\r\n            description:\r\n              'Customization for your logo size. Providing either a height (maximum 120) or\\nwidth (maximum 240) will result in the image being proportionally resized to\\nfit in a container of that size. The default value is `{\"width\": 140}`.',\r\n            anyOf: [\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  width: { minimum: 0, maximum: 240, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['width'],\r\n                required: ['width'],\r\n              },\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  height: { minimum: 0, maximum: 120, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['height'],\r\n                required: ['height'],\r\n              },\r\n              { type: 'null' },\r\n            ],\r\n          },\r\n          enableEmailNotifications: {\r\n            description:\r\n              'Whether you want your users to receive notification emails. The default value is true.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'name',\r\n          'imageURL',\r\n          'sender',\r\n          'logoConfig',\r\n          'enableEmailNotifications',\r\n        ],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  DeleteApplicationVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/applications/',\r\n    type: 'object',\r\n    properties: {\r\n      secret: {\r\n        description:\r\n          'Secret key of the project that you want to delete. This can be found\\nwithin the Cord Console.',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['secret'],\r\n    required: ['secret'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  BatchAPIVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/batch/',\r\n    type: 'object',\r\n    properties: {\r\n      users: {\r\n        description:\r\n          'List of user objects. Every object must include the id field. If the user\\nalready exists, all other fields are optional and only updated when\\npresent. If the user does not already exist, fields are required as\\ndescribed in the [Create or update a\\nuser](/rest-apis/users#Create-or-update-a-user)\\nAPI.',\r\n        maxItems: 10000,\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/BatchUpdateUser' },\r\n      },\r\n      organizations: {\r\n        maxItems: 1000,\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/BatchUpdateGroup' },\r\n      },\r\n      groups: {\r\n        description:\r\n          'List of group objects. Every object must include the id field. If\\nthe group already exists, all other fields are optional and only\\nupdated when present. If the group does not already exist, fields\\nare required as described in the [Create or update a\\ngroup](/rest-apis/groups/#create-or-update-a-group)\\nAPI.',\r\n        maxItems: 1000,\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/BatchUpdateGroup' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['users', 'organizations', 'groups'],\r\n    definitions: {\r\n      BatchUpdateUser: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          name: { description: 'Full user name', type: ['null', 'string'] },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          status: { enum: ['active', 'deleted'], type: 'string' },\r\n          email: {\r\n            description: 'Email address',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          shortName: {\r\n            description:\r\n              'Short user name. In most cases, this will be preferred over name when set.',\r\n            type: ['null', 'string'],\r\n          },\r\n          short_name: { type: ['null', 'string'] },\r\n          profilePictureURL: {\r\n            description:\r\n              \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          profile_picture_url: {\r\n            description:\r\n              'Alias for profilePictureURL. This field is deprecated.',\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          first_name: {\r\n            description:\r\n              \"User's first name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          last_name: {\r\n            description:\r\n              \"User's last name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          id: { $ref: '#/definitions/ID' },\r\n        },\r\n        required: ['id'],\r\n      },\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n      BatchUpdateGroup: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          name: {\r\n            description: 'Group name. Required when creating an group.',\r\n            type: 'string',\r\n          },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          status: {\r\n            description:\r\n              'Whether this group is active or deleted.  Attempting to log into a\\ndeleted group will fail.',\r\n            enum: ['active', 'deleted'],\r\n            type: 'string',\r\n          },\r\n          members: {\r\n            description:\r\n              'List of partner-specific IDs of the users who are members of this group.\\nThis will replace the existing members.',\r\n            type: 'array',\r\n            items: { $ref: '#/definitions/ID' },\r\n          },\r\n          id: { $ref: '#/definitions/ID' },\r\n        },\r\n        required: ['id'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateFileVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      ownerID: {\r\n        description:\r\n          'The ID of the user that owns the file.  Files can only be attached to\\nmessages authored by their owner.',\r\n        type: 'string',\r\n      },\r\n      name: {\r\n        description:\r\n          \"The name of the file.  This will be shown to the user when attached to a\\nmessage and will be the file's name if it's downloaded.  If not supplied,\\nit will be taken from the filename of the `file` parameter.\",\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['ownerID', 'name'],\r\n    required: ['ownerID'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateMessageVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/messages/',\r\n    type: 'object',\r\n    properties: {\r\n      addReactions: {\r\n        description:\r\n          'The reactions you want to add to this message.\\nThe default timestamp is the current time.\\nTrying to create a reaction that already exists for a user does nothing.\\nDoing the same as before with a timestamp will update the reaction with the new timestamp.\\nThe reaction users need to be an [active member of the group](/rest-apis/groups#Update-group-members) that the message and thread belong to.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ServerAddReactions' },\r\n      },\r\n      addAttachments: {\r\n        description:\r\n          'A list of attachments to add to the message.  The same file cannot be\\nattached to the same message multiple times.',\r\n        type: 'array',\r\n        items: {\r\n          type: 'object',\r\n          properties: {\r\n            type: {\r\n              description:\r\n                'The type of attachment.  This is `file` for file attachments.',\r\n              type: 'string',\r\n              const: 'file',\r\n            },\r\n            id: {\r\n              description:\r\n                'The ID of the file to attach.  This must have been previously uploaded via\\nthe [file API](/js-apis-and-hooks/file-api/uploadFile).',\r\n              type: 'string',\r\n            },\r\n          },\r\n          additionalProperties: false,\r\n          propertyOrder: ['type', 'id'],\r\n          required: ['id', 'type'],\r\n        },\r\n      },\r\n      createThread: {\r\n        description:\r\n          \"The parameters for creating a thread if the supplied thread doesn't exist\\nyet.  If the thread doesn't exist but `createThread` isn't provided, the\\ncall will generate an error.  This value is ignored if the thread already\\nexists.\",\r\n        $ref: '#/definitions/Omit<ServerCreateThread,\"id\">',\r\n      },\r\n      subscribeToThread: {\r\n        description:\r\n          \"Whether to subscribe the sender of the message to the thread, so that they\\nget notified about replies.  If not specified, defaults to `true`.  If\\nfalse, the user's subscription status will be left unchanged.\",\r\n        type: 'boolean',\r\n      },\r\n      content: {\r\n        $ref: '#/definitions/MessageContent',\r\n        description: 'The content of the message.',\r\n      },\r\n      authorID: {\r\n        description: 'The ID for the user that sent the message.',\r\n        type: 'string',\r\n      },\r\n      type: {\r\n        description:\r\n          'The type of message this is.  A `user_message` is a message that the author\\nsent.  An `action_message` is a message about something that happened, such\\nas the thread being resolved.  The default value is `user_message`.',\r\n        enum: ['action_message', 'user_message'],\r\n        type: 'string',\r\n      },\r\n      id: {\r\n        description:\r\n          'The ID for the message.  If a message is created with no ID, a random\\nUUID-based ID will be automatically created for it.',\r\n        type: 'string',\r\n      },\r\n      url: {\r\n        description:\r\n          \"A URL where the message can be seen.  This determines where a user is sent\\nwhen they click on a reference to this message, such as in a notification.\\nIf unset, it defaults to the thread's URL.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      createdTimestamp: {\r\n        description:\r\n          'The timestamp when this message was created.  The default value is the\\ncurrent time.',\r\n        type: 'string',\r\n        format: 'date-time',\r\n      },\r\n      extraClassnames: {\r\n        description:\r\n          'A optional space separated list of classnames to add to the message.',\r\n        type: ['null', 'string'],\r\n      },\r\n      updatedTimestamp: {\r\n        description:\r\n          'The timestamp when this message was last edited, if it ever was.  If unset,\\nthe message does not show as edited.',\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      deletedTimestamp: {\r\n        description:\r\n          'The timestamp when this message was deleted, if it was.  If unset, the\\nmessage is not deleted.',\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'The URL of the icon to show next to the message.  This is only used for\\n`action_message` messages; other messages show the avatar of the author.\\nIf an `action_message` does not have an icon set, no icon is shown.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      translationKey: {\r\n        description:\r\n          'An optional translation key used for this message.  This is useful for\\nsystem-generated messages where you might want to translate or customize\\nthem at runtime.  See [the translations\\ndocumentation](/customization/translations) for more\\ninformation.',\r\n        type: ['null', 'string'],\r\n      },\r\n      skipLinkPreviews: {\r\n        description:\r\n          \"If set, Cord won't analyze links in the message to generate previews.\",\r\n        type: 'boolean',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'addReactions',\r\n      'addAttachments',\r\n      'createThread',\r\n      'subscribeToThread',\r\n      'content',\r\n      'authorID',\r\n      'type',\r\n      'id',\r\n      'url',\r\n      'metadata',\r\n      'createdTimestamp',\r\n      'extraClassnames',\r\n      'updatedTimestamp',\r\n      'deletedTimestamp',\r\n      'iconURL',\r\n      'translationKey',\r\n      'skipLinkPreviews',\r\n    ],\r\n    required: ['authorID', 'content'],\r\n    definitions: {\r\n      ServerAddReactions: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          reaction: { description: 'The emoji reaction.', type: 'string' },\r\n          userID: {\r\n            description: 'The ID of the user who reacted to the message.',\r\n            type: 'string',\r\n          },\r\n          timestamp: {\r\n            description: 'The timestamp of when the reaction was created.',\r\n            type: 'string',\r\n            format: 'date-time',\r\n          },\r\n        },\r\n        required: ['reaction', 'userID'],\r\n      },\r\n      'Omit<ServerCreateThread,\"id\">': {\r\n        type: 'object',\r\n        properties: {\r\n          location: {\r\n            description: 'The [location](/reference/location) of this thread.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          url: {\r\n            description:\r\n              \"A URL where the thread can be seen.  This determines where a user is sent\\nwhen they click on a reference to this thread, such as in a notification,\\nor if they click on a reference to a message in the thread and the message\\ndoesn't have its own URL.\",\r\n            type: 'string',\r\n          },\r\n          name: {\r\n            description:\r\n              'The name of the thread.  This is shown to users when the thread is\\nreferenced, such as in notifications.  This should generally be something\\nlike the page title.',\r\n            type: 'string',\r\n          },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          resolved: { type: 'boolean' },\r\n          organizationID: {\r\n            description: 'The organization ID this thread is in.',\r\n            type: 'string',\r\n          },\r\n          groupID: {\r\n            description: 'The group ID this thread is in.',\r\n            type: 'string',\r\n          },\r\n          extraClassnames: {\r\n            description:\r\n              'An optional space separated list of classnames to add to the thread.',\r\n            type: ['null', 'string'],\r\n          },\r\n          addSubscribers: {\r\n            description: 'A list of subscribers to add to this thread.',\r\n            type: 'array',\r\n            items: { type: 'string' },\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'location',\r\n          'url',\r\n          'name',\r\n          'metadata',\r\n          'resolved',\r\n          'organizationID',\r\n          'groupID',\r\n          'extraClassnames',\r\n          'addSubscribers',\r\n        ],\r\n        required: ['groupID', 'location', 'name', 'url'],\r\n      },\r\n      MessageAnyNode: {\r\n        anyOf: [\r\n          { $ref: '#/definitions/MessageAssigneeNode' },\r\n          { $ref: '#/definitions/MessageBulletNode' },\r\n          { $ref: '#/definitions/MessageCodeNode' },\r\n          { $ref: '#/definitions/MessageLinkNode' },\r\n          { $ref: '#/definitions/MessageMentionNode' },\r\n          { $ref: '#/definitions/MessageNumberBulletNode' },\r\n          { $ref: '#/definitions/MessageParagraphNode' },\r\n          { $ref: '#/definitions/MessageQuoteNode' },\r\n          { $ref: '#/definitions/MessageTextNode' },\r\n          { $ref: '#/definitions/MessageTodoNode' },\r\n          { $ref: '#/definitions/MessageMarkdownNode' },\r\n        ],\r\n      },\r\n      MessageAssigneeNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'assignee' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          user: {\r\n            type: 'object',\r\n            properties: { id: { type: 'string' } },\r\n            additionalProperties: false,\r\n            propertyOrder: ['id'],\r\n            required: ['id'],\r\n          },\r\n        },\r\n        required: ['children', 'type', 'user'],\r\n      },\r\n      MessageContent: {\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/MessageAnyNode' },\r\n      },\r\n      MessageBulletNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'bullet' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          indent: { type: 'number' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageCodeNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'code' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageLinkNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'link' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          url: { type: 'string' },\r\n        },\r\n        required: ['children', 'type', 'url'],\r\n      },\r\n      MessageMentionNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'mention' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          user: {\r\n            type: 'object',\r\n            properties: { id: { type: 'string' } },\r\n            additionalProperties: false,\r\n            propertyOrder: ['id'],\r\n            required: ['id'],\r\n          },\r\n        },\r\n        required: ['children', 'type', 'user'],\r\n      },\r\n      MessageNumberBulletNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'number_bullet' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          bulletNumber: { type: 'number' },\r\n          indent: { type: 'number' },\r\n        },\r\n        required: ['bulletNumber', 'children', 'type'],\r\n      },\r\n      MessageParagraphNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'p' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageQuoteNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'quote' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageTextNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: {\r\n            enum: [\r\n              'assignee',\r\n              'bullet',\r\n              'code',\r\n              'link',\r\n              'markdown',\r\n              'mention',\r\n              'number_bullet',\r\n              'p',\r\n              'quote',\r\n              'todo',\r\n            ],\r\n            type: 'string',\r\n          },\r\n          class: { type: 'string' },\r\n          text: { type: 'string' },\r\n          bold: { type: 'boolean' },\r\n          code: { type: 'boolean' },\r\n          italic: { type: 'boolean' },\r\n          underline: { type: 'boolean' },\r\n        },\r\n        required: ['text'],\r\n      },\r\n      MessageTodoNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'todo' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          todoID: { type: 'string' },\r\n          done: { type: 'boolean' },\r\n        },\r\n        required: ['children', 'done', 'todoID', 'type'],\r\n      },\r\n      MessageMarkdownNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'markdown' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateMessageVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/messages/',\r\n    type: 'object',\r\n    properties: {\r\n      deleted: {\r\n        description:\r\n          'Whether we want to mark this message as deleted. Setting this to `true` without\\nproviding a value for `deletedTimestamp` is equivalent to setting `deletedTimestamp` to current\\ntime and setting this to `false` is equivalent to setting `deletedTimestamp` to `null`.',\r\n        type: 'boolean',\r\n      },\r\n      deletedTimestamp: {\r\n        description:\r\n          \"The timestamp when this message was deleted, if it was. If set to null, the message is not deleted.\\nDeleting a message this way will only soft delete it, replacing the content of the message with a\\nrecord of the deletion on the frontend. If you'd like to permanently delete it instead, use the\\n[delete message endpoint](/rest-apis/messages#Delete-a-message).\",\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      removeReactions: {\r\n        description:\r\n          'The reactions you want to remove from this message.\\nRemoving a reaction that does not exist will have no effect and will not return an error.\\nAn error is returned if a reaction is both added and deleted in the same request.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ServerRemoveReactions' },\r\n      },\r\n      removeAttachments: {\r\n        description:\r\n          \"The attachments you want to remove from this message.  Removing an\\nattachment that doesn't exist has no effect and won't return an error.\\nAttempting to add and remove the same attachment in one request is an\\nerror.\",\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/RemoveAttachment' },\r\n      },\r\n      type: {\r\n        description:\r\n          'The type of message this is.  A `user_message` is a message that the author\\nsent.  An `action_message` is a message about something that happened, such\\nas the thread being resolved.  The default value is `user_message`.',\r\n        enum: ['action_message', 'user_message'],\r\n        type: 'string',\r\n      },\r\n      id: {\r\n        description:\r\n          'The ID for the message.  If a message is created with no ID, a random\\nUUID-based ID will be automatically created for it.',\r\n        type: 'string',\r\n      },\r\n      url: {\r\n        description:\r\n          \"A URL where the message can be seen.  This determines where a user is sent\\nwhen they click on a reference to this message, such as in a notification.\\nIf unset, it defaults to the thread's URL.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      content: {\r\n        description: 'The content of the message.',\r\n        $ref: '#/definitions/MessageContent',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      createdTimestamp: {\r\n        description:\r\n          'The timestamp when this message was created.  The default value is the\\ncurrent time.',\r\n        type: 'string',\r\n        format: 'date-time',\r\n      },\r\n      authorID: {\r\n        description: 'The ID for the user that sent the message.',\r\n        type: 'string',\r\n      },\r\n      extraClassnames: {\r\n        description:\r\n          'A optional space separated list of classnames to add to the message.',\r\n        type: ['null', 'string'],\r\n      },\r\n      updatedTimestamp: {\r\n        description:\r\n          'The timestamp when this message was last edited, if it ever was.  If unset,\\nthe message does not show as edited.',\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'The URL of the icon to show next to the message.  This is only used for\\n`action_message` messages; other messages show the avatar of the author.\\nIf an `action_message` does not have an icon set, no icon is shown.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      translationKey: {\r\n        description:\r\n          'An optional translation key used for this message.  This is useful for\\nsystem-generated messages where you might want to translate or customize\\nthem at runtime.  See [the translations\\ndocumentation](/customization/translations) for more\\ninformation.',\r\n        type: ['null', 'string'],\r\n      },\r\n      skipLinkPreviews: {\r\n        description:\r\n          \"If set, Cord won't analyze links in the message to generate previews.\",\r\n        type: 'boolean',\r\n      },\r\n      addReactions: {\r\n        description:\r\n          'The reactions you want to add to this message.\\nThe default timestamp is the current time.\\nTrying to create a reaction that already exists for a user does nothing.\\nDoing the same as before with a timestamp will update the reaction with the new timestamp.\\nThe reaction users need to be an [active member of the group](/rest-apis/groups#Update-group-members) that the message and thread belong to.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ServerAddReactions' },\r\n      },\r\n      addAttachments: {\r\n        description:\r\n          'A list of attachments to add to the message.  The same file cannot be\\nattached to the same message multiple times.',\r\n        type: 'array',\r\n        items: {\r\n          type: 'object',\r\n          properties: {\r\n            type: {\r\n              description:\r\n                'The type of attachment.  This is `file` for file attachments.',\r\n              type: 'string',\r\n              const: 'file',\r\n            },\r\n            id: {\r\n              description:\r\n                'The ID of the file to attach.  This must have been previously uploaded via\\nthe [file API](/js-apis-and-hooks/file-api/uploadFile).',\r\n              type: 'string',\r\n            },\r\n          },\r\n          additionalProperties: false,\r\n          propertyOrder: ['type', 'id'],\r\n          required: ['id', 'type'],\r\n        },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'deleted',\r\n      'deletedTimestamp',\r\n      'removeReactions',\r\n      'removeAttachments',\r\n      'type',\r\n      'id',\r\n      'url',\r\n      'content',\r\n      'metadata',\r\n      'createdTimestamp',\r\n      'authorID',\r\n      'extraClassnames',\r\n      'updatedTimestamp',\r\n      'iconURL',\r\n      'translationKey',\r\n      'skipLinkPreviews',\r\n      'addReactions',\r\n      'addAttachments',\r\n    ],\r\n    definitions: {\r\n      ServerRemoveReactions: {\r\n        type: 'object',\r\n        properties: {\r\n          reaction: { description: 'The emoji reaction.', type: 'string' },\r\n          userID: {\r\n            description: 'The ID of the user who reacted to the message.',\r\n            type: 'string',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['reaction', 'userID'],\r\n        required: ['reaction', 'userID'],\r\n      },\r\n      RemoveAttachment: {\r\n        anyOf: [\r\n          {\r\n            type: 'object',\r\n            properties: {\r\n              type: {\r\n                description:\r\n                  'The type of attachment to remove.  This is `file` for file attachments.',\r\n                type: 'string',\r\n                const: 'file',\r\n              },\r\n              id: {\r\n                description: 'The ID of the file attachment to remove.',\r\n                type: 'string',\r\n              },\r\n            },\r\n            additionalProperties: false,\r\n            propertyOrder: ['type', 'id'],\r\n            required: ['id', 'type'],\r\n          },\r\n          {\r\n            type: 'object',\r\n            properties: {\r\n              type: {\r\n                description:\r\n                  'The type of attachment to remove.  This is `link_preview` for link preview attachments.',\r\n                type: 'string',\r\n                const: 'link_preview',\r\n              },\r\n              id: {\r\n                description: 'The ID of the link preview attachment to remove.',\r\n                type: 'string',\r\n              },\r\n            },\r\n            additionalProperties: false,\r\n            propertyOrder: ['type', 'id'],\r\n            required: ['id', 'type'],\r\n          },\r\n        ],\r\n      },\r\n      MessageAnyNode: {\r\n        anyOf: [\r\n          { $ref: '#/definitions/MessageAssigneeNode' },\r\n          { $ref: '#/definitions/MessageBulletNode' },\r\n          { $ref: '#/definitions/MessageCodeNode' },\r\n          { $ref: '#/definitions/MessageLinkNode' },\r\n          { $ref: '#/definitions/MessageMentionNode' },\r\n          { $ref: '#/definitions/MessageNumberBulletNode' },\r\n          { $ref: '#/definitions/MessageParagraphNode' },\r\n          { $ref: '#/definitions/MessageQuoteNode' },\r\n          { $ref: '#/definitions/MessageTextNode' },\r\n          { $ref: '#/definitions/MessageTodoNode' },\r\n          { $ref: '#/definitions/MessageMarkdownNode' },\r\n        ],\r\n      },\r\n      MessageAssigneeNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'assignee' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          user: {\r\n            type: 'object',\r\n            properties: { id: { type: 'string' } },\r\n            additionalProperties: false,\r\n            propertyOrder: ['id'],\r\n            required: ['id'],\r\n          },\r\n        },\r\n        required: ['children', 'type', 'user'],\r\n      },\r\n      MessageContent: {\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/MessageAnyNode' },\r\n      },\r\n      MessageBulletNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'bullet' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          indent: { type: 'number' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageCodeNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'code' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageLinkNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'link' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          url: { type: 'string' },\r\n        },\r\n        required: ['children', 'type', 'url'],\r\n      },\r\n      MessageMentionNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'mention' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          user: {\r\n            type: 'object',\r\n            properties: { id: { type: 'string' } },\r\n            additionalProperties: false,\r\n            propertyOrder: ['id'],\r\n            required: ['id'],\r\n          },\r\n        },\r\n        required: ['children', 'type', 'user'],\r\n      },\r\n      MessageNumberBulletNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'number_bullet' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          bulletNumber: { type: 'number' },\r\n          indent: { type: 'number' },\r\n        },\r\n        required: ['bulletNumber', 'children', 'type'],\r\n      },\r\n      MessageParagraphNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'p' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageQuoteNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'quote' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      MessageTextNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: {\r\n            enum: [\r\n              'assignee',\r\n              'bullet',\r\n              'code',\r\n              'link',\r\n              'markdown',\r\n              'mention',\r\n              'number_bullet',\r\n              'p',\r\n              'quote',\r\n              'todo',\r\n            ],\r\n            type: 'string',\r\n          },\r\n          class: { type: 'string' },\r\n          text: { type: 'string' },\r\n          bold: { type: 'boolean' },\r\n          code: { type: 'boolean' },\r\n          italic: { type: 'boolean' },\r\n          underline: { type: 'boolean' },\r\n        },\r\n        required: ['text'],\r\n      },\r\n      MessageTodoNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'todo' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n          todoID: { type: 'string' },\r\n          done: { type: 'boolean' },\r\n        },\r\n        required: ['children', 'done', 'todoID', 'type'],\r\n      },\r\n      MessageMarkdownNode: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          type: { type: 'string', const: 'markdown' },\r\n          class: { type: 'string' },\r\n          children: { $ref: '#/definitions/MessageContent' },\r\n        },\r\n        required: ['children', 'type'],\r\n      },\r\n      ServerAddReactions: {\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          reaction: { description: 'The emoji reaction.', type: 'string' },\r\n          userID: {\r\n            description: 'The ID of the user who reacted to the message.',\r\n            type: 'string',\r\n          },\r\n          timestamp: {\r\n            description: 'The timestamp of when the reaction was created.',\r\n            type: 'string',\r\n            format: 'date-time',\r\n          },\r\n        },\r\n        required: ['reaction', 'userID'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListThreadMessageParameters: {\r\n    description: 'https://docs.cord.com/rest-apis/messages/',\r\n    type: 'object',\r\n    properties: {\r\n      sortDirection: {\r\n        description:\r\n          \"Return messages in ascending or descending order of creation timestamp.  'descending' is the default.\",\r\n        enum: ['ascending', 'descending'],\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['sortDirection'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListMessageParameters: {\r\n    description: 'https://docs.cord.com/rest-apis/messages/',\r\n    type: 'object',\r\n    properties: {\r\n      limit: {\r\n        description: 'Number of messages to return. Defaults to 1000.',\r\n        type: 'number',\r\n      },\r\n      token: {\r\n        description:\r\n          'Pagination token. This is returned in the `pagination` object of a previous response.',\r\n        type: 'string',\r\n      },\r\n      filter: {\r\n        description:\r\n          'Messages will be matched against the filters specified.\\nThis is a partial match, which means any keys other than the ones you specify are ignored\\nwhen checking for a match. Please note that because this is a query parameter in a REST API,\\nthis JSON object must be URI encoded before being sent.',\r\n        type: 'object',\r\n        properties: {\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs of data associated with the message.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          location: {\r\n            description:\r\n              'The [location](/reference/location) of the thread containing the message.',\r\n            type: 'string',\r\n          },\r\n          authorID: {\r\n            description:\r\n              'If provided, will return messages created by this author.',\r\n            type: 'string',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['metadata', 'location', 'authorID'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['limit', 'token', 'filter'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  AppendMessageVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      text: {\r\n        description:\r\n          'The text that will be appended to the markdown node in the message.',\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['text'],\r\n    required: ['text'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateNotificationVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/notifications/',\r\n    type: 'object',\r\n    properties: {\r\n      actorID: {\r\n        description:\r\n          'ID of user who is the \"actor\" sending the notification, i.e., the user\\ntaking the action the notification is about.\\n\\nRequired if `template` includes `{{actor}}`.',\r\n        type: 'string',\r\n      },\r\n      actor_id: { type: 'string' },\r\n      recipientID: {\r\n        description: 'ID of user receiving the notification.',\r\n        type: 'string',\r\n      },\r\n      recipient_id: { type: 'string' },\r\n      template: {\r\n        description:\r\n          \"Template for the header of the notification. The expressions `{{actor}}`\\nand `{{recipient}}` will be replaced respectively with the notification's\\nactor and recipient. (See below for an example.)\",\r\n        type: 'string',\r\n      },\r\n      url: {\r\n        description: 'URL of page to go to when the notification is clicked.',\r\n        type: 'string',\r\n      },\r\n      iconUrl: {\r\n        description:\r\n          \"URL of an icon image if a specific one is desired. For notifications with\\nan `actor_id` this will default to the sender's profile picture, otherwise\\nit will default to a bell icon.\",\r\n        type: 'string',\r\n      },\r\n      type: {\r\n        description:\r\n          'Currently must be set to `url`. In the future this may specify different\\ntypes of notifications, but for now only `url` is defined.',\r\n        type: 'string',\r\n        const: 'url',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'An arbitrary JSON object that can be used to set additional metadata on the\\nnotification. When displaying a [list of\\nnotifications](/components/cord-notification-list),\\nyou can filter the list by metadata value.\\n\\nKeys are strings, and values can be strings, numbers or booleans.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      extraClassnames: {\r\n        description:\r\n          'An optional space separated list of classnames to add to the notification.',\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'actorID',\r\n      'actor_id',\r\n      'recipientID',\r\n      'recipient_id',\r\n      'template',\r\n      'url',\r\n      'iconUrl',\r\n      'type',\r\n      'metadata',\r\n      'extraClassnames',\r\n    ],\r\n    required: ['template', 'type', 'url'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdatePlatformOrganizationVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      name: {\r\n        description:\r\n          'Organization name. Required when creating an organization.',\r\n        type: 'string',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: {\r\n        description:\r\n          'Whether this organization is active or deleted.  Attempting to log into a\\ndeleted organization will fail.',\r\n        enum: ['active', 'deleted'],\r\n        type: 'string',\r\n      },\r\n      members: {\r\n        description:\r\n          'List of partner-specific IDs of the users who are members of this organization.\\nThis will replace the existing members.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['name', 'metadata', 'status', 'members'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdatePlatformOrganizationMembersVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      add: {\r\n        description: 'The IDs of users to add to this organization.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n      remove: {\r\n        description: 'The IDs of users to remove from this organization.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['add', 'remove'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreatePlatformOrganizationVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      id: { $ref: '#/definitions/ID', description: 'ID of the organization' },\r\n      name: {\r\n        description:\r\n          'Organization name. Required when creating an organization.',\r\n        type: 'string',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: {\r\n        description:\r\n          'Whether this organization is active or deleted.  Attempting to log into a\\ndeleted organization will fail.',\r\n        enum: ['active', 'deleted'],\r\n        type: 'string',\r\n      },\r\n      members: {\r\n        description:\r\n          'List of partner-specific IDs of the users who are members of this organization',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['id', 'name', 'metadata', 'status', 'members'],\r\n    required: ['id', 'name'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdatePlatformGroupVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/groups/',\r\n    type: 'object',\r\n    properties: {\r\n      name: {\r\n        description: 'Group name. Required when creating an group.',\r\n        type: 'string',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: {\r\n        description:\r\n          'Whether this group is active or deleted.  Attempting to log into a\\ndeleted group will fail.',\r\n        enum: ['active', 'deleted'],\r\n        type: 'string',\r\n      },\r\n      members: {\r\n        description:\r\n          'List of partner-specific IDs of the users who are members of this group.\\nThis will replace the existing members.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['name', 'metadata', 'status', 'members'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdatePlatformGroupMembersVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/groups/',\r\n    type: 'object',\r\n    properties: {\r\n      add: {\r\n        description: 'The IDs of users to add to this group.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n      remove: {\r\n        description: 'The IDs of users to remove from this group.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ID' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['add', 'remove'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateUserPreferenceVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/preferences/',\r\n    type: 'object',\r\n    properties: {\r\n      key: {\r\n        description:\r\n          'The preference key. `notification_channels` controls how users get notified about Cord activity.',\r\n        type: 'string',\r\n        const: 'notification_channels',\r\n      },\r\n      value: {\r\n        $ref: '#/definitions/Partial<NotificationPreferences>',\r\n        description:\r\n          'The updated preference value. This will update only the keys that are passed along.\\nFor example, to disable Slack notification, but leave email untouched, you can use this value:\\n\\n```json\\n{\\n   \"value\": { \"sendViaSlack\": \"false\" },\\n}\\n```',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['key', 'value'],\r\n    required: ['key', 'value'],\r\n    definitions: {\r\n      'Partial<NotificationPreferences>': {\r\n        type: 'object',\r\n        properties: {\r\n          sendViaSlack: {\r\n            description: 'Whether notifications should be sent via slack.',\r\n            type: 'boolean',\r\n          },\r\n          sendViaEmail: {\r\n            description: 'Whether notifications should be sent via email.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['sendViaSlack', 'sendViaEmail'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateUserPresenceVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/presence/',\r\n    type: 'object',\r\n    properties: {\r\n      organizationID: { type: 'string' },\r\n      exclusiveWithin: {\r\n        description:\r\n          'Sets an \"exclusivity region\" for the ephemeral presence set by this update.\\nA user can only be present at one location for a given value of exclusiveWithin.\\nIf the user becomes present at a different location with the same value of\\nexclusiveWithin, they automatically become no longer present at all other\\nlocations with that value of exclusive_within.\\nThis is useful to more easily track presence as a user moves among sub-locations.\\nFor example, suppose we\\'d like to track which specific paragraph on a page\\na user is present. We could make those updates like this:\\n\\n```json\\n{\\n   \"groupID\": \"<GROUP_ID>\",\\n   \"location\": { \"page\": \"<PAGE_ID>\", \"paragraph\": \"<PARAGRAPH_ID>\" },\\n   \"exclusiveWithin\": { \"page\": \"<PAGE_ID>\" }\\n}\\n```\\n\\nAs a user moves around a page, their paragraphID will change, while their\\npageID will remain the same. The above call to setPresent will mark them\\npresent at their specific paragraph. However, since every update uses the\\nsame exclusiveWithin, each time they are marked present at one paragraph\\nthey will become no longer present at their previous paragraph.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      location: {\r\n        description:\r\n          'The [location](/reference/location) you want the user to be in.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      groupID: {\r\n        description:\r\n          'The ID of the group which should be able to see this presence update',\r\n        type: 'string',\r\n      },\r\n      durable: {\r\n        description:\r\n          'When `true`, this is a [durable presence](/js-apis-and-hooks/presence-api)\\nupdate, when `false`, or is not used, it is an [ephemeral presence](/js-apis-and-hooks/presence-api) update.\\n\\nThis value defaults to `false.`',\r\n        type: 'boolean',\r\n      },\r\n      absent: {\r\n        description:\r\n          'When `true`, this is an *absence* update, meaning that the user has just left\\nthis [location](/reference/location).\\nIf the user is currently present at that location, it is cleared.\\nThis cannot be used with a [durable presence](/js-apis-and-hooks/presence-api) update.\\n\\nThis value defaults to `false.` The user will be set as present at the location.',\r\n        type: 'boolean',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'organizationID',\r\n      'exclusiveWithin',\r\n      'location',\r\n      'groupID',\r\n      'durable',\r\n      'absent',\r\n    ],\r\n    required: ['location'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateProjectVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/projects/',\r\n    type: 'object',\r\n    properties: {\r\n      emailSettings: { $ref: '#/definitions/Partial<EmailSettings>' },\r\n      name: {\r\n        description: 'Name of the project',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'URL for the project icon. It should be a square image of 256x256. This\\nwill be used as the avatar for messages and emails coming from your\\nproject.  If not specified, the Cord logo will be used.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      eventWebhookURL: {\r\n        description: 'The URL that the events webhook is sent to',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      redirectURI: {\r\n        description:\r\n          'Custom url link contained in email and slack notifications. These notifications are sent when a user is\\nmentioned or thread is shared and by default, the link points to the page where the conversation happened.\\nFor more information, please refer to the [API docs](/customization/redirect-link)',\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'emailSettings',\r\n      'name',\r\n      'iconURL',\r\n      'eventWebhookURL',\r\n      'redirectURI',\r\n    ],\r\n    required: ['name'],\r\n    definitions: {\r\n      'Partial<EmailSettings>': {\r\n        type: 'object',\r\n        properties: {\r\n          name: {\r\n            description:\r\n              \"Name to show in both the subject and the body of the email.\\nDefaults to your project's name.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          imageURL: {\r\n            description:\r\n              'URL for your logo image. The default for this is the Cord logo.',\r\n            type: ['null', 'string'],\r\n          },\r\n          sender: {\r\n            description:\r\n              'Email from which notifications for your service will be sent from.\\nThis will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          logoConfig: {\r\n            description:\r\n              'Customization for your logo size. Providing either a height (maximum 120) or\\nwidth (maximum 240) will result in the image being proportionally resized to\\nfit in a container of that size. The default value is `{\"width\": 140}`.',\r\n            anyOf: [\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  width: { minimum: 0, maximum: 240, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['width'],\r\n                required: ['width'],\r\n              },\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  height: { minimum: 0, maximum: 120, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['height'],\r\n                required: ['height'],\r\n              },\r\n              { type: 'null' },\r\n            ],\r\n          },\r\n          enableEmailNotifications: {\r\n            description:\r\n              'Whether you want your users to receive notification emails. The default value is true.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'name',\r\n          'imageURL',\r\n          'sender',\r\n          'logoConfig',\r\n          'enableEmailNotifications',\r\n        ],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateProjectVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/projects/',\r\n    type: 'object',\r\n    properties: {\r\n      emailSettings: { $ref: '#/definitions/Partial<EmailSettings>' },\r\n      name: {\r\n        description: 'Name of the project',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n      iconURL: {\r\n        description:\r\n          'URL for the project icon. It should be a square image of 256x256. This\\nwill be used as the avatar for messages and emails coming from your\\nproject.  If not specified, the Cord logo will be used.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      eventWebhookURL: {\r\n        description: 'The URL that the events webhook is sent to',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      redirectURI: {\r\n        description:\r\n          'Custom url link contained in email and slack notifications. These notifications are sent when a user is\\nmentioned or thread is shared and by default, the link points to the page where the conversation happened.\\nFor more information, please refer to the [API docs](/customization/redirect-link)',\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'emailSettings',\r\n      'name',\r\n      'iconURL',\r\n      'eventWebhookURL',\r\n      'redirectURI',\r\n    ],\r\n    definitions: {\r\n      'Partial<EmailSettings>': {\r\n        type: 'object',\r\n        properties: {\r\n          name: {\r\n            description:\r\n              \"Name to show in both the subject and the body of the email.\\nDefaults to your project's name.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          imageURL: {\r\n            description:\r\n              'URL for your logo image. The default for this is the Cord logo.',\r\n            type: ['null', 'string'],\r\n          },\r\n          sender: {\r\n            description:\r\n              'Email from which notifications for your service will be sent from.\\nThis will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          logoConfig: {\r\n            description:\r\n              'Customization for your logo size. Providing either a height (maximum 120) or\\nwidth (maximum 240) will result in the image being proportionally resized to\\nfit in a container of that size. The default value is `{\"width\": 140}`.',\r\n            anyOf: [\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  width: { minimum: 0, maximum: 240, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['width'],\r\n                required: ['width'],\r\n              },\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  height: { minimum: 0, maximum: 120, type: 'number' },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['height'],\r\n                required: ['height'],\r\n              },\r\n              { type: 'null' },\r\n            ],\r\n          },\r\n          enableEmailNotifications: {\r\n            description:\r\n              'Whether you want your users to receive notification emails. The default value is true.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'name',\r\n          'imageURL',\r\n          'sender',\r\n          'logoConfig',\r\n          'enableEmailNotifications',\r\n        ],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  DeleteProjectVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/projects/',\r\n    type: 'object',\r\n    properties: {\r\n      secret: {\r\n        description:\r\n          'Secret key of the project that you want to delete. This can be found\\nwithin the Cord Console.',\r\n        minLength: 1,\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['secret'],\r\n    required: ['secret'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateThreadVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/threads/',\r\n    type: 'object',\r\n    properties: {\r\n      location: {\r\n        description: 'The [location](/reference/location) of this thread.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      id: { description: 'The ID for this thread.', type: 'string' },\r\n      url: {\r\n        description:\r\n          \"A URL where the thread can be seen.  This determines where a user is sent\\nwhen they click on a reference to this thread, such as in a notification,\\nor if they click on a reference to a message in the thread and the message\\ndoesn't have its own URL.\",\r\n        type: 'string',\r\n      },\r\n      name: {\r\n        description:\r\n          'The name of the thread.  This is shown to users when the thread is\\nreferenced, such as in notifications.  This should generally be something\\nlike the page title.',\r\n        type: 'string',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      groupID: {\r\n        description: 'The group ID this thread is in.',\r\n        type: 'string',\r\n      },\r\n      extraClassnames: {\r\n        description:\r\n          'An optional space separated list of classnames to add to the thread.',\r\n        type: ['null', 'string'],\r\n      },\r\n      addSubscribers: {\r\n        description: 'A list of subscribers to add to this thread.',\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'location',\r\n      'id',\r\n      'url',\r\n      'name',\r\n      'metadata',\r\n      'groupID',\r\n      'extraClassnames',\r\n      'addSubscribers',\r\n    ],\r\n    required: ['groupID', 'location', 'name', 'url'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdateThreadVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/threads/',\r\n    type: 'object',\r\n    properties: {\r\n      location: {\r\n        description: 'The [location](/reference/location) of this thread.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      id: { description: 'The ID for this thread.', type: 'string' },\r\n      url: {\r\n        description:\r\n          \"A URL where the thread can be seen.  This determines where a user is sent\\nwhen they click on a reference to this thread, such as in a notification,\\nor if they click on a reference to a message in the thread and the message\\ndoesn't have its own URL.\",\r\n        type: 'string',\r\n      },\r\n      name: {\r\n        description:\r\n          'The name of the thread.  This is shown to users when the thread is\\nreferenced, such as in notifications.  This should generally be something\\nlike the page title.',\r\n        type: 'string',\r\n      },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      organizationID: {\r\n        description: 'The organization ID this thread is in.',\r\n        type: 'string',\r\n      },\r\n      groupID: {\r\n        description: 'The group ID this thread is in.',\r\n        type: 'string',\r\n      },\r\n      extraClassnames: {\r\n        description:\r\n          'An optional space separated list of classnames to add to the thread.',\r\n        type: ['null', 'string'],\r\n      },\r\n      resolvedTimestamp: {\r\n        description:\r\n          'The timestamp when this thread was resolved. Set to `null` if this thread\\nis not resolved.',\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      userID: {\r\n        description:\r\n          'Certain changes to the thread may post a message into the thread -- in\\nparticular, resolving or unresolving a thread posts a message into the\\nthread saying \"User un/resolved this thread\". This parameter is the ID of\\nthe User who will be listed as the author of that message. It\\'s optional\\n-- if no user is specified, then those messages won\\'t get posted.',\r\n        type: 'string',\r\n      },\r\n      typing: {\r\n        description:\r\n          \"Marks the specified users as typing in this thread.  The typing indicator\\nexpires after 3 seconds, so to continually show the indicator it needs to\\nbe called on an interval.  Pass an empty array to clear all users' typing indicators.\",\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n      resolved: {\r\n        description:\r\n          'Whether the thread is resolved.  Setting this to `true` is equivalent to\\nsetting `resolvedTimestamp` to the current time, and setting this to\\n`false` is equivalent to setting `resolvedTimestamp` to `null`.',\r\n        type: 'boolean',\r\n      },\r\n      seenByUsers: {\r\n        description:\r\n          'Marks the specified users as having seen/not seen this thread. If a user\\nis not included in this list, the seen status will not be changed.',\r\n        type: 'array',\r\n        items: { $ref: '#/definitions/ServerThreadSeenUser' },\r\n      },\r\n      addSubscribers: {\r\n        description: 'A list of subscribers to add to this thread.',\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n      removeSubscribers: {\r\n        description: 'A list of subscribers to remove from this thread.',\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'location',\r\n      'id',\r\n      'url',\r\n      'name',\r\n      'metadata',\r\n      'organizationID',\r\n      'groupID',\r\n      'extraClassnames',\r\n      'resolvedTimestamp',\r\n      'userID',\r\n      'typing',\r\n      'resolved',\r\n      'seenByUsers',\r\n      'addSubscribers',\r\n      'removeSubscribers',\r\n    ],\r\n    definitions: {\r\n      ServerThreadSeenUser: {\r\n        description: 'https://docs.cord.com/rest-apis/threads/',\r\n        type: 'object',\r\n        properties: {\r\n          userID: {\r\n            description: 'ID of the user that has seen/not seen the thread.',\r\n            type: 'string',\r\n          },\r\n          seen: {\r\n            description: 'Whether the user has seen the thread or not.',\r\n            type: 'boolean',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['userID', 'seen'],\r\n        required: ['seen', 'userID'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListThreadQueryParameters: {\r\n    description: 'https://docs.cord.com/rest-apis/threads/',\r\n    type: 'object',\r\n    properties: {\r\n      filter: {\r\n        description:\r\n          'Threads will be matched against the filters specified.\\nThis is a partial match, which means any keys other than the ones you specify are ignored\\nwhen checking for a match. Please note that because this is a query parameter in a REST API,\\nthis JSON object must be URI encoded before being sent.',\r\n        $ref: '#/definitions/ServerListThreadFilter',\r\n      },\r\n      limit: {\r\n        description: 'Number of threads to return. Defaults to 1000.',\r\n        type: 'number',\r\n      },\r\n      token: {\r\n        description:\r\n          'Pagination token. This is returned in the `pagination` object of a previous response.',\r\n        type: 'string',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['filter', 'limit', 'token'],\r\n    definitions: {\r\n      ServerListThreadFilter: {\r\n        type: 'object',\r\n        properties: {\r\n          location: {\r\n            description:\r\n              'The [Location](/reference/location) of the threads.\\nThis can either be just the location value or an object with a value for\\nboth the location and partialMatch properties.\\n\\nThe value for partialMatch will default to false if only location is provided.',\r\n            anyOf: [\r\n              {\r\n                type: 'object',\r\n                additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n                propertyOrder: [],\r\n              },\r\n              {\r\n                type: 'object',\r\n                properties: {\r\n                  value: {\r\n                    description:\r\n                      'The [Location](/reference/location) of the threads.',\r\n                    type: 'object',\r\n                    additionalProperties: {\r\n                      type: ['string', 'number', 'boolean'],\r\n                    },\r\n                    propertyOrder: [],\r\n                  },\r\n                  partialMatch: {\r\n                    description:\r\n                      'If `true`, perform [partial matching](/reference/location#Partial-Matching)\\non the specified location. If `false`, fetch information for only exactly the\\nlocation specified.',\r\n                    type: 'boolean',\r\n                  },\r\n                },\r\n                additionalProperties: false,\r\n                propertyOrder: ['value', 'partialMatch'],\r\n                required: ['partialMatch', 'value'],\r\n              },\r\n            ],\r\n          },\r\n          metadata: {\r\n            description:\r\n              'Return only objects containing these metadata keys and values. (Metadata is\\narbitrary key-value pairs of data that you can associate with an object.)',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          groupID: {\r\n            description:\r\n              'Return only threads [belonging to this\\ngroup](/reference/permissions).',\r\n            type: 'string',\r\n          },\r\n          firstMessageTimestamp: {\r\n            description:\r\n              'Return only threads with a \"first message timestamp\" within this range. The\\n\"first message timestamp\" of a thread is the timestamp when the first\\nmessage in the thread was created. (This is typically when the thread was\\ncreated.)',\r\n            type: 'object',\r\n            properties: {\r\n              from: {\r\n                description:\r\n                  \"Timestamp from where to start the interval. The thread's timestamp must be\\n*newer* than (or equal to) this in order to match the filter.\\n\\nIf not present, the interval will have no start date and any data will\\ninclude everything older than the provided `to` timestamp.\",\r\n                type: 'string',\r\n                format: 'date-time',\r\n              },\r\n              to: {\r\n                description:\r\n                  \"Timestamp where to end the interval. The thread's timestamp must be *older*\\nthan (or equal to) this in order to match the filter.\\n\\nIf not present, the interval will have no end date and any data will\\ninclude everything newer than the provided `from` timestamp.\",\r\n                type: 'string',\r\n                format: 'date-time',\r\n              },\r\n            },\r\n            additionalProperties: false,\r\n            propertyOrder: ['from', 'to'],\r\n          },\r\n          mostRecentMessageTimestamp: {\r\n            description:\r\n              'Return only threads with a \"most recent message timestamp\" within this\\nrange. The \"most recent message timestamp\" of a thread is the timestamp\\nwhen the most recent message in the thread was created or updated. (This is\\ntypically when the thread was most recently replied to.)',\r\n            type: 'object',\r\n            properties: {\r\n              from: {\r\n                description:\r\n                  \"Timestamp from where to start the interval. The thread's timestamp must be\\n*newer* than (or equal to) this in order to match the filter.\\n\\nIf not present, the interval will have no start date and any data will\\ninclude everything older than the provided `to` timestamp.\",\r\n                type: 'string',\r\n                format: 'date-time',\r\n              },\r\n              to: {\r\n                description:\r\n                  \"Timestamp where to end the interval. The thread's timestamp must be *older*\\nthan (or equal to) this in order to match the filter.\\n\\nIf not present, the interval will have no end date and any data will\\ninclude everything newer than the provided `from` timestamp.\",\r\n                type: 'string',\r\n                format: 'date-time',\r\n              },\r\n            },\r\n            additionalProperties: false,\r\n            propertyOrder: ['from', 'to'],\r\n          },\r\n          resolvedStatus: {\r\n            description:\r\n              'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`,\\nonly unresolved threads will be returned. If set to `any`, both resolved and\\nunresolved threads will be returned.\\n\\nIf unset, defaults to `any`.',\r\n            enum: ['any', 'resolved', 'unresolved'],\r\n            type: 'string',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'location',\r\n          'metadata',\r\n          'groupID',\r\n          'firstMessageTimestamp',\r\n          'mostRecentMessageTimestamp',\r\n          'resolvedStatus',\r\n        ],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  UpdatePlatformUserVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      name: { description: 'Full user name', type: ['null', 'string'] },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: { enum: ['active', 'deleted'], type: 'string' },\r\n      email: {\r\n        description: 'Email address',\r\n        format: 'email',\r\n        type: ['null', 'string'],\r\n      },\r\n      shortName: {\r\n        description:\r\n          'Short user name. In most cases, this will be preferred over name when set.',\r\n        type: ['null', 'string'],\r\n      },\r\n      short_name: { type: ['null', 'string'] },\r\n      profilePictureURL: {\r\n        description:\r\n          \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      profile_picture_url: {\r\n        description: 'Alias for profilePictureURL. This field is deprecated.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      first_name: {\r\n        description:\r\n          \"User's first name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      last_name: {\r\n        description:\r\n          \"User's last name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      addGroups: {\r\n        description:\r\n          \"A list of group IDs this user should be made a member of.  It is an error\\nto specify a group that doesn't exist or one that is also being removed in\\nthe same call.  It is not an error to add a user to a group they're already\\na member of.\",\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n      removeGroups: {\r\n        description:\r\n          \"A list of group IDs this user should stop being a member of.  It is an\\nerror to specify a group that doesn't exist or one that is also being added\\nin the same call.  It is not an error to remove a user from a group they\\nare not a member of.\",\r\n        type: 'array',\r\n        items: { type: 'string' },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'name',\r\n      'metadata',\r\n      'status',\r\n      'email',\r\n      'shortName',\r\n      'short_name',\r\n      'profilePictureURL',\r\n      'profile_picture_url',\r\n      'first_name',\r\n      'last_name',\r\n      'addGroups',\r\n      'removeGroups',\r\n    ],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreatePlatformUserVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      name: { description: 'Full user name', type: ['null', 'string'] },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: { enum: ['active', 'deleted'], type: 'string' },\r\n      email: {\r\n        description: 'Email address',\r\n        format: 'email',\r\n        type: ['null', 'string'],\r\n      },\r\n      shortName: {\r\n        description:\r\n          'Short user name. In most cases, this will be preferred over name when set.',\r\n        type: ['null', 'string'],\r\n      },\r\n      short_name: { type: ['null', 'string'] },\r\n      profilePictureURL: {\r\n        description:\r\n          \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      profile_picture_url: {\r\n        description: 'Alias for profilePictureURL. This field is deprecated.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      first_name: {\r\n        description:\r\n          \"User's first name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      last_name: {\r\n        description:\r\n          \"User's last name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      id: { $ref: '#/definitions/ID', description: 'Provided ID for the user' },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'name',\r\n      'metadata',\r\n      'status',\r\n      'email',\r\n      'shortName',\r\n      'short_name',\r\n      'profilePictureURL',\r\n      'profile_picture_url',\r\n      'first_name',\r\n      'last_name',\r\n      'id',\r\n    ],\r\n    required: ['id'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListPlatformUserVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      email: { type: ['null', 'string'] },\r\n      id: { $ref: '#/definitions/ID', description: 'Provided ID for the user' },\r\n      name: { description: 'Full user name', type: ['null', 'string'] },\r\n      metadata: {\r\n        description:\r\n          'Arbitrary key-value pairs that can be used to store additional information.',\r\n        type: 'object',\r\n        additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n        propertyOrder: [],\r\n      },\r\n      status: { enum: ['active', 'deleted'], type: 'string' },\r\n      createdTimestamp: {\r\n        description: 'Creation timestamp',\r\n        anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n      },\r\n      shortName: {\r\n        description:\r\n          'Short user name. In most cases, this will be preferred over name when set.',\r\n        type: ['null', 'string'],\r\n      },\r\n      short_name: { type: ['null', 'string'] },\r\n      profilePictureURL: {\r\n        description:\r\n          \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      profile_picture_url: {\r\n        description: 'Alias for profilePictureURL. This field is deprecated.',\r\n        format: 'uri',\r\n        type: ['null', 'string'],\r\n      },\r\n      first_name: {\r\n        description:\r\n          \"User's first name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n      last_name: {\r\n        description:\r\n          \"User's last name. This field is deprecated and has no effect.\",\r\n        type: ['null', 'string'],\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: [\r\n      'email',\r\n      'id',\r\n      'name',\r\n      'metadata',\r\n      'status',\r\n      'createdTimestamp',\r\n      'shortName',\r\n      'short_name',\r\n      'profilePictureURL',\r\n      'profile_picture_url',\r\n      'first_name',\r\n      'last_name',\r\n    ],\r\n    required: [\r\n      'createdTimestamp',\r\n      'email',\r\n      'first_name',\r\n      'id',\r\n      'last_name',\r\n      'metadata',\r\n      'name',\r\n      'profilePictureURL',\r\n      'profile_picture_url',\r\n      'shortName',\r\n      'short_name',\r\n      'status',\r\n    ],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListUsersResponseWithoutPagination: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'array',\r\n    items: { $ref: '#/definitions/ServerListUser' },\r\n    definitions: {\r\n      ServerListUser: {\r\n        description: 'https://docs.cord.com/rest-apis/users/',\r\n        type: 'object',\r\n        properties: {\r\n          email: { type: ['null', 'string'] },\r\n          id: {\r\n            $ref: '#/definitions/ID',\r\n            description: 'Provided ID for the user',\r\n          },\r\n          name: { description: 'Full user name', type: ['null', 'string'] },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          status: { enum: ['active', 'deleted'], type: 'string' },\r\n          createdTimestamp: {\r\n            description: 'Creation timestamp',\r\n            anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n          },\r\n          shortName: {\r\n            description:\r\n              'Short user name. In most cases, this will be preferred over name when set.',\r\n            type: ['null', 'string'],\r\n          },\r\n          short_name: { type: ['null', 'string'] },\r\n          profilePictureURL: {\r\n            description:\r\n              \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          profile_picture_url: {\r\n            description:\r\n              'Alias for profilePictureURL. This field is deprecated.',\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          first_name: {\r\n            description:\r\n              \"User's first name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          last_name: {\r\n            description:\r\n              \"User's last name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'email',\r\n          'id',\r\n          'name',\r\n          'metadata',\r\n          'status',\r\n          'createdTimestamp',\r\n          'shortName',\r\n          'short_name',\r\n          'profilePictureURL',\r\n          'profile_picture_url',\r\n          'first_name',\r\n          'last_name',\r\n        ],\r\n        required: [\r\n          'createdTimestamp',\r\n          'email',\r\n          'first_name',\r\n          'id',\r\n          'last_name',\r\n          'metadata',\r\n          'name',\r\n          'profilePictureURL',\r\n          'profile_picture_url',\r\n          'shortName',\r\n          'short_name',\r\n          'status',\r\n        ],\r\n      },\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListUsersResponse: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      users: { type: 'array', items: { $ref: '#/definitions/ServerListUser' } },\r\n      pagination: { $ref: '#/definitions/PaginationDetails' },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['users', 'pagination'],\r\n    required: ['pagination', 'users'],\r\n    definitions: {\r\n      ServerListUser: {\r\n        description: 'https://docs.cord.com/rest-apis/users/',\r\n        type: 'object',\r\n        properties: {\r\n          email: { type: ['null', 'string'] },\r\n          id: {\r\n            $ref: '#/definitions/ID',\r\n            description: 'Provided ID for the user',\r\n          },\r\n          name: { description: 'Full user name', type: ['null', 'string'] },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          status: { enum: ['active', 'deleted'], type: 'string' },\r\n          createdTimestamp: {\r\n            description: 'Creation timestamp',\r\n            anyOf: [{ type: 'string', format: 'date-time' }, { type: 'null' }],\r\n          },\r\n          shortName: {\r\n            description:\r\n              'Short user name. In most cases, this will be preferred over name when set.',\r\n            type: ['null', 'string'],\r\n          },\r\n          short_name: { type: ['null', 'string'] },\r\n          profilePictureURL: {\r\n            description:\r\n              \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          profile_picture_url: {\r\n            description:\r\n              'Alias for profilePictureURL. This field is deprecated.',\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          first_name: {\r\n            description:\r\n              \"User's first name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          last_name: {\r\n            description:\r\n              \"User's last name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: [\r\n          'email',\r\n          'id',\r\n          'name',\r\n          'metadata',\r\n          'status',\r\n          'createdTimestamp',\r\n          'shortName',\r\n          'short_name',\r\n          'profilePictureURL',\r\n          'profile_picture_url',\r\n          'first_name',\r\n          'last_name',\r\n        ],\r\n        required: [\r\n          'createdTimestamp',\r\n          'email',\r\n          'first_name',\r\n          'id',\r\n          'last_name',\r\n          'metadata',\r\n          'name',\r\n          'profilePictureURL',\r\n          'profile_picture_url',\r\n          'shortName',\r\n          'short_name',\r\n          'status',\r\n        ],\r\n      },\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n      PaginationDetails: {\r\n        type: 'object',\r\n        properties: {\r\n          token: {\r\n            description:\r\n              'The token to use to get the next page of results. If empty, there are no more results.',\r\n            type: ['null', 'string'],\r\n          },\r\n          total: {\r\n            description:\r\n              'Total number of results. Might be bigger than the number of results returned on the query. Useful to display a \"total\" counter.',\r\n            type: 'number',\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['token', 'total'],\r\n        required: ['token', 'total'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ListUserQueryParameters: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      limit: {\r\n        description:\r\n          'Number of users to return.\\nThe default limit is set to 1000.',\r\n        type: 'number',\r\n      },\r\n      token: {\r\n        description:\r\n          'Pagination token. This is returned in the `pagination` object of a previous response.',\r\n        type: 'string',\r\n      },\r\n      filter: {\r\n        description:\r\n          'This is a JSON object with one optional entry.  Users will be matched\\nagainst the filter specified. This is a partial match, which means any keys\\nother than the ones you specify are ignored when checking for a match.\\nPlease note that because this is a query parameter in a REST API, this JSON\\nobject must be URI encoded before being sent.',\r\n        $ref: '#/definitions/Pick<FilterParameters,\"metadata\">',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['limit', 'token', 'filter'],\r\n    definitions: {\r\n      'Pick<FilterParameters,\"metadata\">': {\r\n        type: 'object',\r\n        properties: {\r\n          metadata: {\r\n            description:\r\n              'Return only objects containing these metadata keys and values. (Metadata is\\narbitrary key-value pairs of data that you can associate with an object.)',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n        },\r\n        additionalProperties: false,\r\n        propertyOrder: ['metadata'],\r\n      },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  DeleteUserVariables: {\r\n    description: 'https://docs.cord.com/rest-apis/users/',\r\n    type: 'object',\r\n    properties: {\r\n      permanently_delete: {\r\n        description: 'The user will be deleted only if this value is true.',\r\n        type: 'boolean',\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['permanently_delete'],\r\n    required: ['permanently_delete'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  CreateWebhookVariables: {\r\n    type: 'object',\r\n    properties: {\r\n      url: {\r\n        description: 'The URL to register that will receive webhook events',\r\n        format: 'uri',\r\n        type: 'string',\r\n      },\r\n      events: {\r\n        description: 'The events which you will receive',\r\n        type: 'array',\r\n        items: {\r\n          enum: [\r\n            'notification-created',\r\n            'thread-message-added',\r\n            'url-verification',\r\n          ],\r\n          type: 'string',\r\n        },\r\n      },\r\n    },\r\n    additionalProperties: false,\r\n    propertyOrder: ['url', 'events'],\r\n    required: ['events', 'url'],\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n  ClientAuthTokenData: {\r\n    description: 'https://docs.cord.com/reference/authentication/',\r\n    additionalProperties: true,\r\n    type: 'object',\r\n    properties: {\r\n      app_id: { format: 'uuid', type: 'string' },\r\n      project_id: {\r\n        description: 'Your project ID',\r\n        format: 'uuid',\r\n        type: 'string',\r\n      },\r\n      user_id: { $ref: '#/definitions/ID', description: 'The ID for the user' },\r\n      organization_id: {\r\n        minLength: 1,\r\n        maxLength: 128,\r\n        type: ['string', 'number'],\r\n      },\r\n      group_id: {\r\n        minLength: 1,\r\n        maxLength: 128,\r\n        description: 'The ID for the user\u2019s group',\r\n        type: ['string', 'number'],\r\n      },\r\n      user_details: {\r\n        description:\r\n          'If present, update\u2019s the user\u2019s details, or creates a user with those\\ndetails if the user_id is new to Cord. This is an object that contains the\\nsame fields as the [user management REST\\nendpoint](/rest-apis/users/)',\r\n        $ref: '#/definitions/ServerUpdateUser',\r\n      },\r\n      organization_details: {\r\n        $ref: '#/definitions/Partial<Omit<ServerOrganizationData,\"id\"|\"members\"|\"connectedToSlack\">&{members?:ID[]|undefined;}>',\r\n      },\r\n      group_details: {\r\n        description:\r\n          \"If present, updates the group's details, or creates a group\\nwith those details if the group_id is new to Cord. This is an object\\nthat contains the same fields as the [group management REST\\nendpoint](/rest-apis/groups/)\",\r\n        $ref: '#/definitions/Partial<Omit<ServerGroupData,\"id\"|\"members\"|\"connectedToSlack\">&{members?:ID[]|undefined;}>',\r\n      },\r\n    },\r\n    propertyOrder: [\r\n      'app_id',\r\n      'project_id',\r\n      'user_id',\r\n      'organization_id',\r\n      'group_id',\r\n      'user_details',\r\n      'organization_details',\r\n      'group_details',\r\n    ],\r\n    required: ['user_id'],\r\n    definitions: {\r\n      ID: { minLength: 1, maxLength: 128, type: ['string', 'number'] },\r\n      ServerUpdateUser: {\r\n        description: 'https://docs.cord.com/rest-apis/users/',\r\n        additionalProperties: false,\r\n        type: 'object',\r\n        properties: {\r\n          name: { description: 'Full user name', type: ['null', 'string'] },\r\n          metadata: {\r\n            description:\r\n              'Arbitrary key-value pairs that can be used to store additional information.',\r\n            type: 'object',\r\n            additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n            propertyOrder: [],\r\n          },\r\n          status: { enum: ['active', 'deleted'], type: 'string' },\r\n          email: {\r\n            description: 'Email address',\r\n            format: 'email',\r\n            type: ['null', 'string'],\r\n          },\r\n          shortName: {\r\n            description:\r\n              'Short user name. In most cases, this will be preferred over name when set.',\r\n            type: ['null', 'string'],\r\n          },\r\n          short_name: { type: ['null', 'string'] },\r\n          profilePictureURL: {\r\n            description:\r\n              \"This must be a valid URL, which means it needs to follow the usual URL\\nformatting and encoding rules. For example, any space character will need\\nto be encoded as `%20`. We recommend using your programming language's\\nstandard URL encoding function, such as `encodeURI` in Javascript.\",\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          profile_picture_url: {\r\n            description:\r\n              'Alias for profilePictureURL. This field is deprecated.',\r\n            format: 'uri',\r\n            type: ['null', 'string'],\r\n          },\r\n          first_name: {\r\n            description:\r\n              \"User's first name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          last_name: {\r\n            description:\r\n              \"User's last name. This field is deprecated and has no effect.\",\r\n            type: ['null', 'string'],\r\n          },\r\n          addGroups: {\r\n            description:\r\n              \"A list of group IDs this user should be made a member of.  It is an error\\nto specify a group that doesn't exist or one that is also being removed in\\nthe same call.  It is not an error to add a user to a group they're already\\na member of.\",\r\n            type: 'array',\r\n            items: { type: 'string' },\r\n          },\r\n          removeGroups: {\r\n            description:\r\n              \"A list of group IDs this user should stop being a member of.  It is an\\nerror to specify a group that doesn't exist or one that is also being added\\nin the same call.  It is not an error to remove a user from a group they\\nare not a member of.\",\r\n            type: 'array',\r\n            items: { type: 'string' },\r\n          },\r\n        },\r\n      },\r\n      'Partial<Omit<ServerOrganizationData,\"id\"|\"members\"|\"connectedToSlack\">&{members?:ID[]|undefined;}>':\r\n        {\r\n          type: 'object',\r\n          properties: {\r\n            name: {\r\n              description:\r\n                'Organization name. Required when creating an organization.',\r\n              type: 'string',\r\n            },\r\n            metadata: {\r\n              description:\r\n                'Arbitrary key-value pairs that can be used to store additional information.',\r\n              type: 'object',\r\n              additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n              propertyOrder: [],\r\n            },\r\n            status: {\r\n              description:\r\n                'Whether this organization is active or deleted.  Attempting to log into a\\ndeleted organization will fail.',\r\n              enum: ['active', 'deleted'],\r\n              type: 'string',\r\n            },\r\n            members: {\r\n              description:\r\n                'List of partner-specific IDs of the users who are members of this organization.\\nThis will replace the existing members.',\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/ID' },\r\n            },\r\n          },\r\n          additionalProperties: false,\r\n          propertyOrder: ['name', 'metadata', 'status', 'members'],\r\n        },\r\n      'Partial<Omit<ServerGroupData,\"id\"|\"members\"|\"connectedToSlack\">&{members?:ID[]|undefined;}>':\r\n        {\r\n          type: 'object',\r\n          properties: {\r\n            name: {\r\n              description: 'Group name. Required when creating an group.',\r\n              type: 'string',\r\n            },\r\n            metadata: {\r\n              description:\r\n                'Arbitrary key-value pairs that can be used to store additional information.',\r\n              type: 'object',\r\n              additionalProperties: { type: ['string', 'number', 'boolean'] },\r\n              propertyOrder: [],\r\n            },\r\n            status: {\r\n              description:\r\n                'Whether this group is active or deleted.  Attempting to log into a\\ndeleted group will fail.',\r\n              enum: ['active', 'deleted'],\r\n              type: 'string',\r\n            },\r\n            members: {\r\n              description:\r\n                'List of partner-specific IDs of the users who are members of this group.\\nThis will replace the existing members.',\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/ID' },\r\n            },\r\n          },\r\n          additionalProperties: false,\r\n          propertyOrder: ['name', 'metadata', 'status', 'members'],\r\n        },\r\n    },\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n  },\r\n} as const;\r\n", "import type { Transaction } from 'sequelize';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport type {\r\n  EntityMetadata,\r\n  ThreadSupportStatusType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasSingleOrgForWrite,\r\n} from 'server/src/auth/index.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { flagsUserFromContext } from 'server/src/featureflags/index.ts';\r\nimport { maybeAddEveryOrgMemberAsThreadParticipants } from 'server/src/message/new_message_tasks/maybeAddEveryOrgMemberAsThreadParticipants.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { addAdditionalSubscribersOnThreadCreation } from 'server/src/message/new_message_tasks/addAdditionalSubscribersOnThreadCreation.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport class ThreadMutator {\r\n  logger: Logger;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n  }\r\n  // remember to trigger the page events PAGE_THREAD_ADDED when using\r\n  // createThreadOnPage function\r\n  async createThreadOnPage(\r\n    threadID: UUID,\r\n    threadURL: string,\r\n    page: PageEntity,\r\n    threadName: string,\r\n    transaction: Transaction,\r\n    platformApplicationID: UUID,\r\n    externalID: string | null,\r\n    metadata: EntityMetadata = {},\r\n    extraClassnames: string | null = null,\r\n    subscribers: string[] | undefined = undefined,\r\n  ) {\r\n    const orgID = assertViewerHasSingleOrgForWrite(\r\n      this.viewer,\r\n      'Must specify a groupID when creating a new thread',\r\n    );\r\n\r\n    const thread = await ThreadEntity.create(\r\n      {\r\n        id: threadID,\r\n        orgID,\r\n        name: threadName,\r\n        url: threadURL,\r\n        metadata: metadata,\r\n        pageContextHash: page.contextHash,\r\n        platformApplicationID,\r\n        extraClassnames,\r\n        ...(externalID && { externalID }),\r\n      },\r\n      { transaction },\r\n    );\r\n\r\n    transaction.afterCommit(async () => {\r\n      const context = await contextWithSession(\r\n        { viewer: this.viewer },\r\n        getSequelize(),\r\n        null,\r\n        null,\r\n      );\r\n\r\n      const flagsUser = flagsUserFromContext(context);\r\n      await maybeAddEveryOrgMemberAsThreadParticipants(\r\n        this.viewer,\r\n        flagsUser,\r\n        thread.id,\r\n      );\r\n\r\n      // If the thread has been created by a viewer in the UI sending a message,\r\n      // we should subscribed them immediately (see #7568)\r\n      if (context.session.viewer.userID) {\r\n        await new ThreadParticipantMutator(\r\n          context.session.viewer,\r\n          context.loaders,\r\n        ).setViewerSubscribed(thread, true);\r\n      }\r\n\r\n      if (subscribers && subscribers.length > 0) {\r\n        await addAdditionalSubscribersOnThreadCreation(\r\n          context,\r\n          subscribers,\r\n          thread.id,\r\n        );\r\n      }\r\n    });\r\n\r\n    return thread;\r\n  }\r\n\r\n  async setThreadResolved(\r\n    threadID: UUID,\r\n    resolved: boolean,\r\n    transaction?: Transaction,\r\n  ) {\r\n    const { userID, orgID } = assertViewerHasIdentity(this.viewer);\r\n\r\n    const [updateCount] = await ThreadEntity.update(\r\n      {\r\n        resolvedTimestamp: resolved ? Sequelize.fn('NOW') : null,\r\n        resolverUserID: userID,\r\n      },\r\n      { where: { id: threadID, orgID }, transaction },\r\n    );\r\n\r\n    return updateCount === 1;\r\n  }\r\n\r\n  async setThreadSupportStatus(\r\n    threadID: UUID,\r\n    supportStatus: ThreadSupportStatusType | null,\r\n    transaction?: Transaction,\r\n  ) {\r\n    const [updated] = await ThreadEntity.update(\r\n      { supportStatus },\r\n      { where: { id: threadID }, transaction },\r\n    );\r\n\r\n    return updated === 1;\r\n  }\r\n\r\n  async setThreadName(threadID: UUID, name: string) {\r\n    const [updated] = await ThreadEntity.update(\r\n      { name },\r\n      { where: { id: threadID } },\r\n    );\r\n\r\n    return updated === 1;\r\n  }\r\n\r\n  async setThreadMetadata(threadID: UUID, metadata: EntityMetadata) {\r\n    const [updated] = await ThreadEntity.update(\r\n      { metadata },\r\n      { where: { id: threadID } },\r\n    );\r\n\r\n    return updated === 1;\r\n  }\r\n}\r\n", "import type { Transaction, WhereOptions } from 'sequelize';\r\nimport { Op, QueryTypes } from 'sequelize';\r\n\r\nimport { unique } from 'radash';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasIdentity,\r\n  assertViewerHasUser,\r\n  assertViewerHasOrgs,\r\n} from 'server/src/auth/index.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { PageLoader } from 'server/src/entity/page/PageLoader.ts';\r\nimport type { MarkThreadsSeenInput } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport class ThreadParticipantMutator {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {}\r\n\r\n  private async threadLoader() {\r\n    if (!this.loaders) {\r\n      this.loaders = await getNewLoaders(this.viewer);\r\n    }\r\n\r\n    return this.loaders.threadLoader;\r\n  }\r\n\r\n  private async getLocation(threadID: UUID) {\r\n    const pageLoader = this.loaders?.pageLoader ?? new PageLoader(this.viewer);\r\n    const page = await pageLoader.loadPrimaryPageForThreadNoOrgCheck(threadID);\r\n    if (!page) {\r\n      throw new Error('Unable to find thread location');\r\n    }\r\n    return page.contextData;\r\n  }\r\n\r\n  async markThreadSeen({\r\n    threadID,\r\n    setSubscribed = false,\r\n    transaction,\r\n  }: {\r\n    threadID: UUID;\r\n    setSubscribed?: boolean;\r\n    transaction?: Transaction;\r\n  }) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const thread = await ThreadEntity.findByPk(threadID, { transaction });\r\n\r\n    if (!thread) {\r\n      throw new Error('No such thread');\r\n    }\r\n    await getSequelize().query(\r\n      `INSERT INTO thread_participants (\"orgID\", \"userID\", \"threadID\", \"subscribed\", \"lastUnseenMessageTimestamp\",\"lastUnseenReactionTimestamp\",\"lastSeenTimestamp\")\r\n       VALUES ($1, $2, $3, $4, $5, $6, (\r\n        SELECT GREATEST(MAX(m.\"timestamp\"), MAX(mr.\"timestamp\")) FROM messages m LEFT OUTER JOIN message_reactions mr ON mr.\"messageID\"=m.id\r\n        WHERE m.\"threadID\"=$3\r\n       ))\r\n       ON CONFLICT (\"orgID\", \"userID\", \"threadID\") DO UPDATE\r\n       SET \"lastSeenTimestamp\" = EXCLUDED.\"lastSeenTimestamp\", \"lastUnseenMessageTimestamp\" = NULL, \"lastUnseenReactionTimestamp\" = NULL`,\r\n      {\r\n        bind: [thread.orgID, userID, threadID, setSubscribed, null, null],\r\n        transaction,\r\n      },\r\n    );\r\n\r\n    const notify = async () => {\r\n      // TODO: Temporary load alleviation - remove\r\n      if (\r\n        thread.platformApplicationID !== '9e7d98ae-5da5-42ca-b857-2f15dc9a63db'\r\n      ) {\r\n        const location = await this.getLocation(threadID);\r\n        await Promise.all([\r\n          publishPubSubEvent(\r\n            'inbox-updated',\r\n            { userID },\r\n            { threadID, location },\r\n          ),\r\n          publishPubSubEvent(\r\n            'thread-participants-updated-incremental',\r\n            { threadID },\r\n            { userID },\r\n          ),\r\n        ]);\r\n      } else {\r\n        anonymousLogger().debug(\r\n          'Skipped thread seen subscriptions for 9e7d98ae-5da5-42ca-b857-2f15dc9a63db',\r\n        );\r\n      }\r\n    };\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(notify);\r\n    } else {\r\n      await notify();\r\n    }\r\n  }\r\n\r\n  async markThreadUnseenFromMessage({\r\n    threadID,\r\n    messageID,\r\n    transaction,\r\n  }: {\r\n    threadID: UUID;\r\n    messageID: UUID;\r\n    transaction?: Transaction;\r\n  }) {\r\n    const { userID, orgID } = assertViewerHasIdentity(this.viewer);\r\n\r\n    // This will not return a message if the entire thread is being marked as unseen\r\n    const lastSeenMessage = await getSequelize().query(\r\n      `SELECT * from messages m\r\n      WHERE m.timestamp < (SELECT timestamp from messages m WHERE m.id = $1)\r\n      AND m.\"threadID\" = $2 \r\n      ORDER BY timestamp DESC\r\n      LIMIT 1`,\r\n      {\r\n        bind: [messageID, threadID],\r\n        type: QueryTypes.SELECT,\r\n        model: MessageEntity,\r\n        transaction,\r\n      },\r\n    );\r\n\r\n    const lastSeenMessageTimestamp = lastSeenMessage[0]?.timestamp ?? null;\r\n\r\n    const mostRecentMessage = await MessageEntity.findOne({\r\n      where: {\r\n        threadID,\r\n      },\r\n      order: [['timestamp', 'DESC']],\r\n      transaction,\r\n    });\r\n\r\n    if (!mostRecentMessage) {\r\n      throw new Error('No messages found in thread');\r\n    }\r\n\r\n    await getSequelize().query(\r\n      `INSERT INTO thread_participants (\"orgID\", \"userID\", \"threadID\", \"subscribed\", \"lastUnseenMessageTimestamp\", \"lastUnseenReactionTimestamp\", \"lastSeenTimestamp\")\r\n        VALUES ($1, $2, $3, $4, $5, $5, $6)\r\n        ON CONFLICT (\"orgID\", \"userID\", \"threadID\") DO UPDATE\r\n        SET \"lastSeenTimestamp\" = $6, \"lastUnseenMessageTimestamp\" = $5, \"lastUnseenReactionTimestamp\" = $5`,\r\n      {\r\n        bind: [\r\n          orgID,\r\n          userID,\r\n          threadID,\r\n          false,\r\n          mostRecentMessage.timestamp,\r\n          lastSeenMessageTimestamp,\r\n        ],\r\n        transaction,\r\n      },\r\n    );\r\n\r\n    const notify = async () => {\r\n      const location = await this.getLocation(threadID);\r\n      await Promise.all([\r\n        publishPubSubEvent('inbox-updated', { userID }, { threadID, location }),\r\n        publishPubSubEvent(\r\n          'thread-participants-updated-incremental',\r\n          {\r\n            threadID,\r\n          },\r\n          { userID },\r\n        ),\r\n      ]);\r\n    };\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(notify);\r\n    } else {\r\n      await notify();\r\n    }\r\n  }\r\n\r\n  async markAllThreadsSeen({\r\n    seen,\r\n    externalThreadID,\r\n    location,\r\n    resolved,\r\n    metadata,\r\n    viewer,\r\n    ...rest\r\n  }: MarkThreadsSeenInput) {\r\n    // Loosely based on ThreadLoader.loadThreadsForPage.\r\n    const _: Record<string, never> = rest;\r\n\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const orgIDs = assertViewerHasOrgs(this.viewer);\r\n\r\n    const whereConditions = [];\r\n    const extraJoins = [];\r\n    const bindVariables = [orgIDs, userID];\r\n\r\n    whereConditions.push('t.\"orgID\" = ANY($1)');\r\n\r\n    if (externalThreadID) {\r\n      bindVariables.push(externalThreadID);\r\n      whereConditions.push(`t.\"externalID\" = $${bindVariables.length}`);\r\n    }\r\n    if (resolved === true) {\r\n      whereConditions.push(`t.\"resolvedTimestamp\" IS NOT NULL`);\r\n    } else if (resolved === false) {\r\n      whereConditions.push(`t.\"resolvedTimestamp\" IS NULL`);\r\n    }\r\n\r\n    if (metadata) {\r\n      bindVariables.push(JSON.stringify(metadata));\r\n      whereConditions.push(`t.\"metadata\" @> $${bindVariables.length}`);\r\n    }\r\n    if (viewer) {\r\n      const viewerConditions: string[] = [];\r\n      for (const f of unique(viewer)) {\r\n        switch (f) {\r\n          case 'subscribed':\r\n            extraJoins.push(`LEFT JOIN thread_participants tp\r\n              ON (t.id = tp.\"threadID\" AND tp.\"userID\" = $2)`);\r\n            viewerConditions.push('tp.\"subscribed\" = TRUE');\r\n            break;\r\n          case 'mentioned':\r\n            viewerConditions.push(\r\n              `t.id IN (\r\n                SELECT \"threadID\" from messages m\r\n                  INNER JOIN message_mentions mm ON (m.id = mm.\"messageID\")\r\n                WHERE mm.\"userID\" = $2\r\n                  AND m.type = 'user_message'\r\n                  AND m.\"deletedTimestamp\" IS NULL\r\n              )`,\r\n            );\r\n            break;\r\n          default: {\r\n            const _f: never = f;\r\n            throw new Error(`Unknown filter: ${f}`);\r\n          }\r\n        }\r\n      }\r\n      if (viewerConditions.length) {\r\n        whereConditions.push(`(${viewerConditions.join(' OR ')})`);\r\n      }\r\n    }\r\n\r\n    if (location) {\r\n      bindVariables.push(JSON.stringify(location.value));\r\n      extraJoins.push(`INNER JOIN pages p\r\n         ON (p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`);\r\n      whereConditions.push(`p.\"contextData\" ${\r\n        location.partialMatch ? '@>' : '='\r\n      } $${bindVariables.length}::jsonb\r\n      `);\r\n      whereConditions.push(`p.\"orgID\" = ANY($1)`);\r\n    }\r\n\r\n    const seenVal = seen ? 'NOW()' : 'NULL';\r\n\r\n    const [threadIDs, _affected] = await getSequelize().query(\r\n      `INSERT INTO thread_participants\r\n          (\"orgID\", \"userID\", \"threadID\", \"subscribed\", \"lastUnseenMessageTimestamp\", \"lastUnseenReactionTimestamp\", \"lastSeenTimestamp\")\r\n        SELECT t.\"orgID\", $2, t.\"id\", false, NULL, NULL, ${seenVal}\r\n          FROM threads t\r\n          ${extraJoins.join(' ')}\r\n          WHERE ${whereConditions.join(' AND ')}\r\n      ON CONFLICT (\"orgID\", \"userID\", \"threadID\") DO UPDATE\r\n        SET \"lastUnseenMessageTimestamp\" = NULL, \"lastUnseenReactionTimestamp\" = NULL, \"lastSeenTimestamp\" = ${seenVal}\r\n      RETURNING \"threadID\"`,\r\n      { bind: bindVariables },\r\n    );\r\n\r\n    await Promise.all([\r\n      publishPubSubEvent('inbox-updated', { userID }, null),\r\n      Promise.all(\r\n        (threadIDs as { threadID: UUID }[]).map(({ threadID }) =>\r\n          publishPubSubEvent(\r\n            'thread-participants-updated-incremental',\r\n            { threadID },\r\n            { userID },\r\n          ),\r\n        ),\r\n      ),\r\n    ]);\r\n  }\r\n\r\n  async subscribeUsersToThread(\r\n    threadID: UUID,\r\n    userIDs: UUID[],\r\n    orgIDOverride?: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    const viewerOrgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const orgMembers = await OrgMembersEntity.findAll({\r\n      where: {\r\n        orgID: orgIDOverride ?? viewerOrgID,\r\n        userID: userIDs,\r\n      },\r\n      transaction,\r\n    });\r\n\r\n    await ThreadParticipantEntity.bulkCreate(\r\n      orgMembers.map((om) => ({\r\n        threadID,\r\n        userID: om.userID,\r\n        orgID: orgIDOverride ?? viewerOrgID,\r\n        subscribed: true,\r\n      })),\r\n      {\r\n        transaction,\r\n        updateOnDuplicate: ['subscribed'],\r\n      },\r\n    );\r\n  }\r\n\r\n  async unsubscribeUsersFromThread(\r\n    threadID: UUID,\r\n    userIDs: UUID[],\r\n    transaction?: Transaction,\r\n  ) {\r\n    await ThreadParticipantEntity.update(\r\n      { subscribed: false },\r\n      { where: { threadID, userID: userIDs }, transaction },\r\n    );\r\n  }\r\n\r\n  async markThreadNewlyActiveForOtherUsers(\r\n    threadID: UUID,\r\n    messageID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    // This function marks the thread active for every participant of the thread\r\n    // that is not the currently logged in user (this.viewer.userID) by setting\r\n    // the lastUnseenMessageTimestamp to that of the given message.\r\n    // This is called when the logged in user publishes a new message\r\n    // in the thread.\r\n\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const [rows]: [{ userID: UUID }[], any] = (await getSequelize().query(\r\n      `UPDATE thread_participants\r\n       SET \"lastUnseenMessageTimestamp\" = (\r\n         SELECT timestamp FROM messages WHERE id=$1\r\n       )\r\n       WHERE \"threadID\"=$2 AND \"userID\"!=$3\r\n       RETURNING \"userID\";`,\r\n      { bind: [messageID, threadID, userID], transaction },\r\n    )) as [any[], any];\r\n\r\n    const notify = async () => {\r\n      const location = await this.getLocation(threadID);\r\n      await Promise.all(\r\n        // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n        rows.map(({ userID }) => {\r\n          return publishPubSubEvent(\r\n            'inbox-updated',\r\n            { userID },\r\n            { threadID, location },\r\n          );\r\n        }),\r\n      );\r\n    };\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(notify);\r\n    } else {\r\n      await notify();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function marks the thread active for the participant who has received\r\n   * the reaction, by setting the lastUnseenReactionTimestamp to that of the given reaction.\r\n   * This is called when a logged in user reacts to someone's message.\r\n   */\r\n  async markThreadNewlyActiveForUser(\r\n    threadID: UUID,\r\n    reactionID: UUID,\r\n    userID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    assertViewerHasUser(this.viewer);\r\n\r\n    // Disabled if the user is reacting to their own message\r\n    if (userID === this.viewer.userID) {\r\n      return;\r\n    }\r\n\r\n    await getSequelize().query(\r\n      `UPDATE thread_participants\r\n       SET \"lastUnseenReactionTimestamp\" = (\r\n         SELECT timestamp FROM message_reactions WHERE id=$1\r\n       )\r\n       WHERE \"threadID\"=$2 AND \"userID\"=$3\r\n       RETURNING \"userID\";`,\r\n      { bind: [reactionID, threadID, userID], transaction },\r\n    );\r\n\r\n    const notify = async () => {\r\n      const location = await this.getLocation(threadID);\r\n      return await publishPubSubEvent(\r\n        'inbox-updated',\r\n        { userID },\r\n        { threadID, location },\r\n      );\r\n    };\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(notify);\r\n    } else {\r\n      await notify();\r\n    }\r\n  }\r\n\r\n  async updateLastUnseenMessageTimestamp(threadID: UUID, orgID: UUID) {\r\n    // This function is called when a message is deleted/restored, and is\r\n    // expected to update the lastUnseenMessageTimestamp field, which means\r\n    // it has to calculate, for each thread participant, what is the most\r\n    // recent message since they last saw the thread.\r\n\r\n    const threadLoader = await this.threadLoader();\r\n\r\n    // 1. retrieve all participants for this thread\r\n    // and check if thread has user messages\r\n    const [participants, threadHasUserMessages] = await Promise.all([\r\n      ThreadParticipantEntity.findAll({\r\n        where: { threadID: threadID, orgID },\r\n      }),\r\n      threadLoader.hasUserMessagesNoOrgCheck(threadID),\r\n    ]);\r\n\r\n    if (threadHasUserMessages) {\r\n      // 2. retrieve the latest unseen message by each of them\r\n      const lastUnseenMessages = await Promise.all(\r\n        participants.map(({ userID, lastSeenTimestamp }) => {\r\n          let whereOptions: WhereOptions<MessageEntity> = {\r\n            threadID,\r\n            sourceID: { [Op.ne]: userID },\r\n            orgID,\r\n            deletedTimestamp: { [Op.is]: null },\r\n          };\r\n\r\n          if (lastSeenTimestamp !== null) {\r\n            whereOptions = {\r\n              ...whereOptions,\r\n              // if lastSeenTimestamp is null, Postgres does not consider\r\n              // message.timestamp to be GT than lastSeenTimestamp so the row\r\n              // is not returned.  This means the lastUnseenMessageTimestamp on the\r\n              // Thread Participant Entities can get overwritten by null in step 3 below\r\n              // if a user had seen none of the messages in the thread,\r\n              // and the message incorrectly appears in the 'read' section of the inbox\r\n              // because it seems like the user has seen all the messages\r\n              timestamp: { [Op.gt]: lastSeenTimestamp },\r\n            };\r\n          }\r\n\r\n          return MessageEntity.findOne({\r\n            where: {\r\n              ...whereOptions,\r\n            },\r\n            order: [['timestamp', 'DESC']],\r\n          });\r\n        }),\r\n      );\r\n\r\n      // 3. update the lastUnseenMessageTimestamp for each participant,\r\n      await Promise.all(\r\n        participants.map(({ userID }, index) =>\r\n          ThreadParticipantEntity.update(\r\n            {\r\n              lastUnseenMessageTimestamp: lastUnseenMessages[index]\r\n                ? lastUnseenMessages[index]?.timestamp\r\n                : null,\r\n            },\r\n            { where: { threadID, userID, orgID } },\r\n          ),\r\n        ),\r\n      );\r\n    } else {\r\n      // In the case where there are no user messages\r\n      // we update the lastUnseenMessageTimestamp for each participant as null\r\n      await ThreadParticipantEntity.update(\r\n        {\r\n          lastUnseenMessageTimestamp: null,\r\n        },\r\n        { where: { threadID, orgID } },\r\n      );\r\n    }\r\n\r\n    // 4. notify users via pubsub\r\n    const location = await this.getLocation(threadID);\r\n    await Promise.all(\r\n      participants.map(({ userID }) =>\r\n        publishPubSubEvent('inbox-updated', { userID }, { threadID, location }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  async setViewerSubscribed(\r\n    thread: ThreadEntity,\r\n    subscribed: boolean,\r\n    transaction?: Transaction,\r\n  ): Promise<true> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    await ThreadParticipantEntity.upsert(\r\n      { threadID: thread.id, userID, orgID: thread.orgID, subscribed },\r\n      {\r\n        transaction,\r\n      },\r\n    );\r\n\r\n    const notify = async () => {\r\n      const location = await this.getLocation(thread.id);\r\n      await Promise.all([\r\n        publishPubSubEvent(\r\n          'inbox-updated',\r\n          { userID },\r\n          { threadID: thread.id, location },\r\n        ),\r\n        publishPubSubEvent(\r\n          'thread-subscriber-updated',\r\n          { threadID: thread.id },\r\n          { userID },\r\n        ),\r\n      ]);\r\n    };\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(notify);\r\n    } else {\r\n      await notify();\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\n\r\nexport async function maybeAddEveryOrgMemberAsThreadParticipants(\r\n  viewer: Viewer,\r\n  flagsUser: FlagsUser,\r\n  threadID: UUID,\r\n) {\r\n  // Some customers would like their users to be subscribed to all threads in\r\n  // their org - they want to see ALL activity in their inbox notifications\r\n  if (await getFeatureFlagValue('subscribe_all_org_members', flagsUser)) {\r\n    await addEveryOrgMemberToThreadParticipants(viewer, threadID);\r\n  }\r\n}\r\n\r\n// Note this does NOT add linked org members, only the original org\r\nasync function addEveryOrgMemberToThreadParticipants(\r\n  viewer: Viewer,\r\n  threadID: UUID,\r\n) {\r\n  const orgMembersLoader = new OrgMembersLoader(viewer);\r\n  const orgMembers = await orgMembersLoader.loadNotifiableOrgMembers(undefined);\r\n\r\n  const userIDs = orgMembers.map((u) => u.userID);\r\n\r\n  return await new ThreadParticipantMutator(\r\n    viewer,\r\n    null,\r\n  ).subscribeUsersToThread(threadID, userIDs);\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasOrgs } from 'server/src/auth/index.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport async function addAdditionalSubscribersOnThreadCreation(\r\n  context: RequestContext,\r\n  additionalSubscribers: string[],\r\n  threadID: UUID,\r\n) {\r\n  const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n  const users = await context.loaders.userLoader.loadUsersByExternalIDsInOrg(\r\n    additionalSubscribers,\r\n    orgIDs,\r\n  );\r\n  const userIDs = users.map((u) => u.id);\r\n  if (userIDs.length === 0) {\r\n    return;\r\n  }\r\n  return await new ThreadParticipantMutator(\r\n    context.session.viewer,\r\n    context.loaders,\r\n  ).subscribeUsersToThread(threadID, userIDs);\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { PageContext } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasSingleOrgForWrite,\r\n} from 'server/src/auth/index.ts';\r\nimport { getPageContextHash } from 'server/src/util/hash.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\n\r\nexport class PageMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async createPageIfNotExists(pageContext: PageContext) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const [contextHash, contextData] = getPageContextHash(pageContext);\r\n\r\n    // ignoreDuplicates seems to be only supported for bulkCreate\r\n    await PageEntity.bulkCreate(\r\n      [\r\n        {\r\n          orgID,\r\n          contextHash,\r\n          contextData,\r\n        },\r\n      ],\r\n      {\r\n        ignoreDuplicates: true,\r\n      },\r\n    );\r\n\r\n    return contextHash;\r\n  }\r\n\r\n  async getPageCreateIfNotExists(\r\n    pageContext: PageContext,\r\n    transaction: Transaction,\r\n  ) {\r\n    const orgID = assertViewerHasSingleOrgForWrite(\r\n      this.viewer,\r\n      'Must specify a groupID when creating a new location',\r\n    );\r\n    const [contextHash, contextData] = getPageContextHash(pageContext);\r\n    const [pageEntity] = await PageEntity.findOrCreate({\r\n      where: {\r\n        orgID,\r\n        contextHash,\r\n      },\r\n      defaults: {\r\n        orgID,\r\n        contextHash,\r\n        contextData,\r\n      },\r\n      transaction,\r\n    });\r\n    return { page: pageEntity, pageContextHash: contextHash };\r\n  }\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { Location } from '@cord-sdk/types';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nexport async function publishNewThreadEvents(\r\n  location: Location,\r\n  thread: ThreadEntity,\r\n  transaction?: Transaction,\r\n) {\r\n  const notify = async () => {\r\n    await publishPubSubEvent(\r\n      'page-thread-added-with-location',\r\n      { orgID: thread.orgID },\r\n      { threadID: thread.id, location },\r\n    );\r\n\r\n    await publishPubSubEvent(\r\n      'thread-created',\r\n      { threadID: thread.id },\r\n      { threadID: thread.id },\r\n    );\r\n  };\r\n\r\n  if (transaction) {\r\n    transaction.afterCommit(notify);\r\n  } else {\r\n    await notify();\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport type { ApplicationData } from '@cord-sdk/types';\r\nimport { customEmailTemplateToAPIData } from 'server/src/public/routes/platform/applications/util.ts';\r\n\r\nasync function GetApplicationHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const appID = req.params.appID;\r\n  if (!isUUID.default(appID)) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: 'Project ID is invalid',\r\n    });\r\n  }\r\n\r\n  const app = await ApplicationEntity.findOne({\r\n    where: { id: appID, customerID },\r\n  });\r\n  if (!app) {\r\n    throw new ApiCallerError('project_not_found', {\r\n      message: `Project ${appID} not found.`,\r\n    });\r\n  }\r\n\r\n  const result: ApplicationData = {\r\n    id: app.id,\r\n    secret: app.sharedSecret,\r\n    name: app.name,\r\n    iconURL: app.iconURL,\r\n    eventWebhookURL: app.eventWebhookURL,\r\n    redirectURI: app.redirectURI,\r\n    emailSettings: customEmailTemplateToAPIData(\r\n      app.customEmailTemplate,\r\n      app.enableEmailNotifications,\r\n    ),\r\n    createdTimestamp: app.createdTimestamp,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(GetApplicationHandler);\r\n", "import type { EmailSettings } from '@cord-sdk/types';\r\nimport {\r\n  createDefaultSenderEmailName,\r\n  getEmailInfoFromSenderData,\r\n} from 'common/util/index.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\nexport function emailSettingsToDbData(\r\n  input: Partial<EmailSettings>,\r\n  applicationName: string,\r\n  existingData?: CustomEmailTemplate | null,\r\n) {\r\n  if (!input) {\r\n    return undefined;\r\n  }\r\n\r\n  const { name, sender, logoConfig, imageURL } = input;\r\n\r\n  // We do this to replicate what happens when we update a value via the\r\n  // console UI and also prevent overriding values\r\n  const partnerName = name ?? existingData?.partnerName ?? '';\r\n  const emailTemplate: CustomEmailTemplate = {\r\n    ...existingData,\r\n    partnerName,\r\n    imageURL: imageURL ?? existingData?.imageURL ?? '',\r\n  };\r\n\r\n  if (sender) {\r\n    emailTemplate['sender'] = `${partnerName} <${sender}>`;\r\n  } else if (!existingData?.sender) {\r\n    const defaultSenderEmail = createDefaultSenderEmailName(applicationName);\r\n    emailTemplate['sender'] = `${partnerName} <${defaultSenderEmail}@cord.fyi>`;\r\n  }\r\n\r\n  // TODO(Khadija): update the api type for logoConfig which will help with cleaning this up\r\n  if (logoConfig) {\r\n    if ('height' in logoConfig) {\r\n      emailTemplate['logoConfig'] = {\r\n        height: Math.round(logoConfig.height).toString(),\r\n        width: 'auto',\r\n      };\r\n    } else if ('width' in logoConfig) {\r\n      emailTemplate['logoConfig'] = {\r\n        width: Math.round(logoConfig.width).toString(),\r\n        height: 'auto',\r\n      };\r\n    }\r\n  } // setting the default if not already set\r\n  else if (!existingData?.logoConfig) {\r\n    emailTemplate['logoConfig'] = {\r\n      width: '140',\r\n      height: 'auto',\r\n    };\r\n  }\r\n\r\n  return emailTemplate;\r\n}\r\n\r\nexport function customEmailTemplateToAPIData(\r\n  data: CustomEmailTemplate | null,\r\n  enableEmailNotifications: boolean,\r\n): EmailSettings {\r\n  const emailTemplate: EmailSettings = {\r\n    name: data?.partnerName || null,\r\n    imageURL: data?.imageURL || null,\r\n    sender: getEmailInfoFromSenderData(data?.sender)?.emailAddress || null,\r\n    logoConfig: null,\r\n    enableEmailNotifications,\r\n  };\r\n\r\n  if (data?.logoConfig) {\r\n    emailTemplate['logoConfig'] =\r\n      data.logoConfig.height === 'auto'\r\n        ? { width: Number(data.logoConfig.width) }\r\n        : { height: Number(data.logoConfig.height) };\r\n  }\r\n\r\n  return emailTemplate;\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nasync function deleteOrganizationHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.orgID;\r\n  validateExternalID(externalID, 'orgID');\r\n\r\n  await getSequelize().transaction(async (transaction) => {\r\n    const org = await OrgEntity.findOne({\r\n      where: {\r\n        externalID,\r\n        externalProvider: AuthProviderType.PLATFORM,\r\n        platformApplicationID,\r\n      },\r\n      transaction,\r\n    });\r\n    if (!org) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n\r\n    await org.destroy();\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully deleted group ${externalID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(deleteOrganizationHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\n\r\nasync function DeleteApplicationHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const { secret, ...rest } = validate.DeleteApplicationVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const appID = req.params.appID;\r\n  if (!isUUID.default(appID)) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: 'Project ID is invalid',\r\n    });\r\n  }\r\n  const app = await ApplicationEntity.findOne({\r\n    where: { id: appID, customerID, sharedSecret: secret },\r\n  });\r\n\r\n  if (!app) {\r\n    throw new ApiCallerError('project_not_found', {\r\n      message: `Project ${appID} not found.`,\r\n    });\r\n  }\r\n\r\n  await app.destroy();\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\uD83D\uDC80 You successfully deleted project ${req.params.appID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(DeleteApplicationHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\n\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { verifyWebhookURL } from 'server/src/webhook/verifyWebhookURL.ts';\r\nimport { emailSettingsToDbData } from 'server/src/public/routes/platform/applications/util.ts';\r\n\r\nasync function UpdateApplicationHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const appID = req.params.appID;\r\n  if (!isUUID.default(appID)) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: 'Project ID is invalid',\r\n    });\r\n  }\r\n  const app = await ApplicationEntity.findOne({\r\n    where: { id: appID, customerID },\r\n  });\r\n\r\n  if (!app) {\r\n    throw new ApiCallerError('project_not_found', {\r\n      message: `Project ${appID} not found.`,\r\n    });\r\n  }\r\n\r\n  const {\r\n    name,\r\n    iconURL,\r\n    eventWebhookURL,\r\n    redirectURI,\r\n    emailSettings,\r\n    ...rest\r\n  } = validate.UpdateApplicationVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  // If eventWebhookURL is not null and is different to the URL on the database, then verify URL\r\n  if (eventWebhookURL && eventWebhookURL !== app.eventWebhookURL) {\r\n    try {\r\n      await verifyWebhookURL(app, eventWebhookURL);\r\n    } catch (e: any) {\r\n      throw new ApiCallerError('webhook_url_not_verified', {\r\n        message: `${e.message} For more information see: https://docs.cord.com/reference/events-webhook/events/url-verification`,\r\n      });\r\n    }\r\n  }\r\n\r\n  let updatedCustomEmailTemplate;\r\n  if (emailSettings) {\r\n    updatedCustomEmailTemplate = emailSettingsToDbData(\r\n      emailSettings,\r\n      app.name,\r\n      app.customEmailTemplate,\r\n    );\r\n  }\r\n\r\n  await app.update({\r\n    name,\r\n    iconURL,\r\n    eventWebhookURL,\r\n    redirectURI,\r\n    customEmailTemplate: updatedCustomEmailTemplate,\r\n    enableEmailNotifications:\r\n      emailSettings?.enableEmailNotifications ?? app.enableEmailNotifications,\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated project ${appID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(UpdateApplicationHandler);\r\n", "import type { RequestInit, Response } from 'node-fetch';\r\nimport nodeFetch from 'node-fetch';\r\nimport { manageConnection } from 'server/src/util/third_party/ssrf-req-filter.mjs';\r\n\r\n/**\r\n * Equivalent of fetch(), but safe to use on URLs provided by external users. If\r\n * you are fetching a URL provided by an end user, you MUST use this function.\r\n */\r\nexport async function safeFetch(\r\n  url: string,\r\n  init?: RequestInit,\r\n): Promise<Response> {\r\n  return await nodeFetch(url, { ...init, agent: manageConnection(url) });\r\n}\r\n", "// Below code copied from https://github.com/y-mehta/ssrf-req-filter and updated\r\n// to use ESM, etc.\r\n\r\n// https://github.com/y-mehta/ssrf-req-filter/blob/286e29db59580f1d8df93449318ef4d91123768e/lib/index.js\r\n\r\n/* eslint-disable */\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2020 Yash Mehta\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport ipaddr from 'ipaddr.js';\r\n\r\nconst checkIp = (ip) => {\r\n  if (!ipaddr.isValid(ip)) {\r\n    return true;\r\n  }\r\n  try {\r\n    const addr = ipaddr.parse(ip);\r\n    const range = addr.range();\r\n    if (range !== 'unicast') {\r\n      return false; // Private IP Range\r\n    }\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// prevent memory leak\r\nconst ACTIVE = Symbol('active');\r\n\r\nconst requestFilterHandler = (agent) => {\r\n  if (agent[ACTIVE]) {\r\n    return agent;\r\n  }\r\n  agent[ACTIVE] = true;\r\n  const { createConnection } = agent;\r\n  agent.createConnection = function (options, func) {\r\n    const { host: address } = options;\r\n    if (!checkIp(address)) {\r\n      throw new Error(`Call to ${address} is blocked.`);\r\n    }\r\n    const socket = createConnection.call(this, options, func);\r\n    socket.on('lookup', (error, address) => {\r\n      if (error || checkIp(address)) {\r\n        return false;\r\n      }\r\n      return socket.destroy(new Error(`Call to ${address} is blocked.`));\r\n    });\r\n    return socket;\r\n  };\r\n  return agent;\r\n};\r\n\r\nexport const manageConnection = (url) => {\r\n  const httpAgent = new http.Agent();\r\n  const httpsAgent = new https.Agent();\r\n  const agent = url.startsWith('https') ? httpsAgent : httpAgent;\r\n  return requestFilterHandler(agent);\r\n};\r\n", "import { createHmac } from 'crypto';\r\n\r\nimport jsonStableStringify from 'fast-json-stable-stringify';\r\n\r\nimport type {\r\n  WebhookPayloads,\r\n  ClientUserData,\r\n  WebhookTypes,\r\n  WebhookWrapperProperties,\r\n} from '@cord-sdk/types';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { convertStructuredMessageToText } from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport {\r\n  getThreadLocation,\r\n  loadParticipants,\r\n  loadUserMessagesCount,\r\n  loadSubscribers,\r\n  loadTypingUsers,\r\n  loadActionMessagesCount,\r\n  loadDeletedMessagesCount,\r\n  loadMentioned,\r\n  loadRepliers,\r\n  loadActionMessageRepliers,\r\n} from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\nimport { whereAggregatedNotificationEntity } from 'server/src/public/mutations/notifications/utils.ts';\r\nimport { buildNotification } from 'server/src/notifications/fetch.ts';\r\nimport { gqlNotificationToNotificationVariables } from 'server/src/notifications/convert.ts';\r\nimport { createViewerAndContext } from 'server/src/util/createViewerAndContext.ts';\r\nimport { getCoreMessageData } from 'server/src/public/routes/platform/messages/getCoreMessageData.ts';\r\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { userDisplayName, userFullName } from 'server/src/entity/user/util.ts';\r\nimport submitAsync from 'server/src/asyncTier/submitAsync.ts';\r\n\r\n// This defines the data that publishEventToWebhook will receive except that\r\n// the field type is omitted on purpose to make typechecker happy.\r\n// The type field is added in the WebhookEvent type. For more details, see\r\n// (https://stackoverflow.com/questions/76492435/how-to-type-a-dispatch-function-in-typescript?noredirect=1#comment134877125_76492435)\r\ntype WebhookEvents = {\r\n  'thread-message-added': {\r\n    threadID: UUID;\r\n    messageID: UUID;\r\n  };\r\n  'notification-created': {\r\n    notificationID: string;\r\n    userID: UUID; //recipientID\r\n  };\r\n  'url-verification': object;\r\n};\r\n\r\ntype WebhookEvent<T extends WebhookTypes> = {\r\n  [Type in WebhookTypes]: WebhookEvents[Type] & { type: Type };\r\n}[T];\r\n\r\n// All payload IDs which are sent to customers are external IDs\r\nexport type WebhookPayload<T extends WebhookTypes> = {\r\n  [K in T]: WebhookPayloads[K];\r\n}[T];\r\n\r\ntype HandlerType = {\r\n  [Type in WebhookTypes]: (\r\n    event: WebhookEvent<Type>,\r\n  ) => Promise<WebhookPayload<Type>>;\r\n};\r\n\r\nfunction assemblePayload<T extends WebhookTypes>(\r\n  type: T,\r\n  appID: UUID,\r\n  timestamp: string,\r\n  eventBody: WebhookPayload<T>,\r\n): WebhookWrapperProperties<T> & WebhookPayload<T> {\r\n  return {\r\n    type,\r\n    applicationID: appID,\r\n    projectID: appID,\r\n    timestamp,\r\n    event: eventBody,\r\n    ...eventBody, // TODO: remove when we're sure consuming code has been updated\r\n  };\r\n}\r\n\r\nexport async function publishEventToWebhook<T extends WebhookTypes>(\r\n  app: ApplicationEntity,\r\n  event: WebhookEvent<T>,\r\n) {\r\n  // Webhooks can be specified in two places.\r\n  // The first is directly on the application by the application developer.  This\r\n  // is a customer going in to the console or via api and setting the singular\r\n  // callback location for events\r\n  // The second place is via webhook registration and is used by Zapier\r\n  // and perhaps other applications to register webhooks.\r\n  // We need to check both locations as possible places to send the events\r\n  const webhooks = [];\r\n  if (\r\n    app.eventWebhookURL &&\r\n    app.eventWebhookSubscriptions?.includes(event.type)\r\n  ) {\r\n    webhooks.push(app.eventWebhookURL);\r\n  }\r\n\r\n  const applicationWebhooks = await ApplicationWebhookEntity.findAll({\r\n    where: { platformApplicationID: app.id },\r\n  });\r\n  webhooks.push(\r\n    ...applicationWebhooks\r\n      .filter(\r\n        (entity) =>\r\n          entity.eventWebhookURL &&\r\n          entity.eventWebhookSubscriptions?.includes(event.type),\r\n      )\r\n      .map((entity) => entity.eventWebhookURL),\r\n  );\r\n\r\n  if (webhooks.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const handler = handlers[event.type];\r\n  const payload = await handler(event);\r\n\r\n  await postEvent(app, webhooks, event.type, payload);\r\n}\r\n\r\nexport function authenticationHeader<T extends WebhookTypes>(\r\n  eventType: WebhookTypes,\r\n  app: ApplicationEntity,\r\n  event: WebhookPayload<T>,\r\n) {\r\n  // This is based on how Slack does it:\r\n  //   https://api.slack.com/authentication/verifying-requests-from-slack\r\n  const timestamp = Date.now().toString();\r\n  const payloadString = jsonStableStringify(\r\n    assemblePayload(eventType, app.id, timestamp, event),\r\n  );\r\n  const hmac = createHmac('sha256', app.sharedSecret);\r\n  hmac.update(timestamp + ':' + payloadString);\r\n  const signature = hmac.digest('base64');\r\n\r\n  return [payloadString, timestamp, signature];\r\n}\r\n\r\nasync function postEvent<T extends WebhookTypes>(\r\n  app: ApplicationEntity,\r\n  webhookURLs: string[],\r\n  eventType: WebhookTypes,\r\n  event: WebhookPayload<T>,\r\n) {\r\n  if (webhookURLs.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const [payloadString, timestamp, signature] = authenticationHeader(\r\n    eventType,\r\n    app,\r\n    event,\r\n  );\r\n\r\n  await Promise.all(\r\n    webhookURLs.map(async (url) => {\r\n      void submitAsync('notifyWebhook', {\r\n        retryCount: 0,\r\n        eventType: eventType,\r\n        appID: app.id,\r\n        url: url,\r\n        timestamp: timestamp,\r\n        signature: signature,\r\n        payload: payloadString,\r\n        event: event,\r\n      });\r\n    }),\r\n  );\r\n}\r\n\r\nexport const handlers: HandlerType = {\r\n  'thread-message-added': handleThreadMessageAddedEvent,\r\n  'notification-created': handleNotificationCreatedEvent,\r\n  'url-verification': handleVerifyWebhookURL,\r\n};\r\n\r\nexport async function handleVerifyWebhookURL(\r\n  _event: WebhookEvent<'url-verification'>,\r\n): Promise<WebhookPayload<'url-verification'>> {\r\n  return {\r\n    message: 'Please respond with a HTTP 200 status code.',\r\n  };\r\n}\r\n\r\nasync function handleThreadMessageAddedEvent(\r\n  event: WebhookEvent<'thread-message-added'>,\r\n): Promise<WebhookPayload<'thread-message-added'>> {\r\n  const [message, thread, notifications] = await Promise.all([\r\n    MessageEntity.findByPk(event.messageID),\r\n    ThreadEntity.findByPk(event.threadID),\r\n    NotificationEntity.findAll({ where: { messageID: event.messageID } }),\r\n  ]);\r\n\r\n  if (!message || !thread) {\r\n    throw new Error(\r\n      'Unable to find message and/or thread when creating webhook payload',\r\n    );\r\n  }\r\n\r\n  const notifiedUserIntIDs = notifications.map((n) => n.recipientID);\r\n\r\n  const loaders = await getNewLoaders(\r\n    Viewer.createOrgViewer(thread.orgID, thread.platformApplicationID),\r\n  );\r\n\r\n  const [\r\n    users,\r\n    org,\r\n    repliers,\r\n    actionMessageRepliers,\r\n    participants,\r\n    subscribers,\r\n    mentioned,\r\n    typing,\r\n    totalThreadMessages,\r\n    userThreadMessages,\r\n    actionThreadMessages,\r\n    deletedThreadMessages,\r\n    location,\r\n    coreMessageData,\r\n  ] = await Promise.all([\r\n    UserEntity.findAll({\r\n      where: { id: [message.sourceID, ...notifiedUserIntIDs] },\r\n    }),\r\n    OrgEntity.findByPk(thread.orgID),\r\n    loadRepliers(loaders.threadLoader, thread.id),\r\n    loadActionMessageRepliers(loaders.threadLoader, thread.id),\r\n    loadParticipants(thread.id),\r\n    loadSubscribers(thread.id),\r\n    loadMentioned(thread.id),\r\n    loadTypingUsers(thread.id),\r\n    MessageEntity.count({ where: { threadID: thread.id } }),\r\n    loadUserMessagesCount(thread.id),\r\n    loadActionMessagesCount(thread.id),\r\n    loadDeletedMessagesCount(thread.id),\r\n    getThreadLocation(thread),\r\n    getCoreMessageData(loaders, message, thread),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new Error('Unable to find org when creating webhook payload');\r\n  }\r\n\r\n  const externalUserInfo = users.reduce<Record<string, ClientUserData>>(\r\n    (obj, u) => {\r\n      obj[u.id] = {\r\n        id: u.externalID,\r\n        metadata: u.metadata,\r\n        name: u.name,\r\n        shortName: u.screenName,\r\n        displayName: userDisplayName(u),\r\n        secondaryDisplayName: userFullName(u),\r\n        profilePictureURL: u.profilePictureURL,\r\n      };\r\n      return obj;\r\n    },\r\n    {},\r\n  );\r\n\r\n  const usersToNotifyInfo = notifications.map((n) => ({\r\n    replyActions: n.replyActions,\r\n    ...externalUserInfo[n.recipientID],\r\n  }));\r\n\r\n  return {\r\n    // TODO: deprecate this first chunk (see comment on WebhookPayloads interface)\r\n    messageID: message.externalID,\r\n    threadID: thread.externalID,\r\n    orgID: org.externalID,\r\n    organizationID: org.externalID,\r\n    groupID: org.externalID,\r\n    applicationID: message.platformApplicationID,\r\n    projectID: message.platformApplicationID,\r\n    author: externalUserInfo[message.sourceID],\r\n    content: message.content,\r\n    plaintext: convertStructuredMessageToText(message.content),\r\n    url: message.url ?? thread.url,\r\n    messageType: message.type,\r\n    metadata: message.metadata,\r\n\r\n    // New format:\r\n    usersToNotify: usersToNotifyInfo,\r\n    message: {\r\n      author: externalUserInfo[message.sourceID],\r\n      ...coreMessageData,\r\n    },\r\n    thread: {\r\n      id: thread.externalID,\r\n      organizationID: org.externalID,\r\n      groupID: org.externalID,\r\n      name: thread.name,\r\n      metadata: thread.metadata,\r\n      location,\r\n      total: totalThreadMessages,\r\n      userMessages: userThreadMessages,\r\n      actionMessages: actionThreadMessages,\r\n      deletedMessages: deletedThreadMessages,\r\n      resolved: !!thread.resolvedTimestamp,\r\n      resolvedTimestamp: thread.resolvedTimestamp,\r\n      participants,\r\n      subscribers,\r\n      mentioned,\r\n      repliers,\r\n      actionMessageRepliers,\r\n      typing,\r\n      url: thread.url,\r\n      extraClassnames: thread.extraClassnames,\r\n    },\r\n  };\r\n}\r\n\r\nasync function handleNotificationCreatedEvent(\r\n  event: WebhookEvent<'notification-created'>,\r\n): Promise<WebhookPayload<'notification-created'>> {\r\n  const notif = await NotificationEntity.findByPk(event.notificationID);\r\n\r\n  if (!notif) {\r\n    throw new Error(\r\n      `Unable to find notification when creating webhook payload. notificationID: ${event.notificationID}, userID: ${event.userID}`,\r\n    );\r\n  }\r\n\r\n  const platformApplicationID = notif.platformApplicationID;\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: { platformApplicationID, id: event.userID },\r\n  });\r\n  if (!user) {\r\n    throw new Error(\r\n      'Unable to find recipient user when creating webhook payload',\r\n    );\r\n  }\r\n\r\n  const context = await createViewerAndContext(\r\n    platformApplicationID,\r\n    user,\r\n    'webhook',\r\n  );\r\n\r\n  const aggregateEntities = await NotificationEntity.findAll({\r\n    where: whereAggregatedNotificationEntity(notif),\r\n  });\r\n  const gqlNotif = await buildNotification(context, aggregateEntities);\r\n\r\n  if (!gqlNotif) {\r\n    throw new Error('No notification found when creating webhook payload');\r\n  }\r\n\r\n  const notifVariables = await gqlNotificationToNotificationVariables(\r\n    context.loaders,\r\n    gqlNotif,\r\n  );\r\n\r\n  return {\r\n    recipientUserID: user.externalID,\r\n    ...notifVariables,\r\n  };\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { Op, QueryTypes } from 'sequelize';\r\nimport type { WhereOptions } from 'sequelize';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nimport {\r\n  externalizeID,\r\n  extractInternalID,\r\n  isExternalizedID,\r\n} from 'common/util/externalIDs.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { getUsersTyping } from 'server/src/presence/typing.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport type { ThreadLoader } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport { getCoreThreadData } from 'server/src/public/routes/platform/threads/util/getCoreThreadData.ts';\r\n\r\nexport async function loadTypingUsers(threadID: string) {\r\n  const typingUserIDs = await getUsersTyping(threadID);\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: { id: typingUserIDs },\r\n  });\r\n\r\n  return users.map((u) => u.externalID);\r\n}\r\n\r\nexport async function loadUserMessagesCount(threadID: string) {\r\n  return await MessageEntity.count({\r\n    where: { threadID, type: 'user_message', deletedTimestamp: null },\r\n  });\r\n}\r\n\r\nexport async function loadActionMessagesCount(threadID: string) {\r\n  return await MessageEntity.count({\r\n    where: { threadID, type: 'action_message', deletedTimestamp: null },\r\n  });\r\n}\r\n\r\nexport async function loadDeletedMessagesCount(threadID: string) {\r\n  return await MessageEntity.count({\r\n    where: { threadID, deletedTimestamp: { [Op.not]: null } },\r\n  });\r\n}\r\n\r\nexport async function loadParticipants(threadID: string) {\r\n  const participants = await ThreadParticipantEntity.findAll({\r\n    where: { threadID },\r\n  });\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: { id: participants.map((p) => p.userID) },\r\n  });\r\n\r\n  const userMap = new Map<string, UserEntity>();\r\n  users.forEach((u) => userMap.set(u.id, u));\r\n\r\n  return participants.map((p) => {\r\n    const u = userMap.get(p.userID);\r\n    return {\r\n      lastSeenTimestamp: p.lastSeenTimestamp,\r\n      userID: u ? u.externalID ?? externalizeID(u.id) : null,\r\n      displayName: u?.name\r\n        ? userDisplayName({ name: u.name, screenName: u.screenName })\r\n        : null,\r\n    };\r\n  });\r\n}\r\n\r\nexport async function loadSubscribers(threadID: string) {\r\n  const subscribers = await getSequelize().query(\r\n    `\r\n    SELECT \"externalID\" FROM cord.users u\r\n    LEFT JOIN cord.thread_participants as tp on tp.\"userID\"=u.id\r\n    WHERE tp.\"threadID\"=$1\r\n    AND tp.subscribed IS TRUE;\r\n  `,\r\n    { bind: [threadID], type: QueryTypes.SELECT, model: UserEntity },\r\n  );\r\n  return subscribers.map((u) => u.externalID);\r\n}\r\n\r\nexport async function loadMentioned(threadID: string) {\r\n  const mentioned = await getSequelize().query<{ externalID: string }>(\r\n    `\r\n      SELECT DISTINCT u.\"externalID\" FROM users u\r\n      INNER JOIN message_mentions mm ON (u.id = mm.\"userID\")\r\n      INNER JOIN messages m ON (mm.\"messageID\" = m.id)\r\n      WHERE m.\"threadID\" = $1\r\n    `,\r\n    {\r\n      bind: [threadID],\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n  return mentioned.map((u) => u.externalID);\r\n}\r\n\r\nexport async function loadRepliers(\r\n  threadLoader: ThreadLoader,\r\n  threadID: string,\r\n) {\r\n  const replyingUsers =\r\n    await threadLoader.loadReplyingUserIDsNoOrgCheck(threadID);\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: { id: replyingUsers },\r\n  });\r\n\r\n  return users.map((user) => user.externalID);\r\n}\r\n\r\nexport async function loadActionMessageRepliers(\r\n  threadLoader: ThreadLoader,\r\n  threadID: string,\r\n) {\r\n  const replyingUsers =\r\n    await threadLoader.loadActionMessageReplyingUserIDsNoOrgCheck(threadID);\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: { id: replyingUsers },\r\n  });\r\n\r\n  return users.map((user) => user.externalID);\r\n}\r\n\r\nexport async function loadThread(\r\n  platformApplicationID: string,\r\n  externalID: string,\r\n) {\r\n  if (!externalID) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  const where: WhereOptions<ThreadEntity> = { platformApplicationID };\r\n  if (isExternalizedID(externalID)) {\r\n    const internalID = extractInternalID(externalID);\r\n    if (!internalID) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: `${externalID} is not a valid thread ID`,\r\n      });\r\n    }\r\n    where.id = internalID;\r\n  } else {\r\n    where.externalID = externalID;\r\n  }\r\n\r\n  return await ThreadEntity.findOne({ where });\r\n}\r\n\r\nexport async function getThreadLocation(thread: ThreadEntity) {\r\n  const page = await PageEntity.findOne({\r\n    where: { orgID: thread.orgID, contextHash: thread.pageContextHash },\r\n  });\r\n\r\n  if (!page) {\r\n    throw new Error('Unable to find thread location');\r\n  }\r\n\r\n  return page.contextData;\r\n}\r\n\r\nasync function getThreadHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const thread = await loadThread(platformApplicationID, req.params.threadID);\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n  const loaders = await getNewLoaders(\r\n    Viewer.createOrgViewer(thread.orgID, thread.platformApplicationID),\r\n  );\r\n  const result = await getCoreThreadData(loaders, thread);\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getThreadHandler);\r\n", "import { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { TYPING_TIMEOUT_TTL_SECONDS } from 'common/const/Timing.ts';\r\nimport { getRedis, multiOperationSucceeded } from 'server/src/redis/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\r\n\r\nasync function publishUpdate(threadID: UUID) {\r\n  const users = await getUsersTyping(threadID);\r\n\r\n  return await publishPubSubEvent(\r\n    'thread-typing-users-updated',\r\n    { threadID },\r\n    { users },\r\n  );\r\n}\r\n\r\nfunction makeSetKey(threadID: UUID) {\r\n  return `typing-${threadID}`;\r\n}\r\n\r\nconst timeouts = new Map<string, NodeJS.Timeout>();\r\n\r\n// returns a key for indexing into \"timeouts\" map\r\nfunction makeUserThreadKey(threadID: UUID, userID: UUID) {\r\n  return `typing-user-${userID}-${threadID}`;\r\n}\r\n\r\nexport function setUserTyping(\r\n  logger: Logger,\r\n  threadID: UUID,\r\n  userID: UUID,\r\n  typing: boolean,\r\n) {\r\n  if (typing) {\r\n    return add(logger, threadID, userID);\r\n  } else {\r\n    return remove(threadID, userID);\r\n  }\r\n}\r\n\r\n// Mark a user as typing by adding \"userID\" to the Redis set for the given\r\n// thread. The \"score\" of \"userID\" in the set will be updated/set to current\r\n// time in milliseconds. The idea is that members will low scores (old\r\n// timestamps) will not be considered to be members of the set.\r\nasync function add(logger: Logger, threadID: UUID, userID: UUID) {\r\n  clearPreviousTimeout(threadID, userID);\r\n\r\n  const newTimestamp = Date.now();\r\n\r\n  const setKey = makeSetKey(threadID);\r\n  const errsAndVals = await getRedis()\r\n    .multi()\r\n    .zscore(setKey, userID) // errsAndVals[0]\r\n    .zadd(setKey, newTimestamp, userID) // errsAndVals[1]\r\n    .expire(setKey, TYPING_TIMEOUT_TTL_SECONDS) // errsAndVals[2]\r\n    .exec();\r\n\r\n  if (!multiOperationSucceeded(errsAndVals, 'Failed to mark user as typing')) {\r\n    return;\r\n  }\r\n\r\n  // because we need to push to clients whenever a user becomes considered as\r\n  // \"not typing\", run a check in TYPING_TIMEOUT_TTL_SECONDS plus a bit (100ms)\r\n  // whether the user is still considered to be \"typing\".\r\n  timeouts.set(\r\n    makeUserThreadKey(threadID, userID),\r\n    setTimeoutAsync(\r\n      () =>\r\n        notifyIfNotTyping(threadID, userID).catch(\r\n          logger.exceptionLogger(\r\n            'Failed to notify about expired typing status',\r\n          ),\r\n        ),\r\n      TYPING_TIMEOUT_TTL_SECONDS * 1000 + 100,\r\n    ),\r\n  );\r\n\r\n  const previousUserTimestamp = errsAndVals[0]?.[1] as\r\n    | string\r\n    | null\r\n    | undefined;\r\n  if (\r\n    !previousUserTimestamp ||\r\n    Number(previousUserTimestamp) <\r\n      newTimestamp - TYPING_TIMEOUT_TTL_SECONDS * 1000\r\n  ) {\r\n    // user was not previously considered as typing\r\n    return await publishUpdate(threadID);\r\n  }\r\n}\r\n\r\n// Get a list of userIDs typing in the thread\r\n// This is done by reading the Redis set for the given thread and returning all\r\n// members with high enough \"scores\" (= recent enough last insertion\r\n// timestamps)\r\nexport async function getUsersTyping(threadID: UUID) {\r\n  const setKey = makeSetKey(threadID);\r\n  const cutoffTime = Date.now() - TYPING_TIMEOUT_TTL_SECONDS * 1000;\r\n  // get all members of the set with score at least cutoffTime\r\n  return await getRedis().zrangebyscore(setKey, cutoffTime, '+inf');\r\n}\r\n\r\n// Mark the user as not-typing in thread threadID\r\n// This is done by removing \"userID\" from the Redis set for this threadID\r\nasync function remove(threadID: UUID, userID: UUID) {\r\n  const now = Date.now();\r\n  const setKey = makeSetKey(threadID);\r\n  const errsAndVals = await getRedis()\r\n    .multi()\r\n    // fetch the current score (last inserted timestamp) of the user\r\n    .zscore(setKey, userID) // errsAndVals[0]\r\n    // remove \"userID\" from the set\r\n    .zrem(setKey, userID) // errsAndVals[1]\r\n    .exec();\r\n  if (\r\n    !multiOperationSucceeded(\r\n      errsAndVals,\r\n      'Failed to remove user from typing set',\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const previousUserTimestamp = errsAndVals[0]?.[1] as\r\n    | string\r\n    | null\r\n    | undefined;\r\n  if (\r\n    !!previousUserTimestamp &&\r\n    Number(previousUserTimestamp) > now - TYPING_TIMEOUT_TTL_SECONDS * 1000\r\n  ) {\r\n    // user was previously considered as typing\r\n    clearPreviousTimeout(threadID, userID);\r\n    return await publishUpdate(threadID);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction clearPreviousTimeout(threadID: UUID, userID: UUID) {\r\n  const userKey = makeUserThreadKey(threadID, userID);\r\n  const prevTimeoutID = timeouts.get(userKey);\r\n  if (prevTimeoutID !== undefined) {\r\n    clearTimeout(prevTimeoutID);\r\n    timeouts.delete(userKey);\r\n  }\r\n}\r\n\r\nasync function notifyIfNotTyping(threadID: UUID, userID: UUID) {\r\n  const setKey = makeSetKey(threadID);\r\n  const now = Date.now();\r\n  const latestUserTimestamp = await getRedis().zscore(setKey, userID);\r\n  if (\r\n    latestUserTimestamp === null ||\r\n    Number(latestUserTimestamp) < now - TYPING_TIMEOUT_TTL_SECONDS * 1000\r\n  ) {\r\n    // the user is no longer considered to be typing\r\n    return await publishUpdate(threadID);\r\n  }\r\n}\r\n\r\nexport async function removeAllTypingUsers(threadID: string) {\r\n  const setKey = makeSetKey(threadID);\r\n  await getRedis().del(setKey);\r\n  return await publishUpdate(threadID);\r\n}\r\n", "import type { CoreThreadData } from '@cord-sdk/types';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport {\r\n  loadUserMessagesCount,\r\n  loadActionMessagesCount,\r\n  loadDeletedMessagesCount,\r\n  loadRepliers,\r\n  loadActionMessageRepliers,\r\n  loadParticipants,\r\n  loadSubscribers,\r\n  loadMentioned,\r\n  loadTypingUsers,\r\n  getThreadLocation,\r\n} from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\n\r\nexport async function getCoreThreadData(\r\n  loaders: RequestContextLoaders,\r\n  thread: ThreadEntity,\r\n): Promise<CoreThreadData> {\r\n  const [\r\n    org,\r\n    total,\r\n    userMessages,\r\n    actionMessages,\r\n    deletedMessages,\r\n    repliers,\r\n    actionMessageRepliers,\r\n    participants,\r\n    subscribers,\r\n    mentioned,\r\n    typing,\r\n    location,\r\n  ] = await Promise.all([\r\n    OrgEntity.findByPk(thread.orgID),\r\n    MessageEntity.count({ where: { threadID: thread.id } }),\r\n    loadUserMessagesCount(thread.id),\r\n    loadActionMessagesCount(thread.id),\r\n    loadDeletedMessagesCount(thread.id),\r\n    loadRepliers(loaders.threadLoader, thread.id),\r\n    loadActionMessageRepliers(loaders.threadLoader, thread.id),\r\n    loadParticipants(thread.id),\r\n    loadSubscribers(thread.id),\r\n    loadMentioned(thread.id),\r\n    loadTypingUsers(thread.id),\r\n    getThreadLocation(thread),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new Error('Unable to find thread org');\r\n  }\r\n\r\n  return {\r\n    id: thread.externalID,\r\n    organizationID: org.externalID,\r\n    groupID: org.externalID,\r\n    total,\r\n    userMessages,\r\n    actionMessages,\r\n    deletedMessages,\r\n    resolved: !!thread.resolvedTimestamp,\r\n    resolvedTimestamp: thread.resolvedTimestamp,\r\n    participants,\r\n    repliers,\r\n    actionMessageRepliers,\r\n    subscribers,\r\n    mentioned,\r\n    typing,\r\n    name: thread.name,\r\n    url: thread.url,\r\n    location,\r\n    metadata: thread.metadata,\r\n    extraClassnames: thread.extraClassnames,\r\n  };\r\n}\r\n", "import type { Attributes, WhereOptions } from 'sequelize';\r\nimport type { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\n\r\nexport const deletedCounter = Counter({\r\n  name: 'NotificationEntityDeleted',\r\n  help: 'Count of NotificationEntity deleted',\r\n  labelNames: ['appID'],\r\n});\r\n\r\n/**\r\n * Since NotificationEntity rows with an aggregation key are\r\n * aggregated/displayed as one Notification in the UI, if the user does\r\n * something to that Notification (e.g., marks it as read or deletes it), we\r\n * need to do that thing to all of the NotificationEntity rows which might go\r\n * into it. This generates a sequelize `where` clause which finds all such rows.\r\n */\r\nexport function whereAggregatedNotificationEntity(\r\n  notif: NotificationEntity,\r\n): WhereOptions<Attributes<NotificationEntity>> {\r\n  return notif.aggregationKey === null\r\n    ? { id: notif.id }\r\n    : {\r\n        aggregationKey: notif.aggregationKey,\r\n        recipientID: notif.recipientID,\r\n      };\r\n}\r\n", "import * as base64 from 'js-base64';\r\nimport { externalizeID } from 'common/util/externalIDs.ts';\r\nimport type {\r\n  MessageAnnotationAttachment,\r\n  MessageAttachment,\r\n  MessageFileAttachment,\r\n  MessageLinkPreviewAttachment,\r\n  MessageScreenshotAttachment,\r\n} from '@cord-sdk/types';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n  MessageScreenshotAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport type { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\n\r\nexport async function getMessageAttachments(\r\n  loaders: RequestContextLoaders,\r\n  message: MessageEntity,\r\n): Promise<MessageAttachment[]> {\r\n  const attachments =\r\n    await loaders.messageAttachmentLoader.loadAttachmentsForMessage(message.id);\r\n\r\n  const fileIDs = attachments\r\n    .map((a) => {\r\n      if (a instanceof MessageAttachmentEntity) {\r\n        if ('fileID' in a.data) {\r\n          return a.data.fileID;\r\n        } else if ('screenshotFileID' in a.data) {\r\n          return a.data.screenshotFileID;\r\n        }\r\n      }\r\n      return undefined;\r\n    })\r\n    .filter(isDefined);\r\n\r\n  const files = await loaders.fileLoader.loadFiles(fileIDs);\r\n  const filesByID = new Map<string, FileEntity>();\r\n\r\n  for (const file of files) {\r\n    filesByID.set(file.id, file);\r\n  }\r\n\r\n  return (\r\n    await Promise.all(\r\n      attachments.map(async (a) => {\r\n        if (a instanceof MessageAttachmentEntity) {\r\n          switch (a.type) {\r\n            case MessageAttachmentType.FILE:\r\n              return await makeFile(\r\n                filesByID.get((a.data as MessageFileAttachmentData).fileID),\r\n              );\r\n            case MessageAttachmentType.ANNOTATION: {\r\n              const data = a.data as MessageAnnotationAttachmentData;\r\n              if (!data.screenshotFileID) {\r\n                return undefined;\r\n              }\r\n              return await makeAnnotation(\r\n                filesByID.get(data.screenshotFileID),\r\n                data,\r\n              );\r\n            }\r\n            case MessageAttachmentType.SCREENSHOT: {\r\n              const data = a.data as MessageScreenshotAttachmentData;\r\n              if (!data.screenshotFileID) {\r\n                return undefined;\r\n              }\r\n              return await makeScreenshot(filesByID.get(data.screenshotFileID));\r\n            }\r\n          }\r\n        } else {\r\n          return makeLinkPreview(a);\r\n        }\r\n      }),\r\n    )\r\n  ).filter(isDefined);\r\n}\r\n\r\nasync function makeFile(\r\n  f: FileEntity | undefined,\r\n): Promise<MessageFileAttachment | undefined> {\r\n  if (!f) {\r\n    return undefined;\r\n  }\r\n  return {\r\n    id: externalizeID(f.id),\r\n    type: 'file',\r\n    name: f.name,\r\n    url: await f.getSignedDownloadURL(),\r\n    mimeType: f.mimeType,\r\n    size: f.size,\r\n    uploadStatus: f.uploadStatus,\r\n  };\r\n}\r\n\r\nasync function makeScreenshot(\r\n  screenshot: FileEntity | undefined,\r\n): Promise<MessageScreenshotAttachment | undefined> {\r\n  if (!screenshot) {\r\n    return undefined;\r\n  }\r\n  return {\r\n    type: 'screenshot',\r\n    screenshot: {\r\n      id: externalizeID(screenshot.id),\r\n      name: 'annotation',\r\n      url: await screenshot.getSignedDownloadURL(),\r\n      mimeType: screenshot.mimeType,\r\n      size: screenshot.size,\r\n      uploadStatus: screenshot.uploadStatus,\r\n    },\r\n  };\r\n}\r\n\r\nasync function makeAnnotation(\r\n  screenshot: FileEntity | undefined,\r\n  a: MessageAnnotationAttachmentData,\r\n): Promise<MessageAnnotationAttachment | undefined> {\r\n  if (!screenshot) {\r\n    return undefined;\r\n  }\r\n  return {\r\n    type: 'annotation',\r\n    screenshot: {\r\n      id: externalizeID(screenshot.id),\r\n      name: 'annotation',\r\n      url: await screenshot.getSignedDownloadURL(),\r\n      mimeType: screenshot.mimeType,\r\n      size: screenshot.size,\r\n      uploadStatus: screenshot.uploadStatus,\r\n    },\r\n    locationData: a.location ? base64.encode(JSON.stringify(a.location)) : null,\r\n    customData: a.customLocation\r\n      ? {\r\n          location: a.customLocation,\r\n          coordsRelativeToTarget: a.coordsRelativeToTarget!, // always set when custom locations used\r\n          label: a.customLabel ?? null,\r\n        }\r\n      : null,\r\n    textContent:\r\n      a.location?.highlightedTextConfig?.textToDisplay ??\r\n      a.customHighlightedTextConfig?.textToDisplay ??\r\n      null,\r\n  };\r\n}\r\n\r\nfunction makeLinkPreview(\r\n  a: MessageLinkPreviewEntity,\r\n): MessageLinkPreviewAttachment {\r\n  return {\r\n    id: a.id,\r\n    type: 'link_preview',\r\n    url: a.url,\r\n    imageURL: a.img,\r\n    title: a.title,\r\n    description: a.description,\r\n  };\r\n}\r\n", "import type { WhereOptions } from 'sequelize';\r\nimport { unique } from 'radash';\r\n\r\nimport {\r\n  externalizeID,\r\n  extractInternalID,\r\n  isExternalizedID,\r\n} from 'common/util/externalIDs.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport type { MessageContent, UUID } from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { Reaction } from '@cord-sdk/types/message.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\n\r\nexport async function loadThreadMessage(\r\n  threadID: string,\r\n  externalMessageID: string,\r\n) {\r\n  if (!externalMessageID) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  const where: WhereOptions<MessageEntity> = { threadID };\r\n  if (isExternalizedID(externalMessageID)) {\r\n    const internalMessageID = extractInternalID(externalMessageID);\r\n    if (!internalMessageID) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'message ID is not valid',\r\n      });\r\n    }\r\n    where.id = internalMessageID;\r\n  } else {\r\n    where.externalID = externalMessageID;\r\n  }\r\n\r\n  return await MessageEntity.findOne({ where });\r\n}\r\n\r\nexport async function externalizeContent(\r\n  content: MessageContent,\r\n  platformApplicationID: UUID,\r\n): Promise<MessageContent> {\r\n  return await Promise.all(\r\n    content.map(async (node) => {\r\n      if (node.type === MessageNodeType.MENTION) {\r\n        const user = await UserEntity.findByPk(node.user.id);\r\n        // If this user isn't available (it's from another application, it's\r\n        // been deleted, etc), we don't want to explode, so just put in an\r\n        // externalized ID for it.\r\n        const id =\r\n          user?.platformApplicationID === platformApplicationID &&\r\n          user?.externalID\r\n            ? user.externalID\r\n            : externalizeID(node.user.id);\r\n        return {\r\n          ...node,\r\n          user: { id },\r\n        };\r\n      } else if ('children' in node) {\r\n        return {\r\n          ...node,\r\n          children: await externalizeContent(\r\n            node.children,\r\n            platformApplicationID,\r\n          ),\r\n        };\r\n      }\r\n      return node;\r\n    }),\r\n  );\r\n}\r\n\r\n/**\r\n * Return a version of the message content that just encodes every user ID as an\r\n * externalized ID, even if they have an external ID.  This is useful for\r\n * internal handling where we have an internal content and don't want to bother\r\n * making a bunch of database calls to pass it to a function that requires\r\n * external IDs.\r\n *\r\n * DO NOT USE THIS for content that will eventually be handed to a customer,\r\n * only for cases where we know we're just going to immediately convert it back\r\n * to internal IDs.\r\n */\r\nexport function forceExternalizeContent(\r\n  content: MessageContent,\r\n): MessageContent {\r\n  return content.map((node) => {\r\n    if (node.type === MessageNodeType.MENTION) {\r\n      return {\r\n        ...node,\r\n        user: { id: externalizeID(node.user.id) },\r\n      };\r\n    } else if ('children' in node) {\r\n      return {\r\n        ...node,\r\n        children: forceExternalizeContent(node.children),\r\n      };\r\n    }\r\n    return node;\r\n  });\r\n}\r\n\r\nexport async function internalizeContent(\r\n  content: MessageContent,\r\n  platformApplicationID: UUID,\r\n  orgID: UUID,\r\n): Promise<MessageContent> {\r\n  return await Promise.all(\r\n    content.map(async (node) => {\r\n      if (node.type === MessageNodeType.MENTION) {\r\n        let user = await UserEntity.findOne({\r\n          where: { platformApplicationID, externalID: node.user.id },\r\n        });\r\n\r\n        if (!user && isExternalizedID(node.user.id)) {\r\n          // In some circumstances, we may send through a node that has an\r\n          // externalized ID (cord:abcd1234-internal-uuid-bcde) instead of the\r\n          // proper external ID, if we needed to fill it out and the user's\r\n          // external ID wasn't available in the browser, so handle that case\r\n          user = await UserEntity.findOne({\r\n            where: { id: extractInternalID(node.user.id)! },\r\n          });\r\n        }\r\n\r\n        // Check if the user is from a Slack-linked org\r\n        if (!user) {\r\n          const slackLinking = await LinkedOrgsEntity.findOne({\r\n            where: {\r\n              sourceOrgID: orgID,\r\n            },\r\n          });\r\n\r\n          // TODO: rewrite as a custom sql query instead of going through all these steps\r\n          if (slackLinking) {\r\n            // Find any Cord Slack users which have that Slack externalID (Slack user\r\n            // ids are only guaranteed to be unique to a workplace, so there\r\n            // may be multiple results here although it seems unlikely)\r\n            // And find the org members of the linked Slack org, so we can check\r\n            // which of the users if we found (if multiple) is the relevant one\r\n            const [slackUsers, slackOrgMembers] = await Promise.all([\r\n              UserEntity.findAll({\r\n                where: { externalID: node.user.id, externalProvider: 'slack' },\r\n              }),\r\n              OrgMembersEntity.findAll({\r\n                where: { orgID: slackLinking.linkedOrgID },\r\n              }),\r\n            ]);\r\n\r\n            const slackOrgMemberUserIDs = slackOrgMembers.map(\r\n              (om) => om.userID,\r\n            );\r\n            for (const slackUser of slackUsers) {\r\n              if (slackOrgMemberUserIDs.includes(slackUser.id)) {\r\n                user = slackUser;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Still none? Time to error\r\n        if (!user) {\r\n          throw new ApiCallerError('user_not_found', {\r\n            message: 'Could not find mentioned user with ID ' + node.user.id,\r\n          });\r\n        }\r\n        return {\r\n          ...node,\r\n          user: { id: user.id },\r\n        };\r\n      } else if ('children' in node) {\r\n        return {\r\n          ...node,\r\n          children: await internalizeContent(\r\n            node.children,\r\n            platformApplicationID,\r\n            orgID,\r\n          ),\r\n        };\r\n      }\r\n      return node;\r\n    }),\r\n  );\r\n}\r\n\r\nexport async function buildMessageVariablesReactions(\r\n  loaders: RequestContextLoaders,\r\n  internalMessageID: UUID,\r\n): Promise<Reaction[]> {\r\n  const messageReactions =\r\n    await loaders.messageReactionLoader.loadReactionsForMessageNoOrgCheck(\r\n      internalMessageID,\r\n    );\r\n\r\n  const usersWithReactions = unique(\r\n    messageReactions.map((reaction) => reaction.userID),\r\n  );\r\n\r\n  const reactionUsers = await loaders.userLoader.loadUsers(usersWithReactions);\r\n\r\n  const internalIDtoExternalID = new Map();\r\n\r\n  for (const reactionUser of reactionUsers) {\r\n    if (!internalIDtoExternalID.has(reactionUser.id)) {\r\n      internalIDtoExternalID.set(reactionUser.id, reactionUser.externalID);\r\n    }\r\n  }\r\n\r\n  return messageReactions.map((messageReaction) => {\r\n    return {\r\n      reaction: messageReaction.unicodeReaction,\r\n      userID: internalIDtoExternalID.get(messageReaction.userID),\r\n      timestamp: new Date(messageReaction.timestamp),\r\n    };\r\n  });\r\n}\r\n\r\nexport async function getValidExternalToInternalReactionUsers(\r\n  context: RequestContext,\r\n  externalReactionUserIDs: string[],\r\n  org: OrgEntity,\r\n) {\r\n  const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n    context.session.viewer,\r\n  );\r\n\r\n  const internalReactionUsers = await Promise.all(\r\n    externalReactionUserIDs.map(async (externalReactionUserID) => {\r\n      const user = await context.loaders.userLoader.loadUserByExternalID(\r\n        platformApplicationID,\r\n        externalReactionUserID,\r\n      );\r\n\r\n      if (user) {\r\n        return user;\r\n      } else {\r\n        throw new ApiCallerError('user_not_found', {\r\n          message: `User with ID ${externalReactionUserID} does not exist.`,\r\n        });\r\n      }\r\n    }),\r\n  );\r\n\r\n  const externalIDtoInternalID = new Map<string, UserEntity>();\r\n\r\n  for (const reactionUser of internalReactionUsers) {\r\n    if (!externalIDtoInternalID.has(reactionUser.externalID)) {\r\n      externalIDtoInternalID.set(reactionUser.externalID, reactionUser);\r\n    }\r\n  }\r\n\r\n  await Promise.all(\r\n    internalReactionUsers.map(async (internalReactionUser) => {\r\n      const orgMembership =\r\n        await context.loaders.orgMembersLoader.loadUserOrgMembership(\r\n          internalReactionUser.id,\r\n          org.id,\r\n        );\r\n\r\n      if (!orgMembership) {\r\n        throw new ApiCallerError('user_not_in_organization', {\r\n          message: `User with ID '${internalReactionUser.externalID}' does not belong in organization ${org.externalID}.`,\r\n        });\r\n      }\r\n    }),\r\n  );\r\n\r\n  return externalIDtoInternalID;\r\n}\r\n", "import type { CoreMessageData } from '@cord-sdk/types';\r\nimport { externalizeID } from 'common/util/externalIDs.ts';\r\nimport { convertStructuredMessageToText } from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { getMessageAttachments } from 'server/src/public/routes/platform/messages/getMessageAttachments.ts';\r\nimport {\r\n  buildMessageVariablesReactions,\r\n  externalizeContent,\r\n} from 'server/src/public/routes/platform/messages/util.ts';\r\n\r\nexport async function getCoreMessageData(\r\n  loaders: RequestContextLoaders,\r\n  message: MessageEntity,\r\n  thread: ThreadEntity,\r\n): Promise<CoreMessageData> {\r\n  const [author, org, content, attachments, reactions, threadParticipants] =\r\n    await Promise.all([\r\n      loaders.userLoader.loadUser(message.sourceID),\r\n      loaders.orgLoader.loadOrg(message.orgID),\r\n      externalizeContent(message.content, thread.platformApplicationID),\r\n      getMessageAttachments(loaders, message),\r\n      buildMessageVariablesReactions(loaders, message.id),\r\n      loaders.threadParticipantLoader.loadForThreadIDNoOrgCheck(\r\n        message.threadID,\r\n      ),\r\n    ]);\r\n\r\n  const seenByUserIDs = threadParticipants\r\n    .filter((participant) => {\r\n      if (participant.lastSeenTimestamp === null) {\r\n        return false;\r\n      }\r\n      const timestamp = message.lastUpdatedTimestamp ?? message.timestamp;\r\n      return timestamp <= participant.lastSeenTimestamp;\r\n    })\r\n    .map((participant) => participant.userID);\r\n\r\n  const seenByUsers = await loaders.userLoader.loadUsers(seenByUserIDs);\r\n\r\n  return {\r\n    id: message.externalID,\r\n\r\n    // If we didn't find the org, something is broken, so at least give\r\n    // ourselves a breadcrumb\r\n    organizationID: org?.externalID ?? externalizeID(message.orgID),\r\n\r\n    groupID: org?.externalID ?? externalizeID(message.orgID),\r\n\r\n    threadID: thread.externalID,\r\n\r\n    // If we didn't find the user, something is broken, so at least give\r\n    // ourselves a breadcrumb to debug with\r\n    // We're making the strategic choice here to give the end users a more\r\n    // coherent name that what we've used internally. We may regret this\r\n    // if we find ourselves confused because the same thing has multiple\r\n    // names.\r\n    authorID: author?.externalID ?? externalizeID(message.sourceID),\r\n\r\n    url: message.url,\r\n    content,\r\n    plaintext: convertStructuredMessageToText(message.content),\r\n\r\n    // Strategically renamed to be more intuitive to devs\r\n    createdTimestamp: message.timestamp,\r\n    // Strategically renamed to be more intuitive to devs\r\n    updatedTimestamp: message.lastUpdatedTimestamp,\r\n\r\n    deletedTimestamp: message.deletedTimestamp,\r\n\r\n    type: message.type,\r\n\r\n    iconURL: message.iconURL,\r\n\r\n    translationKey: message.translationKey,\r\n\r\n    metadata: message.metadata,\r\n\r\n    seenBy: seenByUsers.map((user) => user.externalID),\r\n\r\n    extraClassnames: message.extraClassnames,\r\n\r\n    skipLinkPreviews: message.skipLinkPreviews,\r\n\r\n    attachments,\r\n    reactions,\r\n  };\r\n}\r\n", "import type {\r\n  CoreNotificationData,\r\n  TranslationParameters,\r\n} from '@cord-sdk/types';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { userDisplayName, userFullName } from 'server/src/entity/user/util.ts';\r\nimport { getCoreMessageData } from 'server/src/public/routes/platform/messages/getCoreMessageData.ts';\r\nimport { getCoreThreadData } from 'server/src/public/routes/platform/threads/util/getCoreThreadData.ts';\r\nimport type { Notification } from 'server/src/schema/resolverTypes.ts';\r\n\r\nfunction gqlNotificationHeaderToNotificationVariables(\r\n  gqlHeader: Notification['header'][number],\r\n): CoreNotificationData['header'][number] {\r\n  if ('user' in gqlHeader) {\r\n    return {\r\n      type: 'user',\r\n      userID: gqlHeader.user.externalID,\r\n      user: {\r\n        id: gqlHeader.user.externalID,\r\n        name: gqlHeader.user.name,\r\n        shortName: gqlHeader.user.screenName,\r\n        displayName: userDisplayName(gqlHeader.user),\r\n        secondaryDisplayName: userFullName(gqlHeader.user),\r\n        profilePictureURL: gqlHeader.user.profilePictureURL,\r\n        metadata: gqlHeader.user.metadata,\r\n      },\r\n    };\r\n  } else if ('text' in gqlHeader) {\r\n    return { type: 'text', text: gqlHeader.text, bold: gqlHeader.bold };\r\n  } else {\r\n    const _: never = gqlHeader;\r\n    return { type: 'text', text: '', bold: false };\r\n  }\r\n}\r\n\r\nasync function gqlNotificationAttachmentToNotificationVariables(\r\n  loaders: RequestContextLoaders,\r\n  gqlAttachment: Notification['attachment'],\r\n): Promise<CoreNotificationData['attachment']> {\r\n  if (!gqlAttachment) {\r\n    return null;\r\n  } else if ('message' in gqlAttachment) {\r\n    const message = gqlAttachment.message;\r\n    const thread = await ThreadEntity.findByPk(message.threadID);\r\n    if (!thread) {\r\n      throw new Error(\r\n        `Could not find thread ${message.threadID} for message ${message.id}`,\r\n      );\r\n    }\r\n    const coreMessageData = await getCoreMessageData(loaders, message, thread);\r\n    return {\r\n      type: 'message',\r\n      messageID: message.externalID,\r\n      threadID: thread.externalID,\r\n      message: coreMessageData,\r\n    };\r\n  } else if ('url' in gqlAttachment) {\r\n    return {\r\n      type: 'url',\r\n      url: gqlAttachment.url,\r\n    };\r\n  } else if ('thread' in gqlAttachment) {\r\n    const thread = gqlAttachment.thread;\r\n\r\n    const threadEntity = await ThreadEntity.findByPk(thread.id);\r\n    if (!threadEntity) {\r\n      throw new Error(`Could not find thread ${thread.id}`);\r\n    }\r\n    const coreThreadData = await getCoreThreadData(loaders, thread);\r\n\r\n    return {\r\n      type: 'thread',\r\n      thread: coreThreadData,\r\n    };\r\n  } else {\r\n    const _: never = gqlAttachment;\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction convertGqlNotificationHeaderTranslation(\r\n  gqlNotif: Notification,\r\n): CoreNotificationData['headerTranslation'] {\r\n  if (!gqlNotif.headerTranslationKey) {\r\n    return null;\r\n  }\r\n  if (!gqlNotif.headerSimpleTranslationParams) {\r\n    throw new Error('Got notification with translation key but no parameters');\r\n  }\r\n  const parameters: TranslationParameters = {\r\n    ...gqlNotif.headerSimpleTranslationParams,\r\n    senders: gqlNotif.senders.map((sender) => ({\r\n      id: sender.externalID,\r\n      name: sender.name,\r\n      shortName: sender.screenName,\r\n      displayName: userDisplayName(sender),\r\n      secondaryDisplayName: userFullName(sender),\r\n      profilePictureURL: sender.profilePictureURL,\r\n      metadata: sender.metadata,\r\n    })),\r\n  };\r\n  return {\r\n    key: gqlNotif.headerTranslationKey,\r\n    parameters,\r\n  };\r\n}\r\n\r\nexport async function gqlNotificationToNotificationVariables(\r\n  loaders: RequestContextLoaders,\r\n  gqlNotif: Notification,\r\n): Promise<CoreNotificationData> {\r\n  return {\r\n    id: gqlNotif.externalID,\r\n    senderUserIDs: gqlNotif.senders.map((u) => u.externalID),\r\n    iconUrl: gqlNotif.iconUrl ?? null,\r\n    header: gqlNotif.header.map(gqlNotificationHeaderToNotificationVariables),\r\n    headerTranslation: convertGqlNotificationHeaderTranslation(gqlNotif),\r\n    attachment: await gqlNotificationAttachmentToNotificationVariables(\r\n      loaders,\r\n      gqlNotif.attachment,\r\n    ),\r\n    readStatus: gqlNotif.readStatus,\r\n    timestamp:\r\n      typeof gqlNotif.timestamp === 'string'\r\n        ? new Date(gqlNotif.timestamp)\r\n        : gqlNotif.timestamp,\r\n    extraClassnames: gqlNotif.extraClassnames ?? null,\r\n    metadata: gqlNotif.metadata,\r\n  };\r\n}\r\n", "import { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\n//createViewerAndContext was made with the notifications REST API and webhook in mind\r\nexport async function createViewerAndContext(\r\n  platformApplicationID: string,\r\n  user: UserEntity,\r\n  platformType: 'api' | 'webhook',\r\n) {\r\n  // Pick an arbitrary org -- we need one to construct a viewer, but the notifs\r\n  // code doesn't really care at all what the ID actually is\r\n  const arbitraryOrgMembership = await OrgMembersEntity.findOne({\r\n    where: { userID: user.id },\r\n  });\r\n\r\n  if (!arbitraryOrgMembership) {\r\n    switch (platformType) {\r\n      case 'api':\r\n        throw new ApiCallerError('user_not_in_organization', {\r\n          message: 'Could not find any active org for user',\r\n        });\r\n      case 'webhook':\r\n        throw new Error('Could not find any active org for recipient user');\r\n      default: {\r\n        // Force a TypeScript error if platformType is not 'api' or 'webhook'\r\n        const _: never = platformType;\r\n        throw new Error('Invalid platform type: ' + platformType);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Foreign key restrictions should mean this always exists if the above\r\n  // membership exists.\r\n  const arbitraryOrg = (await OrgEntity.findByPk(\r\n    arbitraryOrgMembership.orgID,\r\n  ))!;\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({\r\n    user,\r\n    org: arbitraryOrg,\r\n  });\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  return context;\r\n}\r\n", "import type PgBoss from 'pg-boss';\r\nimport type { AsyncJobDataTypes } from 'server/src/asyncTier/jobs.ts';\r\nimport { getBoss } from 'server/src/asyncTier/pgboss.ts';\r\n\r\nexport default function submitAsync<N extends keyof AsyncJobDataTypes>(\r\n  name: N,\r\n  data: AsyncJobDataTypes[N],\r\n  options?: PgBoss.SendOptions,\r\n) {\r\n  return getBoss().send(name, data, options ?? {});\r\n}\r\n", "import type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { safeFetch } from 'server/src/util/safeFetch.ts';\r\nimport {\r\n  authenticationHeader,\r\n  handleVerifyWebhookURL,\r\n} from 'server/src/webhook/webhook.ts';\r\n\r\nexport async function verifyWebhookURL(app: ApplicationEntity, url: string) {\r\n  const [payloadString, timestamp, signature] = authenticationHeader(\r\n    'url-verification',\r\n    app,\r\n    await handleVerifyWebhookURL({ type: 'url-verification' }),\r\n  );\r\n\r\n  const timeLimit = 3000; //expect response within 3 seconds\r\n\r\n  return await new Promise((resolve, reject) => {\r\n    void (async () => {\r\n      const controller = new AbortController();\r\n\r\n      const timeout = setTimeout(() => {\r\n        controller.abort();\r\n      }, timeLimit);\r\n\r\n      try {\r\n        const response = await safeFetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Cord-Timestamp': timestamp,\r\n            'X-Cord-Signature': signature,\r\n          },\r\n          body: payloadString,\r\n          signal: controller.signal,\r\n        });\r\n        if (response.status === 200) {\r\n          clearTimeout(timeout);\r\n          resolve({ verified: true, message: null });\r\n        } else {\r\n          clearTimeout(timeout);\r\n          reject({\r\n            verified: false,\r\n            code: response.status,\r\n            message: `Request to '${url}' failed with status ${response.status} but status 200 expected.`,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        clearTimeout(timeout);\r\n        if (error.name === 'AbortError') {\r\n          reject({\r\n            verified: false,\r\n            code: 408,\r\n            message: `URL verification aborted: no response from '${url}' within 3 seconds.`,\r\n          });\r\n        } else {\r\n          reject({\r\n            verified: false,\r\n            code: 404,\r\n            message: `Cannot verify webhook URL '${url}'.`,\r\n          });\r\n        }\r\n      }\r\n    })();\r\n  });\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { ApplicationData } from '@cord-sdk/types';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { customEmailTemplateToAPIData } from 'server/src/public/routes/platform/applications/util.ts';\r\n\r\nasync function ListApplicationsHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  const apps = await ApplicationEntity.findAll({\r\n    where: {\r\n      customerID,\r\n    },\r\n  });\r\n\r\n  const result: ApplicationData[] = apps.map((app) => {\r\n    return {\r\n      id: app.id,\r\n      secret: app.sharedSecret,\r\n      name: app.name,\r\n      iconURL: app.iconURL,\r\n      eventWebhookURL: app.eventWebhookURL,\r\n      redirectURI: app.redirectURI,\r\n      emailSettings: customEmailTemplateToAPIData(\r\n        app.customEmailTemplate,\r\n        app.enableEmailNotifications,\r\n      ),\r\n      createdTimestamp: app.createdTimestamp,\r\n    };\r\n  });\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(ListApplicationsHandler);\r\n", "import type { NextFunction, Request, Response } from 'express';\r\nimport { decode, TokenExpiredError, verify } from 'jsonwebtoken';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport type {\r\n  APICordTokenData,\r\n  CustomerServerAuthTokenData,\r\n  AppServerAuthTokenData,\r\n} from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { SessionEntity } from 'server/src/entity/session/SessionEntity.ts';\r\nimport {\r\n  createInvalidInputTypeMessage,\r\n  isCordSignedToken,\r\n  ApiCallerError,\r\n  verifyBearerTokenInAuthorizationHeaders,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport {\r\n  ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS,\r\n  ACCESS_TOKEN_MAX_AGE_SECONDS,\r\n} from 'common/const/Timing.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\r\n\r\nfunction validateCordTokenData(data: any): APICordTokenData {\r\n  if (!(data instanceof Object)) {\r\n    throw createInvalidInputTypeMessage('access token payload', 'object');\r\n  }\r\n\r\n  const { session_id } = data;\r\n\r\n  if (!session_id) {\r\n    throw 'Access token payload is missing session_id.';\r\n  }\r\n\r\n  if (!isUUID.default(session_id)) {\r\n    throw createInvalidInputTypeMessage('session_id', 'UUID');\r\n  }\r\n\r\n  return { session_id };\r\n}\r\n\r\nasync function verifyCordBearerTokenAuthorization(\r\n  token: string,\r\n  req: Request,\r\n  _res: Response,\r\n  next: NextFunction,\r\n) {\r\n  try {\r\n    let decodedAPIAccessToken: APICordTokenData;\r\n\r\n    try {\r\n      decodedAPIAccessToken = validateCordTokenData(\r\n        verify(token, env.JWT_SIGNING_SECRET, {\r\n          algorithms: ['HS512'],\r\n        }),\r\n      );\r\n    } catch (e: any) {\r\n      if (e instanceof TokenExpiredError) {\r\n        throw new ApiCallerError('expired_access_token');\r\n      } else {\r\n        throw new ApiCallerError('invalid_access_token', { message: e });\r\n      }\r\n    }\r\n\r\n    const { session_id } = decodedAPIAccessToken;\r\n    const session = await SessionEntity.findByPk(session_id);\r\n\r\n    if (!session) {\r\n      throw new ApiCallerError('invalid_access_token', {\r\n        message: 'No valid session found.',\r\n      });\r\n    }\r\n\r\n    if (!session.expiresAt) {\r\n      throw new ApiCallerError('expired_access_token', {\r\n        message: 'Access token has been revoked.',\r\n      });\r\n    }\r\n\r\n    const currentDate = new Date();\r\n\r\n    if (currentDate > session.expiresAt) {\r\n      throw new ApiCallerError('expired_access_token');\r\n    }\r\n\r\n    const application = await ApplicationEntity.findByPk(session.applicationID);\r\n\r\n    if (!application) {\r\n      throw new ApiCallerError('project_not_found');\r\n    }\r\n\r\n    req.appID = session.applicationID;\r\n\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n}\r\n\r\nfunction validateAppTokenData(data: any): AppServerAuthTokenData {\r\n  if (!(data instanceof Object)) {\r\n    throw createInvalidInputTypeMessage('Authorization token', 'object');\r\n  }\r\n\r\n  const { app_id, project_id, iat: _iat, exp: _exp, ...rest } = data;\r\n\r\n  const appID = app_id || project_id;\r\n\r\n  if (!appID) {\r\n    throw new ApiCallerError('invalid_project_token', {\r\n      message:\r\n        'Please include the project_id if you are authorizing directly with a non-Cord signed token.',\r\n    });\r\n  }\r\n\r\n  if (typeof appID !== 'string' || !isUUID.default(appID)) {\r\n    throw new ApiCallerError('invalid_project_token', {\r\n      message: createInvalidInputTypeMessage('project_id', 'UUID'),\r\n    });\r\n  }\r\n\r\n  if (Object.keys(rest).length > 0) {\r\n    throw new ApiCallerError('invalid_project_token', {\r\n      message:\r\n        'Authorization token payload invalid, must contain only project_id.',\r\n    });\r\n  }\r\n\r\n  return { app_id: appID };\r\n}\r\n\r\nfunction validateCustomerTokenData(data: any): CustomerServerAuthTokenData {\r\n  if (!(data instanceof Object)) {\r\n    throw createInvalidInputTypeMessage('Authorization token', 'object');\r\n  }\r\n\r\n  const { customer_id } = data;\r\n\r\n  if (!customer_id) {\r\n    throw new ApiCallerError('invalid_customer_token', {\r\n      message:\r\n        'Project management auth tokens must include a customer_id field.  Refer to https://docs.cord.com/reference/authentication#Project-management-auth-token for more details.',\r\n    });\r\n  }\r\n\r\n  if (typeof customer_id !== 'string' || !isUUID.default(customer_id)) {\r\n    throw new ApiCallerError('invalid_customer_token', {\r\n      message: createInvalidInputTypeMessage('customer_id', 'UUID'),\r\n    });\r\n  }\r\n\r\n  if (\r\n    'user_id' in data ||\r\n    'org_id' in data ||\r\n    'app_id' in data ||\r\n    'project_id' in data\r\n  ) {\r\n    throw new ApiCallerError('invalid_customer_token', {\r\n      message:\r\n        'Authorization token payload invalid, must contain only customer_id.',\r\n    });\r\n  }\r\n\r\n  return { customer_id };\r\n}\r\n\r\nasync function verifyAppToken(\r\n  token: string,\r\n  req: Request,\r\n  _res: Response,\r\n  next: NextFunction,\r\n) {\r\n  try {\r\n    let decodedCustomerAppToken: AppServerAuthTokenData;\r\n\r\n    try {\r\n      const data = decode(token);\r\n      decodedCustomerAppToken = validateAppTokenData(data);\r\n\r\n      const application = await ApplicationEntity.findByPk(\r\n        decodedCustomerAppToken.app_id,\r\n      );\r\n\r\n      if (!application) {\r\n        throw new ApiCallerError('project_not_found');\r\n      }\r\n\r\n      verify(token, application.sharedSecret, {\r\n        clockTolerance: ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS,\r\n        maxAge: `${ACCESS_TOKEN_MAX_AGE_SECONDS}s`,\r\n        algorithms: ['HS512'],\r\n      });\r\n    } catch (e: any) {\r\n      if (e instanceof ApiCallerError) {\r\n        throw e;\r\n      } else {\r\n        throw new ApiCallerError('invalid_project_token', { message: e });\r\n      }\r\n    }\r\n\r\n    const { app_id } = decodedCustomerAppToken;\r\n\r\n    req.appID = app_id;\r\n    const storage = asyncLocalStorage?.getStore();\r\n    if (storage) {\r\n      storage.platformApplicationID = app_id;\r\n    }\r\n\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n}\r\n\r\nasync function verifyCustomerToken(\r\n  token: string,\r\n  req: Request,\r\n  _res: Response,\r\n  next: NextFunction,\r\n) {\r\n  try {\r\n    let decodedCustomerAppToken: CustomerServerAuthTokenData;\r\n\r\n    try {\r\n      const data = decode(token);\r\n      decodedCustomerAppToken = validateCustomerTokenData(data);\r\n\r\n      const customer = await CustomerEntity.findByPk(\r\n        decodedCustomerAppToken.customer_id,\r\n      );\r\n\r\n      if (!customer) {\r\n        throw new ApiCallerError('invalid_customer_token');\r\n      }\r\n\r\n      verify(token, customer.sharedSecret, {\r\n        clockTolerance: ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS,\r\n        maxAge: `${ACCESS_TOKEN_MAX_AGE_SECONDS}s`,\r\n        algorithms: ['HS512'],\r\n      });\r\n    } catch (e: any) {\r\n      if (e instanceof ApiCallerError) {\r\n        throw e;\r\n      } else {\r\n        throw new ApiCallerError('invalid_customer_token', { message: e });\r\n      }\r\n    }\r\n\r\n    const { customer_id } = decodedCustomerAppToken;\r\n\r\n    req.customerID = customer_id;\r\n\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n}\r\n\r\n// Verify App-level auth tokens used for most of our REST API endpoints\r\nasync function VerifyAppServerAuthTokenImpl(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) {\r\n  const authorizationHeader = req.headers.authorization;\r\n\r\n  const accessToken =\r\n    verifyBearerTokenInAuthorizationHeaders(authorizationHeader);\r\n\r\n  if (isCordSignedToken(accessToken)) {\r\n    await verifyCordBearerTokenAuthorization(accessToken, req, res, next);\r\n  } else {\r\n    await verifyAppToken(accessToken, req, res, next);\r\n  }\r\n}\r\n\r\nexport const VerifyAppServerAuthToken = forwardHandlerExceptionsToNext(\r\n  VerifyAppServerAuthTokenImpl,\r\n);\r\n\r\n// Method to verify Customer-level auth tokens used only for our applications API\r\nasync function VerifyCustomerServerAuthTokenImpl(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) {\r\n  const authorizationHeader = req.headers.authorization;\r\n\r\n  const accessToken =\r\n    verifyBearerTokenInAuthorizationHeaders(authorizationHeader);\r\n\r\n  await verifyCustomerToken(accessToken, req, res, next);\r\n}\r\n\r\nexport const VerifyCustomerServerAuthToken = forwardHandlerExceptionsToNext(\r\n  VerifyCustomerServerAuthTokenImpl,\r\n);\r\n", "import type { Request, Response, NextFunction } from 'express';\r\n\r\nexport default function IndexHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  res.send(\r\n    `<pre>\r\n                                             *&&&&&&&&&&&&&&&&&&\r\n                   .*,                       *&&&&&&&&&&&&&&&&&&\r\n                &&&&&&&&&&&&.                *&&&&&&&&&%\r\n               &&&&&&&&&&&&&&&&&             *&&&&&&&&&&&%\r\n               &&&&&&     /&&&&&&&&          *&&&&&  &&&&&&\r\n                &&&&&&        &&&&&&&&       *&&&&&    &&&&&&\r\n                 &&&&&&          &&&&&&&     *&&&&&     &&&&&&\r\n                  .&&&&&&          &&&&&&%               &&&&&&\r\n                    %&&&&&&          &&&&&&               &&&&&\r\n                      (&&&&&&&        (&&&&&              &&&&&.\r\n                         &&&&&&&&      .&&&&&             &&&&&\r\n                           .&&&&&&&&&   &&&&&&          &&&&&&.\r\n                   *           &&&&&&&&&&&&&&&       &&&&&&&&\r\n                (&&&&&,            &&&&&&&&&&&&&&&&&&&&&&&&\r\n                 &&&&&&&&&,            &&&&&&&&&&&&&&&&\r\n                    %&&&&&&&&&&&&&&&&&&&&&&&\r\n                        ,&&&&&&&&&&&&&&&&,\r\n\r\n${new Date().toLocaleString()}\r\n${process.env.COMMIT_HASH}\r\n</pre>`,\r\n  );\r\n}\r\n", "import * as url from 'url';\r\nimport type { Request, Response, NextFunction } from 'express';\r\nimport * as cookie from 'cookie';\r\nimport * as Slack from '@slack/web-api';\r\nimport { Op, QueryTypes } from 'sequelize';\r\n\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\n\r\nimport type { SlackTeam } from 'server/src/slack/api.ts';\r\nimport {\r\n  fetchAuthedSlackUser,\r\n  fetchSlackUserInfo,\r\n  fetchSlackTeamInfo,\r\n  fetchSlackChannelList,\r\n} from 'server/src/slack/api.ts';\r\nimport { Viewer, assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { OrgMutator } from 'server/src/entity/org/OrgMutator.ts';\r\nimport type { SlackBotUserAuthData } from 'server/src/slack/types.ts';\r\nimport { updateOrCreateSlackUserProfile } from 'server/src/slack/util.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport { SlackChannelMutator } from 'server/src/entity/slack_channel/SlackChannelMutator.ts';\r\nimport { parametersFromRequest } from 'server/src/util/cookies.ts';\r\nimport {\r\n  SLACK_DEV_APP_ID,\r\n  SLACK_APP_ID,\r\n  CORD_TEST_SLACK_TEAM_ID,\r\n  SLACK_APP_CLIENT_ID,\r\n  SLACK_DEV_APP_CLIENT_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { slackLoginURL } from 'common/util/oauth.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { decodeSlackOAuthState } from 'server/src/auth/oauth.ts';\r\nimport { LinkedOrgsMutator } from 'server/src/entity/linked_orgs/LinkedOrgsMutator.ts';\r\nimport { LinkedUsersMutator } from 'server/src/entity/linked_users/LinkedUsersMutator.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport submitAsync from 'server/src/asyncTier/submitAsync.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { publishUserIdentityUpdate } from 'server/src/pubsub/index.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\n\r\nasync function findOrCreateSlackOrg(\r\n  bot_access_token: string,\r\n  bot_user_id: string,\r\n  team: SlackTeam,\r\n  app_id: string,\r\n) {\r\n  const orgMutator = new OrgMutator(Viewer.createServiceViewer());\r\n\r\n  const newAuthData: SlackBotUserAuthData = { bot_access_token, bot_user_id };\r\n  const [orgEntity] = await orgMutator.findOrCreateSlackOrg({\r\n    name: team.name,\r\n    domain: team.domain,\r\n    externalID: team.id,\r\n    externalAuthData: newAuthData,\r\n    state: 'active',\r\n    slackAppID: app_id,\r\n  });\r\n\r\n  // If we receive newer access information, update the DB\r\n  if (!isEqual(orgEntity.externalAuthData, newAuthData)) {\r\n    orgEntity.externalAuthData = newAuthData;\r\n    await orgEntity.save();\r\n  }\r\n\r\n  // Check if name or domain have changed, and update them in the db if true\r\n  if (orgEntity.name !== team.name || orgEntity.domain !== team.domain) {\r\n    orgEntity.name = team.name;\r\n    orgEntity.domain = team.domain;\r\n    await orgEntity.save();\r\n  }\r\n\r\n  return orgEntity;\r\n}\r\n\r\nfunction getNonceFromRequest(req: Request) {\r\n  const cookies = req.headers.cookie;\r\n  if (!cookies) {\r\n    anonymousLogger().warn('No cookies found');\r\n    return '';\r\n  }\r\n  const parsedCookies = cookie.parse(cookies);\r\n\r\n  const nonce = parsedCookies['nonce'];\r\n\r\n  if (!nonce) {\r\n    return '';\r\n  }\r\n\r\n  return nonce;\r\n}\r\n\r\nfunction doCSRFCheck(nonceCookie: string, nonceState: string) {\r\n  if (!nonceCookie) {\r\n    anonymousLogger().warn('Nonce cookie not found');\r\n    return false;\r\n  }\r\n\r\n  if (!nonceState) {\r\n    anonymousLogger().warn('Nonce state not found');\r\n    return false;\r\n  }\r\n\r\n  if (nonceState !== nonceCookie) {\r\n    anonymousLogger().warn(\r\n      'Login CSRF attempt detected. Nonce does not equal state value. Preventing Login',\r\n    );\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default function SlackAuthRedirectHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  let logger = anonymousLogger();\r\n  let { state } = req.query;\r\n\r\n  // Our Slack app has a short whitelist of redirect URLs. Slack does not allow\r\n  // us to use localhost or hostnames resolving to localhost. Neither does it\r\n  // allow wildcard hostnames.\r\n  // To circumvent this restriction, we can use our prod/staging servers as\r\n  // redirect targets, and serve a further http redirect to allow using Slack\r\n  // login with our local dev environment.\r\n  // Redirecting here happens when the state query parameter has a prefix like\r\n  // `[hostname]`. In this case we redirect to the given hostname. We do not\r\n  // validate that the state is a correctly signed JSON web token. That's\r\n  // because local dev environments use different signing secrets, so they\r\n  // wouldn't appear to be valid to the prod or staging server.\r\n  // Instead, we restrict redirect destinations to hostnames in the cord.com\r\n  // domain (or any level of subdomain), optionally with a port number. (As such\r\n  // `local.cord.com:8161` is a valid redirect host.) If we allowed redirecting\r\n  // anywhere, then bad actors could prompt Slack login, asking to give Cord\r\n  // access to a user's Slack org, but then have the Slack auth token sent to\r\n  // them, via this redirect.\r\n  if (typeof state === 'string' && state[0] === '[') {\r\n    const match = /^\\[([\\w.:-]+)\\](.*)$/.exec(state);\r\n    if (match) {\r\n      // The state looks like `[redirectHost]trueState`.\r\n      const [_, redirectHost, trueState] = match;\r\n      if (/^([\\w-]+\\.)*cord\\.com(:\\d+)?$/.test(redirectHost)) {\r\n        // The redirect host is in the cord.com domain. Redirect there!\r\n        res.redirect(\r\n          url.format({\r\n            protocol: 'https',\r\n            host: redirectHost,\r\n            pathname: req.path,\r\n            query: {\r\n              ...req.query,\r\n              state: trueState,\r\n            },\r\n          }),\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    // If the state begins with `[` but we didn't return from this function by\r\n    // now. The redirect host prefix isn't well-formed or the host name is not\r\n    // whitelisted. We just continue. Decoding `state` will fail below and\r\n    // trigger an error.\r\n  }\r\n\r\n  const isDevApp = req.path.slice(-3) === 'dev';\r\n\r\n  const { code, error } = req.query;\r\n\r\n  if (typeof state !== 'string') {\r\n    logger.error(\r\n      'state was not a string as expected - continuing with empty state',\r\n      { state },\r\n    );\r\n    state = '';\r\n  }\r\n\r\n  const decodedState = decodeSlackOAuthState(state);\r\n\r\n  // returns the nonce otherwise returns an empty string\r\n  const nonceCookie = getNonceFromRequest(req);\r\n\r\n  const csrfCheckPassed = doCSRFCheck(nonceCookie, decodedState.nonce);\r\n\r\n  let utmParameters;\r\n\r\n  try {\r\n    utmParameters = parametersFromRequest(req).utmParameters;\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  } catch (error) {\r\n    logger.warn('Error parsing utm parameters from cookie');\r\n    utmParameters = undefined;\r\n  }\r\n\r\n  (async (): Promise<string> => {\r\n    function redirectURLWithError(errorMessage: string) {\r\n      return `${APP_ORIGIN}/auth-slack-linking-error.html#message=${errorMessage}&service=slack`;\r\n    }\r\n    if (!code || !csrfCheckPassed) {\r\n      // Slack login failed\r\n\r\n      let errorMessage: string;\r\n      if (error === 'access_denied') {\r\n        // The user pressed \"Cancel\" in Slack's auth dialog\r\n        errorMessage = 'slack-login-access-denied';\r\n      } else if (!csrfCheckPassed) {\r\n        // CSRF check did not pass\r\n        errorMessage = 'slack-csrf-check-failed';\r\n      } else {\r\n        // Something else went wrong\r\n        errorMessage = 'slack-login-failed';\r\n      }\r\n\r\n      const anonymousEventMutator = new EventMutator({\r\n        viewer: Viewer.createAnonymousViewer(),\r\n        utmParameters,\r\n      });\r\n\r\n      await anonymousEventMutator.createEvent({\r\n        pageLoadID: null,\r\n        installationID: null,\r\n        eventNumber: null,\r\n        clientTimestamp: null,\r\n        logLevel: LogLevel.DEBUG,\r\n        type: errorMessage,\r\n        payload: { payload: errorMessage },\r\n        metadata: {},\r\n      });\r\n\r\n      return redirectURLWithError(errorMessage);\r\n    }\r\n\r\n    // The Slack login seems to have succeeded. At least we have received a\r\n    // Slack temporary auth code. We need to call the Slack API to turn that\r\n    // into a permanent access token.\r\n    const slackAuthedUserResponse = await fetchAuthedSlackUser(\r\n      code.toString(),\r\n      isDevApp,\r\n      decodedState,\r\n    );\r\n\r\n    if (!slackAuthedUserResponse.authed_user || !slackAuthedUserResponse.team) {\r\n      throw new Error('Slack authed user response malformed');\r\n    }\r\n\r\n    const {\r\n      authed_user: { id: user_id },\r\n      team: { id: team_id },\r\n      access_token: bot_access_token,\r\n      bot_user_id,\r\n      app_id,\r\n    } = slackAuthedUserResponse;\r\n\r\n    if (!app_id || !user_id || !team_id || !bot_user_id || !bot_access_token) {\r\n      throw new Error('Slack authed user response malformed');\r\n    }\r\n\r\n    // Usually the app_id will be that of our regular Cord Slack app. One\r\n    // exception is that when logging into the `radicaltestorg` workspace,\r\n    // we want to do that with the Cord dev Slack app.  The other exception is if\r\n    // we are dealing with a customer who has given us the keys to their own\r\n    // dedicated Cord Slack app.\r\n\r\n    if (\r\n      (team_id === CORD_TEST_SLACK_TEAM_ID && app_id !== SLACK_DEV_APP_ID) ||\r\n      (team_id !== CORD_TEST_SLACK_TEAM_ID && app_id === SLACK_DEV_APP_ID)\r\n    ) {\r\n      // The app_id Slack gave us is one of ours, but it's not\r\n      // `expectedAppId`, so it's not the right app id. Either someone\r\n      // tried to login to our test org with the normal Slack app, or to\r\n      // any other org with our dev Slack app.  Either way it doesn't\r\n      // match.\r\n\r\n      // Remove the app from the workspace again.\r\n      const slackClient = new Slack.WebClient(bot_access_token);\r\n      if (app_id === SLACK_APP_ID) {\r\n        await slackClient.apps.uninstall({\r\n          client_id: SLACK_APP_CLIENT_ID,\r\n          client_secret: env.SLACK_APP_CLIENT_SECRET,\r\n        });\r\n      } else {\r\n        await slackClient.apps.uninstall({\r\n          client_id: SLACK_DEV_APP_CLIENT_ID,\r\n          client_secret: env.SLACK_DEV_APP_CLIENT_SECRET,\r\n        });\r\n      }\r\n\r\n      // Redirect to the login again. We pass the `team_id` to\r\n      // `slackLoginURL`, it will produce the URL for the app matching the\r\n      // team_id.\r\n      return slackLoginURL(state, team_id);\r\n    }\r\n\r\n    const [userInfoResponse, teamInfoResponse, channelList] = await Promise.all(\r\n      [\r\n        // TODO(flooey): We should use a single WebClient for all of these calls\r\n        // instead of passing the token to each function\r\n        fetchSlackUserInfo(user_id, bot_access_token),\r\n        fetchSlackTeamInfo(bot_access_token),\r\n        fetchSlackChannelList(new Slack.WebClient(bot_access_token)),\r\n      ],\r\n    );\r\n\r\n    // first of all ensure we have an org entity for this slack workspace\r\n    const org = await findOrCreateSlackOrg(\r\n      bot_access_token,\r\n      bot_user_id,\r\n      teamInfoResponse.team,\r\n      app_id,\r\n    );\r\n\r\n    if (decodedState.type === 'console_user') {\r\n      await ApplicationEntity.update(\r\n        { supportOrgID: org.id },\r\n        { where: { id: decodedState.data.platformApplicationID } },\r\n      );\r\n    }\r\n\r\n    // if a profile already exists for this slack user, return it, otherwise\r\n    // create a new profile and associated user\r\n    const user = await updateOrCreateSlackUserProfile(\r\n      org,\r\n      userInfoResponse.user,\r\n    );\r\n\r\n    // if the profile returns as null then the user state is 'deleted'\r\n    if (!user) {\r\n      return redirectURLWithError('DeletedUser');\r\n    }\r\n\r\n    let viewerOfSourceUser = Viewer.createAnonymousViewer();\r\n    logger = new Logger(viewerOfSourceUser);\r\n\r\n    if (decodedState.type === 'link_org') {\r\n      try {\r\n        await getSequelize().transaction(async (transaction) => {\r\n          if (decodedState.type === 'link_org') {\r\n            // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n            const [user, org] = await Promise.all([\r\n              UserEntity.findByPk(decodedState.data.userID),\r\n              OrgEntity.findByPk(decodedState.data.orgID),\r\n            ]);\r\n\r\n            if (!user?.externalID || !org?.externalID) {\r\n              throw new Error('Cannot find external ids when linking org');\r\n            }\r\n\r\n            viewerOfSourceUser = await Viewer.createLoggedInPlatformViewer({\r\n              user,\r\n              org,\r\n            });\r\n          }\r\n\r\n          const { userID: sourceUserID, orgID: sourceOrgID } =\r\n            assertViewerHasIdentity(viewerOfSourceUser);\r\n\r\n          const [\r\n            isPlatformOrgAlreadyLinkedToAnotherOrg,\r\n            isSlackOrgAlreadyLinkedToAnotherOrg,\r\n          ] = await Promise.all([\r\n            Boolean(\r\n              await LinkedOrgsEntity.findOne({\r\n                where: {\r\n                  sourceOrgID,\r\n                  linkedOrgID: { [Op.ne]: org.id },\r\n                },\r\n                transaction,\r\n              }),\r\n            ),\r\n            Boolean(\r\n              await LinkedOrgsEntity.findOne({\r\n                where: {\r\n                  sourceOrgID: { [Op.ne]: sourceOrgID },\r\n                  linkedOrgID: org.id,\r\n                },\r\n                transaction,\r\n              }),\r\n            ),\r\n          ]);\r\n\r\n          if (isPlatformOrgAlreadyLinkedToAnotherOrg) {\r\n            // the transaction will automatically be rolled back\r\n            throw new Error(Errors.PLATFORM_ORG_ALREADY_LINKED);\r\n          }\r\n\r\n          const linkedOrgsMutator = new LinkedOrgsMutator(\r\n            viewerOfSourceUser,\r\n            null,\r\n          );\r\n          const linkedUsersMutator = new LinkedUsersMutator(viewerOfSourceUser);\r\n\r\n          // Depending on the slackConnectAllOrgs value on the application, this\r\n          // will link just the viewer org, or all of the user's orgs\r\n          await linkedOrgsMutator.linkOrgs(org.id, transaction);\r\n\r\n          await linkedUsersMutator.linkUsers(\r\n            {\r\n              sourceUserID,\r\n              sourceOrgID,\r\n              linkedUserID: user.id,\r\n              linkedOrgID: org.id,\r\n            },\r\n            transaction,\r\n          );\r\n\r\n          // if this slack org is already connected to another embed in the same\r\n          // platform i.e. TF, we check if the embed also has the same users\r\n          // if they do, and they are linked to a slack user, we will also link\r\n          // them to the same slack user in this embed org\r\n          if (isSlackOrgAlreadyLinkedToAnotherOrg) {\r\n            const membersInPlatformOrgQuery = `SELECT \"userID\" FROM cord.org_members WHERE \"orgID\"= $sourceOrgID AND \"userID\" != $sourceUserID`;\r\n\r\n            const matchedLinkedUsersToLink =\r\n              await getSequelize().query<LinkedUsersEntity>(\r\n                // if more than one other embed org is currently connected to the\r\n                // same slack org we make sure that we only get one row for each\r\n                // sourceUserID\r\n                `SELECT DISTINCT ON (\"sourceUserID\") * FROM cord.linked_users\r\n              WHERE \"sourceUserID\" IN (${membersInPlatformOrgQuery})\r\n              AND \"sourceOrgID\" != $sourceOrgID\r\n              AND \"linkedUserID\" != $linkedUserID\r\n              AND \"linkedOrgID\" = $linkedOrgID\r\n              `,\r\n                {\r\n                  bind: {\r\n                    sourceUserID,\r\n                    sourceOrgID,\r\n                    linkedUserID: user.id,\r\n                    linkedOrgID: org.id,\r\n                  },\r\n                  type: QueryTypes.SELECT,\r\n                  model: LinkedUsersEntity,\r\n                  transaction,\r\n                },\r\n              );\r\n\r\n            await Promise.all(\r\n              matchedLinkedUsersToLink.map((linkedUser) =>\r\n                linkedUsersMutator.linkUsers(\r\n                  {\r\n                    sourceUserID: linkedUser.sourceUserID,\r\n                    sourceOrgID,\r\n                    linkedUserID: linkedUser.linkedUserID,\r\n                    linkedOrgID: org.id,\r\n                  },\r\n                  transaction,\r\n                ),\r\n              ),\r\n            );\r\n          }\r\n\r\n          logger.debug('Linked two users', {\r\n            sourceUserID,\r\n            sourceOrgID,\r\n            linkedUserID: user.id,\r\n            linkedOrgID: org.id,\r\n          });\r\n          transaction.afterCommit(async () => {\r\n            // Notify the logged in user that a Slack connection happened\r\n            await publishUserIdentityUpdate({\r\n              userID: sourceUserID,\r\n              platformApplicationID: viewerOfSourceUser.platformApplicationID!,\r\n            });\r\n          });\r\n        });\r\n      } catch (e: any) {\r\n        let errorMessage = 'error-connecting-platform-and-slack';\r\n        let logLevel: 'error' | 'warn' = 'error';\r\n\r\n        if (e.message === Errors.PLATFORM_ORG_ALREADY_LINKED) {\r\n          errorMessage = Errors.PLATFORM_ORG_ALREADY_LINKED;\r\n          logLevel = 'warn';\r\n        }\r\n\r\n        logger.logException(\r\n          'Error connecting platform org with Slack org',\r\n          e,\r\n          {\r\n            sourceUserID: viewerOfSourceUser.userID,\r\n            sourceOrgID: viewerOfSourceUser.orgID,\r\n            linkedUserID: user.id,\r\n            linkedOrgID: org.id,\r\n            decodedState,\r\n            isDevApp,\r\n          },\r\n          undefined,\r\n          logLevel,\r\n        );\r\n\r\n        return `${APP_ORIGIN}/auth-slack-linking-error.html#message=${errorMessage}&service=slack`;\r\n      }\r\n    }\r\n\r\n    const viewer = Viewer.createLoggedInViewer(user.id, org.id);\r\n\r\n    // execute further steps in parallel\r\n    const promises: Promise<any>[] = [];\r\n\r\n    // create grey users for other team members if necessary\r\n    // and update any changed details of existing slack/cord users\r\n    // on async tier\r\n    await submitAsync('syncSlackGreyUsers', {\r\n      orgID: org.id,\r\n    });\r\n\r\n    // save Slack channels in database\r\n    promises.push(new SlackChannelMutator(viewer).createMany(channelList));\r\n\r\n    // Log the successful Slack login.\r\n    const eventMutator = new EventMutator({\r\n      viewer,\r\n      utmParameters,\r\n    });\r\n    promises.push(\r\n      eventMutator.createEvent({\r\n        pageLoadID: null,\r\n        installationID: null,\r\n        eventNumber: null,\r\n        clientTimestamp: null,\r\n        logLevel: LogLevel.DEBUG,\r\n        type: 'slack-login-success',\r\n        payload: {},\r\n        metadata: {},\r\n      }),\r\n    );\r\n\r\n    await Promise.all(promises);\r\n\r\n    if (decodedState.type === 'link_org') {\r\n      return `${APP_ORIGIN}/auth-puppet-complete.html`;\r\n    }\r\n\r\n    if (decodedState.type === 'console_user') {\r\n      return `${APP_ORIGIN}/auth-complete.html#service=slack&origin=console`;\r\n    }\r\n\r\n    return redirectURLWithError('UnexpectedOutcome');\r\n  })().then(\r\n    // this is to make sure we do exactly one of the following:\r\n    // * redirect, if the above async function succeeded at constructing the\r\n    // redirect destination\r\n    // * in case of an error, emit a 500 Server Error and log the error\r\n    (redirect) => res.redirect(redirect),\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    (error) => {\r\n      res.sendStatus(500);\r\n      logger.logException('Error in SlackAuthRedirectHandler', error, {\r\n        isDevApp,\r\n      });\r\n    },\r\n  );\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { AuthProviderType, SERVICE_USER_ID } from 'server/src/auth/index.ts';\r\nimport type { OrgEntityState } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { JsonObject, UUID } from 'common/types/index.ts';\r\nimport { CORD_SLACK_APP_IDS } from 'common/const/Ids.ts';\r\n\r\nexport class OrgMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async findOrCreateSlackOrg({\r\n    name,\r\n    domain,\r\n    externalID,\r\n    externalAuthData,\r\n    state,\r\n    slackAppID,\r\n  }: {\r\n    name: string;\r\n    domain: string;\r\n    externalID: string;\r\n    externalAuthData: JsonObject | null;\r\n    state: OrgEntityState;\r\n    slackAppID: string;\r\n  }) {\r\n    if (this.viewer.userID !== SERVICE_USER_ID) {\r\n      throw new Error('Only a service user can create orgs.');\r\n    }\r\n\r\n    // customSlackAppID column is null for our Cord apps.  This was to avoid\r\n    // doing a bigger migration when we introduced the ability to add external\r\n    // Slack apps\r\n    const customSlackAppID = CORD_SLACK_APP_IDS.includes(slackAppID)\r\n      ? null\r\n      : slackAppID;\r\n\r\n    return await OrgEntity.findOrCreate({\r\n      where: {\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalID,\r\n        // Technically redundant, but allows postgres to use an index.\r\n        platformApplicationID: null,\r\n        customSlackAppID,\r\n      },\r\n      defaults: {\r\n        name,\r\n        domain,\r\n        externalProvider: AuthProviderType.SLACK,\r\n        externalID,\r\n        externalAuthData,\r\n        state,\r\n        customSlackAppID,\r\n      },\r\n    });\r\n  }\r\n\r\n  async toggleInternalFlag(orgID: UUID) {\r\n    const org = await OrgEntity.findByPk(orgID);\r\n    if (!org) {\r\n      throw new Error(`org ${orgID} not found`);\r\n    }\r\n    org.internal = !org.internal;\r\n    return await org.save();\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { SlackChannelEntity } from 'server/src/entity/slack_channel/SlackChannelEntity.ts';\r\n\r\nexport class SlackChannelMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async createOne(\r\n    slackChannelID: string,\r\n    name: string,\r\n    added: boolean,\r\n    archived: boolean,\r\n    users: number,\r\n  ) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    return await SlackChannelEntity.upsert({\r\n      orgID,\r\n      slackID: slackChannelID,\r\n      name,\r\n      added,\r\n      archived,\r\n      users,\r\n    });\r\n  }\r\n\r\n  async setAdded(slackChannelID: string, added: boolean) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const [numberUpdated] = await SlackChannelEntity.update(\r\n      {\r\n        added,\r\n      },\r\n      {\r\n        where: { orgID, slackID: slackChannelID },\r\n      },\r\n    );\r\n\r\n    return !!numberUpdated;\r\n  }\r\n\r\n  async setArchived(slackChannelID: string, archived: boolean) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const [numberUpdated] = await SlackChannelEntity.update(\r\n      {\r\n        // Nothing (including bots) can be in an archived channel, so set added\r\n        // to false if we update a channel to archived\r\n        added: archived ? false : undefined,\r\n        archived,\r\n      },\r\n      {\r\n        where: { orgID, slackID: slackChannelID },\r\n      },\r\n    );\r\n\r\n    return !!numberUpdated;\r\n  }\r\n\r\n  createMany(\r\n    channels: Array<{\r\n      id: string;\r\n      name: string;\r\n      users: number;\r\n      archived: boolean;\r\n    }>,\r\n  ) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    return SlackChannelEntity.bulkCreate(\r\n      channels.map(({ id, name, users, archived }) => ({\r\n        slackID: id,\r\n        name,\r\n        orgID,\r\n        added: false,\r\n        archived,\r\n        users,\r\n      })),\r\n      { updateOnDuplicate: ['name', 'users', 'archived'] },\r\n    );\r\n  }\r\n\r\n  async setName(slackChannelID: string, name: string) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const [numberUpdated] = await SlackChannelEntity.update(\r\n      {\r\n        name,\r\n      },\r\n      {\r\n        where: { orgID, slackID: slackChannelID },\r\n      },\r\n    );\r\n\r\n    return !!numberUpdated;\r\n  }\r\n}\r\n", "import type { IncomingMessage } from 'http';\r\nimport { parse } from 'querystring';\r\n\r\nimport * as cookie from 'cookie';\r\n\r\nimport type { Session } from 'server/src/auth/index.ts';\r\nimport { UTM_COOKIE_KEY } from 'common/const/Cookies.ts';\r\n\r\nimport {\r\n  GA_MEASUREMENT_COOKIE_KEY,\r\n  GA_USER_COOKIE_KEY,\r\n} from 'server/src/util/google-analytics.ts';\r\n\r\nexport function parseUtmParameters(utm: any) {\r\n  if (typeof utm !== 'string') {\r\n    return;\r\n  }\r\n\r\n  const query = parse(utm.replace(/^\\?/, ''));\r\n  let nonEmpty = false;\r\n  const utmParameters: Session['utmParameters'] = {};\r\n\r\n  for (const [key, value] of Object.entries(query)) {\r\n    if (key.startsWith('utm_')) {\r\n      utmParameters[key.substr(4)] = value;\r\n      nonEmpty = true;\r\n    }\r\n  }\r\n\r\n  if (nonEmpty) {\r\n    return utmParameters;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction parametersFromCookie(value: string) {\r\n  const parsedCookies = cookie.parse(value);\r\n\r\n  return {\r\n    utmParameters: parseUtmParameters(parsedCookies[UTM_COOKIE_KEY]),\r\n    gaCookie: parsedCookies[GA_USER_COOKIE_KEY],\r\n    gaMeasurementCookie: parsedCookies[GA_MEASUREMENT_COOKIE_KEY],\r\n  };\r\n}\r\n\r\nexport function parametersFromRequest(req: IncomingMessage) {\r\n  return parametersFromCookie(req.headers.cookie || '');\r\n}\r\n", "export const UTM_COOKIE_KEY = 'utm';\r\n", "import Env from 'server/src/config/Env.ts';\r\n\r\nexport const GA_USER_COOKIE_KEY = '_ga';\r\nexport const GA_MEASUREMENT_COOKIE_KEY = `_ga_${\r\n  Env.GA_MEASUREMENT_ID.split('-')[1]\r\n}`;\r\n\r\nexport type GACookieType = {\r\n  cookie: string;\r\n  measurementCookie: string;\r\n} | null;\r\n\r\nexport function extractFromGACookies(gaCookie: GACookieType | undefined) {\r\n  if (!gaCookie) {\r\n    return null;\r\n  }\r\n\r\n  if (!gaCookie.cookie || !gaCookie.measurementCookie) {\r\n    // We should have both in order to track a user in the session\r\n    return null;\r\n  }\r\n\r\n  // Example GA1.1.1530219509.1692358124 and we need to remove the GA.1.1.\r\n  const gaClientID = gaCookie.cookie.slice(6);\r\n\r\n  // Example GS1.1.1692358123.1.1.1692360261.47.0.0 and we need to extract the\r\n  // first large number between GS1.1. and .1.1.\r\n  const gaSessionID = Number(gaCookie.measurementCookie.split('.')[2]);\r\n\r\n  return {\r\n    gaClientID,\r\n    gaSessionID,\r\n  };\r\n}\r\n\r\nconst GA_MEASUREMENT_API_URL = `https://www.google-analytics.com/mp/collect?api_secret=${Env.GA_MEASUREMENT_PROTOCOL_API_SECRET}&measurement_id=${Env.GA_MEASUREMENT_ID}`;\r\n\r\nexport async function sendEventToGoogleAnalytics(\r\n  eventName: string,\r\n  clientID: string,\r\n  sessionID: number,\r\n) {\r\n  try {\r\n    // Sending to google analytics\r\n    await fetch(GA_MEASUREMENT_API_URL, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        client_id: clientID,\r\n        non_personalized_ads: false,\r\n        events: [\r\n          {\r\n            name: eventName,\r\n            params: {\r\n              items: [],\r\n              session_id: sessionID,\r\n            },\r\n          },\r\n        ],\r\n      }),\r\n    });\r\n  } catch {\r\n    //do nothing\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\n\r\nimport type { Request } from 'express';\r\nimport { sign, verify } from 'jsonwebtoken';\r\n\r\nimport {\r\n  API_SERVER_HOST,\r\n  API_SERVER_HOST_PRODUCTION,\r\n} from 'common/const/Urls.ts';\r\nimport type {\r\n  SlackOAuthConsoleUserState,\r\n  SlackOAuthDecodeState,\r\n  SlackOAuthLinkOrgState,\r\n} from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { ThirdPartyConnectionType } from 'server/src/schema/resolverTypes.ts';\r\n\r\ntype ThirdPartyConnectionState = {\r\n  userID: string;\r\n  orgID: string;\r\n  type: ThirdPartyConnectionType;\r\n\r\n  // For JIRA, the auth callback always points to production. If you want to log\r\n  // in on another instance, we sent the api hostname of that instance in the\r\n  // `development` field and then redirect there from production.\r\n  development?: string;\r\n};\r\n\r\nexport function encodeViewerForOAuthState(\r\n  viewer: Viewer,\r\n  type: ThirdPartyConnectionType,\r\n) {\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n  const state: ThirdPartyConnectionState = {\r\n    userID,\r\n    orgID,\r\n    type,\r\n  };\r\n\r\n  if (API_SERVER_HOST !== API_SERVER_HOST_PRODUCTION) {\r\n    state['development'] = API_SERVER_HOST;\r\n  }\r\n\r\n  return sign(state, env.OAUTH_STATE_SIGNING_SECRET);\r\n}\r\n\r\nexport function decodeViewerFromOAuthState(token: string) {\r\n  return verify(\r\n    token,\r\n    env.OAUTH_STATE_SIGNING_SECRET,\r\n  ) as ThirdPartyConnectionState;\r\n}\r\n\r\nexport function getOAuthCodeAndState(\r\n  req: Request,\r\n): [string, ThirdPartyConnectionState] {\r\n  const { code, state } = req.query;\r\n  if (!code || !state) {\r\n    throw new Error(`missing code or state`);\r\n  }\r\n\r\n  let stateData: ThirdPartyConnectionState | null = null;\r\n  try {\r\n    stateData = decodeViewerFromOAuthState(state as string);\r\n  } catch (e) {\r\n    throw new Error(`decodeViewerFromOAuthState failed`);\r\n  }\r\n\r\n  if (!stateData) {\r\n    throw new Error(`missing state data`);\r\n  }\r\n  return [code as string, stateData];\r\n}\r\n\r\nfunction encryptSlackOAuthState(state: string) {\r\n  const iv = crypto.randomBytes(12);\r\n\r\n  const cipher = crypto.createCipheriv(\r\n    'aes-256-gcm',\r\n    env.SLACK_OAUTH_STATE_SIGNING_SECRET,\r\n    iv,\r\n  );\r\n\r\n  const encrypted = Buffer.concat([\r\n    cipher.update(state, 'utf8'),\r\n    cipher.final(),\r\n  ]);\r\n\r\n  const authTag = cipher.getAuthTag();\r\n\r\n  return [\r\n    encrypted.toString('hex'),\r\n    authTag.toString('hex'),\r\n    iv.toString('hex'),\r\n  ].join(':');\r\n}\r\n\r\nfunction decryptSlackOAuthState(token: string) {\r\n  const [encrypted, authTag, iv] = token.split(':');\r\n\r\n  const decipher = crypto.createDecipheriv(\r\n    'aes-256-gcm',\r\n    env.SLACK_OAUTH_STATE_SIGNING_SECRET,\r\n    Buffer.from(iv, 'hex'),\r\n  );\r\n\r\n  decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\r\n  decrypted += decipher.final();\r\n  return decrypted;\r\n}\r\n\r\nexport function encodeSlackOAuthState(state: SlackOAuthDecodeState) {\r\n  return encryptSlackOAuthState(JSON.stringify(state));\r\n}\r\n\r\ntype DecodedState = {\r\n  type: unknown;\r\n  nonce: unknown;\r\n  data: unknown;\r\n};\r\n\r\nexport function decodeSlackOAuthState(state: string): SlackOAuthDecodeState {\r\n  const decodedState = JSON.parse(decryptSlackOAuthState(state));\r\n  if (typeof decodedState !== 'object') {\r\n    throw new Error(`Unexpected Slack OAuth State format: ${state}`);\r\n  }\r\n\r\n  if (!decodedState?.type || !decodedState?.nonce || !decodedState?.data) {\r\n    throw new Error(`Unexpected Slack OAuth State format: ${state}`);\r\n  }\r\n\r\n  // Connecting Slack to SDK user/org\r\n  if (decodedState.type === 'link_org') {\r\n    return decodeSlackOAuthLinkOrgDataState(decodedState);\r\n  }\r\n\r\n  // Connecting Slack from console for support bot\r\n  if (decodedState.type === 'console_user') {\r\n    return decodeSlackOAuthConsoleUserDataState(decodedState);\r\n  }\r\n\r\n  throw new Error(`unknown type: ${decodedState.type}`);\r\n}\r\n\r\nfunction decodeSlackOAuthLinkOrgDataState(\r\n  decodedState: DecodedState,\r\n): SlackOAuthLinkOrgState {\r\n  if (decodedState.type !== 'link_org') {\r\n    throw new Error(\r\n      `Decoded slack state type is not link_org: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof decodedState.nonce !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state nonce is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof decodedState.data !== 'object') {\r\n    throw new Error(\r\n      `Decoded slack state data is not an object: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  const dataState = decodedState.data as {\r\n    userID: unknown;\r\n    orgID: unknown;\r\n    platformApplicationID: unknown;\r\n  };\r\n\r\n  if (typeof dataState.userID !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state data userID is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof dataState.orgID !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state data orgID is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof dataState.platformApplicationID !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state data platformApplicationID is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  return {\r\n    type: decodedState.type,\r\n    nonce: decodedState.nonce,\r\n    data: {\r\n      userID: dataState.userID,\r\n      orgID: dataState.orgID,\r\n      platformApplicationID: dataState.platformApplicationID,\r\n    },\r\n  };\r\n}\r\n\r\nfunction decodeSlackOAuthConsoleUserDataState(\r\n  decodedState: DecodedState,\r\n): SlackOAuthConsoleUserState {\r\n  if (decodedState.type !== 'console_user') {\r\n    throw new Error(\r\n      `Decoded slack state type is not console_user: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof decodedState.nonce !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state nonce is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  if (typeof decodedState.data !== 'object') {\r\n    throw new Error(\r\n      `Decoded slack state data is not an object: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  const dataState = decodedState.data as {\r\n    platformApplicationID: unknown;\r\n  };\r\n\r\n  if (typeof dataState.platformApplicationID !== 'string') {\r\n    throw new Error(\r\n      `Decoded slack state data platformApplicationID is not a string: ${decodedState}`,\r\n    );\r\n  }\r\n\r\n  return {\r\n    type: decodedState.type,\r\n    nonce: decodedState.nonce,\r\n    data: {\r\n      platformApplicationID: dataState.platformApplicationID,\r\n    },\r\n  };\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasPlatformIdentity,\r\n  AuthProviderType,\r\n} from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nexport class LinkedOrgsMutator {\r\n  logger: Logger;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n  }\r\n  async linkOrgs(linkedOrgID: UUID, transaction?: Transaction) {\r\n    // assumption that the viewer org is the source org\r\n    const { userID: mergerUserID, orgID: sourceOrgID } =\r\n      assertViewerHasPlatformIdentity(this.viewer);\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      this.viewer.platformApplicationID,\r\n      { transaction },\r\n    );\r\n\r\n    if (!application) {\r\n      throw new Error('No app id found for viewer');\r\n    }\r\n\r\n    if (application.slackConnectAllOrgs) {\r\n      // This flag is typically used by customers who use org membership as a hack\r\n      // to implement permissions - for them it is more appropriate for ALL of a\r\n      // user's orgs to be connected to the one Slack, because really all these\r\n      // orgs are one team of people\r\n      // If another of the user's orgs (not the viewer org) is already linked to\r\n      // a Slack workspace, it will remain linked to that same workspace (it won't\r\n      // be overridden).\r\n      const allUsersPlatformOrgIDs = (\r\n        await OrgMembersEntity.findAll({\r\n          where: {\r\n            userID: this.viewer.userID,\r\n          },\r\n          transaction,\r\n        })\r\n      ).map((o) => o.orgID);\r\n\r\n      const alreadyLinkedOrgIDs = (\r\n        await LinkedOrgsEntity.findAll({\r\n          where: { sourceOrgID: allUsersPlatformOrgIDs },\r\n          transaction,\r\n        })\r\n      ).map((o) => o.sourceOrgID);\r\n\r\n      if (alreadyLinkedOrgIDs.length > 1) {\r\n        this.logger.warn(\r\n          'Linking all of platform users orgs, but some are already linked',\r\n          {\r\n            alreadyLinkedOrgIDs,\r\n            allUsersPlatformOrgIDs,\r\n          },\r\n        );\r\n      }\r\n\r\n      const orgIDsToLink = allUsersPlatformOrgIDs.filter(\r\n        (id) => !alreadyLinkedOrgIDs.includes(id),\r\n      );\r\n\r\n      const linkings = orgIDsToLink.map((orgID) => ({\r\n        sourceOrgID: orgID,\r\n        sourceExternalProvider: AuthProviderType.PLATFORM,\r\n        linkedOrgID,\r\n        linkedExternalProvider: AuthProviderType.SLACK,\r\n        mergerUserID,\r\n      }));\r\n\r\n      const result = await LinkedOrgsEntity.bulkCreate(linkings, {\r\n        ignoreDuplicates: true,\r\n        transaction,\r\n      });\r\n      this.loaders?.linkedOrgsLoader.clearAll();\r\n      return result;\r\n    } else {\r\n      // This is the traditional approach, where a user is only linking their\r\n      // current viewer org to the Slack org, not all of their orgs.\r\n      const result = await LinkedOrgsEntity.bulkCreate(\r\n        [\r\n          {\r\n            sourceOrgID,\r\n            sourceExternalProvider: AuthProviderType.PLATFORM,\r\n            linkedOrgID,\r\n            linkedExternalProvider: AuthProviderType.SLACK,\r\n            mergerUserID,\r\n          },\r\n        ],\r\n        {\r\n          ignoreDuplicates: true,\r\n          transaction,\r\n        },\r\n      );\r\n      this.loaders?.linkedOrgsLoader.clearAll();\r\n      return result;\r\n    }\r\n  }\r\n\r\n  async unlinkOrgs() {\r\n    // assumption that the viewer org is the source org\r\n    const { orgID: sourceOrgID } = assertViewerHasPlatformIdentity(this.viewer);\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      this.viewer.platformApplicationID,\r\n    );\r\n\r\n    if (!application) {\r\n      throw new Error('No app id found for viewer');\r\n    }\r\n\r\n    // In both cases, all reference linked_user rows will also automatically be\r\n    // deleted\r\n    if (application.slackConnectAllOrgs) {\r\n      const allUsersPlatformOrgIDs = (\r\n        await OrgMembersEntity.findAll({\r\n          where: {\r\n            userID: this.viewer.userID,\r\n          },\r\n        })\r\n      ).map((o) => o.orgID);\r\n\r\n      const result = await LinkedOrgsEntity.destroy({\r\n        where: { sourceOrgID: allUsersPlatformOrgIDs },\r\n      });\r\n      this.loaders?.linkedOrgsLoader.clearAll();\r\n      return result;\r\n    } else {\r\n      const result = await LinkedOrgsEntity.destroy({ where: { sourceOrgID } });\r\n      this.loaders?.linkedOrgsLoader.clearAll();\r\n      return result;\r\n    }\r\n  }\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\n\r\nexport class LinkedUsersMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async linkUsers(\r\n    {\r\n      sourceUserID,\r\n      sourceOrgID,\r\n      linkedUserID,\r\n      linkedOrgID,\r\n    }: {\r\n      sourceUserID: UUID;\r\n      sourceOrgID: UUID;\r\n      linkedUserID: UUID;\r\n      linkedOrgID: UUID;\r\n    },\r\n    transaction?: Transaction,\r\n  ) {\r\n    if (!this.viewer.platformApplicationID) {\r\n      throw new Error('Trying to link Slack org to a non-platform org');\r\n    }\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      this.viewer.platformApplicationID,\r\n    );\r\n\r\n    if (!application) {\r\n      throw new Error('No app id found for viewer');\r\n    }\r\n\r\n    if (application.slackConnectAllOrgs) {\r\n      // Get all of the user's orgs\r\n      const allUsersPlatformOrgIDs = (\r\n        await OrgMembersEntity.findAll({\r\n          where: {\r\n            userID: sourceUserID,\r\n          },\r\n        })\r\n      ).map((o) => o.orgID);\r\n\r\n      const alreadyLinkedOrgIDs = (\r\n        await LinkedOrgsEntity.findAll({\r\n          where: { sourceOrgID: allUsersPlatformOrgIDs },\r\n        })\r\n      ).map((o) => o.sourceOrgID);\r\n\r\n      const orgIDsToLink = allUsersPlatformOrgIDs.filter(\r\n        (id) => !alreadyLinkedOrgIDs.includes(id),\r\n      );\r\n\r\n      const userLinkings = orgIDsToLink.map((platformOrgID) => ({\r\n        sourceUserID,\r\n        sourceOrgID: platformOrgID,\r\n        linkedUserID,\r\n        linkedOrgID,\r\n      }));\r\n\r\n      return await LinkedUsersEntity.bulkCreate(userLinkings, {\r\n        ignoreDuplicates: true,\r\n        transaction,\r\n      });\r\n    } else {\r\n      return await LinkedUsersEntity.upsert(\r\n        {\r\n          sourceUserID,\r\n          sourceOrgID,\r\n          linkedUserID,\r\n          linkedOrgID,\r\n        },\r\n        { transaction },\r\n      );\r\n    }\r\n  }\r\n\r\n  async unlinkUsers(\r\n    {\r\n      sourceUserID,\r\n      sourceOrgID,\r\n      linkedUserID,\r\n      linkedOrgID,\r\n    }: {\r\n      sourceUserID: UUID;\r\n      sourceOrgID: UUID;\r\n      linkedUserID: UUID;\r\n      linkedOrgID: UUID;\r\n    },\r\n    transaction?: Transaction,\r\n  ) {\r\n    return await LinkedUsersEntity.destroy({\r\n      where: {\r\n        sourceUserID,\r\n        sourceOrgID,\r\n        linkedUserID,\r\n        linkedOrgID,\r\n      },\r\n      transaction,\r\n    });\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { getOAuthCodeAndState } from 'server/src/auth/oauth.ts';\r\nimport { completeOAuthFlow } from 'server/src/third_party_tasks/jira/api.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { JIRA_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport type { JiraConnectionPreferences } from 'common/types/index.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nexport default async function JiraAuthRedirectHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  let logger = anonymousLogger();\r\n  if (req.query['error'] === 'access_denied') {\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=jira&message=cancelled`,\r\n    );\r\n  }\r\n\r\n  try {\r\n    const codeAndState = getOAuthCodeAndState(req);\r\n\r\n    const [code, { userID, orgID, type, development }] = codeAndState;\r\n    logger = new Logger(Viewer.createLoggedInViewer(userID, orgID));\r\n\r\n    if (development && process.env.NODE_ENV !== 'development') {\r\n      // this login flow was initiated from a local dev server so let's redirect the user there\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      const { code, state } = req.query;\r\n      return res.redirect(\r\n        `https://${development}/auth/jira/redirect/?code=${encodeURIComponent(\r\n          code as string,\r\n        )}&state=${encodeURIComponent(state as string)}`,\r\n      );\r\n    }\r\n\r\n    if (type !== 'jira') {\r\n      throw new Error(`incorrect redirect type, received ${type}`);\r\n    }\r\n\r\n    const { refreshToken, identity, cloudID, projects } =\r\n      await completeOAuthFlow(code);\r\n\r\n    const externalID = identity.account_id;\r\n    const externalEmail = identity.email;\r\n\r\n    if (projects.length === 0) {\r\n      throw new Error('Jira user has no projects');\r\n    }\r\n\r\n    const projectID = projects[0].id;\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    const issueType = projects[0].issueTypes.find((type) => !type.subtask)?.id;\r\n    const subissueType = projects[0].issueTypes.find(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      (type) => type.subtask,\r\n    )?.id;\r\n\r\n    if (!issueType || !subissueType) {\r\n      throw new Error('Jira user has no issue or subissue type');\r\n    }\r\n\r\n    const preferences: JiraConnectionPreferences = {\r\n      projectID,\r\n      issueType,\r\n      subissueType,\r\n    };\r\n\r\n    await Promise.all([\r\n      UserPreferenceEntity.upsert({\r\n        userID,\r\n        key: JIRA_CONNECTION_PREFERENCES,\r\n        value: preferences,\r\n      }),\r\n      ThirdPartyConnectionEntity.upsert({\r\n        userID,\r\n        orgID,\r\n        type,\r\n        externalID,\r\n        externalEmail,\r\n        externalAuthData: {\r\n          cloudID,\r\n          refreshToken,\r\n        },\r\n      }),\r\n    ]);\r\n  } catch (e) {\r\n    logger.logException(`JiraAuthRedirectHandler`, e);\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=jira&message=error`,\r\n    );\r\n  }\r\n\r\n  return res.redirect(`${APP_ORIGIN}/auth-complete.html#service=jira`);\r\n}\r\n", "import type { Request, Response, NextFunction } from 'express';\r\nimport { WebClient } from '@slack/web-api';\r\n\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport {\r\n  allowImportUser,\r\n  addMessageToCorrectCordThread,\r\n  updateOrCreateSlackUserProfile,\r\n  sendReplyHelpMessage,\r\n  sendWelcomeHelpMessage,\r\n  unlinkThreadOnSlackMessageDelete,\r\n} from 'server/src/slack/util.ts';\r\nimport type { SlackUser } from 'server/src/slack/api.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type {\r\n  ChannelArchiveEvent,\r\n  ChannelUnarchiveEvent,\r\n} from 'server/src/slack/types.ts';\r\nimport {\r\n  SlackChannelType,\r\n  SlackMessageChannelType,\r\n} from 'server/src/slack/types.ts';\r\nimport { SlackChannelMutator } from 'server/src/entity/slack_channel/SlackChannelMutator.ts';\r\nimport { isHelpMessage } from 'server/src/util/isHelpMessage.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { drainHelper } from 'server/src/serverStatus.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { isInternalSlackOrg } from 'common/util/index.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nconst counter = Counter({\r\n  name: 'SlackEventApiHandler',\r\n  help: 'Events received from Slack',\r\n  labelNames: ['type'],\r\n});\r\n\r\nconst { CORD_TIER: tier } = env;\r\n\r\n/**\r\n * NB: this function does not verify itself that the request actually came from\r\n * Slack, but rather relies upon a middleware function to do so.\r\n *\r\n * @see verifySlackWebhookMiddleware\r\n */\r\nexport default function SlackEventApiHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  // For detailed information on what this POST endpoint needs to do,\r\n  // see https://api.slack.com/events-api\r\n  const serviceLogger = new Logger(Viewer.createServiceViewer());\r\n\r\n  // For 'message' events which are not from our own Slack orgs, don't log the\r\n  // underlying event info to avoid logging message content. Do log full messages\r\n  // from our own orgs, since they can be useful for development\r\n  if (\r\n    req.body?.event?.type !== 'message' ||\r\n    isInternalSlackOrg(req.body?.team_id)\r\n  ) {\r\n    serviceLogger.debug('SlackEventApiHandler', { slackEvent: req.body });\r\n  } else {\r\n    const { event: _event, ...redactedSlackEvent } = req.body;\r\n\r\n    serviceLogger.debug('SlackEventApiHandler', {\r\n      slackEvent: redactedSlackEvent,\r\n      isRedacted: true,\r\n    });\r\n  }\r\n\r\n  const slack_message_type = req.body.type;\r\n\r\n  if (slack_message_type !== 'event_callback') {\r\n    res.sendStatus(400); // 400 Bad Request\r\n    return;\r\n  }\r\n\r\n  // Call `drainHelper.keepAlive`, so server won't get shutdown before we call\r\n  // `release`.\r\n  const release = drainHelper.keepAlive();\r\n\r\n  (async () => {\r\n    // We must respond to these incoming requests with a 200 quickly, or else\r\n    // Slack will retry sending us the same events, and eventually disable\r\n    // the Event API for us.\r\n    res.sendStatus(200); // OK\r\n\r\n    return await processIncomingSlackEvent(serviceLogger, req.body);\r\n  })()\r\n    .catch(\r\n      serviceLogger.exceptionLogger('SlackEventApiHandler', {\r\n        slackEvent: req.body,\r\n      }),\r\n    )\r\n    .finally(release);\r\n}\r\n\r\nasync function processIncomingSlackEvent(logger: Logger, body: any) {\r\n  // Since we have send off the response already, we will simply return\r\n  // from this function in the case of any other errors.\r\n\r\n  // If not running in prod, publish all incoming Slack events to our pubsub\r\n  // system. This is used so we can subscribe to these and forward them to our\r\n  // local development servers. This is incredibly useful for developing\r\n  // anything that involves incoming Slack events.\r\n  // It's enough that we can forward these events from staging, no need to do\r\n  // this in prod. (The number of incoming Slack events in prod can be really\r\n  // high.)\r\n  if (tier !== 'prod') {\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'incoming-slack-event',\r\n        { tier },\r\n        {\r\n          type: 'standard',\r\n          event: body,\r\n        },\r\n      ),\r\n      logger,\r\n    );\r\n  }\r\n\r\n  const { team_id: teamId, event, authorizations, api_app_id } = body;\r\n\r\n  if (\r\n    typeof teamId !== 'string' ||\r\n    typeof event !== 'object' ||\r\n    typeof api_app_id !== 'string'\r\n  ) {\r\n    logger.info('Malformed Slack Event object');\r\n    return;\r\n  }\r\n\r\n  counter.inc({ type: event.type });\r\n\r\n  if (!(event.type in eventHandlers)) {\r\n    // We received a Slack event for which we have no handler function\r\n\r\n    if (IGNORED_SLACK_EVENT_TYPES.has(event.type)) {\r\n      // Our Slack app is configured to subscribe to some event types that we\r\n      // currently do not make use of.\r\n      return;\r\n    } else {\r\n      // We do not expect Slack to send us this event type. Log a warning!\r\n      logger.warn('Unhandled Slack Event API event type', {\r\n        event_type: event.type,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  const eventHandler = eventHandlers[event.type as keyof typeof eventHandlers];\r\n\r\n  const orgLoader = new OrgLoader(Viewer.createServiceViewer());\r\n  const org = await orgLoader.loadSlackOrg(teamId, api_app_id);\r\n\r\n  if (org === null) {\r\n    logger.info(`Received user update for unknown Slack team: ${teamId}`);\r\n    return;\r\n  }\r\n\r\n  if (!org.externalAuthData) {\r\n    logger.warn('Received slack update for org with no externalAuthData', {\r\n      teamId,\r\n      orgId: org.id,\r\n      eventName: event.type,\r\n    });\r\n    return;\r\n  }\r\n\r\n  await eventHandler(event, org, authorizations).catch(\r\n    logger.exceptionLogger('SlackEventApiHandler', { event }),\r\n  );\r\n}\r\n\r\nconst IGNORED_SLACK_EVENT_TYPES = new Set([\r\n  'channel_deleted',\r\n  'channel_left',\r\n  'team_join',\r\n]);\r\n\r\nconst eventHandlers = {\r\n  async user_change(event: any, org: OrgEntity) {\r\n    const user = event.user as SlackUser;\r\n    if (allowImportUser(user) && user.team_id === org.externalID) {\r\n      // The user of the importable kind (it's not a bot - for details, see\r\n      // `allowImportUser`). Also, the user belongs to the Slack org for\r\n      // which we received this event.\r\n      await updateOrCreateSlackUserProfile(org, user);\r\n    }\r\n  },\r\n  async member_joined_channel(event: any, org: OrgEntity) {\r\n    const viewer = Viewer.createOrgViewer(org.id);\r\n    const logger = new Logger(viewer, { event });\r\n    const slackBotCredentials = await org.getSlackBotCredentials();\r\n    if (\r\n      event.channel_type === SlackChannelType.PUBLIC &&\r\n      slackBotCredentials &&\r\n      event.user === slackBotCredentials.bot_user_id\r\n    ) {\r\n      const { channel } = event;\r\n      // Our bot user has joined a public channel!\r\n\r\n      // Update SlackChannel entity\r\n      const slackChannelMutator = new SlackChannelMutator(viewer);\r\n\r\n      if (!(await slackChannelMutator.setAdded(channel, true))) {\r\n        // No row was updated, so we have to create a new one.\r\n        let name = '[unknown channel]';\r\n        let users = 0;\r\n\r\n        try {\r\n          const { bot_access_token } = slackBotCredentials;\r\n          const slackClient = new WebClient(bot_access_token);\r\n\r\n          const info: any = await slackClient.conversations.info({\r\n            channel,\r\n            include_num_members: true,\r\n          });\r\n          if (typeof info.channel?.name === 'string') {\r\n            name = info.channel.name;\r\n          }\r\n          if (typeof info.channel?.num_members === 'number') {\r\n            users = info.channel.num_members;\r\n          }\r\n        } catch (err) {\r\n          logger.logException('Error looking up Slack channel name', err);\r\n        }\r\n\r\n        await slackChannelMutator.createOne(\r\n          channel,\r\n          name,\r\n          /* added */ true,\r\n          /* archived */ false,\r\n          users,\r\n        );\r\n      }\r\n    }\r\n  },\r\n  async member_left_channel(event: any, org: OrgEntity) {\r\n    const slackBotCredentials = await org.getSlackBotCredentials();\r\n    const viewer = Viewer.createOrgViewer(org.id);\r\n    if (\r\n      event.channel_type === SlackChannelType.PUBLIC &&\r\n      slackBotCredentials &&\r\n      event.user === slackBotCredentials.bot_user_id\r\n    ) {\r\n      const { channel } = event;\r\n      // Update SlackChannel entity\r\n      const slackChannelMutator = new SlackChannelMutator(viewer);\r\n\r\n      await slackChannelMutator.setAdded(channel, false);\r\n    }\r\n  },\r\n  async message(event: any, org: OrgEntity) {\r\n    await unlinkThreadOnSlackMessageDelete(event, org);\r\n\r\n    // Event subtypes are for special types message that we do not need to process\r\n    // except for 'file_share', which is for when a message has an attachment\r\n    if (event.subtype && event.subtype !== 'file_share') {\r\n      return;\r\n    }\r\n\r\n    const userLoader = new UserLoader(\r\n      Viewer.createOrgViewer(org.id),\r\n      () => null,\r\n    );\r\n    const messageAuthorUser =\r\n      await userLoader.loadUserForSlackUserWithinViewerOrg(event.user);\r\n    if (messageAuthorUser === null) {\r\n      return;\r\n    }\r\n\r\n    const viewer: Viewer = Viewer.createLoggedInViewer(\r\n      messageAuthorUser.id,\r\n      org.id,\r\n    );\r\n    const logger = new Logger(viewer, { event });\r\n\r\n    const { thread_ts } = event;\r\n    // event.thread_ts is the original message timestamp\r\n    // Therefore, thread_ts is only present when a message is a reply to a thread\r\n\r\n    const slackBotCredentials = await org.getSlackBotCredentials();\r\n    if (!slackBotCredentials) {\r\n      throw new Error(\r\n        `SlackEventApiHandler message handler: no Slack bot credentials`,\r\n      );\r\n    }\r\n    const { bot_access_token, bot_user_id } = slackBotCredentials;\r\n\r\n    if (event.channel_type === SlackMessageChannelType.PUBLIC) {\r\n      // This is a message in a public channel\r\n\r\n      if (thread_ts) {\r\n        // This message is a reply\r\n        await addMessageToCorrectCordThread(\r\n          logger,\r\n          bot_access_token,\r\n          event,\r\n          viewer,\r\n        );\r\n      }\r\n    } else if (event.channel_type === SlackMessageChannelType.IM) {\r\n      // This is a private message, in a one-to-one chat\r\n\r\n      // If the message was not written by our app, then it was written by the user.\r\n      // If it is a reply in thread, add the message to cord in correct channel\r\n      // If it says \"help\" (ignoring any non-alphanumeric characters at beginning and end)\r\n      // then we must send back the welcome message.\r\n      // Otherwise send reply help message\r\n      if (\r\n        event.user !== bot_user_id &&\r\n        typeof event.user === 'string' &&\r\n        typeof event.text === 'string'\r\n      ) {\r\n        if (thread_ts) {\r\n          // The user replied in thread, add the message to cord\r\n          await addMessageToCorrectCordThread(\r\n            logger,\r\n            bot_access_token,\r\n            event,\r\n            viewer,\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (isHelpMessage(event.text) && org.domain) {\r\n          // The user sent \"help\", so send welcome message\r\n          await sendWelcomeHelpMessage(\r\n            bot_access_token,\r\n            event.user,\r\n            org.domain,\r\n          );\r\n          return;\r\n        }\r\n\r\n        // The user sent a message to the bot channel, so send reply message\r\n        await sendReplyHelpMessage(bot_access_token, event.user);\r\n      }\r\n    }\r\n  },\r\n  async app_home_opened(event: any, org: OrgEntity, authorizations: any) {\r\n    const logger = new Logger(Viewer.createServiceViewer(), {\r\n      event,\r\n      org_id: org.id,\r\n      authorizations,\r\n    });\r\n    try {\r\n      if (Array.isArray(authorizations) && authorizations.length === 0) {\r\n        logger.warn(\r\n          'No authorization permissions found, the app has been removed from the workspace.',\r\n          {\r\n            orgID: org.id,\r\n            slackUserID: event.user,\r\n          },\r\n        );\r\n        return;\r\n      }\r\n\r\n      const slackBotCredentials = await org.getSlackBotCredentials();\r\n      if (slackBotCredentials && typeof event.user === 'string' && org.domain) {\r\n        await sendWelcomeHelpMessage(\r\n          slackBotCredentials.bot_access_token,\r\n          event.user,\r\n          org.domain,\r\n          /* onlyPostIfConversationEmpty: */ true,\r\n        );\r\n      } else {\r\n        logger.warn('Could not respond to app_home_opened event', {\r\n          orgID: org.id,\r\n          slackUserID: event.user,\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      if (error.data.error === 'account_inactive') {\r\n        logger.warn(\r\n          'User has navigated to app home but the app has been removed from the workspace.',\r\n          {\r\n            orgID: org.id,\r\n            slackUserID: event.user,\r\n          },\r\n        );\r\n        return;\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  async channel_created(event: any, org: OrgEntity) {\r\n    const viewer = Viewer.createOrgViewer(org.id);\r\n    const { id, name } = event.channel;\r\n    await new SlackChannelMutator(viewer).createOne(\r\n      id,\r\n      name,\r\n      /* added */ false,\r\n      /* archived */ false,\r\n      0,\r\n    );\r\n  },\r\n  async channel_rename(event: any, org: OrgEntity) {\r\n    const { id, name } = event.channel;\r\n    await new SlackChannelMutator(Viewer.createOrgViewer(org.id)).setName(\r\n      id,\r\n      name,\r\n    );\r\n  },\r\n  async channel_archive(event: ChannelArchiveEvent, org: OrgEntity) {\r\n    const { channel } = event;\r\n    await new SlackChannelMutator(Viewer.createOrgViewer(org.id)).setArchived(\r\n      channel,\r\n      true,\r\n    );\r\n  },\r\n  async channel_unarchive(event: ChannelUnarchiveEvent, org: OrgEntity) {\r\n    const { channel } = event;\r\n    await new SlackChannelMutator(Viewer.createOrgViewer(org.id)).setArchived(\r\n      channel,\r\n      false,\r\n    );\r\n  },\r\n};\r\n", "export function isHelpMessage(text: string) {\r\n  return /^\\W*help\\W*$/i.test(text);\r\n}\r\n", "import * as http from 'http';\r\n\r\nimport express from 'express';\r\n\r\nimport type { ListenPort } from 'server/src/util/port.ts';\r\nimport { getHostPortion } from 'server/src/util/port.ts';\r\nimport { DrainHelper } from 'server/src/util/drainHelper.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\ntype ServerStatus = 'initializing' | 'ok' | 'draining' | 'terminating';\r\n\r\nlet currentStatus: ServerStatus = 'initializing';\r\nconst callbackWhenInitializationComplete: Array<() => void> = [];\r\n\r\nfunction setStatus(newStatus: ServerStatus) {\r\n  if (currentStatus !== newStatus) {\r\n    anonymousLogger().info(\r\n      `Server status changed: ${currentStatus} -> ${newStatus}`,\r\n      {\r\n        oldStatus: currentStatus,\r\n        newStatus,\r\n      },\r\n    );\r\n    currentStatus = newStatus;\r\n  }\r\n}\r\n\r\nexport function initializationComplete() {\r\n  if (currentStatus === 'initializing') {\r\n    setStatus('ok');\r\n\r\n    while (callbackWhenInitializationComplete.length) {\r\n      try {\r\n        callbackWhenInitializationComplete.shift()!();\r\n      } catch (err) {\r\n        // This might just be a `/wait-for-init` request that has been closed\r\n        // client-side, so sending the response now fails. No big deal.\r\n        anonymousLogger().warn(\r\n          `Initialization complete callback threw an error: ${err}`,\r\n        );\r\n      }\r\n    }\r\n  } else {\r\n    anonymousLogger().error(\r\n      `initializationComplete was called while current status is ${currentStatus}`,\r\n    );\r\n  }\r\n}\r\n\r\nexport const drainHelper = new DrainHelper();\r\ndrainHelper.once('draining', () => {\r\n  setStatus('draining');\r\n});\r\ndrainHelper.once('terminating', () => {\r\n  setStatus('terminating');\r\n});\r\n\r\nexport function statusMain(port: ListenPort) {\r\n  const app = express();\r\n  app.disable('x-powered-by');\r\n\r\n  app.get('/status', (_req, res) => {\r\n    res.setHeader('Content-type', 'text/plain');\r\n    res.end(currentStatus);\r\n  });\r\n\r\n  app.get('/wait-for-init', (_req, res) => {\r\n    res.setHeader('Content-type', 'text/plain');\r\n    if (currentStatus === 'initializing') {\r\n      callbackWhenInitializationComplete.push(() => res.end(currentStatus));\r\n    } else {\r\n      res.end(currentStatus);\r\n    }\r\n  });\r\n\r\n  app.post('/drain', (_req, res) => {\r\n    drainHelper.drain();\r\n    res.setHeader('Content-type', 'text/plain');\r\n    res.end(currentStatus);\r\n  });\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n  app.post('/drain-and-wait', async (_req, res) => {\r\n    drainHelper.drain();\r\n    await drainHelper.waitUntilTerminating();\r\n    res.setHeader('Content-type', 'text/plain');\r\n    res.end(currentStatus);\r\n  });\r\n\r\n  const server = http.createServer(app);\r\n\r\n  // We want to keep the STATUS server alive just a tiny little bit longer than\r\n  // the rest: if an incoming request for `/drain-and-wait` triggers draining,\r\n  // we send the response back when the draining has completed. However, at that\r\n  // point in time we would also terminate the process, and it might happen that\r\n  // this process ends before we managed to send the response. To solve this\r\n  // problem, we make a separate drainHelper for this status server, and wait\r\n  // for that one to terminate, too, before we end the process.\r\n  const statusServerDrainHelper = new DrainHelper();\r\n  server.addListener('connection', (socket) => {\r\n    socket.once('close', statusServerDrainHelper.keepAlive());\r\n  });\r\n  drainHelper.once('terminating', () => statusServerDrainHelper.drain());\r\n  const statusServerTerminating =\r\n    statusServerDrainHelper.waitUntilTerminating();\r\n\r\n  const statusServerReady = new Promise<void>((resolve, reject) => {\r\n    server.addListener('error', reject);\r\n    server.listen(port, () => {\r\n      server.removeListener('error', reject);\r\n      resolve();\r\n\r\n      anonymousLogger().info(\r\n        `\uD83D\uDE80 Status server ready at https://${getHostPortion(\r\n          server.address(),\r\n        )}/`,\r\n      );\r\n    });\r\n  });\r\n\r\n  // Start our server\r\n  return { statusServerReady, statusServerTerminating };\r\n}\r\n", "import type * as http from 'http';\r\nimport * as https from 'https';\r\nimport type * as net from 'net';\r\nimport type * as tls from 'tls';\r\n\r\nimport { EventEmitter } from 'events';\r\nimport type TypedEventEmitter from 'typed-emitter';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\ninterface DrainHelperEvents {\r\n  draining: () => void;\r\n  terminating: () => void;\r\n}\r\n\r\ntype SocketWithDrainHelper = (tls.TLSSocket | net.Socket) & {\r\n  cordConnectionDrainHelper?: DrainHelper;\r\n};\r\n\r\nexport class DrainHelper extends (EventEmitter as new () => TypedEventEmitter.default<DrainHelperEvents>) {\r\n  private draining = false;\r\n  private terminating = false;\r\n  private keepAliveCount = 0;\r\n\r\n  /** Increment the activity count and return a function to decrement it later\r\n   *\r\n   * The activity count needs to reach zero for graceful shutdown to complete.\r\n   * Any call to this function increments it, and it returns a function object\r\n   * that needs to be called later to decrement it again. The returned function\r\n   * only decrements the count once, even if called multiple times.\r\n   */\r\n  readonly keepAlive = () => {\r\n    let complete = false;\r\n    ++this.keepAliveCount;\r\n    return () => {\r\n      if (!complete) {\r\n        complete = true;\r\n        --this.keepAliveCount;\r\n        if (this.keepAliveCount === 0) {\r\n          if (this.draining && !this.terminating) {\r\n            this.terminate();\r\n          }\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  isDraining = () => this.draining;\r\n  isTerminating = () => this.terminating;\r\n\r\n  drain() {\r\n    if (!this.draining && !this.terminating) {\r\n      this.draining = true;\r\n      this.emit('draining');\r\n      if (!this.keepAliveCount) {\r\n        this.terminate();\r\n      }\r\n    }\r\n  }\r\n\r\n  private terminate() {\r\n    if (!this.terminating) {\r\n      this.draining = this.terminating = true;\r\n      this.emit('terminating');\r\n    }\r\n  }\r\n\r\n  waitUntilDraining() {\r\n    return this.draining\r\n      ? Promise.resolve()\r\n      : new Promise<void>((resolve) => this.once('draining', resolve));\r\n  }\r\n\r\n  waitUntilTerminating() {\r\n    return this.terminating\r\n      ? Promise.resolve()\r\n      : new Promise<void>((resolve) => this.once('terminating', resolve));\r\n  }\r\n\r\n  /**\r\n   * Make this DrainHelper automatically keep itself alive through http server\r\n   * connections\r\n   *\r\n   * The http(s) server passed to this functions will be equipped with event\r\n   * handlers so that any existing connection keeps this DrainHelper alive (i.e.\r\n   * delays the transition from 'draining' to 'terminating'). For each\r\n   * connection in turn a new DrainHelper is instantiated, which keeps tracks of\r\n   * ongoing requests on that connection. When we drain this whole thing, we\r\n   * immediate start draining the connections, too, which means that they get\r\n   * closed as soon as there is not ongoing request. And as soon as all\r\n   * connections are closed, this http server stops keeping this DrainHelper\r\n   * alive.\r\n   */\r\n  install(server: http.Server | https.Server) {\r\n    const { keepAlive } = this;\r\n\r\n    const connectionHandler = (socket: SocketWithDrainHelper) => {\r\n      if (this.draining || this.terminating) {\r\n        anonymousLogger().warn(\r\n          `Incoming connection closed immediately because server is ${\r\n            this.terminating ? 'terminating' : 'draining'\r\n          }`,\r\n        );\r\n        socket.end();\r\n      } else {\r\n        const expireKeepAlive = keepAlive();\r\n\r\n        const connectionDrainHelper = new DrainHelper();\r\n        socket.cordConnectionDrainHelper = connectionDrainHelper;\r\n        connectionDrainHelper.once('terminating', () => {\r\n          socket.end();\r\n          expireKeepAlive();\r\n        });\r\n\r\n        const drainConnection = () => connectionDrainHelper.drain();\r\n        this.addListener('draining', drainConnection);\r\n\r\n        socket.once('close', () => {\r\n          expireKeepAlive();\r\n          this.removeListener('draining', drainConnection);\r\n        });\r\n      }\r\n    };\r\n\r\n    if (server instanceof https.Server) {\r\n      server.addListener('secureConnection', connectionHandler);\r\n    } else {\r\n      server.addListener('connection', connectionHandler);\r\n    }\r\n\r\n    server.addListener(\r\n      'request',\r\n      (req: http.IncomingMessage, res: http.ServerResponse) => {\r\n        const { cordConnectionDrainHelper: connectionDrainHelper } =\r\n          req.socket as SocketWithDrainHelper;\r\n        if (connectionDrainHelper) {\r\n          res.once('close', connectionDrainHelper.keepAlive());\r\n        }\r\n\r\n        if (this.draining && !res.headersSent) {\r\n          res.setHeader('connection', 'close');\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n", "// A file with functions that handle various Slack interaction events with\r\n// type block_actions\r\nimport { IncomingWebhook } from '@slack/webhook';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { supportStatusButton } from 'server/src/util/interactiveSupportButton.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nexport async function handleSupportThreadStatusChange(\r\n  event: any,\r\n  org: OrgEntity,\r\n) {\r\n  const logger = new Logger(Viewer.createOrgViewer(org.id), { event });\r\n  const actionId = event.actions[0].action_id;\r\n  const value = event.actions[0].value;\r\n\r\n  const threadID = value.split('_')[1];\r\n  const supportStatus = actionId === 'support_close_thread' ? 'closed' : 'open';\r\n\r\n  await ThreadEntity.update(\r\n    { supportStatus },\r\n    {\r\n      where: { id: threadID },\r\n    },\r\n  );\r\n\r\n  const newStatus = (await ThreadEntity.findByPk(threadID))?.supportStatus;\r\n\r\n  if (!newStatus) {\r\n    logger.error('Thread support status not found', {\r\n      threadID,\r\n      slackOrg: event.user.team_id,\r\n      orgID: org.id,\r\n    });\r\n  }\r\n\r\n  logServerEvent({\r\n    session: { viewer: Viewer.createOrgViewer(org.id) },\r\n    logLevel: LogLevel.DEBUG,\r\n    type: `support-thread-${supportStatus}`,\r\n    payload: {\r\n      orgID: org.id,\r\n      threadID,\r\n    },\r\n  });\r\n\r\n  const newActionBlock =\r\n    newStatus === 'closed'\r\n      ? supportStatusButton('open', threadID)\r\n      : supportStatusButton('close', threadID);\r\n\r\n  const replacementMessage = [\r\n    ...event.message.blocks.filter((block: any) => block.type !== 'actions'),\r\n    newActionBlock,\r\n  ];\r\n\r\n  const responseUrl = event.response_url;\r\n  const webhook = new IncomingWebhook(responseUrl);\r\n\r\n  // Bizarrely this returns a 404 for other problems like incorrectly formatted input\r\n  await webhook.send({\r\n    blocks: replacementMessage,\r\n  });\r\n}\r\n", "import type { KnownBlock } from '@slack/web-api';\r\nimport type { UUID } from 'common/types/index.ts';\r\n\r\nexport function supportStatusButton(\r\n  action: 'close' | 'open',\r\n  threadID: UUID,\r\n): KnownBlock {\r\n  const buttonText = {\r\n    close: ':tada: Close thread',\r\n    open: ':leftwards_arrow_with_hook: Reopen thread',\r\n  };\r\n\r\n  return {\r\n    type: 'actions',\r\n    elements: [\r\n      {\r\n        type: 'button',\r\n        text: {\r\n          type: 'plain_text',\r\n          text: buttonText[action],\r\n          emoji: true,\r\n        },\r\n        value: `${action}_${threadID}`,\r\n        action_id: `support_${action}_thread`,\r\n      },\r\n    ],\r\n  };\r\n}\r\n", "import type { Request, Response, NextFunction } from 'express';\r\n\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { drainHelper } from 'server/src/serverStatus.ts';\r\nimport { handleSupportThreadStatusChange } from 'server/src/slack/interactionHandlers/blockActions.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nconst counter = Counter({\r\n  name: 'SlackInteractiveEventApiHandler',\r\n  help: 'Interactive events received from Slack',\r\n  labelNames: ['type'],\r\n});\r\n\r\nconst { CORD_TIER: tier } = env;\r\n\r\n/**\r\n * NB: this function does not verify itself that the request actually came from\r\n * Slack, but rather relies upon a middleware function to do so.\r\n *\r\n * @see verifySlackWebhookMiddleware\r\n */\r\nexport default function SlackInteractiveEventApiHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  const anonLogger = anonymousLogger();\r\n  anonLogger.debug('SlackInteractiveEventApiHandler', {\r\n    slackEvent: req.body,\r\n  });\r\n\r\n  // The body of interaction events (e.g. user clicks on button in slack message) is\r\n  // annoyingly structured differently to other events (user_change, message etc)\r\n  const payload = req.body?.payload && JSON.parse(req.body.payload);\r\n  const interactive_message_type = payload.type;\r\n\r\n  if (!interactive_message_type || !payload) {\r\n    res.sendStatus(400); // 400 Bad Request\r\n    return;\r\n  }\r\n\r\n  // Call `drainHelper.keepAlive`, so server won't get shutdown before we call\r\n  // `release`.\r\n  const release = drainHelper.keepAlive();\r\n\r\n  (async () => {\r\n    // We must respond to these incoming requests with a 200 quickly, or else\r\n    // Slack will retry sending us the same events, and eventually disable\r\n    // the Event API for us.\r\n    res.sendStatus(200); // OK\r\n\r\n    // If not running in prod, publish all incoming Slack events to our pubsub\r\n    // system. This is used so we can subscribe to these and forward them to our\r\n    // local development servers. This is incredibly useful for developing\r\n    // anything that involves incoming Slack events.\r\n    // It's enough that we can forward these events from staging, no need to do\r\n    // this in prod. (The number of incoming Slack events in prod can be really\r\n    // high.)\r\n    if (tier !== 'prod') {\r\n      backgroundPromise(\r\n        publishPubSubEvent(\r\n          'incoming-slack-event',\r\n          { tier },\r\n          {\r\n            type: 'interactive',\r\n            event: req.body,\r\n          },\r\n        ),\r\n        anonLogger,\r\n      );\r\n    }\r\n    return await processIncomingSlackInteractionEvent(payload);\r\n  })()\r\n    .catch(\r\n      anonLogger.exceptionLogger('SlackInteractiveEventApiHandler', {\r\n        slackEvent: req.body,\r\n      }),\r\n    )\r\n    .finally(release);\r\n}\r\n\r\nasync function processIncomingSlackInteractionEvent(event: any) {\r\n  // Since we have send off the response already, we will simply return\r\n  // from this function in the case of any other errors.\r\n\r\n  // The resulting object can have different structures depending on the source.\r\n  // All those structures will have a type field that indicates the source of the interaction.\r\n  // Possible types:\r\n  // block_actions, shortcut, message_actions, view_submission, view_closed\r\n  const {\r\n    type,\r\n    user: { team_id: teamID },\r\n    api_app_id,\r\n  } = event;\r\n\r\n  const orgLoader = new OrgLoader(Viewer.createServiceViewer());\r\n  const logger = new Logger(Viewer.createServiceViewer());\r\n  const org = await orgLoader.loadSlackOrg(teamID, api_app_id);\r\n\r\n  if (org === null) {\r\n    logger.info(\r\n      `Received interactive Slack event from unknown Slack team: ${teamID}`,\r\n    );\r\n  }\r\n\r\n  if (!org?.externalAuthData) {\r\n    logger.warn(\r\n      'Received interactive Slack event from org with no externalAuthData',\r\n      {\r\n        teamID,\r\n        orgID: org?.id,\r\n        eventName: event.type,\r\n      },\r\n    );\r\n    return;\r\n  }\r\n\r\n  counter.inc({ type });\r\n\r\n  if (!(type in interactionEventHandlers)) {\r\n    // We received a Slack event for which we have no handler function\r\n    // We do not expect Slack to send us this event type. Log a warning!\r\n    logger.warn('Unhandled Slack Interaction Event API event type', {\r\n      event_type: type,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const eventHandler =\r\n    interactionEventHandlers[type as keyof typeof interactionEventHandlers];\r\n\r\n  await eventHandler(event, org).catch(\r\n    logger.exceptionLogger('SlackInteractiveEventApiHandler', { event }),\r\n  );\r\n}\r\n\r\nconst interactionEventHandlers = {\r\n  async block_actions(event: any, org: OrgEntity) {\r\n    if (\r\n      event?.actions[0]?.action_id === 'support_close_thread' ||\r\n      event?.actions[0]?.action_id === 'support_open_thread'\r\n    ) {\r\n      return await handleSupportThreadStatusChange(event, org);\r\n    }\r\n  },\r\n};\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { completeOAuthFlow } from 'server/src/third_party_tasks/asana/api.ts';\r\nimport { getOAuthCodeAndState } from 'server/src/auth/oauth.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { ASANA_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport type { AsanaConnectionPreferences } from 'common/types/index.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport default async function AsanaAuthRedirectHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  if (req.query['error'] === 'access_denied') {\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=asana&message=cancelled`,\r\n    );\r\n  }\r\n\r\n  try {\r\n    const codeAndState = getOAuthCodeAndState(req);\r\n    const [code, { userID, orgID, type }] = codeAndState;\r\n\r\n    if (type !== 'asana') {\r\n      throw new Error(`incorrect redirect type, received ${type}`);\r\n    }\r\n\r\n    const [refreshToken, asanaUserInfo] = await completeOAuthFlow(code);\r\n    const externalID = asanaUserInfo.gid;\r\n    const externalEmail = asanaUserInfo.email;\r\n    const workspace = asanaUserInfo.workspaces?.[0]?.gid;\r\n\r\n    if (!externalID || !externalEmail || !workspace) {\r\n      throw new Error('Asana user gid/external_email/workspace is missing');\r\n    }\r\n\r\n    const preferences: AsanaConnectionPreferences = {\r\n      projectID: undefined, // new tasks don't go to any project\r\n    };\r\n\r\n    await Promise.all([\r\n      ThirdPartyConnectionEntity.upsert({\r\n        userID,\r\n        orgID,\r\n        type,\r\n        externalID,\r\n        externalEmail,\r\n        externalAuthData: {\r\n          workspace,\r\n          refreshToken,\r\n        },\r\n      }),\r\n      UserPreferenceEntity.upsert({\r\n        userID,\r\n        key: ASANA_CONNECTION_PREFERENCES,\r\n        value: preferences,\r\n      }),\r\n    ]);\r\n  } catch (e) {\r\n    anonymousLogger().logException(`AsanaAuthRedirectHandler`, e);\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=asana&message=error`,\r\n    );\r\n  }\r\n\r\n  return res.redirect(`${APP_ORIGIN}/auth-complete.html#service=asana`);\r\n}\r\n", "import env from 'server/src/config/Env.ts';\r\nimport { LINEAR_AUTH_REDIRECT_URL } from 'common/util/oauth.ts';\r\nimport type { JsonValue, LinearIssueStateTypes } from 'common/types/index.ts';\r\nimport { thirdPartyGraphQLRequest } from 'server/src/third_party_tasks/util.ts';\r\n\r\ntype UserInfoQueryResult = {\r\n  viewer: {\r\n    id: string;\r\n    email: string;\r\n    teams: {\r\n      nodes: Array<{\r\n        id: string;\r\n        name: string;\r\n        projects: {\r\n          nodes: Array<{\r\n            id: string;\r\n            name: string;\r\n          }>;\r\n        };\r\n      }>;\r\n    };\r\n  };\r\n};\r\n\r\ntype CreateIssueMutationResult = {\r\n  issueCreate: {\r\n    success: boolean;\r\n    issue: {\r\n      id: string;\r\n    };\r\n  };\r\n};\r\n\r\ntype UsersInOrgQueryResult = {\r\n  users: {\r\n    nodes: Array<{ id: string; email: string }>;\r\n  };\r\n};\r\n\r\ntype FileUploadMutationResult = {\r\n  fileUpload: {\r\n    success: boolean;\r\n    uploadFile: {\r\n      contentType: string;\r\n      size: number;\r\n      uploadUrl: string;\r\n      assetUrl: string;\r\n      headers: Array<{\r\n        key: string;\r\n        value: string;\r\n      }>;\r\n    };\r\n  };\r\n};\r\n\r\ntype WorkflowStatesQueryResult = {\r\n  workflowStates: {\r\n    nodes: Array<{\r\n      id: string;\r\n      type: string;\r\n      team: {\r\n        id: string;\r\n      };\r\n    }>;\r\n  };\r\n};\r\n\r\ntype UpdateIssueMutationResult = {\r\n  issueUpdate: {\r\n    success: boolean;\r\n  };\r\n};\r\n\r\ntype IssueDescriptionQueryResult = {\r\n  issue: {\r\n    description: string;\r\n  };\r\n};\r\n\r\ntype IssueQueryResult = {\r\n  issue: {\r\n    title: string;\r\n    identifier: string;\r\n    url: string;\r\n    priorityLabel: string;\r\n    assignee: {\r\n      name: string;\r\n    };\r\n    state: {\r\n      name: string;\r\n      type: string;\r\n    };\r\n    team: {\r\n      organization: {\r\n        name: string;\r\n      };\r\n    };\r\n  };\r\n};\r\n\r\ntype CreateWebhookMutationResult = {\r\n  webhookCreate: {\r\n    success: boolean;\r\n    webhook: {\r\n      id: string;\r\n      enabled: boolean;\r\n    };\r\n  };\r\n};\r\n\r\ntype TeamsInOrgQueryResult = {\r\n  viewer: {\r\n    organization: {\r\n      teams: {\r\n        nodes: Array<{\r\n          id: string;\r\n          name: string;\r\n        }>;\r\n      };\r\n    };\r\n  };\r\n};\r\n\r\nasync function apiRequest<T extends JsonValue = JsonValue>(\r\n  query: string,\r\n  accessToken: string,\r\n  variables: object | null = null,\r\n): Promise<T> {\r\n  return await thirdPartyGraphQLRequest(\r\n    'linear',\r\n    query,\r\n    accessToken,\r\n    variables,\r\n  );\r\n}\r\n\r\nexport async function completeOAuthFlow(\r\n  code: string,\r\n): Promise<[string, UserInfoQueryResult['viewer']]> {\r\n  // Linear expects params to be form encoded like for Asana.\r\n  const params = new URLSearchParams();\r\n  params.append('grant_type', 'authorization_code');\r\n  params.append('client_id', env.LINEAR_APP_CLIENT_ID);\r\n  params.append('client_secret', env.LINEAR_APP_CLIENT_SECRET);\r\n  params.append('redirect_uri', LINEAR_AUTH_REDIRECT_URL);\r\n  params.append('code', code);\r\n  const response = await fetch('https://api.linear.app/oauth/token', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: params,\r\n  });\r\n\r\n  const { access_token } = await response.json();\r\n\r\n  const userInfo = await getUserInfo(access_token);\r\n  if (!userInfo) {\r\n    throw new Error('Could not fetch Linear user information.');\r\n  }\r\n\r\n  return [access_token, userInfo];\r\n}\r\n\r\nexport async function getUserInfo(\r\n  accessToken: string,\r\n): Promise<UserInfoQueryResult['viewer'] | null> {\r\n  const query = `\r\n    query UserInfo {\r\n      viewer {\r\n        id\r\n        email\r\n        teams {\r\n          nodes {\r\n            id\r\n            name\r\n            projects {\r\n              nodes {\r\n                id\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n\r\n  const responseJson = await apiRequest<UserInfoQueryResult>(\r\n    query,\r\n    accessToken,\r\n  );\r\n\r\n  return responseJson ? responseJson.viewer : null;\r\n}\r\n\r\nexport async function createIssue(\r\n  accessToken: string,\r\n  teamId: string,\r\n  title: string,\r\n  description: string | null = null,\r\n  assigneeId: string | null = null,\r\n  parentId: string | null = null,\r\n  projectId: string | null = null,\r\n): Promise<string | null> {\r\n  const input = {\r\n    title,\r\n    teamId,\r\n    description,\r\n    assigneeId,\r\n    parentId,\r\n    projectId,\r\n  };\r\n\r\n  const mutation = `\r\n    mutation CreateIssue ($input: IssueCreateInput!){\r\n      issueCreate(\r\n        input:$input\r\n      ) {\r\n        success \r\n        issue {\r\n          id\r\n        }\r\n      }\r\n    }`;\r\n\r\n  const responseJson = await apiRequest<CreateIssueMutationResult>(\r\n    mutation,\r\n    accessToken,\r\n    { input },\r\n  );\r\n\r\n  return responseJson.issueCreate.issue.id;\r\n}\r\n\r\nexport async function getUsersInOrg(\r\n  accessToken: string,\r\n): Promise<UsersInOrgQueryResult['users']['nodes'] | null> {\r\n  const query = `\r\n    query UsersInOrg {\r\n      users {\r\n        nodes {\r\n          id\r\n          email\r\n        }\r\n      }\r\n    }`;\r\n\r\n  const responseJson = await apiRequest<UsersInOrgQueryResult>(\r\n    query,\r\n    accessToken,\r\n  );\r\n\r\n  return responseJson ? responseJson.users.nodes : null;\r\n}\r\n\r\nasync function getLinearUploadData(\r\n  accessToken: string,\r\n  filename: string,\r\n  contentType: string,\r\n  filesize: number,\r\n): Promise<FileUploadMutationResult['fileUpload']['uploadFile'] | null> {\r\n  const mutation = `\r\n    mutation FileUpload($size: Int!, $contentType: String!, $filename: String!) {\r\n      fileUpload(size: $size, contentType: $contentType, filename: $filename) {\r\n        success\r\n        uploadFile {\r\n          contentType\r\n          size\r\n          uploadUrl\r\n          assetUrl\r\n          headers {\r\n            key\r\n            value\r\n          }\r\n        }\r\n      } \r\n    }`;\r\n  const variables = { size: filesize, contentType, filename };\r\n\r\n  const responseJson = await apiRequest<FileUploadMutationResult>(\r\n    mutation,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson ? responseJson.fileUpload.uploadFile : null;\r\n}\r\n\r\nexport async function uploadFileToLinear(\r\n  accessToken: string,\r\n  filename: string,\r\n  contentType: string,\r\n  stream: ReadableStream<Uint8Array>,\r\n  filesize: number,\r\n): Promise<string | undefined> {\r\n  const linearUploadData = await getLinearUploadData(\r\n    accessToken,\r\n    filename,\r\n    contentType,\r\n    filesize,\r\n  );\r\n  if (!linearUploadData) {\r\n    return;\r\n  }\r\n\r\n  const { uploadUrl, assetUrl, headers } = linearUploadData;\r\n\r\n  const authHeaders = new Headers();\r\n  headers.map((header: { key: string; value: string }) => {\r\n    authHeaders.append(header.key, header.value);\r\n  });\r\n\r\n  authHeaders.append('cache-control', 'max-age=31536000');\r\n  authHeaders.append('Content-Type', `${contentType}`);\r\n\r\n  const uploadResponse = await fetch(`${uploadUrl}`, {\r\n    method: 'PUT',\r\n    headers: authHeaders,\r\n    body: stream,\r\n  });\r\n\r\n  if (uploadResponse.status === 200) {\r\n    return assetUrl;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nasync function getWorkflowStates(\r\n  accessToken: string,\r\n  teamID: string,\r\n): Promise<Array<{ id: string; type: string }> | null> {\r\n  const query = `\r\n    query WorkflowStates {\r\n      workflowStates {\r\n        nodes {\r\n          id\r\n          type\r\n          team {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<WorkflowStatesQueryResult>(\r\n    query,\r\n    accessToken,\r\n  );\r\n\r\n  const workflowStates = responseJson\r\n    ? responseJson.workflowStates.nodes\r\n    : null;\r\n\r\n  if (!workflowStates || workflowStates.length === 0) {\r\n    return null;\r\n  }\r\n  return workflowStates\r\n    .filter((state) => state.team.id === teamID)\r\n    .map((state) => ({ id: state.id, type: state.type }));\r\n}\r\n\r\nexport async function updateIssueState(\r\n  accessToken: string,\r\n  newState: LinearIssueStateTypes,\r\n  issueID: string,\r\n  teamID: string,\r\n) {\r\n  const workflowStates = await getWorkflowStates(accessToken, teamID);\r\n  if (!workflowStates) {\r\n    return;\r\n  }\r\n\r\n  const [{ id }] = workflowStates.filter((state) => state.type === newState);\r\n\r\n  const mutation = `\r\n    mutation UpdateIssueState($id: String!, $stateId: String) {\r\n      issueUpdate(\r\n        id: $id\r\n        input: {\r\n          stateId: $stateId\r\n        }\r\n      ) {\r\n          success\r\n        }\r\n    }`;\r\n\r\n  const variables = { id: issueID, stateId: id };\r\n  const responseJson = await apiRequest<UpdateIssueMutationResult>(\r\n    mutation,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson.issueUpdate.success;\r\n}\r\n\r\nexport async function updateIssueAssigneeAndSubscribers(\r\n  accessToken: string,\r\n  issueID: string,\r\n  assigneeID: string,\r\n  subscriberIDs: string[],\r\n  updatedDescription: string,\r\n) {\r\n  const mutation = `\r\n    mutation UpdateIssueAssignee ($id:String!, $assigneeId:String,  $subscriberIds:[String!], $description: String){\r\n      issueUpdate(\r\n        id: $id\r\n        input: {\r\n          assigneeId: $assigneeId\r\n          description: $description\r\n          subscriberIds: $subscriberIds\r\n        }\r\n      ) {\r\n          success\r\n        }\r\n    }`;\r\n\r\n  const variables = {\r\n    id: issueID,\r\n    assigneeId: assigneeID,\r\n    description: updatedDescription,\r\n    subscriberIds: subscriberIDs,\r\n  };\r\n\r\n  const responseJson = await apiRequest<UpdateIssueMutationResult>(\r\n    mutation,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson.issueUpdate.success;\r\n}\r\n\r\nexport async function getIssueDescription(\r\n  issueID: string,\r\n  accessToken: string,\r\n): Promise<string> {\r\n  const query = `\r\n    query IssueDescription ($id: String!){\r\n      issue(id: $id) {\r\n          description\r\n        }\r\n      }`;\r\n\r\n  const variables = { id: issueID };\r\n  const responseJson = await apiRequest<IssueDescriptionQueryResult>(\r\n    query,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson ? responseJson.issue.description : '';\r\n}\r\n\r\nexport async function updateIssueDescription(\r\n  issueID: string,\r\n  accessToken: string,\r\n  updatedDescription: string,\r\n) {\r\n  const mutation = `\r\n    mutation UpdateIssueDescription ($id: String!, $description: String) {\r\n      issueUpdate(\r\n        id: $id\r\n        input: {\r\n          description: $description\r\n        }\r\n      ) {\r\n        success\r\n      }\r\n    }`;\r\n\r\n  const variables = {\r\n    id: issueID,\r\n    description: updatedDescription,\r\n  };\r\n\r\n  const responseJson = await apiRequest<UpdateIssueMutationResult>(\r\n    mutation,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson.issueUpdate.success;\r\n}\r\n\r\nexport async function getIssue(accessToken: string, issueID: string) {\r\n  const query = `\r\n    query Issue($id: String!) {\r\n      issue(id: $id) {\r\n        title\r\n        identifier\r\n        url\r\n        priorityLabel\r\n        assignee {\r\n          name\r\n        }\r\n        state {\r\n          name\r\n          type\r\n        }\r\n        team {\r\n          organization {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n\r\n  const variables = {\r\n    id: issueID,\r\n  };\r\n\r\n  const responseJson = await apiRequest<IssueQueryResult>(\r\n    query,\r\n    accessToken,\r\n    variables,\r\n  );\r\n\r\n  return responseJson ? responseJson.issue : null;\r\n}\r\n\r\nexport async function createWebhook(\r\n  accessToken: string,\r\n  teamID: string,\r\n  url: string,\r\n  resourceTypes: string[],\r\n  label: string | null = null,\r\n): Promise<boolean | null> {\r\n  try {\r\n    const mutation = `\r\n      mutation CreateWebhook($teamId: String!, $url: String!, $resourceTypes: [String!]!, $label: String) {\r\n        webhookCreate(input:{\r\n          label: $label\r\n          teamId: $teamId\r\n          url: $url\r\n          resourceTypes: $resourceTypes\r\n        }) {\r\n          success\r\n          webhook {\r\n            id\r\n            enabled\r\n          }\r\n        }\r\n      }`;\r\n\r\n    const variables = {\r\n      teamId: teamID,\r\n      url,\r\n      resourceTypes,\r\n      label,\r\n    };\r\n\r\n    const responseJson = await apiRequest<CreateWebhookMutationResult>(\r\n      mutation,\r\n      accessToken,\r\n      variables,\r\n    );\r\n\r\n    return responseJson ? responseJson.webhookCreate.success : null;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllTeamsInUserOrg(\r\n  accessToken: string,\r\n): Promise<\r\n  TeamsInOrgQueryResult['viewer']['organization']['teams']['nodes'] | null\r\n> {\r\n  const query = `\r\n      query UserInfo {\r\n        viewer {\r\n          organization {\r\n            teams {\r\n              nodes {\r\n                id\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }`;\r\n\r\n  const responseJson = await apiRequest<TeamsInOrgQueryResult>(\r\n    query,\r\n    accessToken,\r\n  );\r\n\r\n  return responseJson ? responseJson.viewer.organization.teams.nodes : null;\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { LINEAR_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport {\r\n  completeOAuthFlow,\r\n  createWebhook,\r\n} from 'server/src/third_party_tasks/linear/api.ts';\r\nimport { getOAuthCodeAndState } from 'server/src/auth/oauth.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { APP_ORIGIN, API_SERVER_HOST_PRODUCTION } from 'common/const/Urls.ts';\r\nimport type { LinearConnectionPreferences } from 'common/types/index.ts';\r\nimport { LINEAR_EVENTS_PATH } from 'server/src/public/routes/MainRouter.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nexport default async function LinearAuthRedirectHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  let logger = anonymousLogger();\r\n  if (req.query['error'] === 'access_denied') {\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=linear&message=cancelled`,\r\n    );\r\n  }\r\n\r\n  try {\r\n    const codeAndState = getOAuthCodeAndState(req);\r\n\r\n    const [code, { userID, orgID, type }] = codeAndState;\r\n    logger = new Logger(Viewer.createLoggedInViewer(userID, orgID));\r\n\r\n    if (type !== 'linear') {\r\n      throw new Error(`incorrect redirect type, received ${type}`);\r\n    }\r\n\r\n    const [accessToken, linearUserInfo] = await completeOAuthFlow(code);\r\n\r\n    const externalID = linearUserInfo.id;\r\n    const externalEmail = linearUserInfo.email;\r\n    const teams = linearUserInfo.teams.nodes as\r\n      | Array<{\r\n          id: string;\r\n          name: string;\r\n          projects: {\r\n            nodes: {\r\n              id: string;\r\n              name: string;\r\n            }[];\r\n          };\r\n        }>\r\n      | undefined;\r\n\r\n    if (!teams) {\r\n      throw new Error('Failed to find any Linear teams.');\r\n    }\r\n\r\n    const teamID = teams[0].id;\r\n\r\n    if (!externalID || !externalEmail) {\r\n      throw new Error('Linear user id or email not found.');\r\n    }\r\n\r\n    if (!teamID) {\r\n      throw new Error('Linear user is not part of a team.');\r\n    }\r\n\r\n    const preferences: LinearConnectionPreferences = {\r\n      teamID,\r\n    };\r\n\r\n    const teamIDs = teams.map((teamInfo) => teamInfo.id);\r\n\r\n    const url = `https://${API_SERVER_HOST_PRODUCTION}${LINEAR_EVENTS_PATH}`;\r\n    const resourceTypes = ['Issue'];\r\n    const label = 'Created by Cord';\r\n\r\n    await Promise.all(\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      teamIDs.map((teamID) =>\r\n        createWebhook(accessToken, teamID, url, resourceTypes, label),\r\n      ),\r\n    );\r\n\r\n    await Promise.all([\r\n      UserPreferenceEntity.upsert({\r\n        userID,\r\n        key: LINEAR_CONNECTION_PREFERENCES,\r\n        value: preferences,\r\n      }),\r\n      ThirdPartyConnectionEntity.upsert({\r\n        userID,\r\n        orgID,\r\n        type,\r\n        externalID,\r\n        externalEmail,\r\n        externalAuthData: {\r\n          accessToken,\r\n        },\r\n      }),\r\n    ]);\r\n  } catch (e) {\r\n    logger.logException(`LinearAuthRedirectHandler`, e);\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=linear&message=error`,\r\n    );\r\n  }\r\n\r\n  return res.redirect(`${APP_ORIGIN}/auth-complete.html#service=linear`);\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport {\r\n  onAsanaAssigneeChanged,\r\n  onAsanaUserChangedTaskStatus,\r\n} from 'server/src/third_party_tasks/asana/actions.ts';\r\nexport default function AsanaEventApiHandler(req: Request, res: Response) {\r\n  // The very first webhook request from Asana comes with X-Hook-Secret. We're\r\n  // supposed to store it and then use it to authenticate future requests.\r\n  const webhookSecret = req.get('X-Hook-Secret');\r\n  if (webhookSecret) {\r\n    // this is the initial webhook request\r\n    res.setHeader('X-Hook-Secret', webhookSecret);\r\n    // TODO: Store the webhookSecret for future authentication\r\n    res.sendStatus(200);\r\n    return;\r\n  }\r\n\r\n  // TODO: Authenticate the request here\r\n  res.sendStatus(200);\r\n  void handleEvents(req.body['events']);\r\n}\r\n\r\ntype Event = {\r\n  user: {\r\n    gid: string;\r\n    resource_type: string;\r\n  };\r\n  created_at: string;\r\n  action: string;\r\n  resource?: {\r\n    gid: string;\r\n    resource_type: string;\r\n    resource_subtype: string;\r\n  };\r\n  parent: {\r\n    gid: string;\r\n    resource_type: string;\r\n    resource_subtype: string;\r\n  };\r\n  change?: {\r\n    field: string;\r\n    action: string;\r\n    new_value: null | {\r\n      gid: string;\r\n      resource_type: string;\r\n    };\r\n  };\r\n};\r\n\r\nasync function handleEvents(events: Event[]) {\r\n  if (!events) {\r\n    anonymousLogger().error(`asana events was null or undefined: ${events}`);\r\n    return;\r\n  }\r\n  for (const event of events) {\r\n    if (!event.resource) {\r\n      anonymousLogger().warn('asana event without a resource', event);\r\n      continue;\r\n    }\r\n\r\n    // for now only act when the \"completed\" task field changed\r\n    if (event.resource.resource_type !== 'task') {\r\n      // only handle task updates\r\n      continue;\r\n    }\r\n\r\n    if (\r\n      event.change?.action === 'changed' &&\r\n      event.change?.field === 'completed'\r\n    ) {\r\n      const taskGID = event.resource.gid;\r\n      const asanaUserGID = event.user.gid;\r\n      await onAsanaUserChangedTaskStatus(asanaUserGID, taskGID);\r\n    } else if (\r\n      event.change?.action === 'changed' &&\r\n      event.change?.field === 'assignee'\r\n    ) {\r\n      const taskGID = event.resource.gid;\r\n      const asanaAssignerGID = event.user.gid;\r\n      const newAssigneeGID = event.change?.new_value?.gid;\r\n      await onAsanaAssigneeChanged(asanaAssignerGID, taskGID, newAssigneeGID);\r\n    }\r\n  }\r\n}\r\n", "import * as querystring from 'querystring';\r\nimport type { Request, Response } from 'express';\r\nimport { OAuth } from 'oauth';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { TRELLO_AUTH_REDIRECT_URL } from 'common/util/oauth.ts';\r\nimport type {\r\n  JsonObject,\r\n  TrelloCard,\r\n  UUID,\r\n  TrelloConnectionPreferencesType,\r\n} from 'common/types/index.ts';\r\nimport type { TrelloAuthData } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\n// sending client id and secret to request token will get a response with\r\n// oauth_token and oauth secret.\r\nconst requestURL = 'https://trello.com/1/OAuthGetRequestToken';\r\n\r\n// appending the oauth_token from above to the below url gives us the url to\r\n// browser login for the client, once user has authorized, the oauth_token and\r\n// an oauth_verifier is sent back\r\nconst authorizeURL = 'https://trello.com/1/OAuthAuthorizeToken';\r\n\r\n// using the oauth_token, oauth_secret, and oauth_verifier, we can obtain the\r\n// user access token and user access token secret\r\nconst accessURL = 'https://trello.com/1/OAuthGetAccessToken';\r\n\r\n// for some reason, a space is needed at the end of the appName for it to appear,\r\n// otherwise it is named 'an unknown application'\r\nconst appName = 'Cord ';\r\n\r\n// Not sure if this is the best place to put the tokenSecret which is eventually\r\n// discarded, also pushed the state from login handler into here to use later\r\nconst oauthTempSecrets: { [name: string]: string } = {};\r\n\r\nconst oauth = new OAuth(\r\n  requestURL,\r\n  accessURL,\r\n  env.TRELLO_APP_CLIENT_ID,\r\n  env.TRELLO_APP_CLIENT_SECRET,\r\n  '1.0A',\r\n  TRELLO_AUTH_REDIRECT_URL,\r\n  'HMAC-SHA1',\r\n);\r\n\r\nconst baseURL = 'https://api.trello.com/1';\r\n\r\nexport function getLoginURLWithRequestToken(req: Request, res: Response) {\r\n  oauth.getOAuthRequestToken(function (error, token, tokenSecret) {\r\n    if (error) {\r\n      // not sure what the error handling here should be\r\n      res.send(`Error occurred in OAuth request token: ${error}`);\r\n    }\r\n    const { state } = req.query;\r\n    if (state) {\r\n      oauthTempSecrets.state = state as string;\r\n    } else {\r\n      return res.send(\r\n        // not sure what the error handling here should be\r\n        `Error occurred in OAuth request token: state value not found`,\r\n      );\r\n    }\r\n    oauthTempSecrets.token = tokenSecret;\r\n    return res.redirect(\r\n      [\r\n        authorizeURL,\r\n        `?oauth_token=${token}`,\r\n        `&name=${appName}`,\r\n        `&scope=read,write,account`,\r\n        `&expiration=never`,\r\n      ].join(''),\r\n    );\r\n  });\r\n}\r\n\r\nexport async function completeOAuthFlow(\r\n  oauthToken: UUID,\r\n  oauthVerifier: UUID,\r\n): Promise<[TrelloAuthData, string, TrelloConnectionPreferencesType]> {\r\n  const { accessToken, accessTokenSecret } = await getAccessTokenAndSecret(\r\n    oauthToken,\r\n    oauthVerifier,\r\n  );\r\n  const state = oauthTempSecrets.state;\r\n  const userResources = await getUserResources(accessToken);\r\n\r\n  return [{ accessToken, accessTokenSecret }, state, userResources];\r\n}\r\n\r\nasync function getAccessTokenAndSecret(\r\n  oauthToken: UUID,\r\n  oauthVerifier: UUID,\r\n): Promise<TrelloAuthData> {\r\n  //saved in variable, obtained in /auth/trello/login route\r\n  const tokenSecret = oauthTempSecrets.token;\r\n\r\n  return await new Promise((resolve, reject) => {\r\n    oauth.getOAuthAccessToken(\r\n      oauthToken,\r\n      tokenSecret,\r\n      oauthVerifier,\r\n      function (error, accessToken, accessTokenSecret) {\r\n        if (error) {\r\n          reject(\r\n            JSON.stringify({\r\n              message: 'Error occurred while getting access token',\r\n              error: error,\r\n            }),\r\n          );\r\n        } else {\r\n          resolve({ accessToken, accessTokenSecret });\r\n        }\r\n      },\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getUserResources(\r\n  accessToken: UUID,\r\n): Promise<TrelloConnectionPreferencesType> {\r\n  const queryParams = querystring.stringify({\r\n    fields: 'organizations,boards,email',\r\n    organizations: 'all',\r\n    organization_fields: 'name,id',\r\n    boards: 'all',\r\n    board_fields: 'name, id',\r\n    board_lists: 'all',\r\n  });\r\n\r\n  const response = await fetch(`${baseURL}/members/me/?${queryParams}`, {\r\n    method: 'get',\r\n    headers: generateRequestHeader(accessToken),\r\n  });\r\n\r\n  return await response.json();\r\n}\r\n\r\nexport async function createCard(\r\n  accessToken: UUID,\r\n  cardContent: TrelloCard,\r\n): Promise<JsonObject> {\r\n  const queryParams = querystring.stringify(cardContent);\r\n  const response = await fetch(`${baseURL}/cards/?${queryParams}`, {\r\n    method: 'post',\r\n    headers: generateRequestHeader(accessToken),\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  if (json.errors) {\r\n    anonymousLogger().error(`trello createCard`, json);\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\nexport async function addMemberToCard(\r\n  accessToken: UUID,\r\n  cardID: UUID,\r\n  memberID: UUID,\r\n) {\r\n  const memberQuery = querystring.stringify({ id: cardID, value: memberID });\r\n  const response = await fetch(\r\n    `${baseURL}/cards/${cardID}/idMembers/?${memberQuery}`,\r\n    {\r\n      method: 'post',\r\n      headers: generateRequestHeader(accessToken),\r\n    },\r\n  );\r\n  return response.status === 200;\r\n}\r\n\r\nfunction generateRequestHeader(accessToken: UUID) {\r\n  return {\r\n    Accept: 'application/json',\r\n    Authorization: `OAuth oauth_consumer_key=\"${env.TRELLO_APP_CLIENT_ID}\", oauth_token=\"${accessToken}\"`,\r\n  };\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { TRELLO_CONNECTED_LIST } from 'common/const/UserPreferenceKeys.ts';\r\nimport {\r\n  getLoginURLWithRequestToken,\r\n  completeOAuthFlow,\r\n} from 'server/src/third_party_tasks/trello/api.ts';\r\nimport { decodeViewerFromOAuthState } from 'server/src/auth/oauth.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nexport async function TrelloAuthRedirectHandler(req: Request, res: Response) {\r\n  let logger = anonymousLogger();\r\n  if (req.query['error'] === 'access_denied') {\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=trello&message=cancelled`,\r\n    );\r\n  }\r\n\r\n  try {\r\n    const { oauth_token, oauth_verifier } = req.query;\r\n    if (!oauth_token || !oauth_verifier) {\r\n      throw new Error(`missing token or verifier`);\r\n    }\r\n\r\n    const [authData, state, userResources] = await completeOAuthFlow(\r\n      oauth_token as string,\r\n      oauth_verifier as string,\r\n    );\r\n\r\n    const { userID, orgID, type } = decodeViewerFromOAuthState(state);\r\n    logger = new Logger(Viewer.createLoggedInViewer(userID, orgID));\r\n    if (type !== 'trello') {\r\n      throw new Error(`incorrect redirect type, received ${type}`);\r\n    }\r\n\r\n    const { accessToken, accessTokenSecret } = authData;\r\n    const { id, email, boards } = userResources;\r\n\r\n    if (!id || !email) {\r\n      throw new Error('Trello user id or email not found.');\r\n    }\r\n\r\n    const firstBoardWithList = boards.find((board) => board.lists.length > 1);\r\n    if (!firstBoardWithList) {\r\n      throw new Error('Trello user has no boards.');\r\n    }\r\n\r\n    const listID = firstBoardWithList.lists[0].id;\r\n\r\n    await Promise.all([\r\n      UserPreferenceEntity.upsert({\r\n        userID,\r\n        key: TRELLO_CONNECTED_LIST,\r\n        value: listID,\r\n      }),\r\n      ThirdPartyConnectionEntity.upsert({\r\n        userID,\r\n        orgID,\r\n        type,\r\n        externalID: id,\r\n        externalEmail: email,\r\n        externalAuthData: {\r\n          accessToken,\r\n          accessTokenSecret,\r\n        },\r\n      }),\r\n    ]);\r\n  } catch (e) {\r\n    logger.logException(`TrelloAuthRedirectHandler`, e);\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=trello&message=error`,\r\n    );\r\n  }\r\n\r\n  return res.redirect(`${APP_ORIGIN}/auth-complete.html#service=trello`);\r\n}\r\n\r\nexport function TrelloAuthLoginHandler(req: Request, res: Response) {\r\n  getLoginURLWithRequestToken(req, res);\r\n}\r\n", "import type {\r\n  MessageContent,\r\n  MessageNode,\r\n  MessageTextNode,\r\n} from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { splitStringToWsAndText } from 'server/src/util/splitStringToWsAndText.ts';\r\n\r\nconst textNodeToMarkdown = (node: MessageTextNode): string => {\r\n  let wrapper = '';\r\n\r\n  const [wsStart, middleText, wsEnd] = splitStringToWsAndText(node.text);\r\n\r\n  if (node.bold) {\r\n    wrapper += '**';\r\n  }\r\n\r\n  if (node.italic) {\r\n    wrapper += '*';\r\n  }\r\n\r\n  if (node.underline) {\r\n    // Markdown does not support underline\r\n  }\r\n\r\n  if (!middleText) {\r\n    return '';\r\n  }\r\n\r\n  return wsStart + wrapper + middleText + wrapper + wsEnd;\r\n};\r\n\r\nconst convertNodeToMarkdown = (node: MessageNode): string => {\r\n  if (node.type === undefined) {\r\n    return textNodeToMarkdown(node);\r\n  } else {\r\n    switch (node.type) {\r\n      case MessageNodeType.LINK: {\r\n        const nodeText = (node.children[0] as MessageTextNode).text;\r\n        return `[${escapeLinkTextAndURL(nodeText)}](${escapeLinkTextAndURL(\r\n          node.url,\r\n        )})`;\r\n      }\r\n      case MessageNodeType.PARAGRAPH:\r\n        return `${convertNodeListToMarkdown(node.children)}\\n\\n`;\r\n      case MessageNodeType.TODO:\r\n        return `* [ ] ${convertNodeListToMarkdown(node.children)}\\n`;\r\n      case MessageNodeType.BULLET:\r\n        return `* ${convertNodeListToMarkdown(node.children)}\\n`;\r\n      case MessageNodeType.NUMBER_BULLET:\r\n        return `1. ${convertNodeListToMarkdown(node.children)}\\n`;\r\n      case MessageNodeType.ASSIGNEE:\r\n      case MessageNodeType.MENTION:\r\n        return (node.children[0] as MessageTextNode).text;\r\n      case MessageNodeType.QUOTE:\r\n        return `> ${convertNodeListToMarkdown(node.children)}\\n\\n`;\r\n      case MessageNodeType.CODE:\r\n        return `\\`${convertNodeListToMarkdown(node.children)}\\``;\r\n      case MessageNodeType.MARKDOWN:\r\n        // TODO: MARKDOWN_NODE be careful with how we are \"supporting\" markdown spec here\r\n        return `\\`${convertNodeListToMarkdown(node.children)}\\``;\r\n    }\r\n  }\r\n};\r\n\r\nconst convertNodeListToMarkdown = (nodes: MessageNode[]) => {\r\n  const test = nodes\r\n    ? nodes.map((node) => convertNodeToMarkdown(node)).join('')\r\n    : null;\r\n  return test;\r\n};\r\n\r\nexport const convertMessageContentToMarkdown = (\r\n  messageContent: MessageContent,\r\n  footer: string,\r\n): string => {\r\n  return (\r\n    messageContent.map((node) => convertNodeToMarkdown(node)).join('') +\r\n    '\\n\\n' +\r\n    footer\r\n  );\r\n};\r\n\r\nconst escapeLinkTextAndURL = (text: string) => {\r\n  return text.replace(/([()[\\]])/g, '\\\\$1');\r\n};\r\n", "import { LINEAR_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { cache, cacheKey } from 'server/src/util/cache.ts';\r\nimport {\r\n  createIssue,\r\n  getUsersInOrg,\r\n  uploadFileToLinear,\r\n  updateIssueState,\r\n  getUserInfo,\r\n  getIssueDescription,\r\n  updateIssueDescription,\r\n  updateIssueAssigneeAndSubscribers,\r\n  getIssue,\r\n  getAllTeamsInUserOrg,\r\n} from 'server/src/third_party_tasks/linear/api.ts';\r\nimport { convertMessageContentToMarkdown } from 'server/src/third_party_tasks/linear/util.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport type {\r\n  UUID,\r\n  LinearIssuePreviewData,\r\n  LinearConnectionPreferences,\r\n  LinearTeam,\r\n} from 'common/types/index.ts';\r\nimport { LinearIssueStateTypes } from 'common/types/index.ts';\r\nimport {\r\n  taskTitleFromMessageContent,\r\n  todoNodesFromMessage,\r\n  textFromNodeRecursive,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport type { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport {\r\n  findTaskAndMessageEntitiesFromExternalTaskID,\r\n  getExternalAuthData,\r\n  getTaskFooterText,\r\n  handleThirdPartyException,\r\n  publishMessageUpdateForTask,\r\n} from 'server/src/third_party_tasks/util.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\ntype CachedLinearCredentials = {\r\n  accessToken: string;\r\n};\r\n\r\ntype LinearAttachmentData = {\r\n  filename: string;\r\n  assetUrl: string;\r\n  contentType: string;\r\n};\r\n\r\nasync function getLinearCredentials(\r\n  viewer: Viewer,\r\n): Promise<CachedLinearCredentials | null> {\r\n  try {\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const key = cacheKey({ type: 'linear_credentials', userID, orgID });\r\n\r\n    let credentials = cache.get<CachedLinearCredentials>(key);\r\n    if (credentials !== undefined) {\r\n      return credentials;\r\n    }\r\n\r\n    const externalData = await getExternalAuthData(viewer, 'linear');\r\n    if (externalData === null) {\r\n      return null;\r\n    }\r\n\r\n    const { accessToken } = externalData;\r\n\r\n    credentials = {\r\n      accessToken,\r\n    };\r\n\r\n    // Linear provides us with an access token that lasts 10 years.\r\n    // This TTL is not entirely accurate since the  token starts\r\n    // expiring from the initial oauth flow completion.\r\n    cache.set<CachedLinearCredentials>(key, credentials, 315705599);\r\n\r\n    return credentials;\r\n  } catch (e) {\r\n    handleThirdPartyException('getLinearCredentials', e, 'linear', viewer);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function createLinearTask(viewer: Viewer, task: TaskEntity) {\r\n  try {\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const preferences = await getTeamIDAndProjectID(viewer);\r\n    if (!preferences) {\r\n      return;\r\n    }\r\n    const { teamID, projectID } = preferences;\r\n    if (!teamID) {\r\n      return;\r\n    }\r\n\r\n    const message = await MessageEntity.findByPk(task.messageID);\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    const title = taskTitleFromMessageContent(message.content);\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'linear');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const textMessage = convertMessageContentToMarkdown(\r\n      message.content,\r\n      footerText,\r\n    );\r\n\r\n    const linearIssueID = await createIssue(\r\n      accessToken,\r\n      teamID,\r\n      title,\r\n      textMessage,\r\n      null,\r\n      null,\r\n      projectID,\r\n    );\r\n\r\n    if (!linearIssueID) {\r\n      throw new Error(`Failed to create a Linear task for task ${task.id}`);\r\n    }\r\n\r\n    const previewData = await getLinearIssuePreviewData(viewer, linearIssueID);\r\n\r\n    const externalReference = await TaskThirdPartyReference.create({\r\n      taskID: task.id,\r\n      externalID: linearIssueID,\r\n      externalConnectionType: 'linear',\r\n      externalLocationID: teamID,\r\n      previewData,\r\n    });\r\n\r\n    await publishMessageUpdateForTask(externalReference);\r\n\r\n    // Initial done state\r\n    if (task.done) {\r\n      await updateLinearTask(viewer, externalReference, true);\r\n    }\r\n  } catch (e) {\r\n    handleThirdPartyException('createLinearTask', e, 'linear', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nexport async function addLinearTaskAttachments(\r\n  viewer: Viewer,\r\n  issueID: string,\r\n  files: FileEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n    const { accessToken } = credentials;\r\n    const s3BucketLoader = new S3BucketLoader(viewer);\r\n\r\n    const attachmentData = await Promise.all(\r\n      files\r\n        .filter((file) => file.uploadStatus === 'uploaded')\r\n        .map(async (file) => {\r\n          const url = await file.getSignedDownloadURL(s3BucketLoader);\r\n          const response = await fetch(url);\r\n          if (response.status === 200) {\r\n            const assetUrl = await uploadFileToLinear(\r\n              accessToken,\r\n              file.name,\r\n              file.mimeType,\r\n              response.body!,\r\n              file.size,\r\n            );\r\n\r\n            if (!assetUrl) {\r\n              throw new Error(\r\n                `Failed to upload file to Linear, error code ${response.status}`,\r\n              );\r\n            }\r\n\r\n            return {\r\n              filename: file.name,\r\n              assetUrl,\r\n              contentType: file.mimeType,\r\n            };\r\n          } else {\r\n            throw new Error(\r\n              `Failed to fetch upload. Error code:${response.status}`,\r\n            );\r\n          }\r\n        }),\r\n    );\r\n\r\n    const attachmentsDescription =\r\n      `\\n\\n` +\r\n      `Attachments:\\n` +\r\n      convertAttachmentDataToMarkdownLinks(\r\n        // Filter out any undefined values in array.\r\n        attachmentData.filter(\r\n          (attachment): attachment is LinearAttachmentData =>\r\n            attachment !== undefined,\r\n        ),\r\n      );\r\n\r\n    const currentDescription = await getIssueDescription(issueID, accessToken);\r\n\r\n    const updatedDescription = currentDescription + attachmentsDescription;\r\n\r\n    await updateIssueDescription(issueID, accessToken, updatedDescription);\r\n  } catch (e) {\r\n    handleThirdPartyException('addLinearTaskAttachments', e, 'linear', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction convertAttachmentDataToMarkdownLinks(urls: LinearAttachmentData[]) {\r\n  return urls\r\n    .map((data) => {\r\n      if (data.contentType.startsWith('image/')) {\r\n        return `![${data.filename}](${encodeURI(data.assetUrl)})`;\r\n      } else {\r\n        return `[${data.filename}](${encodeURI(data.assetUrl)})`;\r\n      }\r\n    })\r\n    .join('\\n');\r\n}\r\n\r\nexport async function updateLinearTask(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n  done: boolean,\r\n) {\r\n  try {\r\n    if (externalReference.externalConnectionType !== 'linear') {\r\n      throw new Error(\r\n        `Expected connection type \"linear\" but got ${externalReference.externalConnectionType} instead.`,\r\n      );\r\n    }\r\n\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const teamID = externalReference.externalLocationID;\r\n    if (!teamID) {\r\n      return;\r\n    }\r\n\r\n    const newState = done\r\n      ? LinearIssueStateTypes.DONE\r\n      : LinearIssueStateTypes.TODO;\r\n\r\n    await updateIssueState(\r\n      accessToken,\r\n      newState,\r\n      externalReference.externalID,\r\n      teamID,\r\n    );\r\n\r\n    await updateLinearIssuePreviewData(viewer, externalReference);\r\n  } catch (e) {\r\n    handleThirdPartyException('updateLinearTask', e, 'linear', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function getTeamIDAndProjectID(\r\n  viewer: Viewer,\r\n): Promise<LinearConnectionPreferences | undefined> {\r\n  const userID = assertViewerHasUser(viewer);\r\n  const response = await UserPreferenceEntity.findOne({\r\n    where: {\r\n      userID,\r\n      key: LINEAR_CONNECTION_PREFERENCES,\r\n    },\r\n  });\r\n\r\n  return response ? (response.value as LinearConnectionPreferences) : undefined;\r\n}\r\n\r\nexport async function getLinearUserTeamInfo(\r\n  viewer: Viewer,\r\n): Promise<LinearTeam[] | undefined> {\r\n  try {\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const userInfo = await getUserInfo(accessToken);\r\n    if (!userInfo) {\r\n      return;\r\n    }\r\n\r\n    return userInfo.teams?.nodes;\r\n  } catch (e) {\r\n    handleThirdPartyException('getTeamIDFromPreferences', e, 'linear', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function getLinearAssigneeAndSubscribers(\r\n  viewer: Viewer,\r\n  accessToken: string,\r\n  taskAssigneeUserIDs: UUID[],\r\n): Promise<[string[], UserEntity[]]> {\r\n  try {\r\n    if (taskAssigneeUserIDs.length === 0) {\r\n      // Do nothing\r\n      return [[], []];\r\n    }\r\n\r\n    const { orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const userLoader = new UserLoader(viewer, () => null);\r\n    const users = await userLoader.loadUsersInOrg(taskAssigneeUserIDs, orgID);\r\n\r\n    const linearUserIDs = await getLinearUserIDs(viewer, accessToken, users);\r\n\r\n    const foundLinearUserIDs = linearUserIDs.filter(\r\n      (linearID): linearID is string => linearID !== undefined,\r\n    );\r\n\r\n    const unmatchedUsers = users.filter((_user, i) => !linearUserIDs[i]);\r\n\r\n    return [foundLinearUserIDs, unmatchedUsers];\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      'getLinearAssigneeAndSubscribers',\r\n      e,\r\n      'linear',\r\n      viewer,\r\n    );\r\n    return [[], []];\r\n  }\r\n}\r\n\r\nasync function getLinearUserIDs(\r\n  viewer: Viewer,\r\n  accessToken: string,\r\n  users: UserEntity[],\r\n): Promise<(string | undefined)[]> {\r\n  try {\r\n    const orgID = assertViewerHasOrg(viewer);\r\n    const connections = await ThirdPartyConnectionEntity.findAll({\r\n      where: {\r\n        userID: users.map(({ id }) => id),\r\n        orgID,\r\n        type: 'linear',\r\n      },\r\n    });\r\n\r\n    const userIDToLinearID = new Map(\r\n      connections.map((connection) => [\r\n        connection.userID,\r\n        connection.externalID,\r\n      ]),\r\n    );\r\n\r\n    const linearUsers = await getUsersInOrg(accessToken);\r\n\r\n    if (!linearUsers) {\r\n      return [];\r\n    }\r\n\r\n    const emailToLinearID = new Map(\r\n      linearUsers.map((linearUser) => [linearUser.email, linearUser.id]),\r\n    );\r\n\r\n    return users.map((user) => {\r\n      return (\r\n        userIDToLinearID.get(user.id) ||\r\n        (user.email ? emailToLinearID.get(user.email) : undefined)\r\n      );\r\n    });\r\n  } catch (e) {\r\n    handleThirdPartyException('getLinearUserIDs', e, 'linear', viewer);\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction additionalTextForTask(unmatchedUsers: UserEntity[]) {\r\n  if (unmatchedUsers.length === 0) {\r\n    return '';\r\n  }\r\n  return [\r\n    'This task was assigned to the following Cord users who do not have Linear connected:',\r\n    ...unmatchedUsers.map((user) => `${userDisplayName(user)} (${user.email})`),\r\n  ].join('\\n');\r\n}\r\n\r\nexport async function updateLinearTaskAssigneeAndSubscribers(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  taskAssigneeUserIDs: UUID[],\r\n) {\r\n  try {\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const thirdPartyReference = await TaskThirdPartyReference.findForTask(\r\n      taskID,\r\n      'linear',\r\n    );\r\n    if (!thirdPartyReference) {\r\n      return;\r\n    }\r\n\r\n    const issueID = thirdPartyReference.externalID;\r\n\r\n    const [foundLinearUserIDs, unmatchedUsers] =\r\n      await getLinearAssigneeAndSubscribers(\r\n        viewer,\r\n        accessToken,\r\n        taskAssigneeUserIDs,\r\n      );\r\n\r\n    const [assigneeID, ...subscriberIDs] = foundLinearUserIDs;\r\n    const currentDescription = await getIssueDescription(issueID, accessToken);\r\n    const extraText = additionalTextForTask(unmatchedUsers);\r\n    const updatedDescription =\r\n      currentDescription + (extraText ? '\\n\\n' + extraText : '');\r\n\r\n    await updateIssueAssigneeAndSubscribers(\r\n      accessToken,\r\n      issueID,\r\n      assigneeID,\r\n      subscriberIDs,\r\n      updatedDescription,\r\n    );\r\n\r\n    await updateLinearIssuePreviewData(viewer, thirdPartyReference);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      'updateLinearTaskAssigneeAndSubscribers',\r\n      e,\r\n      'linear',\r\n      viewer,\r\n    );\r\n    return;\r\n  }\r\n}\r\n\r\nexport async function createLinearSubtasks(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  todos: TaskTodoEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getLinearCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const [preferences, task, thirdPartyReference] = await Promise.all([\r\n      getTeamIDAndProjectID(viewer),\r\n      TaskEntity.findByPk(taskID),\r\n      TaskThirdPartyReference.findForTask(taskID, 'linear'),\r\n    ]);\r\n\r\n    if (!preferences || !task || !thirdPartyReference) {\r\n      return;\r\n    }\r\n\r\n    const { teamID, projectID } = preferences;\r\n    if (!teamID) {\r\n      return;\r\n    }\r\n\r\n    const { messageID } = task;\r\n\r\n    const message = await MessageEntity.findByPk(messageID);\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    const issueID = thirdPartyReference.externalID;\r\n    const createdTodoIDs = new Set(todos.map((todo) => todo.id));\r\n    const todoNodes = todoNodesFromMessage(message.content).filter((node) =>\r\n      createdTodoIDs.has(node.todoID),\r\n    );\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'linear');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const description = convertMessageContentToMarkdown([], footerText);\r\n\r\n    const linearSubIssueIDs = await Promise.all(\r\n      todoNodes.map((todoNode) =>\r\n        createIssue(\r\n          accessToken,\r\n          teamID,\r\n          textFromNodeRecursive(todoNode),\r\n          description,\r\n          null,\r\n          issueID,\r\n          projectID,\r\n        ),\r\n      ),\r\n    );\r\n\r\n    const externalReferences = await Promise.all(\r\n      linearSubIssueIDs.map((linearSubIssueID, i) => {\r\n        if (!linearSubIssueID) {\r\n          return;\r\n        }\r\n\r\n        return TaskThirdPartyReference.create({\r\n          taskID: taskID,\r\n          externalID: linearSubIssueID,\r\n          externalConnectionType: 'linear',\r\n          taskTodoID: todoNodes[i].todoID,\r\n          externalLocationID: teamID,\r\n          previewData: null,\r\n        });\r\n      }),\r\n    );\r\n\r\n    const filteredExternalReferences = externalReferences.filter(\r\n      (externalReference): externalReference is TaskThirdPartyReference =>\r\n        externalReference !== undefined,\r\n    );\r\n\r\n    // Initial done state\r\n    await Promise.all(\r\n      todoNodes.map((todoNode, i) => {\r\n        if (!todos.find(({ id }) => todoNode.todoID === id)?.done) {\r\n          return null;\r\n        }\r\n\r\n        const externalReference = filteredExternalReferences.find(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          (externalReference) =>\r\n            externalReference.externalID === linearSubIssueIDs[i],\r\n        );\r\n        if (!externalReference) {\r\n          return null;\r\n        }\r\n\r\n        return updateLinearTask(viewer, externalReference, true);\r\n      }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException('createLinearSubtasks', e, 'linear', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function updateLinearIssuePreviewData(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n) {\r\n  // only update the preview if this is not a TODO issue\r\n  if (!externalReference.taskTodoID) {\r\n    const issueID = externalReference.externalID;\r\n    const previewData = await getLinearIssuePreviewData(viewer, issueID);\r\n    await externalReference.update({ previewData });\r\n    await publishMessageUpdateForTask(externalReference);\r\n  }\r\n}\r\n\r\nasync function getLinearIssuePreviewData(\r\n  viewer: Viewer,\r\n  issueID: string,\r\n): Promise<LinearIssuePreviewData | null> {\r\n  const credentials = await getLinearCredentials(viewer);\r\n  if (!credentials) {\r\n    return null;\r\n  }\r\n\r\n  const { accessToken } = credentials;\r\n\r\n  const issue = await getIssue(accessToken, issueID);\r\n  if (!issue) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    title: issue.title,\r\n    identifier: issue.identifier,\r\n    url: issue.url,\r\n    assignee: issue.assignee?.name,\r\n    priority: issue.priorityLabel,\r\n    status: issue.state.name,\r\n    done: issue.state.type === LinearIssueStateTypes.DONE,\r\n    orgName: issue.team.organization.name,\r\n  };\r\n}\r\n\r\nexport async function handleAssigneeChange(\r\n  externalTaskID: string,\r\n  assigneeID: string,\r\n  previousAssigneeID: string,\r\n  assignee: { id: string; name: string } | null | undefined,\r\n) {\r\n  try {\r\n    // finding if this task exists\r\n    const entities = await findTaskAndMessageEntitiesFromExternalTaskID(\r\n      externalTaskID,\r\n      'linear',\r\n    );\r\n\r\n    if (!entities) {\r\n      return;\r\n    }\r\n\r\n    const { taskEntity, messageEntity, thirdPartyTaskEntity } = entities;\r\n\r\n    const taskID = taskEntity.id;\r\n\r\n    const { orgID } = messageEntity;\r\n\r\n    // if someone else was assigned previously they would be removed from the\r\n    // task assignee database\r\n    if (previousAssigneeID) {\r\n      // should we also try to match emails?\r\n      const thirdPartyConnection = await ThirdPartyConnectionEntity.findOne({\r\n        where: { externalID: previousAssigneeID, orgID },\r\n      });\r\n\r\n      if (!thirdPartyConnection) {\r\n        anonymousLogger().info(`Could not find Linear user as a Cord user`);\r\n      } else {\r\n        const { userID } = thirdPartyConnection;\r\n        // removes the assignee that was unassigned from Linear in Cord\r\n        await TaskAssigneeEntity.destroy({ where: { taskID, userID, orgID } });\r\n      }\r\n    }\r\n\r\n    if (assigneeID) {\r\n      const thirdPartyConnection = await ThirdPartyConnectionEntity.findOne({\r\n        where: { externalID: assigneeID, orgID },\r\n      });\r\n\r\n      // should we also try to match emails?\r\n      if (!thirdPartyConnection) {\r\n        anonymousLogger().info(`Could not find Linear user as a Cord user`);\r\n      } else {\r\n        const { userID } = thirdPartyConnection;\r\n        // check if entity already exists as when we add an assignee on a new\r\n        // task, because of the way the mutators work the webhook thinks this\r\n        // is an update.\r\n        const taskAssigneeEntity = await TaskAssigneeEntity.findOne({\r\n          where: { taskID, userID, orgID },\r\n        });\r\n        if (!taskAssigneeEntity) {\r\n          await TaskAssigneeEntity.create({ taskID, userID, orgID });\r\n        }\r\n      }\r\n    }\r\n\r\n    // updating preview data\r\n    const previewData = thirdPartyTaskEntity.previewData;\r\n    if (previewData) {\r\n      await thirdPartyTaskEntity.update({\r\n        previewData: {\r\n          ...previewData,\r\n          assignee: assignee ? assignee.name : null,\r\n        },\r\n      });\r\n      await publishMessageUpdateForTask(thirdPartyTaskEntity);\r\n    }\r\n  } catch (e) {\r\n    anonymousLogger().logException('handleAssigneeChange', e);\r\n  }\r\n}\r\n\r\nexport function hasAssigneeChanged(prevAssignee: string, newAssignee: string) {\r\n  const isNewAssigneeOnUnassignedTask = newAssignee && prevAssignee === null;\r\n  const isTaskBeingUnassigned = newAssignee === undefined && prevAssignee;\r\n  const isAssigneeBeingReplaced = newAssignee && prevAssignee;\r\n\r\n  return (\r\n    isNewAssigneeOnUnassignedTask ||\r\n    isTaskBeingUnassigned ||\r\n    isAssigneeBeingReplaced\r\n  );\r\n}\r\n\r\nexport async function handleIssueStatusChange(\r\n  externalTaskID: string,\r\n  newIssueState: LinearIssueStateTypes,\r\n  stateIssueName: string,\r\n) {\r\n  try {\r\n    // finding if this task exists\r\n\r\n    const entities = await findTaskAndMessageEntitiesFromExternalTaskID(\r\n      externalTaskID,\r\n      'linear',\r\n    );\r\n\r\n    if (!entities) {\r\n      return;\r\n    }\r\n\r\n    const { taskEntity, thirdPartyTaskEntity } = entities;\r\n\r\n    await taskEntity.update({\r\n      done: newIssueState === LinearIssueStateTypes.DONE,\r\n    });\r\n\r\n    // updating preview data\r\n    const previewData = thirdPartyTaskEntity.previewData;\r\n    if (previewData) {\r\n      await thirdPartyTaskEntity.update({\r\n        previewData: {\r\n          ...previewData,\r\n          done: newIssueState === LinearIssueStateTypes.DONE,\r\n          status: stateIssueName,\r\n        },\r\n      });\r\n      await publishMessageUpdateForTask(thirdPartyTaskEntity);\r\n    }\r\n  } catch (e) {\r\n    anonymousLogger().logException('handleIssueStatusChange', e);\r\n  }\r\n}\r\n\r\nexport async function canUserEditTask(\r\n  accessToken: string,\r\n  taskTeamID: string,\r\n  viewer: Viewer,\r\n) {\r\n  try {\r\n    const teams = await getAllTeamsInUserOrg(accessToken);\r\n    if (!teams) {\r\n      return false;\r\n    }\r\n    const matchedTeam = teams.some((team) => team.id === taskTeamID);\r\n    return matchedTeam;\r\n  } catch (e) {\r\n    handleThirdPartyException('canUserEditTask', e, 'linear', viewer);\r\n    return false;\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { LinearIssueStateTypes, UUID } from 'common/types/index.ts';\r\nimport {\r\n  handleAssigneeChange,\r\n  handleIssueStatusChange,\r\n  hasAssigneeChanged,\r\n} from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\n// IP addresses taken from https://developers.linear.app/docs/graphql/webhooks\r\nconst LINEAR_IP_ADDRESSES = ['35.231.147.226', '35.243.134.228'];\r\n\r\nexport default async function LinearEventApiHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  const payload = req.body;\r\n  anonymousLogger().debug('LinearEventApiHandler', { linearEvent: payload });\r\n\r\n  const requestFromIp = req.get('x-forwarded-for');\r\n  // to check that the web hooks are coming from Linear when not in running dev\r\n  if (\r\n    process.env.NODE_ENV !== 'development' &&\r\n    (!requestFromIp || !LINEAR_IP_ADDRESSES.includes(requestFromIp))\r\n  ) {\r\n    anonymousLogger().error('LinearEventApiHandler', {\r\n      linearEvent: payload,\r\n      message: 'ip address does not match linear ones',\r\n    });\r\n    res.sendStatus(403);\r\n    return;\r\n  }\r\n  res.sendStatus(200);\r\n  await handleLinearEvent(payload);\r\n}\r\n\r\ntype LinearEvent = {\r\n  action: 'create' | 'update' | 'remove';\r\n  createdAt: string;\r\n  data: LinearEventDataType;\r\n  updatedFrom: UpdatedFromDataType<LinearEventDataType>;\r\n  url: string;\r\n  type: string;\r\n};\r\n\r\ntype LinearEventDataType = {\r\n  id: UUID;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  number: number;\r\n  title: string;\r\n  description: string | null | undefined;\r\n  priority: number;\r\n  boardOrder: number;\r\n  previousIdentifiers: string[];\r\n  subIssueSortOrder: number;\r\n  priorityLabel: string;\r\n  teamId: UUID;\r\n  stateId: UUID;\r\n  parentId: UUID;\r\n  assigneeId: UUID;\r\n  subscriberIds: UUID[];\r\n  assignee: { id: UUID; name: string } | null | undefined;\r\n  creatorId: UUID;\r\n  labelIds: UUID[];\r\n  state: {\r\n    id: UUID;\r\n    name: string;\r\n    color: string;\r\n    type: string;\r\n  };\r\n  team: {\r\n    id: UUID;\r\n    name: string;\r\n    key: string;\r\n  };\r\n};\r\n\r\ntype UpdatedFromDataType<T> = {\r\n  [Property in keyof T]: T[Property];\r\n};\r\n\r\nasync function handleLinearEvent(event: LinearEvent) {\r\n  const { action, data, updatedFrom, type } = event;\r\n\r\n  if (type !== 'Issue') {\r\n    return;\r\n  }\r\n\r\n  // this is to detect if any assignees have changed. We are ignoring subscribers\r\n  if (action === 'update') {\r\n    if (hasAssigneeChanged(updatedFrom.assigneeId, data.assigneeId)) {\r\n      return await handleAssigneeChange(\r\n        data.id,\r\n        data.assigneeId,\r\n        updatedFrom.assigneeId,\r\n        data.assignee,\r\n      );\r\n    }\r\n\r\n    if (updatedFrom.stateId) {\r\n      return await handleIssueStatusChange(\r\n        data.id,\r\n        data.state.type as LinearIssueStateTypes,\r\n        data.state.name,\r\n      );\r\n    }\r\n  }\r\n  return;\r\n}\r\n", "import type { NextFunction, Request, Response } from 'express';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport default function PlatformErrorHandler(\r\n  error: unknown,\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  anonymousLogger().logException(\r\n    'Platform',\r\n    error,\r\n    {\r\n      appID: req.appID,\r\n      endpoint: `${req.method} ${req.path}`,\r\n      payload: req.body,\r\n    },\r\n    undefined,\r\n    'info',\r\n  );\r\n\r\n  if (error instanceof ApiCallerError) {\r\n    return res.status(error.statusCode || 400).send({\r\n      error: error.name,\r\n      message: error.message,\r\n      ...(process.env.NODE_ENV === 'development' &&\r\n        !process.env.IS_TEST &&\r\n        error.stack && {\r\n          stack: error.stack.split('\\n').map((line: string) => line.trim()),\r\n        }),\r\n    });\r\n  }\r\n\r\n  // this is some error that should not have reached this point, e.g.\r\n  // SequelizeUniqueConstraintError. We don't want to leak such errors to\r\n  // partners.\r\n\r\n  // log the error again, but this time at ERROR level so that we get\r\n  // notified about this.\r\n  anonymousLogger().logException(\r\n    'a non platform error was thrown in platform endpoint',\r\n    error,\r\n    {\r\n      appID: req.appID,\r\n      endpoint: `${req.method} ${req.path}`,\r\n    },\r\n  );\r\n\r\n  return res.status(500).send({\r\n    error: 'error',\r\n    message: 'internal server error',\r\n    ...(process.env.NODE_ENV === 'development' &&\r\n      !process.env.IS_TEST &&\r\n      hasStack(error) && {\r\n        stack: error.stack.split('\\n').map((line: string) => line.trim()),\r\n      }),\r\n  });\r\n}\r\n\r\nfunction hasStack(error: unknown): error is { stack: string } {\r\n  if (typeof error === 'object' && error !== null && 'stack' in error) {\r\n    return typeof (error as { stack: any }).stack === 'string';\r\n  }\r\n  return false;\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport isJWT from 'validator/lib/isJWT.js';\r\nimport { sign, verify, decode } from 'jsonwebtoken';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { ACCESS_TOKEN_TTL_HOURS } from 'common/const/IntegrationAPI.ts';\r\nimport { SessionEntity } from 'server/src/entity/session/SessionEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  createInvalidInputTypeMessage,\r\n  validateInput,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport type { UUID, APICordTokenData } from 'common/types/index.ts';\r\nimport {\r\n  ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS,\r\n  ACCESS_TOKEN_MAX_AGE_SECONDS,\r\n} from 'common/const/Timing.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\ntype APIAuthorizeVariables = {\r\n  signed_app_token: string;\r\n};\r\n\r\ntype SignedAppTokenData = {\r\n  app_id: UUID;\r\n};\r\n\r\nfunction validateTokenData(data: any): SignedAppTokenData {\r\n  if (!(data instanceof Object)) {\r\n    throw createInvalidInputTypeMessage('signed_app_token payload', 'object');\r\n  }\r\n\r\n  const { app_id } = data;\r\n\r\n  if (!app_id) {\r\n    throw 'signed_app_token payload is missing app_id.';\r\n  }\r\n\r\n  if (typeof app_id !== 'string' || !isUUID.default(app_id)) {\r\n    throw createInvalidInputTypeMessage('app_id', 'UUID');\r\n  }\r\n\r\n  if ('user_id' in data || 'org_id' in data) {\r\n    throw 'signed_app_token payload invalid, must contain only app_id';\r\n  }\r\n\r\n  return { app_id };\r\n}\r\n\r\nasync function authorizeHandler(req: Request, res: Response) {\r\n  deprecated('/v1/authorize');\r\n  const { signed_app_token } = validateInput<APIAuthorizeVariables>(req.body, {\r\n    required: {\r\n      signed_app_token: (value) =>\r\n        (typeof value === 'string' && isJWT.default(value)) || 'JWT',\r\n    },\r\n  });\r\n\r\n  let decodedSignedAppToken: SignedAppTokenData;\r\n\r\n  try {\r\n    const data = decode(signed_app_token);\r\n    decodedSignedAppToken = validateTokenData(data);\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      decodedSignedAppToken.app_id,\r\n    );\r\n\r\n    if (!application) {\r\n      throw new ApiCallerError('project_not_found');\r\n    }\r\n\r\n    verify(signed_app_token, application.sharedSecret, {\r\n      clockTolerance: ACCESS_TOKEN_CLOCK_TOLERANCE_SECONDS,\r\n      maxAge: `${ACCESS_TOKEN_MAX_AGE_SECONDS}s`,\r\n      algorithms: ['HS512'],\r\n    });\r\n  } catch (e: any) {\r\n    if (e instanceof ApiCallerError) {\r\n      throw e;\r\n    } else {\r\n      throw new ApiCallerError('invalid_project_token', { message: e });\r\n    }\r\n  }\r\n\r\n  const { app_id } = decodedSignedAppToken;\r\n\r\n  const session = await SessionEntity.create({\r\n    applicationID: app_id,\r\n    expiresAt: Sequelize.literal(\r\n      `NOW() + INTERVAL '${ACCESS_TOKEN_TTL_HOURS} hours'`,\r\n    ),\r\n  });\r\n\r\n  const payload: APICordTokenData = {\r\n    session_id: session.id,\r\n  };\r\n\r\n  const accessToken = sign(payload, env.JWT_SIGNING_SECRET, {\r\n    expiresIn: `${ACCESS_TOKEN_TTL_HOURS}h`,\r\n    algorithm: 'HS512',\r\n  });\r\n\r\n  return res.json({\r\n    access_token: accessToken,\r\n    expires: session.expiresAt.toISOString(),\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(authorizeHandler);\r\n", "// Lifetime of the exchanged access token\r\nexport const ACCESS_TOKEN_TTL_HOURS = 24;\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\n\r\nconst counter = Counter({\r\n  name: 'DeprecatedCode',\r\n  help: 'Tracks how often deprecated code is executed',\r\n  labelNames: ['label', 'appID'],\r\n});\r\n\r\nexport function deprecated(label: string, appID?: UUID) {\r\n  counter.inc({ label, appID: appID ?? 'unspecified' });\r\n}\r\n\r\nexport function deprecatedFunction<Args extends any[], ReturnType>(\r\n  func: (...args: Args) => ReturnType,\r\n  label: string,\r\n) {\r\n  return (...args: Args) => {\r\n    deprecated(\r\n      label,\r\n      // If this is a GraphQL resolver (very common), try to extract the appID\r\n      // from the viewer\r\n      args[2]?.session?.viewer?.platformApplicationID ?? undefined,\r\n    );\r\n    return func(...args);\r\n  };\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { ServerListOrganization } from '@cord-sdk/types';\r\n\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\n\r\nasync function listPlatformOrganizationsHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  const orgs = await OrgEntity.findAll({\r\n    where: {\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  const orgsConnectedToSlack = await LinkedOrgsEntity.findAll({\r\n    where: {\r\n      sourceOrgID: orgs.map((org) => org.id),\r\n    },\r\n  });\r\n\r\n  const orgsConnectedToSlackSet = new Set(\r\n    orgsConnectedToSlack.map((org) => org.sourceOrgID),\r\n  );\r\n\r\n  const orgsData: ServerListOrganization[] = orgs.map((org) => ({\r\n    id: org.externalID,\r\n    name: org.name,\r\n    status: org.state === 'inactive' ? 'deleted' : 'active',\r\n    connectedToSlack: orgsConnectedToSlackSet.has(org.id),\r\n    metadata: org.metadata,\r\n  }));\r\n\r\n  return res.status(200).json(orgsData);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listPlatformOrganizationsHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { isNotNull } from 'common/util/index.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { ServerGetOrganization } from '@cord-sdk/types';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\n\r\nasync function getPlatformOrganizationHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.orgID;\r\n  if (!externalID) {\r\n    throw new ApiCallerError('group_not_found');\r\n  }\r\n\r\n  if (!isValidExternalID(externalID)) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('group_not_found', { code: 404 });\r\n  }\r\n\r\n  const linkedOrg = await LinkedOrgsEntity.findOne({\r\n    where: { sourceOrgID: org.id },\r\n  });\r\n\r\n  const members = await OrgMembersEntity.findAll({\r\n    where: {\r\n      orgID: org.id,\r\n    },\r\n  });\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: {\r\n      id: members.map((m) => m.userID),\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  const userExternalIDs = new Set(\r\n    users.map((u) => u.externalID).filter(isNotNull),\r\n  );\r\n\r\n  const response: ServerGetOrganization = {\r\n    id: org.externalID,\r\n    name: org.name,\r\n    status: org.state === 'inactive' ? 'deleted' : 'active',\r\n    members: [...userExternalIDs],\r\n    connectedToSlack: Boolean(linkedOrg),\r\n    metadata: org.metadata,\r\n  };\r\n  return res.status(200).json(response);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getPlatformOrganizationHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport {\r\n  createPlatformOrganization,\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n  updatePlatformOrganizationMembers,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nfunction validateCreateOrganizationInput(data: unknown) {\r\n  // Not updated to CreatePlatformGroupVariables because this route was already\r\n  // deprecated anyway\r\n  const validatedInput = validate.CreatePlatformOrganizationVariables(data);\r\n  validateExternalID(validatedInput.id, 'id');\r\n  return validatedInput;\r\n}\r\n\r\nasync function createOrganizationHandler(req: Request, res: Response) {\r\n  const {\r\n    id, // This is the externalID but can be type string or number\r\n    name,\r\n    status,\r\n    members,\r\n    metadata,\r\n    ...rest\r\n  } = validateCreateOrganizationInput(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const externalID = id.toString(); // Incase it is a number\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  deprecated('api: POST /v1/organizations', platformApplicationID);\r\n\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (org) {\r\n    throw new ApiCallerError('organization_already_exists', {\r\n      message: `The platform organization with id ${org.externalID} already exists, to update organization please make a PUT request to organizations/<ORGANIZATION_ID>.`,\r\n    });\r\n  }\r\n  const addedMembers: UUID[] = [];\r\n  let newOrg: OrgEntity;\r\n  await getSequelize().transaction(async (transaction) => {\r\n    newOrg = await createPlatformOrganization(\r\n      platformApplicationID,\r\n      externalID,\r\n      name,\r\n      status,\r\n      metadata,\r\n      transaction,\r\n    );\r\n\r\n    if (!newOrg) {\r\n      throw new Error('Could not create organization');\r\n    }\r\n\r\n    if (members) {\r\n      const { added } = await updatePlatformOrganizationMembers(\r\n        newOrg,\r\n        members,\r\n        transaction,\r\n      );\r\n      addedMembers.push(...added);\r\n    }\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      platformApplicationID,\r\n      { transaction },\r\n    );\r\n\r\n    if (await application?.isSupportChatEnabled()) {\r\n      await OrgMembersEntity.create(\r\n        {\r\n          userID: application!.supportBotID!,\r\n          orgID: newOrg.id,\r\n        },\r\n        { transaction },\r\n      );\r\n    }\r\n  });\r\n  addedMembers.map((userID) => {\r\n    backgroundPromise(publishPubSubEvent('user-identity', { userID }));\r\n    backgroundPromise(\r\n      publishPubSubEvent('org-member-added', { orgID: newOrg.id }, { userID }),\r\n    );\r\n  });\r\n  return res.status(201).json({\r\n    success: true,\r\n    message: `\u2705 You successfully created organization ${externalID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createOrganizationHandler);\r\n", "export class AsyncChannel<T> {\r\n  private queuedItems: T[] = [];\r\n  private waitingListeners: Array<(t: IteratorResult<T, void>) => void> = [];\r\n\r\n  push(t: T): void {\r\n    const waitingListener = this.waitingListeners.shift();\r\n    if (waitingListener) {\r\n      waitingListener({ done: false, value: t });\r\n    } else {\r\n      this.queuedItems.push(t);\r\n    }\r\n  }\r\n\r\n  next(): Promise<IteratorResult<T, void>> {\r\n    if (this.queuedItems.length) {\r\n      return Promise.resolve({ done: false, value: this.queuedItems.shift()! });\r\n    } else {\r\n      return new Promise((resolve) => this.waitingListeners.push(resolve));\r\n    }\r\n  }\r\n\r\n  takeAll(): T[] {\r\n    const { queuedItems } = this;\r\n    this.queuedItems = [];\r\n    return queuedItems;\r\n  }\r\n\r\n  return() {\r\n    const listeners = this.waitingListeners;\r\n    this.waitingListeners = [];\r\n    listeners.forEach((resolve) => resolve({ done: true, value: undefined }));\r\n  }\r\n\r\n  iter() {\r\n    const iter: AsyncGenerator<T, void, void> = {\r\n      next: async () => await this.next(),\r\n      return: async () => ({ value: undefined, done: true }),\r\n      throw: async () => ({ value: undefined, done: true }),\r\n      [Symbol.asyncIterator]: () => iter,\r\n    };\r\n    return iter;\r\n  }\r\n\r\n  [Symbol.asyncIterator]() {\r\n    return this.iter();\r\n  }\r\n}\r\n", "import type {\r\n  PubSubAsyncIteratorArg,\r\n  PubSubEvent,\r\n  PubSubEventName,\r\n} from 'server/src/pubsub/index.ts';\r\nimport {\r\n  unsubscribeFromPubSub,\r\n  subscribeToPubSubEvent,\r\n} from 'server/src/pubsub/index.ts';\r\nimport { AsyncChannel } from 'server/src/util/AsyncChannel.ts';\r\n\r\nexport const NO_VALUE = Symbol('NO_OUTPUT');\r\nexport type NoValue = typeof NO_VALUE;\r\n\r\n/**\r\n * Returns an async iterable that will fulfill the needs of a live query.  The\r\n * first argument is a set of pubsub topics to listen to, which will produce\r\n * events; the second argument is a function that is called immediately to\r\n * produce the set of data to send when the subscription starts; and the third\r\n * argument is a function to convert pubsub events into return values for the\r\n * live query.\r\n */\r\nexport async function liveQuery<T extends PubSubEventName, S>(\r\n  events: Array<PubSubAsyncIteratorArg<T>>,\r\n  initialData: () => S | NoValue | Promise<S | NoValue>,\r\n  eventData: (event: PubSubEvent<T>) => S | NoValue | Promise<S | NoValue>,\r\n): Promise<AsyncIterable<S>> {\r\n  const channel = new AsyncChannel<PubSubEvent<T>>();\r\n  const pubSubSubscriptions: number[] = [];\r\n  for (const event of events) {\r\n    pubSubSubscriptions.push(\r\n      await subscribeToPubSubEvent(event[0] as any, event[1], (e) =>\r\n        channel.push(e),\r\n      ),\r\n    );\r\n  }\r\n\r\n  let running = true;\r\n\r\n  const shutdown = async () => {\r\n    if (running) {\r\n      running = false;\r\n      channel.return();\r\n      pubSubSubscriptions.map((subscription) =>\r\n        unsubscribeFromPubSub(subscription),\r\n      );\r\n    }\r\n  };\r\n\r\n  let firstCall = true;\r\n\r\n  const iterator: AsyncIterator<S> = {\r\n    async next() {\r\n      if (!running) {\r\n        return { done: true, value: undefined };\r\n      }\r\n      if (firstCall) {\r\n        firstCall = false;\r\n        const result = await initialData();\r\n        if (result !== NO_VALUE) {\r\n          return { done: false, value: result };\r\n        }\r\n      }\r\n      const event = await channel.next();\r\n      if (event.done) {\r\n        await shutdown();\r\n        return event;\r\n      }\r\n      const result = await eventData(event.value);\r\n      if (result !== NO_VALUE) {\r\n        return { done: false, value: result };\r\n      }\r\n      return await this.next();\r\n    },\r\n    async return() {\r\n      await shutdown();\r\n      return { done: true, value: undefined };\r\n    },\r\n    async throw(error) {\r\n      await shutdown();\r\n      throw error;\r\n    },\r\n  };\r\n\r\n  return {\r\n    [Symbol.asyncIterator]() {\r\n      return iterator;\r\n    },\r\n  };\r\n}\r\n", "import { withFilter as originalWithFilter } from 'graphql-subscriptions';\r\nimport type {\r\n  ResolverFn,\r\n  FilterFn,\r\n} from 'server/src/public/subscriptions/util/common.ts';\r\n\r\nexport function withFilter<T>(\r\n  asyncIteratorFn: ResolverFn<T>,\r\n  filterFn: FilterFn<T>,\r\n) {\r\n  return originalWithFilter(asyncIteratorFn, filterFn);\r\n}\r\n", "import type { ResolverFn } from 'server/src/public/subscriptions/util/common.ts';\r\nimport type { NoValue } from 'server/src/public/subscriptions/util/live_query.ts';\r\nimport { liveQuery } from 'server/src/public/subscriptions/util/live_query.ts';\r\nimport { withFilter } from 'server/src/public/subscriptions/util/with_filter.ts';\r\nimport {\r\n  publishPubSubEvent,\r\n  pubSubAsyncIterator,\r\n} from 'server/src/pubsub/index.ts';\r\nimport type {\r\n  PubSubAsyncIteratorArg,\r\n  PubSubEvent,\r\n  PubSubEventName,\r\n} from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport const RESTART_SUBSCRIPTION_ERROR = 'restart-subscription';\r\n\r\nexport function maybeRestartSubscription<T extends PubSubEventName>(\r\n  event: PubSubEvent<T>,\r\n  operationName: string,\r\n): asserts event is PubSubEvent<Exclude<T, 'restart-subscription'>> {\r\n  if (event.name === 'restart-subscription') {\r\n    throw new Error(RESTART_SUBSCRIPTION_ERROR, { cause: operationName });\r\n  }\r\n}\r\n\r\n/**\r\n * Use this if you want to send a restart pubsub event, this will then\r\n * trigger a subscription restart in any graphql subscription that listen\r\n * to this event. Make sure you use withRestartEvent/liveQueryWithRestartEvent\r\n * within the subscription\r\n */\r\nexport function restartSomeUserSubscriptions(userIDs: string[]) {\r\n  userIDs.forEach((userID) =>\r\n    backgroundPromise(publishPubSubEvent('restart-subscription', { userID })),\r\n  );\r\n}\r\n\r\n/**\r\n * Use this if you want to this specific subscription to restart if the pub\r\n * sub event 'restart-subscription' is triggered. Use restartSomeUserSubscriptions\r\n * to publish the event. If you are using a liveQuery, use liveQueryWithRestartEvent.\r\n */\r\nexport function withRestartEvent<T extends PubSubEventNameExRestart>({\r\n  events,\r\n  userID,\r\n  subscriptionName,\r\n}: {\r\n  events: Array<PubSubAsyncIteratorArg<T>>;\r\n  userID: string;\r\n  subscriptionName: string;\r\n}): ResolverFn<PubSubEvent<T>> {\r\n  return withFilter(\r\n    () => {\r\n      const restartEvent: PubSubAsyncIteratorArg<'restart-subscription'> = [\r\n        'restart-subscription',\r\n        { userID },\r\n      ];\r\n\r\n      const eventsIncRestart: Array<\r\n        PubSubAsyncIteratorArg<T | 'restart-subscription'>\r\n      > = [...events, restartEvent];\r\n      return pubSubAsyncIterator(...eventsIncRestart);\r\n    },\r\n    (event) => {\r\n      maybeRestartSubscription(event, subscriptionName);\r\n      return true;\r\n    },\r\n  );\r\n}\r\n\r\ntype PubSubEventNameExRestart = Exclude<\r\n  PubSubEventName,\r\n  'restart-subscription'\r\n>;\r\n\r\n/**\r\n * Use this if you want to this specific subscription to restart if the pub\r\n * sub event 'restart-subscription' is triggered in a liveQuery. Use restartSomeUserSubscriptions\r\n * to publish the event.\r\n */\r\nexport async function liveQueryWithRestartEvent<\r\n  T extends PubSubEventNameExRestart,\r\n  S,\r\n>({\r\n  events,\r\n  initialData,\r\n  eventData,\r\n  userID,\r\n  subscriptionName,\r\n}: {\r\n  events: Array<PubSubAsyncIteratorArg<T>>;\r\n  initialData: () => S | Promise<S>;\r\n  eventData: (event: PubSubEvent<T>) => S | NoValue | Promise<S | NoValue>;\r\n  userID: string;\r\n  subscriptionName: string;\r\n}) {\r\n  return await liveQuery<T | 'restart-subscription', S>(\r\n    [...events, ['restart-subscription', { userID }]],\r\n    initialData,\r\n    (event) => {\r\n      maybeRestartSubscription(event, subscriptionName);\r\n      return eventData(event);\r\n    },\r\n  );\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  createPlatformOrganization,\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n  updatePlatformOrganizationMembers,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport {\r\n  getSchemaDescription,\r\n  validate,\r\n} from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { restartSomeUserSubscriptions } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\n\r\nasync function updateOrganizationHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.orgID;\r\n\r\n  const { isCreated } = await updateOrganization(\r\n    platformApplicationID,\r\n    externalID,\r\n    req.body,\r\n  );\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully ${\r\n      isCreated ? 'created' : 'updated'\r\n    } group ${externalID}`,\r\n  });\r\n}\r\n\r\nexport async function updateOrganization(\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  data: any,\r\n) {\r\n  validateExternalID(externalID, 'orgID');\r\n  const application = await ApplicationEntity.findByPk(platformApplicationID);\r\n\r\n  const { name, status, members, metadata, ...rest } =\r\n    validate.UpdatePlatformGroupVariables(data);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  let addedMembers: UUID[] = [];\r\n  let deletedMembers: UUID[] = [];\r\n  let newOrg: OrgEntity;\r\n\r\n  if (org) {\r\n    await getSequelize().transaction(async (transaction) => {\r\n      await OrgEntity.update(\r\n        { name, state: status === 'deleted' ? 'inactive' : 'active', metadata },\r\n        {\r\n          where: {\r\n            externalID,\r\n            externalProvider: AuthProviderType.PLATFORM,\r\n            platformApplicationID,\r\n          },\r\n          transaction,\r\n        },\r\n      );\r\n\r\n      if (members) {\r\n        const { added, deleted } = await updatePlatformOrganizationMembers(\r\n          org,\r\n          members,\r\n          transaction,\r\n        );\r\n        addedMembers = added;\r\n        deletedMembers = deleted;\r\n      }\r\n      if (await application?.isSupportChatEnabled()) {\r\n        await OrgMembersEntity.upsert(\r\n          {\r\n            userID: application!.supportBotID!,\r\n            orgID: org.id,\r\n          },\r\n          { transaction },\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    if (!name) {\r\n      throw new ApiCallerError('missing_field', {\r\n        message:\r\n          'Invalid UpdatePlatformGroupVariables:\\n' +\r\n          'Group does not exist, \"name\" is a required field to create a new group.' +\r\n          (getSchemaDescription('UpdatePlatformOrganizationVariables') ?? ''),\r\n      });\r\n    }\r\n    await getSequelize().transaction(async (transaction) => {\r\n      newOrg = await createPlatformOrganization(\r\n        platformApplicationID,\r\n        externalID,\r\n        name,\r\n        status,\r\n        metadata,\r\n        transaction,\r\n      );\r\n\r\n      if (members) {\r\n        const { added } = await updatePlatformOrganizationMembers(\r\n          newOrg,\r\n          members,\r\n          transaction,\r\n        );\r\n        addedMembers = added;\r\n      }\r\n\r\n      if (await application?.isSupportChatEnabled()) {\r\n        await OrgMembersEntity.create(\r\n          {\r\n            userID: application!.supportBotID!,\r\n            orgID: newOrg.id,\r\n          },\r\n          { transaction },\r\n        );\r\n      }\r\n      const orgsCount = await OrgEntity.count({\r\n        where: { platformApplicationID },\r\n      });\r\n      if (orgsCount === 0) {\r\n        transaction.afterCommit(async () => {\r\n          await publishPubSubEvent('console-getting-started-updated', {\r\n            applicationID: platformApplicationID,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // TODO: temporary: org causing load issues\r\n  if (org?.id !== 'ac2ba2c5-f4ad-425b-ab53-2a0970c0b5cc') {\r\n    restartSomeUserSubscriptions([...addedMembers, ...deletedMembers]);\r\n  }\r\n\r\n  addedMembers.forEach((userID) => {\r\n    backgroundPromise(publishPubSubEvent('user-identity', { userID }));\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'org-member-added',\r\n        { orgID: org?.id ?? newOrg.id },\r\n        { userID },\r\n      ),\r\n    );\r\n  });\r\n  deletedMembers.forEach((userID) => {\r\n    backgroundPromise(publishPubSubEvent('user-identity', { userID }));\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'org-member-removed',\r\n        { orgID: org?.id ?? newOrg.id },\r\n        { userID },\r\n      ),\r\n    );\r\n  });\r\n\r\n  return { isCreated: !org };\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateOrganizationHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { QueryTypes } from 'sequelize';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { restartSomeUserSubscriptions } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport { asyncLocalStorage } from 'server/src/logging/performance.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\nfunction validateAllContained(ids: string[], users: UserEntity[]) {\r\n  const toFind = new Set<string>(ids);\r\n  for (const p of users) {\r\n    toFind.delete(p.externalID);\r\n  }\r\n  if (toFind.size !== 0) {\r\n    throw new ApiCallerError('user_not_found', {\r\n      // Todo - this doesn't make sense in all the contexts this fn is called\r\n      message: `Platform user ${\r\n        toFind.values().next().value\r\n      } not found. If you wanted to create a new user, add user_details to your request. Refer to https://docs.cord.com/reference/authentication#JSON-user-details for details.`,\r\n    });\r\n  }\r\n}\r\n\r\nasync function updateOrganizationMembersHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.orgID;\r\n\r\n  await updateOrganizationMembers(platformApplicationID, externalID, req.body);\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: '\u2705 You successfully updated group members',\r\n  });\r\n}\r\n\r\nexport async function updateOrganizationMembers(\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  data: any,\r\n) {\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!org) {\r\n    // Todo - this error doesn't make sense in the context of all the places this fn is used\r\n    throw new ApiCallerError('group_not_found', {\r\n      message: `Platform group ${externalID} not found. If you wanted to create a new group, add group_details to your request. Refer to https://docs.cord.com/reference/authentication#JSON-group-details for details.`,\r\n    });\r\n  }\r\n\r\n  const {\r\n    add: origAdd,\r\n    remove: origRemove,\r\n    ...rest\r\n  } = validate.UpdatePlatformGroupMembersVariables(data);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const add = origAdd?.map((member) => member.toString()) ?? []; // Incase numbers exist\r\n  const remove = origRemove?.map((member) => member.toString()) ?? []; // Incase numbers exist\r\n\r\n  if (add.some((x) => remove.includes(x))) {\r\n    const duplicated = add.find((x) => remove.includes(x));\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Platform member ${duplicated} both added and removed.`,\r\n    });\r\n  }\r\n\r\n  const [added, removed] = await getSequelize().transaction(\r\n    async (transaction) => {\r\n      const users = await UserEntity.findAll({\r\n        where: {\r\n          externalID: [...add, ...remove],\r\n          platformApplicationID: org.platformApplicationID,\r\n          externalProvider: AuthProviderType.PLATFORM,\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      validateAllContained(add, users);\r\n      validateAllContained(remove, users);\r\n\r\n      const usersToAdd = users.filter((user) => add.includes(user.externalID));\r\n      const usersToDelete = users.filter((user) =>\r\n        remove.includes(user.externalID),\r\n      );\r\n\r\n      const [insertResult, deleteResult] = await Promise.all([\r\n        usersToAdd.length > 0\r\n          ? // NOTE(flooey): We can't really use bind variables here, which would\r\n            // be safer, but these are internal IDs, so they are always UUIDs and\r\n            // can't cause SQL injection problems\r\n            getSequelize().query(\r\n              `\r\n              INSERT INTO org_members VALUES ${usersToAdd\r\n                .map((user) => `('${user.id}', '${org.id}')`)\r\n                .join(',')}\r\n              ON CONFLICT DO NOTHING\r\n              RETURNING \"userID\"\r\n            `,\r\n              { transaction, type: QueryTypes.RAW },\r\n            )\r\n          : Promise.resolve([[], 0]),\r\n        usersToDelete.length > 0\r\n          ? getSequelize().query(\r\n              `\r\n          DELETE FROM org_members\r\n            WHERE \"orgID\" = $1\r\n              AND \"userID\" = ANY($2)\r\n            RETURNING \"userID\"\r\n        `,\r\n              {\r\n                transaction,\r\n                type: QueryTypes.RAW,\r\n                bind: [org.id, usersToDelete.map((user) => user.id)],\r\n              },\r\n            )\r\n          : Promise.resolve([[], 0]),\r\n      ]);\r\n      const actuallyAdded = insertResult[0] as { userID: UUID }[];\r\n      const actuallyRemoved = deleteResult[0] as { userID: UUID }[];\r\n      return [\r\n        actuallyAdded.map((u) => u.userID),\r\n        actuallyRemoved.map((u) => u.userID),\r\n      ];\r\n    },\r\n  );\r\n\r\n  const operationID = asyncLocalStorage?.getStore()?.operationID;\r\n\r\n  anonymousLogger().debug('UpdatePlatformOrganizationMembers stats', {\r\n    appID: platformApplicationID,\r\n    added: added.length,\r\n    removed: removed.length,\r\n    ...(operationID && { operationID }),\r\n  });\r\n\r\n  restartSomeUserSubscriptions([...added, ...removed]);\r\n\r\n  const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n\r\n  // TODO: Temporary load alleviation - Customer '43fdeae8-4b68-4e36-a58d-56085f8e2497'\r\n  // is sending very large updates that overwhelm our pubsub\r\n  if (app?.customerID !== '43fdeae8-4b68-4e36-a58d-56085f8e2497') {\r\n    added.map((userID) => {\r\n      backgroundPromise(publishPubSubEvent('user-identity', { userID }));\r\n      backgroundPromise(\r\n        publishPubSubEvent('org-member-added', { orgID: org.id }, { userID }),\r\n      );\r\n    });\r\n    removed.map((userID) => {\r\n      backgroundPromise(publishPubSubEvent('user-identity', { userID }));\r\n      backgroundPromise(\r\n        publishPubSubEvent('org-member-removed', { orgID: org.id }, { userID }),\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateOrganizationMembersHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport type { WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport {\r\n  validateFilter,\r\n  validateLimit,\r\n  validatePaginationToken,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\nimport type { ServerListUser, ServerListUsers } from '@cord-sdk/types';\r\n\r\nconst DEFAULT_LIMIT = 1000;\r\ninterface PaginationToken {\r\n  externalID: string;\r\n}\r\n\r\nfunction encodeToken(token: PaginationToken): string {\r\n  return btoa(JSON.stringify(token));\r\n}\r\n\r\nasync function listPlatformUsersHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const { metadata } = validateFilter(req.query, {\r\n    location: false,\r\n    metadata: true,\r\n    firstMessageTimestamp: false,\r\n    mostRecentMessageTimestamp: false,\r\n    groupID: false,\r\n    authorID: false,\r\n    resolvedStatus: false,\r\n    viewer: false,\r\n  });\r\n\r\n  const where: WhereOptions<UserEntity> = {\r\n    platformApplicationID,\r\n    externalProvider: AuthProviderType.PLATFORM,\r\n    ...(metadata && {\r\n      metadata: {\r\n        [Op.contains]: metadata,\r\n      },\r\n    }),\r\n  };\r\n\r\n  const { token, limit } = req.query;\r\n\r\n  const decodedToken: PaginationToken | undefined = validatePaginationToken({\r\n    token,\r\n    endpoint: 'users',\r\n  });\r\n\r\n  const parsedLimit = validateLimit(limit, DEFAULT_LIMIT);\r\n\r\n  const whereWithPagination: WhereOptions<UserEntity> = {\r\n    ...where,\r\n    ...(decodedToken && { externalID: { [Op.gt]: decodedToken.externalID } }),\r\n  };\r\n\r\n  const [users, usersCount, usersRemainingCount] = await Promise.all([\r\n    UserEntity.findAll({\r\n      where: whereWithPagination,\r\n      order: [['externalID', 'ASC']],\r\n      limit: parsedLimit,\r\n    }),\r\n    UserEntity.count({\r\n      where,\r\n    }),\r\n    UserEntity.count({\r\n      where: whereWithPagination,\r\n    }),\r\n  ]);\r\n\r\n  const lastUser = users.length === 0 ? null : users[users.length - 1];\r\n  const remaining = Math.max(usersRemainingCount - users.length, 0);\r\n\r\n  const returnToken =\r\n    remaining > 0 && lastUser\r\n      ? encodeToken({\r\n          externalID: lastUser.externalID,\r\n        })\r\n      : null;\r\n\r\n  const result: ServerListUsers = {\r\n    users: users.map(\r\n      (user): ServerListUser => ({\r\n        id: user.externalID,\r\n        email: user.email,\r\n        status: user.state,\r\n        name: user.name,\r\n        shortName: user.screenName,\r\n        short_name: user.screenName,\r\n        first_name: null,\r\n        last_name: null,\r\n        profilePictureURL: user.profilePictureURL,\r\n        profile_picture_url: user.profilePictureURL,\r\n        metadata: user.metadata,\r\n        createdTimestamp: user.createdTimestamp,\r\n      }),\r\n    ),\r\n    pagination: {\r\n      token: returnToken,\r\n      total: usersCount,\r\n    },\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listPlatformUsersHandler);\r\n", "import type { Request } from 'express';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport {\r\n  getLocationFilter,\r\n  getViewerThreadFilter,\r\n  isLocation,\r\n  isValidMetadata,\r\n} from 'common/types/index.ts';\r\nimport type {\r\n  FilterParameters,\r\n  Location,\r\n  LocationFilterOptions,\r\n  TimestampRange,\r\n  ViewerThreadStatus,\r\n} from '@cord-sdk/types';\r\nimport { combine, isDefined } from 'common/util/index.ts';\r\nimport type { ThreadSortInput } from 'server/src/schema/operations.ts';\r\nimport {\r\n  DEFAULT_THREAD_INITIAL_PAGE_SIZE,\r\n  THREAD_INITIAL_PAGE_SIZE_LIMIT,\r\n} from 'common/const/Api.ts';\r\n\r\ntype AcceptFilter = {\r\n  [k in keyof Omit<FilterParameters, 'organizationID'>]-?: boolean;\r\n};\r\n\r\ntype FilterReturn = Omit<\r\n  FilterParameters,\r\n  'location' | 'viewer' | 'organizationID'\r\n> & {\r\n  location?: LocationFilterOptions;\r\n  viewer?: ViewerThreadStatus[];\r\n};\r\n\r\nexport function validateFilter(\r\n  query: Request['query'],\r\n  accept: AcceptFilter,\r\n): FilterReturn {\r\n  const { filter } = query;\r\n  const result: FilterReturn = {};\r\n  if (filter) {\r\n    let filterJson: FilterParameters = {};\r\n    try {\r\n      filterJson = JSON.parse(filter as string);\r\n    } catch (e) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: 'The filter object must be a valid JSON object.',\r\n      });\r\n    }\r\n    if (typeof filterJson !== 'object') {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: 'The filter object must be a valid JSON object.',\r\n      });\r\n    }\r\n    const {\r\n      location,\r\n      metadata,\r\n      authorID,\r\n      firstMessageTimestamp,\r\n      mostRecentMessageTimestamp,\r\n      groupID,\r\n      organizationID,\r\n      resolvedStatus,\r\n      viewer,\r\n      ...otherFilters\r\n    } = filterJson;\r\n    if (Object.keys(otherFilters).length > 0) {\r\n      const someBadField = Object.keys(otherFilters)[0];\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `The filter object does not support \"${someBadField}\" as a field.`,\r\n      });\r\n    }\r\n    if (location) {\r\n      if (!accept.location) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"location\" as a field.`,\r\n        });\r\n      }\r\n      const parsedLocation = getLocationFilter(location);\r\n      if (!parsedLocation) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"location\" must be valid JSON. See https://docs.cord.com/reference/location for more information.`,\r\n        });\r\n      }\r\n      result['location'] = parsedLocation;\r\n    }\r\n    if (metadata) {\r\n      if (!accept.metadata) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"metadata\" as a field.`,\r\n        });\r\n      }\r\n      if (!isValidMetadata(metadata)) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"metadata\" must be valid JSON.`,\r\n        });\r\n      }\r\n      result['metadata'] = metadata;\r\n    }\r\n    if (firstMessageTimestamp) {\r\n      if (!accept.firstMessageTimestamp) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"firstMessageTimestamp\" as a field.`,\r\n        });\r\n      }\r\n      const validatedTimestampRange = validateTimestampRange(\r\n        firstMessageTimestamp,\r\n        'firstMessageTimestamp',\r\n      );\r\n      result['firstMessageTimestamp'] = validatedTimestampRange;\r\n    }\r\n\r\n    if (mostRecentMessageTimestamp) {\r\n      if (!accept.mostRecentMessageTimestamp) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"mostRecentMessageTimestamp\" as a field.`,\r\n        });\r\n      }\r\n      const validatedTimestampRange = validateTimestampRange(\r\n        mostRecentMessageTimestamp,\r\n        'mostRecentMessageTimestamp',\r\n      );\r\n      result['mostRecentMessageTimestamp'] = validatedTimestampRange;\r\n    }\r\n    if (organizationID) {\r\n      if (typeof organizationID !== 'string') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"groupID\" is not valid`,\r\n        });\r\n      }\r\n\r\n      result['groupID'] = organizationID; // note - returned as groupID\r\n    }\r\n    if (groupID) {\r\n      if (typeof groupID !== 'string') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"groupID\" is not valid`,\r\n        });\r\n      }\r\n      result['groupID'] = groupID;\r\n    }\r\n    if (authorID) {\r\n      if (!accept.authorID) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"authorID\" as a field.`,\r\n        });\r\n      }\r\n      if (typeof authorID !== 'string') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"authorID\" is not valid.`,\r\n        });\r\n      }\r\n      result['authorID'] = authorID;\r\n    }\r\n    if (resolvedStatus) {\r\n      if (!accept.resolvedStatus) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"resolvedStatus\" as a field.`,\r\n        });\r\n      }\r\n      if (typeof resolvedStatus !== 'string') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"resolvedStatus\" must be set to \"any\", \"resolved\", or \"unresolved\"`,\r\n        });\r\n      }\r\n      if (\r\n        resolvedStatus !== 'any' &&\r\n        resolvedStatus !== 'resolved' &&\r\n        resolvedStatus !== 'unresolved'\r\n      ) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"resolvedStatus\" must be set to \"any\", \"resolved\", or \"unresolved\"`,\r\n        });\r\n      }\r\n      result['resolvedStatus'] = resolvedStatus;\r\n    }\r\n    if (viewer) {\r\n      if (!accept.viewer) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `The filter object does not support \"viewer\" as a field.`,\r\n        });\r\n      }\r\n      if (typeof viewer !== 'string' && !Array.isArray(viewer)) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"viewer\" must be one or more of \"subscribed\" or \"mentioned\"`,\r\n        });\r\n      }\r\n      const parsedViewer = getViewerThreadFilter(viewer);\r\n      if (parsedViewer.some((v) => v !== 'subscribed' && v !== 'mentioned')) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: `\"viewer\" must be one or more of \"subscribed\" or \"mentioned\"`,\r\n        });\r\n      }\r\n      result['viewer'] = parsedViewer;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction validateTimestampRange(obj: any, field: string) {\r\n  if (!obj || typeof obj !== 'object' || Array.isArray(obj)) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be valid JSON object.`,\r\n    });\r\n  }\r\n  const { from, to, ...otherFields } = obj;\r\n  const timerangeFields = ['from', 'to'];\r\n  if (Object.keys(otherFields).length > 0) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" object must only contain the fields: ${combine(\r\n        'and',\r\n        timerangeFields,\r\n      )}}`,\r\n    });\r\n  }\r\n  if (from === undefined && to === undefined) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" object must contain at least one of the ${\r\n        timerangeFields.length\r\n      } optional fields: ${combine('or', timerangeFields)}`,\r\n    });\r\n  }\r\n\r\n  const validatedObject: TimestampRange = {};\r\n  for (const [property, value] of Object.entries(obj)) {\r\n    // check if value is type Date\r\n    if (!value || (typeof value !== 'string' && typeof value !== 'number')) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"${property}\" value on \"${field}\" must be a valid date`,\r\n      });\r\n    }\r\n\r\n    const dateValue = new Date(value);\r\n    if (!isNaN(dateValue.getTime())) {\r\n      validatedObject[property as keyof TimestampRange] = dateValue;\r\n    } else {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"${property}\" value on \"${field}\" must be a valid date`,\r\n      });\r\n    }\r\n  }\r\n  return validatedObject;\r\n}\r\n\r\nexport function validatePaginationToken({\r\n  token,\r\n  endpoint,\r\n}: {\r\n  token: any;\r\n  endpoint: string;\r\n}) {\r\n  if (!token) {\r\n    return;\r\n  }\r\n  if (typeof token !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Pagination token should be of type string.`,\r\n    });\r\n  }\r\n  let decodedToken;\r\n\r\n  try {\r\n    decodedToken = token && JSON.parse(atob(token));\r\n  } catch (error) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Pagination token is not valid`,\r\n    });\r\n  }\r\n\r\n  if (\r\n    !decodedToken ||\r\n    !decodedToken.externalID ||\r\n    decodedToken.externalID.length === 0 ||\r\n    (endpoint === 'messages' &&\r\n      (!decodedToken.createdAtWithMicros ||\r\n        decodedToken.createdAtWithMicros.length === 0)) ||\r\n    (endpoint === 'threads' &&\r\n      (!decodedToken.nextCursorTimestamp ||\r\n        decodedToken.nextCursorTimestamp.length === 0)) ||\r\n    (endpoint === 'org-members' &&\r\n      (!decodedToken.userID || decodedToken.userID.length === 0))\r\n  ) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Pagination token is not valid`,\r\n    });\r\n  }\r\n\r\n  return decodedToken;\r\n}\r\n\r\nexport function validateSort(query: Request['query']): ThreadSortInput {\r\n  const result: ThreadSortInput = {\r\n    sortBy: 'first_message_timestamp',\r\n    sortDirection: 'descending',\r\n  };\r\n  if (query.sortBy) {\r\n    if (\r\n      query.sortBy !== 'first_message_timestamp' &&\r\n      query.sortBy !== 'most_recent_message_timestamp'\r\n    ) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"sortBy\" must be set to \"first_message_timestamp\" or \"most_recent_message_timestamp\"`,\r\n      });\r\n    }\r\n    result.sortBy = query.sortBy;\r\n  }\r\n  if (query.sortDirection) {\r\n    if (\r\n      query.sortDirection !== 'ascending' &&\r\n      query.sortDirection !== 'descending'\r\n    ) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"sortDirection\" must be set to \"ascending\" or \"descending\"`,\r\n      });\r\n    }\r\n    result.sortDirection = query.sortDirection;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function validateInitialFetchCount(query: Request['query']): number {\r\n  if (query.initialFetchCount) {\r\n    if (typeof query.initialFetchCount !== 'string') {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"initialFetchCount\" must be a number`,\r\n      });\r\n    }\r\n    const amt = parseInt(query.initialFetchCount, 10);\r\n    if (Number.isNaN(amt)) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `\"initialFetchCount\" must be a number`,\r\n      });\r\n    }\r\n    return Math.min(amt, THREAD_INITIAL_PAGE_SIZE_LIMIT);\r\n  }\r\n  return DEFAULT_THREAD_INITIAL_PAGE_SIZE;\r\n}\r\n\r\nexport function validateBooleanValue<T>(\r\n  query: Request['query'],\r\n  field: string,\r\n  def: T,\r\n): boolean | T {\r\n  let value = query[field];\r\n  if (!isDefined(value)) {\r\n    return def;\r\n  }\r\n  if (typeof value !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be a boolean`,\r\n    });\r\n  }\r\n  value = value.toLowerCase();\r\n  if (value !== 'true' && value !== 'false') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be a boolean`,\r\n    });\r\n  }\r\n  return value === 'true';\r\n}\r\n\r\nexport function validateLocationValue(\r\n  query: Request['query'],\r\n  field: string,\r\n): Location | undefined {\r\n  const value = query[field];\r\n  if (!isDefined(value)) {\r\n    return undefined;\r\n  }\r\n  if (typeof value !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be a location`,\r\n    });\r\n  }\r\n  let decoded = {};\r\n  try {\r\n    decoded = JSON.parse(value);\r\n  } catch (e) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be a location`,\r\n    });\r\n  }\r\n  if (!isLocation(decoded)) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `\"${field}\" must be a location`,\r\n    });\r\n  }\r\n  return decoded;\r\n}\r\n\r\nexport function validateLimit(limit: unknown, defaultLimit: number): number {\r\n  if (!limit) {\r\n    return defaultLimit;\r\n  }\r\n\r\n  if (typeof limit !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Limit must be a number.`,\r\n    });\r\n  }\r\n\r\n  const parsedLimit = Number.parseInt(limit);\r\n  if (isNaN(parsedLimit)) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `Limit must be a number.`,\r\n    });\r\n  }\r\n\r\n  return parsedLimit;\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport type { ServerGetUser } from '@cord-sdk/types';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\n\r\nasync function findAllOrgMemberships(userID: string) {\r\n  const orgMemberships = await OrgMembersEntity.findAll({\r\n    where: { userID },\r\n  });\r\n  const orgIds = orgMemberships.map((org) => org.orgID);\r\n  return await OrgEntity.findAll({\r\n    where: { id: orgIds, state: 'active' },\r\n  });\r\n}\r\n\r\nasync function findAllOrgsUserHasLinkedToASlackUser(\r\n  userID: string,\r\n  allUserOrgs: OrgEntity[],\r\n) {\r\n  const externalOrgIDByOrgID: Record<string, string> = {};\r\n  for (const { id, externalID } of allUserOrgs) {\r\n    externalOrgIDByOrgID[id] = externalID;\r\n  }\r\n\r\n  const linkedUsers = await LinkedUsersEntity.findAll({\r\n    where: {\r\n      sourceUserID: userID,\r\n      sourceOrgID: Object.keys(externalOrgIDByOrgID),\r\n    },\r\n  });\r\n\r\n  return linkedUsers.map((lu) => externalOrgIDByOrgID[lu.sourceOrgID]);\r\n}\r\n\r\nasync function getPlatformUserHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.userID;\r\n  if (!externalID) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  if (!isValidExternalID(externalID)) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      platformApplicationID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n    },\r\n  });\r\n\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found', { code: 404 });\r\n  }\r\n\r\n  const allOrgs = await findAllOrgMemberships(user.id);\r\n  const orgExternalIds = allOrgs.map((org) => org.externalID);\r\n  const connectedSlackOrgIDs = await findAllOrgsUserHasLinkedToASlackUser(\r\n    user.id,\r\n    allOrgs,\r\n  );\r\n\r\n  const result: ServerGetUser = {\r\n    id: user.externalID,\r\n    email: user.email,\r\n    status: user.state,\r\n    name: user.name,\r\n    shortName: user.screenName,\r\n    short_name: user.screenName,\r\n    first_name: null,\r\n    last_name: null,\r\n    profilePictureURL: user.profilePictureURL,\r\n    profile_picture_url: user.profilePictureURL,\r\n    organizations: orgExternalIds,\r\n    groups: orgExternalIds,\r\n    metadata: user.metadata,\r\n    createdTimestamp: user.createdAt,\r\n    groupIDsWithLinkedSlackProfile: connectedSlackOrgIDs,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getPlatformUserHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  createPlatformUser,\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nfunction validateCreateUserInput(data: unknown) {\r\n  const validatedInput = validate.CreatePlatformUserVariables(data);\r\n  validateExternalID(validatedInput.id, 'id');\r\n  return validatedInput;\r\n}\r\n\r\nasync function createUserHandler(req: Request, res: Response) {\r\n  // assumes there is middle ware for handling the validation of the access token,\r\n  // if its validated, the app ID will be passed forward\r\n\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  deprecated('api: POST /v1/users', platformApplicationID);\r\n\r\n  const {\r\n    id: externalID, // Can be type string or number\r\n    name,\r\n    short_name,\r\n    shortName,\r\n    email,\r\n    status,\r\n    profile_picture_url,\r\n    profilePictureURL,\r\n    metadata,\r\n    first_name,\r\n    last_name,\r\n    ...rest\r\n  } = validateCreateUserInput(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (short_name) {\r\n    deprecated(\r\n      'snake:CreatePlatformUserHandler:short_name',\r\n      platformApplicationID,\r\n    );\r\n  }\r\n\r\n  if (profile_picture_url) {\r\n    deprecated(\r\n      'snake:CreatePlatformUserHandler:profile_picture_url',\r\n      platformApplicationID,\r\n    );\r\n  }\r\n\r\n  if (first_name) {\r\n    deprecated('CreatePlatformUserHandler:first_name', platformApplicationID);\r\n  }\r\n  if (last_name) {\r\n    deprecated('CreatePlatformUserHandler:last_name', platformApplicationID);\r\n  }\r\n\r\n  const newUser = await createPlatformUser(\r\n    null,\r\n    platformApplicationID,\r\n    externalID.toString(), // Incase it is a number\r\n    email,\r\n    name,\r\n    shortName ?? short_name,\r\n    profilePictureURL ?? profile_picture_url,\r\n    status,\r\n    metadata,\r\n  );\r\n\r\n  res.status(201).json({\r\n    success: true,\r\n    message: `\u2705 You successfully created user ${newUser.externalID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createUserHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  createPlatformUser,\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { AuthProviderType, Viewer } from 'server/src/auth/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  publishPubSubEvent,\r\n  publishUserIdentityUpdate,\r\n} from 'server/src/pubsub/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport {\r\n  removeEmptyStringEmailIfExists,\r\n  validate,\r\n} from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { UserMutator } from 'server/src/entity/user/UserMutator.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nasync function updateUserHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.userID;\r\n\r\n  const result = await updateUser(platformApplicationID, externalID, req.body);\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully ${\r\n      result.isCreated ? 'created' : 'updated'\r\n    } user ${externalID}`,\r\n  });\r\n}\r\n\r\nexport async function updateUser(\r\n  platformApplicationID: UUID,\r\n  externalID: string,\r\n  data: any,\r\n): Promise<{ isCreated: boolean }> {\r\n  validateExternalID(externalID, 'userID');\r\n  const result = await getSequelize().transaction(async (transaction) => {\r\n    const {\r\n      name,\r\n      shortName,\r\n      short_name,\r\n      email,\r\n      profilePictureURL,\r\n      profile_picture_url,\r\n      status,\r\n      metadata,\r\n      first_name,\r\n      last_name,\r\n      addGroups,\r\n      removeGroups,\r\n      ...rest\r\n    } = removeEmptyStringEmailIfExists(\r\n      validate.UpdatePlatformUserVariables(data),\r\n    );\r\n    // Check that all properties are destructured\r\n    const _: Record<string, never> = rest;\r\n\r\n    if (profile_picture_url) {\r\n      deprecated(\r\n        'snake:UpdatePlatformUserHandler:profile_picture_url',\r\n        platformApplicationID,\r\n      );\r\n    }\r\n    if (first_name) {\r\n      deprecated('UpdatePlatformUserHandler:first_name', platformApplicationID);\r\n    }\r\n    if (last_name) {\r\n      deprecated('UpdatePlatformUserHandler:last_name', platformApplicationID);\r\n    }\r\n\r\n    let user = await UserEntity.findOne({\r\n      where: {\r\n        externalID,\r\n        platformApplicationID,\r\n        externalProvider: AuthProviderType.PLATFORM,\r\n      },\r\n      transaction,\r\n    });\r\n    const isCreated = !user;\r\n\r\n    if (user) {\r\n      const didUpdate = await new UserMutator(\r\n        Viewer.createServiceViewer(),\r\n        null,\r\n      ).updateUser(\r\n        user,\r\n        {\r\n          name: name ?? undefined,\r\n          email: email ?? undefined,\r\n          screenName: shortName ?? short_name ?? undefined,\r\n          profilePictureURL: profilePictureURL ?? profile_picture_url,\r\n          state: status,\r\n          metadata: metadata ?? undefined,\r\n        },\r\n        transaction,\r\n      );\r\n\r\n      if (didUpdate) {\r\n        transaction.afterCommit(async () => {\r\n          await publishUserIdentityUpdate({\r\n            userID: user!.id,\r\n            platformApplicationID,\r\n          });\r\n        });\r\n      }\r\n    } else {\r\n      user = await createPlatformUser(\r\n        null,\r\n        platformApplicationID,\r\n        externalID,\r\n        email,\r\n        name,\r\n        shortName ?? short_name,\r\n        profilePictureURL ?? profile_picture_url,\r\n        status,\r\n        metadata,\r\n        transaction,\r\n      );\r\n    }\r\n\r\n    if (addGroups?.length || removeGroups?.length) {\r\n      const u = user; // Help TS know that this can't change anymore\r\n      const add = addGroups ?? [];\r\n      const remove = removeGroups ?? [];\r\n      const addSet = new Set(add);\r\n      const removeSet = new Set(remove);\r\n      if (remove.some((g) => addSet.has(g))) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: 'Adding and removing the same group is invalid.',\r\n        });\r\n      }\r\n      const [addOrgs, removeOrgs] = await Promise.all([\r\n        OrgEntity.findAll({\r\n          where: { platformApplicationID, externalID: add },\r\n          transaction,\r\n        }),\r\n        OrgEntity.findAll({\r\n          where: { platformApplicationID, externalID: remove },\r\n          transaction,\r\n        }),\r\n      ]);\r\n      if (addSet.size !== addOrgs.length) {\r\n        // Some to-be-added group wasn't found\r\n        for (const org of addOrgs) {\r\n          addSet.delete(org.externalID);\r\n        }\r\n        throw new ApiCallerError('group_not_found', {\r\n          message: `Group ${addSet.values().next().value} not found.`,\r\n        });\r\n      }\r\n      if (removeSet.size !== removeOrgs.length) {\r\n        // Some to-be-removed group wasn't found\r\n        for (const org of removeOrgs) {\r\n          removeSet.delete(org.externalID);\r\n        }\r\n        throw new ApiCallerError('group_not_found', {\r\n          message: `Group ${removeSet.values().next().value} not found.`,\r\n        });\r\n      }\r\n      await Promise.all([\r\n        OrgMembersEntity.bulkCreate(\r\n          addOrgs.map((org) => ({\r\n            userID: u.id,\r\n            orgID: org.id,\r\n          })),\r\n          {\r\n            ignoreDuplicates: true,\r\n            transaction,\r\n          },\r\n        ),\r\n        OrgMembersEntity.destroy({\r\n          where: {\r\n            userID: u.id,\r\n            orgID: removeOrgs.map((org) => org.id),\r\n          },\r\n          transaction,\r\n        }),\r\n      ]);\r\n    }\r\n\r\n    if (isCreated) {\r\n      const usersCount = await UserEntity.count({\r\n        where: { platformApplicationID },\r\n      });\r\n\r\n      if (usersCount === 0) {\r\n        transaction.afterCommit(async () => {\r\n          await publishPubSubEvent('console-getting-started-updated', {\r\n            applicationID: platformApplicationID,\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    return { isCreated };\r\n  });\r\n  return result;\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateUserHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { Op, Sequelize } from 'sequelize';\r\n\r\nimport { AuthProviderType, Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport type { ElementOf, UUID } from 'common/types/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { combine, isDefined } from 'common/util/index.ts';\r\nimport { pluralize } from '@cord-sdk/react/common/util.ts';\r\nimport {\r\n  removeEmptyStringEmailIfExists,\r\n  validate,\r\n} from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { UserMutator } from 'server/src/entity/user/UserMutator.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nasync function batchHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const {\r\n    groups,\r\n    organizations: organizationsInput,\r\n    users,\r\n    ...rest\r\n  } = validate.BatchAPIVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const organizations = groups ?? organizationsInput;\r\n\r\n  if (users?.some((u) => u.first_name)) {\r\n    deprecated('PlatformBatchHandler:first_name', platformApplicationID);\r\n  }\r\n  if (users?.some((u) => u.last_name)) {\r\n    deprecated('PlatformBatchHandler:last_name', platformApplicationID);\r\n  }\r\n  if (organizationsInput) {\r\n    deprecated('PlatformBatchHandler:organizations', platformApplicationID);\r\n  }\r\n\r\n  const externalUserIndex = new Map<string, string>();\r\n  await getSequelize().transaction(async (transaction) => {\r\n    if (users) {\r\n      const usersIndex = new Map<string, ElementOf<typeof users>>();\r\n      const userIDs: string[] = [];\r\n\r\n      for (const u of users) {\r\n        usersIndex.set(u.id.toString(), u);\r\n        userIDs.push(u.id.toString());\r\n      }\r\n\r\n      const existingUsers = await UserEntity.findAll({\r\n        where: {\r\n          externalID: userIDs,\r\n          externalProvider: AuthProviderType.PLATFORM,\r\n          platformApplicationID,\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      const existingUserIDs = new Set<string>();\r\n\r\n      for (const userEntity of existingUsers) {\r\n        const data = userEntity.externalID\r\n          ? usersIndex.get(userEntity.externalID)\r\n          : undefined;\r\n\r\n        if (data) {\r\n          existingUserIDs.add(userEntity.externalID);\r\n          externalUserIndex.set(userEntity.externalID, userEntity.id);\r\n\r\n          const { id: _id, ...fields } = data;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          const validatedInput = removeEmptyStringEmailIfExists(\r\n            validate.UpdatePlatformUserVariables(fields),\r\n          );\r\n          const {\r\n            name,\r\n            short_name,\r\n            email,\r\n            profile_picture_url,\r\n            status,\r\n            metadata,\r\n          } = validatedInput;\r\n\r\n          await userEntity.update(\r\n            {\r\n              name,\r\n              ...(isDefined(name) &&\r\n                name !== userEntity.name && {\r\n                  nameUpdatedTimestamp: Sequelize.fn('now'),\r\n                }),\r\n              screenName: short_name,\r\n              profilePictureURL: profile_picture_url,\r\n              ...(isDefined(profile_picture_url) &&\r\n                profile_picture_url !== userEntity.profilePictureURL && {\r\n                  profilePictureURLUpdatedTimestamp: Sequelize.fn('now'),\r\n                }),\r\n              email,\r\n              state: status,\r\n              metadata: metadata ?? undefined,\r\n            },\r\n            { transaction },\r\n          );\r\n        }\r\n      }\r\n\r\n      const newUserIDs = userIDs.filter((id) => !existingUserIDs.has(id));\r\n\r\n      const newUsersInput = newUserIDs.map((id) =>\r\n        validate.CreatePlatformUserVariables(usersIndex.get(id)),\r\n      );\r\n\r\n      const userEntities = await new UserMutator(\r\n        Viewer.createServiceViewer(),\r\n        null,\r\n      ).rawBulkCreate(\r\n        newUsersInput.map(\r\n          ({ id, name, short_name, email, profile_picture_url, metadata }) => ({\r\n            name,\r\n            screenName: short_name,\r\n            nameUpdatedTimestamp: isDefined(name)\r\n              ? (Sequelize.fn('now') as any as Date)\r\n              : null,\r\n            email,\r\n            profilePictureURL: profile_picture_url,\r\n            profilePictureURLUpdatedTimestamp: isDefined(profile_picture_url)\r\n              ? (Sequelize.fn('now') as any as Date)\r\n              : null,\r\n            externalID: id.toString(),\r\n            externalProvider: AuthProviderType.PLATFORM,\r\n            platformApplicationID,\r\n            state: 'active',\r\n            metadata: metadata ?? undefined,\r\n          }),\r\n        ),\r\n        transaction,\r\n      );\r\n\r\n      for (const userEntity of userEntities) {\r\n        if (userEntity.externalID !== null) {\r\n          externalUserIndex.set(userEntity.externalID, userEntity.id);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (organizations) {\r\n      const organizationsIndex = new Map<\r\n        string,\r\n        ElementOf<typeof organizations>\r\n      >();\r\n\r\n      const organizationIDs: string[] = [];\r\n\r\n      for (const o of organizations) {\r\n        organizationsIndex.set(o.id.toString(), o);\r\n        organizationIDs.push(o.id.toString());\r\n      }\r\n\r\n      const existingOrganizations = await OrgEntity.findAll({\r\n        where: {\r\n          externalID: organizationIDs,\r\n          externalProvider: AuthProviderType.PLATFORM,\r\n          platformApplicationID,\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      const existingOrganizationIDs = new Set<string>();\r\n\r\n      await Promise.all(\r\n        existingOrganizations.map((organizationEntity) => {\r\n          const data = organizationEntity.externalID\r\n            ? organizationsIndex.get(organizationEntity.externalID)\r\n            : undefined;\r\n\r\n          if (data) {\r\n            existingOrganizationIDs.add(organizationEntity.externalID);\r\n\r\n            const { id: _id, ...fields } = data;\r\n            const { name, status, metadata } =\r\n              validate.UpdatePlatformOrganizationVariables(fields);\r\n\r\n            return organizationEntity.update(\r\n              {\r\n                name,\r\n                state: status\r\n                  ? status === 'deleted'\r\n                    ? 'inactive'\r\n                    : 'active'\r\n                  : undefined,\r\n                metadata,\r\n              },\r\n              { transaction },\r\n            );\r\n          } else {\r\n            return undefined;\r\n          }\r\n        }),\r\n      );\r\n\r\n      const application = await ApplicationEntity.findByPk(\r\n        platformApplicationID,\r\n        { transaction },\r\n      );\r\n\r\n      const newOrganizationsData = organizationIDs\r\n        .filter((id) => !existingOrganizationIDs.has(id))\r\n        .map((id) =>\r\n          validate.CreatePlatformOrganizationVariables(\r\n            organizationsIndex.get(id),\r\n          ),\r\n        )\r\n        .map((data) => ({\r\n          name: data.name,\r\n          externalID: data.id.toString(),\r\n          externalProvider: AuthProviderType.PLATFORM,\r\n          platformApplicationID,\r\n          state: 'active' as const,\r\n          metadata: data.metadata,\r\n        }));\r\n\r\n      const newlyCreatedOrgs = await OrgEntity.bulkCreate(\r\n        newOrganizationsData,\r\n        {\r\n          transaction,\r\n          updateOnDuplicate: ['name', 'state', 'externalProvider', 'metadata'],\r\n          conflictWhere: { platformApplicationID: { [Op.ne]: null } },\r\n        },\r\n      );\r\n\r\n      if (await application?.isSupportChatEnabled()) {\r\n        await OrgMembersEntity.bulkCreate(\r\n          newlyCreatedOrgs.map((newOrg) => {\r\n            return {\r\n              userID: application!.supportBotID!,\r\n              orgID: newOrg.id,\r\n            };\r\n          }),\r\n          { transaction },\r\n        );\r\n      }\r\n\r\n      // update org members\r\n      const allMemberIDs = new Set<string>();\r\n      organizations.forEach((org) => {\r\n        if (org.members) {\r\n          org.members.forEach((member) => {\r\n            allMemberIDs.add(member.toString());\r\n          });\r\n        }\r\n      });\r\n\r\n      const [allMemberUsers, allOrgs] = await Promise.all([\r\n        UserEntity.findAll({\r\n          where: {\r\n            externalID: [...allMemberIDs],\r\n            externalProvider: AuthProviderType.PLATFORM,\r\n            platformApplicationID,\r\n          },\r\n          attributes: ['id', 'externalID'],\r\n          transaction,\r\n        }),\r\n        OrgEntity.findAll({\r\n          where: {\r\n            externalID: organizations.map(({ id }) => id.toString()),\r\n            externalProvider: AuthProviderType.PLATFORM,\r\n            platformApplicationID,\r\n          },\r\n          attributes: ['id', 'externalID'],\r\n          transaction,\r\n        }),\r\n      ]);\r\n\r\n      // If we don't get a UserEntity back for each user id\r\n      // Determine who is missing and throw error to inform caller\r\n      if (allMemberIDs.size !== allMemberUsers.length) {\r\n        const userIDSet = new Set(\r\n          allMemberUsers.map((user) => user.externalID),\r\n        );\r\n        const missingMembers = new Set<string>();\r\n        [...allMemberIDs].forEach((member) => {\r\n          if (!userIDSet.has(member)) {\r\n            missingMembers.add(member);\r\n          }\r\n        });\r\n        if (missingMembers.size > 0) {\r\n          throw new ApiCallerError('user_not_found', {\r\n            message: `Platform ${\r\n              missingMembers.size > 1 ? 'users' : 'user'\r\n            } ${combine('and', [...missingMembers])} not found.`,\r\n          });\r\n        }\r\n      }\r\n\r\n      const externalIDToUserIDs = new Map<string, UUID>(\r\n        allMemberUsers.map((user) => [user.externalID, user.id]),\r\n      );\r\n\r\n      const orgsIndex = new Map(\r\n        allOrgs.map(({ id, externalID }) => [externalID, id]),\r\n      );\r\n\r\n      const deleteConditions: { [orgID: string]: string[] } = {};\r\n      const createData: any[] = [];\r\n\r\n      for (const organization of organizations) {\r\n        const members = organization.members?.map((member) =>\r\n          member.toString(),\r\n        );\r\n        const orgID = orgsIndex.get(organization.id.toString());\r\n        if (!members || !orgID) {\r\n          continue;\r\n        }\r\n\r\n        const userIDs = Array.from(\r\n          new Set(\r\n            members.map(\r\n              (externalID: string) => externalIDToUserIDs.get(externalID) ?? '',\r\n            ),\r\n          ),\r\n        );\r\n\r\n        if (await application?.isSupportChatEnabled()) {\r\n          userIDs.push(application!.supportBotID!);\r\n        }\r\n\r\n        deleteConditions[orgID] = userIDs;\r\n\r\n        for (const userID of userIDs) {\r\n          createData.push({\r\n            userID,\r\n            orgID,\r\n          });\r\n        }\r\n      }\r\n\r\n      await Promise.all([\r\n        OrgMembersEntity.bulkCreate(createData, {\r\n          ignoreDuplicates: true,\r\n          transaction,\r\n        }),\r\n        OrgMembersEntity.destroy({\r\n          where: {\r\n            [Op.or]: Object.entries(deleteConditions).map(\r\n              ([orgID, userIDs]) => ({\r\n                orgID,\r\n                userID: { [Op.notIn]: userIDs },\r\n              }),\r\n            ),\r\n          },\r\n          transaction,\r\n        }),\r\n      ]);\r\n    }\r\n  });\r\n  const usersUpdated = users?.length ?? 0;\r\n  const orgsUpdated = organizations?.length ?? 0;\r\n  return res.json({\r\n    success: true,\r\n    message: `\u2705 You successfully batch updated ${pluralize(\r\n      usersUpdated,\r\n      'user',\r\n    )} and ${pluralize(orgsUpdated, 'group')}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(batchHandler);\r\n", "import dayjs from 'dayjs';\r\nimport Calendar from 'dayjs/plugin/calendar.js';\r\ndayjs.extend(Calendar);\r\n// eslint-disable-next-line no-restricted-imports\r\nimport type { TFunction } from 'i18next';\r\nimport type {\r\n  ClientMessageData,\r\n  Reaction,\r\n  ThreadSummary,\r\n} from '@cord-sdk/types';\r\nimport { UNDO_DELETE_MESSAGE_TIMEOUT_SECONDS } from './const/Timing.js';\r\n\r\n/**\r\n * Returns a work in singular or plural form depending on given number. This includes the count, e.g.:\r\n * - `pluralize(0, 'hour')` -> '0 hours'\r\n * - `pluralize(1, 'hour')` -> '1 hour'\r\n * - `pluralize(2, 'hour')` -> '2 hours'\r\n * - `pluralize(0, 'box', 'boxes')` -> '0 boxes'\r\n * - `pluralize(1, 'box', 'boxes')` -> '1 box'\r\n */\r\nexport function pluralize(n: number, what: string, plural?: string) {\r\n  return `${n} ${pluralizeWord(n, what, plural)}`;\r\n}\r\n\r\n/**\r\n * Returns a work in singular or plural form depending on given number. This does not include the count, e.g.:\r\n * - `pluralizeWord(0, 'hour')` -> 'hours'\r\n * - `pluralizeWord(1, 'hour')` -> 'hour'\r\n * - `pluralizeWord(2, 'hour')` -> 'hours'\r\n * - `pluralizeWord(0, 'box', 'boxes')` -> 'boxes'\r\n * - `pluralizeWord(1, 'box', 'boxes')` -> 'box'\r\n */\r\nexport function pluralizeWord(\r\n  n: number,\r\n  what: string,\r\n  plural: string = what + 's',\r\n) {\r\n  return n === 1 ? what : plural;\r\n}\r\n\r\nexport function logComponentInstantiation(name: string) {\r\n  (window.CordSDK as any)?.__CORD_OPENSOURCE_COMPONENTS.add(name);\r\n}\r\n\r\nexport function logComponentReplacement(name: string) {\r\n  (window.CordSDK as any)?.__logV2Component(name, 'replacement');\r\n}\r\nexport function logComponentUsage(name: string) {\r\n  (window.CordSDK as any)?.__logV2Component(name, 'usage');\r\n}\r\n\r\nconst TOTAL_NUM_OF_PALETTES = 8;\r\nexport function getStableColorPalette(userId: string) {\r\n  let simpleHash = 0;\r\n  for (const char of userId) {\r\n    simpleHash += char.charCodeAt(0);\r\n  }\r\n  return (simpleHash % TOTAL_NUM_OF_PALETTES) + 1; // 1-indexed;\r\n}\r\n\r\nexport function isDefined<T>(value: T | null | undefined): value is T {\r\n  return value !== null && value !== undefined;\r\n}\r\n\r\nexport function isNotNull<T>(value: T | null): value is T {\r\n  return value !== null;\r\n}\r\n\r\nexport function getFileSizeString(size: number) {\r\n  let fileSizeString;\r\n  if (size > 1000000) {\r\n    // larger than a mb then we convert to MB\r\n    fileSizeString = (size / 1000000).toFixed() + ' MB';\r\n  } else if (size > 1000) {\r\n    // larger than a kb then we convert to KB\r\n    fileSizeString = (size / 1000).toFixed() + ' KB';\r\n  } else {\r\n    // converts to bytes\r\n    fileSizeString = size.toString() + ' bytes';\r\n  }\r\n  return fileSizeString;\r\n}\r\n\r\nexport function isUserAuthorOfMessage(\r\n  message: ClientMessageData,\r\n  userID: string | null | undefined,\r\n) {\r\n  return !userID || userID === message.authorID;\r\n}\r\n\r\nexport function canUndoMessageDelete(date: Date, now: number): boolean {\r\n  // Checks whether a message should have the undo button after deleting a message\r\n  const secondsSinceDeleted = (now - date.getTime()) / 1000;\r\n  return secondsSinceDeleted <= UNDO_DELETE_MESSAGE_TIMEOUT_SECONDS;\r\n}\r\n\r\nexport function relativeTimestampString(\r\n  date: Date,\r\n  now: number,\r\n  t: TFunction<'presence' | 'message' | 'notifications', 'timestamp'>,\r\n) {\r\n  const deltaSeconds = (now - date.getTime()) / 1000;\r\n  const absoluteDeltaSeconds = Math.abs(deltaSeconds);\r\n  const dateNow = new Date(now);\r\n  const isFuture = deltaSeconds < 0;\r\n\r\n  if (absoluteDeltaSeconds < 60) {\r\n    // new messages can have a delta second of -0.X which we still want to show as just now\r\n    if (deltaSeconds < -5) {\r\n      return t(`in_less_than_a_minute`);\r\n    }\r\n    // during the last minute\r\n    // For the MESSAGE location, \"just now\" appears as the end of a full sentence, so we don't want to capitalize it; for the NOTIFICATION location it appears standalone and so we do.\r\n    return t('just_now');\r\n  } else if (absoluteDeltaSeconds < 60 * 60) {\r\n    const minutes = Math.floor(absoluteDeltaSeconds / 60);\r\n\r\n    if (isFuture) {\r\n      // in the next hour\r\n      return t('in_minutes', { count: minutes });\r\n    }\r\n\r\n    // during the last hour\r\n    return t('minutes_ago', { count: minutes });\r\n  } else if (absoluteDeltaSeconds < 60 * 60 * 24) {\r\n    const hours = Math.floor(absoluteDeltaSeconds / (60 * 60));\r\n\r\n    if (isFuture) {\r\n      // in the next 24 hours\r\n      return t('in_hours', { count: hours });\r\n    }\r\n    // during the last 24 hours\r\n    return t('hours_ago', { count: hours });\r\n  } else {\r\n    return dayjs(date).calendar(now, {\r\n      lastDay: t('yesterday_format'),\r\n      lastWeek: t('last_week_format'),\r\n      nextDay: t('tomorrow_format'),\r\n      nextWeek: t('next_week_format'),\r\n      sameElse:\r\n        date.getFullYear() === dateNow.getFullYear()\r\n          ? t('this_year_format')\r\n          : t('other_format'),\r\n    });\r\n  }\r\n}\r\n\r\nexport function absoluteTimestampString(\r\n  date: Date,\r\n  now: number,\r\n  t: TFunction<'message', 'absolute_timestamp'>,\r\n) {\r\n  const dateNow = new Date(now);\r\n  return dayjs(date).calendar(now, {\r\n    sameDay: t('today_format'),\r\n    lastDay: t('yesterday_format'),\r\n    lastWeek: t('last_week_format'),\r\n    nextDay: t('tomorrow_format'),\r\n    nextWeek: t('next_week_format'),\r\n    sameElse:\r\n      date.getFullYear() === dateNow.getFullYear()\r\n        ? t('this_year_format')\r\n        : t('other_format'),\r\n  });\r\n}\r\n\r\nexport function getUnseenReactions(\r\n  thread: ThreadSummary,\r\n  message: ClientMessageData,\r\n  userID: string | null | undefined,\r\n) {\r\n  const threadParticipant = thread.participants.find(\r\n    (p) => p.userID === userID,\r\n  );\r\n\r\n  return isUserAuthorOfMessage(message, userID)\r\n    ? message.reactions.filter(\r\n        (reaction) =>\r\n          reaction.timestamp >\r\n            (threadParticipant?.lastSeenTimestamp ?? Infinity) &&\r\n          reaction.userID !== userID,\r\n      )\r\n    : [];\r\n}\r\n\r\nexport function isViewerPreviouslyAddedReaction(\r\n  userID: string,\r\n  reactions: Reaction[],\r\n  unicodeReaction: string,\r\n) {\r\n  const userReactionSet = !reactions\r\n    ? new Set()\r\n    : new Set(\r\n        reactions\r\n          .filter((reaction) => reaction.userID === userID)\r\n          .map((reaction) => reaction.reaction),\r\n      );\r\n\r\n  return userReactionSet.has(unicodeReaction);\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  extractInternalID,\r\n  isExternalizedID,\r\n} from 'common/util/externalIDs.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { getCoreMessageData } from 'server/src/public/routes/platform/messages/getCoreMessageData.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nasync function getThreadMessageHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalThreadID = req.params.threadID;\r\n  if (!externalThreadID) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  let internalThreadID = null;\r\n  if (isExternalizedID(externalThreadID)) {\r\n    internalThreadID = extractInternalID(externalThreadID);\r\n    if (!internalThreadID) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'thread ID is not valid',\r\n      });\r\n    }\r\n  }\r\n\r\n  let thread: ThreadEntity | null = null;\r\n  if (internalThreadID) {\r\n    thread = await ThreadEntity.findOne({\r\n      where: {\r\n        id: internalThreadID,\r\n        platformApplicationID: req.appID,\r\n      },\r\n    });\r\n  } else {\r\n    thread = await ThreadEntity.findOne({\r\n      where: {\r\n        externalID: externalThreadID,\r\n        platformApplicationID: req.appID,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  const externalMessageID = req.params.messageID;\r\n  if (!externalMessageID) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  let internalMessageID = null;\r\n  if (isExternalizedID(externalMessageID)) {\r\n    internalMessageID = extractInternalID(externalMessageID);\r\n    if (!internalMessageID) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'message ID is not valid',\r\n      });\r\n    }\r\n  }\r\n\r\n  let message: MessageEntity | null = null;\r\n  if (internalMessageID) {\r\n    message = await MessageEntity.findOne({\r\n      where: {\r\n        id: internalMessageID,\r\n        threadID: thread.id,\r\n      },\r\n    });\r\n  } else {\r\n    message = await MessageEntity.findOne({\r\n      where: {\r\n        externalID: externalMessageID,\r\n        threadID: thread.id,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (!message) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  const loaders = await getNewLoaders(\r\n    Viewer.createOrgViewer(thread.orgID, platformApplicationID),\r\n  );\r\n\r\n  const result = await getCoreMessageData(loaders, message, thread);\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getThreadMessageHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  extractInternalID,\r\n  isValidExternalID,\r\n} from 'common/util/externalIDs.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { getCoreMessageData } from 'server/src/public/routes/platform/messages/getCoreMessageData.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nasync function listThreadMessagesHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalThreadID = req.params.threadID;\r\n  if (!externalThreadID) {\r\n    throw new ApiCallerError('thread_not_found', {\r\n      message: 'Missing thread ID.',\r\n    });\r\n  }\r\n\r\n  let internalThreadID: string | null = null;\r\n  if (!isValidExternalID(externalThreadID)) {\r\n    internalThreadID = extractInternalID(externalThreadID);\r\n    if (!internalThreadID) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'thread ID is invalid',\r\n      });\r\n    }\r\n  }\r\n\r\n  const sortDirection = req.query.sortDirection?.toString().toUpperCase();\r\n\r\n  let thread: ThreadEntity | null = null;\r\n  if (internalThreadID) {\r\n    thread = await ThreadEntity.findOne({\r\n      where: {\r\n        id: internalThreadID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n  } else {\r\n    thread = await ThreadEntity.findOne({\r\n      where: {\r\n        externalID: externalThreadID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found', { code: 404 });\r\n  }\r\n\r\n  let order = undefined;\r\n\r\n  // Default to descending\r\n  if (!sortDirection || sortDirection === 'DESCENDING') {\r\n    order = 'DESC';\r\n  }\r\n\r\n  if (sortDirection === 'ASCENDING') {\r\n    order = 'ASC';\r\n  }\r\n\r\n  if (!order) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message:\r\n        \"sortDirection value is invalid: must be 'ascending' or 'descending'\",\r\n    });\r\n  }\r\n\r\n  const messages = await MessageEntity.findAll({\r\n    where: {\r\n      threadID: thread.id,\r\n    },\r\n    order: [['timestamp', order]],\r\n  });\r\n\r\n  if (messages.length <= 0) {\r\n    return res.status(200).json([]);\r\n  }\r\n\r\n  const loaders = await getNewLoaders(\r\n    Viewer.createOrgViewer(thread.orgID, platformApplicationID),\r\n  );\r\n\r\n  // Not sure why TS knows that thread isn't null out here but forgets that\r\n  // inside the map below? Work around.\r\n  const threadNotNull = thread;\r\n  const results = await Promise.all(\r\n    messages.map(\r\n      async (msg) => await getCoreMessageData(loaders, msg, threadNotNull),\r\n    ),\r\n  );\r\n\r\n  return res.status(200).json(results);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listThreadMessagesHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { unique } from 'radash';\r\n\r\nimport type { Transaction } from 'sequelize';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport type { MessageContent } from 'common/types/index.ts';\r\nimport { validateMessageContent } from 'server/src/message/util/validateMessageContent.ts';\r\nimport { executeNewMessageCreationTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport {\r\n  getSequelize,\r\n  serializableTransactionWithRetries,\r\n} from 'server/src/entity/sequelize.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport {\r\n  internalizeContent,\r\n  getValidExternalToInternalReactionUsers,\r\n} from 'server/src/public/routes/platform/messages/util.ts';\r\nimport type {\r\n  CreateAttachment,\r\n  ServerCreateMessage,\r\n  UUID,\r\n} from '@cord-sdk/types';\r\nimport { MessageReactionMutator } from 'server/src/entity/message_reaction/MessageReactionMutator.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport { addGroupIDIfNotExistCreateThreadMessageHandler } from 'server/src/public/routes/platform/addGroupIDWhereOrgIDExists.ts';\r\nimport { createThread as createThreadFunction } from 'server/src/public/routes/platform/threads/CreateThreadHandler.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { ScreenshotAttachmentInput } from 'common/graphql/types.ts';\r\n\r\nasync function createThreadMessageHandler(req: Request, res: Response) {\r\n  // This is in place until we remove organizationID\r\n  const reqBodyWithGroupID = addGroupIDIfNotExistCreateThreadMessageHandler(\r\n    req.body,\r\n    req.appID,\r\n  );\r\n  const vars = validate.CreateMessageVariables(reqBodyWithGroupID);\r\n\r\n  const message = await createThreadMessage({\r\n    ...vars,\r\n    platformApplicationID: req.appID,\r\n    threadID: req.params.threadID,\r\n    internalMessageID: uuid(),\r\n  });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Message created.',\r\n    messageID: message.externalID,\r\n  });\r\n}\r\n\r\nexport async function createThreadMessage({\r\n  platformApplicationID,\r\n  threadID: externalThreadID,\r\n  id: externalMessageID,\r\n  internalMessageID,\r\n  authorID: externalSourceID,\r\n  content: rawContent,\r\n  url,\r\n  createdTimestamp: timestamp,\r\n  deletedTimestamp,\r\n  updatedTimestamp: lastUpdatedTimestamp,\r\n  iconURL,\r\n  translationKey,\r\n  type,\r\n  createThread,\r\n  metadata,\r\n  extraClassnames,\r\n  addReactions,\r\n  addAttachments = [],\r\n  skipLinkPreviews,\r\n  subscribeToThread,\r\n  screenshotAttachment,\r\n  ...rest\r\n}: ServerCreateMessage & {\r\n  internalMessageID: UUID;\r\n  threadID: string;\r\n  platformApplicationID: string | undefined;\r\n  screenshotAttachment?: ScreenshotAttachmentInput | null | undefined;\r\n}) {\r\n  // Check that all properties in ServerCreateMessage are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n  if (!app) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  if (externalMessageID) {\r\n    validateExternalID(externalMessageID, 'id');\r\n  }\r\n  validateExternalID(externalSourceID, 'authorID');\r\n\r\n  const existingThread = await ThreadEntity.findOne({\r\n    where: {\r\n      externalID: externalThreadID,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!existingThread && !createThread) {\r\n    throw new ApiCallerError('thread_not_found', {\r\n      message: 'Could not find thread with ID ' + externalThreadID,\r\n    });\r\n  } else if (!existingThread) {\r\n    validateExternalID(externalThreadID, 'threadID');\r\n  }\r\n\r\n  if (externalMessageID) {\r\n    const messageExists = await MessageEntity.findOne({\r\n      where: {\r\n        externalID: externalMessageID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n\r\n    if (messageExists) {\r\n      throw new ApiCallerError('message_already_exists', {\r\n        message: `Message with id: ${externalMessageID} already exists. Please use a different ID or update the message via our update message endpoint https://docs.cord.com/rest-apis/messages#Update-a-message.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  const [org, sender] = await Promise.all([\r\n    existingThread\r\n      ? OrgEntity.findOne({\r\n          where: {\r\n            id: existingThread.orgID,\r\n            platformApplicationID,\r\n          },\r\n        })\r\n      : OrgEntity.findOne({\r\n          where: {\r\n            externalID: createThread!.organizationID ?? createThread!.groupID,\r\n            platformApplicationID,\r\n          },\r\n        }),\r\n    UserEntity.findOne({\r\n      where: {\r\n        externalID: externalSourceID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('organization_not_found');\r\n  }\r\n\r\n  if (!sender) {\r\n    throw new ApiCallerError('user_not_found', {\r\n      message: `Invalid message sender user id: ${externalSourceID}.`,\r\n    });\r\n  }\r\n\r\n  const orgMemberCount = await OrgMembersEntity.count({\r\n    where: {\r\n      userID: sender.id,\r\n      orgID: org.id,\r\n    },\r\n  });\r\n\r\n  if (orgMemberCount !== 1) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message:\r\n        'message author is not a member of the organization ' +\r\n        'the thread belongs to',\r\n    });\r\n  }\r\n\r\n  let content: MessageContent;\r\n  try {\r\n    validateMessageContent(rawContent);\r\n    content = await internalizeContent(\r\n      rawContent,\r\n      platformApplicationID,\r\n      org.id,\r\n    );\r\n  } catch (e) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'content field is invalid: ' + (e as Error).message,\r\n    });\r\n  }\r\n\r\n  const pendingFileAttachments = await validateAddAttachments(\r\n    addAttachments,\r\n    sender,\r\n  );\r\n\r\n  const reactionsToAdd = addReactions ?? [];\r\n\r\n  const externalReactionUserIDs = unique(\r\n    reactionsToAdd.map((reaction) => reaction.userID),\r\n  );\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({\r\n    user: sender,\r\n    org,\r\n  });\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  const externalToInternalReactionUsers =\r\n    await getValidExternalToInternalReactionUsers(\r\n      context,\r\n      externalReactionUserIDs,\r\n      org,\r\n    );\r\n\r\n  const viewerReactionMutator = new MessageReactionMutator(\r\n    viewer,\r\n    context.loaders,\r\n  );\r\n\r\n  const [message, thread, senderContext, isFirstMessage, fileAttachments] =\r\n    // We use SERIALIZABLE here because it's needed to ensure the threads and\r\n    // preallocated_thread_ids tables remain consistent, see thread_by_external_id.ts\r\n    await serializableTransactionWithRetries(async (transaction) => {\r\n      let existingOrCreatedThread: ThreadEntity;\r\n      let threadWasCreated = false;\r\n      if (existingThread) {\r\n        existingOrCreatedThread = existingThread;\r\n      } else {\r\n        if (!createThread) {\r\n          // NOTE(flooey): This is redundant with the same check up above, but\r\n          // it's here to give the typechecker the knowledge that createThread\r\n          // must be defined.\r\n          throw new ApiCallerError('thread_not_found');\r\n        }\r\n\r\n        if (createThread.resolved !== undefined) {\r\n          deprecated('createThreadMessageHandler:createThread:resolved');\r\n        }\r\n\r\n        const { thread: newThread } = await createThreadFunction({\r\n          platformApplicationID,\r\n          id: externalThreadID,\r\n          transaction,\r\n          viewer,\r\n          ...createThread,\r\n        });\r\n        existingOrCreatedThread = newThread;\r\n        threadWasCreated = true;\r\n      }\r\n\r\n      const createdMessage = await new MessageMutator(\r\n        viewer,\r\n        context.loaders,\r\n      ).createMessageExternal(\r\n        {\r\n          id: internalMessageID,\r\n          thread: existingOrCreatedThread,\r\n          sourceID: sender.id,\r\n          externalID: externalMessageID,\r\n          content,\r\n          url,\r\n          timestamp: timestamp || new Date(),\r\n          deletedTimestamp: deletedTimestamp ?? undefined,\r\n          lastUpdatedTimestamp: lastUpdatedTimestamp ?? undefined,\r\n          type: type ?? 'user_message',\r\n          iconURL: iconURL ?? undefined,\r\n          translationKey: translationKey ?? undefined,\r\n          metadata,\r\n          extraClassnames: extraClassnames ?? undefined,\r\n          skipLinkPreviews,\r\n        },\r\n        transaction,\r\n      );\r\n\r\n      await Promise.all(\r\n        reactionsToAdd.map(async (reactionToAdd) => {\r\n          const user = externalToInternalReactionUsers.get(\r\n            reactionToAdd.userID,\r\n          );\r\n\r\n          if (!user) {\r\n            return;\r\n          }\r\n\r\n          let mutator: MessageReactionMutator;\r\n          if (user.id === viewer.userID) {\r\n            mutator = viewerReactionMutator;\r\n          } else {\r\n            const reactionViewer = await Viewer.createLoggedInPlatformViewer({\r\n              user,\r\n              org,\r\n            });\r\n            mutator = new MessageReactionMutator(reactionViewer, null);\r\n          }\r\n\r\n          return await mutator.createOne(\r\n            createdMessage.id,\r\n            reactionToAdd.reaction,\r\n            reactionToAdd.timestamp,\r\n            transaction,\r\n          );\r\n        }),\r\n      );\r\n\r\n      return [\r\n        createdMessage,\r\n        existingOrCreatedThread,\r\n        context,\r\n        threadWasCreated,\r\n        pendingFileAttachments,\r\n      ];\r\n    });\r\n\r\n  const flagsUser: FlagsUser = {\r\n    userID: message.sourceID,\r\n    orgID: message.orgID,\r\n    platformApplicationID: app.id,\r\n    version: null,\r\n    customerID: app.customerID,\r\n  };\r\n\r\n  const page = await PageEntity.findOne({\r\n    where: {\r\n      contextHash: thread.pageContextHash,\r\n      orgID: message.orgID,\r\n    },\r\n  });\r\n\r\n  if (!page) {\r\n    throw new Error(\r\n      `Could not find page for message ${message.id} and thread ${thread.id}`,\r\n    );\r\n  }\r\n\r\n  await executeNewMessageCreationTasks({\r\n    context: senderContext,\r\n    flagsUser,\r\n    application: app,\r\n    page,\r\n    thread,\r\n    message,\r\n    fileAttachments: fileAttachments.map((a) => ({\r\n      id: uuid(),\r\n      fileID: a.id,\r\n    })),\r\n    annotationAttachments: [],\r\n    isFirstMessage,\r\n    task: null,\r\n    screenshotAttachment,\r\n    subscribeToThread: subscribeToThread ?? true,\r\n  });\r\n\r\n  return message;\r\n}\r\n\r\nexport async function validateAddAttachments(\r\n  addAttachments: CreateAttachment[],\r\n  sender: UserEntity,\r\n  transaction?: Transaction,\r\n) {\r\n  const pendingFileAttachments = addAttachments.filter(\r\n    (a) => a.type === 'file',\r\n  );\r\n\r\n  const idsToAttach = new Set(pendingFileAttachments.map((f) => f.id));\r\n  if (idsToAttach.size !== pendingFileAttachments.length) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'Cannot attach the same file multiple times',\r\n    });\r\n  }\r\n\r\n  const filesToAttach = await FileEntity.findAll({\r\n    where: {\r\n      id: pendingFileAttachments.map((a) => a.id),\r\n    },\r\n    transaction,\r\n  });\r\n\r\n  if (filesToAttach.length !== pendingFileAttachments.length) {\r\n    throw new ApiCallerError('file_not_found');\r\n  }\r\n\r\n  if (filesToAttach.some((f) => f.userID !== sender.id)) {\r\n    throw new ApiCallerError('file_belongs_to_different_user');\r\n  }\r\n\r\n  return pendingFileAttachments;\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createThreadMessageHandler);\r\n", "import Ajv from 'ajv';\r\nimport type { MessageContent } from 'common/types/index.ts';\r\nimport { MAX_BULLET_INDENT } from '@cord-sdk/react/common/lib/messageNode.ts';\r\n\r\n// This validator was written by attempting to validate 50k messages from our\r\n// production DB. It's good at validating that a message is valid structurally.\r\n// It's less good at preventing people from doing really wacky stuff like a\r\n// million-character messages or whatever.\r\n//\r\n// The error messages from this are pretty lame, mostly because AJV is pretty\r\n// minimal in its error messaging. If we wanted this message format to live a\r\n// thousand years, I'd write this much more like a parser where we can stop at\r\n// any point and give a meaningful error. Since we're very ambivalent about this\r\n// message format, I'm just using AJV for now.\r\n//\r\n// It would be ideal to have this be part of the API types, but our auto-magic\r\n// type-to-AJV stuff doesn't seem to handle everything that I can get out of\r\n// manual AJV validation. If folks think this is absolutely silly of me,\r\n// it's really not much work to convert this to something in our api-types library.\r\nconst TextSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    // You might expect this to have an enforced non-zero length, but\r\n    // actually our own composer produces text nodes with empty string\r\n    // values. It would be nasty of us to produce messages that we\r\n    // wouldn't accept back directly.\r\n    text: { type: 'string' },\r\n    bold: { type: 'boolean' },\r\n    italic: { type: 'boolean' },\r\n    underline: { type: 'boolean' },\r\n    code: { type: 'boolean' },\r\n    class: { type: 'string' },\r\n  },\r\n  required: ['text'],\r\n  additionalProperties: false,\r\n};\r\n\r\n// In the production DB if you go far enough back, there are messages\r\n// that have the complete user object in the @-mention. Pretty sure\r\n// we *don't* want that.\r\nconst MentionSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^mention$' },\r\n    class: { type: 'string' },\r\n    user: {\r\n      type: 'object',\r\n      properties: { id: { type: 'string' } },\r\n      required: ['id'],\r\n      additionalProperties: false,\r\n    },\r\n    children: {\r\n      type: 'array',\r\n      minItems: 1,\r\n      maxItems: 1,\r\n      items: {\r\n        type: 'object',\r\n        properties: {\r\n          // these are names from our customers' users, which includes email addresses\r\n          text: { type: 'string', pattern: '^@.+$' },\r\n        },\r\n        required: ['text'],\r\n        additionalProperties: false,\r\n      },\r\n    },\r\n  },\r\n  required: ['type', 'user', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst TaskSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^assignee$' },\r\n    user: {\r\n      type: 'object',\r\n      properties: { id: { type: 'string' } },\r\n      required: ['id'],\r\n      additionalProperties: false,\r\n    },\r\n    children: {\r\n      type: 'array',\r\n      minItems: 1,\r\n      maxItems: 1,\r\n      items: {\r\n        type: 'object',\r\n        properties: {\r\n          // these are names from our customers' users, which includes email addresses\r\n          text: { type: 'string', pattern: '^[+].+$' },\r\n        },\r\n        required: ['text'],\r\n        additionalProperties: false,\r\n      },\r\n    },\r\n  },\r\n  required: ['type', 'user', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst LinkSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^link$' },\r\n    class: { type: 'string' },\r\n    url: { type: 'string' }, // TODO: Swap this for a uri -- AJV was unhappy with me\r\n    children: {\r\n      type: 'array',\r\n      items: { anyOf: [TextSchema, MentionSchema] },\r\n    },\r\n  },\r\n  required: ['type', 'url', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst ParagraphSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^p$' },\r\n    class: { type: 'string' },\r\n    children: {\r\n      type: 'array',\r\n      items: { anyOf: [TextSchema, MentionSchema, TaskSchema, LinkSchema] },\r\n      minItems: 1,\r\n    },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst BulletSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^bullet$' },\r\n    class: { type: 'string' },\r\n    children: {\r\n      type: 'array',\r\n      minItems: 1,\r\n      items: { anyOf: [ParagraphSchema] },\r\n    },\r\n    indent: { type: 'integer', minimum: 0, maximum: MAX_BULLET_INDENT },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst NumberBulletSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^number_bullet$' },\r\n    class: { type: 'string' },\r\n    children: {\r\n      type: 'array',\r\n      minItems: 1,\r\n      items: { anyOf: [ParagraphSchema] },\r\n    },\r\n    bulletNumber: { type: 'integer' },\r\n    indent: { type: 'integer', minimum: 0, maximum: MAX_BULLET_INDENT },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst QuoteSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^quote$' },\r\n    class: { type: 'string' },\r\n    children: {\r\n      type: 'array',\r\n      items: {\r\n        anyOf: [\r\n          ParagraphSchema,\r\n          BulletSchema,\r\n          NumberBulletSchema,\r\n          TextSchema,\r\n          MentionSchema,\r\n          TaskSchema,\r\n          LinkSchema,\r\n        ],\r\n      },\r\n      minItems: 1,\r\n    },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst CodeSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^code$' },\r\n    class: { type: 'string' },\r\n    children: {\r\n      type: 'array',\r\n      items: { anyOf: [TextSchema] },\r\n      minItems: 1,\r\n    },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\n// I believe this is a dead format of message, actually? But we\r\n// have them in the DB. There's actually an even older version of\r\n// annotation where it's a free form JSON blob, but I pretty confident\r\n// we *don't* want that.\r\nconst AnnotationSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^annotation$' },\r\n    children: {\r\n      type: 'array',\r\n      items: { anyOf: [TextSchema] },\r\n    },\r\n    annotation: {\r\n      type: 'object',\r\n      properties: {\r\n        id: { type: 'string' },\r\n      },\r\n      required: ['id'],\r\n      additionalProperties: false,\r\n    },\r\n  },\r\n  required: ['annotation', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\n// Danger Zone! Here's some wacky experimental stuff!\r\nconst ExperimentalCustomMessageSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: {\r\n      type: 'string',\r\n      pattern:\r\n        '^(?!p$|quote$|annotation$|code$|bullet$|number_bullet$|link$|mention$|assignee$|markdown$)[a-z]+$',\r\n    },\r\n  },\r\n  additionalProperties: true,\r\n  required: ['type'],\r\n};\r\n\r\nconst MarkdownMessageSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    type: { type: 'string', pattern: '^markdown$' },\r\n    children: {\r\n      type: 'array',\r\n      minItems: 1,\r\n      maxItems: 1,\r\n      items: { type: 'object', properties: { text: { type: 'string' } } },\r\n    },\r\n  },\r\n  required: ['type', 'children'],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst MessageAJVSchema = {\r\n  type: 'array',\r\n  items: {\r\n    anyOf: [\r\n      ExperimentalCustomMessageSchema,\r\n      ParagraphSchema,\r\n      QuoteSchema,\r\n      CodeSchema,\r\n      TaskSchema,\r\n      MentionSchema,\r\n      BulletSchema,\r\n      NumberBulletSchema,\r\n      AnnotationSchema,\r\n      LinkSchema,\r\n      MarkdownMessageSchema,\r\n    ],\r\n  },\r\n  minItems: 0, // Nodes have minimum children of 1, but an empty message is valid\r\n};\r\n\r\nconst ajv = new Ajv.default({\r\n  verbose: true,\r\n});\r\nconst validateMessageContentAgainstSchema = ajv.compile(MessageAJVSchema);\r\n\r\nexport function validateMessageContent(\r\n  msg: unknown,\r\n): asserts msg is MessageContent {\r\n  if (!validateMessageContentAgainstSchema(msg)) {\r\n    throw new Error(\r\n      'Message contents contained invalid element(s): ' +\r\n        JSON.stringify(msg, null, 4),\r\n    );\r\n  }\r\n}\r\n", "import { GraphQLScalarType } from 'graphql';\r\nimport { GraphQLJSON } from 'graphql-type-json';\r\nimport type { ValueNode } from 'graphql';\r\n\r\nimport type { AnnotationAttachmentInput } from 'server/src/schema/resolverTypes.ts';\r\nimport type { MessageAnnotationAttachmentData } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type {\r\n  UUID,\r\n  MessageContent,\r\n  ElementIdentifierVersion,\r\n  JsonValue,\r\n  HighlightedTextConfig,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  MessageAttachmentType,\r\n  parseElementIdentifierVersion,\r\n  isValidFlatJsonObject,\r\n} from 'common/types/index.ts';\r\nimport { MessageMentionMutator } from 'server/src/entity/message_mention/MessageMentionMutator.ts';\r\nimport { getMentionedUserIDs } from 'common/util/index.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\n\r\n// createOrUpdateMessageMentions updates message mentions for the given\r\n// messageID to match the mentions in the content. A list of newly mentioned\r\n// user IDs is returned.\r\nasync function createOrUpdateMessageMentions(\r\n  context: RequestContext,\r\n  messageId: UUID,\r\n  content: MessageContent,\r\n  isUpdate: boolean,\r\n): Promise<UUID[]> {\r\n  const mentionedUsers: UUID[] = getMentionedUserIDs(content);\r\n\r\n  const mutator = new MessageMentionMutator(context.session.viewer);\r\n\r\n  if (isUpdate) {\r\n    // delete existing mentions that are not contained in the updated\r\n    // version of the message\r\n    await mutator.deleteExcludingUsers(messageId, mentionedUsers);\r\n  }\r\n\r\n  // create mentions in database - any messageID/userID combination that is\r\n  // already present in the table will not be returned, i.e.\r\n  // `createdMentions` only includes actually newly created rows\r\n  return await mutator.createMessageMentions(messageId, mentionedUsers);\r\n}\r\n\r\nexport const createMessageMentions = (\r\n  context: RequestContext,\r\n  messageId: UUID,\r\n  content: MessageContent,\r\n) => createOrUpdateMessageMentions(context, messageId, content, false);\r\n\r\nexport const updateMessageMentions = (\r\n  context: RequestContext,\r\n  messageId: UUID,\r\n  content: MessageContent,\r\n) => createOrUpdateMessageMentions(context, messageId, content, true);\r\n\r\nexport const getMessageAnnotationAttachmentsFromInput = (\r\n  viewer: Viewer,\r\n  annotationAttachments: AnnotationAttachmentInput[],\r\n): Array<{\r\n  id: UUID;\r\n  type: MessageAttachmentType.ANNOTATION;\r\n  data: MessageAnnotationAttachmentData;\r\n}> => {\r\n  // double check that we don't receive annotations with both location and customLocation\r\n  const attachmentWithBothLocations = annotationAttachments.find(\r\n    (annotation) => annotation.location && annotation.customLocation,\r\n  );\r\n  if (attachmentWithBothLocations) {\r\n    new Logger(viewer).warn(\r\n      'AnnotationAttachmentInput contains both location and customLocation',\r\n      { attachment: attachmentWithBothLocations },\r\n    );\r\n  }\r\n\r\n  return annotationAttachments.map(\r\n    ({\r\n      id,\r\n      screenshotFileID,\r\n      blurredScreenshotFileID,\r\n      location,\r\n      customLocation,\r\n      customHighlightedTextConfig,\r\n      customLabel,\r\n      coordsRelativeToTarget,\r\n    }) => ({\r\n      id,\r\n      type: MessageAttachmentType.ANNOTATION,\r\n      data: {\r\n        screenshotFileID: screenshotFileID ?? null,\r\n        blurredScreenshotFileID: blurredScreenshotFileID ?? null,\r\n        location: location ?? null,\r\n        customLocation: customLocation ?? null,\r\n        customHighlightedTextConfig:\r\n          customHighlightedTextConfig as HighlightedTextConfig,\r\n        customLabel: customLabel ?? null,\r\n        coordsRelativeToTarget: coordsRelativeToTarget ?? null,\r\n      },\r\n    }),\r\n  );\r\n};\r\n\r\nexport const SimpleValueScalarType = new GraphQLScalarType({\r\n  name: 'SimpleValue',\r\n  description: 'Simple value',\r\n\r\n  // serialization/deserialization works just like for JSON\r\n  serialize: GraphQLJSON.serialize,\r\n  parseValue: GraphQLJSON.parseValue,\r\n  parseLiteral: GraphQLJSON.parseLiteral,\r\n});\r\n\r\nexport const MessageContentScalarType = new GraphQLScalarType({\r\n  name: 'MessageContent',\r\n  description: 'Message content',\r\n\r\n  // serialization/deserialization works just like for JSON\r\n  serialize: GraphQLJSON.serialize,\r\n  parseValue: GraphQLJSON.parseValue,\r\n  parseLiteral: GraphQLJSON.parseLiteral,\r\n});\r\n\r\n/**\r\n * A JSONObject where all values are string, number or boolean.\r\n *\r\n * This object is exported for use in other scalar types. You probably don't\r\n * want to use this type directly; use the `Context` or `Metadata` scalar types\r\n * instead.\r\n */\r\nconst FlatJSONObjectScalarType = new GraphQLScalarType({\r\n  name: 'FlatJSONObject',\r\n  description: 'A JSONObject where all values are string, number or boolean',\r\n\r\n  // serialization/deserialization works just like for JSON, with further\r\n  // validation\r\n  serialize: GraphQLJSON.serialize,\r\n  parseValue: (value) => {\r\n    const result = GraphQLJSON.parseValue(value);\r\n    if (!isValidFlatJsonObject(result)) {\r\n      throw new Error('Invalid flat JSON object');\r\n    }\r\n    return result;\r\n  },\r\n  parseLiteral: (astNode, variables) => {\r\n    const result = GraphQLJSON.parseLiteral(astNode, variables);\r\n    if (!isValidFlatJsonObject(result)) {\r\n      throw new Error('Invalid flat JSON object');\r\n    }\r\n    return result;\r\n  },\r\n});\r\n\r\nexport const ContextScalarType = new GraphQLScalarType({\r\n  ...FlatJSONObjectScalarType,\r\n  name: 'Context',\r\n  description: 'Context',\r\n});\r\n\r\nexport const MetadataScalarType = new GraphQLScalarType({\r\n  ...FlatJSONObjectScalarType,\r\n  name: 'Metadata',\r\n  description: 'Metadata',\r\n});\r\n\r\nexport const SimpleTranslationParametersScalarType = new GraphQLScalarType({\r\n  ...FlatJSONObjectScalarType,\r\n  name: 'SimpleTranslationParameters',\r\n  description: 'SimpleTranslationParameters',\r\n});\r\n\r\nexport const ElementIdentifierVersionScalarType = new GraphQLScalarType({\r\n  name: 'ElementIdentifierVersion',\r\n\r\n  serialize: (x: ElementIdentifierVersion) => x, // already JSON serializable\r\n  parseValue: (x: JsonValue) => {\r\n    if (typeof x !== 'string') {\r\n      return null;\r\n    }\r\n    return parseElementIdentifierVersion(x);\r\n  },\r\n  parseLiteral: (astNode: ValueNode) => {\r\n    if (astNode.kind === 'StringValue') {\r\n      return parseElementIdentifierVersion(astNode.value);\r\n    }\r\n    return null;\r\n  },\r\n});\r\n\r\nexport const JsonObjectReducerDataScalarType = new GraphQLScalarType({\r\n  name: 'JsonObjectReducerData',\r\n  description: 'Data type for jsonObjectReducer',\r\n\r\n  // serialization/deserialization works just like for JSON\r\n  serialize: GraphQLJSON.serialize,\r\n  parseValue: GraphQLJSON.parseValue,\r\n  parseLiteral: GraphQLJSON.parseLiteral,\r\n});\r\n", "import type { WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\n\r\nimport { MessageMentionEntity } from 'server/src/entity/message_mention/MessageMentionEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nexport class MessageMentionMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  // createMessageMentions creates a mention (userID, messageID) for each user\r\n  // in userIDs. It returns a list of userIDs for which mentions were actually\r\n  // created, i.e. that were not mentioned in the message previously.\r\n  async createMessageMentions(\r\n    messageID: UUID,\r\n    userIDs: UUID[],\r\n  ): Promise<UUID[]> {\r\n    if (userIDs.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // we used to use sequelize's bulkCreate() here, but it does not behave as\r\n    // expected. See for example:\r\n    // https://github.com/sequelize/sequelize/issues/11204\r\n    const [returnedColumns] = await getSequelize().query(\r\n      `INSERT INTO\r\n      \"${MessageMentionEntity.tableName}\"\r\n      (\"userID\", \"messageID\")\r\n      VALUES\r\n      ${userIDs.map(() => '(?)').join(',')}\r\n      ON CONFLICT DO NOTHING\r\n      RETURNING \"userID\"`,\r\n      {\r\n        replacements: userIDs.map((userID) => [userID, messageID]),\r\n      },\r\n    );\r\n\r\n    const newUserIDs = (returnedColumns as { userID: UUID }[]).map(\r\n      (row) => row.userID,\r\n    );\r\n\r\n    return newUserIDs;\r\n  }\r\n\r\n  async deleteExcludingUsers(messageID: UUID, excludedUsers: UUID[]) {\r\n    const where: WhereOptions<MessageMentionEntity> = { messageID };\r\n\r\n    if (excludedUsers.length > 0) {\r\n      where.userID = { [Op.notIn]: excludedUsers };\r\n    }\r\n\r\n    await MessageMentionEntity.destroy({ where });\r\n  }\r\n}\r\n", "import { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { FileAttachmentInput } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { MessageAttachmentMutator } from 'server/src/entity/message_attachment/MessageAttachmentMutator.ts';\r\nimport { getMessageAnnotationAttachmentsFromInput } from 'server/src/schema/common.ts';\r\nimport type {\r\n  AnnotationAttachmentInput,\r\n  ScreenshotAttachmentInput,\r\n} from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport async function addNewMessageAttachments(\r\n  context: RequestContext,\r\n  message: MessageEntity,\r\n  fileAttachments: FileAttachmentInput[],\r\n  annotationAttachments: AnnotationAttachmentInput[],\r\n  screenshotAttachment: ScreenshotAttachmentInput | null | undefined,\r\n) {\r\n  const messageAttachmentMutator = new MessageAttachmentMutator(\r\n    context.session.viewer,\r\n    context.loaders,\r\n  );\r\n\r\n  await messageAttachmentMutator.setMessageAttachments(message, [\r\n    ...fileAttachments.map(({ id, fileID }) => ({\r\n      id,\r\n      type: MessageAttachmentType.FILE,\r\n      data: { fileID },\r\n    })),\r\n    ...getMessageAnnotationAttachmentsFromInput(\r\n      context.session.viewer,\r\n      annotationAttachments,\r\n    ),\r\n    ...(screenshotAttachment\r\n      ? [\r\n          {\r\n            id: screenshotAttachment.id,\r\n            type: MessageAttachmentType.SCREENSHOT,\r\n            data: {\r\n              screenshotFileID: screenshotAttachment.screenshotFileID,\r\n              blurredScreenshotFileID:\r\n                screenshotAttachment.blurredScreenshotFileID,\r\n            },\r\n          },\r\n        ]\r\n      : []),\r\n  ]);\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport async function markThreadSeenForViewer(\r\n  viewer: Viewer,\r\n  threadID: UUID,\r\n  transaction?: Transaction,\r\n) {\r\n  const threadParticipantMutator = new ThreadParticipantMutator(viewer, null);\r\n  await threadParticipantMutator.markThreadSeen({\r\n    threadID,\r\n    setSubscribed: true,\r\n    transaction,\r\n  });\r\n}\r\n", "import type {\r\n  TrelloConnectionPreferencesType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  addMemberToCard,\r\n  createCard,\r\n  getUserResources,\r\n} from 'server/src/third_party_tasks/trello/api.ts';\r\nimport { getExternalAuthData } from 'server/src/third_party_tasks/util.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport {\r\n  convertStructuredMessageToText,\r\n  taskTitleFromMessageContent,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { TRELLO_CONNECTED_LIST } from 'common/const/UserPreferenceKeys.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { UserPreferenceLoader } from 'server/src/entity/user_preference/UserPreferenceLoader.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nasync function getAccessToken(viewer: Viewer): Promise<string | null> {\r\n  const tokens = await getExternalAuthData(viewer, 'trello');\r\n  if (!tokens?.accessToken) {\r\n    return null;\r\n  }\r\n  return tokens.accessToken;\r\n}\r\n\r\nexport async function getTrelloWorkSpace(\r\n  viewer: Viewer,\r\n): Promise<TrelloConnectionPreferencesType | null> {\r\n  const accessToken = await getAccessToken(viewer);\r\n  if (!accessToken) {\r\n    return null;\r\n  }\r\n\r\n  return await getUserResources(accessToken);\r\n}\r\n\r\nexport async function createTrelloTask(\r\n  logger: Logger,\r\n  viewer: Viewer,\r\n  task: TaskEntity,\r\n) {\r\n  const accessToken = await getAccessToken(viewer);\r\n  if (!accessToken) {\r\n    return null;\r\n  }\r\n  const message = await MessageEntity.findByPk(task.messageID);\r\n  if (!message) {\r\n    logger.error(\r\n      `Failed to fetch message ${task.messageID} linked to task ${task.id}`,\r\n    );\r\n    return;\r\n  }\r\n\r\n  const name = taskTitleFromMessageContent(message.content);\r\n  const messageContent = convertStructuredMessageToText(message.content);\r\n  const cordReference = `This task was created using Cord, see original task here ${message.url}`;\r\n  const desc = messageContent + '\\n' + cordReference;\r\n  const userPreferenceLoader = new UserPreferenceLoader(viewer);\r\n\r\n  const userTrelloList =\r\n    await userPreferenceLoader.loadPreferenceValueForViewer<string>(\r\n      TRELLO_CONNECTED_LIST,\r\n    );\r\n\r\n  if (!userTrelloList) {\r\n    return null;\r\n  }\r\n\r\n  const { id } = await createCard(accessToken, {\r\n    name,\r\n    desc,\r\n    idList: userTrelloList,\r\n  });\r\n\r\n  if (!id) {\r\n    logger.error('Failed to get card id from response');\r\n    return;\r\n  }\r\n\r\n  await TaskThirdPartyReference.create({\r\n    taskID: task.id,\r\n    externalID: id,\r\n    externalConnectionType: 'trello',\r\n  });\r\n\r\n  return id;\r\n}\r\n\r\nexport async function addAssigneesToTrelloTask(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  taskAssigneesUserIDs: UUID[],\r\n) {\r\n  const accessToken = await getAccessToken(viewer);\r\n  if (!accessToken) {\r\n    return;\r\n  }\r\n\r\n  const thirdPartyReference = await TaskThirdPartyReference.findForTask(\r\n    taskID,\r\n    'trello',\r\n  );\r\n  if (!thirdPartyReference) {\r\n    return;\r\n  }\r\n  const trelloCardID = thirdPartyReference.externalID;\r\n\r\n  const connectedTrelloTaskAssignees = await getTrelloMatchedUsers(\r\n    viewer,\r\n    taskAssigneesUserIDs,\r\n  );\r\n  const connectedTaskAssigneesMemberIDs = connectedTrelloTaskAssignees.map(\r\n    (thirdPartyData) => thirdPartyData.externalID,\r\n  );\r\n\r\n  await Promise.all(\r\n    connectedTaskAssigneesMemberIDs.map((memberID) =>\r\n      addMemberToCard(accessToken, trelloCardID, memberID),\r\n    ),\r\n  );\r\n}\r\n\r\nasync function getTrelloMatchedUsers(\r\n  viewer: Viewer,\r\n  taskAssigneesUserIDs: UUID[],\r\n) {\r\n  const { orgID } = assertViewerHasIdentity(viewer);\r\n  const connectedAssigneesUsers = await ThirdPartyConnectionEntity.findAll({\r\n    where: {\r\n      userID: taskAssigneesUserIDs,\r\n      orgID,\r\n      type: 'trello',\r\n    },\r\n  });\r\n\r\n  return connectedAssigneesUsers;\r\n}\r\n", "import { v4 as uuid } from 'uuid';\r\n\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { cache, cacheKey } from 'server/src/util/cache.ts';\r\nimport type {\r\n  MondayBoard,\r\n  MondayConnectionPreferences,\r\n  MondayItemPreviewData,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  findTaskAndMessageEntitiesFromExternalTaskID,\r\n  getExternalAuthData,\r\n  getTaskFooterText,\r\n  getThirdPartyMatchedAccounts,\r\n  handleThirdPartyException,\r\n  publishMessageUpdateForTask,\r\n} from 'server/src/third_party_tasks/util.ts';\r\nimport {\r\n  createItem,\r\n  createUpdate,\r\n  getBoards,\r\n  getMondayPreviewData,\r\n  addAssignees,\r\n  setItemStatus,\r\n  createSubItem,\r\n  canCreateSubItems,\r\n  findOldestUpdate,\r\n  uploadFile,\r\n  createWebhook,\r\n} from 'server/src/third_party_tasks/monday/api.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport {\r\n  taskTitleFromMessageContent,\r\n  textFromNodeRecursive,\r\n  todoNodesFromMessage,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { messageContentToMondayHtml } from 'server/src/third_party_tasks/asana/util.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { MONDAY_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { pluralize } from '@cord-sdk/react/common/util.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport type { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { TaskThirdPartySubscriptionEntity } from 'server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts';\r\nimport { MONDAY_EVENTS_PATH_BASE } from 'server/src/public/routes/MainRouter.ts';\r\nimport { API_SERVER_HOST } from 'common/const/Urls.ts';\r\nimport { getRedis } from 'server/src/redis/index.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\ntype MondayCredentials = {\r\n  accessToken: string;\r\n};\r\n\r\nasync function getMondayCredentials(\r\n  viewer: Viewer,\r\n): Promise<MondayCredentials | null> {\r\n  try {\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const key = cacheKey({ type: 'monday_credentials', userID, orgID });\r\n\r\n    let credentials = cache.get<MondayCredentials>(key);\r\n    if (credentials !== undefined) {\r\n      return credentials;\r\n    }\r\n\r\n    const externalData = await getExternalAuthData(viewer, 'monday');\r\n    if (externalData === null) {\r\n      return null;\r\n    }\r\n\r\n    const { accessToken } = externalData;\r\n\r\n    credentials = {\r\n      accessToken,\r\n    };\r\n\r\n    // Monday provides an access token that never expires, arbitrarily cache it\r\n    // for a year\r\n    cache.set<MondayCredentials>(key, credentials, 60 * 60 * 24 * 365);\r\n\r\n    return credentials;\r\n  } catch (e) {\r\n    handleThirdPartyException('getMondayCredentials', e, 'monday', viewer);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function fetchMondayBoards(\r\n  viewer: Viewer,\r\n): Promise<MondayBoard[]> {\r\n  try {\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (!credentials) {\r\n      return [];\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    return await getBoards(accessToken);\r\n  } catch (e) {\r\n    handleThirdPartyException('fetchMondayBoards', e, 'monday', viewer);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function createMondayTask(viewer: Viewer, task: TaskEntity) {\r\n  try {\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n    const { accessToken } = credentials;\r\n    const message = await MessageEntity.findByPk(task.messageID);\r\n    if (!message) {\r\n      throw new Error(\r\n        `Failed to fetch message ${task.messageID} linked to task ${task.id}`,\r\n      );\r\n    }\r\n    const title = taskTitleFromMessageContent(message.content);\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'monday');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const htmlNotes = messageContentToMondayHtml(message.content, footerText);\r\n    const preferences = await getConnectionPreferences(viewer);\r\n    if (!preferences) {\r\n      throw new Error(\r\n        `Could not get Monday connection preferences, which we need to choose the Monday board, when creating task ${task.id}`,\r\n      );\r\n    }\r\n    const itemID = await createItem(\r\n      accessToken,\r\n      preferences.boardID,\r\n      preferences.groupID,\r\n      title,\r\n      htmlNotes,\r\n    );\r\n\r\n    const previewData = await getMondayPreviewData(accessToken, itemID);\r\n\r\n    const externalReference = await TaskThirdPartyReference.create({\r\n      taskID: task.id,\r\n      externalID: itemID,\r\n      externalConnectionType: 'monday',\r\n      previewData,\r\n    });\r\n\r\n    // Initial done state\r\n    if (task.done) {\r\n      await updateMondayTask(viewer, externalReference, true);\r\n    }\r\n    await ensureWebhook(viewer, accessToken, preferences.boardID);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to create Monday task for task ${task.id}`,\r\n      e,\r\n      'monday',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nasync function getConnectionPreferences(viewer: Viewer) {\r\n  const userID = assertViewerHasUser(viewer);\r\n  const response = await UserPreferenceEntity.findOne({\r\n    where: {\r\n      userID,\r\n      key: MONDAY_CONNECTION_PREFERENCES,\r\n    },\r\n  });\r\n\r\n  return response ? (response.value as MondayConnectionPreferences) : undefined;\r\n}\r\n\r\nexport async function addMondayAssignees(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  newAssigneeUserIDs: UUID[],\r\n) {\r\n  const logger = new Logger(viewer);\r\n  try {\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const thirdPartyReference = await TaskThirdPartyReference.findForTask(\r\n      taskID,\r\n      'monday',\r\n    );\r\n    if (!thirdPartyReference) {\r\n      return;\r\n    }\r\n\r\n    const itemID = thirdPartyReference.externalID;\r\n\r\n    const [matchedAccountIDs, unmatchedUsers] =\r\n      await getThirdPartyMatchedAccounts(viewer, newAssigneeUserIDs, 'monday');\r\n\r\n    await addAssignees(accessToken, itemID, matchedAccountIDs, logger);\r\n\r\n    await updateItemPreviewData(accessToken, thirdPartyReference);\r\n\r\n    if (unmatchedUsers.length > 0) {\r\n      await createUpdate(\r\n        accessToken,\r\n        itemID,\r\n        unmatchedUsersText(unmatchedUsers),\r\n      );\r\n    }\r\n  } catch (e) {\r\n    handleThirdPartyException(`updateMondayAssignees`, e, 'monday', viewer);\r\n  }\r\n}\r\n\r\nasync function updateItemPreviewData(\r\n  accessToken: string,\r\n  externalReference: TaskThirdPartyReference,\r\n) {\r\n  // only update the preview if this is not a TODO issue\r\n  if (!externalReference.taskTodoID) {\r\n    const itemID = externalReference.externalID;\r\n    const previewData = await getMondayPreviewData(accessToken, itemID);\r\n    await externalReference.update({ previewData });\r\n    await publishMessageUpdateForTask(externalReference);\r\n  }\r\n}\r\n\r\nfunction unmatchedUsersText(noMatchUsers: UserEntity[]) {\r\n  if (noMatchUsers.length === 0) {\r\n    return '';\r\n  }\r\n  return [\r\n    'This task was assigned to the following Cord users who did not have Monday connected:',\r\n    ...noMatchUsers.map((user) => `${userDisplayName(user)} (${user.email})`),\r\n  ].join('\\n');\r\n}\r\n\r\nexport async function updateMondayTask(\r\n  viewer: Viewer,\r\n  externalReference: TaskThirdPartyReference,\r\n  done: boolean,\r\n) {\r\n  const logger = new Logger(viewer);\r\n  try {\r\n    if (externalReference.externalConnectionType !== 'monday') {\r\n      throw new Error(\r\n        `Expected connection type \"monday\" but got ${externalReference.externalConnectionType} instead.`,\r\n      );\r\n    }\r\n\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    await setItemStatus(\r\n      accessToken,\r\n      externalReference.externalID,\r\n      done,\r\n      logger,\r\n    );\r\n\r\n    await updateItemPreviewData(accessToken, externalReference);\r\n  } catch (e) {\r\n    handleThirdPartyException('updateMondayTask', e, 'monday', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nexport async function createMondaySubtasks(\r\n  viewer: Viewer,\r\n  taskID: UUID,\r\n  todos: TaskTodoEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (!credentials) {\r\n      return;\r\n    }\r\n\r\n    const { accessToken } = credentials;\r\n\r\n    const [task, thirdPartyReference] = await Promise.all([\r\n      TaskEntity.findByPk(taskID),\r\n      TaskThirdPartyReference.findForTask(taskID, 'monday'),\r\n    ]);\r\n\r\n    if (!task || !thirdPartyReference) {\r\n      return;\r\n    }\r\n\r\n    const { messageID } = task;\r\n\r\n    const message = await MessageEntity.findByPk(messageID);\r\n    if (!message) {\r\n      return;\r\n    }\r\n\r\n    const itemID = thirdPartyReference.externalID;\r\n    if (!(await canCreateSubItems(accessToken, itemID))) {\r\n      return;\r\n    }\r\n    const createdTodoIDs = new Set(todos.map((todo) => todo.id));\r\n    const todoNodes = todoNodesFromMessage(message.content).filter((node) =>\r\n      createdTodoIDs.has(node.todoID),\r\n    );\r\n\r\n    let footerText = await getTaskFooterText(viewer, message, 'monday');\r\n    if (typeof footerText !== 'string') {\r\n      footerText = '';\r\n    }\r\n\r\n    const description = messageContentToMondayHtml([], footerText);\r\n\r\n    const subItemIDs = await Promise.all(\r\n      todoNodes.map((todoNode) =>\r\n        createSubItem(\r\n          accessToken,\r\n          itemID,\r\n          textFromNodeRecursive(todoNode),\r\n          description,\r\n        ),\r\n      ),\r\n    );\r\n\r\n    const externalReferences = (\r\n      await Promise.all(\r\n        subItemIDs.map((subItemID, i) => {\r\n          if (!subItemID) {\r\n            return;\r\n          }\r\n\r\n          return TaskThirdPartyReference.create({\r\n            taskID: taskID,\r\n            externalID: subItemID,\r\n            externalConnectionType: 'monday',\r\n            taskTodoID: todoNodes[i].todoID,\r\n            previewData: null,\r\n          });\r\n        }),\r\n      )\r\n    ).filter(isDefined);\r\n\r\n    // Initial done state\r\n    await Promise.all(\r\n      todoNodes.map((todoNode, i) => {\r\n        if (!todos.find(({ id }) => todoNode.todoID === id)?.done) {\r\n          return null;\r\n        }\r\n\r\n        const externalReference = externalReferences.find(\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          (externalReference) => externalReference.externalID === subItemIDs[i],\r\n        );\r\n        if (!externalReference) {\r\n          return null;\r\n        }\r\n\r\n        return updateMondayTask(viewer, externalReference, true);\r\n      }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException('createMondaySubtasks', e, 'monday', viewer);\r\n    return;\r\n  }\r\n}\r\n\r\nexport async function addMondayTaskAttachments(\r\n  viewer: Viewer,\r\n  itemID: string,\r\n  files: FileEntity[],\r\n) {\r\n  try {\r\n    const credentials = await getMondayCredentials(viewer);\r\n    if (credentials === null) {\r\n      return;\r\n    }\r\n    const { accessToken } = credentials;\r\n    const s3BucketLoader = new S3BucketLoader(viewer);\r\n\r\n    const updateID = await findOldestUpdate(accessToken, itemID);\r\n    if (!updateID) {\r\n      return;\r\n    }\r\n    await Promise.all(\r\n      files\r\n        .filter((file) => file.uploadStatus === 'uploaded')\r\n        .map(async (file) => {\r\n          const url = await file.getSignedDownloadURL(s3BucketLoader);\r\n          const response = await fetch(url);\r\n\r\n          if (response.status === 200) {\r\n            await uploadFile(\r\n              accessToken,\r\n              updateID,\r\n              file.name,\r\n              file.mimeType,\r\n              file.size,\r\n              response.body!,\r\n            );\r\n          } else {\r\n            throw new Error(\r\n              `failed to attach file ${file.id} to Monday task ${itemID}`,\r\n            );\r\n          }\r\n        }),\r\n    );\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to attach file to Monday task ${itemID}`,\r\n      e,\r\n      'monday',\r\n      viewer,\r\n    );\r\n  }\r\n}\r\n\r\nasync function ensureWebhook(\r\n  viewer: Viewer,\r\n  accessToken: string,\r\n  boardID: string,\r\n) {\r\n  // Prevent two different requests from executing this code within 60 seconds,\r\n  // to prevent a race condition from causing multiple subscriptions to the same\r\n  // board\r\n  if (\r\n    (await getRedis().incrAndExpire(\r\n      `subscription-create-monday-${boardID}`,\r\n      60,\r\n    )) !== 1\r\n  ) {\r\n    return;\r\n  }\r\n  const subscription = await TaskThirdPartySubscriptionEntity.findOne({\r\n    where: {\r\n      externalConnectionType: 'monday',\r\n      'subscriptionDetails.boardID': boardID,\r\n    },\r\n  });\r\n  if (subscription) {\r\n    return;\r\n  }\r\n  const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n  const id = uuid();\r\n  const url = `https://${API_SERVER_HOST}${MONDAY_EVENTS_PATH_BASE}/${id}`;\r\n  const webhookID = await createWebhook(accessToken, boardID, url);\r\n  if (webhookID) {\r\n    await TaskThirdPartySubscriptionEntity.create({\r\n      id,\r\n      userID,\r\n      orgID,\r\n      externalConnectionType: 'monday',\r\n      subscriptionDetails: {\r\n        boardID,\r\n        webhookID,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ntype MondayWebhookEventCommon = {\r\n  boardId: number;\r\n  pulseId: number;\r\n  columnId: string;\r\n  type: string;\r\n};\r\n\r\ntype MondayAssigneeValue = {\r\n  personsAndTeams?: Array<{\r\n    id: number;\r\n    kind: 'person' | 'team';\r\n  }>;\r\n};\r\n\r\ntype MondayWebhookAssigneeEvent = MondayWebhookEventCommon & {\r\n  columnType: 'multiple-person';\r\n  // A null value appears to indicate no assignees\r\n  value: MondayAssigneeValue | null;\r\n  previousValue: MondayAssigneeValue | null;\r\n};\r\n\r\ntype MondayStatusValue = {\r\n  label: {\r\n    index: number;\r\n    is_done: boolean;\r\n  };\r\n};\r\n\r\ntype MondayWebhookStatusEvent = MondayWebhookEventCommon & {\r\n  columnType: 'color';\r\n  // A null value sometimes appears to indicate the default grey value\r\n  value: MondayStatusValue | null;\r\n  previousValue: MondayStatusValue | null;\r\n};\r\n\r\nexport type MondayWebhookEvent =\r\n  | MondayWebhookAssigneeEvent\r\n  | MondayWebhookStatusEvent;\r\n\r\nexport async function webhookUpdateAssignee(\r\n  itemID: string,\r\n  event: MondayWebhookAssigneeEvent,\r\n) {\r\n  try {\r\n    const entities = await findTaskAndMessageEntitiesFromExternalTaskID(\r\n      itemID,\r\n      'monday',\r\n    );\r\n\r\n    if (!entities) {\r\n      return;\r\n    }\r\n\r\n    const { taskEntity, messageEntity, thirdPartyTaskEntity } = entities;\r\n\r\n    const previewData =\r\n      thirdPartyTaskEntity.previewData as MondayItemPreviewData | null;\r\n    // Monday can have multiple assignee columns, and we choose one in the\r\n    // preview data to be the one we consider canonical, so ignore updates from\r\n    // any other assignee column.\r\n    if (previewData?.assigneeColumnID !== event.columnId) {\r\n      return;\r\n    }\r\n\r\n    const newIDs = (event.value?.personsAndTeams ?? []).map((pat) =>\r\n      pat.id.toString(),\r\n    );\r\n    const oldIDs = (event.previousValue?.personsAndTeams ?? []).map((pat) =>\r\n      pat.id.toString(),\r\n    );\r\n\r\n    const toRemove = oldIDs.filter((id) => !newIDs.includes(id));\r\n    const toAdd = newIDs.filter((id) => !oldIDs.includes(id));\r\n\r\n    const taskID = taskEntity.id;\r\n\r\n    const { orgID } = messageEntity;\r\n\r\n    await Promise.all([\r\n      ...toRemove.map(async (id) => {\r\n        const thirdPartyConnection = await ThirdPartyConnectionEntity.findOne({\r\n          where: { externalID: id, orgID },\r\n        });\r\n        if (!thirdPartyConnection) {\r\n          anonymousLogger().info(\r\n            `Could not find Monday user ${id} as a Cord user`,\r\n          );\r\n          return;\r\n        } else {\r\n          const { userID } = thirdPartyConnection;\r\n          // removes the assignee that was unassigned from Monday in Cord\r\n          return await TaskAssigneeEntity.destroy({\r\n            where: { taskID, userID, orgID },\r\n          });\r\n        }\r\n      }),\r\n      ...toAdd.map(async (id) => {\r\n        const thirdPartyConnection = await ThirdPartyConnectionEntity.findOne({\r\n          where: { externalID: id, orgID },\r\n        });\r\n        if (!thirdPartyConnection) {\r\n          anonymousLogger().info(\r\n            `Could not find Monday user ${id} as a Cord user`,\r\n          );\r\n        } else {\r\n          const { userID } = thirdPartyConnection;\r\n          // check if entity already exists as when we add an assignee on a new\r\n          // task, because of the way the mutators work the webhook thinks this\r\n          // is an update.\r\n          await TaskAssigneeEntity.findOrCreate({\r\n            where: { taskID, userID, orgID },\r\n          });\r\n        }\r\n      }),\r\n    ]);\r\n\r\n    await thirdPartyTaskEntity.update({\r\n      previewData: {\r\n        ...previewData,\r\n        assignee: newIDs.length\r\n          ? // NOTE(flooey): Ideally we would use the person's name, but it's not\r\n            // delivered in the event, so we would have to call the API to get\r\n            // it\r\n            pluralize(newIDs.length, 'person', 'people')\r\n          : null,\r\n      },\r\n    });\r\n    await publishMessageUpdateForTask(thirdPartyTaskEntity);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to update Monday assignee in task ${itemID}`,\r\n      e,\r\n      'monday',\r\n    );\r\n  }\r\n}\r\n\r\nexport async function webhookUpdateStatus(\r\n  itemID: string,\r\n  event: MondayWebhookStatusEvent,\r\n) {\r\n  try {\r\n    const entities = await findTaskAndMessageEntitiesFromExternalTaskID(\r\n      itemID,\r\n      'monday',\r\n    );\r\n\r\n    if (!entities) {\r\n      return;\r\n    }\r\n\r\n    const { taskEntity, thirdPartyTaskEntity } = entities;\r\n\r\n    const previewData =\r\n      thirdPartyTaskEntity.previewData as MondayItemPreviewData | null;\r\n    // Monday can have multiple status columns, and we choose one in the preview\r\n    // data to be the one we consider canonical, so ignore updates from any\r\n    // other status column.\r\n    if (previewData?.statusColumnID !== event.columnId) {\r\n      return;\r\n    }\r\n\r\n    await taskEntity.update({\r\n      done: !!event.value?.label.is_done,\r\n    });\r\n\r\n    await thirdPartyTaskEntity.update({\r\n      previewData: {\r\n        ...previewData,\r\n        done: !!event.value?.label.is_done,\r\n      },\r\n    });\r\n    await publishMessageUpdateForTask(thirdPartyTaskEntity);\r\n  } catch (e) {\r\n    handleThirdPartyException(\r\n      `Failed to update Monday status in task ${itemID}`,\r\n      e,\r\n      'monday',\r\n    );\r\n  }\r\n}\r\n", "import FormData from 'form-data';\r\nimport { unique } from 'radash';\r\n\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { MONDAY_AUTH_REDIRECT_URL } from 'common/util/oauth.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type {\r\n  JsonValue,\r\n  MondayBoard,\r\n  MondayItemPreviewData,\r\n} from 'common/types/index.ts';\r\nimport { thirdPartyGraphQLRequest } from 'server/src/third_party_tasks/util.ts';\r\n\r\ntype UserInfoQueryResult = {\r\n  me: {\r\n    id: number;\r\n    email: string;\r\n  };\r\n  boards: Array<{\r\n    id: string;\r\n    subitem_board?: {\r\n      id: string;\r\n    };\r\n  }>;\r\n};\r\n\r\nexport async function completeOAuthFlow(\r\n  code: string,\r\n): Promise<[string, UserInfoQueryResult]> {\r\n  const params = new URLSearchParams();\r\n  params.append('client_id', env.MONDAY_APP_CLIENT_ID);\r\n  params.append('client_secret', env.MONDAY_APP_CLIENT_SECRET);\r\n  params.append('redirect_uri', MONDAY_AUTH_REDIRECT_URL);\r\n  params.append('code', code);\r\n  const response = await fetch('https://auth.monday.com/oauth2/token', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: params,\r\n  });\r\n\r\n  const { access_token } = await response.json();\r\n\r\n  const userInfo = await getUserInfo(access_token);\r\n  if (!userInfo) {\r\n    throw new Error('Could not fetch Monday user information.');\r\n  }\r\n\r\n  return [access_token, userInfo];\r\n}\r\n\r\nasync function apiRequest<T extends JsonValue = JsonValue>(\r\n  query: string,\r\n  accessToken: string,\r\n  variables: object | null = null,\r\n): Promise<T> {\r\n  return await thirdPartyGraphQLRequest(\r\n    'monday',\r\n    query,\r\n    accessToken,\r\n    variables,\r\n  );\r\n}\r\n\r\nasync function getUserInfo(\r\n  accessToken: string,\r\n): Promise<UserInfoQueryResult | null> {\r\n  const query = `\r\n    query UserInfo {\r\n      me {\r\n        id\r\n        email\r\n      }\r\n      boards {\r\n        id\r\n        subitem_board {\r\n          id\r\n        }\r\n      }\r\n    }`;\r\n\r\n  return await apiRequest<UserInfoQueryResult>(query, accessToken);\r\n}\r\n\r\nexport async function getBoards(accessToken: string): Promise<MondayBoard[]> {\r\n  const query = `\r\n  query Boards {\r\n    boards {\r\n      id\r\n      name\r\n      subitem_board {\r\n        id\r\n      }\r\n      groups {\r\n        id\r\n        title\r\n        position\r\n      }\r\n    }\r\n  }`;\r\n\r\n  const responseJson = await apiRequest<{ boards: MondayBoard[] }>(\r\n    query,\r\n    accessToken,\r\n  );\r\n\r\n  // Monday handles subitems by making them items on a different, hidden board\r\n  // from the board the parent item is on.  It doesn't make sense to let users\r\n  // add items directly to those boards, so filter them out.\r\n  return removeSubitemBoards(responseJson.boards);\r\n}\r\n\r\nexport function removeSubitemBoards<\r\n  T extends UserInfoQueryResult['boards'][number],\r\n>(boards: T[] | null | undefined): T[] {\r\n  return boards\r\n    ? boards.filter(\r\n        (board) =>\r\n          !boards.some(\r\n            (otherBoard) => board.id === otherBoard.subitem_board?.id,\r\n          ),\r\n      )\r\n    : [];\r\n}\r\n\r\nexport async function createUpdate(\r\n  accessToken: string,\r\n  itemID: string,\r\n  text: string,\r\n) {\r\n  const query = `\r\n    mutation CreateUpdate($itemID: Int!, $text: String!) {\r\n      create_update(item_id: $itemID, body: $text) {\r\n        id\r\n      }\r\n    }`;\r\n  await apiRequest(query, accessToken, {\r\n    itemID: parseInt(itemID, 10),\r\n    text,\r\n  });\r\n}\r\n\r\nexport async function createItem(\r\n  accessToken: string,\r\n  boardID: string,\r\n  groupID: string | undefined,\r\n  title: string,\r\n  update: string,\r\n) {\r\n  const mutation = `\r\n    mutation CreateItem($boardID: Int!, $groupID: String, $title: String!) {\r\n      create_item(board_id: $boardID, group_id: $groupID, item_name: $title) {\r\n        id\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<{ create_item?: { id?: string } }>(\r\n    mutation,\r\n    accessToken,\r\n    {\r\n      boardID: parseInt(boardID, 10),\r\n      groupID,\r\n      title,\r\n    },\r\n  );\r\n  const itemID = responseJson?.create_item?.id;\r\n  if (!itemID) {\r\n    throw new Error(\"Didn't receive an ID back from Monday\");\r\n  }\r\n  await createUpdate(accessToken, itemID, update);\r\n  return itemID;\r\n}\r\n\r\nexport async function createSubItem(\r\n  accessToken: string,\r\n  parentItemID: string,\r\n  title: string,\r\n  update: string,\r\n) {\r\n  const mutation = `\r\n    mutation CreateSubItem($parentItemID: Int!, $title: String!) {\r\n      create_subitem(parent_item_id: $parentItemID, item_name: $title) {\r\n        id\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<{ create_subitem?: { id?: string } }>(\r\n    mutation,\r\n    accessToken,\r\n    {\r\n      parentItemID: parseInt(parentItemID, 10),\r\n      title,\r\n    },\r\n  );\r\n  const subItemID = responseJson?.create_subitem?.id;\r\n  if (!subItemID) {\r\n    throw new Error(\"Didn't receive an ID back from Monday\");\r\n  }\r\n  await createUpdate(accessToken, subItemID, update);\r\n  return subItemID;\r\n}\r\n\r\ntype SubItemCheckResponse = {\r\n  items: Array<{\r\n    board: {\r\n      columns: Array<{\r\n        type: string;\r\n      }>;\r\n    };\r\n  }>;\r\n};\r\n\r\nexport async function canCreateSubItems(\r\n  accessToken: string,\r\n  itemID: string,\r\n): Promise<boolean> {\r\n  const query = `\r\n    query SubItemCheck($itemID: Int!) {\r\n      items(ids: [$itemID]) {\r\n        board {\r\n          columns {\r\n            type\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<SubItemCheckResponse>(\r\n    query,\r\n    accessToken,\r\n    {\r\n      itemID: parseInt(itemID, 10),\r\n    },\r\n  );\r\n  return !!responseJson.items[0].board.columns.some(\r\n    (c) => c.type === 'subtasks',\r\n  );\r\n}\r\n\r\ntype PreviewDataResponse = {\r\n  me: {\r\n    account: {\r\n      slug: string;\r\n    };\r\n  };\r\n  items: Array<{\r\n    name: string;\r\n    board: {\r\n      id: string;\r\n      columns: Array<ColumnData>;\r\n    };\r\n    column_values: Array<{\r\n      id: string;\r\n      type: string;\r\n      value: string | null;\r\n    }>;\r\n  }>;\r\n};\r\n\r\nexport async function getMondayPreviewData(\r\n  accessToken: string,\r\n  itemID: string,\r\n): Promise<MondayItemPreviewData> {\r\n  const query = `\r\n    query PreviewData($itemID: Int!) {\r\n      me {\r\n        account {\r\n          slug\r\n        }\r\n      }\r\n      items(ids: [$itemID]) {\r\n        name\r\n        board {\r\n          id\r\n          columns {\r\n            id\r\n            type\r\n            settings_str\r\n          }\r\n        }\r\n        column_values {\r\n          id\r\n          type\r\n          value\r\n        }\r\n      }\r\n    }\r\n  `;\r\n  const responseJson = await apiRequest<PreviewDataResponse>(\r\n    query,\r\n    accessToken,\r\n    { itemID: parseInt(itemID, 10) },\r\n  );\r\n  const item = responseJson.items[0];\r\n  const assigneeColumn = item.column_values.find(\r\n    (c) => c.type === 'multiple-person',\r\n  );\r\n  const assigneeIDs: string[] = assigneeColumn?.value\r\n    ? // Monday can have the same person assigned multiple times (?!), so\r\n      // uniqify the list of assignees\r\n      unique(\r\n        JSON.parse(assigneeColumn.value)?.personsAndTeams?.map(\r\n          (p: { id: string }) => p.id,\r\n        ) ?? [],\r\n      )\r\n    : [];\r\n  // Mirror the behavior for Cord tasks: when assigned to 1 person, show their\r\n  // name; when assigned to 2+ people, show \"N people\"\r\n  let assignee = undefined;\r\n  if (assigneeIDs.length === 1) {\r\n    const userQuery = `\r\n      query UserQuery($userID: Int!) {\r\n        users(ids: [$userID]) {\r\n          name\r\n        }\r\n      }`;\r\n    const userResponseJson = await apiRequest<{\r\n      users: Array<{ name: string }>;\r\n    }>(userQuery, accessToken, { userID: parseInt(assigneeIDs[0], 10) });\r\n    assignee = userResponseJson.users[0]?.name;\r\n  } else if (assigneeIDs.length > 0) {\r\n    assignee = `${assigneeIDs.length} people`;\r\n  }\r\n  const doneColumn = findDoneColumn(item.board.columns);\r\n  let done = false;\r\n  if (doneColumn) {\r\n    const doneColumnValue = item.column_values.find(\r\n      (cv) => cv.id === doneColumn.id,\r\n    );\r\n    if (doneColumnValue?.value) {\r\n      const index = JSON.parse(doneColumnValue.value).index;\r\n      done = doneColumn.doneValues.includes(index);\r\n    }\r\n  }\r\n  return {\r\n    title: item.name,\r\n    url: `https://${responseJson.me.account.slug}.monday.com/boards/${item.board.id}/pulses/${itemID}`,\r\n    assignee,\r\n    done,\r\n    assigneeColumnID: assigneeColumn?.id,\r\n    statusColumnID: doneColumn?.id,\r\n  };\r\n}\r\n\r\ntype AssigneeDataResponse = {\r\n  items: Array<{\r\n    board: {\r\n      id: string;\r\n    };\r\n    column_values: Array<{\r\n      id: string;\r\n      type: string;\r\n      value: string | null;\r\n    }>;\r\n  }>;\r\n};\r\n\r\ntype PersonColumnValue = {\r\n  personsAndTeams: Array<{\r\n    id: number;\r\n    kind: 'person' | 'team';\r\n  }>;\r\n};\r\n\r\nexport async function addAssignees(\r\n  accessToken: string,\r\n  itemID: string,\r\n  assignees: string[],\r\n  logger: Logger,\r\n) {\r\n  const query = `\r\n    query AssigneeData($itemID: Int!) {\r\n      items(ids: [$itemID]) {\r\n        board {\r\n          id\r\n        }\r\n        column_values {\r\n          id\r\n          type\r\n          value\r\n        }\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<AssigneeDataResponse>(\r\n    query,\r\n    accessToken,\r\n    { itemID: parseInt(itemID, 10) },\r\n  );\r\n  const item = responseJson.items[0];\r\n  const firstPersonColumn = item.column_values.find(\r\n    (c) => c.type === 'multiple-person',\r\n  );\r\n  if (!firstPersonColumn) {\r\n    // Nobody can be assigned, which is a bummer\r\n    logger.error('No person column found when trying to assign a Monday task', {\r\n      boardID: item.board.id,\r\n      itemID,\r\n    });\r\n    return;\r\n  }\r\n  const columnValue = JSON.parse(\r\n    firstPersonColumn.value ?? '{\"personsAndTeams\": []}',\r\n  ) as PersonColumnValue;\r\n\r\n  const existingIDs = columnValue.personsAndTeams.map((p) => p.id.toString());\r\n\r\n  columnValue.personsAndTeams.push(\r\n    ...assignees\r\n      .filter((a) => !existingIDs.includes(a))\r\n      .map((a) => ({ id: parseInt(a, 10), kind: 'person' as const })),\r\n  );\r\n  const mutation = `\r\n    mutation AssignItem($boardID: Int!, $itemID: Int!, $columnID: String!, $assignees: JSON!) {\r\n      change_column_value(board_id: $boardID, item_id: $itemID, column_id: $columnID, value: $assignees) {\r\n        id\r\n      }\r\n    }`;\r\n  await apiRequest(mutation, accessToken, {\r\n    itemID: parseInt(itemID, 10),\r\n    boardID: parseInt(item.board.id, 10),\r\n    columnID: firstPersonColumn.id,\r\n    assignees: JSON.stringify(columnValue),\r\n  });\r\n}\r\n\r\ntype ColumnDataResponse = {\r\n  items: Array<{\r\n    board: {\r\n      id: string;\r\n      columns: Array<ColumnData>;\r\n    };\r\n  }>;\r\n};\r\n\r\ntype ColumnData = {\r\n  id: string;\r\n  type: string;\r\n  settings_str: string;\r\n};\r\n\r\ntype ColorColumnSettings = {\r\n  done_colors?: number[];\r\n  labels: Record<number, string>;\r\n};\r\n\r\nconst MONDAY_TASK_NOT_DONE_STATUS = 5;\r\nconst MONDAY_DEFAULT_DONE_COLORS = [1];\r\n\r\nexport async function setItemStatus(\r\n  accessToken: string,\r\n  itemID: string,\r\n  done: boolean,\r\n  logger: Logger,\r\n) {\r\n  const query = `\r\n    query ColumnData($itemID: Int!) {\r\n      items(ids: [$itemID]) {\r\n        board {\r\n          id\r\n          columns {\r\n            id\r\n            type\r\n            settings_str\r\n          }\r\n        }\r\n      }\r\n    }`;\r\n  const columnData = await apiRequest<ColumnDataResponse>(query, accessToken, {\r\n    itemID: parseInt(itemID, 10),\r\n  });\r\n  const item = columnData.items[0];\r\n  const doneColumn = findDoneColumn(item.board.columns);\r\n  if (!doneColumn) {\r\n    // These tasks don't have status, so we can't set it\r\n    logger.error(\r\n      'No status column found when trying to change status of a Monday task',\r\n      {\r\n        boardID: item.board.id,\r\n        itemID,\r\n      },\r\n    );\r\n    return;\r\n  }\r\n  // The color column settings only update when the user changes something, and\r\n  // only update the minimal amount, which means you need to infer some things.\r\n  // Relevant to us for figuring out the \"done\" status:\r\n  // * Each new status has an index set when it's created and it never changes\r\n  // * The done_colors field holds which indexes mean \"done\"\r\n  // * Columns start with 3 statues, with index 1 meaning \"done\", and if there's\r\n  //   no done_colors then index 1 is still the only \"done\" status\r\n  // * done_colors isn't updated when statuses are deleted, so we need to check\r\n  //   to make sure what we want is still there\r\n  // * Index 5 (which never appears in the data) is always a gray status with no\r\n  //   label that's not done; users aren't allowed to change its color or remove\r\n  //   it\r\n  const statusToSet = !done\r\n    ? MONDAY_TASK_NOT_DONE_STATUS\r\n    : doneColumn.doneValues[0];\r\n  if (!statusToSet) {\r\n    // This column doesn't have any done statuses, so we can't set it\r\n    logger.error(\r\n      'No done status found when trying to change status of a Monday task',\r\n      {\r\n        boardID: item.board.id,\r\n        itemID,\r\n      },\r\n    );\r\n    return;\r\n  }\r\n  const mutation = `\r\n    mutation UpdateStatus($boardID: Int!, $itemID: Int!, $columnID: String!, $status: String!) {\r\n      change_simple_column_value(board_id: $boardID, item_id: $itemID, column_id: $columnID, value: $status) {\r\n        id\r\n      }\r\n    }`;\r\n  await apiRequest(mutation, accessToken, {\r\n    boardID: parseInt(item.board.id, 10),\r\n    itemID: parseInt(itemID, 10),\r\n    columnID: doneColumn.id,\r\n    status: statusToSet.toString(),\r\n  });\r\n}\r\n\r\ntype DoneColumnInfo = {\r\n  id: string;\r\n  doneValues: number[];\r\n};\r\n\r\nfunction findDoneColumn(columns: ColumnData[]): DoneColumnInfo | null {\r\n  // Monday tasks can have multiple \"status\" columns, we arbitrarily pick the\r\n  // first one\r\n  const firstStatusColumn = columns.find((c) => c.type === 'color');\r\n  if (!firstStatusColumn) {\r\n    return null;\r\n  }\r\n  // The color column settings only update when the user changes something, and\r\n  // only update the minimal amount, which means you need to infer some things.\r\n  // Relevant to us for figuring out the \"done\" status:\r\n  // * Each new status has an index set when it's created and it never changes\r\n  // * The done_colors field holds which indexes mean \"done\"\r\n  // * Columns start with 3 statues, with index 1 meaning \"done\", and if there's\r\n  //   no done_colors then index 1 is still the only \"done\" status\r\n  // * done_colors isn't updated when statuses are deleted, so we need to check\r\n  //   to make sure what we want is still there\r\n  // * Index 5 (which never appears in the data) is always a gray status with no\r\n  //   label that's not done; users aren't allowed to change its color or remove\r\n  //   it\r\n  const settings = JSON.parse(\r\n    firstStatusColumn.settings_str,\r\n  ) as ColorColumnSettings;\r\n  if (!settings.done_colors) {\r\n    settings.done_colors = MONDAY_DEFAULT_DONE_COLORS;\r\n  }\r\n  return {\r\n    id: firstStatusColumn.id,\r\n    doneValues: settings.done_colors.filter((c) => c in settings.labels),\r\n  };\r\n}\r\n\r\ntype OldestUpdateResponse = {\r\n  items: Array<{\r\n    updates: Array<{\r\n      id: string;\r\n      created_at: string;\r\n    }>;\r\n  }>;\r\n};\r\n\r\nexport async function findOldestUpdate(\r\n  accessToken: string,\r\n  itemID: string,\r\n): Promise<string | null> {\r\n  const query = `\r\n    query OldestMutation($itemID: Int!) {\r\n      items(ids: [$itemID]) {\r\n        updates {\r\n          id\r\n          created_at\r\n        }\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<OldestUpdateResponse>(\r\n    query,\r\n    accessToken,\r\n    {\r\n      itemID: parseInt(itemID, 10),\r\n    },\r\n  );\r\n  const updates = responseJson.items[0].updates;\r\n  updates.sort((a, b) => a.created_at.localeCompare(b.created_at));\r\n  return updates[0]?.id ?? null;\r\n}\r\n\r\nexport async function uploadFile(\r\n  accessToken: string,\r\n  updateID: string,\r\n  filename: string,\r\n  contentType: string,\r\n  filesize: number,\r\n  stream: ReadableStream<Uint8Array>,\r\n) {\r\n  // Monday has a special API endpoint for file uploads that accepts files\r\n  // as multipart form data\r\n  const mutation = `\r\n    mutation add_file($updateID: Int!, $file: File!) {\r\n      add_file_to_update(update_id: $updateID, file: $file) {\r\n        id\r\n      }\r\n    }`;\r\n  const form = new FormData();\r\n  form.append('query', mutation, { contentType: 'application/json' });\r\n  form.append(\r\n    'variables',\r\n    JSON.stringify({ updateID: parseInt(updateID, 10) }),\r\n    { contentType: 'application/json' },\r\n  );\r\n  // This says the query variable \"file\" is found in the multipart section named\r\n  // \"attachment\"\r\n  form.append('map', JSON.stringify({ attachment: 'variables.file' }), {\r\n    contentType: 'application/json',\r\n  });\r\n  form.append('attachment', stream, {\r\n    filename,\r\n    contentType,\r\n    knownLength: filesize,\r\n  });\r\n\r\n  return await fetch('https://api.monday.com/v2/file', {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: accessToken,\r\n    },\r\n    body: form.getBuffer(),\r\n  });\r\n}\r\n\r\nexport async function createWebhook(\r\n  accessToken: string,\r\n  boardID: string,\r\n  url: string,\r\n) {\r\n  const mutation = `\r\n    mutation CreateWebhook($boardID: Int!, $url: String!) {\r\n      create_webhook(board_id:$boardID, url:$url, event:change_column_value) {\r\n        id\r\n      }\r\n    }`;\r\n  const responseJson = await apiRequest<{ create_webhook?: { id: string } }>(\r\n    mutation,\r\n    accessToken,\r\n    {\r\n      boardID: parseInt(boardID, 10),\r\n      url,\r\n    },\r\n  );\r\n  return responseJson?.create_webhook?.id ?? null;\r\n}\r\n", "import { encode } from 'html-entities';\r\nimport type {\r\n  MessageContent,\r\n  MessageNode,\r\n  MessageTextNode,\r\n} from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\n\r\nfunction textNodeToHtml(node: MessageTextNode): string {\r\n  let before = '';\r\n  let after = '';\r\n  if (node.bold) {\r\n    before += '<strong>';\r\n    after += '</strong>';\r\n  }\r\n  if (node.italic) {\r\n    before = '<em>' + before;\r\n    after += '</em>';\r\n  }\r\n  if (node.underline) {\r\n    before = '<u>' + before;\r\n    after += '</u>';\r\n  }\r\n  return before + encode(node.text) + after;\r\n}\r\n\r\n// for a list of supported html tags see:\r\n// https://developers.asana.com/docs/reading-rich-text\r\nfunction convertNodeToAsanaHtml(node: MessageNode): string {\r\n  if (node.type === undefined) {\r\n    return textNodeToHtml(node);\r\n  } else {\r\n    switch (node.type) {\r\n      case MessageNodeType.LINK:\r\n        return `<a href=\"${encodeURI(node.url)}\">${encode(\r\n          (node.children[0] as MessageTextNode).text,\r\n        )}</a>`;\r\n      case MessageNodeType.PARAGRAPH:\r\n        // Asana does not support <p>\r\n        return `${convertNodeListToAsanaHtml(node.children)}\\n`;\r\n      case MessageNodeType.TODO:\r\n      case MessageNodeType.BULLET:\r\n      case MessageNodeType.NUMBER_BULLET:\r\n        return `<li>${convertNodeListToAsanaHtml(node.children)}</li>`;\r\n      case MessageNodeType.ASSIGNEE:\r\n      case MessageNodeType.MENTION:\r\n        return encode((node.children[0] as MessageTextNode).text);\r\n      case MessageNodeType.QUOTE:\r\n        // Asana does not support <blockquote> tag\r\n        return `${convertNodeListToAsanaHtml(node.children)}\\n`;\r\n      case MessageNodeType.CODE:\r\n        return `<code>${convertNodeListToAsanaHtml(node.children)}</code>`;\r\n      case MessageNodeType.MARKDOWN:\r\n        // TODO: MARKDOWN_NODE strip markdown to plaintext or generate html?\r\n        return convertNodeListToAsanaHtml(node.children);\r\n    }\r\n  }\r\n}\r\n\r\nfunction convertNodeListToAsanaHtml(nodes: MessageNode[]) {\r\n  let html = '';\r\n  let unorderedListStarted = false;\r\n  let orderedListStarted = false;\r\n\r\n  // convert all nodes to html, but wrap consecutive sequences of <li> items\r\n  // with <ol></ol> or <ul></ul>\r\n  for (const node of nodes) {\r\n    const nodeHtml = convertNodeToAsanaHtml(node);\r\n\r\n    const isOrderedItem = node.type === MessageNodeType.NUMBER_BULLET;\r\n    const isUnorderedItem =\r\n      node.type === MessageNodeType.BULLET ||\r\n      node.type === MessageNodeType.TODO;\r\n\r\n    // end of ordered list\r\n    if (!isOrderedItem && orderedListStarted) {\r\n      orderedListStarted = false;\r\n      html += '</ol>';\r\n    }\r\n    // end of unorderedList\r\n    if (!isUnorderedItem && unorderedListStarted) {\r\n      unorderedListStarted = false;\r\n      html += '</ul>';\r\n    }\r\n\r\n    // start of ordered list\r\n    if (isOrderedItem && !orderedListStarted) {\r\n      orderedListStarted = true;\r\n      html += '<ol>';\r\n    }\r\n    // start of unorderedList\r\n    if (isUnorderedItem && !unorderedListStarted) {\r\n      unorderedListStarted = true;\r\n      html += '<ul>';\r\n    }\r\n\r\n    html += nodeHtml;\r\n  }\r\n\r\n  if (unorderedListStarted) {\r\n    html += '</ul>';\r\n  }\r\n  if (orderedListStarted) {\r\n    html += '</ol>';\r\n  }\r\n  return html;\r\n}\r\n\r\nexport function messageContentToMondayHtml(\r\n  content: MessageContent,\r\n  footer: string,\r\n): string {\r\n  return `${convertNodeListToAsanaHtml(content)}\\n${footer}`;\r\n}\r\n\r\nexport function messageContentToAsanaHtml(\r\n  content: MessageContent,\r\n  footer: string,\r\n): string {\r\n  return `<body>${convertNodeListToAsanaHtml(content)}\\n${footer}</body>`;\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport {\r\n  createAsanaTask,\r\n  updateAsanaTask,\r\n} from 'server/src/third_party_tasks/asana/actions.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { TaskLoader } from 'server/src/entity/task/TaskLoader.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport {\r\n  updateLinearTask,\r\n  createLinearTask,\r\n} from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport {\r\n  createSimpleJiraTask,\r\n  updateJiraTask,\r\n} from 'server/src/third_party_tasks/jira/actions.ts';\r\nimport { createTrelloTask } from 'server/src/third_party_tasks/trello/actions.ts';\r\nimport {\r\n  MessageAttachmentLoader,\r\n  getFileAttachmentEntities,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { FileLoader } from 'server/src/entity/file/FileLoader.ts';\r\nimport { MessageAttachmentMutator } from 'server/src/entity/message_attachment/MessageAttachmentMutator.ts';\r\nimport type {\r\n  TaskInput,\r\n  TaskInputType,\r\n  ThirdPartyConnectionType,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport {\r\n  createMondayTask,\r\n  updateMondayTask,\r\n} from 'server/src/third_party_tasks/monday/actions.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nexport class TaskMutator {\r\n  logger: Logger;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n  }\r\n\r\n  async createTask(task: TaskInput, messageID: UUID) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const entity = await TaskEntity.create({\r\n      id: task.id,\r\n      messageID,\r\n      done: task.done,\r\n      orgID,\r\n    });\r\n\r\n    await this.createExternalTask(entity, task.type);\r\n\r\n    return entity;\r\n  }\r\n\r\n  private async createExternalTask(task: TaskEntity, type: TaskInputType) {\r\n    switch (type) {\r\n      case 'jira': {\r\n        await createSimpleJiraTask(this.viewer, task);\r\n        break;\r\n      }\r\n      case 'asana': {\r\n        await createAsanaTask(this.viewer, task);\r\n        break;\r\n      }\r\n      case 'linear': {\r\n        await createLinearTask(this.viewer, task);\r\n        break;\r\n      }\r\n      case 'trello': {\r\n        await createTrelloTask(this.logger, this.viewer, task);\r\n        break;\r\n      }\r\n      case 'monday': {\r\n        await createMondayTask(this.viewer, task);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // attach existing file attachments to external task\r\n    const messageAttachmentLoader = new MessageAttachmentLoader(this.viewer);\r\n    const messageAttachments =\r\n      await messageAttachmentLoader.loadAttachmentsForMessage(task.messageID);\r\n\r\n    const fileIDs = getFileAttachmentEntities(messageAttachments)\r\n      .map((attachment) => {\r\n        switch (attachment.type) {\r\n          case MessageAttachmentType.FILE:\r\n            return (attachment.data as MessageFileAttachmentData).fileID;\r\n          case MessageAttachmentType.ANNOTATION:\r\n            return (attachment.data as MessageAnnotationAttachmentData)\r\n              .screenshotFileID;\r\n          case MessageAttachmentType.SCREENSHOT:\r\n            // TODO: Do we want to attach the screenshot to the task?\r\n            return null;\r\n          default:\r\n            return null;\r\n        }\r\n      })\r\n      .filter(isDefined);\r\n\r\n    if (fileIDs.length > 0) {\r\n      const fileLoader = new FileLoader(this.viewer);\r\n      const files = await fileLoader.loadFiles(fileIDs);\r\n      return await new MessageAttachmentMutator(\r\n        this.viewer,\r\n        this.loaders,\r\n      ).attachFilesToExternalTasks(task, files);\r\n    }\r\n    return;\r\n  }\r\n\r\n  async createOrUpdateTask(task: TaskInput, messageID: UUID) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const taskLoader = new TaskLoader(this.viewer);\r\n    const existingTask = await taskLoader.loadTask(task.id, orgID);\r\n\r\n    let lastUpdatedBy: UUID | undefined | null;\r\n    if (task.doneStatusUpdate === 'update') {\r\n      lastUpdatedBy = this.viewer.userID;\r\n    } else if (task.doneStatusUpdate === 'remove') {\r\n      lastUpdatedBy = null;\r\n    }\r\n    if (existingTask) {\r\n      const [updateCount] = await TaskEntity.update(\r\n        {\r\n          done: task.done,\r\n          ...(lastUpdatedBy !== undefined && {\r\n            doneStatusLastUpdatedBy: lastUpdatedBy,\r\n          }),\r\n        },\r\n        { where: { id: task.id, orgID } },\r\n      );\r\n\r\n      if (updateCount === 0) {\r\n        return existingTask;\r\n      } else {\r\n        const entity = await TaskEntity.findByPk(task.id);\r\n\r\n        if (entity && task.type !== 'cord') {\r\n          await this.updateOrCreateExternalTasks(entity, task.type);\r\n        }\r\n\r\n        return entity;\r\n      }\r\n    } else {\r\n      return await this.createTask(task, messageID);\r\n    }\r\n  }\r\n\r\n  private async updateOrCreateExternalTasks(\r\n    task: TaskEntity,\r\n    type: ThirdPartyConnectionType,\r\n  ) {\r\n    const externalReference = await TaskThirdPartyReference.findForTask(\r\n      task.id,\r\n      type,\r\n    );\r\n\r\n    if (externalReference) {\r\n      switch (externalReference.externalConnectionType) {\r\n        case 'asana':\r\n          return await updateAsanaTask(\r\n            this.viewer,\r\n            externalReference,\r\n            task.done,\r\n          );\r\n        case 'linear':\r\n          return await updateLinearTask(\r\n            this.viewer,\r\n            externalReference,\r\n            task.done,\r\n          );\r\n        case 'jira':\r\n          return await updateJiraTask(\r\n            this.viewer,\r\n            externalReference,\r\n            task.done,\r\n          );\r\n        case 'monday':\r\n          return await updateMondayTask(\r\n            this.viewer,\r\n            externalReference,\r\n            task.done,\r\n          );\r\n        default:\r\n          this.logger.info(\r\n            `updating of ${externalReference.externalConnectionType} is not supported yet`,\r\n          );\r\n          return null;\r\n      }\r\n    } else {\r\n      await this.createExternalTask(task, type);\r\n    }\r\n  }\r\n\r\n  // Deleting task also deletes Todos and Assignees\r\n  async deleteTaskFromMessageID(messageID: string, orgID: UUID) {\r\n    return await TaskEntity.destroy({ where: { messageID, orgID } });\r\n  }\r\n}\r\n", "import { Op } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { TaskAssigneeEntity } from 'server/src/entity/task_assignee/TaskAssigneeEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { updateJiraTaskAssigneeAndWatchers } from 'server/src/third_party_tasks/jira/actions.ts';\r\nimport { addAsanaTaskAssignees } from 'server/src/third_party_tasks/asana/actions.ts';\r\nimport { updateLinearTaskAssigneeAndSubscribers } from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport { addAssigneesToTrelloTask } from 'server/src/third_party_tasks/trello/actions.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { TaskLoader } from 'server/src/entity/task/TaskLoader.ts';\r\nimport { addMondayAssignees } from 'server/src/third_party_tasks/monday/actions.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nexport class TaskAssigneeMutator {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders,\r\n  ) {}\r\n\r\n  async createTaskAssignees(taskID: UUID, userIDs: UUID[]): Promise<UUID[]> {\r\n    if (userIDs.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    // we used to use sequelize's bulkCreate() here, but it does not behave as\r\n    // expected. See for example:\r\n    // https://github.com/sequelize/sequelize/issues/11204\r\n    const [returnedColumns] = await getSequelize().query(\r\n      `INSERT INTO\r\n      \"${TaskAssigneeEntity.tableName}\"\r\n      (\"userID\", \"taskID\", \"orgID\", \"assignerID\")\r\n      VALUES\r\n      ${userIDs.map(() => '(?)').join(',')}\r\n      ON CONFLICT DO NOTHING\r\n      RETURNING \"userID\"`, // sequelize returns column names in lower-case\r\n      {\r\n        replacements: userIDs.map((userID) => [\r\n          userID,\r\n          taskID,\r\n          orgID,\r\n          this.viewer.userID,\r\n        ]),\r\n      },\r\n    );\r\n\r\n    const newUserIDs = (returnedColumns as { userID: UUID }[]).map(\r\n      (row) => row.userID,\r\n    );\r\n\r\n    await this.updateExternalTaskAssignees(taskID, newUserIDs, userIDs);\r\n\r\n    return newUserIDs;\r\n  }\r\n\r\n  async updateTaskAssignees(taskID: UUID, userIDs: UUID[]) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const task = await new TaskLoader(this.viewer).loadTask(taskID, orgID);\r\n    const removedAssignees = await TaskAssigneeEntity.findAll({\r\n      attributes: ['userID'],\r\n      where: {\r\n        taskID,\r\n        orgID,\r\n        userID: { [Op.notIn]: userIDs },\r\n      },\r\n    });\r\n\r\n    const messageMutator = new MessageMutator(this.viewer, this.loaders);\r\n    if (task !== null && task !== undefined && removedAssignees.length > 0) {\r\n      await messageMutator.removeAssignees(task.messageID, removedAssignees);\r\n    }\r\n\r\n    await TaskAssigneeEntity.destroy({\r\n      where: {\r\n        taskID,\r\n        orgID,\r\n        userID: { [Op.notIn]: userIDs },\r\n      },\r\n    });\r\n\r\n    const newAssigneeIDs = await this.createTaskAssignees(taskID, userIDs);\r\n    // no need to update external task assignees here, it's done in createTaskAssignees()\r\n\r\n    return {\r\n      newAssigneeIDs,\r\n      removedAssigneeIDs: removedAssignees.map(({ userID }) => userID),\r\n    };\r\n  }\r\n\r\n  private async updateExternalTaskAssignees(\r\n    taskID: UUID,\r\n    newUserIDs: UUID[],\r\n    assigneeIDs: UUID[],\r\n  ) {\r\n    const externalReferences =\r\n      await TaskThirdPartyReference.findAllForTask(taskID);\r\n\r\n    return await Promise.all(\r\n      externalReferences.map((externalReference) => {\r\n        switch (externalReference.externalConnectionType) {\r\n          case 'jira':\r\n            return updateJiraTaskAssigneeAndWatchers(\r\n              this.viewer,\r\n              taskID,\r\n              assigneeIDs,\r\n            );\r\n          case 'asana':\r\n            return addAsanaTaskAssignees(this.viewer, taskID, newUserIDs);\r\n          case 'linear':\r\n            return updateLinearTaskAssigneeAndSubscribers(\r\n              this.viewer,\r\n              taskID,\r\n              assigneeIDs,\r\n            );\r\n          case 'trello':\r\n            return addAssigneesToTrelloTask(this.viewer, taskID, newUserIDs);\r\n          case 'monday':\r\n            return addMondayAssignees(this.viewer, taskID, newUserIDs);\r\n        }\r\n      }),\r\n    );\r\n  }\r\n}\r\n", "import type { UUID, Todo } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { TaskTodoEntity } from 'server/src/entity/task_todo/TaskTodoEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport {\r\n  createJiraSubtasks,\r\n  updateJiraTask,\r\n} from 'server/src/third_party_tasks/jira/actions.ts';\r\nimport {\r\n  createAsanaSubtasks,\r\n  updateAsanaTask,\r\n} from 'server/src/third_party_tasks/asana/actions.ts';\r\nimport {\r\n  createLinearSubtasks,\r\n  updateLinearTask,\r\n} from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport {\r\n  createMondaySubtasks,\r\n  updateMondayTask,\r\n} from 'server/src/third_party_tasks/monday/actions.ts';\r\n\r\nexport class TaskTodoMutator {\r\n  viewer: Viewer;\r\n  logger: Logger;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.logger = new Logger(viewer);\r\n  }\r\n\r\n  async createTaskTodos(taskID: UUID, todos: Todo[]) {\r\n    if (todos.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const entities = await TaskTodoEntity.bulkCreate(\r\n      todos.map((todo) => ({\r\n        id: todo.id,\r\n        taskID,\r\n        orgID,\r\n        done: todo.done,\r\n      })),\r\n    );\r\n\r\n    await this.createExternalSubtasks(taskID, entities);\r\n\r\n    return entities;\r\n  }\r\n\r\n  async updateTaskTodosDoneState(taskID: UUID, todos: Todo[]) {\r\n    if (todos.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const result = await Promise.all(\r\n      todos.map((todo) =>\r\n        TaskTodoEntity.update(\r\n          { done: todo.done },\r\n          { where: { id: todo.id, orgID, taskID } },\r\n        ),\r\n      ),\r\n    );\r\n\r\n    await this.updateExternalSubtasks(taskID, todos);\r\n\r\n    return result;\r\n  }\r\n\r\n  async deleteTaskTodos(taskID: UUID, todos: Todo[]) {\r\n    if (todos.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    return await TaskTodoEntity.destroy({\r\n      where: {\r\n        taskID,\r\n        orgID,\r\n        id: todos.map(({ id }) => id),\r\n      },\r\n    });\r\n  }\r\n\r\n  private async createExternalSubtasks(\r\n    taskID: UUID,\r\n    entities: TaskTodoEntity[],\r\n  ) {\r\n    const externalReferences =\r\n      await TaskThirdPartyReference.findAllForTask(taskID);\r\n\r\n    return await Promise.all(\r\n      externalReferences.map(async (externalReference) => {\r\n        switch (externalReference.externalConnectionType) {\r\n          case 'jira':\r\n            return await createJiraSubtasks(this.viewer, taskID, entities);\r\n          case 'asana':\r\n            return await createAsanaSubtasks(this.viewer, taskID, entities);\r\n          case 'linear':\r\n            return await createLinearSubtasks(this.viewer, taskID, entities);\r\n          case 'monday':\r\n            return await createMondaySubtasks(this.viewer, taskID, entities);\r\n          case 'trello':\r\n            this.logger.info(\r\n              `attaching todos to trello tasks is not supported yet`,\r\n            );\r\n            return null;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  private async updateExternalSubtasks(taskID: UUID, todos: Todo[]) {\r\n    const todoDoneState = Object.fromEntries(\r\n      todos.map((todo) => [todo.id, todo.done]),\r\n    );\r\n\r\n    const externalReferences =\r\n      await TaskThirdPartyReference.findAllForTaskTodos(\r\n        taskID,\r\n        Object.keys(todoDoneState),\r\n      );\r\n\r\n    return await Promise.all(\r\n      externalReferences.map((externalReference): Promise<any> | null => {\r\n        switch (externalReference.externalConnectionType) {\r\n          case 'jira':\r\n            return updateJiraTask(\r\n              this.viewer,\r\n              externalReference,\r\n              todoDoneState[externalReference.taskTodoID!],\r\n            );\r\n          case 'asana':\r\n            return updateAsanaTask(\r\n              this.viewer,\r\n              externalReference,\r\n              todoDoneState[externalReference.taskTodoID!],\r\n            );\r\n          case 'linear':\r\n            return updateLinearTask(\r\n              this.viewer,\r\n              externalReference,\r\n              todoDoneState[externalReference.taskTodoID!],\r\n            );\r\n          case 'monday':\r\n            return updateMondayTask(\r\n              this.viewer,\r\n              externalReference,\r\n              todoDoneState[externalReference.taskTodoID!],\r\n            );\r\n          default:\r\n            this.logger.info(\r\n              `updating of ${externalReference.externalConnectionType} is not supported yet`,\r\n            );\r\n            return null;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  // Delete any deleted todos, update existing todos, add new todos\r\n  async setTaskTodos(taskID: string, todos: Todo[]) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n    const oldTodos = await TaskTodoEntity.findAll({\r\n      where: {\r\n        taskID,\r\n        orgID,\r\n      },\r\n    });\r\n\r\n    const oldTodosMap = new Map(oldTodos.map((todo) => [todo.id, todo]));\r\n    const newTodosMap = new Map(todos.map((todo) => [todo.id, todo]));\r\n    const todosToCreate = todos.filter(\r\n      (newTodo) => !oldTodosMap.has(newTodo.id),\r\n    );\r\n    const todosToDelete = oldTodos.filter(\r\n      (oldTodo) => !newTodosMap.has(oldTodo.id),\r\n    );\r\n    const todosToUpdateDone = todos.filter(\r\n      (todo) =>\r\n        oldTodosMap.has(todo.id) &&\r\n        oldTodosMap.get(todo.id)!.done !== todo.done,\r\n    );\r\n    const promises: Promise<any>[] = [\r\n      this.deleteTaskTodos(taskID, todosToDelete),\r\n      this.updateTaskTodosDoneState(taskID, todosToUpdateDone),\r\n      this.createTaskTodos(taskID, todosToCreate),\r\n    ];\r\n    return await Promise.all(promises);\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { TaskMutator } from 'server/src/entity/task/TaskMutator.ts';\r\nimport { TaskAssigneeMutator } from 'server/src/entity/task_assignee/TaskAssigneeMutator.ts';\r\nimport { TaskTodoMutator } from 'server/src/entity/task_todo/TaskTodoMutator.ts';\r\nimport type { TaskInput } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport async function addNewMessageTasks(\r\n  viewer: Viewer,\r\n  loaders: RequestContextLoaders,\r\n  task: TaskInput,\r\n  messageID: UUID,\r\n) {\r\n  const taskMutator = new TaskMutator(viewer, loaders);\r\n  await taskMutator.createTask(task, messageID);\r\n\r\n  const taskAssigneeMutator = new TaskAssigneeMutator(viewer, loaders);\r\n  const taskAssigneeUserIDs = await taskAssigneeMutator.createTaskAssignees(\r\n    task.id,\r\n    task.assigneeIDs,\r\n  );\r\n\r\n  const taskTodoMutator = new TaskTodoMutator(viewer);\r\n  await taskTodoMutator.createTaskTodos(task.id, task.todos);\r\n  return taskAssigneeUserIDs;\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { publishNewThreadEvents } from 'server/src/entity/thread/new_thread_tasks/publishNewThreadEvents.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishEventToWebhook } from 'server/src/webhook/webhook.ts';\r\n\r\nexport async function publishNewMessageEvents(\r\n  application: ApplicationEntity,\r\n  page: PageEntity,\r\n  thread: ThreadEntity,\r\n  message: MessageEntity,\r\n  isFirstMessageInThread: boolean,\r\n  hasAnnotations: boolean,\r\n  mentionedUserIDs: string[],\r\n  context: RequestContext,\r\n  transaction?: Transaction,\r\n) {\r\n  const pageContextHash = thread.pageContextHash || page.contextHash;\r\n\r\n  if (isFirstMessageInThread) {\r\n    await publishNewThreadEvents(page.contextData, thread, transaction);\r\n  }\r\n\r\n  const notify = async () => {\r\n    if (hasAnnotations && pageContextHash) {\r\n      backgroundPromise(\r\n        publishPubSubEvent('annotations-on-page-updated', {\r\n          pageContextHash,\r\n          orgID: thread.orgID,\r\n        }),\r\n      );\r\n    }\r\n\r\n    backgroundPromise(\r\n      Promise.all([\r\n        publishPubSubEvent(\r\n          'thread-message-added',\r\n          { threadID: thread.id },\r\n          { messageID: message.id },\r\n        ),\r\n        publishEventToWebhook(application, {\r\n          type: 'thread-message-added',\r\n          threadID: thread.id,\r\n          messageID: message.id,\r\n        }),\r\n        context.segmentLogger.publishMessageSendEvent(\r\n          thread,\r\n          message,\r\n          isFirstMessageInThread,\r\n          mentionedUserIDs.length,\r\n        ),\r\n      ]),\r\n      context.logger,\r\n    );\r\n  };\r\n\r\n  if (transaction) {\r\n    transaction.afterCommit(notify);\r\n  } else {\r\n    await notify();\r\n  }\r\n}\r\n", "import { v4 as uuid } from 'uuid';\r\n\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { getActionMessageContent } from 'server/src/message/util/getActionMessageContent.ts';\r\nimport {\r\n  MessageActionIconURLs,\r\n  MessageActionTranslationKeys,\r\n} from 'common/const/MessageActions.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishEventToWebhook } from 'server/src/webhook/webhook.ts';\r\nimport { createThreadActionNotifications } from 'server/src/entity/thread/update_thread_tasks/createThreadActionNotifications.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport async function maybeUnresolveThread(\r\n  context: RequestContext,\r\n  thread: ThreadEntity,\r\n  message: MessageEntity,\r\n) {\r\n  if (thread && thread.resolvedTimestamp) {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const user = await context.loaders.userLoader.loadUser(userID);\r\n    if (!user) {\r\n      throw new Error(\"User doesn't exist?!?\");\r\n    }\r\n    const unresolveActionMessage = await new MessageMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    ).createMessage({\r\n      id: uuid(),\r\n      thread,\r\n      content: getActionMessageContent('thread_unresolved', user),\r\n      url: null,\r\n      iconURL: MessageActionIconURLs['thread_unresolved'],\r\n      translationKey: MessageActionTranslationKeys['thread_unresolved'],\r\n      type: 'action_message',\r\n      // Make sure resolve action message is displayed before the actual message in the UI\r\n      timestamp: new Date(message.timestamp.getTime() - 1),\r\n    });\r\n\r\n    const threadMutator = new ThreadMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n    await threadMutator.setThreadResolved(thread.id, false);\r\n\r\n    await Promise.all([\r\n      publishPubSubEvent('thread-properties-updated', {\r\n        threadID: thread.id,\r\n      }),\r\n      publishPubSubEvent(\r\n        'thread-filterable-properties-updated',\r\n        { orgID: thread.orgID },\r\n        {\r\n          threadID: thread.id,\r\n          changes: { resolved: { old: true, new: false } },\r\n        },\r\n      ),\r\n      createThreadActionNotifications({\r\n        context,\r\n        threadID: thread.id,\r\n        messageID: unresolveActionMessage.id,\r\n        threadActionType: 'unresolve',\r\n      }),\r\n    ]);\r\n\r\n    if (unresolveActionMessage) {\r\n      const app = await ApplicationEntity.findByPk(\r\n        unresolveActionMessage.platformApplicationID,\r\n      );\r\n      if (!app) {\r\n        throw new Error(\r\n          `Could not find app ${unresolveActionMessage.platformApplicationID} when unresolving thread`,\r\n        );\r\n      }\r\n\r\n      backgroundPromise(\r\n        Promise.all([\r\n          publishPubSubEvent(\r\n            'thread-message-added',\r\n            { threadID: unresolveActionMessage.threadID },\r\n            { messageID: unresolveActionMessage.id },\r\n          ),\r\n          publishEventToWebhook(app, {\r\n            type: 'thread-message-added',\r\n            threadID: thread.id,\r\n            messageID: unresolveActionMessage.id,\r\n          }),\r\n        ]),\r\n        context.logger,\r\n      );\r\n    }\r\n  }\r\n}\r\n", "import { APP_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nexport type MessageActionsType = 'thread_resolved' | 'thread_unresolved';\r\n\r\nexport const MessageActions: { [Key in MessageActionsType]: string } = {\r\n  thread_resolved: 'resolved this thread',\r\n  thread_unresolved: 'reopened this thread',\r\n};\r\n\r\nexport const MessageActionIconURLs: { [Key in MessageActionsType]: string } = {\r\n  thread_resolved: APP_ORIGIN + '/static/check-circle.svg',\r\n  thread_unresolved: APP_ORIGIN + '/static/arrow-circle-up-right.svg',\r\n};\r\n\r\nexport const MessageActionTranslationKeys: {\r\n  [Key in MessageActionsType]: string;\r\n} = {\r\n  thread_resolved: 'cord.thread_resolved',\r\n  thread_unresolved: 'cord.thread_unresolved',\r\n};\r\n", "import type { MessageActionsType } from 'common/const/MessageActions.ts';\r\nimport { MessageActions } from 'common/const/MessageActions.ts';\r\nimport type { MessageContent } from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport {\r\n  createMentionNode,\r\n  createMessageTextNode,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\n\r\nexport function getActionMessageContent(\r\n  type: MessageActionsType,\r\n  user: UserEntity,\r\n): MessageContent {\r\n  return [\r\n    {\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [\r\n        createMentionNode(user.id, userDisplayName(user)),\r\n        createMessageTextNode(' ' + MessageActions[type]),\r\n      ],\r\n    },\r\n  ];\r\n}\r\n", "import type { CreationAttributes, Transaction } from 'sequelize';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasPlatformUser,\r\n  viewerHasIdentity,\r\n} from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { Counter, incCounterWithAppID } from 'server/src/logging/prometheus.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishEventToWebhook } from 'server/src/webhook/webhook.ts';\r\nimport { whereAggregatedNotificationEntity } from 'server/src/public/mutations/notifications/utils.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nconst counter = Counter({\r\n  name: 'NotificationEntityCreated',\r\n  help: 'Count of created/sent notifications (raw DB rows)',\r\n  labelNames: ['appID', 'type'],\r\n});\r\n\r\nexport const markedCounter = Counter({\r\n  name: 'NotificationEntityMarkedAsRead',\r\n  help: 'Count of NotificationEntity marked as read',\r\n  labelNames: ['appID'],\r\n});\r\n\r\nexport const unmarkedCounter = Counter({\r\n  name: 'NotificationEntityMarkedAsUnread',\r\n  help: 'Count of NotificationEntity marked as unread',\r\n  labelNames: ['appID'],\r\n});\r\n\r\nexport class NotificationMutator {\r\n  viewer: Viewer;\r\n  logger: Logger;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n    this.logger = new Logger(viewer);\r\n  }\r\n\r\n  async create(\r\n    attrs: Omit<\r\n      CreationAttributes<NotificationEntity>,\r\n      'senderID' | 'platformApplicationID'\r\n    >,\r\n    transaction?: Transaction,\r\n  ): Promise<NotificationEntity> {\r\n    const { userID, platformApplicationID } = assertViewerHasPlatformUser(\r\n      this.viewer,\r\n    );\r\n    const notif = await NotificationEntity.create(\r\n      {\r\n        ...attrs,\r\n        senderID: userID,\r\n        platformApplicationID,\r\n      },\r\n      { transaction },\r\n    );\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(async () => {\r\n        await this.postCreate(notif);\r\n      });\r\n    } else {\r\n      await this.postCreate(notif);\r\n    }\r\n\r\n    return notif;\r\n  }\r\n\r\n  async createExternal(\r\n    attrs: Omit<CreationAttributes<NotificationEntity>, 'type'>,\r\n    transaction?: Transaction,\r\n  ): Promise<NotificationEntity> {\r\n    if (viewerHasIdentity(this.viewer)) {\r\n      throw new Error(\r\n        'Expected viewer to not have identity -- did you mean to use create instead of createExternal?',\r\n      );\r\n    }\r\n\r\n    const notif = await NotificationEntity.create(\r\n      {\r\n        ...attrs,\r\n        type: 'external',\r\n      },\r\n      { transaction },\r\n    );\r\n\r\n    if (transaction) {\r\n      transaction.afterCommit(async () => {\r\n        await this.postCreate(notif);\r\n      });\r\n    } else {\r\n      await this.postCreate(notif);\r\n    }\r\n\r\n    return notif;\r\n  }\r\n\r\n  private async postCreate(notif: NotificationEntity) {\r\n    counter.inc({ type: notif.type, appID: notif.platformApplicationID }, 1);\r\n\r\n    const app = await ApplicationEntity.findByPk(notif.platformApplicationID);\r\n    if (!app) {\r\n      throw new Error(`Cannot find app ${notif.platformApplicationID}`);\r\n    }\r\n\r\n    backgroundPromise(\r\n      Promise.all([\r\n        publishPubSubEvent(\r\n          'notification-added',\r\n          { userID: notif.recipientID },\r\n          { notificationID: notif.id },\r\n        ),\r\n        publishEventToWebhook(app, {\r\n          type: 'notification-created',\r\n          notificationID: notif.id,\r\n          userID: notif.recipientID,\r\n        }),\r\n      ]),\r\n    );\r\n  }\r\n\r\n  async markAsRead(notif: NotificationEntity) {\r\n    const [affectedCount] = await NotificationEntity.update(\r\n      { readStatus: 'read' },\r\n      { where: whereAggregatedNotificationEntity(notif) },\r\n    );\r\n\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'notification-read-state-updated',\r\n        { userID: notif.recipientID },\r\n        { notificationID: notif.id },\r\n      ),\r\n      this.logger,\r\n    );\r\n\r\n    incCounterWithAppID(this.viewer, markedCounter, {}, affectedCount);\r\n\r\n    return affectedCount;\r\n  }\r\n\r\n  async markAsUnread(notif: NotificationEntity) {\r\n    const [affectedCount] = await NotificationEntity.update(\r\n      { readStatus: 'unread' },\r\n      { where: whereAggregatedNotificationEntity(notif) },\r\n    );\r\n\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'notification-read-state-updated',\r\n        { userID: notif.recipientID },\r\n        { notificationID: notif.id },\r\n      ),\r\n      this.logger,\r\n    );\r\n\r\n    incCounterWithAppID(this.viewer, unmarkedCounter, {}, affectedCount);\r\n\r\n    return affectedCount;\r\n  }\r\n}\r\n", "import { nanoid } from 'nanoid';\r\nimport { CORD_TO_ORIGIN } from 'common/const/Urls.ts';\r\nimport { DEFAULT_NOTIFICATION_LOGGING_PATH } from 'server/src/public/routes/MainRouter.ts';\r\nimport type {\r\n  OutboundNotificationMetadataByType,\r\n  OutboundNotificationType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\r\nimport { NOTIFICATION_LOGGING_REDIRECT_ID_LENGTH } from 'common/const/Api.ts';\r\n\r\ntype NotificationLoggingData<Type extends OutboundNotificationType> = {\r\n  messageID: UUID;\r\n  url: string;\r\n  targetOrgID: UUID;\r\n  targetUserID: UUID | null;\r\n  type: Type;\r\n  platformApplicationID: UUID | undefined;\r\n  metadata: OutboundNotificationMetadataByType[Type];\r\n  sharerUserID: UUID;\r\n  sharerOrgID: UUID;\r\n};\r\n\r\nexport async function generateOutboundNotificationLoggingURL<\r\n  Type extends OutboundNotificationType,\r\n>({\r\n  messageID,\r\n  url,\r\n  targetOrgID,\r\n  targetUserID,\r\n  type,\r\n  metadata,\r\n  sharerUserID,\r\n  sharerOrgID,\r\n}: NotificationLoggingData<Type>): Promise<string> {\r\n  const entity = await MessageOutboundNotificationEntity.create({\r\n    id: nanoid(NOTIFICATION_LOGGING_REDIRECT_ID_LENGTH),\r\n    messageID,\r\n    url,\r\n    type,\r\n    targetUserID,\r\n    targetOrgID,\r\n    metadata,\r\n    sharerUserID,\r\n    sharerOrgID,\r\n  });\r\n\r\n  if (!entity) {\r\n    throw new Error(\r\n      `Unable to create entity for message notification ${messageID}, type ${type}, url ${url}`,\r\n    );\r\n  }\r\n\r\n  return `${CORD_TO_ORIGIN}${DEFAULT_NOTIFICATION_LOGGING_PATH}/${entity.id}`;\r\n}\r\n", "import type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport {\r\n  sendSlackMentionNotification,\r\n  sendSlackThreadActionNotification,\r\n} from 'server/src/slack/util.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'sendSlackNotificationWithDelay',\r\n  sendSlackNotificationWithDelay,\r\n);\r\n\r\ntype SendSlackNotification = {\r\n  viewerUserID: UUID | undefined;\r\n  viewerOrgID: UUID | undefined;\r\n  viewerPlatformApplicationID: UUID | undefined;\r\n  senderUserID: UUID;\r\n  senderOrgID: UUID;\r\n  senderName: string;\r\n  targetUserID: UUID;\r\n  messageID: UUID;\r\n  url: string | null;\r\n  pageName: string | null | undefined;\r\n  providerName: string | undefined;\r\n  actionText: string;\r\n};\r\nexport type SendThreadActionSlackNotificationData = SendSlackNotification & {\r\n  notificationType: 'thread_action';\r\n};\r\nexport type SendMentionSlackNotificationData = SendSlackNotification & {\r\n  notificationType: 'reply';\r\n  messageContent: MessageContent;\r\n  allImageURLs: string[];\r\n  annotationsHighlightedText: string[];\r\n};\r\nexport async function sendSlackNotificationWithDelay(\r\n  data:\r\n    | SendThreadActionSlackNotificationData\r\n    | SendMentionSlackNotificationData,\r\n) {\r\n  let viewer: Viewer;\r\n\r\n  if (!data.viewerUserID || !data.viewerOrgID) {\r\n    throw new Error(\r\n      'Trying to send slack notification without viewer userID or orgID',\r\n    );\r\n  }\r\n\r\n  if (data.viewerPlatformApplicationID) {\r\n    const [user, org] = await Promise.all([\r\n      UserEntity.findByPk(data.viewerUserID),\r\n      OrgEntity.findByPk(data.viewerOrgID),\r\n    ]);\r\n\r\n    if (!user?.externalID || !org?.externalID) {\r\n      throw new Error(\r\n        'Trying to send platform user slack notification without external user or org ID',\r\n      );\r\n    }\r\n\r\n    viewer = await Viewer.createLoggedInPlatformViewer({\r\n      user,\r\n      org,\r\n    });\r\n  } else {\r\n    viewer = Viewer.createLoggedInViewer(data.viewerUserID, data.viewerOrgID);\r\n  }\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  const message = await context.loaders.messageLoader.loadMessage(\r\n    data.messageID,\r\n  );\r\n\r\n  let canSkipSending = false;\r\n  if (\r\n    // we always want to send self-mentions\r\n    data.viewerUserID !== data.targetUserID &&\r\n    message\r\n  ) {\r\n    const lastSeen = (\r\n      await context.loaders.threadParticipantLoader.loadForUser({\r\n        userID: data.targetUserID,\r\n        threadID: message.threadID,\r\n      })\r\n    )?.lastSeenTimestamp;\r\n    canSkipSending = !!lastSeen && lastSeen >= message.timestamp;\r\n  }\r\n\r\n  if (canSkipSending) {\r\n    return;\r\n  }\r\n\r\n  const notificationData = {\r\n    context,\r\n    senderUserID: data.senderUserID,\r\n    senderOrgID: data.senderOrgID,\r\n    senderName: data.senderName,\r\n    targetUserID: data.targetUserID,\r\n    messageID: data.messageID,\r\n    url: data.url,\r\n    pageName: data.pageName,\r\n    providerName: data.providerName,\r\n    actionText: data.actionText,\r\n  };\r\n\r\n  if (data.notificationType === 'thread_action') {\r\n    await sendSlackThreadActionNotification({\r\n      ...notificationData,\r\n    });\r\n  } else {\r\n    await sendSlackMentionNotification({\r\n      ...notificationData,\r\n      // using messageContent passed to this job instead of message.content since\r\n      // message.content might have changed in the meantime\r\n      messageContent: data.messageContent,\r\n      allImageURLs: data.allImageURLs,\r\n      actionText: data.actionText,\r\n      annotationsHighlightedText: data.annotationsHighlightedText,\r\n    });\r\n  }\r\n}\r\n", "import type { NotificationChannels, UUID } from 'common/types/index.ts';\r\n\r\nexport const defaultNotificationPreference: NotificationChannels = {\r\n  slack: true,\r\n  email: true,\r\n};\r\n\r\nexport const getNotificationChannels = (\r\n  notificationChannelPreference: NotificationChannels | undefined,\r\n  targetUserID: UUID,\r\n  targetHasEmail: boolean,\r\n  isTargetConnectedToSlack: boolean,\r\n) => {\r\n  let notificationChannels: NotificationChannels =\r\n    notificationChannelPreference ?? defaultNotificationPreference;\r\n\r\n  notificationChannels = {\r\n    slack: notificationChannels.slack && isTargetConnectedToSlack,\r\n    email: notificationChannels.email && targetHasEmail,\r\n  };\r\n\r\n  return notificationChannels;\r\n};\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\n// This function finds if there is a potential corresponding, as-yet-unlinked,\r\n// Slack user for a platform user, based on whether they share an email.  This\r\n// enables us to deduplicate the mention list (based on an educated guess)\r\n\r\n// IMPORTANT:\r\n// All DB reads in this function need to be dataloaderified since this function\r\n// is being used in the userWithOrgDetails resolver and thus introducing a\r\n// non-dataloaderified function here would be costly for large orgs \uD83D\uDCA5\r\n\r\nexport async function findSlackUserEmailMatch(\r\n  context: RequestContext,\r\n  org: OrgEntity, // also platform org\r\n  targetUser: UserEntity, // i.e. the platform user\r\n) {\r\n  if (!targetUser.email) {\r\n    // you need an email to email match...\r\n    return null;\r\n  }\r\n\r\n  if (org.externalProvider !== 'platform') {\r\n    // only users from platform orgs can have a matched slack user (otherwise\r\n    // they are already a slack user!)\r\n    return null;\r\n  }\r\n\r\n  const linkedOrgID =\r\n    await context.loaders.linkedOrgsLoader.getConnectedSlackOrgID(org.id);\r\n\r\n  if (!linkedOrgID) {\r\n    // this platform org is not linked to a slack org, so there are no slack\r\n    // users to match with\r\n    return null;\r\n  }\r\n\r\n  const linkedUserID = (\r\n    await context.loaders.linkedUsersLoader.loadLinkedUserFromSourceOrgScoped(\r\n      targetUser.id,\r\n      org.id,\r\n    )\r\n  )?.linkedUserID;\r\n\r\n  if (linkedUserID) {\r\n    // platform user is already linked to slack user - no need to use email matching\r\n    return null;\r\n  }\r\n\r\n  const platformUsersWithSameEmail =\r\n    await context.loaders.userLoader.loadUserForEmailInOrg(\r\n      targetUser.email,\r\n      org.id, // platform org\r\n    );\r\n\r\n  if (platformUsersWithSameEmail.length > 1) {\r\n    // if there are other users with same email (sock puppets), don't try and match\r\n    // as it is too misleading\r\n    return null;\r\n  }\r\n\r\n  const slackProfileWithMatchingEmail =\r\n    await context.loaders.userLoader.loadUserForEmailInOrg(\r\n      targetUser.email,\r\n      linkedOrgID, // slack org\r\n    );\r\n\r\n  if (slackProfileWithMatchingEmail.length === 0) {\r\n    // no match\r\n    return null;\r\n  }\r\n\r\n  if (slackProfileWithMatchingEmail.length > 1) {\r\n    // unexpected item in the bagging area\r\n    return null;\r\n  }\r\n\r\n  const isSlackUserAlreadyLinked =\r\n    !!(await context.loaders.linkedUsersLoader.loadPlatformUserFromLinked({\r\n      linkedUserID: slackProfileWithMatchingEmail[0].id,\r\n      linkedOrgID,\r\n      sourceOrgID: org.id,\r\n    }));\r\n\r\n  if (isSlackUserAlreadyLinked) {\r\n    return null;\r\n  }\r\n  return slackProfileWithMatchingEmail[0];\r\n}\r\n\r\n// Starting with a Slack user, find if it is linked or email matched to a platform\r\n// user (for a given platform org), and if so what is that platform user's id.\r\n// This fn is sort of the opposite of the one above (Slack -> Platform not Platform->Slack),\r\n// except it will also return the platform user if it finds an explicit linking, not\r\n// just an email match\r\nexport async function getLinkedOrMatchedPlatformUser({\r\n  context,\r\n  slackUserID,\r\n  slackOrgID,\r\n  platformOrgID,\r\n}: {\r\n  context: RequestContext;\r\n  slackUserID: UUID;\r\n  slackOrgID: UUID;\r\n  platformOrgID: UUID;\r\n}): Promise<UUID | null> {\r\n  const linkedPlatformUser =\r\n    await context.loaders.linkedUsersLoader.loadPlatformUserFromLinked({\r\n      linkedUserID: slackUserID,\r\n      linkedOrgID: slackOrgID,\r\n      sourceOrgID: platformOrgID,\r\n    });\r\n\r\n  // There is an explicitly linked platform user, return that\r\n  if (linkedPlatformUser) {\r\n    return linkedPlatformUser.id;\r\n  }\r\n\r\n  const slackUserEmail = (\r\n    await context.loaders.userLoader.loadUser(slackUserID)\r\n  )?.email;\r\n\r\n  if (!slackUserEmail) {\r\n    // No email, no email linked user\r\n    return null;\r\n  }\r\n\r\n  // Look for a user in the platform org with the same email as the Slack user\r\n  const emailMatchFromLinkedPlatformOrg =\r\n    await context.loaders.userLoader.loadUserForEmailInOrg(\r\n      slackUserEmail,\r\n      platformOrgID,\r\n    );\r\n\r\n  if (emailMatchFromLinkedPlatformOrg.length !== 1) {\r\n    // No match, or multiple matches, in which case don't try and deduplicate\r\n    return null;\r\n  }\r\n\r\n  // Return the id of the platform user we've found with the same email as the\r\n  // Slack user\r\n  return emailMatchFromLinkedPlatformOrg[0].id;\r\n}\r\n", "import { URL } from 'url';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { getRedis } from 'server/src/redis/index.ts';\r\nimport { DEEP_LINK_THREAD_ID_TTL_SECONDS } from 'common/const/Timing.ts';\r\nimport { CORD_DEEP_LINK_QUERY_PARAM } from 'common/util/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nfunction makeKey(userID: UUID) {\r\n  return `deepLinkThreadID/${userID}`;\r\n}\r\n\r\nexport async function getDeepLinkThreadMessageID(\r\n  userID: UUID,\r\n): Promise<{ threadID: UUID; messageID: UUID | null } | null> {\r\n  // value: ${threadID} OR ${threadID}/${messageID} (or it doesn't exist at all)\r\n  const value = await getRedis().get(makeKey(userID));\r\n  if (value === null) {\r\n    return null;\r\n  }\r\n  const parts = value.split('/');\r\n  return {\r\n    threadID: parts[0],\r\n    messageID: parts[1],\r\n  };\r\n}\r\n\r\nexport async function setDeepLinkThreadMessageID({\r\n  userID,\r\n  threadID,\r\n  messageID,\r\n}: {\r\n  userID: UUID;\r\n  threadID: UUID;\r\n  messageID?: UUID;\r\n}) {\r\n  // value: ${threadID} OR ${threadID}/${messageID}\r\n  const key = makeKey(userID);\r\n  const value = messageID ? `${threadID}/${messageID}` : threadID;\r\n  await getRedis().set(key, value, 'EX', DEEP_LINK_THREAD_ID_TTL_SECONDS);\r\n}\r\n\r\nexport async function clearDeepLinkThreadMessageID(userID: UUID) {\r\n  const key = makeKey(userID);\r\n  await getRedis().del(key);\r\n}\r\n\r\n// also see extractDeepLinkQueryParamsV1()\r\nexport function injectDeeplinkQueryParamsV1(\r\n  logger: Logger,\r\n  url: string,\r\n  threadID: UUID,\r\n  messageID: UUID,\r\n): string {\r\n  try {\r\n    const parsed = new URL(url);\r\n    parsed.searchParams.set(\r\n      CORD_DEEP_LINK_QUERY_PARAM,\r\n      `v1_${threadID}_${messageID}`,\r\n    );\r\n    return parsed.toString();\r\n  } catch (e) {\r\n    logger.logException('failed to parse url', e, { url }, undefined, 'debug');\r\n    return url;\r\n  }\r\n}\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { NotificationChannels, UUID } from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport { NOTIFICATION_CHANNELS } from 'common/const/UserPreferenceKeys.ts';\r\nimport { getNotificationChannels } from 'common/util/notifications.ts';\r\nimport {\r\n  FeatureFlags,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { loadLinkedSlackUserOrgScoped } from 'server/src/entity/user/util.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\nimport { getFileAttachmentEntities } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport { findSlackUserEmailMatch } from 'server/src/util/findSlackUserEmailMatch.ts';\r\nimport { injectDeeplinkQueryParamsV1 } from 'server/src/deep_link_threads/index.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport function getIcon(actions: NotificationReplyAction[]) {\r\n  if (actions.includes('assign-task') || actions.includes('unassign-task')) {\r\n    // external/src/static/email/task.png\r\n    return 'task';\r\n  } else if (actions.includes('mention') && actions.includes('attach-file')) {\r\n    // external/src/static/email/paperclip.png\r\n    return 'paperclip';\r\n  } else {\r\n    // external/src/static/email/mention.png\r\n    return 'mention';\r\n  }\r\n}\r\n\r\nexport async function loadPartitionedAttachments(\r\n  context: RequestContext,\r\n  messageID: UUID,\r\n): Promise<[FileEntity[], FileEntity[], string[]]> {\r\n  const attachments =\r\n    await context.loaders.messageAttachmentLoader.loadAttachmentsForMessage(\r\n      messageID,\r\n    );\r\n\r\n  const fileIDs: UUID[] = [];\r\n  const annotationIDs: (UUID | null | undefined)[] = [];\r\n  const highlightedText: (string | null | undefined)[] = [];\r\n\r\n  getFileAttachmentEntities(attachments).forEach((attachment) => {\r\n    switch (attachment.type) {\r\n      case MessageAttachmentType.FILE: {\r\n        const attachmentData = attachment.data as MessageFileAttachmentData;\r\n        fileIDs.push(attachmentData.fileID);\r\n        break;\r\n      }\r\n      case MessageAttachmentType.ANNOTATION: {\r\n        const attachmentData =\r\n          attachment.data as MessageAnnotationAttachmentData;\r\n        annotationIDs.push(\r\n          attachmentData.blurredScreenshotFileID ??\r\n            attachmentData.screenshotFileID,\r\n        );\r\n        highlightedText.push(\r\n          attachmentData.location?.highlightedTextConfig?.textToDisplay ??\r\n            attachmentData.customHighlightedTextConfig?.textToDisplay,\r\n        );\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  return await Promise.all([\r\n    context.loaders.fileLoader.loadFiles(fileIDs),\r\n    context.loaders.fileLoader.loadFiles(annotationIDs.filter(isDefined)),\r\n    highlightedText.filter(isDefined),\r\n  ]);\r\n}\r\n\r\nexport async function getNotificationPreference(\r\n  context: RequestContext,\r\n  target: UserEntity,\r\n  orgID: UUID,\r\n  emailMatchedSlackUserID: string | undefined,\r\n) {\r\n  const notificationChannelPreference =\r\n    await context.loaders.userPreferenceLoader.loadPreferenceValueForUser<NotificationChannels>(\r\n      NOTIFICATION_CHANNELS,\r\n      target.id,\r\n    );\r\n\r\n  const notificationChannels = getNotificationChannels(\r\n    notificationChannelPreference,\r\n    target.id,\r\n    !!target.email,\r\n    !!(await loadLinkedSlackUserOrgScoped(target, context, orgID)) ||\r\n      !!emailMatchedSlackUserID,\r\n  );\r\n\r\n  const emailNotificationsEnabled = await getTypedFeatureFlagValue(\r\n    FeatureFlags.ENABLE_EMAIL_NOTIFICATIONS,\r\n    {\r\n      userID: target.id,\r\n      orgID: orgID,\r\n      platformApplicationID:\r\n        context.session.viewer.platformApplicationID ?? 'extension',\r\n      version: context.clientVersion,\r\n      customerID: context.application?.customerID,\r\n    },\r\n  );\r\n\r\n  return {\r\n    isEmailNotification:\r\n      notificationChannels.email &&\r\n      emailNotificationsEnabled &&\r\n      context.application?.enableEmailNotifications,\r\n    isSlackNotification: notificationChannels.slack,\r\n  };\r\n}\r\n\r\nexport async function getPartnerDetails(\r\n  context: RequestContext,\r\n  sender: UserEntity,\r\n) {\r\n  // Because a platform user can now mention Slack users if they link their org\r\n  // to Slack, we need to look at whether the notification sender is a platform\r\n  // user (as opposed to checking whether the target user is a platform\r\n  // user)\r\n  if (sender.platformApplicationID) {\r\n    const application = await context.loaders.applicationLoader.load(\r\n      sender.platformApplicationID,\r\n    );\r\n\r\n    return application?.customEmailTemplate ?? undefined;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// Creates common variables used between all outbound notifications types\r\nexport async function generateOutboundNotificationData({\r\n  context,\r\n  targetUserID,\r\n  message,\r\n  userID,\r\n}: {\r\n  context: RequestContext;\r\n  targetUserID: UUID;\r\n  message: MessageEntity;\r\n  userID: string;\r\n}) {\r\n  const orgID = message.orgID;\r\n  const messageID = message.id;\r\n  const threadID = message.threadID;\r\n\r\n  const [sender, target, org, targetOrgMember, thread] = await Promise.all([\r\n    context.loaders.userLoader.loadUserInAnyViewerOrg(userID),\r\n    context.loaders.userLoader.loadUser(targetUserID),\r\n    context.loaders.orgLoader.loadOrg(orgID),\r\n    context.loaders.orgMembersLoader.loadForSpecifiedPlatformOrgOrLinkedSlackOrg(\r\n      context,\r\n      targetUserID,\r\n      orgID,\r\n    ),\r\n    context.loaders.threadLoader.loadThread(threadID),\r\n  ]);\r\n\r\n  if (!thread) {\r\n    context.logger.error(`Cannot load thread ${threadID}`);\r\n    return;\r\n  }\r\n\r\n  if (!sender || !org) {\r\n    context.logger.error('Cannot load user for ' + userID, {\r\n      messageID,\r\n      threadID,\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (!target) {\r\n    context.logger.error('Cannot load target user for ' + targetUserID, {\r\n      messageID,\r\n      threadID,\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (target.state !== 'active') {\r\n    context.logger.info(\r\n      'Not sending notification to deleted user ' + targetUserID,\r\n      { messageID, threadID },\r\n    );\r\n    return;\r\n  }\r\n\r\n  if (!targetOrgMember) {\r\n    context.logger.error(\r\n      `Target user ${targetUserID} does not exist in org ${orgID}, nor in org linked to it.`,\r\n      { messageID, threadID },\r\n    );\r\n    return;\r\n  }\r\n\r\n  const emailMatchedSlackUserID = await findSlackUserEmailMatch(\r\n    context,\r\n    org,\r\n    target,\r\n  ).then((value) => value?.id);\r\n\r\n  const { isEmailNotification, isSlackNotification } =\r\n    await getNotificationPreference(\r\n      context,\r\n      target,\r\n      orgID,\r\n      emailMatchedSlackUserID,\r\n    );\r\n\r\n  if (!isEmailNotification && !isSlackNotification) {\r\n    return;\r\n  }\r\n\r\n  const [partnerDetails, queryParamDeeplinkEnabled] = await Promise.all([\r\n    getPartnerDetails(context, sender),\r\n    getTypedFeatureFlagValue(FeatureFlags.QUERY_PARAM_DEEP_LINKS, {\r\n      userID: targetUserID,\r\n      orgID: targetOrgMember.orgID,\r\n      platformApplicationID:\r\n        context.session.viewer.platformApplicationID ?? 'extension',\r\n      version: context.clientVersion,\r\n      customerID: context.application?.customerID,\r\n    }),\r\n  ]);\r\n\r\n  let pageURL = message.url ?? thread.url ?? null;\r\n  if (queryParamDeeplinkEnabled && pageURL) {\r\n    pageURL = injectDeeplinkQueryParamsV1(\r\n      context.logger,\r\n      pageURL,\r\n      threadID,\r\n      messageID,\r\n    );\r\n  }\r\n\r\n  return {\r\n    thread,\r\n    target,\r\n    targetOrgMember,\r\n    isEmailNotification,\r\n    isSlackNotification,\r\n    sender,\r\n    org,\r\n    partnerDetails,\r\n    pageURL,\r\n    emailMatchedSlackUserID,\r\n  };\r\n}\r\n", "import { encode } from 'html-entities';\r\nimport type { MessageNode, MessageTextNode } from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { Colors } from 'common/const/Colors.ts';\r\nimport { Sizes } from 'common/const/Sizes.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID,\r\n  DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID,\r\n  DEFAULT_THREAD_RESOLVE_TEMPLATE_ID,\r\n  MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID,\r\n  SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID,\r\n  THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID,\r\n} from 'server/src/email/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport {\r\n  getTypedFeatureFlagValue,\r\n  FeatureFlags,\r\n} from 'server/src/featureflags/index.ts';\r\n\r\nfunction textNodeToHtml(node: MessageTextNode): string {\r\n  let before = '';\r\n  let after = '';\r\n  if (node.bold) {\r\n    before += '<strong>';\r\n    after += '</strong>';\r\n  }\r\n  if (node.italic) {\r\n    before = '<em>' + before;\r\n    after += '</em>';\r\n  }\r\n  if (node.underline) {\r\n    before = '<u>' + before;\r\n    after += '</u>';\r\n  }\r\n  return before + encode(node.text) + after;\r\n}\r\n\r\nfunction convertNodeToHtml(node: MessageNode): string {\r\n  if (node.type === undefined) {\r\n    return textNodeToHtml(node);\r\n  } else {\r\n    switch (node.type) {\r\n      case MessageNodeType.LINK:\r\n        return `<a href=\"${encodeURI(node.url)}\">${encode(\r\n          (node.children[0] as MessageTextNode).text,\r\n        )}</a>`;\r\n      case MessageNodeType.PARAGRAPH:\r\n        return `<p>${convertNodeListToEmailHtml(node.children)}</p>`;\r\n\r\n      case MessageNodeType.TODO:\r\n      case MessageNodeType.BULLET:\r\n      case MessageNodeType.NUMBER_BULLET:\r\n        return `<li>${convertNodeListToEmailHtml(node.children)}</li>`;\r\n      case MessageNodeType.ASSIGNEE:\r\n      case MessageNodeType.MENTION:\r\n        return `<strong>${encode(\r\n          (node.children[0] as MessageTextNode).text,\r\n        )}</strong>`;\r\n      case MessageNodeType.QUOTE:\r\n        return `<blockquote style=\"border-left: 1px solid ${\r\n          Colors.GREY_LIGHT\r\n        };padding-left: ${Sizes.MEDIUM}px;\">${convertNodeListToEmailHtml(\r\n          node.children,\r\n        )}</blockquote>`;\r\n\r\n      case MessageNodeType.CODE:\r\n        return `<code>${convertNodeListToEmailHtml(node.children)}</code>`;\r\n      case MessageNodeType.MARKDOWN:\r\n        // TODO: MARKDOWN_NODE strip markdown to plaintext\r\n        return convertNodeListToEmailHtml(node.children);\r\n    }\r\n  }\r\n}\r\n\r\n// for email HTML we need to set a container around lists so it renders properly.\r\n// https://perishablepress.com/css-center-align-list-left-align-text/\r\nexport function convertNodeListToEmailHtml(nodes: MessageNode[]) {\r\n  let html = '';\r\n  let unorderedListStarted = false;\r\n  let orderedListStarted = false;\r\n\r\n  // convert all nodes to html, but wrap consecutive sequences of <li> items\r\n  // with <ol></ol> or <ul></ul>\r\n  for (const node of nodes) {\r\n    const nodeHtml = convertNodeToHtml(node);\r\n\r\n    const isOrderedItem = node.type === MessageNodeType.NUMBER_BULLET;\r\n    const isUnorderedItem =\r\n      node.type === MessageNodeType.BULLET ||\r\n      node.type === MessageNodeType.TODO;\r\n\r\n    // end of ordered list\r\n    if (!isOrderedItem && orderedListStarted) {\r\n      orderedListStarted = false;\r\n      html += '</ol></div>';\r\n    }\r\n    // end of unorderedList\r\n    if (!isUnorderedItem && unorderedListStarted) {\r\n      unorderedListStarted = false;\r\n      html += '</ul></div>';\r\n    }\r\n\r\n    // start of ordered list\r\n    if (isOrderedItem && !orderedListStarted) {\r\n      orderedListStarted = true;\r\n      html += '<div><ol>';\r\n    }\r\n    // start of unorderedList\r\n    if (isUnorderedItem && !unorderedListStarted) {\r\n      unorderedListStarted = true;\r\n      html += '<div><ul>';\r\n    }\r\n\r\n    html += nodeHtml;\r\n  }\r\n\r\n  if (unorderedListStarted) {\r\n    html += '</ul></div>';\r\n  }\r\n\r\n  if (orderedListStarted) {\r\n    html += '</ol></div>';\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\n// This maps to the three different notification template types we have for\r\n// each custom variation in launch darkly\r\ntype NotificationActionType = 'thread_resolve' | 'share_to_email' | 'mention';\r\n// To decide which email template to use look at feature flag and customer\r\n// pricing tier; pro and scale should never show 'Powered by Cord'.\r\nexport async function getTemplateIDForNotification({\r\n  notificationActionType,\r\n  context,\r\n  featureFlagUser,\r\n}: {\r\n  notificationActionType: NotificationActionType;\r\n  context: RequestContext;\r\n  featureFlagUser: FlagsUser;\r\n}): Promise<string> {\r\n  const customer = context.application?.customerID\r\n    ? await context.loaders.customerLoader.load(context.application.customerID)\r\n    : null;\r\n  const tier = customer?.pricingTier;\r\n\r\n  // Grab the template ID in LD for the current user (some users have some custom rules)\r\n  const featureFlagTemplateIDs = await getTypedFeatureFlagValue(\r\n    FeatureFlags.EMAIL_NOTIFICATION_TEMPLATE_ID,\r\n    featureFlagUser,\r\n  );\r\n  const featureFlagTemplateID = featureFlagTemplateIDs[notificationActionType];\r\n  const defaultTemplateID = getDefaultTemplateIDForNotificationType(\r\n    notificationActionType,\r\n  );\r\n\r\n  // if a templateID is set distinct from the default, use it\r\n  if (featureFlagTemplateID !== defaultTemplateID) {\r\n    return featureFlagTemplateID;\r\n  }\r\n\r\n  // If the customer is on a paying tier, use the one without 'Powered by Cord' section\r\n  if (tier === 'pro' || tier === 'scale') {\r\n    return getPayingCustomerTemplateIDForNotificationType(\r\n      notificationActionType,\r\n    );\r\n  }\r\n\r\n  return defaultTemplateID;\r\n}\r\n\r\nfunction getDefaultTemplateIDForNotificationType(\r\n  notificationActionType: NotificationActionType,\r\n) {\r\n  switch (notificationActionType) {\r\n    case 'mention':\r\n      return DEFAULT_MENTION_NOTIFICATION_V2_TEMPLATE_ID;\r\n    case 'thread_resolve':\r\n      return DEFAULT_THREAD_RESOLVE_TEMPLATE_ID;\r\n    case 'share_to_email':\r\n      return DEFAULT_SHARE_TO_EMAIL_TEMPLATE_ID;\r\n    default: {\r\n      const _: never = notificationActionType;\r\n      throw new Error(\r\n        'Could not find a template ID for notification action type: ' +\r\n          notificationActionType,\r\n      );\r\n    }\r\n  }\r\n}\r\nfunction getPayingCustomerTemplateIDForNotificationType(\r\n  notificationActionType: NotificationActionType,\r\n) {\r\n  switch (notificationActionType) {\r\n    case 'mention':\r\n      return MENTION_NOTIFICATION_NO_POWERED_BY_CORD_TEMPLATE_ID;\r\n    case 'thread_resolve':\r\n      return THREAD_RESOLVE_NO_POWERED_BY_CORD_TEMPLATE_ID;\r\n    case 'share_to_email':\r\n      return SHARE_TO_EMAIL_NO_POWERED_BY_CORD_TEMPLATE_ID;\r\n    default: {\r\n      const _: never = notificationActionType;\r\n      throw new Error(\r\n        'Could not find paying customer template ID for notification action type: ' +\r\n          notificationActionType,\r\n      );\r\n    }\r\n  }\r\n}\r\n", "const GREY_X_DARK = '#191A1E';\r\nconst PURPLE = '#9A6AFF';\r\nconst OPACITY_33 = '54';\r\n\r\n// Please use the full 6-character color syntax, otherwise weird things happen\r\n// when you try to append opacity modifiers, for example the TRANSLUCENT colors\r\nexport const Colors = {\r\n  ALERT_LIGHT: '#FDEFEF',\r\n  ALERT: '#EB5757',\r\n  GREEN: '#71BC8F',\r\n  GREY_X_LIGHT: '#F6F6F6',\r\n  GREY_LIGHT: '#DADCE0',\r\n  GREY: '#AAAAAC',\r\n  GREY_DARK: '#76767A',\r\n  GREY_X_DARK,\r\n  ORANGE_LIGHT: '#FBE3D6',\r\n  ORANGE: '#F88D76',\r\n  PURPLE,\r\n  PURPLE_LIGHT: '#D1D0F9',\r\n  PURPLE_DARK: '#5F5EB3',\r\n  BRAND_PURPLE_LIGHT: '#F6F1FF',\r\n  BRAND_PURPLE_DARK: '#9A6AFF',\r\n  BRAND_PURPLE_DARKER: '#6949AC',\r\n  ACID_YELLOW: '#F4FFA0',\r\n  YELLOW: '#F2FFA1',\r\n  BLACK: '#000000',\r\n  WHITE: '#FFFFFF',\r\n  FOCUS: '#CAE3F1',\r\n  TRANSLUCENT_DARK: GREY_X_DARK + OPACITY_33,\r\n  TRANSLUCENT_PURPLE: PURPLE + OPACITY_33,\r\n  TRANSPARENT: 'transparent',\r\n  INHERIT: 'inherit',\r\n  BRAND_PRIMARY: '#121314',\r\n  CONTENT_PRIMARY: '#696A6C',\r\n  CONTENT_SECONDARY: '#97979F',\r\n};\r\n\r\nexport type Color = keyof typeof Colors;\r\n\r\nexport function isCordColor(color: string): color is Color {\r\n  return color in Colors;\r\n}\r\n\r\nexport function withOpacityZero(color: Color) {\r\n  return Colors[color] + '00';\r\n}\r\n\r\n/*\r\n  This function receives a color argument that's either one of our standard design system\r\n  color names (see Colors.ts) or otherwise a generic string that we treat as some valid\r\n  CSS color value, and returns the final CSS color value. \r\n*/\r\nexport function cssColorFromColorArgument(\r\n  color: Color | string | undefined,\r\n  defaultColor: Color,\r\n) {\r\n  // if nothing is provided, return the default\r\n  if (!color) {\r\n    return Colors[defaultColor];\r\n  }\r\n\r\n  // if it's one of our standard designs system color name, return the associated color\r\n  if (isCordColor(color)) {\r\n    return Colors[color];\r\n  }\r\n\r\n  // assume it's a raw color value, like #hex or whatever, and return it directly\r\n  return color;\r\n}\r\n", "export function middleElideFileName(fileName: string, outputLength: number) {\r\n  if (fileName.length <= outputLength) {\r\n    return fileName;\r\n  }\r\n  const lengthMinusDots = outputLength - 3;\r\n  const firstPartOfName = Math.ceil(lengthMinusDots / 2);\r\n  const lastPartOfName = Math.floor(lengthMinusDots / 2);\r\n  const stringLength = fileName.length - lastPartOfName;\r\n  return `${fileName.slice(0, firstPartOfName)}...${fileName.slice(\r\n    stringLength,\r\n  )}`;\r\n}\r\n", "const TOTAL_NUM_OF_PALETTES = 8;\r\n/**\r\n * Given an external userID, return a number between 1 and 8.\r\n */\r\nexport function getStableColorPalette(userId: string) {\r\n  let simpleHash = 0;\r\n  for (const char of userId) {\r\n    simpleHash += char.charCodeAt(0);\r\n  }\r\n  return (simpleHash % TOTAL_NUM_OF_PALETTES) + 1; // 1-indexed;\r\n}\r\n", "import type { MessageContent, MessageType, UUID } from 'common/types/index.ts';\r\nimport { convertStructuredMessageToText } from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { convertNodeListToEmailHtml } from 'server/src/email/util.ts';\r\nimport { middleElideFileName } from 'common/util/middleElideFileName.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { detailsForDisplay } from 'server/src/entity/user/util.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { getStableColorPalette } from 'common/ui/getStableColorPalette.ts';\r\nimport { API_ORIGIN } from 'common/const/Urls.ts';\r\nimport type { SendEmailNotificationWithDelayData } from 'server/src/asyncTier/jobs/sendEmailNotificationWithDelay.ts';\r\nimport type { ActionIcon } from 'server/src/email/index.ts';\r\nimport { encodeUnsubscribeThreadToken } from 'server/src/email/index.ts';\r\nimport { generateOutboundNotificationLoggingURL } from 'server/src/notifications/outbound/logging.ts';\r\nimport { UNSUBSCRIBE_PATH } from 'server/src/public/routes/MainRouter.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\n\r\ntype UserDetails = {\r\n  name: string;\r\n  profile_picture: string | null;\r\n  initial: string;\r\n  /**\r\n   * Matches the color palette we assign in the UI.\r\n   * Useful to have fallback avatars have the same\r\n   * colour both in the UI and in emails.\r\n   */\r\n  color_palette: number;\r\n};\r\n\r\ntype MessageDetailsWithoutAnnotations = {\r\n  message: string;\r\n  message_preview: string;\r\n  timestamp: string;\r\n  message_type: MessageType;\r\n};\r\n\r\ntype MessageDetailsWithAnnotationsAndAttachments =\r\n  MessageDetailsWithoutAnnotations & {\r\n    annotations: {\r\n      first_annotation: string | null;\r\n      other_annotations: string[];\r\n      extra_number_annotations: number;\r\n    } | null;\r\n    file_names: string[];\r\n  };\r\n\r\nexport type ThreadDetails = {\r\n  senderName: string;\r\n  firstMessageDetails: MessageDetailsWithoutAnnotations | null;\r\n  firstMessageUserDetails: UserDetails | null;\r\n  previousMessageDetails: MessageDetailsWithoutAnnotations | null;\r\n  previousMessageUserDetails: UserDetails | null;\r\n  currentMessageDetails: MessageDetailsWithAnnotationsAndAttachments;\r\n  currentMessageUserDetails: UserDetails;\r\n  messagesCountLeft: number;\r\n};\r\n\r\ntype GetThreadDetailsArgs = {\r\n  threadID: UUID;\r\n  currentMessage: MessageEntity;\r\n  sender: UserEntity;\r\n  currentMessageAttachments: string[];\r\n  currentFileAttachments: string[];\r\n  context: RequestContext;\r\n};\r\n\r\n// If the thread is long enough we show the current, previous, and first message.\r\nconst MAX_NUM_MESSAGES_SHOWN = 3;\r\nconst MAX_NUM_ANNOTATIONS_SHOWN = 3;\r\nconst MAX_FILE_NAME_LENGTH = 50;\r\n\r\n// Returns data of the message and author, and any context in the thread i.e\r\n// potentially the previous message and author, and if the thread has more\r\n// than 3 messages we also return the first message and author of the thread,\r\n// and a count of how many messages are in between.\r\n// This data is sent to sendgrid ot render.\r\nexport async function getThreadDetails({\r\n  threadID,\r\n  currentMessage,\r\n  sender,\r\n  currentMessageAttachments,\r\n  currentFileAttachments,\r\n  context,\r\n}: GetThreadDetailsArgs): Promise<ThreadDetails | null> {\r\n  try {\r\n    const messageID = currentMessage.id;\r\n\r\n    // number of older messages up to the current message (+1 for current message)\r\n    const messagesCountExcludingDeleted =\r\n      (await context.loaders.threadLoader.loadMessagesCountExcludingDeletedNoOrgCheck(\r\n        threadID,\r\n        messageID,\r\n      )) + 1;\r\n\r\n    const senderDetailsForDisplay = await detailsForDisplay(sender, context);\r\n\r\n    const senderName = senderDetailsForDisplay.displayName;\r\n\r\n    const currentMessageUserDetails = await getUserDetails({\r\n      context,\r\n      sender,\r\n      message: currentMessage,\r\n    });\r\n\r\n    const currentMessageDetails = createMessageDetailsWithAnnotations(\r\n      currentMessage.content,\r\n      currentMessage.timestamp,\r\n      currentMessageAttachments.length > 0 ? currentMessageAttachments : null,\r\n      currentFileAttachments,\r\n      currentMessage.type,\r\n    );\r\n\r\n    let firstMessageUserDetails: UserDetails | null = null;\r\n    let firstMessageDetails: MessageDetailsWithoutAnnotations | null = null;\r\n    let previousMessageUserDetails: UserDetails | null = null;\r\n    let previousMessageDetails: MessageDetailsWithoutAnnotations | null = null;\r\n\r\n    // The number of messages left without the current, previous, or first message\r\n    const messagesCountLeft =\r\n      messagesCountExcludingDeleted > MAX_NUM_MESSAGES_SHOWN\r\n        ? messagesCountExcludingDeleted - MAX_NUM_MESSAGES_SHOWN\r\n        : 0;\r\n\r\n    if (messagesCountExcludingDeleted === 1) {\r\n      return {\r\n        senderName,\r\n        firstMessageUserDetails,\r\n        firstMessageDetails,\r\n        previousMessageUserDetails,\r\n        previousMessageDetails,\r\n        currentMessageUserDetails,\r\n        currentMessageDetails,\r\n        messagesCountLeft,\r\n      };\r\n    }\r\n\r\n    // there has to be at least 1 previous message\r\n    const messages = await context.loaders.messageLoader.loadMessages({\r\n      threadID,\r\n      range: -1,\r\n      ignoreDeleted: true,\r\n      cursor: messageID,\r\n    });\r\n    if (messages.length === 0 || messages[0].id === messageID) {\r\n      throw Error(\r\n        `Could not find previous messages in thread ${threadID}, current message: ${messageID}`,\r\n      );\r\n    }\r\n\r\n    const previousMessage = messages[0];\r\n\r\n    previousMessageUserDetails = await getUserDetails({\r\n      context,\r\n      sender,\r\n      message: previousMessage,\r\n    });\r\n\r\n    previousMessageDetails = createMessageDetailsWithoutAnnotations(\r\n      previousMessage.content,\r\n      previousMessage.timestamp,\r\n      previousMessage.type,\r\n    );\r\n\r\n    if (messagesCountExcludingDeleted === 2) {\r\n      return {\r\n        senderName,\r\n        firstMessageDetails,\r\n        firstMessageUserDetails,\r\n        previousMessageDetails,\r\n        previousMessageUserDetails,\r\n        currentMessageUserDetails,\r\n        currentMessageDetails,\r\n        messagesCountLeft,\r\n      };\r\n    }\r\n\r\n    // more than two messages so we can find the first message of the thread\r\n    const firstMessages = await context.loaders.messageLoader.loadMessages({\r\n      threadID,\r\n      range: 1,\r\n      ignoreDeleted: true,\r\n    });\r\n\r\n    if (firstMessages.length === 0) {\r\n      throw Error(\r\n        `Could not find previous messages in thread ${threadID}, current message: ${messageID}`,\r\n      );\r\n    }\r\n\r\n    const firstMessageOfThread = firstMessages[0];\r\n\r\n    firstMessageUserDetails = await getUserDetails({\r\n      context,\r\n      sender,\r\n      message: firstMessageOfThread,\r\n    });\r\n\r\n    firstMessageDetails = createMessageDetailsWithoutAnnotations(\r\n      firstMessageOfThread.content,\r\n      firstMessageOfThread.timestamp,\r\n      firstMessageOfThread.type,\r\n    );\r\n\r\n    return {\r\n      senderName,\r\n      firstMessageDetails,\r\n      firstMessageUserDetails,\r\n      previousMessageDetails,\r\n      previousMessageUserDetails,\r\n      currentMessageUserDetails,\r\n      currentMessageDetails,\r\n      messagesCountLeft,\r\n    };\r\n  } catch (e) {\r\n    context.logger.logException('getThreadDetails failed', e, {\r\n      threadID,\r\n      currentMessageID: currentMessage.id,\r\n      senderUserID: sender.id,\r\n      currentMessageAttachments,\r\n      currentFileAttachments,\r\n      viewer: JSON.parse(JSON.stringify(context.session.viewer)),\r\n    });\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function createMessageUserDetails(\r\n  user: UserEntity,\r\n  context: RequestContext,\r\n): Promise<UserDetails> {\r\n  const userDisplayDetails = await detailsForDisplay(user, context);\r\n\r\n  const name = userDisplayDetails.displayName;\r\n  return {\r\n    name,\r\n    profile_picture: userDisplayDetails.profilePictureURL,\r\n    initial: name.slice(0, 1).toUpperCase(),\r\n    color_palette: getStableColorPalette(user.externalID),\r\n  };\r\n}\r\n\r\nfunction createMessageDetailsWithoutAnnotations(\r\n  messageContent: MessageContent,\r\n  messageTimestamp: Date,\r\n  messageType: MessageType,\r\n): MessageDetailsWithoutAnnotations {\r\n  return {\r\n    message: convertNodeListToEmailHtml(messageContent),\r\n    message_preview: convertStructuredMessageToText(messageContent),\r\n    timestamp: messageTimestamp.toISOString(),\r\n    message_type: messageType,\r\n  };\r\n}\r\n\r\nfunction createMessageDetailsWithAnnotations(\r\n  messageContent: MessageContent,\r\n  messageTimestamp: Date,\r\n  annotations: string[] | null = null,\r\n  nonImageFileAttachmentNames: string[],\r\n  messageType: MessageType,\r\n): MessageDetailsWithAnnotationsAndAttachments {\r\n  const extraNumberOfAnnotations =\r\n    annotations && annotations.length > MAX_NUM_ANNOTATIONS_SHOWN\r\n      ? annotations.length - MAX_NUM_ANNOTATIONS_SHOWN\r\n      : 0;\r\n\r\n  return {\r\n    message: convertNodeListToEmailHtml(messageContent),\r\n    message_preview: convertStructuredMessageToText(messageContent),\r\n    timestamp: messageTimestamp.toISOString(),\r\n    annotations: annotations\r\n      ? {\r\n          first_annotation: annotations[0] ?? null,\r\n          // only want the next 2 annotations on the list\r\n          other_annotations:\r\n            annotations.slice(1, MAX_NUM_ANNOTATIONS_SHOWN) ?? [],\r\n          extra_number_annotations: extraNumberOfAnnotations,\r\n        }\r\n      : null,\r\n    file_names: nonImageFileAttachmentNames.map((fileName) =>\r\n      middleElideFileName(fileName, MAX_FILE_NAME_LENGTH),\r\n    ),\r\n    message_type: messageType,\r\n  };\r\n}\r\n\r\ntype GetUserDetailsArgs = {\r\n  context: RequestContext;\r\n  sender: UserEntity;\r\n  message: MessageEntity;\r\n};\r\n\r\nasync function getUserDetails({\r\n  context,\r\n  sender,\r\n  message,\r\n}: GetUserDetailsArgs) {\r\n  if (message.sourceID === sender.id) {\r\n    return await createMessageUserDetails(sender, context);\r\n  } else {\r\n    const user = await context.loaders.userLoader.loadUser(message.sourceID);\r\n    if (!user) {\r\n      throw new Error(`Could not load user for messageID: ${message.id}`);\r\n    }\r\n    return await createMessageUserDetails(user, context);\r\n  }\r\n}\r\n\r\nexport async function buildOutboundEmailNotificationData({\r\n  context,\r\n  message,\r\n  sender,\r\n  orgID,\r\n  target,\r\n  actionText,\r\n  targetOrgMember,\r\n  actionIcon,\r\n  thread,\r\n  providerName,\r\n  partnerDetails,\r\n  allImageURLs,\r\n  nonImageFileAttachmentNames,\r\n  notificationType,\r\n  pageURL,\r\n  userID,\r\n  ...rest\r\n}: {\r\n  context: RequestContext;\r\n  message: MessageEntity;\r\n  sender: UserEntity;\r\n  orgID: string;\r\n  target: UserEntity;\r\n  actionText: string;\r\n  targetOrgMember: OrgMembersEntity;\r\n  actionIcon: ActionIcon;\r\n  thread: ThreadEntity;\r\n  providerName: string | undefined;\r\n  partnerDetails: CustomEmailTemplate | undefined;\r\n  allImageURLs: string[];\r\n  nonImageFileAttachmentNames: string[];\r\n  pageURL: string;\r\n  userID: string;\r\n  notificationType: NotificationType;\r\n}): Promise<SendEmailNotificationWithDelayData | undefined> {\r\n  const _: Record<string, never> = rest;\r\n\r\n  const threadID = thread.id;\r\n  const messageID = message.id;\r\n  const targetUserID = target.id;\r\n\r\n  // Used to check if the user has opted-out of email notifications for that thread\r\n  const isSubscribed =\r\n    await context.loaders.emailSubscriptionLoader.isUserSubscribedToThread(\r\n      targetUserID,\r\n      threadID,\r\n    );\r\n\r\n  if (!isSubscribed) {\r\n    return;\r\n  }\r\n\r\n  const unsubscribeThreadToken = encodeUnsubscribeThreadToken({\r\n    userID: targetUserID,\r\n    orgID: targetOrgMember.orgID,\r\n    threadID,\r\n    appID: sender.platformApplicationID,\r\n  });\r\n  const unsubscribeThreadURL = `${API_ORIGIN}${UNSUBSCRIBE_PATH}?token=${unsubscribeThreadToken}`;\r\n\r\n  const notificationURL = await generateOutboundNotificationLoggingURL({\r\n    messageID,\r\n    url: pageURL,\r\n    targetOrgID: targetOrgMember.orgID,\r\n    targetUserID,\r\n    type: 'email',\r\n    platformApplicationID: context.session.viewer.platformApplicationID,\r\n    metadata: {},\r\n    sharerUserID: userID,\r\n    sharerOrgID: orgID,\r\n  });\r\n\r\n  const threadDetails = await getThreadDetails({\r\n    threadID,\r\n    currentMessage: message,\r\n    sender,\r\n    currentMessageAttachments: allImageURLs,\r\n    currentFileAttachments: nonImageFileAttachmentNames,\r\n    context,\r\n  });\r\n\r\n  if (!threadDetails) {\r\n    context.logger.error('Could not generate threadDetails for v2 email');\r\n    return;\r\n  }\r\n\r\n  return {\r\n    viewerUserID: context.session.viewer.userID,\r\n    viewerPlatformApplicationID: context.session.viewer.platformApplicationID,\r\n    threadOrgID: orgID,\r\n    targetUserID,\r\n    targetOrgID: targetOrgMember.orgID,\r\n    threadID,\r\n    messageID,\r\n    targetEmail: target.email!, // Checked in notificationChannels\r\n    actionText,\r\n    actionIcon,\r\n    pageName: thread.name,\r\n    notificationURL,\r\n    providerName,\r\n    unsubscribeThreadURL,\r\n    partnerDetails,\r\n    threadDetails,\r\n    notificationType,\r\n  };\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { assertViewerHasIdentity, Viewer } from 'server/src/auth/index.ts';\r\nimport { sendActionEmailNotification } from 'server/src/email/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ThreadDetails } from 'server/src/util/email.ts';\r\nimport type { ActionIcon } from 'server/src/email/index.ts';\r\nimport { getTemplateIDForNotification } from 'server/src/email/util.ts';\r\nimport type { NotificationType } from 'server/src/entity/notification/NotificationEntity.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'sendEmailNotificationWithDelay',\r\n  sendEmailNotification,\r\n);\r\n\r\nexport type SendEmailNotificationWithDelayData = {\r\n  viewerUserID: UUID | undefined;\r\n  viewerPlatformApplicationID: UUID | undefined;\r\n  threadOrgID: UUID | undefined;\r\n  messageID: UUID;\r\n  targetUserID: UUID;\r\n  targetOrgID: UUID;\r\n  threadID: UUID;\r\n  targetEmail: string;\r\n  unsubscribeThreadURL: string;\r\n  pageName: string;\r\n  notificationURL: string;\r\n  providerName: string | undefined;\r\n  actionText: string;\r\n  actionIcon: ActionIcon;\r\n  partnerDetails: CustomEmailTemplate | undefined;\r\n  threadDetails: ThreadDetails;\r\n  notificationType: NotificationType;\r\n};\r\n\r\nexport async function sendEmailNotification(\r\n  data: SendEmailNotificationWithDelayData,\r\n) {\r\n  let viewer: Viewer;\r\n\r\n  if (!data.viewerUserID || !data.threadOrgID) {\r\n    throw new Error(\r\n      'Trying to send email notification without viewer userID or orgID',\r\n    );\r\n  }\r\n\r\n  if (data.viewerPlatformApplicationID) {\r\n    const [user, org, app] = await Promise.all([\r\n      UserEntity.findByPk(data.viewerUserID),\r\n      OrgEntity.findByPk(data.threadOrgID),\r\n      ApplicationEntity.findByPk(data.viewerPlatformApplicationID),\r\n    ]);\r\n\r\n    if (!user?.externalID || !org?.externalID || !app) {\r\n      throw new Error(\r\n        'Trying to send platform user email notification without external user or org ID',\r\n      );\r\n    }\r\n\r\n    viewer = await Viewer.createLoggedInPlatformViewer({\r\n      user,\r\n      org,\r\n    });\r\n  } else {\r\n    viewer = Viewer.createLoggedInViewer(data.viewerUserID, data.threadOrgID);\r\n  }\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n  const message = await context.loaders.messageLoader.loadMessage(\r\n    data.messageID,\r\n  );\r\n\r\n  // If we are unable to load the message, we can not send a notification for it.\r\n  // Because there is a 40 second delay between when a user takes an action and\r\n  // we send the notification, it is possible the thread or message was deleted.\r\n  // We have seen this as errors in #ops about foreign key violations on the\r\n  // email_notifications table below when it tries to create the notification.\r\n  // This doesn't make 0 the chance that this can happen, but does cut the time\r\n  // window down dramatically\r\n  if (!message) {\r\n    context.logger.log(\r\n      'warn',\r\n      'Attempting to send notification to message that no longer exists',\r\n      { threadID: data.threadID, messageID: data.messageID },\r\n    );\r\n    return;\r\n  }\r\n\r\n  const { userID, orgID } = assertViewerHasIdentity(context.session.viewer);\r\n  const featureFlagUser = {\r\n    userID,\r\n    orgID,\r\n    platformApplicationID:\r\n      context.session.viewer.platformApplicationID ?? 'extension',\r\n    version: null,\r\n    customerID: context.application?.customerID,\r\n  };\r\n  // Since we only have resolve action type for thread_action notifications we can default\r\n  // to thread_resolve template. In the future if we have more types of thread_action notifications,\r\n  // we should expand the props on getTemplateIDForNotification to handle this.\r\n  const templateId = await getTemplateIDForNotification({\r\n    notificationActionType:\r\n      data.notificationType === 'thread_action' ? 'thread_resolve' : 'mention',\r\n    context,\r\n    featureFlagUser,\r\n  });\r\n\r\n  let canSkipSending = false;\r\n  if (\r\n    // we always want to send self-mentions\r\n    data.viewerUserID !== data.targetUserID &&\r\n    message\r\n  ) {\r\n    const lastSeen = (\r\n      await context.loaders.threadParticipantLoader.loadForUser({\r\n        userID: data.targetUserID,\r\n        threadID: message.threadID,\r\n      })\r\n    )?.lastSeenTimestamp;\r\n\r\n    // One client always wants us to send an email even if viewed in Cord\r\n    // because they need an email for every message\r\n    const alwaysSendEmail = await getFeatureFlagValue(\r\n      'always_send_email_notification',\r\n      featureFlagUser,\r\n    );\r\n    canSkipSending =\r\n      !alwaysSendEmail && !!lastSeen && lastSeen >= message.timestamp;\r\n  }\r\n  if (canSkipSending) {\r\n    return;\r\n  }\r\n\r\n  const emailNotification = await EmailOutboundNotificationEntity.create({\r\n    userID: data.targetUserID,\r\n    orgID: data.targetOrgID,\r\n    threadID: data.threadID,\r\n    email: data.targetEmail,\r\n    // Target user may not be in same org - could instead be part of Slack org\r\n    threadOrgID: data.threadOrgID,\r\n  });\r\n\r\n  await sendActionEmailNotification({\r\n    context,\r\n    recipientEmail: data.targetEmail,\r\n    actionText: data.actionText,\r\n    actionIconType: data.actionIcon,\r\n    pageName: data.pageName,\r\n    pageURL: data.notificationURL,\r\n    providerName: data.providerName,\r\n    unsubscribeURL: data.unsubscribeThreadURL,\r\n    partnerDetails: data.partnerDetails,\r\n    threadDetails: data.threadDetails,\r\n    emailNotification,\r\n    templateId,\r\n    notificationType: data.notificationType,\r\n  });\r\n}\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { isInlineDisplayableImage } from '@cord-sdk/react/common/lib/uploads.ts';\r\nimport { generateOutboundNotificationLoggingURL } from 'server/src/notifications/outbound/logging.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport submitAsync from 'server/src/asyncTier/submitAsync.ts';\r\nimport type { ThreadActionType } from 'server/src/notifications/types/thread_action.ts';\r\nimport type {\r\n  SendMentionSlackNotificationData,\r\n  SendThreadActionSlackNotificationData,\r\n} from 'server/src/asyncTier/jobs/sendSlackNotificationWithDelay.ts';\r\nimport { sendSlackNotificationWithDelay } from 'server/src/asyncTier/jobs/sendSlackNotificationWithDelay.ts';\r\nimport { detailsForDisplay } from 'server/src/entity/user/util.ts';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\nimport { headerText as getMentionNotificationHeader } from 'server/src/notifications/types/reply.ts';\r\nimport { headerText as getThreadActionNotificationHeader } from 'server/src/notifications/types/thread_action.ts';\r\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\r\nimport {\r\n  loadPartitionedAttachments,\r\n  getIcon,\r\n  generateOutboundNotificationData,\r\n} from 'server/src/notifications/outbound/util.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { buildOutboundEmailNotificationData } from 'server/src/util/email.ts';\r\nimport { sendEmailNotification } from 'server/src/asyncTier/jobs/sendEmailNotificationWithDelay.ts';\r\n\r\ntype SendOutboundNotification = {\r\n  context: RequestContext;\r\n  targetUserID: UUID;\r\n  message: MessageEntity | null;\r\n  providerName?: string;\r\n  screenshotID?: UUID | null;\r\n};\r\ntype SendThreadActionOutboundNotification = SendOutboundNotification & {\r\n  notificationType: 'thread_action';\r\n  threadActionType: ThreadActionType;\r\n};\r\ntype SendMentionOutboundNotification = SendOutboundNotification & {\r\n  notificationType: 'reply';\r\n  replyActions: NotificationReplyAction[];\r\n};\r\nexport async function sendOutboundNotification(\r\n  data: SendThreadActionOutboundNotification | SendMentionOutboundNotification,\r\n) {\r\n  const {\r\n    context,\r\n    targetUserID,\r\n    message,\r\n    providerName,\r\n    screenshotID,\r\n    notificationType,\r\n  } = data;\r\n\r\n  const userID = assertViewerHasUser(context.session.viewer);\r\n  if (!message) {\r\n    return;\r\n  }\r\n  const baseNotificationData = await generateOutboundNotificationData({\r\n    context,\r\n    targetUserID,\r\n    userID,\r\n    message,\r\n  });\r\n  if (!baseNotificationData) {\r\n    return;\r\n  }\r\n  const {\r\n    thread,\r\n    target,\r\n    targetOrgMember,\r\n    isEmailNotification,\r\n    isSlackNotification,\r\n    sender,\r\n    partnerDetails,\r\n    pageURL,\r\n    emailMatchedSlackUserID,\r\n    org,\r\n  } = baseNotificationData;\r\n  const messageID = message.id;\r\n  const orgID = org.id;\r\n\r\n  if (notificationType === 'reply') {\r\n    const actionText = getMentionNotificationHeader(data.replyActions)[0];\r\n    const actionIcon = getIcon(data.replyActions);\r\n\r\n    const [\r\n      screenshot,\r\n      [files, annotationScreenshotFiles, annotationsHighlightedText],\r\n    ] = await Promise.all([\r\n      screenshotID ? context.loaders.fileLoader.loadFile(screenshotID) : null,\r\n      loadPartitionedAttachments(context, messageID),\r\n    ]);\r\n\r\n    if (screenshot) {\r\n      files.unshift(screenshot);\r\n    }\r\n    const imageAttachmentsURLs = files\r\n      .filter((file) => isInlineDisplayableImage(file.mimeType))\r\n      .map((file) => file.getPermanentDownloadURL());\r\n    const annotationScreenshotURLs = annotationScreenshotFiles.map((file) =>\r\n      file.getPermanentDownloadURL(),\r\n    );\r\n\r\n    const allImageURLs = [...imageAttachmentsURLs, ...annotationScreenshotURLs];\r\n\r\n    const nonImageFileAttachmentNames = files\r\n      .filter((file) => !isInlineDisplayableImage(file.mimeType))\r\n      .map((file) => file.name);\r\n\r\n    if (isEmailNotification) {\r\n      const emailData = await buildOutboundEmailNotificationData({\r\n        context,\r\n        message,\r\n        sender,\r\n        orgID,\r\n        target,\r\n        actionText,\r\n        actionIcon,\r\n        targetOrgMember,\r\n        thread,\r\n        providerName,\r\n        partnerDetails,\r\n        allImageURLs,\r\n        nonImageFileAttachmentNames,\r\n        notificationType,\r\n        pageURL,\r\n        userID,\r\n      });\r\n\r\n      if (!emailData) {\r\n        return;\r\n      }\r\n\r\n      if (process.env.IS_TEST) {\r\n        await sendEmailNotification(emailData);\r\n      } else if (process.env.NODE_ENV === 'development') {\r\n        setTimeoutAsync(() => sendEmailNotification(emailData), 40 * 1000);\r\n      } else {\r\n        await submitAsync('sendEmailNotificationWithDelay', emailData, {\r\n          startAfter: 40,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (isSlackNotification) {\r\n      const [sendingUsername, notificationURL] = await Promise.all([\r\n        detailsForDisplay(sender, context).then((value) => value.displayName),\r\n        generateOutboundNotificationLoggingURL({\r\n          messageID,\r\n          url: pageURL,\r\n          targetOrgID: targetOrgMember.orgID,\r\n          targetUserID,\r\n          type: emailMatchedSlackUserID ? 'slackEmailMatched' : 'slack',\r\n          platformApplicationID: context.session.viewer.platformApplicationID,\r\n          metadata: {},\r\n          sharerUserID: userID,\r\n          sharerOrgID: orgID,\r\n        }),\r\n      ]);\r\n\r\n      const slackData: SendMentionSlackNotificationData = {\r\n        viewerUserID: context.session.viewer.userID,\r\n        viewerOrgID: orgID,\r\n        viewerPlatformApplicationID:\r\n          context.session.viewer.platformApplicationID,\r\n        senderUserID: userID,\r\n        senderOrgID: orgID,\r\n        senderName: sendingUsername,\r\n        targetUserID: emailMatchedSlackUserID\r\n          ? emailMatchedSlackUserID\r\n          : targetUserID,\r\n        messageID,\r\n        url: notificationURL,\r\n        pageName: thread.name,\r\n        annotationsHighlightedText,\r\n        providerName,\r\n        messageContent: message.content,\r\n        allImageURLs,\r\n        actionText,\r\n        notificationType,\r\n      };\r\n\r\n      if (process.env.IS_TEST) {\r\n        await sendSlackNotificationWithDelay(slackData);\r\n      } else if (process.env.NODE_ENV === 'development') {\r\n        setTimeoutAsync(\r\n          () => sendSlackNotificationWithDelay(slackData),\r\n          1 * 1000,\r\n        );\r\n      } else {\r\n        await submitAsync('sendSlackNotificationWithDelay', slackData, {\r\n          startAfter: 10,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (notificationType === 'thread_action') {\r\n    const actionText = getThreadActionNotificationHeader(\r\n      data.threadActionType,\r\n    )[0];\r\n    // TODO: add new icons for thread resolve and unresolve for email templates\r\n    const actionIcon = 'mention';\r\n\r\n    if (isEmailNotification) {\r\n      const emailData = await buildOutboundEmailNotificationData({\r\n        context,\r\n        message,\r\n        sender,\r\n        orgID,\r\n        target,\r\n        actionText,\r\n        actionIcon,\r\n        targetOrgMember,\r\n        thread,\r\n        providerName,\r\n        partnerDetails,\r\n        allImageURLs: [],\r\n        nonImageFileAttachmentNames: [],\r\n        notificationType,\r\n        pageURL,\r\n        userID,\r\n      });\r\n\r\n      if (!emailData) {\r\n        return;\r\n      }\r\n\r\n      if (process.env.IS_TEST) {\r\n        await sendEmailNotification(emailData);\r\n      } else if (process.env.NODE_ENV === 'development') {\r\n        setTimeoutAsync(() => sendEmailNotification(emailData), 40 * 1000);\r\n      } else {\r\n        await submitAsync('sendEmailNotificationWithDelay', emailData, {\r\n          startAfter: 40,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (isSlackNotification) {\r\n      const [sendingUsername, notificationURL] = await Promise.all([\r\n        detailsForDisplay(sender, context).then((value) => value.displayName),\r\n        generateOutboundNotificationLoggingURL({\r\n          messageID,\r\n          url: pageURL,\r\n          targetOrgID: targetOrgMember.orgID,\r\n          targetUserID,\r\n          type: emailMatchedSlackUserID ? 'slackEmailMatched' : 'slack',\r\n          platformApplicationID: context.session.viewer.platformApplicationID,\r\n          metadata: {},\r\n          sharerUserID: userID,\r\n          sharerOrgID: orgID,\r\n        }),\r\n      ]);\r\n\r\n      const slackData: SendThreadActionSlackNotificationData = {\r\n        viewerUserID: context.session.viewer.userID,\r\n        viewerOrgID: orgID,\r\n        viewerPlatformApplicationID:\r\n          context.session.viewer.platformApplicationID,\r\n        senderUserID: userID,\r\n        senderOrgID: orgID,\r\n        senderName: sendingUsername,\r\n        targetUserID: emailMatchedSlackUserID\r\n          ? emailMatchedSlackUserID\r\n          : targetUserID,\r\n        messageID,\r\n        url: notificationURL,\r\n        pageName: thread.name,\r\n        providerName,\r\n        actionText,\r\n        notificationType,\r\n      };\r\n      if (process.env.IS_TEST) {\r\n        await sendSlackNotificationWithDelay(slackData);\r\n      } else if (process.env.NODE_ENV === 'development') {\r\n        setTimeoutAsync(\r\n          () => sendSlackNotificationWithDelay(slackData),\r\n          10 * 1000,\r\n        );\r\n      } else {\r\n        await submitAsync('sendSlackNotificationWithDelay', slackData, {\r\n          startAfter: 10,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import type { UUID } from '@cord-sdk/types';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport type { ThreadActionType } from 'server/src/notifications/types/thread_action.ts';\r\nimport { sendOutboundNotification } from 'server/src/notifications/outbound/sendOutboundNotifications.ts';\r\n\r\nexport async function createThreadActionNotifications({\r\n  context,\r\n  threadID,\r\n  messageID,\r\n  threadActionType,\r\n}: {\r\n  context: RequestContext;\r\n  threadID: string;\r\n  messageID: string;\r\n  threadActionType: ThreadActionType;\r\n}) {\r\n  const viewerUserID = assertViewerHasUser(context.session.viewer);\r\n\r\n  const usersToNotify = new Set<UUID>();\r\n  const participants =\r\n    await context.loaders.threadParticipantLoader.loadForThreadIDNoOrgCheck(\r\n      threadID,\r\n    );\r\n  participants.forEach((tp) =>\r\n    tp.subscribed && tp.userID !== viewerUserID\r\n      ? usersToNotify.add(tp.userID)\r\n      : null,\r\n  );\r\n\r\n  const message = await context.loaders.messageLoader.loadMessage(messageID);\r\n\r\n  await Promise.all(\r\n    [...usersToNotify].map((userIDToNotify: string) => {\r\n      return Promise.all([\r\n        sendOutboundNotification({\r\n          context,\r\n          targetUserID: userIDToNotify,\r\n          providerName: undefined,\r\n          message,\r\n          notificationType: 'thread_action',\r\n          threadActionType,\r\n        }),\r\n        new NotificationMutator(context.session.viewer).create({\r\n          recipientID: userIDToNotify,\r\n          type: 'thread_action',\r\n          threadActionType,\r\n          threadID,\r\n          messageID,\r\n        }),\r\n      ]);\r\n    }),\r\n  );\r\n}\r\n", "import type { FileAttachmentInput, UUID } from 'common/types/index.ts';\r\nimport type { NotificationReplyAction } from '@cord-sdk/types';\r\n\r\nexport function getNotificationReplyActions({\r\n  userID,\r\n  taskAssigneeUserIDs,\r\n  mentionedUserIDs,\r\n  fileAttachments,\r\n  removedTaskAssigneeUserIDs,\r\n  isFirstMessageInThread = false,\r\n}: {\r\n  userID: UUID;\r\n  taskAssigneeUserIDs: UUID[];\r\n  mentionedUserIDs: UUID[];\r\n  fileAttachments: FileAttachmentInput[];\r\n  removedTaskAssigneeUserIDs?: UUID[];\r\n  isFirstMessageInThread?: boolean;\r\n}) {\r\n  const actions: NotificationReplyAction[] = [];\r\n  if (taskAssigneeUserIDs.includes(userID)) {\r\n    actions.push('assign-task');\r\n  }\r\n  if (mentionedUserIDs.includes(userID)) {\r\n    actions.push('mention');\r\n  }\r\n  if (fileAttachments.length > 0) {\r\n    actions.push('attach-file');\r\n  }\r\n  if (isFirstMessageInThread) {\r\n    actions.push('create-thread');\r\n  } else if (removedTaskAssigneeUserIDs?.includes(userID)) {\r\n    actions.push('unassign-task');\r\n  }\r\n  return actions;\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\n\r\nexport async function getUsersToNotify(args: {\r\n  context: RequestContext;\r\n  flagsUser: FlagsUser;\r\n  threadID: UUID;\r\n  referencedUsers: UUID[];\r\n  pageContextHash: UUID;\r\n}): Promise<UUID[]> {\r\n  const viewerUserID = assertViewerHasUser(args.context.session.viewer);\r\n  // There is also a feature flag which, if on, will subscribe the whole org to\r\n  // all threads.  This is invoked before this function runs, so that these users\r\n  // are picked up by step 2 below.\r\n  const [notifyVisitors, skipVisitorsIfSelfMentioned] = await Promise.all([\r\n    getFeatureFlagValue(\r\n      'notify_page_visitors_of_every_new_message',\r\n      args.flagsUser,\r\n    ),\r\n    getFeatureFlagValue(\r\n      'skip_notify_page_visitors_if_self_mentioned',\r\n      args.flagsUser,\r\n    ),\r\n  ]);\r\n\r\n  // 1. referenced users are always notified\r\n  const usersToNotify = new Set<UUID>(args.referencedUsers);\r\n  const selfMentioned = usersToNotify.has(viewerUserID);\r\n\r\n  // 2. thread participants are notified if subscribed\r\n  const threadParticipants = new Map<UUID, boolean>(\r\n    (\r\n      await args.context.loaders.threadParticipantLoader.loadForThreadIDNoOrgCheck(\r\n        args.threadID,\r\n      )\r\n    ).map((tp) => [tp.userID, tp.subscribed]),\r\n  );\r\n  for (const [userID, subscribed] of threadParticipants) {\r\n    if (subscribed && userID !== viewerUserID) {\r\n      usersToNotify.add(userID);\r\n    }\r\n  }\r\n\r\n  // 3. page visitors are notified if not unsubscribed\r\n  const pageVisitors =\r\n    await args.context.loaders.pageVisitorLoader.loadForContextHash(\r\n      args.pageContextHash,\r\n    );\r\n  if (\r\n    notifyVisitors === true &&\r\n    !(selfMentioned && skipVisitorsIfSelfMentioned === true)\r\n  ) {\r\n    for (const { userID } of pageVisitors) {\r\n      if (threadParticipants.get(userID) !== false && userID !== viewerUserID) {\r\n        usersToNotify.add(userID);\r\n      }\r\n    }\r\n  }\r\n  return [...usersToNotify];\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { addCordBotToSlackChannels } from 'server/src/slack/api.ts';\r\nimport { addThreadToSelectedSlackChannel } from 'server/src/slack/util.ts';\r\n\r\nasync function getApplicationSupportSlackOrgBotCredentials(supportOrgID: UUID) {\r\n  const supportOrg = await OrgEntity.findByPk(supportOrgID);\r\n\r\n  if (!supportOrg) {\r\n    throw new Error('No application support org found');\r\n  }\r\n\r\n  const slackBotCredentials = await supportOrg.getSlackBotCredentials();\r\n\r\n  if (!slackBotCredentials) {\r\n    throw new Error(\r\n      'No slack bot credentials found for application support bot',\r\n    );\r\n  }\r\n\r\n  return slackBotCredentials;\r\n}\r\n\r\nexport async function shareThreadToApplicationSupportSlackChannel(\r\n  application: ApplicationEntity,\r\n  context: RequestContext,\r\n  threadID: UUID,\r\n) {\r\n  const slackChannelID = application.supportSlackChannelID;\r\n  const supportOrgID = application.supportOrgID;\r\n  const { userID, orgID } = assertViewerHasIdentity(context.session.viewer);\r\n\r\n  try {\r\n    if (!slackChannelID) {\r\n      throw new Error('No support slack channel ID');\r\n    }\r\n\r\n    if (!supportOrgID) {\r\n      throw new Error('No support slack org ID');\r\n    }\r\n\r\n    const slackBotCredentials =\r\n      await getApplicationSupportSlackOrgBotCredentials(supportOrgID);\r\n\r\n    const sharerUser =\r\n      await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n\r\n    if (!sharerUser) {\r\n      throw new Error('Missing valid sharerUser');\r\n    }\r\n\r\n    await addCordBotToSlackChannels(\r\n      context,\r\n      slackBotCredentials.bot_access_token,\r\n      [slackChannelID],\r\n    );\r\n\r\n    const success = await addThreadToSelectedSlackChannel(\r\n      context,\r\n      slackBotCredentials,\r\n      slackChannelID,\r\n      sharerUser,\r\n      threadID,\r\n      'support',\r\n    );\r\n\r\n    return success;\r\n  } catch (e) {\r\n    context.logger.logException(\r\n      'shareThreadToApplicationSupportSlackChannel:',\r\n      e,\r\n      {\r\n        applicationID: application.id,\r\n        applicationSupportOrg: application.supportOrgID,\r\n        userID,\r\n        orgID,\r\n      },\r\n    );\r\n    return false;\r\n  }\r\n}\r\n", "import { LogLevel } from 'common/types/index.ts';\r\nimport type { FileAttachmentInput, UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport { getNotificationReplyActions } from 'server/src/message/util/getNotificationReplyActions.ts';\r\nimport { sendOutboundNotification } from 'server/src/notifications/outbound/sendOutboundNotifications.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\n\r\nimport { getUsersToNotify } from 'server/src/message/util/getUsersToNotify.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { shareThreadToApplicationSupportSlackChannel } from 'server/src/bots/ApplicationSupportBot.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport async function maybeNotifyReferencedUsers(\r\n  context: RequestContext,\r\n  flagsUser: FlagsUser,\r\n  application: ApplicationEntity,\r\n  page: PageEntity,\r\n  thread: ThreadEntity,\r\n  message: MessageEntity,\r\n  mentionedUserIDs: UUID[],\r\n  taskAssigneeUserIDs: UUID[],\r\n  fileAttachments: FileAttachmentInput[],\r\n  isFirstMessageInThread: boolean,\r\n  subscribeToThread: boolean,\r\n  screenshotID: string | undefined,\r\n) {\r\n  const userReferenceIDSet = new Set([\r\n    ...mentionedUserIDs,\r\n    ...taskAssigneeUserIDs,\r\n  ]);\r\n\r\n  // Quick solution to a customer's problem.\r\n  // Every Cord thread will create a thread in Slack. See PR #520\r\n  if (\r\n    application.supportBotID &&\r\n    application.supportOrgID &&\r\n    (await getFeatureFlagValue(\r\n      'share_every_thread_to_application_support_channel',\r\n      flagsUser,\r\n    )) === true\r\n  ) {\r\n    userReferenceIDSet.add(application.supportBotID);\r\n  }\r\n\r\n  const userReferenceIDs = [...userReferenceIDSet];\r\n\r\n  const usersToNotify = await getUsersToNotify({\r\n    context,\r\n    flagsUser,\r\n    threadID: message.threadID,\r\n    referencedUsers: userReferenceIDs,\r\n    pageContextHash: page.contextHash,\r\n  });\r\n\r\n  const threadParticipantMutator = new ThreadParticipantMutator(\r\n    context.session.viewer,\r\n    context.loaders,\r\n  );\r\n\r\n  if (subscribeToThread) {\r\n    await threadParticipantMutator.setViewerSubscribed(thread, true);\r\n  }\r\n\r\n  if (userReferenceIDs.length > 0) {\r\n    await threadParticipantMutator.subscribeUsersToThread(\r\n      thread.id,\r\n      userReferenceIDs,\r\n    );\r\n  }\r\n\r\n  // Imagine there's a thread with a few messages that user A has not written\r\n  // any of, and is not tagged in, but they come across it and decide to read\r\n  // the messages. This makes them become a thread participant so we can record\r\n  // the fact that they saw these messages at X time, and we record that\r\n  // lastUnseenMessageTimestamp is null (because they've seen everything)\r\n  //\r\n  // Another user comes along and writes some new messages - this means there\r\n  // are some new messages user A has not seen (even though in a sense it's\r\n  // still not 'relevant' to them because they're not @ mentioned, don't get\r\n  // notified etc).\r\n  //\r\n  // Running this fn meaning that lastUnseenMessageTimestamp can be updated with\r\n  // a value, so we know in other places that for this user, this has become a\r\n  // thread with unread messages in it.\r\n  //\r\n  // TL;DR: we need to mark the thread newly active for others before we bail out\r\n  // in the next lines.\r\n  await threadParticipantMutator.markThreadNewlyActiveForOtherUsers(\r\n    thread.id,\r\n    message.id,\r\n  );\r\n\r\n  if (usersToNotify.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // TODO: temp measure for perf issues with web3 app.  They're not using components\r\n  // that use our notifications, and their users have @example.com emails so lets not\r\n  // wait while we send thousands of those into the ether.\r\n  if (context.application?.id !== '9e7d98ae-5da5-42ca-b857-2f15dc9a63db') {\r\n    await Promise.all(\r\n      usersToNotify.map((userID) => {\r\n        const replyActions = getNotificationReplyActions({\r\n          userID,\r\n          taskAssigneeUserIDs,\r\n          mentionedUserIDs,\r\n          fileAttachments,\r\n          isFirstMessageInThread,\r\n        });\r\n        return Promise.all([\r\n          sendOutboundNotification({\r\n            context,\r\n            targetUserID: userID,\r\n            message,\r\n            providerName: undefined,\r\n            replyActions,\r\n            screenshotID,\r\n            notificationType: 'reply',\r\n          }),\r\n          new NotificationMutator(context.session.viewer).create({\r\n            recipientID: userID,\r\n            type: 'reply',\r\n            messageID: message.id,\r\n            replyActions,\r\n            threadID: message.threadID,\r\n          }),\r\n        ]);\r\n      }),\r\n    );\r\n  }\r\n\r\n  if (\r\n    application.supportBotID &&\r\n    userReferenceIDs.includes(application.supportBotID)\r\n  ) {\r\n    shareThreadToApplicationSupportSlackChannel(\r\n      application,\r\n      context,\r\n      thread.id,\r\n    ).catch(\r\n      context.logger.exceptionLogger(\r\n        'shareThreadToApplicationSupportSlackChannel in createThreadMessageResolver',\r\n      ),\r\n    );\r\n\r\n    logServerEvent({\r\n      session: context.session,\r\n      type: 'user-mentioned-application-support-bot',\r\n      logLevel: LogLevel.DEBUG,\r\n      payload: {\r\n        threadID: thread.id,\r\n        messageID: message.id,\r\n      },\r\n    });\r\n  }\r\n}\r\n", "import { unique } from 'radash';\r\n\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { FileAttachmentInput, UUID } from 'common/types/index.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { getNotificationReplyActions } from 'server/src/message/util/getNotificationReplyActions.ts';\r\nimport { sendOutboundNotification } from 'server/src/notifications/outbound/sendOutboundNotifications.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport async function notifyReferencedUsers({\r\n  context,\r\n  message,\r\n  mentionedUserIDs,\r\n  taskAssigneeUserIDs = [],\r\n  removedTaskAssigneeUserIDs = [],\r\n  fileAttachments = [],\r\n}: {\r\n  context: RequestContext;\r\n  message: MessageEntity;\r\n  mentionedUserIDs: UUID[];\r\n  taskAssigneeUserIDs?: UUID[];\r\n  removedTaskAssigneeUserIDs?: UUID[];\r\n  fileAttachments?: FileAttachmentInput[] | null;\r\n}) {\r\n  const usersToNotify = unique([\r\n    ...mentionedUserIDs,\r\n    ...taskAssigneeUserIDs,\r\n    ...removedTaskAssigneeUserIDs,\r\n  ]);\r\n\r\n  if (usersToNotify.length === 0) {\r\n    return;\r\n  }\r\n\r\n  await Promise.all(\r\n    usersToNotify.map(async (userID) => {\r\n      const replyActions = getNotificationReplyActions({\r\n        userID,\r\n        taskAssigneeUserIDs,\r\n        mentionedUserIDs,\r\n        fileAttachments: fileAttachments ?? [],\r\n        removedTaskAssigneeUserIDs,\r\n      });\r\n      return await Promise.all([\r\n        sendOutboundNotification({\r\n          context,\r\n          targetUserID: userID,\r\n          message: message,\r\n          replyActions,\r\n          notificationType: 'reply',\r\n        }),\r\n\r\n        new NotificationMutator(context.session.viewer).create({\r\n          recipientID: userID,\r\n          type: 'reply',\r\n          messageID: message.id,\r\n          replyActions,\r\n          threadID: message.threadID,\r\n        }),\r\n      ]);\r\n    }),\r\n  );\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport function publishUpdatedMessageEvents(\r\n  context: RequestContext,\r\n  thread: ThreadEntity,\r\n  message: MessageEntity,\r\n  updateAnnotations: boolean,\r\n  newUserReferenceIDs: UUID[],\r\n  originalSubscribers: Set<UUID>,\r\n) {\r\n  const pageContextHash = thread.pageContextHash;\r\n\r\n  if (pageContextHash && updateAnnotations) {\r\n    backgroundPromise(\r\n      publishPubSubEvent('annotations-on-page-updated', {\r\n        pageContextHash: pageContextHash,\r\n        orgID: message.orgID,\r\n      }),\r\n    );\r\n  }\r\n\r\n  if (newUserReferenceIDs.length > 0) {\r\n    const notify = async () => {\r\n      const page =\r\n        await context.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(\r\n          thread.id,\r\n        );\r\n      if (!page) {\r\n        throw new Error('Unable to find thread location');\r\n      }\r\n      const location = page.contextData;\r\n      await Promise.all(\r\n        newUserReferenceIDs.map((userID) =>\r\n          publishPubSubEvent(\r\n            'inbox-updated',\r\n            { userID },\r\n            { threadID: thread.id, location },\r\n          ),\r\n        ),\r\n      );\r\n    };\r\n    backgroundPromise(notify());\r\n  }\r\n\r\n  backgroundPromise(\r\n    publishPubSubEvent(\r\n      'thread-message-updated',\r\n      { threadID: message.threadID },\r\n      { messageID: message.id },\r\n    ),\r\n  );\r\n\r\n  backgroundPromise(\r\n    (async (): Promise<void> => {\r\n      const newSubscribers = new Set(\r\n        await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n          thread.id,\r\n        ),\r\n      );\r\n\r\n      const removed = [...originalSubscribers].filter(\r\n        (s) => !newSubscribers.has(s),\r\n      );\r\n      const added = [...newSubscribers].filter(\r\n        (s) => !originalSubscribers.has(s),\r\n      );\r\n      if (removed.length > 0 || added.length > 0) {\r\n        backgroundPromise(\r\n          publishPubSubEvent(\r\n            'thread-filterable-properties-updated',\r\n            { orgID: thread.orgID },\r\n            {\r\n              threadID: thread.id,\r\n              changes: { subscribers: { added, removed } },\r\n            },\r\n          ),\r\n        );\r\n      }\r\n    })(),\r\n  );\r\n}\r\n\r\nexport function publishAppendedMessageContentEvents(\r\n  message: MessageEntity,\r\n  appendedContent: string,\r\n) {\r\n  backgroundPromise(\r\n    publishPubSubEvent(\r\n      'thread-message-content-appended',\r\n      { threadID: message.threadID },\r\n      {\r\n        messageID: message.id,\r\n        appendedContent,\r\n      },\r\n    ),\r\n  );\r\n}\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { FileAttachmentInput } from 'common/types/index.ts';\r\nimport type { AnnotationAttachmentInput } from 'server/src/admin/resolverTypes.ts';\r\nimport { MessageAttachmentMutator } from 'server/src/entity/message_attachment/MessageAttachmentMutator.ts';\r\nimport { getMessageAnnotationAttachmentsFromInput } from 'server/src/schema/common.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport async function updateMessageAttachments(\r\n  context: RequestContext,\r\n  message: MessageEntity,\r\n  fileAttachments: FileAttachmentInput[],\r\n  annotationAttachments: AnnotationAttachmentInput[],\r\n) {\r\n  const viewer = context.session.viewer;\r\n  const messageAttachmentMutator = new MessageAttachmentMutator(\r\n    viewer,\r\n    context.loaders,\r\n  );\r\n\r\n  const [deletedCount, created] =\r\n    await messageAttachmentMutator.setMessageAttachments(message, [\r\n      ...fileAttachments.map(({ id, fileID }) => ({\r\n        id,\r\n        type: MessageAttachmentType.FILE,\r\n        data: { fileID },\r\n      })),\r\n      ...getMessageAnnotationAttachmentsFromInput(\r\n        context.session.viewer,\r\n        annotationAttachments,\r\n      ),\r\n    ]);\r\n\r\n  return deletedCount || created.length;\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { TaskInput } from 'server/src/admin/resolverTypes.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { TaskMutator } from 'server/src/entity/task/TaskMutator.ts';\r\nimport { TaskAssigneeMutator } from 'server/src/entity/task_assignee/TaskAssigneeMutator.ts';\r\nimport { TaskTodoMutator } from 'server/src/entity/task_todo/TaskTodoMutator.ts';\r\n\r\nexport async function updateMessageTask(\r\n  context: RequestContext,\r\n  message: MessageEntity,\r\n  task: TaskInput | null,\r\n) {\r\n  const viewer = context.session.viewer;\r\n  const taskMutator = new TaskMutator(viewer, context.loaders);\r\n  let newTaskAssignees: UUID[] = [];\r\n  let removedTaskAssignees: UUID[] = [];\r\n\r\n  if (task === null) {\r\n    await taskMutator.deleteTaskFromMessageID(message.id, message.orgID);\r\n  } else {\r\n    const taskAssigneeMutator = new TaskAssigneeMutator(\r\n      viewer,\r\n      context.loaders,\r\n    );\r\n    await taskMutator.createOrUpdateTask(task, message.id);\r\n    const { newAssigneeIDs, removedAssigneeIDs } =\r\n      await taskAssigneeMutator.updateTaskAssignees(task.id, task.assigneeIDs);\r\n    newTaskAssignees = newAssigneeIDs;\r\n    removedTaskAssignees = removedAssigneeIDs;\r\n\r\n    const taskTodoMutator = new TaskTodoMutator(viewer);\r\n    await taskTodoMutator.setTaskTodos(task.id, task.todos);\r\n  }\r\n  return { newTaskAssignees, removedTaskAssignees };\r\n}\r\n", "import axios from 'axios';\r\nimport { load as cheerioLoad } from 'cheerio';\r\nimport * as linkify from 'linkifyjs';\r\nimport type { MessageContent, UUID } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport type { MessageNode } from '@cord-sdk/types';\r\nimport type { MessageLinkPreview } from 'server/src/schema/resolverTypes.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { MessageLinkPreviewMutator } from 'server/src/entity/message_link_preview/MessageLinkPreviewMutator.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { manageConnection } from 'server/src/util/third_party/ssrf-req-filter.mjs';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'generateLinkPreviews',\r\n  generateLinkPreviews,\r\n);\r\n\r\nconst REQUEST_TIMEOUT = 5000;\r\n\r\ntype generateLinkPreviewsArgs = {\r\n  messageID: UUID;\r\n};\r\n\r\nasync function generateLinkPreviews(\r\n  data: generateLinkPreviewsArgs,\r\n  logger: Logger,\r\n) {\r\n  logger.info('Starting Generate Link Previews sync');\r\n  const { messageID } = data;\r\n\r\n  try {\r\n    const message = await MessageEntity.findOne({ where: { id: messageID } });\r\n\r\n    if (!message) {\r\n      logger.warn(\r\n        `Could not generate link previews for message. Cannot load message ${messageID}`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    const existingPreviews = await MessageLinkPreviewEntity.findAll({\r\n      where: { messageID: messageID },\r\n    });\r\n\r\n    const links = Array.from(getLinksForMessage(message.content)) ?? [];\r\n\r\n    await Promise.all([\r\n      addLinks(messageID, existingPreviews, links),\r\n      removeLinks(existingPreviews, links),\r\n    ]);\r\n\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'thread-message-updated',\r\n        { threadID: message.threadID },\r\n        { messageID },\r\n      ),\r\n    );\r\n  } catch (error: unknown) {\r\n    logger.logException('Error generationg link previews', error, {\r\n      messageID,\r\n    });\r\n  }\r\n}\r\n\r\nfunction findLinks(node: MessageNode): Set<string> {\r\n  const links: Set<string> = new Set();\r\n\r\n  if (node.type === MessageNodeType.LINK) {\r\n    links.add(node.url);\r\n    return links;\r\n  } else if (!node.type && node.type !== MessageNodeType.MENTION) {\r\n    const urls = linkify.find(node.text);\r\n\r\n    if (urls) {\r\n      for (const url of urls) {\r\n        if (url.type === 'url') {\r\n          links.add(url.href);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if ('children' in node && node.children) {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n      const childrenLinks = findLinks(node.children[i]);\r\n      for (const childrenLink of childrenLinks) {\r\n        links.add(childrenLink);\r\n      }\r\n    }\r\n  }\r\n\r\n  return links;\r\n}\r\n\r\nexport async function getPreviewForURL(\r\n  url: string,\r\n): Promise<Omit<MessageLinkPreview, 'id' | 'hidden'> | null> {\r\n  let previewURL = url;\r\n  if (!previewURL.startsWith('http')) {\r\n    previewURL = 'http://' + previewURL;\r\n  }\r\n\r\n  try {\r\n    const { data } = await axios.get(previewURL, {\r\n      timeout: REQUEST_TIMEOUT,\r\n      httpAgent: manageConnection(previewURL),\r\n      httpsAgent: manageConnection(previewURL),\r\n    });\r\n    const loadedWebsite = cheerioLoad(data);\r\n\r\n    const getMetaTag = (name: string) => {\r\n      return (\r\n        loadedWebsite(`meta[name=${name}]`).attr('content') ||\r\n        loadedWebsite(`meta[propety=\"twitter${name}\"]`).attr('content') ||\r\n        loadedWebsite(`meta[property=\"og:${name}\"]`).attr('content')\r\n      );\r\n    };\r\n\r\n    let previewImage = getMetaTag('image');\r\n    if (previewImage && previewImage.length > 0) {\r\n      if (previewImage[0] === '/') {\r\n        previewImage = new URL(previewURL).origin + previewImage;\r\n      }\r\n      if (!previewImage.startsWith('http')) {\r\n        previewImage = 'https://' + previewImage;\r\n      }\r\n    }\r\n\r\n    return {\r\n      title:\r\n        getMetaTag('title') ??\r\n        loadedWebsite('title').first().text() ??\r\n        getMetaTag('site_name'),\r\n      description: getMetaTag('description'),\r\n      url: previewURL,\r\n      img: previewImage,\r\n    };\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'MessageLinkPreview error',\r\n      e,\r\n      undefined,\r\n      undefined,\r\n      'info',\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getLinksForMessage(content: MessageContent) {\r\n  const allLinks = new Set<string>();\r\n  for (const node of content) {\r\n    const newLinks = findLinks(node);\r\n    for (const link of newLinks) {\r\n      allLinks.add(link);\r\n    }\r\n  }\r\n  return allLinks;\r\n}\r\n\r\nasync function addLinks(\r\n  messageID: string,\r\n  existingPreviews: MessageLinkPreviewEntity[],\r\n  links: string[],\r\n) {\r\n  const newLinks = links?.filter((link) => {\r\n    return !existingPreviews.find((preview) => preview.url === link);\r\n  });\r\n\r\n  const previews = await Promise.all(newLinks.map(getPreviewForURL));\r\n\r\n  const viewer = Viewer.createServiceViewer();\r\n  const messageLinkPreviewMutator = new MessageLinkPreviewMutator(viewer, null);\r\n  await Promise.all(\r\n    previews.filter(isDefined).map(async (link) => {\r\n      await messageLinkPreviewMutator.upsert({\r\n        messageID,\r\n        url: link.url,\r\n        img: link.img ?? null,\r\n        description: link.description ?? null,\r\n        title: link.title ?? null,\r\n      });\r\n    }),\r\n  );\r\n}\r\n\r\nasync function removeLinks(\r\n  existingPreviews: MessageLinkPreviewEntity[],\r\n  links: string[],\r\n) {\r\n  const linksToRemove = existingPreviews.filter((preview) => {\r\n    return !links.find((link) => preview.url === link);\r\n  });\r\n\r\n  await Promise.all(\r\n    linksToRemove.map(async (preview) => {\r\n      await preview.destroy();\r\n    }),\r\n  );\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nexport interface MessageLinkPreviewUpsertArgs {\r\n  messageID: UUID;\r\n  url: string;\r\n  title: string | null;\r\n  description: string | null;\r\n  img: string | null;\r\n}\r\n\r\nexport class MessageLinkPreviewMutator {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {}\r\n\r\n  async upsert(\r\n    args: MessageLinkPreviewUpsertArgs,\r\n    transaction?: Transaction,\r\n  ): Promise<MessageLinkPreviewEntity> {\r\n    const { messageID, url, title, description, img } = args;\r\n    const [result, _] = await MessageLinkPreviewEntity.upsert(\r\n      {\r\n        messageID,\r\n        url,\r\n        title,\r\n        description,\r\n        img,\r\n        hidden: false,\r\n      },\r\n      { transaction },\r\n    );\r\n    return result;\r\n  }\r\n\r\n  async hide(linkPreviewID: UUID): Promise<boolean> {\r\n    if (!this.loaders) {\r\n      throw new Error('loaders cannot be null for messagLinkPreviewMutator');\r\n    }\r\n\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const linkPreview =\r\n      await this.loaders.messageLinkPreviewLoader.loadLinkPreview(\r\n        linkPreviewID,\r\n      );\r\n\r\n    if (!linkPreview) {\r\n      throw new Error('Link preview was not loaded');\r\n    }\r\n\r\n    const message = await this.loaders.messageLoader.loadMessage(\r\n      linkPreview?.messageID,\r\n    );\r\n\r\n    if (!message) {\r\n      throw new Error('Cannot find message.');\r\n    }\r\n\r\n    if (message.sourceID !== userID) {\r\n      throw new Error('Only the message author can edit the link previews');\r\n    }\r\n\r\n    const [updated] = await MessageLinkPreviewEntity.update(\r\n      {\r\n        hidden: true,\r\n      },\r\n      {\r\n        where: {\r\n          id: linkPreviewID,\r\n        },\r\n      },\r\n    );\r\n\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'thread-message-updated',\r\n        { threadID: message.threadID },\r\n        { messageID: message.id },\r\n      ),\r\n    );\r\n\r\n    return updated > 0;\r\n  }\r\n}\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { getLinksForMessage } from 'server/src/asyncTier/jobs/generateLinkPreviews.ts';\r\nimport submitAsync from 'server/src/asyncTier/submitAsync.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\n\r\nexport async function scheduleGenerateLinkPreviews(\r\n  context: RequestContext,\r\n  message: MessageEntity,\r\n) {\r\n  if (message.skipLinkPreviews) {\r\n    return;\r\n  }\r\n\r\n  const flagUser = flagsUserFromContext(context);\r\n  const linkPreviewsEnabled = await getTypedFeatureFlagValue(\r\n    FeatureFlags.SHOW_LINK_PREVIEWS,\r\n    flagUser,\r\n  );\r\n  if (!linkPreviewsEnabled) {\r\n    return;\r\n  }\r\n\r\n  const existingPreviewCount = await MessageLinkPreviewEntity.count({\r\n    where: { messageID: message.id },\r\n  });\r\n\r\n  const links = getLinksForMessage(message.content);\r\n  if (existingPreviewCount === 0 && links.size === 0) {\r\n    // If there are no existing previews and no links, it's safe to just do\r\n    // nothing\r\n    return;\r\n  }\r\n\r\n  void submitAsync(\r\n    'generateLinkPreviews',\r\n    {\r\n      messageID: message.id,\r\n    },\r\n    { singletonKey: message.id },\r\n  );\r\n}\r\n\r\nexport async function scheduleUpdateLinkPreviews(\r\n  context: RequestContext,\r\n  message: MessageEntity,\r\n) {\r\n  if (message.skipLinkPreviews) {\r\n    await MessageLinkPreviewEntity.destroy({\r\n      where: { messageID: message.id },\r\n    });\r\n  } else {\r\n    const flagUser = flagsUserFromContext(context);\r\n    const linkPreviewsEnabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.SHOW_LINK_PREVIEWS,\r\n      flagUser,\r\n    );\r\n    if (!linkPreviewsEnabled) {\r\n      return;\r\n    }\r\n\r\n    void submitAsync(\r\n      'generateLinkPreviews',\r\n      {\r\n        messageID: message.id,\r\n      },\r\n      { singletonKey: message.id },\r\n    );\r\n  }\r\n}\r\n", "import type {\r\n  FileAttachmentInput,\r\n  MessageContent,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport type {\r\n  AnnotationAttachmentInput,\r\n  ScreenshotAttachmentInput,\r\n} from 'server/src/admin/resolverTypes.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport type { TaskInput } from 'server/src/console/resolverTypes.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { ACTIVATION_FIRST_MESSAGE_SENT } from 'common/const/UserPreferenceKeys.ts';\r\nimport { UserPreferenceMutator } from 'server/src/entity/user_preference/UserPreferenceMutator.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\n\r\n// Individual tasks\r\nimport {\r\n  createMessageMentions,\r\n  updateMessageMentions,\r\n} from 'server/src/schema/common.ts';\r\nimport { addNewMessageAttachments } from 'server/src/message/new_message_tasks/addNewMessageAttachments.ts';\r\nimport { markThreadSeenForViewer } from 'server/src/message/new_message_tasks/markThreadSeenForViewer.ts';\r\nimport { addNewMessageTasks } from 'server/src/message/new_message_tasks/addNewMessageTasks.ts';\r\nimport { publishNewMessageEvents } from 'server/src/message/new_message_tasks/publishNewMessageEvents.ts';\r\nimport { maybeUnresolveThread } from 'server/src/message/new_message_tasks/maybeUnresolveThread.ts';\r\nimport { maybeNotifyReferencedUsers } from 'server/src/message/new_message_tasks/maybeNotifyReferencedUsers.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { notifyReferencedUsers } from 'server/src/message/update_message_tasks/notifyReferencedUsers.ts';\r\nimport {\r\n  publishUpdatedMessageEvents,\r\n  publishAppendedMessageContentEvents,\r\n} from 'server/src/message/update_message_tasks/publishUpdatedMessageEvents.ts';\r\nimport { updateMessageAttachments } from 'server/src/message/update_message_tasks/updateMessageAttachments.ts';\r\nimport { updateMessageTask } from 'server/src/message/update_message_tasks/updateMessageTask.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport {\r\n  scheduleGenerateLinkPreviews,\r\n  scheduleUpdateLinkPreviews,\r\n} from 'server/src/message/new_message_tasks/scheduleGenerateLinkPreviews.tsx';\r\n\r\ntype ExecuteNewMessageCreationTasksArgs = {\r\n  context: RequestContext;\r\n  flagsUser: FlagsUser;\r\n  application: ApplicationEntity;\r\n  page: PageEntity;\r\n  thread: ThreadEntity;\r\n  message: MessageEntity;\r\n  fileAttachments: FileAttachmentInput[];\r\n  annotationAttachments: AnnotationAttachmentInput[];\r\n  screenshotAttachment: ScreenshotAttachmentInput | null | undefined;\r\n  isFirstMessage: boolean;\r\n  task: TaskInput | null | undefined;\r\n  subscribeToThread: boolean;\r\n  sendNotifications?: boolean;\r\n};\r\n\r\n// Very nearly named this function 'executeRandomBagOf...' What we have here is\r\n// a long list of discrete tasks that all need to be done when a new message\r\n// comes rolling in to our system. Messages can be created via GraphQL from\r\n// users using our UIs, via mirroring Slack conversations, by reply to Cord\r\n// notification emails, or they can be injected via REST API. I'm sure there\r\n// will be other ways to create them soon, too. This function has grown by\r\n// accretion over the course of years, so there's not much 'design' to it. It\r\n// just does each of the things one after another.\r\nexport async function executeNewMessageCreationTasks({\r\n  context,\r\n  flagsUser,\r\n  application,\r\n  page,\r\n  thread,\r\n  message,\r\n  fileAttachments,\r\n  annotationAttachments,\r\n  screenshotAttachment,\r\n  isFirstMessage,\r\n  task,\r\n  subscribeToThread,\r\n  sendNotifications = true,\r\n}: ExecuteNewMessageCreationTasksArgs): Promise<void> {\r\n  await addNewMessageAttachments(\r\n    context,\r\n    message,\r\n    fileAttachments,\r\n    annotationAttachments,\r\n    screenshotAttachment,\r\n  );\r\n\r\n  let taskAssigneeUserIDs: UUID[] = [];\r\n  if (task) {\r\n    taskAssigneeUserIDs = await addNewMessageTasks(\r\n      context.session.viewer,\r\n      context.loaders,\r\n      task,\r\n      message.id,\r\n    );\r\n  }\r\n\r\n  const mentionedUserIDs = await createMessageMentions(\r\n    context,\r\n    message.id,\r\n    message.content,\r\n  );\r\n\r\n  if (sendNotifications) {\r\n    await maybeNotifyReferencedUsers(\r\n      context,\r\n      flagsUser,\r\n      application,\r\n      page,\r\n      thread,\r\n      message,\r\n      mentionedUserIDs,\r\n      taskAssigneeUserIDs,\r\n      fileAttachments,\r\n      isFirstMessage,\r\n      subscribeToThread,\r\n      screenshotAttachment?.blurredScreenshotFileID ||\r\n        screenshotAttachment?.screenshotFileID ||\r\n        undefined,\r\n    );\r\n  }\r\n\r\n  const showActivationNux = await getFeatureFlagValue(\r\n    'show_activation_welcome_message_nux',\r\n    flagsUser,\r\n  );\r\n\r\n  if (showActivationNux) {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    // Dismiss the activation NUX when user sends their first message\r\n    const userPreferenceMutator = new UserPreferenceMutator(\r\n      context.session.viewer,\r\n    );\r\n    await userPreferenceMutator.setPreferenceForUser(\r\n      userID,\r\n      ACTIVATION_FIRST_MESSAGE_SENT,\r\n      true,\r\n    );\r\n  }\r\n  // These pubsub events are in the same transaction so we can correctly publish\r\n  // the events after the transaction is completed resulting in the 'thread-message-added'\r\n  // event containing the correct state of thread participants.\r\n  await getSequelize().transaction(async (transaction) => {\r\n    // We want the pubsub event for 'thread-message-added' to be published\r\n    // before the one for 'thread-participants-updated-incremental' to prevent\r\n    // the UI flickering from showing the 'Seen by X' and then being immediately\r\n    // replaced with a new message.\r\n\r\n    await publishNewMessageEvents(\r\n      application,\r\n      page,\r\n      thread,\r\n      message,\r\n      isFirstMessage,\r\n      annotationAttachments.length > 0,\r\n      mentionedUserIDs,\r\n      context,\r\n      transaction,\r\n    );\r\n\r\n    await markThreadSeenForViewer(\r\n      context.session.viewer,\r\n      thread.id,\r\n      transaction,\r\n    );\r\n  });\r\n\r\n  await maybeUnresolveThread(context, thread, message);\r\n\r\n  await scheduleGenerateLinkPreviews(context, message);\r\n}\r\n\r\n// Similar function as the one above, but for when a message gets updated.\r\nexport async function executeUpdateMessageTasks({\r\n  context,\r\n  message,\r\n  thread,\r\n  task,\r\n  fileAttachments,\r\n  annotationAttachments,\r\n  wasDeletedOrUndeleted,\r\n  authorUpdated,\r\n  content,\r\n  originalSubscribers,\r\n}: {\r\n  context: RequestContext;\r\n  message: MessageEntity;\r\n  thread: ThreadEntity;\r\n  fileAttachments?: FileAttachmentInput[] | null;\r\n  annotationAttachments?: AnnotationAttachmentInput[] | null;\r\n  task?: TaskInput | null;\r\n  wasDeletedOrUndeleted: boolean;\r\n  authorUpdated?: boolean;\r\n  content?: MessageContent | null;\r\n  originalSubscribers: Set<UUID>;\r\n}) {\r\n  const viewer = context.session.viewer;\r\n  let updateAnnotationsOnPage = false;\r\n\r\n  // Checks if attachments are being updated\r\n  if (fileAttachments && annotationAttachments) {\r\n    const attachmentsUpdated = await updateMessageAttachments(\r\n      context,\r\n      message,\r\n      fileAttachments,\r\n      annotationAttachments,\r\n    );\r\n\r\n    if (attachmentsUpdated) {\r\n      updateAnnotationsOnPage = true;\r\n    }\r\n  }\r\n\r\n  let newTaskAssigneeUserIDs: UUID[] = [];\r\n  let removedTaskAssigneeUserIDs: UUID[] = [];\r\n\r\n  if (task !== undefined) {\r\n    ({\r\n      newTaskAssignees: newTaskAssigneeUserIDs,\r\n      removedTaskAssignees: removedTaskAssigneeUserIDs,\r\n    } = await updateMessageTask(context, message, task));\r\n  }\r\n\r\n  if (wasDeletedOrUndeleted) {\r\n    const threadParticipationMutator = new ThreadParticipantMutator(\r\n      viewer,\r\n      context.loaders,\r\n    );\r\n    await threadParticipationMutator.updateLastUnseenMessageTimestamp(\r\n      message.threadID,\r\n      message.orgID,\r\n    );\r\n    const threadHasAnnotations =\r\n      await context.loaders.messageAttachmentLoader.loadThreadHasAnnotations(\r\n        message.threadID,\r\n      );\r\n    if (threadHasAnnotations) {\r\n      updateAnnotationsOnPage = true;\r\n    }\r\n  }\r\n\r\n  if (authorUpdated) {\r\n    const threadHasAnnotations =\r\n      await context.loaders.messageAttachmentLoader.loadThreadHasAnnotations(\r\n        message.threadID,\r\n      );\r\n    if (threadHasAnnotations) {\r\n      updateAnnotationsOnPage = true;\r\n    }\r\n  }\r\n\r\n  const newUserReferenceIDs: UUID[] = [];\r\n  let newMentionUserIDs: UUID[] = [];\r\n  // if content was updated, checks and updates mentions\r\n  if (content !== undefined && content !== null) {\r\n    newMentionUserIDs = await updateMessageMentions(\r\n      context,\r\n      message.id,\r\n      content,\r\n    );\r\n    newUserReferenceIDs.push(...newMentionUserIDs);\r\n  }\r\n\r\n  if (newUserReferenceIDs.length > 0 || removedTaskAssigneeUserIDs.length > 0) {\r\n    const threadParticipantMutator = new ThreadParticipantMutator(\r\n      viewer,\r\n      context.loaders,\r\n    );\r\n    await threadParticipantMutator.subscribeUsersToThread(\r\n      message.threadID,\r\n      newUserReferenceIDs,\r\n    );\r\n    await notifyReferencedUsers({\r\n      context,\r\n      message: message,\r\n      mentionedUserIDs: newMentionUserIDs,\r\n      taskAssigneeUserIDs: newTaskAssigneeUserIDs,\r\n      removedTaskAssigneeUserIDs,\r\n      fileAttachments,\r\n    });\r\n  }\r\n\r\n  if (content !== undefined && content !== null) {\r\n    await scheduleUpdateLinkPreviews(context, message);\r\n  }\r\n\r\n  publishUpdatedMessageEvents(\r\n    context,\r\n    thread,\r\n    message,\r\n    updateAnnotationsOnPage,\r\n    newUserReferenceIDs,\r\n    originalSubscribers,\r\n  );\r\n}\r\n\r\nexport async function executeAppendMessageContentTasks({\r\n  context,\r\n  message,\r\n  appendedContent,\r\n}: {\r\n  context: RequestContext;\r\n  message: MessageEntity;\r\n  appendedContent: string;\r\n}) {\r\n  await scheduleUpdateLinkPreviews(context, message);\r\n  publishAppendedMessageContentEvents(message, appendedContent);\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport {\r\n  MessageReactionEntity,\r\n  REACTION_MAX_LENGTH,\r\n} from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport class MessageReactionMutator {\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders | null,\r\n  ) {}\r\n\r\n  async createOne(\r\n    messageID: UUID,\r\n    unicodeReaction: string,\r\n    timestamp?: Date,\r\n    transaction?: Transaction,\r\n  ): Promise<MessageReactionEntity> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    if (unicodeReaction.length > REACTION_MAX_LENGTH) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `Reaction is too long, must be less than ${REACTION_MAX_LENGTH} characters`,\r\n      });\r\n    }\r\n\r\n    const result = await MessageReactionEntity.create(\r\n      {\r\n        userID: userID,\r\n        messageID,\r\n        unicodeReaction,\r\n        timestamp,\r\n      },\r\n      { transaction },\r\n    );\r\n    this.loaders?.messageReactionLoader.clearAll();\r\n    return result;\r\n  }\r\n\r\n  async deleteReaction(messageID: UUID, reactionID: UUID): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const deleteRow = await MessageReactionEntity.destroy({\r\n      where: {\r\n        id: reactionID,\r\n        userID,\r\n        messageID,\r\n      },\r\n    });\r\n    this.loaders?.messageReactionLoader.clearAll();\r\n    return deleteRow === 1;\r\n  }\r\n\r\n  async deleteUnicodeReaction(\r\n    messageID: UUID,\r\n    unicodeReaction: string,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    const deleteRow = await MessageReactionEntity.destroy({\r\n      where: {\r\n        userID,\r\n        messageID,\r\n        unicodeReaction,\r\n      },\r\n      transaction,\r\n    });\r\n\r\n    this.loaders?.messageReactionLoader.clearAll();\r\n    return deleteRow === 1;\r\n  }\r\n}\r\n", "import type { Request } from 'express';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\n/**\r\n * Will check if there is an organizationID passed into the request body and\r\n * if there is it will add a groupID. If not it will just return the original\r\n * request body. Used in CreateThreadMessageHandler\r\n */\r\nexport function addGroupIDIfNotExistCreateThreadMessageHandler<\r\n  T extends Request['body'],\r\n>(reqBody: T, platformApplicationID: string | undefined) {\r\n  if (typeof reqBody !== 'object' || !reqBody) {\r\n    return reqBody;\r\n  }\r\n\r\n  if (!('createThread' in reqBody)) {\r\n    return reqBody;\r\n  }\r\n\r\n  if (typeof reqBody['createThread'] !== 'object' || !reqBody['createThread']) {\r\n    return reqBody;\r\n  }\r\n\r\n  if ('groupID' in reqBody['createThread']) {\r\n    return reqBody;\r\n  }\r\n\r\n  if ('organizationID' in reqBody['createThread']) {\r\n    deprecated(\r\n      'createThreadMessageHandler:organizationID',\r\n      platformApplicationID,\r\n    );\r\n    return {\r\n      ...reqBody,\r\n      createThread: {\r\n        ...reqBody['createThread'],\r\n        groupID: reqBody['createThread']['organizationID'],\r\n      },\r\n    };\r\n  }\r\n\r\n  return reqBody;\r\n}\r\n\r\n/**\r\n * Used in UpdateThreadHandler\r\n */\r\nexport function addGroupIDIfOrgIDExists<T extends Request['body']>(\r\n  reqBody: T,\r\n  platformApplicationID: string | undefined,\r\n) {\r\n  if (typeof reqBody !== 'object' || !reqBody) {\r\n    return reqBody;\r\n  }\r\n\r\n  if (!('organizationID' in reqBody)) {\r\n    return reqBody;\r\n  }\r\n  deprecated('updateThreadHandler:organizationID', platformApplicationID);\r\n  return { ...reqBody, groupID: reqBody.organizationID };\r\n}\r\n\r\nexport function addGroupIDIfNotExistUpdateUserPresenceHandler<\r\n  T extends Request['body'],\r\n>(reqBody: T, platformApplicationID: string | undefined) {\r\n  if (typeof reqBody !== 'object' || !reqBody) {\r\n    return reqBody;\r\n  }\r\n\r\n  if (!('organizationID' in reqBody)) {\r\n    return reqBody;\r\n  }\r\n  deprecated('updateUserPresenceHandler:organizationID', platformApplicationID);\r\n  return { ...reqBody, groupID: reqBody.organizationID };\r\n}\r\n", "import type { Profiler } from 'inspector';\r\nimport * as inspector from 'inspector';\r\nimport type { Request, Response } from 'express';\r\nimport type { RequestWithContext } from 'server/src/RequestContext.ts';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\n\r\nasync function writeOutCPUProfileImpl(request: Request, response: Response) {\r\n  {\r\n    // before deleting this check, make sure that both admin and public server\r\n    // are only allowing admins to use this endpoint\r\n    if (!(request as RequestWithContext).context.session.isAdmin) {\r\n      response.statusCode = 403;\r\n      response.send('access denied');\r\n      return;\r\n    }\r\n    response.statusCode = 200;\r\n    response.setHeader('Content-type', 'application/json');\r\n    const session = new inspector.Session();\r\n    session.connect();\r\n\r\n    await enableProfiler(session);\r\n    await startProfiler(session);\r\n\r\n    // If a valid length was specified (not NaN and within reasonable bounds),\r\n    // use it, otherwise default to 5 seconds.\r\n    const reqMs = Number(request.query.ms);\r\n    const ms = reqMs && 0 < reqMs && reqMs <= 2 * 60 * 1000 ? reqMs : 5000;\r\n\r\n    await sleep(ms);\r\n\r\n    const { profile } = await stopProfiler(session);\r\n    response.write(JSON.stringify(profile));\r\n    session.disconnect();\r\n    response.end();\r\n  }\r\n}\r\n\r\nexport const writeOutCPUProfile = forwardHandlerExceptionsToNext(\r\n  writeOutCPUProfileImpl,\r\n);\r\n\r\nasync function takeHeapSnapshotImpl(request: Request, response: Response) {\r\n  // before deleting this check, make sure that both admin and public server\r\n  // are only allowing admins to use this endpoint\r\n  if (!(request as RequestWithContext).context.session.isAdmin) {\r\n    response.statusCode = 403;\r\n    response.send('access denied');\r\n    return;\r\n  }\r\n  response.statusCode = 200;\r\n  response.setHeader('Content-type', 'application/json');\r\n\r\n  const session = new inspector.Session();\r\n  session.connect();\r\n\r\n  session.on('HeapProfiler.addHeapSnapshotChunk', (m) => {\r\n    response.write(m.params.chunk);\r\n  });\r\n\r\n  session.post('HeapProfiler.takeHeapSnapshot', undefined, () => {\r\n    session.disconnect();\r\n    response.end();\r\n  });\r\n}\r\n\r\nfunction enableProfiler(session: inspector.Session) {\r\n  return sendMessage('Profiler.enable', session);\r\n}\r\n\r\nfunction startProfiler(session: inspector.Session) {\r\n  return sendMessage('Profiler.start', session);\r\n}\r\n\r\nfunction stopProfiler(session: inspector.Session) {\r\n  return sendMessage(\r\n    'Profiler.stop',\r\n    session,\r\n  ) as Promise<Profiler.StopReturnType>;\r\n}\r\n\r\nfunction sendMessage<T extends string>(message: T, session: inspector.Session) {\r\n  return new Promise((resolve, reject) =>\r\n    session.post(message, (err: Error | null, result: unknown) => {\r\n      if (err != null) {\r\n        reject(err);\r\n      }\r\n      resolve(result);\r\n    }),\r\n  );\r\n}\r\n\r\nexport const takeHeapSnapshot =\r\n  forwardHandlerExceptionsToNext(takeHeapSnapshotImpl);\r\n", "import type express from 'express';\r\nimport * as cookie from 'cookie';\r\n\r\nimport type {\r\n  RequestContext,\r\n  RequestWithContext,\r\n} from 'server/src/RequestContext.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\n\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { getSessionFromAuthHeader } from 'server/src/auth/session.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { toDeploymentType } from 'common/types/index.ts';\r\nimport type { DeploymentType } from 'common/types/index.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\n\r\nexport const authenticatedRequestContext = async (\r\n  authorization: string,\r\n  clientVersion: string | null,\r\n  deployment: DeploymentType | null,\r\n): Promise<RequestContext> => {\r\n  try {\r\n    const session = await getSessionFromAuthHeader(\r\n      authorization,\r\n      clientVersion,\r\n    );\r\n    return await contextWithSession(\r\n      session,\r\n      getSequelize(),\r\n      clientVersion,\r\n      deployment,\r\n    );\r\n  } catch (e: any) {\r\n    if (e instanceof ClientFacingError || e instanceof ApiCallerError) {\r\n      // These are errors intended for the caller, so log them for our\r\n      // information but they're not erroneous behavior from us\r\n      anonymousLogger().logException(\r\n        e.message,\r\n        e,\r\n        undefined,\r\n        undefined,\r\n        'info',\r\n      );\r\n    } else {\r\n      anonymousLogger().logException(e.message, e);\r\n    }\r\n    throw e;\r\n  }\r\n};\r\n\r\nfunction getContextForHTTPRequest(\r\n  req: express.Request,\r\n): Promise<RequestContext> {\r\n  const authorizationHeader = req.header('Authorization');\r\n\r\n  const cookieToken = cookie.parse(req.header('Cookie') || '')['token'] as\r\n    | string\r\n    | undefined;\r\n  return authenticatedRequestContext(\r\n    authorizationHeader || cookieToken || '',\r\n    req.header('X-Version') || null,\r\n    toDeploymentType(req.header('X-Deployment')),\r\n  );\r\n}\r\n\r\nexport function RequestContextMiddleware(\r\n  req: express.Request,\r\n  res: express.Response,\r\n  next: express.NextFunction,\r\n) {\r\n  void (async () => {\r\n    let logger = anonymousLogger();\r\n    try {\r\n      const context = await getContextForHTTPRequest(req);\r\n      (req as RequestWithContext).context = context;\r\n      logger = context.logger;\r\n    } catch (e: any) {\r\n      // This is probably adequate for now, but it will likely lead to\r\n      // incorrect response status/messages in the future. The assumption\r\n      // here is that we'll only get a throw that is truly an authentication\r\n      // error. That's not guaranteed. If there were an application error\r\n      // (which should be reported as a 5XX error), we'd still report it as\r\n      // a 403. Meh.\r\n      res.status(403);\r\n      res.json({ error: e.message });\r\n      res.end();\r\n\r\n      return;\r\n    }\r\n\r\n    logger.debug('Incoming connection (RequestContextMiddleware)', {\r\n      headers: req.headers,\r\n      remoteAddress: req.socket.remoteAddress,\r\n    });\r\n\r\n    next();\r\n  })();\r\n}\r\n", "import type { Request } from 'express';\r\nimport type { JwtPayload } from 'jsonwebtoken';\r\nimport { verify, decode } from 'jsonwebtoken';\r\n\r\nimport isUUID from 'validator/lib/isUUID.js';\r\nimport { getTokenFromAuthorizationHeader } from 'common/auth/index.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport { CLIENT_VERSION_MAX_DAYS_OLD } from 'common/const/Timing.ts';\r\nimport type { JsonObject, Tier } from 'common/types/index.ts';\r\nimport type { Session, Auth0Token } from 'server/src/auth/index.ts';\r\nimport {\r\n  jwksClient,\r\n  Viewer,\r\n  createAnonymousSession,\r\n  AuthProviderType,\r\n} from 'server/src/auth/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { DeploysLoader } from 'server/src/entity/deploys/DeploysLoader.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport { updateOrganization } from 'server/src/public/routes/platform/orgs/UpdatePlatformOrganizationsHandler.ts';\r\nimport { updateOrganizationMembers } from 'server/src/public/routes/platform/org_members/UpdatePlatformOrganizationMembersHandler.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\nimport { OrgMembersLoader } from 'server/src/entity/org_members/OrgMembersLoader.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport {\r\n  FeatureFlags,\r\n  getFeatureFlagValue,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { updateUser } from 'server/src/public/routes/platform/users/UpdatePlatformUserHandler.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { ConsoleUserMutator } from 'server/src/entity/user/ConsoleUserMutator.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { InternalClientAuthTokenData } from 'server/src/public/routes/platform/types.ts';\r\nimport {\r\n  CORD_SAMPLE_TOKEN_CUSTOMER_ID,\r\n  DEMO_APPS_APP_GROUP_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { sampleTokenAppSecret } from 'server/src/util/sampleTokenAppSecret.ts';\r\nimport {\r\n  removeEmptyStringEmailIfExists,\r\n  validate,\r\n} from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\nimport { ConsoleUserLoader } from 'server/src/entity/user/ConsoleUserLoader.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nexport async function decodeSessionFromJWT(token: string): Promise<Session> {\r\n  const logger = anonymousLogger();\r\n  const decoded = decode(token, { complete: true });\r\n  if (typeof decoded?.payload === 'string') {\r\n    // The decode() return type allows decoded.payload to be a string, which we\r\n    // don't ever expect to happen and is never valid.\r\n    throw new ApiCallerError(\r\n      'invalid_access_token',\r\n      { message: formatInvalidSessionError('Invalid jwt') },\r\n      {\r\n        token,\r\n      },\r\n    );\r\n  }\r\n  if (\r\n    decoded?.header?.alg === 'RS256' &&\r\n    decoded?.payload?.iss === `https://${env.AUTH0_CUSTOM_LOGIN_DOMAIN}/`\r\n  ) {\r\n    // This is an Auth0 token for the developer console\r\n    const key = await jwksClient.getSigningKey(decoded?.header?.kid);\r\n    const validated = verify(token, key.getPublicKey(), {\r\n      algorithms: ['RS256'],\r\n    }) as Auth0Token;\r\n\r\n    // All of these below are passed in using the Auth0 Actions Login flow\r\n    // under the add-email-to-token.\r\n    // You can view and edit this in the Auth0 dashboard\r\n    const email = validated['https://console.cord.com/email'];\r\n    const email_verified = validated['https://console.cord.com/email_verified'];\r\n    const auth0UserID = validated['auth0UserID'];\r\n\r\n    if (!validated || !validated.sub || !email || !isDefined(email_verified)) {\r\n      throw new ApiCallerError(\r\n        'invalid_access_token',\r\n        { message: formatInvalidSessionError('Invalid jwt') },\r\n        {\r\n          token,\r\n        },\r\n      );\r\n    }\r\n\r\n    const viewer = Viewer.createConsoleViewer(email);\r\n\r\n    const consoleLoader = new ConsoleUserLoader(viewer);\r\n\r\n    // Load the user to check if the they already have an auth0 user_id assigned\r\n    const user = await consoleLoader.loadUser(email);\r\n\r\n    if (!auth0UserID) {\r\n      // This should never happen unless theres something wrong with our Auth0\r\n      // actions..\r\n      logger.error('Could not find auth0UserID', {\r\n        attemptedLogin: { email },\r\n      });\r\n      throw new ApiCallerError('invalid_access_token');\r\n    }\r\n\r\n    if (!user || !user.auth0UserID) {\r\n      // New sign up or existing user with no autt0 user id stored\r\n      await new ConsoleUserMutator(viewer).upsertUser({\r\n        email,\r\n        verified: email_verified,\r\n        auth0UserID,\r\n      });\r\n\r\n      return {\r\n        viewer,\r\n        console: {\r\n          email_verified,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Check to see if the auth0 user id in our database match\r\n    if (auth0UserID !== user.auth0UserID) {\r\n      // This is someone trying to log in to the console using another way of\r\n      // authenticatin via Auth0 that they did before hane e.g they might\r\n      // have originally used google, and now they are trying to login using\r\n      // email and password.\r\n      logger.error('Console auth0 user does not match', {\r\n        attemptedLogin: { email, auth0UserID },\r\n      });\r\n      throw new ApiCallerError('invalid_console_user');\r\n    }\r\n\r\n    return {\r\n      viewer,\r\n      console: {\r\n        email_verified,\r\n      },\r\n    };\r\n  } else if (!decoded?.payload?.viewer) {\r\n    // This is a session token from a partner\r\n    // (a normal platform user client token)\r\n    // NOTE: This function does some data cleaning as well\r\n    const platformSession = await verifySessionToken(token);\r\n\r\n    if (platformSession.group_details && !platformSession.group_id) {\r\n      throw new ApiCallerError('group_not_found', {\r\n        message: `Specified group_details to create/update a group, but not a group_id to create/update.`,\r\n      });\r\n    }\r\n\r\n    // They sent user details along with the request, so update that user\r\n    if (platformSession.user_details) {\r\n      await updateUser(\r\n        platformSession.app_id,\r\n        platformSession.user_id,\r\n        platformSession.user_details,\r\n      );\r\n    }\r\n    // They sent org details along with the request, so update the org and link\r\n    // the user and org\r\n    if (platformSession.group_id && platformSession.group_details) {\r\n      await updateOrganization(\r\n        platformSession.app_id,\r\n        platformSession.group_id,\r\n        platformSession.group_details,\r\n      );\r\n    }\r\n    if (\r\n      platformSession.group_id &&\r\n      (platformSession.user_details || platformSession.group_details)\r\n    ) {\r\n      // If either the user or the org had details supplied, they must mean for\r\n      // these to be linked\r\n      await updateOrganizationMembers(\r\n        platformSession.app_id,\r\n        platformSession.group_id,\r\n        { add: [platformSession.user_id] },\r\n      );\r\n    }\r\n    const { user, org } = await loadFromSessionToken(platformSession);\r\n\r\n    return {\r\n      viewer: await Viewer.createLoggedInPlatformViewer({\r\n        user,\r\n        org,\r\n      }),\r\n    };\r\n  } else {\r\n    // This is one of our tokens for the Cord application\r\n    const {\r\n      iat: _iat,\r\n      exp: _exp,\r\n      ...serializedSession\r\n    } = verify(token, env.JWT_SIGNING_SECRET) as JwtPayload;\r\n    return {\r\n      ...serializedSession,\r\n      viewer: Viewer.createFromSerializedState(serializedSession.viewer),\r\n    };\r\n  }\r\n}\r\n\r\nexport async function getSessionFromAuthHeader(\r\n  authHeader: string,\r\n  clientVersion: string | null,\r\n): Promise<Session> {\r\n  let logger = anonymousLogger();\r\n  if (authHeader) {\r\n    let isClientTooOld = false;\r\n    const clientVersionDaysOld = await getClientVersionDaysOld(clientVersion);\r\n    if (clientVersionDaysOld > CLIENT_VERSION_MAX_DAYS_OLD) {\r\n      isClientTooOld = true;\r\n    }\r\n\r\n    let session: Session;\r\n    let token: string;\r\n    try {\r\n      token = getTokenFromAuthorizationHeader(authHeader);\r\n    } catch (e) {\r\n      throw new ApiCallerError(\r\n        'invalid_access_token',\r\n        { message: formatInvalidSessionError((e as any).message) },\r\n        {\r\n          error: e as JsonObject,\r\n          authHeader,\r\n        },\r\n        { ...(e instanceof CordError && e.loggingTags) },\r\n      );\r\n    }\r\n\r\n    try {\r\n      session = await decodeSessionFromJWT(token);\r\n    } catch (e) {\r\n      throw new ApiCallerError(\r\n        'invalid_access_token',\r\n        { message: formatInvalidSessionError((e as any).message) },\r\n        {\r\n          error: e as JsonObject,\r\n          encodedToken: token,\r\n          decodedToken: decode(token),\r\n        },\r\n        { ...(e instanceof CordError && e.loggingTags) },\r\n      );\r\n    }\r\n    logger = new Logger(session.viewer);\r\n\r\n    if (\r\n      isClientTooOld &&\r\n      (await getFeatureFlagValue('enable_blocking_old_clients', {\r\n        platformApplicationID:\r\n          session.viewer.platformApplicationID ?? 'extension',\r\n        userID: session.viewer.userID ?? 'anonymous',\r\n        orgID: session.viewer.orgID,\r\n        version: null,\r\n      })) === true\r\n    ) {\r\n      // Checking after `session` is defined, so we can log more info.\r\n      logger.info('Client too old.', {\r\n        ...session.viewer,\r\n        isAdmin: session.isAdmin,\r\n        utmParameters: session.utmParameters,\r\n        clientVersionDaysOld,\r\n      });\r\n      throw new Error(Errors.CLIENT_TOO_OLD);\r\n    }\r\n\r\n    // If we get a session with a user, verify the user exists in this database.\r\n    // This defends against issues where someone switches between a local and\r\n    // production database without logging out. It also defends against session\r\n    // tokens for banned/disabled/deleted users.\r\n    if (session.viewer.userID) {\r\n      const userLoader = new UserLoader(\r\n        Viewer.createServiceViewer(),\r\n        () => null,\r\n      );\r\n      const user = await userLoader.loadUser(session.viewer.userID);\r\n      if (!user || user.state === 'deleted') {\r\n        throw new ClientFacingError(\r\n          formatInvalidSessionError(\r\n            'The user could not be loaded or is deleted in org',\r\n          ),\r\n          {\r\n            user_id: session.viewer.userID,\r\n            org_id: session.viewer.orgID,\r\n            app_id: session.viewer.platformApplicationID ?? 'extension',\r\n          },\r\n        );\r\n      }\r\n\r\n      session.isAdmin = user.admin;\r\n    }\r\n\r\n    if (session.viewer.orgID) {\r\n      const orgLoader = new OrgLoader(Viewer.createServiceViewer());\r\n      const org = await orgLoader.loadOrg(session.viewer.orgID);\r\n      if (!org || org.state === 'inactive') {\r\n        throw new ClientFacingError(\r\n          formatInvalidSessionError(\r\n            'The org could not be loaded or is inactive',\r\n          ),\r\n          {\r\n            org_id: session.viewer.orgID,\r\n            app_id: session.viewer.platformApplicationID ?? 'extension',\r\n          },\r\n        );\r\n      }\r\n    }\r\n\r\n    if (session.viewer.userID && session.viewer.orgID) {\r\n      const orgMembership = await new OrgMembersLoader(\r\n        Viewer.createServiceViewer(),\r\n      ).loadUserOrgMembership(session.viewer.userID, session.viewer.orgID);\r\n\r\n      if (!orgMembership) {\r\n        throw new ApiCallerError(\r\n          'user_not_in_organization',\r\n          {\r\n            message: formatInvalidSessionError(\r\n              'The user is not part of the org',\r\n            ),\r\n          },\r\n          {\r\n            user_id: session.viewer.userID,\r\n            org_id: session.viewer.orgID,\r\n            app_id: session.viewer.platformApplicationID ?? 'extension',\r\n          },\r\n        );\r\n      }\r\n    }\r\n    return session;\r\n  } else {\r\n    logger.debug('Anonymous session');\r\n    return createAnonymousSession();\r\n  }\r\n}\r\n\r\nasync function getClientVersionDaysOld(clientVersion: string | null) {\r\n  if (!clientVersion) {\r\n    return 0;\r\n  }\r\n  const mostRecentDeployment = await new DeploysLoader(\r\n    Viewer.createAnonymousViewer(),\r\n  ).loadMostRecentSuccessfulDeploymentCached(\r\n    clientVersion,\r\n    env.CORD_TIER as Tier,\r\n  );\r\n\r\n  if (!mostRecentDeployment) {\r\n    return 0;\r\n  }\r\n\r\n  const clientVersionDaysOld = Math.floor(\r\n    (Date.now() - mostRecentDeployment.getTime()) / (1000 * 60 * 60 * 24),\r\n  );\r\n\r\n  return clientVersionDaysOld;\r\n}\r\n\r\nfunction formatInvalidSessionError(message: string) {\r\n  return Errors.INVALID_SESSION + ' - ' + message;\r\n}\r\n\r\nconst tokensWithNoAppIDCounter = Counter({\r\n  name: 'tokensWithNoAppID',\r\n  help: 'Someone attempted to authenticate using a token with no app_id',\r\n});\r\n\r\nfunction appIDInData(data: unknown) {\r\n  if (!data) {\r\n    return false;\r\n  }\r\n\r\n  if (typeof data !== 'object') {\r\n    return false;\r\n  }\r\n\r\n  if (!('app_id' in data) && !('project_id' in data)) {\r\n    return false;\r\n  }\r\n\r\n  const { app_id, project_id } = data as {\r\n    app_id: unknown;\r\n    project_id: unknown;\r\n  };\r\n\r\n  const appID = project_id ?? app_id;\r\n\r\n  if (!appID || typeof appID !== 'string' || !isUUID.default(appID)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function validateSessionData(\r\n  data: unknown,\r\n): InternalClientAuthTokenData {\r\n  if (!appIDInData(data)) {\r\n    tokensWithNoAppIDCounter.inc({});\r\n    // only want to throw this error if these values are missing,\r\n    // not if it's not a valid input\r\n    if (\r\n      data &&\r\n      typeof data === 'object' &&\r\n      !('app_id' in data) &&\r\n      !('project_id' in data)\r\n    ) {\r\n      throw new ApiCallerError('invalid_session_token', {\r\n        message:\r\n          `Invalid ClientAuthTokenData:\\n` +\r\n          `Input ${JSON.stringify(data)} requires field: project_id.\\n` +\r\n          'Refer to https://docs.cord.com/reference/authentication/',\r\n        code: 401,\r\n      });\r\n    }\r\n  }\r\n\r\n  const {\r\n    app_id,\r\n    user_id,\r\n    organization_id,\r\n    user_details,\r\n    organization_details,\r\n    group_details,\r\n    group_id,\r\n    project_id,\r\n  } = removeEmptyStringEmailIfExists(validate.ClientAuthTokenData(data));\r\n\r\n  const orgID = group_id ?? organization_id;\r\n  const appID = project_id ?? app_id;\r\n\r\n  return {\r\n    // at this point appID will not be undefined\r\n    app_id: appID!,\r\n    user_id: user_id.toString(), //in case it was a number\r\n    group_id: orgID?.toString(), // in case it was a number\r\n    user_details,\r\n    group_details: group_details ?? organization_details,\r\n  };\r\n}\r\n\r\nasync function verifySessionToken(sessionToken: string, req?: Request) {\r\n  let platformSession: InternalClientAuthTokenData;\r\n  try {\r\n    const data = decode(sessionToken);\r\n    if (req && data instanceof Object) {\r\n      req.appID = data?.app_id;\r\n    }\r\n    platformSession = validateSessionData(data);\r\n\r\n    const application = await ApplicationEntity.findByPk(\r\n      platformSession.app_id,\r\n    );\r\n\r\n    if (application) {\r\n      verify(sessionToken, application.sharedSecret, {\r\n        algorithms: ['HS256', 'HS512'],\r\n      });\r\n      return platformSession;\r\n    }\r\n\r\n    const appID = platformSession.app_id ?? platformSession.project_id;\r\n\r\n    // The given application does not exist. Let's check if the token is signed with the secret for\r\n    // a sample app.\r\n    const sharedSecret = sampleTokenAppSecret(appID);\r\n\r\n    try {\r\n      verify(sessionToken, sharedSecret, {\r\n        algorithms: ['HS256', 'HS512'],\r\n      });\r\n    } catch (_) {\r\n      // The sample app secret was not used to sign the token. So it just\r\n      // references a non-existing app.\r\n      throw new ApiCallerError('project_not_found', {\r\n        message: `Platform project ${platformSession.app_id} not found.`,\r\n      });\r\n    }\r\n\r\n    // The token was signed with the sample token secret. Since the referenced\r\n    // application does not exist yet, we must create it now,\r\n    await ApplicationEntity.create({\r\n      id: platformSession.app_id,\r\n      name: 'Cord Sample Token',\r\n      sharedSecret,\r\n      environment: 'sampletoken',\r\n      customerID: CORD_SAMPLE_TOKEN_CUSTOMER_ID,\r\n    });\r\n\r\n    // Because we no longer specify org in the token, we need to create the org\r\n    // and user now, and add the user to the org\r\n    const [org, user] = await Promise.all([\r\n      OrgEntity.create({\r\n        state: 'active',\r\n        name: 'Cord Sample Group',\r\n        externalID: DEMO_APPS_APP_GROUP_ID, // same as demo apps group because sometimes sample tokens are used for demo apps client code\r\n        externalProvider: AuthProviderType.PLATFORM,\r\n        platformApplicationID: platformSession.app_id,\r\n      }),\r\n      UserEntity.create({\r\n        name: 'Sample User',\r\n        nameUpdatedTimestamp: new Date(),\r\n        profilePictureURL: `${APP_ORIGIN}/static/Anon-avatar-A.png`,\r\n        externalID: platformSession.user_id,\r\n        externalProvider: AuthProviderType.PLATFORM,\r\n        platformApplicationID: platformSession.app_id,\r\n      }),\r\n    ]);\r\n\r\n    await OrgMembersEntity.create({\r\n      userID: user.id,\r\n      orgID: org.id,\r\n    });\r\n\r\n    return platformSession;\r\n  } catch (e: any) {\r\n    if (e instanceof ApiCallerError) {\r\n      throw e;\r\n    } else {\r\n      throw new ApiCallerError('invalid_session_token', { message: e });\r\n    }\r\n  }\r\n}\r\n\r\nasync function loadFromSessionToken(\r\n  platformSession: InternalClientAuthTokenData,\r\n) {\r\n  const { app_id, user_id, group_id } = platformSession;\r\n\r\n  const userLoader = new UserLoader(Viewer.createAnonymousViewer(), () => null);\r\n\r\n  const [user, org] = await Promise.all([\r\n    userLoader.loadUndeletedUser(user_id, app_id),\r\n    group_id\r\n      ? OrgEntity.findOne({\r\n          where: {\r\n            externalID: group_id,\r\n            platformApplicationID: app_id,\r\n          },\r\n        })\r\n      : null,\r\n  ]);\r\n\r\n  if (!user) {\r\n    throw new ApiCallerError(\r\n      'user_not_found',\r\n      {\r\n        message: `Unable to load user ${user_id} in application ${app_id}. Perhaps the user is marked 'deleted'.`,\r\n      },\r\n      { app_id },\r\n    );\r\n  }\r\n\r\n  if (group_id && !org) {\r\n    throw new ApiCallerError(\r\n      'group_not_found',\r\n      {\r\n        message: `Platform group ${group_id} not found.`,\r\n      },\r\n      { app_id },\r\n    );\r\n  }\r\n\r\n  // check the user is part of the organization\r\n  if (org) {\r\n    const orgMembership = await OrgMembersEntity.findOne({\r\n      where: {\r\n        userID: user.id,\r\n        orgID: org.id,\r\n      },\r\n    });\r\n\r\n    if (!orgMembership) {\r\n      throw new ApiCallerError('user_not_in_group', undefined, {\r\n        app_id,\r\n        org_id: org.id,\r\n        externalUserID: user.externalID,\r\n        externalOrgID: org.externalID,\r\n      });\r\n    }\r\n  } else {\r\n    const application = await ApplicationEntity.findByPk(app_id);\r\n\r\n    const flagsUser: FlagsUser = {\r\n      userID: user.id,\r\n      platformApplicationID: user.platformApplicationID ?? 'extension',\r\n      version: null,\r\n      appEnvironment: application?.environment,\r\n    };\r\n    const allowNullOrg = await getTypedFeatureFlagValue(\r\n      FeatureFlags.ALLOW_MAGIC_GRAPHQL_ORG_ID_OVERRIDE,\r\n      flagsUser,\r\n    );\r\n    if (!allowNullOrg) {\r\n      throw new ApiCallerError('group_not_found', {\r\n        message: `group_id missing from access token.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    appID: app_id,\r\n    user,\r\n    org,\r\n  };\r\n}\r\n", "import { decode } from 'js-base64';\r\nimport type { DeploymentType } from 'common/types/index.ts';\r\nconst BEARER_PREFIX = 'Bearer ';\r\n\r\n// \"Bearer ABCDE\" -> \"ABCDE\"\r\nexport function getTokenFromAuthorizationHeader(authHeader: string): string {\r\n  if (!authHeader.startsWith(BEARER_PREFIX)) {\r\n    throw new Error('Malformed authorization header: no type prefix');\r\n  }\r\n\r\n  return authHeader.substring(BEARER_PREFIX.length);\r\n}\r\n\r\n// \"ABCDE\" -> \"Bearer ABCDE\"\r\n// null -> \"\"\r\nexport const getAuthorizationHeaderWithToken = (\r\n  token: string | null,\r\n): string => (token ? BEARER_PREFIX + token : '');\r\n\r\nexport interface WebsocketAuthParams {\r\n  Authorization: string;\r\n  Version: string;\r\n  Deployment: DeploymentType | null;\r\n}\r\n\r\nexport function parseJWT(jwt: string): {\r\n  header: Record<string, any>;\r\n  payload: Record<string, any>;\r\n} {\r\n  let parsed;\r\n  try {\r\n    const segments = jwt.split('.');\r\n    const [header, payload] = segments.slice(0, 2).map((s) => {\r\n      // decode supports both normal and URL-safe base64\r\n      const decoded = JSON.parse(decode(s));\r\n      if (Object.prototype.toString.call(decoded).slice(8, -1) !== 'Object') {\r\n        throw new Error('Parsed decoded segment is not an object');\r\n      }\r\n      return decoded;\r\n    });\r\n    parsed = { header, payload };\r\n  } catch (e) {\r\n    throw new Error(`Error parsing JWT ${e}`);\r\n  }\r\n\r\n  return parsed;\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\nimport { ConsoleUserLoader } from 'server/src/entity/user/ConsoleUserLoader.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nexport class ConsoleUserMutator {\r\n  viewer: Viewer;\r\n  logger: Logger;\r\n  loader: ConsoleUserLoader;\r\n\r\n  constructor(viewer: Viewer, loader?: ConsoleUserLoader) {\r\n    this.viewer = viewer;\r\n    this.logger = new Logger(viewer);\r\n    this.loader = loader ?? new ConsoleUserLoader(viewer);\r\n  }\r\n\r\n  async upsertUser({\r\n    email,\r\n    name,\r\n    picture,\r\n    verified,\r\n    auth0UserID,\r\n  }: {\r\n    email: string;\r\n    name?: string;\r\n    picture?: string;\r\n    verified?: boolean;\r\n    auth0UserID?: string;\r\n  }): Promise<ConsoleUserEntity> {\r\n    const user = await this.loader.loadUser(email);\r\n\r\n    if (user) {\r\n      return await user.update({ name, picture, verified, auth0UserID });\r\n    }\r\n\r\n    return await ConsoleUserEntity.create({\r\n      email,\r\n      name,\r\n      picture,\r\n      verified,\r\n      auth0UserID,\r\n    });\r\n  }\r\n\r\n  async grantCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    try {\r\n      await ConsoleUserEntity.update(\r\n        { customerID: customerID },\r\n        { where: { id: user.id }, transaction },\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to grant user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          customerID,\r\n        },\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async removeCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n  ): Promise<boolean> {\r\n    try {\r\n      await ConsoleUserEntity.update(\r\n        { customerID: null },\r\n        { where: { id: user.id, customerID } },\r\n      );\r\n      // no access exists, we consider this successful.\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to remove user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          customerID,\r\n        },\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async grantPendingUserCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    try {\r\n      const [updatedCount] = await ConsoleUserEntity.update(\r\n        { customerID, pendingCustomerID: null },\r\n        { where: { id: user.id, pendingCustomerID: customerID }, transaction },\r\n      );\r\n\r\n      if (updatedCount === 1) {\r\n        return true;\r\n      }\r\n      throw new Error(\r\n        'Could not update console user - grantPendingUserCustomerAccess',\r\n      );\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to grant pending user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          pendingCustomerID: user.pendingCustomerID,\r\n          customerID,\r\n        },\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async denyPendingUserCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n    transaction?: Transaction,\r\n  ) {\r\n    try {\r\n      const [updatedCount] = await ConsoleUserEntity.update(\r\n        { pendingCustomerID: null },\r\n        { where: { id: user.id, pendingCustomerID: customerID }, transaction },\r\n      );\r\n      if (updatedCount === 1) {\r\n        return true;\r\n      }\r\n      throw new Error(\r\n        'Could not update console user - denyPendingUserCustomerAccess',\r\n      );\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to deny pending user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          customerID,\r\n        },\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async requestCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n  ): Promise<boolean> {\r\n    try {\r\n      const [updatedCount] = await ConsoleUserEntity.update(\r\n        { pendingCustomerID: customerID },\r\n        { where: { id: user.id, customerID: null } },\r\n      );\r\n      if (updatedCount === 1) {\r\n        return true;\r\n      }\r\n      throw new Error('Could not update console user - requestCustomerAccess');\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to request user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          customerID,\r\n        },\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async revokeRequestCustomerAccess(\r\n    user: ConsoleUserEntity,\r\n    customerID: UUID,\r\n    transaction?: Transaction,\r\n  ): Promise<boolean> {\r\n    try {\r\n      const [updatedCount] = await ConsoleUserEntity.update(\r\n        { pendingCustomerID: null },\r\n        { where: { id: user.id }, transaction },\r\n      );\r\n      if (updatedCount === 1) {\r\n        return true;\r\n      }\r\n      throw new Error(\r\n        'Could not update console user - revokeRequestCustomerAccess',\r\n      );\r\n    } catch (error) {\r\n      this.logger.logException(\r\n        'Unable to revoke request user access to application',\r\n        error,\r\n        {\r\n          consoleUserId: user.id,\r\n          revokeRequestCustomerID: customerID,\r\n        },\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\n\r\n/**\r\n * Calculate a shared secret for a sample token app with the given id.\r\n *\r\n * @param appID application id\r\n * @returns the secret to be used for a sample token app with the given id\r\n */\r\nexport function sampleTokenAppSecret(appID: UUID) {\r\n  return crypto\r\n    .createHmac('sha256', env.JWT_SIGNING_SECRET)\r\n    .update(appID.toLowerCase())\r\n    .digest('hex');\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { EmailSubscriptionEntity } from 'server/src/entity/email_subscription/EmailSubscriptionEntity.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport class EmailSubscriptionMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async setEmailUnsubscribed(thread: ThreadEntity): Promise<void> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    // Updating ThreadParticipant too, as that's what drives the UI.\r\n    await new ThreadParticipantMutator(this.viewer, null).setViewerSubscribed(\r\n      thread,\r\n      false,\r\n    );\r\n    await EmailSubscriptionEntity.upsert({\r\n      userID,\r\n      threadID: thread.id,\r\n      subscribe: false,\r\n    });\r\n  }\r\n}\r\n", "// Importing handlebars in a way that it works both in the browser and in Node\r\n// is a bit tricky.  The solution here is to import a specific file from the\r\n// distribution. However, that file has no TypeScript type definition file next\r\n// to it. That's why there is a `handlebars.d.ts` file in this directory: it\r\n// imports types from the right location. Together this gives us a working\r\n// handlebars module.\r\n\r\nimport Handlebars from 'handlebars/dist/cjs/handlebars.js';\r\nexport default Handlebars;\r\n", "import Handlebars from 'common/page_context/templating/handlebars.js';\r\n\r\nexport const unsunscribeFromThreadPageTemplate = Handlebars.compile(`\r\n<main style=\"margin: 32px 0; text-align: center; font-family: Helvetica, Arial, sans-serif; font-size: 24px;\">\r\n  <p><img src=\"{{Image_URL}}\" align=\"center\" width=\"200\" /></p>\r\n\r\n  <p>To unsubscribe, please click the button below.</p>\r\n\r\n  <form method=\"post\">\r\n    <button type=\"submit\" style=\"padding: 16px 24px; background-color: #191A1E; color: #FFFFFF; font-size: 24px; border-style: none; border-radius: 8px;  cursor: pointer;\">Unsubscribe from thread</button>\r\n  <form>\r\n\r\n</main>\r\n`);\r\n\r\nexport const successTemplate = Handlebars.compile(`\r\n<p style=\"margin: 32px 0; text-align: center\"><img src=\"{{Image_URL}}\" align=\"center\" width=\"200\" /></p>\r\n\r\n<p style=\"margin: 32px 0; text-align: center; font-size: 24px; font-family: Helvetica, Arial, sans-serif;\">You've been unsubscribed from the thread.</p>\r\n`);\r\n\r\nexport const errorTemplate = Handlebars.compile(`\r\n<p style=\"margin: 32px 0; text-align: center; font-size: 24px; font-family: Helvetica, Arial, sans-serif;\">There was an error unsubscribing you from the thread.</p>\r\n`);\r\n", "import type { Request, Response } from 'express';\r\nimport { decodeUnsubscribeThreadToken } from 'server/src/email/index.ts';\r\nimport { EmailSubscriptionMutator } from 'server/src/entity/email_subscription/EmailSubscriptionMutator.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  errorTemplate,\r\n  successTemplate,\r\n  unsunscribeFromThreadPageTemplate,\r\n} from 'server/src/public/routes/email/unsubscribe_thread/templates/handlebars.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\n\r\nexport async function UnsubscribeThreadHandler(req: Request, res: Response) {\r\n  const token = req.query.token;\r\n  if (!token || typeof token !== 'string') {\r\n    return res.send(errorTemplate({}));\r\n  }\r\n\r\n  try {\r\n    const { threadID, userID, orgID, appID } =\r\n      decodeUnsubscribeThreadToken(token);\r\n\r\n    const viewer = Viewer.createLoggedInViewer(userID, orgID);\r\n    const logger = new Logger(viewer);\r\n\r\n    // Load the thread with no visbility checks.  If a user unsubscribes from a\r\n    // thread, we should respect that and log it appropriately, even if they've\r\n    // had their access to the thread revoked in the meantime.\r\n    const thread = await ThreadEntity.findByPk(threadID);\r\n    if (!thread) {\r\n      throw new Error(`Thread ${threadID} not found`);\r\n    }\r\n\r\n    const mutator = new EmailSubscriptionMutator(viewer);\r\n    await mutator.setEmailUnsubscribed(thread);\r\n\r\n    const imageURL = await generateImageURL(appID);\r\n\r\n    // Was this an RFC 8058 one-click unsubscribe?\r\n    const oneClickUnsubscribe =\r\n      'List-Unsubscribe' in req.body &&\r\n      req.body['List-Unsubscribe'] === 'One-Click';\r\n\r\n    logger.log('info', 'clicked-email-unsubscribe-from-thread', {\r\n      userID,\r\n      orgID,\r\n      appID,\r\n      oneClickUnsubscribe,\r\n    });\r\n    logServerEvent({\r\n      session: { viewer },\r\n      type: 'clicked-email-unsubscribe-from-thread',\r\n      logLevel: LogLevel.INFO,\r\n      metadata: {\r\n        oneClickUnsubscribe,\r\n      },\r\n    });\r\n\r\n    return res.send(\r\n      successTemplate({\r\n        Image_URL: imageURL,\r\n      }),\r\n    );\r\n  } catch (e) {\r\n    return res.send(errorTemplate({}));\r\n  }\r\n}\r\n\r\nexport async function RenderUnsubscribeThreadPage(req: Request, res: Response) {\r\n  const token = req.query.token;\r\n  if (!token || typeof token !== 'string') {\r\n    return res.send(errorTemplate({}));\r\n  }\r\n\r\n  try {\r\n    const { appID } = decodeUnsubscribeThreadToken(token);\r\n\r\n    const imageURL = await generateImageURL(appID);\r\n\r\n    return res.send(\r\n      unsunscribeFromThreadPageTemplate({\r\n        Image_URL: imageURL,\r\n      }),\r\n    );\r\n  } catch (e) {\r\n    return res.send(errorTemplate({}));\r\n  }\r\n}\r\n\r\nasync function generateImageURL(appID: string | null) {\r\n  if (appID) {\r\n    const application = await ApplicationEntity.findByPk(appID);\r\n    if (application?.customEmailTemplate?.imageURL) {\r\n      return application?.customEmailTemplate?.imageURL;\r\n    }\r\n  }\r\n  return `${APP_ORIGIN}/static/cord-wordmark.png`;\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { decodeFileProxyToken } from 'server/src/files/download.ts';\r\n\r\nexport async function FileProxyHandler(req: Request, res: Response) {\r\n  const token = req.query.token;\r\n  if (!token || typeof token !== 'string') {\r\n    return res.status(400).send();\r\n  }\r\n\r\n  try {\r\n    const { id } = decodeFileProxyToken(token);\r\n\r\n    const file = await FileEntity.findByPk(id);\r\n    if (!file) {\r\n      return res.status(404).send();\r\n    }\r\n\r\n    const signedDownloadURL = await file.getSignedDownloadURL();\r\n    return res.redirect(302, signedDownloadURL);\r\n  } catch (e) {\r\n    return res.status(400).send();\r\n  }\r\n}\r\n", "import Handlebars from 'common/page_context/templating/handlebars.js';\r\n\r\nexport const errorRedirectTemplate = Handlebars.compile(`\r\n<main style=\"margin: 32px 0; text-align: center; font-family: Helvetica, Arial, sans-serif; font-size: 24px;\">\r\n  <p><img src=\"{{imageURL}}\" align=\"center\" width=\"200\" /></p>\r\n\r\n  <p>Oops! Something went wrong :(</p>\r\n</main>\r\n`);\r\n", "import * as jwt from 'jsonwebtoken';\r\nimport type { Location } from 'common/types/index.ts';\r\nimport type { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\nconst CORD_REDIRECT_QUERY_PARAM = 'cord_notifications';\r\n\r\n// If a User is included in Redirect data, it should look like this\r\n// to pass the maximum amount of given data to the application\r\nexport type UserDetails = {\r\n  userType: AuthProviderType | null;\r\n  userID: string | null; // external user ID of the sharer or target. null if support bot\r\n  orgID: string; // external org ID of the sharer or target\r\n  groupID: string; // external group ID of the sharer or target\r\n  name: string | null;\r\n  email: string | null;\r\n  profilePictureURL: string | null;\r\n};\r\n\r\ntype SlackNoficationRedirect = {\r\n  type: 'slack';\r\n  messageID: string;\r\n  targetDetails: UserDetails;\r\n  sharerDetails: UserDetails;\r\n  threadID: string;\r\n  url: string;\r\n  timestamp: Date;\r\n};\r\n\r\ntype EmailNotificationRedirect = {\r\n  type: 'email';\r\n  messageID: string;\r\n  targetDetails: UserDetails;\r\n  sharerDetails: UserDetails;\r\n  threadID: string;\r\n  url: string;\r\n  timestamp: Date;\r\n};\r\n\r\ntype SharedToSlackNotificationRedirect = {\r\n  type: 'sharedToSlackChannel';\r\n  targetDetails: Pick<UserDetails, 'userType' | 'orgID' | 'groupID'> & {\r\n    slackChannelID: string;\r\n  };\r\n  sharerDetails: UserDetails;\r\n  threadID: string;\r\n  url: string;\r\n  timestamp: Date;\r\n};\r\n\r\ntype SharedToEmailNotificationRedirect = {\r\n  type: 'sharedToEmail';\r\n  targetDetails: Pick<UserDetails, 'userType' | 'email'>;\r\n  sharerDetails: UserDetails;\r\n  threadID: string;\r\n  url: string;\r\n  timestamp: Date;\r\n};\r\n\r\nexport type MessageNotificationDataByType = {\r\n  slack: SlackNoficationRedirect;\r\n  email: EmailNotificationRedirect;\r\n  sharedToSlackChannel: SharedToSlackNotificationRedirect;\r\n  sharedToEmail: SharedToEmailNotificationRedirect;\r\n};\r\n\r\ntype InboxRedirect = {\r\n  type: 'inbox';\r\n  url: string;\r\n  location: Location;\r\n  threadID: string;\r\n  userDetails: UserDetails;\r\n};\r\n\r\ntype RedirectData =\r\n  | SlackNoficationRedirect\r\n  | EmailNotificationRedirect\r\n  | SharedToSlackNotificationRedirect\r\n  | SharedToEmailNotificationRedirect\r\n  | InboxRedirect;\r\n\r\nexport async function applicationSupportsRedirect(\r\n  platformApplicationID: string,\r\n): Promise<boolean> {\r\n  const application = await ApplicationEntity.findByPk(platformApplicationID);\r\n\r\n  if (!application) {\r\n    throw new Error('ApplicationEntity not found');\r\n  }\r\n\r\n  if (!application.redirectURI) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport async function generateSignedExternalRedirectURI(\r\n  platformApplicationID: string | undefined,\r\n  url: string,\r\n  data: RedirectData,\r\n): Promise<string> {\r\n  return await generateSignedRedirectURIImplementation(\r\n    platformApplicationID,\r\n    url,\r\n    data,\r\n  );\r\n}\r\n\r\nasync function generateSignedRedirectURIImplementation(\r\n  platformApplicationID: string | undefined,\r\n  url: string,\r\n  data: RedirectData,\r\n): Promise<string> {\r\n  if (!platformApplicationID) {\r\n    return url;\r\n  }\r\n\r\n  const application = await ApplicationEntity.findByPk(platformApplicationID);\r\n\r\n  if (!application) {\r\n    return url;\r\n  }\r\n\r\n  const redirectURI = application.redirectURI;\r\n  if (!redirectURI) {\r\n    return url;\r\n  }\r\n\r\n  const state = jwt.sign(\r\n    {\r\n      notificationInfo: {\r\n        ...data,\r\n      },\r\n    },\r\n    application.sharedSecret,\r\n    { algorithm: 'HS256' },\r\n  );\r\n\r\n  const parsed = new URL(redirectURI);\r\n\r\n  parsed.searchParams.set(CORD_REDIRECT_QUERY_PARAM, state);\r\n\r\n  return parsed.href;\r\n}\r\n", "import type {\r\n  OutboundNotificationMetadata,\r\n  OutboundNotificationMetadataByType,\r\n  OutboundNotificationType,\r\n  UUID,\r\n} from 'common/types/index.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport type { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\nimport { AuthProviderType, Viewer } from 'server/src/auth/index.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { externalizeID } from 'common/util/externalIDs.ts';\r\nimport type {\r\n  MessageNotificationDataByType,\r\n  UserDetails,\r\n} from 'server/src/util/redirectURI.ts';\r\nimport {\r\n  applicationSupportsRedirect,\r\n  generateSignedExternalRedirectURI,\r\n} from 'server/src/util/redirectURI.ts';\r\nimport { detailsForDisplay } from 'server/src/entity/user/util.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\n\r\n// We treat type 'slackEmailMatched' the same as a 'slack' mention in this instance\r\ntype MessageNotificationTypeExcludingSlackMatchedEmail = Exclude<\r\n  OutboundNotificationType,\r\n  'slackEmailMatched'\r\n>;\r\n\r\ntype MessageNotificationRedirectURIData =\r\n  MessageNotificationDataByType[MessageNotificationTypeExcludingSlackMatchedEmail];\r\n\r\ntype NotificationRedirectType = {\r\n  messageNotificationEntity: MessageOutboundNotificationEntity;\r\n  targetOrgID: UUID;\r\n  targetExternalOrgID: string | null;\r\n  platformApplicationID: UUID;\r\n  redirectID: string;\r\n};\r\n// generate the redirectURI with the data required\r\nexport async function getNotificationRedirectURI(\r\n  logger: Logger,\r\n  {\r\n    messageNotificationEntity,\r\n    targetOrgID,\r\n    targetExternalOrgID,\r\n    platformApplicationID,\r\n    redirectID,\r\n  }: NotificationRedirectType,\r\n) {\r\n  try {\r\n    const appSupportsRedirect = await applicationSupportsRedirect(\r\n      platformApplicationID,\r\n    );\r\n    if (!appSupportsRedirect) {\r\n      return messageNotificationEntity.url;\r\n    }\r\n\r\n    // Redirect URI does exist\r\n    const data = await getNotificationRedirectURIData({\r\n      messageNotificationEntity,\r\n    });\r\n\r\n    logServerEvent({\r\n      session: {\r\n        viewer: Viewer.createOrgViewer(targetOrgID),\r\n      },\r\n      type: 'notification-logging-redirect-uri',\r\n      logLevel: LogLevel.DEBUG,\r\n      payload: {\r\n        redirectURIInfo: JSON.parse(JSON.stringify(data)),\r\n        orgID: targetOrgID,\r\n        groupID: targetOrgID,\r\n        platformApplicationID,\r\n        redirectID,\r\n        externalOrgID: targetExternalOrgID,\r\n        messageNotifications: messageNotificationEntity.get({ plain: true }),\r\n      },\r\n    });\r\n\r\n    return await generateSignedExternalRedirectURI(\r\n      platformApplicationID,\r\n      messageNotificationEntity.url,\r\n      data,\r\n    );\r\n  } catch (error) {\r\n    logger.error('getSharedToEmailRedirectURI:' + error, {\r\n      orgID: targetOrgID,\r\n      groupID: targetOrgID,\r\n      platformApplicationID,\r\n      redirectID,\r\n      externalOrgID: targetExternalOrgID,\r\n      messageNotifications: messageNotificationEntity.get({ plain: true }),\r\n    });\r\n\r\n    return messageNotificationEntity.url;\r\n  }\r\n}\r\n\r\ntype GetNotificationRedirectURIData = {\r\n  messageNotificationEntity: MessageOutboundNotificationEntity;\r\n};\r\n\r\nasync function getNotificationRedirectURIData({\r\n  messageNotificationEntity,\r\n}: GetNotificationRedirectURIData): Promise<MessageNotificationRedirectURIData> {\r\n  const {\r\n    type,\r\n    sharerUserID,\r\n    sharerOrgID,\r\n    targetUserID,\r\n    targetOrgID,\r\n    messageID,\r\n    url,\r\n    timestamp,\r\n    metadata,\r\n  } = messageNotificationEntity;\r\n\r\n  if (!sharerUserID || !sharerOrgID) {\r\n    throw new Error('SharerUserID or SharerOrgID not defined');\r\n  }\r\n\r\n  const [sharer, message, sharerOrg] = await Promise.all([\r\n    UserEntity.findByPk(sharerUserID),\r\n    MessageEntity.findByPk(messageID),\r\n    OrgEntity.findByPk(sharerOrgID),\r\n  ]);\r\n\r\n  const context = await contextWithSession(\r\n    {\r\n      viewer: targetUserID\r\n        ? Viewer.createLoggedInViewer(targetUserID, targetOrgID)\r\n        : Viewer.createOrgViewer(targetOrgID),\r\n    },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  if (!sharer) {\r\n    throw new Error('Sharer not found');\r\n  }\r\n\r\n  if (!sharer.externalID && sharer.userType === 'person') {\r\n    throw new Error('Sharer externalID not defined and user is not bot');\r\n  }\r\n\r\n  if (!sharer.externalProvider && sharer.userType === 'person') {\r\n    throw new Error('Sharer AuthProvider is null');\r\n  }\r\n\r\n  if (!message) {\r\n    throw new Error('MessageEntity not found');\r\n  }\r\n\r\n  if (!sharerOrg || !sharerOrg.externalID) {\r\n    throw new Error('Sharer Org not found or externalID not defined');\r\n  }\r\n\r\n  const thread = await ThreadEntity.findByPk(message.threadID);\r\n\r\n  if (!thread) {\r\n    throw new Error('ThreadEntity not found');\r\n  }\r\n\r\n  const threadID = thread.externalID;\r\n\r\n  const sharerDisplayDetails = await detailsForDisplay(sharer, context);\r\n\r\n  const sharerDetails: UserDetails = {\r\n    userType: sharer.externalProvider,\r\n    userID: sharer.externalID,\r\n    email: sharer.email,\r\n    name: sharerDisplayDetails.displayName,\r\n    profilePictureURL: sharerDisplayDetails.profilePictureURL,\r\n    orgID: sharerOrg.externalID,\r\n    groupID: sharerOrg.externalID,\r\n  };\r\n\r\n  const baseData = {\r\n    sharerDetails,\r\n    threadID,\r\n    url,\r\n    timestamp,\r\n  };\r\n\r\n  switch (type) {\r\n    case 'email': {\r\n      const targetDetails = await getTargetDetails(\r\n        type,\r\n        targetOrgID,\r\n        targetUserID,\r\n        sharerDetails,\r\n        sharerUserID,\r\n        context,\r\n      );\r\n\r\n      const emailMentionData: MessageNotificationDataByType['email'] = {\r\n        type,\r\n        ...baseData,\r\n        messageID: externalizeID(message.id),\r\n        targetDetails,\r\n      };\r\n      return emailMentionData;\r\n    }\r\n    case 'sharedToEmail': {\r\n      const targetDetails = await getTargetDetails(\r\n        type,\r\n        targetOrgID,\r\n        targetUserID,\r\n        sharerDetails,\r\n        sharerUserID,\r\n        context,\r\n        metadata,\r\n      );\r\n\r\n      const sharedToEmailData: MessageNotificationDataByType['sharedToEmail'] =\r\n        {\r\n          type,\r\n          targetDetails,\r\n          ...baseData,\r\n        };\r\n      return sharedToEmailData;\r\n    }\r\n    case 'sharedToSlackChannel': {\r\n      const targetDetails = await getTargetDetails(\r\n        type,\r\n        targetOrgID,\r\n        targetUserID,\r\n        sharerDetails,\r\n        sharerUserID,\r\n        context,\r\n        metadata,\r\n      );\r\n\r\n      const sharedToSlackChannelData: MessageNotificationDataByType['sharedToSlackChannel'] =\r\n        {\r\n          type,\r\n          targetDetails,\r\n          ...baseData,\r\n        };\r\n      return sharedToSlackChannelData;\r\n    }\r\n    case 'slackEmailMatched':\r\n    case 'slack': {\r\n      const targetDetails = await getTargetDetails(\r\n        'slack',\r\n        targetOrgID,\r\n        targetUserID,\r\n        sharerDetails,\r\n        sharerUserID,\r\n        context,\r\n        metadata,\r\n      );\r\n\r\n      const slackData: MessageNotificationDataByType['slack'] = {\r\n        type: 'slack',\r\n        targetDetails,\r\n        messageID: externalizeID(message.id),\r\n        ...baseData,\r\n      };\r\n      return slackData;\r\n    }\r\n  }\r\n}\r\n\r\nfunction asSharedToEmailMetadata(\r\n  metadata: OutboundNotificationMetadata,\r\n): OutboundNotificationMetadataByType['sharedToEmail'] | null {\r\n  if (\r\n    'type' in metadata &&\r\n    metadata.type === 'sharedToEmail' &&\r\n    'targetEmail' in metadata &&\r\n    typeof metadata.targetEmail === 'string'\r\n  ) {\r\n    return metadata;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction asSharedToSlackChannelMetadata(\r\n  metadata: OutboundNotificationMetadata,\r\n): OutboundNotificationMetadataByType['sharedToSlackChannel'] | null {\r\n  if (\r\n    'type' in metadata &&\r\n    metadata.type === 'sharedToSlackChannel' &&\r\n    'targetSlackChannelID' in metadata &&\r\n    typeof metadata.targetSlackChannelID === 'string'\r\n  ) {\r\n    return metadata;\r\n  }\r\n  return null;\r\n}\r\n\r\nasync function getTargetDetails<\r\n  Type extends MessageNotificationTypeExcludingSlackMatchedEmail,\r\n>(\r\n  notificationType: Type,\r\n  targetOrgID: UUID,\r\n  targetUserID: UUID | null,\r\n  sharerDetails: UserDetails,\r\n  sharerUserID: UUID,\r\n  context: RequestContext,\r\n  metadata?: OutboundNotificationMetadata,\r\n): Promise<MessageNotificationDataByType[Type]['targetDetails']> {\r\n  switch (notificationType) {\r\n    case 'slack':\r\n    case 'email': {\r\n      if (!targetUserID) {\r\n        throw new Error('targetUserID not defined');\r\n      }\r\n\r\n      // if sharer and target are the same\r\n      if (targetUserID === sharerUserID) {\r\n        return sharerDetails;\r\n      }\r\n\r\n      const [target, targetOrg] = await Promise.all([\r\n        UserEntity.findByPk(targetUserID),\r\n        OrgEntity.findByPk(targetOrgID),\r\n      ]);\r\n\r\n      if (!target || !target.externalID) {\r\n        throw new Error('target not found or externalID not found');\r\n      }\r\n\r\n      if (!target.externalProvider) {\r\n        throw new Error('Target AuthProvider is null');\r\n      }\r\n\r\n      if (!targetOrg || !targetOrg.externalID) {\r\n        throw new Error('targetOrg not found or externalID not found');\r\n      }\r\n\r\n      const targetProfileDisplayDetails = await detailsForDisplay(\r\n        target,\r\n        context,\r\n      );\r\n\r\n      return {\r\n        userType: target.externalProvider,\r\n        userID: target.externalID,\r\n        name: targetProfileDisplayDetails.displayName,\r\n        email: target.email,\r\n        profilePictureURL: targetProfileDisplayDetails.profilePictureURL,\r\n        orgID: targetOrg.externalID,\r\n        groupID: targetOrg.externalID,\r\n      };\r\n    }\r\n\r\n    case 'sharedToEmail': {\r\n      if (!metadata) {\r\n        throw new Error('Metadata does not exist');\r\n      }\r\n      const sharedToEmailMetadata = asSharedToEmailMetadata(metadata);\r\n\r\n      if (!sharedToEmailMetadata) {\r\n        throw new Error('SharedToEmailMetadata does not exist');\r\n      }\r\n      return {\r\n        userType: null,\r\n        email: sharedToEmailMetadata.targetEmail,\r\n      };\r\n    }\r\n\r\n    case 'sharedToSlackChannel': {\r\n      if (!metadata) {\r\n        throw new Error('Metadata does not exist');\r\n      }\r\n      const sharedToSlackChannelMetadata =\r\n        asSharedToSlackChannelMetadata(metadata);\r\n\r\n      if (!sharedToSlackChannelMetadata) {\r\n        throw new Error('SharedToSlackChannelMetadata does not exist');\r\n      }\r\n      const targetOrg = await OrgEntity.findByPk(targetOrgID);\r\n\r\n      if (!targetOrg || !targetOrg.externalID) {\r\n        throw new Error('targetOrg not found or externalID not found');\r\n      }\r\n\r\n      return {\r\n        userType: AuthProviderType.SLACK,\r\n        orgID: targetOrg.externalID,\r\n        groupID: targetOrg.externalID,\r\n        slackChannelID: sharedToSlackChannelMetadata.targetSlackChannelID,\r\n      };\r\n    }\r\n    default: {\r\n      const unhandledType: never = notificationType;\r\n      throw new Error('Forgot to handle type: ' + unhandledType);\r\n    }\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { errorRedirectTemplate } from 'server/src/public/routes/notifications_logging/handlebars.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { MessageOutboundNotificationEntity } from 'server/src/entity/message_notification/MessageOutboundNotificationEntity.ts';\r\nimport { NOTIFICATION_LOGGING_REDIRECT_ID_LENGTH } from 'common/const/Api.ts';\r\nimport { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport { setDeepLinkThreadMessageID } from 'server/src/deep_link_threads/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { FeatureFlag } from 'common/const/UserPreferenceKeys.ts';\r\nimport { extractDeepLinkQueryParams } from 'common/util/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getNotificationRedirectURI } from 'server/src/util/notificationRedirectURI.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\n\r\nexport default async function NotificationLoggingHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  const { redirectID } = req.params;\r\n  let logger = anonymousLogger();\r\n\r\n  try {\r\n    if (!redirectID) {\r\n      throw new Error(`redirectID does not exist, url: ${req.url}`);\r\n    }\r\n    if (redirectID.length !== NOTIFICATION_LOGGING_REDIRECT_ID_LENGTH) {\r\n      logger.warn(`redirectID length is incorrect, id: ${redirectID}`);\r\n      return res.send(\r\n        errorRedirectTemplate({\r\n          imageURL: `${APP_ORIGIN}/static/cord-wordmark.png`,\r\n        }),\r\n      );\r\n    }\r\n\r\n    const messageNotificationEntity =\r\n      await MessageOutboundNotificationEntity.findByPk(redirectID);\r\n\r\n    if (!messageNotificationEntity) {\r\n      throw new Error(`notification does not exist, id:${redirectID}`);\r\n    }\r\n    const {\r\n      url: originalURL,\r\n      type,\r\n      messageID,\r\n      targetUserID,\r\n      targetOrgID,\r\n      sharerOrgID,\r\n    } = messageNotificationEntity;\r\n\r\n    const org = await OrgEntity.findByPk(targetOrgID);\r\n\r\n    if (!org) {\r\n      logger.warn('Org not found', { orgID: targetOrgID, redirectID });\r\n      return res.end();\r\n    }\r\n\r\n    const orgViewer = Viewer.createOrgViewer(org.id);\r\n\r\n    logger = new Logger(orgViewer, {\r\n      id: org.id,\r\n      externalId: org.externalID,\r\n      appId: org.platformApplicationID,\r\n      name: org.name,\r\n    });\r\n    let url = originalURL;\r\n    if (!sharerOrgID) {\r\n      // liklely to be an old notification where we didn't log sharerOrgID\r\n      // or sharerUserID\r\n      logger.warn(`Sharer orgID does not exist`, {\r\n        orgID: targetOrgID,\r\n        redirectID,\r\n      });\r\n    } else {\r\n      const sharerOrg = await OrgEntity.findByPk(sharerOrgID);\r\n\r\n      if (!sharerOrg) {\r\n        throw new Error(`Sharer org does not exist: ${sharerOrgID}`);\r\n      }\r\n\r\n      url = !sharerOrg.platformApplicationID\r\n        ? originalURL\r\n        : await getNotificationRedirectURI(logger, {\r\n            targetOrgID,\r\n            platformApplicationID: sharerOrg.platformApplicationID,\r\n            redirectID,\r\n            targetExternalOrgID: org.externalID,\r\n            messageNotificationEntity,\r\n          });\r\n    }\r\n\r\n    const fromSlackUnfurler = requestFromSlackUnfurler(req);\r\n    if (!fromSlackUnfurler) {\r\n      let loggedInViewer: Viewer | null = null;\r\n      if (targetUserID) {\r\n        const orgMembership = await OrgMembersEntity.findOne({\r\n          where: { userID: targetUserID, orgID: targetOrgID },\r\n        });\r\n        if (orgMembership) {\r\n          loggedInViewer = Viewer.createLoggedInViewer(\r\n            targetUserID,\r\n            targetOrgID,\r\n          );\r\n        }\r\n      }\r\n      const targetUserEventMutator = new EventMutator({\r\n        viewer: loggedInViewer ?? orgViewer,\r\n      });\r\n\r\n      await targetUserEventMutator.createEvent({\r\n        pageLoadID: null,\r\n        installationID: null,\r\n        eventNumber: null,\r\n        clientTimestamp: new Date(Date.now()),\r\n        logLevel: LogLevel.DEBUG,\r\n        type: `notification-logging`,\r\n        payload: {\r\n          messageNotifications: messageNotificationEntity.get({ plain: true }),\r\n          userAgent: req.get('User-Agent'),\r\n        },\r\n        metadata: {},\r\n      });\r\n\r\n      if (targetUserID) {\r\n        await maybeDeeplinkViaRedis({\r\n          logger,\r\n          userID: targetUserID,\r\n          org,\r\n          url,\r\n          redirectID,\r\n          messageID,\r\n        });\r\n      }\r\n    }\r\n\r\n    logger.debug(`notifications-logging-${type}`, {\r\n      url,\r\n      type,\r\n      fromSlackUnfurler,\r\n      userAgent: req.get('User-Agent'),\r\n    });\r\n\r\n    return res.redirect(302, url);\r\n  } catch (error) {\r\n    logger.logException('notifications-logging-error', error, {\r\n      redirectID,\r\n      url: req.url,\r\n      headers: req.headers,\r\n      remoteAddress: req.socket.remoteAddress,\r\n    });\r\n\r\n    return res.send(\r\n      errorRedirectTemplate({\r\n        imageURL: `${APP_ORIGIN}/static/cord-wordmark.png`,\r\n      }),\r\n    );\r\n  }\r\n}\r\n\r\nfunction requestFromSlackUnfurler(req: Request): boolean {\r\n  const userAgent = req.get('User-Agent');\r\n  return (\r\n    userAgent !== undefined && userAgent.includes('Slackbot-LinkExpanding')\r\n  );\r\n}\r\n\r\nasync function maybeDeeplinkViaRedis({\r\n  logger,\r\n  userID,\r\n  org,\r\n  url,\r\n  messageID,\r\n  redirectID,\r\n}: {\r\n  logger: Logger;\r\n  userID: UUID;\r\n  org: OrgEntity;\r\n  url: string;\r\n  messageID: UUID;\r\n  redirectID: UUID;\r\n}) {\r\n  let application;\r\n  if (org.platformApplicationID) {\r\n    application = await ApplicationEntity.findByPk(org.platformApplicationID);\r\n  }\r\n  // Add message/thread IDs to redis to enable deep linking - i.e. when the\r\n  // redirect page loads, the relevant thread or message will be highlighted\r\n  const shouldDeepLinkMessageViaRedis = await getFeatureFlagValue(\r\n    FeatureFlag.DEEP_LINK_MESSAGE_FROM_NOTIFICATION,\r\n    {\r\n      userID,\r\n      orgID: org.id,\r\n      platformApplicationID: org.platformApplicationID ?? 'extension',\r\n      version: null,\r\n      customerID: application?.customerID,\r\n    },\r\n  );\r\n\r\n  if (!shouldDeepLinkMessageViaRedis) {\r\n    return;\r\n  }\r\n  const deepLinkParams = extractDeepLinkQueryParams(url);\r\n  const queryParamDeeplinkEnabled = await getFeatureFlagValue(\r\n    FeatureFlag.QUERY_PARAM_DEEP_LINKS,\r\n    {\r\n      userID,\r\n      orgID: org.id,\r\n      platformApplicationID: org.platformApplicationID ?? 'extension',\r\n      version: null,\r\n      customerID: application?.customerID,\r\n    },\r\n  );\r\n  const deepLinkingViaQueryParams =\r\n    !!deepLinkParams && queryParamDeeplinkEnabled;\r\n  if (deepLinkingViaQueryParams) {\r\n    // dont deeplink via Redis as we're already deeplinking via query params\r\n    return;\r\n  }\r\n\r\n  const message = await MessageEntity.findOne({\r\n    where: { id: messageID },\r\n  });\r\n\r\n  const threadID = message?.threadID;\r\n  if (!threadID) {\r\n    // this should never happen thanks to current DB schema, but just in case\r\n    logger.error('threadID was undefined', { messageID, redirectID });\r\n    return;\r\n  }\r\n\r\n  await setDeepLinkThreadMessageID({\r\n    threadID,\r\n    messageID,\r\n    userID,\r\n  });\r\n}\r\n", "export const SLACK_EVENTS_WEBSOCKET_ENDPOINT = '/slackEvents';\r\nexport const SLACK_EVENT_PATH = '/slack/event';\r\nexport const SLACK_INTERACTIVE_EVENT_PATH = '/slack/interactiveEvent';\r\nexport const SLACK_INTERNAL_EVENT_PATH = '/slack/internal/event';\r\nexport const SLACK_INTERNAL_INTERACTIVE_EVENT_PATH =\r\n  '/slack/internal/interactiveEvent';\r\n", "import type { Request, Response, NextFunction } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { LogLevel } from 'common/types/index.ts';\r\nimport type { JsonObject } from 'common/types/index.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { RelevantHeaders } from 'server/src/email/utils.ts';\r\nimport {\r\n  emailTextToMessageContent,\r\n  getNotification,\r\n  parseRelevantHeaders,\r\n} from 'server/src/email/utils.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { getFeatureFlagValue } from 'server/src/featureflags/index.ts';\r\nimport { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { executeNewMessageCreationTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\n\r\nexport default async function SendGridWebhookHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  let logger = anonymousLogger();\r\n\r\n  // Temporary debugging to collect data on a missing sendgrid call\r\n  logger.debug('SendGridWebhookHandler', {\r\n    body: req.body,\r\n    headers: req.headers,\r\n  });\r\n\r\n  // tell Typescript that by default request's body fields are of type\r\n  // \"unknown\" rather than \"any\". This forces us to always check that they\r\n  // exist and have the right type.\r\n  const reqBody: { [k: string]: unknown } | null | undefined = req.body;\r\n  if (reqBody === null || reqBody === undefined) {\r\n    logger.warn('request body missing');\r\n    return res.end();\r\n  }\r\n\r\n  let headers: RelevantHeaders;\r\n  if (reqBody.headers && typeof reqBody.headers === 'string') {\r\n    headers = parseRelevantHeaders(reqBody.headers);\r\n  } else {\r\n    logger.warn('\"Missing headers in Sendgrid request payload');\r\n  }\r\n\r\n  const toAddress = reqBody.to;\r\n  if (typeof toAddress !== 'string') {\r\n    logger.warn('Email \"To\" address is missing');\r\n    return res.end();\r\n  }\r\n  const fromAddress = reqBody.from;\r\n  if (typeof fromAddress !== 'string') {\r\n    logger.warn('Email \"From\" address is missing');\r\n    return res.end();\r\n  }\r\n\r\n  // Nice email clients won't send automated replies to us - they ought to obey\r\n  // the 'Return-Path' header which Sendgrid sets for us and is something like\r\n  // <bounces+16847044-d466-gillian=cord.com@em5842.cord.fyi>\r\n  // Not all email clients are nice though and many will just reply to the 'From'\r\n  // address. 'Auto-Submitted' is another header they should set if they are sending\r\n  // an automated reply: see\r\n  // https://www.iana.org/assignments/auto-submitted-keywords/auto-submitted-keywords.xhtml\r\n  // NB MS Exchange are known to not do this, but we set a special header when we send the\r\n  // notification email asking them not to send any automated responses (X-Auto-Response-Suppress)\r\n  if (headers?.autoSubmitted && headers?.autoSubmitted !== 'no') {\r\n    logger.warn('Email reply was autogenerated, discarding', {\r\n      autoSubmitted: headers.autoSubmitted,\r\n      sendgridMessageID: headers?.messageID,\r\n    });\r\n    return res.end();\r\n  }\r\n\r\n  const notification = await getNotification(\r\n    toAddress,\r\n    headers?.inReplyTo,\r\n    fromAddress,\r\n    logger,\r\n  );\r\n  if (notification === null) {\r\n    logger.warn(\r\n      'Notification id is not present in email address, could not be derived from headers, or notification is not present in db',\r\n      {\r\n        toAddress,\r\n        inReplyTo: headers?.inReplyTo,\r\n        fromAddress,\r\n        sendgridMessageID: headers?.messageID,\r\n      },\r\n    );\r\n    return res.end();\r\n  }\r\n\r\n  // Check the user is still part of the org and is active\r\n  const [orgMember, user, thread] = await Promise.all([\r\n    OrgMembersEntity.findOne({\r\n      where: {\r\n        userID: notification.userID,\r\n        orgID: notification.orgID,\r\n      },\r\n    }),\r\n    UserEntity.findOne({\r\n      where: {\r\n        id: notification.userID,\r\n      },\r\n    }),\r\n    ThreadEntity.findByPk(notification.threadID),\r\n  ]);\r\n\r\n  if (!orgMember) {\r\n    logger.warn('User who sent the email is no longer part of the org', {\r\n      userID: notification.userID,\r\n      orgID: notification.orgID,\r\n    });\r\n    return res.end();\r\n  }\r\n  if (!user || user.state !== 'active') {\r\n    logger.warn('User who sent the email is no longer active', {\r\n      userID: notification.userID,\r\n      orgID: notification.orgID,\r\n      state: user?.state,\r\n    });\r\n    return res.end();\r\n  }\r\n  if (!thread) {\r\n    logger.warn('Cannot add message to non-existent thread');\r\n    return res.end();\r\n  }\r\n\r\n  const [org, application] = await Promise.all([\r\n    OrgEntity.findByPk(notification.orgID),\r\n    ApplicationEntity.findByPk(thread.platformApplicationID),\r\n  ]);\r\n\r\n  if (!org) {\r\n    logger.warn('Org not found', {\r\n      orgID: notification.orgID,\r\n      notificationId: notification.id,\r\n    });\r\n    return res.end();\r\n  }\r\n  if (!application) {\r\n    logger.warn('Application not found', {\r\n      platformApplicationID: user.platformApplicationID,\r\n      notificationID: notification.id,\r\n    });\r\n    return res.end();\r\n  }\r\n  const flagsUser = {\r\n    userID: notification.userID,\r\n    orgID: notification.orgID,\r\n    platformApplicationID: org.platformApplicationID ?? 'extension',\r\n    version: null,\r\n    customerID: application?.customerID,\r\n  };\r\n  const emailRepliesEnabled = await getFeatureFlagValue(\r\n    'email_replies',\r\n    flagsUser,\r\n  );\r\n  if (!emailRepliesEnabled) {\r\n    return res.end();\r\n  }\r\n\r\n  // Deal with the case where a platform user has mentioned a non-platform user\r\n  // in their slack org\r\n  if (\r\n    notification.threadOrgID &&\r\n    notification.orgID !== notification.threadOrgID\r\n  ) {\r\n    const linkedOrg = await LinkedOrgsEntity.findOne({\r\n      where: {\r\n        sourceOrgID: notification.threadOrgID,\r\n        linkedOrgID: notification.orgID,\r\n      },\r\n    });\r\n    if (!linkedOrg) {\r\n      logger.error('Email reply: linked org not found', {\r\n        threadOrgId: notification.threadOrgID,\r\n        notificationId: notification.id,\r\n      });\r\n      return res.end();\r\n    }\r\n  }\r\n\r\n  // Finally, store the message in DB\r\n  const emailText = reqBody.text;\r\n  if (typeof emailText !== 'string' || emailText.length === 0) {\r\n    logger.warn('email body not found or empty', emailText as JsonObject);\r\n    return res.end();\r\n  }\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({ user, org });\r\n\r\n  logger = new Logger(viewer);\r\n\r\n  try {\r\n    const context = await contextWithSession(\r\n      { viewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n\r\n    const attachments = reqBody.attachments;\r\n    if (typeof attachments !== 'string' || attachments.length === 0) {\r\n      logger.warn(\r\n        'attachment body not found or empty',\r\n        attachments as JsonObject,\r\n      );\r\n      return res.end();\r\n    }\r\n\r\n    const content = emailTextToMessageContent(emailText, attachments);\r\n\r\n    const message = await new MessageMutator(\r\n      viewer,\r\n      context.loaders,\r\n    ).createMessage({\r\n      id: uuid(),\r\n      thread,\r\n      content,\r\n      url: null,\r\n      replyToEmailNotificationID: notification.id,\r\n    });\r\n\r\n    const page = await PageEntity.findOne({\r\n      where: {\r\n        contextHash: thread?.pageContextHash,\r\n      },\r\n    });\r\n\r\n    if (!page) {\r\n      throw new Error(\r\n        `Could not find page for message ${message.id} and thread ${thread?.id}`,\r\n      );\r\n    }\r\n    await executeNewMessageCreationTasks({\r\n      context,\r\n      flagsUser,\r\n      application,\r\n      page,\r\n      thread,\r\n      message,\r\n      fileAttachments: [],\r\n      annotationAttachments: [],\r\n      isFirstMessage: false,\r\n      task: null,\r\n      screenshotAttachment: null,\r\n      sendNotifications: !!viewer.platformApplicationID,\r\n      subscribeToThread: false,\r\n    });\r\n\r\n    // Don't replace viewer's org ID for logging event\r\n    const eventMutator = new EventMutator(\r\n      (\r\n        await contextWithSession(\r\n          {\r\n            viewer: Viewer.createLoggedInViewer(\r\n              notification.userID,\r\n              notification.orgID,\r\n            ),\r\n          },\r\n          getSequelize(),\r\n          null,\r\n          null,\r\n        )\r\n      ).session,\r\n    );\r\n    await eventMutator.createEvent({\r\n      pageLoadID: null,\r\n      installationID: null,\r\n      eventNumber: null,\r\n      clientTimestamp: new Date(Date.now()),\r\n      logLevel: LogLevel.DEBUG,\r\n      type: 'reply-via-email',\r\n      payload: {\r\n        messageID: message.id,\r\n        notificationID: notification.id,\r\n        sendgridMessageID: headers?.messageID,\r\n      },\r\n      metadata: {},\r\n    });\r\n  } catch (e) {\r\n    logger.logException('failed to create a message from email reply', e);\r\n  }\r\n\r\n  return res.end();\r\n}\r\n", "import Handlebars from 'common/page_context/templating/handlebars.js';\r\n\r\nHandlebars.registerHelper(\r\n  'equals',\r\n  (stringOne: string, stringTwo: string) => stringOne === stringTwo,\r\n);\r\n\r\n// Anything in {{!-- is a comment --}}\r\nexport const demoRedirectTemplate = Handlebars.compile(`\r\n<main style=\"margin: 32px 16px; text-align: center; font-family: Helvetica, Arial, sans-serif; font-size: 24px;\">\r\n  <p><img src=\"{{imageURL}}\" align=\"center\" width=\"200\" /></p>\r\n\r\n  <h3 style=\"font-weight: bold;font-size: 18px; margin: 16px 0px\">Notifications Info</h3>\r\n  <pre style=\"\r\n    text-align: left; \r\n    font-size: 16px; \r\n    line-height:24px; \r\n    background-color: #FBE3D6;\r\n    border-radius: 4px;\r\n    padding: 16px 16px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    \"\r\n  >\r\n    <code>\r\n    {\r\n      \"notificationInfo\": {{notificationInfo}}\r\n      \"iat\": {{iat}} ({{iatParsed}})\r\n    }\r\n    </code>\r\n  </pre>\r\n</main>\r\n`);\r\n", "import type { Request, Response } from 'express';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { demoRedirectTemplate } from 'server/src/public/routes/notification-uri-test/handlebars.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nexport default function NotificationRedirectURIHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  const { cord_notifications } = req.query;\r\n\r\n  try {\r\n    if (typeof cord_notifications !== 'string') {\r\n      throw new Error('cord_notifications query is not a string');\r\n    }\r\n    const segments = cord_notifications.split('.');\r\n\r\n    if (segments.length !== 3) {\r\n      throw new Error('cord_notifications not jwt format');\r\n    }\r\n\r\n    const [_, payload] = segments;\r\n\r\n    const info = JSON.parse(Buffer.from(payload, 'base64').toString());\r\n\r\n    if (typeof info !== 'object') {\r\n      throw new Error('Info is not an object');\r\n    }\r\n\r\n    if (!('notificationInfo' in info)) {\r\n      throw new Error('notificationInfo does not exist in info object');\r\n    }\r\n\r\n    if (!('iat' in info)) {\r\n      throw new Error('iat does not exist in info object');\r\n    }\r\n\r\n    const infoState = info as {\r\n      notificationInfo: unknown;\r\n      iat: unknown;\r\n    };\r\n\r\n    if (typeof infoState.iat !== 'number') {\r\n      throw new Error('iat is not a number');\r\n    }\r\n\r\n    const iatParsed = new Date(infoState.iat * 1000).toUTCString();\r\n\r\n    return res.send(\r\n      demoRedirectTemplate({\r\n        imageURL: `${APP_ORIGIN}/static/cord-wordmark.png`,\r\n        notificationInfo: JSON.stringify(\r\n          infoState.notificationInfo,\r\n          undefined,\r\n          2,\r\n          // Insert extra spaces to match template indentation\r\n        ).replaceAll('\\n', '\\n      '),\r\n        iat: infoState.iat,\r\n        iatParsed,\r\n      }),\r\n    );\r\n  } catch (error) {\r\n    anonymousLogger().error(`NotificationRedirectURIHandler: ${error}`, {\r\n      cord_notifications,\r\n    });\r\n    return res.send('Oops something went wrong');\r\n  }\r\n}\r\n", "// Brittle code warning! A lot of IDs, page locations, thread metadata depends\r\n// on the values / logic in opensource/sample-apps code.\r\nimport type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  findOrCreatePlatformOrganization,\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n  createDummyPlatformUser,\r\n  findOrCreatePlatformApplication,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  CORD_DEMO_APPS_TOKEN_CUSTOMER_ID,\r\n  DEMO_APPS_APP_GROUP_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport {\r\n  SALES_TEAM_USERS,\r\n  TEAM_PROFILES,\r\n  BOT_USERS,\r\n} from 'common/const/TeamProfiles.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  populateDashboardDemoWithData,\r\n  populateDocumentDemoWithData,\r\n  populateVideoDemoWithData,\r\n  populateCanvasDemoWithData,\r\n} from 'server/src/public/routes/demo-apps/demos.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { DEMO_APPS_WEBHOOK_URL } from 'common/const/Urls.ts';\r\n\r\nconst ANONYMOUS_ORG_NAME = 'Cord Demo Apps Group';\r\nconst NUM_OF_CORD_AVATARS = TEAM_PROFILES.length;\r\nconst DUMMY_USERS = TEAM_PROFILES.slice(-3);\r\n\r\nconst DUMMY_USERS_NAMES = DUMMY_USERS.map((dummyUser) => dummyUser.firstName);\r\n\r\n/**\r\n * Generate a session token to be used in the Cord demo apps on docs.cord.com\r\n * and cord.com and for new apps, prepopulate them with comments.  One exception\r\n * is the demo app opensource repos on github - they use sample tokens\r\n * (see GetSampleSignedTokenHandler).\r\n *\r\n * This handler will:\r\n * 1. Create a platform app (or re-use the one passed in the request).\r\n * 2. Create and add a \"dummy\" user and group to said app.\r\n * 3. Create other dummy users and add messages from them welcoming the new user.\r\n * 4. Return the session token for dummy user.\r\n */\r\nasync function getDemoAppsTokenHandler(req: Request, res: Response) {\r\n  if (\r\n    (req.body.app_id !== undefined && typeof req.body.app_id !== 'string') ||\r\n    (req.body.token !== undefined && typeof req.body.token !== 'string')\r\n  ) {\r\n    throw new ApiCallerError('invalid_field');\r\n  }\r\n\r\n  const app_id: string | undefined = req.body.app_id;\r\n  const user_id: string | undefined = maybeGetUserId(req.body.token);\r\n\r\n  let tokenUser =\r\n    user_id && app_id\r\n      ? await UserEntity.findOne({\r\n          where: {\r\n            externalID: user_id,\r\n            platformApplicationID: app_id,\r\n          },\r\n        })\r\n      : undefined;\r\n\r\n  let tokenApp = app_id\r\n    ? await ApplicationEntity.findOne({\r\n        where: {\r\n          id: app_id,\r\n        },\r\n      })\r\n    : undefined;\r\n\r\n  // Confirm that the requested app is indeed a demo app, and this is not someone\r\n  // trying to hack a prod app\r\n  if (tokenApp && tokenApp.environment !== 'demo') {\r\n    anonymousLogger().warn('Request for non-demo demo token app', {\r\n      ...req.body,\r\n    });\r\n    res.status(401).send('Invalid app_id');\r\n    return;\r\n  }\r\n\r\n  if (!tokenUser || !tokenApp) {\r\n    // This user is new (or their previous app was wiped) - create them\r\n    // This function will create a new app if no app exists, or if this is someone\r\n    // being invited to an existing demo room it will add them to the existing app.\r\n    const {\r\n      newUser,\r\n      org: newOrg,\r\n      app: newApp,\r\n      isFirstUserOfOrg,\r\n    } = await createDemoAppsUser(app_id);\r\n\r\n    if (isFirstUserOfOrg) {\r\n      await populateDemoAppGroup(newOrg, newUser);\r\n    }\r\n\r\n    tokenUser = newUser;\r\n    tokenApp = newApp;\r\n  }\r\n\r\n  const session_token = jwt.sign(\r\n    {\r\n      user_id: tokenUser.externalID,\r\n      app_id: tokenApp.id,\r\n    },\r\n    tokenApp.sharedSecret,\r\n    {\r\n      algorithm: 'HS512',\r\n      expiresIn: '24 h',\r\n    },\r\n  );\r\n\r\n  res.send({\r\n    session_token,\r\n    client_auth_token: session_token,\r\n    app_id: tokenApp.id,\r\n  });\r\n}\r\n\r\nexport async function createDemoAppsUser(appID: UUID | undefined) {\r\n  const sharedSecret = process.env.DEMO_APPS_SHARED_SECRET;\r\n  if (!sharedSecret) {\r\n    throw new Error('shared secret env variable should be defined');\r\n  }\r\n\r\n  const [app] = await findOrCreatePlatformApplication(\r\n    appID ?? uuid(),\r\n    'Cord Demo Apps',\r\n    'demo',\r\n    CORD_DEMO_APPS_TOKEN_CUSTOMER_ID,\r\n    DEMO_APPS_WEBHOOK_URL,\r\n    ['thread-message-added'],\r\n    sharedSecret,\r\n  );\r\n\r\n  const [org] = await findOrCreatePlatformOrganization(\r\n    app.id,\r\n    DEMO_APPS_APP_GROUP_ID, // Must be stable group id for component prop groupIds to work\r\n    ANONYMOUS_ORG_NAME,\r\n    'active',\r\n  );\r\n\r\n  const { orgMembersCount, isFirstUserOfOrg } =\r\n    await getSequelize().transaction(async (transaction) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n      const [[{ count: orgMembersCount }]] = (await getSequelize().query(\r\n        `SELECT count(*) FROM org_members, users\r\n            WHERE org_members.\"orgID\" = $orgID\r\n            AND org_members.\"userID\" = users.id\r\n            AND users.\"userType\" = 'person'\r\n            AND NOT(users.\"name\" = ANY($name))\r\n            AND NOT(users.\"name\" = ANY($salesname));\r\n            `,\r\n        {\r\n          bind: {\r\n            orgID: org.id,\r\n            name: DUMMY_USERS_NAMES,\r\n            salesname: [...SALES_TEAM_USERS, ...BOT_USERS].map(\r\n              (dummyUser) => dummyUser.firstName,\r\n            ),\r\n          },\r\n          transaction,\r\n        },\r\n      )) as [{ count: string }[], unknown];\r\n\r\n      const [[{ count: dummyUserCount }]] = (await getSequelize().query(\r\n        `SELECT count(*) FROM org_members, users\r\n            WHERE org_members.\"orgID\" = $orgID\r\n            AND org_members.\"userID\" = users.id\r\n            AND users.\"userType\" = 'person'\r\n            AND users.\"name\" = ANY($name);\r\n           `,\r\n        {\r\n          bind: {\r\n            orgID: org.id,\r\n            name: DUMMY_USERS_NAMES,\r\n          },\r\n          transaction,\r\n        },\r\n      )) as [{ count: string }[], unknown];\r\n      return {\r\n        orgMembersCount: parseInt(orgMembersCount, 10),\r\n        isFirstUserOfOrg: parseInt(dummyUserCount, 10) === 0,\r\n      };\r\n    });\r\n\r\n  const index = orgMembersCount % NUM_OF_CORD_AVATARS;\r\n\r\n  // This fn also adds the new user to the specified group (which is necessary\r\n  // when we stop signing tokens with groups as the automatic add-to-group-on-login\r\n  // can no longer happen)\r\n  const newUser = await createDummyPlatformUser({\r\n    applicationID: app.id,\r\n    firstName: TEAM_PROFILES[index].firstName,\r\n    orgID: org.id,\r\n    profilePicture: TEAM_PROFILES[index].profilePictureURL,\r\n    dummy: false,\r\n  });\r\n\r\n  return {\r\n    newUser,\r\n    app,\r\n    org,\r\n    isFirstUserOfOrg,\r\n  };\r\n}\r\n\r\n/**\r\n * Adds fake users and messages to the newly created demo app group.\r\n * This is so users who visit the demo apps always have content to look at\r\n * and interact with.\r\n */\r\nasync function populateDemoAppGroup(org: OrgEntity, anonymousUser: UserEntity) {\r\n  const dummyUsers = await Promise.all(\r\n    [...DUMMY_USERS, ...BOT_USERS].map((dummyUser) =>\r\n      createDummyPlatformUser({\r\n        applicationID: org.platformApplicationID!,\r\n        orgID: org.id,\r\n        firstName: dummyUser.firstName,\r\n        profilePicture: dummyUser.profilePictureURL,\r\n      }),\r\n    ),\r\n  );\r\n  await Promise.all(\r\n    SALES_TEAM_USERS.map((user) =>\r\n      createDummyPlatformUser({\r\n        applicationID: org.platformApplicationID!,\r\n        orgID: org.id,\r\n        firstName: user.firstName,\r\n        profilePicture: user.profilePictureURL,\r\n        email: user.email,\r\n      }),\r\n    ),\r\n  );\r\n\r\n  await Promise.all([\r\n    populateDocumentDemoWithData({\r\n      org,\r\n      anonymousUser,\r\n      dummyUsers,\r\n    }),\r\n    populateDashboardDemoWithData({\r\n      org,\r\n      anonymousUser,\r\n      dummyUsers,\r\n    }),\r\n    populateVideoDemoWithData({\r\n      org,\r\n      anonymousUser,\r\n      dummyUsers,\r\n    }),\r\n    populateCanvasDemoWithData({\r\n      org,\r\n      anonymousUser,\r\n      dummyUsers,\r\n    }),\r\n  ]);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getDemoAppsTokenHandler);\r\n\r\nfunction maybeGetUserId(token: string | undefined) {\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const decodedToken = jwt.decode(token);\r\n\r\n  if (!(decodedToken instanceof Object) || !decodedToken.user_id) {\r\n    return null;\r\n  }\r\n\r\n  return decodedToken.user_id;\r\n}\r\n", "import { APP_ORIGIN } from 'common/const/Urls.ts';\r\n\r\n// To be used to generate names in the demo apps and the docs\r\nexport const TEAM_PROFILES = [\r\n  {\r\n    firstName: 'Tom',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Tom.png`,\r\n  },\r\n  {\r\n    firstName: 'Dave',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Dave.png`,\r\n  },\r\n  {\r\n    firstName: 'Jackson',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Jackson.png`,\r\n  },\r\n  {\r\n    firstName: 'Josh',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Josh.png`,\r\n  },\r\n  {\r\n    firstName: 'Khadija',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Khadija.png`,\r\n  },\r\n  {\r\n    firstName: 'Leah',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Leah.png`,\r\n  },\r\n  {\r\n    firstName: 'Nick',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Nick.png`,\r\n  },\r\n  {\r\n    firstName: 'My Hoa',\r\n    profilePictureURL: `${APP_ORIGIN}/static/MyHoa.png`,\r\n  },\r\n];\r\n\r\nexport const BOT_USERS = [\r\n  {\r\n    firstName: 'Zora (Bot)',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Zora.png`,\r\n  },\r\n];\r\n\r\n// Has actually email addresses to demonstrate email & slack notifications during sales calls\r\nexport const SALES_TEAM_USERS = [\r\n  {\r\n    firstName: 'Nimrod',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Nimrod.png`,\r\n    email: 'np@cord.com',\r\n  },\r\n  {\r\n    firstName: 'Sam',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Sam.png`,\r\n    email: 'sam@cord.com',\r\n  },\r\n  {\r\n    firstName: 'Kevin',\r\n    profilePictureURL: `${APP_ORIGIN}/static/Kevin.png`,\r\n    email: 'kevin@cord.com',\r\n  },\r\n];\r\n", "/**\r\n * Converts an amount of seconds to `hh:mm:ss` format.\r\n * @example\r\n * secondsToFormattedTimestamp(2061); // \"34:21\"\r\n */\r\nexport function secondsToFormattedTimestamp(durationSeconds: number) {\r\n  const hrs = Math.floor(durationSeconds / 3600);\r\n  const mins = Math.floor((durationSeconds % 3600) / 60);\r\n  const secs = Math.floor(durationSeconds) % 60;\r\n\r\n  let timestamp = '';\r\n  if (hrs > 0) {\r\n    timestamp += '' + hrs + ':' + (mins < 10 ? '0' : '');\r\n  }\r\n  timestamp += '' + mins + ':' + (secs < 10 ? '0' : '');\r\n  timestamp += '' + secs;\r\n  return timestamp;\r\n}\r\n", "import { v4 as uuid } from 'uuid';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\n\r\nimport type { EntityMetadata, PageContext } from 'common/types/index.ts';\r\nimport type { MessageContent, UUID } from '@cord-sdk/types';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport { PageLoader } from 'server/src/entity/page/PageLoader.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { PageVisitorMutator } from 'server/src/entity/page_visitor/PageVisitorMutator.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { MessageReactionMutator } from 'server/src/entity/message_reaction/MessageReactionMutator.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  createMentionNode,\r\n  createParagraphNode,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nexport type MessageAnnotationType =\r\n  | 'canvas-new'\r\n  | 'dashboard'\r\n  | 'document'\r\n  | 'videoPlayer';\r\n\r\nexport function getReplyContent(messageAnnotationType: MessageAnnotationType) {\r\n  switch (messageAnnotationType) {\r\n    case 'dashboard':\r\n      return `Some ideas: reply to this comment, click on the barchart to add your own comment, or share this link with someone else to collaborate live!`;\r\n\r\n    case 'videoPlayer':\r\n      return `Some ideas: reply to this comment, click \"Comment on a frame\" and then on the video to add a comment on a specific point in time, or share this link with someone else to collaborate live!`;\r\n\r\n    case 'document':\r\n      return 'Edit, resolve, and delete messages';\r\n\r\n    case 'canvas-new':\r\n      return 'Did you have any feedback or are you just showing off how good Cord is?';\r\n\r\n    default:\r\n      throw new Error('Invalid message annotation type');\r\n  }\r\n}\r\n\r\nexport async function createDemoAppsMessage({\r\n  addReply = false,\r\n  content,\r\n  org,\r\n  anonymousUser,\r\n  sentBy,\r\n  threadTitle,\r\n  URL,\r\n  cordLocation,\r\n  messageAnnotationType,\r\n  threadExternalId,\r\n  threadMetadata,\r\n}: {\r\n  org: OrgEntity;\r\n  anonymousUser: UserEntity;\r\n  sentBy: UserEntity;\r\n  threadTitle: string;\r\n  URL: string;\r\n  cordLocation: PageContext['data'];\r\n  messageAnnotationType: MessageAnnotationType;\r\n  threadExternalId?: string;\r\n  threadMetadata?: EntityMetadata;\r\n  content?: MessageContent;\r\n  /** @deprecated please use addReplyToThread instead.\r\n   * TODO: get rid of addReply altogether */\r\n  addReply?: boolean;\r\n}) {\r\n  const senderViewer = await createDummyViewer(sentBy, org);\r\n  const senderLoaders = await getNewLoaders(senderViewer);\r\n\r\n  const { page } = await createDemoAppsPageContext(senderViewer, cordLocation);\r\n\r\n  const thread = await createDemoAppsThread({\r\n    externalID: threadExternalId,\r\n    createdBy: senderViewer,\r\n    title: threadTitle,\r\n    URL,\r\n    page,\r\n    metadata: threadMetadata,\r\n    appID: org.platformApplicationID!,\r\n  });\r\n\r\n  const threadParticipants = [senderViewer.userID!, anonymousUser.id];\r\n  const threadParticipantMutator = new ThreadParticipantMutator(\r\n    senderViewer,\r\n    senderLoaders,\r\n  );\r\n  await threadParticipantMutator.subscribeUsersToThread(\r\n    thread.id,\r\n    threadParticipants,\r\n  );\r\n\r\n  const message = await new MessageMutator(\r\n    senderViewer,\r\n    senderLoaders,\r\n  ).createMessage({\r\n    id: uuid(),\r\n    thread,\r\n    url: URL,\r\n    content: content ?? [\r\n      {\r\n        type: MessageNodeType.PARAGRAPH,\r\n        children: [\r\n          { text: 'Welcome, ' },\r\n          createMentionNode(anonymousUser.id, anonymousUser.name!),\r\n          { text: '!' },\r\n        ],\r\n      },\r\n      createParagraphNode('You can comment and mention on this page.'),\r\n    ],\r\n  });\r\n\r\n  // Hacks on hacks. We are directly creating a message, so notifs don't get\r\n  // automatically generated, so we need to do that by hand. But since we\r\n  // generate demo apps data for all of the demo apps at the same time,\r\n  // in the same org, they'll all show notifs from all of the apps, which is a\r\n  // bit confusing. So only generate a notif for the one app which actually has\r\n  // a notif launcher on it.\r\n  if (messageAnnotationType === 'dashboard') {\r\n    await new NotificationMutator(senderViewer).create({\r\n      recipientID: anonymousUser.id,\r\n      type: 'reply',\r\n      messageID: message.id,\r\n      replyActions: ['create-thread', 'mention'],\r\n      threadID: message.threadID,\r\n    });\r\n  }\r\n\r\n  if (addReply) {\r\n    await addReplyToThread({\r\n      replyContent: [\r\n        createParagraphNode(getReplyContent(messageAnnotationType)),\r\n      ],\r\n      senderViewer,\r\n      senderLoaders,\r\n      cordLocation,\r\n      thread,\r\n      replyReactions: ['\uD83D\uDC4D\uFE0F', '\u2764\uFE0F'],\r\n      threadParticipantMutator,\r\n    });\r\n  }\r\n\r\n  return { thread, senderViewer, threadParticipantMutator };\r\n}\r\n\r\nasync function createDemoAppsPageContext(\r\n  viewer: Viewer,\r\n  cordLocation: PageContext['data'],\r\n) {\r\n  const pageContext: PageContext = {\r\n    providerID: null,\r\n    data: cordLocation,\r\n  };\r\n\r\n  const pageContextHash = await new PageMutator(viewer).createPageIfNotExists(\r\n    pageContext,\r\n  );\r\n  const page = (await new PageLoader(viewer).getPageFromContextHash(\r\n    pageContextHash,\r\n  )) as PageEntity;\r\n\r\n  await new PageVisitorMutator(viewer).markPresentInPage(pageContextHash);\r\n\r\n  return { page, pageContextHash };\r\n}\r\n\r\nexport async function createDemoAppsThread({\r\n  externalID,\r\n  createdBy,\r\n  URL,\r\n  page,\r\n  title,\r\n  metadata,\r\n  appID,\r\n}: {\r\n  externalID?: string;\r\n  createdBy: Viewer;\r\n  page: PageEntity;\r\n  title: string;\r\n  URL: string;\r\n  metadata?: EntityMetadata;\r\n  appID: UUID;\r\n}) {\r\n  return await getSequelize().transaction(\r\n    async (transaction) =>\r\n      await new ThreadMutator(createdBy, null).createThreadOnPage(\r\n        uuid(),\r\n        URL,\r\n        page,\r\n        title,\r\n        transaction,\r\n        appID,\r\n        externalID ?? null,\r\n        { ...metadata, autogenerated: true },\r\n      ),\r\n  );\r\n}\r\n\r\nexport async function addReplyToThread({\r\n  senderViewer,\r\n  senderLoaders,\r\n  replyReactions,\r\n  replyContent,\r\n  thread,\r\n  threadParticipantMutator,\r\n  cordLocation,\r\n}: {\r\n  thread: ThreadEntity;\r\n  replyContent: MessageContent;\r\n  senderViewer: Viewer;\r\n  senderLoaders: RequestContextLoaders;\r\n  replyReactions: string[];\r\n  threadParticipantMutator: ThreadParticipantMutator;\r\n  cordLocation: PageContext['data'];\r\n}) {\r\n  await createDemoAppsPageContext(senderViewer, cordLocation);\r\n\r\n  const reply = await new MessageMutator(\r\n    senderViewer,\r\n    senderLoaders,\r\n  ).createMessage({\r\n    id: uuid(),\r\n    thread,\r\n    url: thread.url,\r\n    content: replyContent,\r\n    metadata: { autogenerated: true },\r\n  });\r\n\r\n  for (const reaction of replyReactions) {\r\n    await new MessageReactionMutator(senderViewer, senderLoaders).createOne(\r\n      reply.id,\r\n      reaction,\r\n    );\r\n  }\r\n\r\n  await threadParticipantMutator.markThreadNewlyActiveForOtherUsers(\r\n    thread.id,\r\n    reply.id,\r\n  );\r\n}\r\n\r\nexport function createDummyViewer(user: UserEntity, org: OrgEntity) {\r\n  return Viewer.createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  });\r\n}\r\n\r\ntype ChartThreadMetadata = {\r\n  type: string;\r\n  chartId: string;\r\n  seriesId: string;\r\n  x: number;\r\n  y: number;\r\n};\r\nexport function getDashboardExternalThreadId(\r\n  chartThreadMetadata: ChartThreadMetadata,\r\n  orgExternalID: string,\r\n) {\r\n  return `${orgExternalID}_${chartThreadMetadata.chartId}_${chartThreadMetadata.seriesId}_${chartThreadMetadata.x}_${chartThreadMetadata.y}`;\r\n}\r\n", "import type { Transaction } from 'sequelize';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\n\r\nexport class PageVisitorMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  /**\r\n   * Make the logged in user a visitor of the given page and/or set\r\n   * lastPresentTimestamp to now\r\n   *\r\n   *\r\n   * pageContextHash must refer to an existing page in the current org.\r\n   */\r\n  async markPresentInPage(pageContextHash: UUID, transaction?: Transaction) {\r\n    const { userID, orgID } = assertViewerHasIdentity(this.viewer);\r\n\r\n    await PageVisitorEntity.upsert(\r\n      {\r\n        userID,\r\n        orgID,\r\n        pageContextHash,\r\n        lastPresentTimestamp: Sequelize.fn('NOW'),\r\n      },\r\n      { transaction },\r\n    );\r\n  }\r\n}\r\n", "import { DOCS_ORIGIN } from 'common/const/Urls.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport { secondsToFormattedTimestamp } from 'common/util/secondsToFormattedTimestamp.ts';\r\nimport {\r\n  createMessageNode,\r\n  createParagraphNode,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  addReplyToThread,\r\n  createDummyViewer,\r\n  createDemoAppsMessage,\r\n  getDashboardExternalThreadId,\r\n} from 'server/src/public/routes/demo-apps/utils.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nexport type PopulateDemoDataType = {\r\n  org: OrgEntity;\r\n  anonymousUser: UserEntity;\r\n  dummyUsers: UserEntity[];\r\n};\r\n\r\nexport async function populateDocumentDemoWithData({\r\n  org,\r\n  anonymousUser,\r\n  dummyUsers,\r\n}: PopulateDemoDataType) {\r\n  const { thread, threadParticipantMutator } = await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Document Demo',\r\n    sentBy: dummyUsers[0],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/document`,\r\n    cordLocation: { page: 'document' },\r\n    messageAnnotationType: 'document',\r\n    threadMetadata: {\r\n      startNodeId: 'p1',\r\n      startOffset: 57,\r\n      endNodeId: 'p1',\r\n      endOffset: 60,\r\n      floatingThreadVisible: true,\r\n    },\r\n    content: [createParagraphNode('You can customize every element of the UI')],\r\n  });\r\n\r\n  const dummyUserTwoViewer = await createDummyViewer(dummyUsers[1], org);\r\n  const dummyUserTwoLoaders = await getNewLoaders(dummyUserTwoViewer);\r\n\r\n  await addReplyToThread({\r\n    thread,\r\n    senderViewer: dummyUserTwoViewer,\r\n    senderLoaders: dummyUserTwoLoaders,\r\n    threadParticipantMutator,\r\n    cordLocation: { page: 'document' },\r\n    replyContent: [\r\n      createParagraphNode(\r\n        'While stuff like file attachments, timestamps, and real-time delivery are taken care of out-of-the-box',\r\n      ),\r\n    ],\r\n\r\n    replyReactions: ['\u2728', '\uD83C\uDFC3'],\r\n  });\r\n\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Document Demo',\r\n    sentBy: dummyUsers[2],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/document`,\r\n    cordLocation: { page: 'document' },\r\n    messageAnnotationType: 'document',\r\n    threadMetadata: {\r\n      startNodeId: 'p2',\r\n      startOffset: 7,\r\n      endNodeId: 'p2',\r\n      endOffset: 20,\r\n      floatingThreadVisible: true,\r\n    },\r\n    content: [\r\n      createParagraphNode(\r\n        'Reply or react to one of the comments already on the page, or highlight some text and add your own',\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport async function populateDashboardDemoWithData({\r\n  org,\r\n  anonymousUser,\r\n  dummyUsers,\r\n}: PopulateDemoDataType) {\r\n  // The metadata and ID must match the logic in sample-apps/dashboard/src/components/HighchartsExample.tsx\r\n  const dashboardChartThreadMetadata = {\r\n    type: 'chart',\r\n    // matches the id in sample-apps/dashboard/src/components/Dashboard.tsx\r\n    chartId: 'some-unique-and-stable-id-of-this-chart',\r\n    // matches the id in sample-apps/dashboard/src/chartData.json\r\n    seriesId: 'unique-id-of-this-series-2',\r\n    seriesName: 'Notion',\r\n    x: 2014,\r\n    y: 82.07,\r\n    // For us to open the thread initially on the client side\r\n  };\r\n  const dashboardChartThreadExternalId = getDashboardExternalThreadId(\r\n    dashboardChartThreadMetadata,\r\n    org.externalID,\r\n  );\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Dashboard Demo',\r\n    sentBy: dummyUsers[0],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/dashboard`,\r\n    cordLocation: { page: 'dashboard' },\r\n    messageAnnotationType: 'dashboard',\r\n    threadExternalId: dashboardChartThreadExternalId,\r\n    threadMetadata: dashboardChartThreadMetadata,\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          {\r\n            text: `${dashboardChartThreadMetadata.seriesName}: ${dashboardChartThreadMetadata.x} Market cap`,\r\n            class: `metadata-quote ${dashboardChartThreadMetadata.seriesName.toLowerCase()}`,\r\n          },\r\n        ],\r\n      }),\r\n      createParagraphNode(\r\n        'Click any data point to leave a comment on the chart (or just reply to this one)',\r\n      ),\r\n    ],\r\n    addReply: false,\r\n  });\r\n\r\n  const dashboardChartThread2Metadata = {\r\n    type: 'chart',\r\n    chartId: 'some-unique-and-stable-id-of-this-chart',\r\n    seriesId: 'unique-id-of-this-series',\r\n    seriesName: 'Figma',\r\n    x: 2020,\r\n    y: 129.99,\r\n  };\r\n  const dashboardChartThread2ExternalId = getDashboardExternalThreadId(\r\n    dashboardChartThread2Metadata,\r\n    org.externalID,\r\n  );\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Dashboard Demo',\r\n    sentBy: dummyUsers[1],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/dashboard`,\r\n    cordLocation: { page: 'dashboard' },\r\n    messageAnnotationType: 'dashboard',\r\n    threadExternalId: dashboardChartThread2ExternalId,\r\n    threadMetadata: dashboardChartThread2Metadata,\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          {\r\n            text: `${dashboardChartThread2Metadata.seriesName}: ${dashboardChartThread2Metadata.x} Market cap`,\r\n            class: `metadata-quote ${dashboardChartThread2Metadata.seriesName.toLowerCase()}`,\r\n          },\r\n        ],\r\n      }),\r\n      createParagraphNode(\r\n        \"You can have conversations with your team where it's most important\",\r\n      ),\r\n    ],\r\n    addReply: false,\r\n  });\r\n\r\n  const dashboardGridThreadMetadata = {\r\n    type: 'grid',\r\n    headerName: 'Figma',\r\n    colId: 'figma-valuation',\r\n    gridId: 'some-unique-and-stable-id-of-this-grid',\r\n    rowId: 2015,\r\n  };\r\n\r\n  const dashboardGridThreadExternalId = `${org.externalID}_${dashboardGridThreadMetadata.gridId}_${dashboardGridThreadMetadata.rowId}_${dashboardGridThreadMetadata.colId}`;\r\n  const { thread, threadParticipantMutator } = await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Dashboard Demo',\r\n    sentBy: dummyUsers[2],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/dashboard`,\r\n    cordLocation: { page: 'dashboard' },\r\n    messageAnnotationType: 'dashboard',\r\n    threadExternalId: dashboardGridThreadExternalId,\r\n    threadMetadata: dashboardGridThreadMetadata,\r\n    addReply: false,\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          {\r\n            text: `${dashboardGridThreadMetadata.headerName}: ${dashboardGridThreadMetadata.rowId} Revenue`,\r\n            class: `metadata-quote ${dashboardGridThreadMetadata.headerName.toLowerCase()}`,\r\n          },\r\n        ],\r\n      }),\r\n      createParagraphNode('You can also leave comments on any of the cells.'),\r\n    ],\r\n  });\r\n\r\n  const dummyUserTwoViewer = await createDummyViewer(dummyUsers[2], org);\r\n  const dummyUserTwoLoaders = await getNewLoaders(dummyUserTwoViewer);\r\n\r\n  await addReplyToThread({\r\n    thread,\r\n    senderViewer: dummyUserTwoViewer,\r\n    senderLoaders: dummyUserTwoLoaders,\r\n    threadParticipantMutator,\r\n    cordLocation: { page: 'dashboard-new' },\r\n    replyContent: [createParagraphNode('Give it a try!')],\r\n    replyReactions: [],\r\n  });\r\n}\r\n\r\nexport async function populateVideoDemoWithData({\r\n  org,\r\n  anonymousUser,\r\n  dummyUsers,\r\n}: PopulateDemoDataType) {\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Video player Demo',\r\n    sentBy: dummyUsers[0],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/video-player`,\r\n    cordLocation: { page: 'video' },\r\n    messageAnnotationType: 'videoPlayer',\r\n    threadMetadata: {\r\n      xPercent: 90,\r\n      yPercent: 10,\r\n      timestamp: 0,\r\n      initallyOpen: true,\r\n    },\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          { text: `${secondsToFormattedTimestamp(0)} `, class: 'timestamp' },\r\n          { text: 'Drop comments anywhere in the video\u2026 try it!' },\r\n        ],\r\n      }),\r\n    ],\r\n    addReply: false,\r\n  });\r\n\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Video player Demo',\r\n    sentBy: dummyUsers[2],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/video-player`,\r\n    cordLocation: { page: 'video' },\r\n    messageAnnotationType: 'videoPlayer',\r\n    threadMetadata: {\r\n      xPercent: 85,\r\n      yPercent: 20,\r\n      timestamp: 4,\r\n      durationOnVideo: 6,\r\n    },\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          { text: `${secondsToFormattedTimestamp(4)} `, class: 'timestamp' },\r\n          { text: 'You can reply, react, and resolve comments, too' },\r\n        ],\r\n      }),\r\n    ],\r\n  });\r\n\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Video player Demo',\r\n    sentBy: dummyUsers[1],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/video-player`,\r\n    cordLocation: { page: 'video' },\r\n    messageAnnotationType: 'videoPlayer',\r\n    threadMetadata: {\r\n      xPercent: 20,\r\n      yPercent: 30,\r\n      timestamp: 21,\r\n    },\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          { text: `${secondsToFormattedTimestamp(21)} `, class: 'timestamp' },\r\n          { text: 'Click this comment and see what happens \uD83D\uDC40' },\r\n        ],\r\n      }),\r\n    ],\r\n  });\r\n\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Video player Demo',\r\n    sentBy: dummyUsers[2],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/video-player`,\r\n    cordLocation: { page: 'video' },\r\n    messageAnnotationType: 'videoPlayer',\r\n    threadMetadata: {\r\n      xPercent: 80,\r\n      yPercent: 85,\r\n      timestamp: 23,\r\n      durationOnVideo: 2,\r\n    },\r\n    content: [\r\n      createMessageNode(MessageNodeType.PARAGRAPH, {\r\n        children: [\r\n          { text: `${secondsToFormattedTimestamp(23)} `, class: 'timestamp' },\r\n          {\r\n            text: 'Way better than giving feedback over Slack and e-mail alongside timestamps, right?',\r\n          },\r\n        ],\r\n      }),\r\n    ],\r\n  });\r\n}\r\n\r\nexport async function populateCanvasDemoWithData({\r\n  org,\r\n  anonymousUser,\r\n  dummyUsers,\r\n}: PopulateDemoDataType) {\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Canvas Demo',\r\n    sentBy: dummyUsers[0],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/canvas-new`,\r\n    cordLocation: { page: 'canvas-new' },\r\n    messageAnnotationType: 'canvas-new',\r\n    threadMetadata: {\r\n      elementName: 'square',\r\n      relativeX: 330,\r\n      relativeY: 100,\r\n    },\r\n    content: [createParagraphNode('Build comments just like Figma or Miro!')],\r\n  });\r\n\r\n  await createDemoAppsMessage({\r\n    org,\r\n    anonymousUser,\r\n    threadTitle: 'Canvas Demo',\r\n    sentBy: dummyUsers[1],\r\n    URL: `${DOCS_ORIGIN}/get-started/demo-apps/canvas-new`,\r\n    cordLocation: { page: 'canvas-new' },\r\n    messageAnnotationType: 'canvas-new',\r\n    threadMetadata: {\r\n      elementName: 'circle',\r\n      relativeX: -45,\r\n      relativeY: 15,\r\n    },\r\n    content: [\r\n      createParagraphNode(\r\n        'Hey you found me! Why not try clicking and dragging the shapes about?',\r\n      ),\r\n    ],\r\n  });\r\n}\r\n", "import * as cookie from 'cookie';\r\nimport type { Request, Response, NextFunction } from 'express';\r\nimport { nanoid } from 'nanoid';\r\nimport Handlebars from 'common/page_context/templating/handlebars.js';\r\nimport { slackLoginURL } from 'common/util/oauth.ts';\r\nimport { getSessionFromAuthHeader } from 'server/src/auth/session.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { encodeSlackLinkingToken } from 'server/src/auth/encodeSlackLinkingToken.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { TOP_SERVER_HOST } from 'common/const/Urls.ts';\r\nimport {\r\n  CORD_SDK_TEST_APPLICATION_ID,\r\n  CORD_TEST_SLACK_TEAM_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\n\r\nexport default async function SlackLinkingConfirmationHandler(\r\n  req: Request,\r\n  res: Response,\r\n  _next: NextFunction,\r\n) {\r\n  const nonce = cookie.parse(req.headers.cookie || '')['nonce'] || nanoid();\r\n  const { authToken } = req.query;\r\n  if (typeof authToken !== 'string' || !authToken) {\r\n    res.status(400).send('Bad request: Missing authToken parameter').end();\r\n    return;\r\n  }\r\n  let session;\r\n  try {\r\n    session = await getSessionFromAuthHeader(`Bearer ${authToken}`, null);\r\n  } catch (e) {\r\n    res.status(400).send('Bad request: Invalid authToken').end();\r\n    return;\r\n  }\r\n  const context = await contextWithSession(session, getSequelize(), null, null);\r\n  const referer = req.headers.referer;\r\n  if (!referer) {\r\n    // NOTE(jozef): I assume that a referer will be always present but in case\r\n    // some new browser privacy rules start omitting it, then we should be\r\n    // notified about it\r\n    context.logger.error('missing referer in SlackLinkingConfirmationHandler');\r\n    res.status(400).send('Bad request: Missing referer header').end();\r\n    return;\r\n  }\r\n  const { token: state, slackTeam } = await encodeSlackLinkingToken(\r\n    context,\r\n    nonce,\r\n    'link_org',\r\n  );\r\n\r\n  const team =\r\n    session.viewer.platformApplicationID === CORD_SDK_TEST_APPLICATION_ID\r\n      ? CORD_TEST_SLACK_TEAM_ID\r\n      : slackTeam;\r\n\r\n  const application = await ApplicationEntity.findByPk(\r\n    session.viewer.platformApplicationID,\r\n  );\r\n\r\n  if (!application) {\r\n    throw new Error('Linking error - unable to find platform app');\r\n  }\r\n\r\n  const customAppDetails = application.getCustomSlackAppDetails();\r\n\r\n  const slackUrl = slackLoginURL(state, team, customAppDetails?.clientID);\r\n\r\n  res.cookie('nonce', nonce, {\r\n    secure: true,\r\n    maxAge: 1000 * 60 * 60 * 24, // expire after a day\r\n    // This linking flow (for SDK) could set \"httpOnly: true\" and \"domain:\r\n    // API_SERVER_HOST\". However the Slack linking flow in embed uses the\r\n    // \"nonce\" cookie too and that flow assumes that the cookie is not httpOnly\r\n    // and is set on TOP_SERVER_HOST (cord.com). If a user goes through the\r\n    // flow in embed and the same day in sdk, then they would end up with the\r\n    // nonce cookie set on different domains and with different httpOnly\r\n    // setting which might break the second flow.\r\n    httpOnly: false,\r\n    domain: TOP_SERVER_HOST,\r\n  });\r\n\r\n  res.send(\r\n    html({\r\n      referer,\r\n      slackUrl,\r\n    }),\r\n  );\r\n  res.end();\r\n}\r\n\r\nconst html = Handlebars.compile(`\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <style>\r\n      .container {\r\n        text-align: center;\r\n        padding: 100px 10px;\r\n        max-width: 600px;\r\n        margin: auto;\r\n        font-family: apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\r\n          Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\r\n          'Segoe UI Symbol';\r\n      }\r\n      a {\r\n        text-decoration: none;\r\n        display: block;\r\n        padding: 8px;\r\n        background-color: black;\r\n        color: white;\r\n        text-align: center;\r\n        max-width: 50%;\r\n        margin: auto;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class=\"container\">\r\n      <p><b>{{referer}}</b> wants to connect with Slack.</p>\r\n      <a href=\"{{slackUrl}}\">Continue</a>\r\n    </div>\r\n  </body>\r\n</html>\r\n`);\r\n", "import type { SlackStateLinkingType } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasPlatformIdentity,\r\n} from 'server/src/auth/index.ts';\r\nimport { encodeSlackOAuthState } from 'server/src/auth/oauth.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\n\r\nexport async function encodeSlackLinkingToken(\r\n  context: RequestContext,\r\n  nonce: string,\r\n  type: SlackStateLinkingType,\r\n) {\r\n  let encodedSlackLinkingToken: string | undefined;\r\n\r\n  if (type === 'link_org') {\r\n    const { userID, orgID, platformApplicationID } =\r\n      assertViewerHasPlatformIdentity(context.session.viewer);\r\n\r\n    const state = {\r\n      nonce,\r\n      type,\r\n      data: { userID, orgID, platformApplicationID },\r\n    };\r\n\r\n    encodedSlackLinkingToken = encodeSlackOAuthState(state);\r\n  }\r\n\r\n  if (!encodedSlackLinkingToken) {\r\n    throw new Error(`Encoded slack token missing: ${{ type, nonce }}`);\r\n  }\r\n\r\n  // this assumes that the viewer object always has a orgID\r\n  const orgID = assertViewerHasOrg(context.session.viewer);\r\n\r\n  const org = await context.loaders.orgLoader.loadOrg(orgID);\r\n\r\n  const linkedOrg = await org?.loadLinkedSlackOrg();\r\n\r\n  return { token: encodedSlackLinkingToken, slackTeam: linkedOrg?.externalID };\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport type { ClientAuthTokenData } from '@cord-sdk/types';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\n\r\n// this is copied over from @cord-sdk/server to be able to change its implementation to allow\r\n// passing in a custom expiration, without afffecting the public version of this function\r\nfunction getClientAuthToken(\r\n  app_id: string,\r\n  app_secret: string,\r\n  payload: Omit<ClientAuthTokenData, 'app_id' | 'project_id'>,\r\n  expiresIn = '1 min',\r\n): string {\r\n  return jwt.sign({ ...payload, app_id }, app_secret, {\r\n    algorithm: 'HS512',\r\n    expiresIn,\r\n  });\r\n}\r\n\r\nconst APP_ID = 'b6501bf5-46f7-4db7-9996-c42dd9f758b0';\r\nconst APP_SECRET = 'cordrulez';\r\n\r\nconst USER_DETAILS = {\r\n  andrei: {\r\n    email: env.TESTBED_USERS_EMAIL ?? 'notification-spam+andrei@cord.com',\r\n    profile_picture_url:\r\n      'https://ca.slack-edge.com/T012Y0TBQLW-U0134UJMCG3-da029c9556f6-512',\r\n    name: 'Andrei',\r\n  },\r\n  flooey: {\r\n    email: env.TESTBED_USERS_EMAIL ?? 'notification-spam+flooey@cord.com',\r\n    profile_picture_url:\r\n      'https://ca.slack-edge.com/T012Y0TBQLW-U02D2DNCS3H-71dafa543b5d-512',\r\n    name: 'Flooey',\r\n  },\r\n  nimrod: {\r\n    email: env.TESTBED_USERS_EMAIL ?? 'notification-spam+np@cord.com',\r\n    profile_picture_url:\r\n      'https://avatars.slack-edge.com/2020-05-06/1107128068275_13105bc2580f354aa611_original.png',\r\n    name: 'Nimrod Priell, the CEO',\r\n  },\r\n} as const;\r\n\r\nconst ORG_DETAILS = {\r\n  cord: {\r\n    name: 'Cord',\r\n  },\r\n  secondorg: {\r\n    name: 'Test Org 2',\r\n  },\r\n  thirdorg: {\r\n    name: 'Test Org 3',\r\n  },\r\n} as const;\r\n\r\nfunction clientAuthBody(\r\n  user: keyof typeof USER_DETAILS,\r\n  org?: keyof typeof ORG_DETAILS,\r\n) {\r\n  return {\r\n    user_id: user,\r\n    organization_id: org,\r\n    user_details: USER_DETAILS[user],\r\n    ...(org && { organization_details: ORG_DETAILS[org] }),\r\n  };\r\n}\r\n\r\nexport default function TestbedTokensHandler(_req: Request, res: Response) {\r\n  const tokens = {\r\n    andrei: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('andrei', 'cord'),\r\n    ),\r\n    flooey: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('flooey', 'cord'),\r\n    ),\r\n    nimrod: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('nimrod', 'cord'),\r\n    ),\r\n    andrei_in_second_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('andrei', 'secondorg'),\r\n    ),\r\n    flooey_in_second_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('flooey', 'secondorg'),\r\n    ),\r\n    nimrod_in_second_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('nimrod', 'secondorg'),\r\n    ),\r\n    andrei_in_third_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('andrei', 'thirdorg'),\r\n    ),\r\n    flooey_in_third_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('flooey', 'thirdorg'),\r\n    ),\r\n    invalid_user_details: getClientAuthToken(APP_ID, APP_SECRET, {\r\n      user_id: 'invalid_user_details',\r\n      organization_id: 'cord',\r\n      user_details: {\r\n        name: 'invalid_user_details',\r\n        // don't include email on purpose\r\n      } as any,\r\n    }),\r\n    andrei2: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('andrei', 'cord'),\r\n      // expires in 2 min; this is to make it different from the andrei token\r\n      '2 min',\r\n    ),\r\n    andrei_without_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('andrei'),\r\n    ),\r\n    flooey_without_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('flooey'),\r\n    ),\r\n    nimrod_without_org: getClientAuthToken(\r\n      APP_ID,\r\n      APP_SECRET,\r\n      clientAuthBody('nimrod'),\r\n    ),\r\n    missing_user: getClientAuthToken(APP_ID, APP_SECRET, {\r\n      user_id: 'nobody-that-exists',\r\n    }),\r\n  };\r\n\r\n  res.setHeader(\r\n    'Access-Control-Allow-Origin',\r\n    `https://${env.APP_SERVER_HOST}`,\r\n  );\r\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\r\n\r\n  return res.status(200).json(tokens);\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { SAMPLE_TOKEN_EXPIRY_SECONDS } from 'common/const/Timing.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { sampleTokenAppSecret } from 'server/src/util/sampleTokenAppSecret.ts';\r\n\r\n/**\r\n * Generate a session token to be used for an app Quickstart.  It is used in the\r\n * first steps of the integration guide on docs.cord.com as well as by the opensource\r\n * demo apps repos on https://github.com/getcord/demo-apps (but not in other\r\n * uses of the demo apps - see GetPlaygroundSignedTokenHandler for those)\r\n *\r\n * This handler will:\r\n * 1. Sign a token with a random user uuid.\r\n * 2. Return the signed session token.\r\n */\r\nasync function getSampleSignedTokenHandler(\r\n  { headers }: Request,\r\n  res: Response,\r\n) {\r\n  anonymousLogger().debug('Provisioned sample token', { headers });\r\n\r\n  const appID = uuid();\r\n\r\n  const session_token = jwt.sign(\r\n    {\r\n      app_id: appID,\r\n      user_id: uuid(),\r\n    },\r\n    sampleTokenAppSecret(appID),\r\n    {\r\n      algorithm: 'HS512',\r\n      expiresIn: SAMPLE_TOKEN_EXPIRY_SECONDS,\r\n    },\r\n  );\r\n\r\n  res.json({ session_token, client_auth_token: session_token });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getSampleSignedTokenHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  completeOAuthFlow,\r\n  removeSubitemBoards,\r\n} from 'server/src/third_party_tasks/monday/api.ts';\r\nimport { getOAuthCodeAndState } from 'server/src/auth/oauth.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { anonymousLogger, Logger } from 'server/src/logging/Logger.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { MondayConnectionPreferences } from 'common/types/index.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { MONDAY_CONNECTION_PREFERENCES } from 'common/const/UserPreferenceKeys.ts';\r\n\r\nexport default async function MondayAuthRedirectHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  let logger = anonymousLogger();\r\n  if (req.query['error'] === 'access_denied') {\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=monday&message=cancelled`,\r\n    );\r\n  }\r\n\r\n  try {\r\n    const codeAndState = getOAuthCodeAndState(req);\r\n\r\n    const [code, { userID, orgID, type }] = codeAndState;\r\n    logger = new Logger(Viewer.createLoggedInViewer(userID, orgID));\r\n\r\n    if (type !== 'monday') {\r\n      throw new Error(`incorrect redirect type, received ${type}`);\r\n    }\r\n\r\n    const [accessToken, userInfo] = await completeOAuthFlow(code);\r\n    if (userInfo.me.id >= Number.MAX_SAFE_INTEGER) {\r\n      logger.error(\r\n        `Monday API returned ID of ${userInfo.me.id}, which may have been truncated`,\r\n      );\r\n    }\r\n    const preferences: MondayConnectionPreferences = {\r\n      boardID: removeSubitemBoards(userInfo.boards)[0].id,\r\n    };\r\n\r\n    await Promise.all([\r\n      UserPreferenceEntity.upsert({\r\n        userID,\r\n        key: MONDAY_CONNECTION_PREFERENCES,\r\n        value: preferences,\r\n      }),\r\n      ThirdPartyConnectionEntity.upsert({\r\n        userID,\r\n        orgID,\r\n        type,\r\n        // Use BigInt to prevent switching to exponential notation for large numbers\r\n        externalID: BigInt(userInfo.me.id).toString(),\r\n        externalEmail: userInfo.me.email,\r\n        externalAuthData: {\r\n          accessToken,\r\n        },\r\n      }),\r\n    ]);\r\n  } catch (e) {\r\n    logger.logException(`MondayAuthRedirectHandler`, e);\r\n    return res.redirect(\r\n      `${APP_ORIGIN}/auth-error.html#service=monday&message=error`,\r\n    );\r\n  }\r\n\r\n  return res.redirect(`${APP_ORIGIN}/auth-complete.html#service=monday`);\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { TaskThirdPartySubscriptionEntity } from 'server/src/entity/task_third_party_subscription/TaskThirdPartySubscriptionEntity.ts';\r\nimport type { MondayWebhookEvent } from 'server/src/third_party_tasks/monday/actions.ts';\r\nimport {\r\n  webhookUpdateStatus,\r\n  webhookUpdateAssignee,\r\n} from 'server/src/third_party_tasks/monday/actions.ts';\r\n\r\nexport default async function MondayEventApiHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  const payload = req.body;\r\n  anonymousLogger().debug('MondayEventApiHandler', { mondayEvent: payload });\r\n\r\n  // Monday sends a challenge on webhook creation to confirm our handler is\r\n  // functioning properly, see\r\n  // https://support.monday.com/hc/en-us/articles/360003540679-Webhook-Integration-\r\n  if (payload.challenge) {\r\n    res.status(200).json({\r\n      challenge: payload.challenge,\r\n    });\r\n    return;\r\n  }\r\n  // Confirm that this webhook request is actually from a real webhook we\r\n  // submitted\r\n  const subscription = await TaskThirdPartySubscriptionEntity.findByPk(\r\n    req.params.subscriptionId,\r\n  );\r\n  if (!subscription) {\r\n    res.sendStatus(404);\r\n    return;\r\n  }\r\n\r\n  res.sendStatus(200);\r\n  await handleMondayEvent(payload.event);\r\n}\r\n\r\nasync function handleMondayEvent(event: MondayWebhookEvent) {\r\n  const { pulseId: itemID, type, columnType } = event;\r\n\r\n  if (type !== 'update_column_value') {\r\n    return;\r\n  }\r\n\r\n  if (columnType === 'multiple-person') {\r\n    await webhookUpdateAssignee(itemID.toString(), event);\r\n  } else if (columnType === 'color') {\r\n    await webhookUpdateStatus(itemID.toString(), event);\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { DOCS_TOKEN_EXPIRY_SECONDS } from 'common/const/Timing.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { extractDocTokenFromReqBody } from 'server/src/public/routes/docs-sample-token/utils.ts';\r\nimport { createDummyDataForDocsIfNotExist } from 'server/src/public/routes/docs-sample-token/populateLiveComponents.ts';\r\nimport { CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID } from 'common/const/Ids.ts';\r\nimport { TEAM_PROFILES } from 'common/const/TeamProfiles.ts';\r\n/**\r\n * Generate a session token to be used live components on docs.\r\n *\r\n * This handler will:\r\n * 1. Sign a token with a random user and org uuid.\r\n * 2. Return the signed session token.\r\n */\r\nasync function getDocsSampleSignedTokenHandler(\r\n  { body }: Request,\r\n  res: Response,\r\n) {\r\n  anonymousLogger().debug('Provisioned docs sample token', { body });\r\n\r\n  let session_token = await extractDocTokenFromReqBody(body);\r\n\r\n  if (!session_token) {\r\n    const application = await ApplicationEntity.findByPk(\r\n      CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n    );\r\n\r\n    if (!application) {\r\n      throw new Error('Sample docs token application missing');\r\n    }\r\n\r\n    const randomIndex = Math.floor(Math.random() * TEAM_PROFILES.length);\r\n\r\n    session_token = jwt.sign(\r\n      {\r\n        app_id: CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n        user_id: uuid(),\r\n        organization_id: uuid(),\r\n        user_details: {\r\n          name: TEAM_PROFILES[randomIndex].firstName,\r\n          email: `sample-doc-user@${Math.floor(\r\n            Math.random() * 1000000000,\r\n          )}.cord.com`,\r\n          profile_picture_url: TEAM_PROFILES[randomIndex].profilePictureURL,\r\n        },\r\n        organization_details: {\r\n          name: 'Sample Doc Org',\r\n        },\r\n      },\r\n      application.sharedSecret,\r\n      {\r\n        algorithm: 'HS512',\r\n        expiresIn: DOCS_TOKEN_EXPIRY_SECONDS,\r\n      },\r\n    );\r\n  }\r\n\r\n  try {\r\n    await createDummyDataForDocsIfNotExist({ sessionToken: session_token });\r\n  } catch (error) {\r\n    const errorOptions: ErrorOptions = {};\r\n    if (error instanceof Error) {\r\n      errorOptions.cause = error;\r\n    }\r\n    throw new Error('Creating dummy data for docs failed', errorOptions);\r\n  }\r\n\r\n  return res.json({ client_auth_token: session_token });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getDocsSampleSignedTokenHandler);\r\n", "import type { Request } from 'express';\r\nimport {\r\n  CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n  DOCS_TOKEN_KEY,\r\n} from 'common/const/Ids.ts';\r\nimport { decodeSessionFromJWT } from 'server/src/auth/session.ts';\r\nimport { assertViewerHasPlatformIdentity } from 'server/src/auth/index.ts';\r\n\r\nexport async function extractDocTokenFromReqBody(reqBody: Request['body']) {\r\n  try {\r\n    if (!(DOCS_TOKEN_KEY in reqBody)) {\r\n      throw 'docs token does not exist';\r\n    }\r\n    const previousToken = reqBody[DOCS_TOKEN_KEY];\r\n    if (typeof previousToken !== 'string') {\r\n      throw 'docs token not a string';\r\n    }\r\n\r\n    const session = await decodeSessionFromJWT(previousToken);\r\n\r\n    const { platformApplicationID } = assertViewerHasPlatformIdentity(\r\n      session.viewer,\r\n    );\r\n\r\n    // validating user comes from docs sample token application\r\n    if (platformApplicationID !== CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID) {\r\n      return null;\r\n    }\r\n\r\n    return previousToken;\r\n  } catch {\r\n    // if we get an error or token has expired we return null\r\n    return null;\r\n  }\r\n}\r\n", "import * as path from 'path';\r\nimport * as url from 'url';\r\nimport fs from 'fs';\r\nimport { v4 as uuid } from 'uuid';\r\nimport type { Transaction } from 'sequelize';\r\nimport {\r\n  DOCS_LIVE_PAGE_LOCATIONS,\r\n  CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n  DOCS_URLS,\r\n  LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX,\r\n  LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX,\r\n  CSS_CUSTOMIZATION_ON_DOCS_PREFIX,\r\n  LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID,\r\n  LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX,\r\n  BETA_V2_DOCS_PREFIX,\r\n} from 'common/const/Ids.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport {\r\n  assertViewerHasPlatformIdentity,\r\n  Viewer,\r\n} from 'server/src/auth/index.ts';\r\nimport type { MessageContent, PageContext, UUID } from 'common/types/index.ts';\r\nimport { MessageAttachmentType, MessageNodeType } from 'common/types/index.ts';\r\nimport { createDummyPlatformUser } from 'server/src/public/routes/platform/util.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { decodeSessionFromJWT } from 'server/src/auth/session.ts';\r\n\r\nimport { DOCS_SERVER_HOST } from 'common/const/Urls.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { PageVisitorMutator } from 'server/src/entity/page_visitor/PageVisitorMutator.ts';\r\nimport { TEAM_PROFILES } from 'common/const/TeamProfiles.ts';\r\nimport type { ThreadLoader } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { MessageMentionEntity } from 'server/src/entity/message_mention/MessageMentionEntity.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { MessageReactionMutator } from 'server/src/entity/message_reaction/MessageReactionMutator.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\ntype DocsLivePageType = keyof typeof DOCS_LIVE_PAGE_LOCATIONS;\r\ntype DocsLivePageLocation = (typeof DOCS_LIVE_PAGE_LOCATIONS)[DocsLivePageType];\r\n\r\ntype AddMessageProps = {\r\n  thread: ThreadEntity;\r\n  viewer: Viewer;\r\n  transaction: Transaction;\r\n  message?: string;\r\n  timestamp?: Date;\r\n};\r\n\r\nasync function addMessage({\r\n  thread,\r\n  viewer,\r\n  transaction,\r\n  message = 'Hello!',\r\n  timestamp,\r\n}: AddMessageProps) {\r\n  const messageID = uuid();\r\n\r\n  assertViewerIsFromCordDocsApplication(viewer);\r\n\r\n  const loaders = await getNewLoaders(viewer);\r\n  const messageEntity = await new MessageMutator(viewer, loaders).createMessage(\r\n    {\r\n      id: messageID,\r\n      thread,\r\n      content: [\r\n        {\r\n          type: MessageNodeType.PARAGRAPH,\r\n          children: [\r\n            {\r\n              text: message,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      url: null,\r\n      timestamp,\r\n    },\r\n    transaction,\r\n  );\r\n\r\n  const threadParticipantMutator = new ThreadParticipantMutator(\r\n    viewer,\r\n    loaders,\r\n  );\r\n  await threadParticipantMutator.markThreadSeen({\r\n    threadID: thread.id,\r\n    setSubscribed: true,\r\n    transaction,\r\n  });\r\n\r\n  return messageEntity;\r\n}\r\n\r\ntype AddMessageWithMentionProps = {\r\n  thread: ThreadEntity;\r\n  viewer: Viewer;\r\n  transaction: Transaction;\r\n  messageBeforeMention?: string;\r\n  mentionUserID: UUID;\r\n  mentionName: string;\r\n  messageAfterMention?: string;\r\n};\r\n\r\nasync function addMessageWithMention({\r\n  thread,\r\n  viewer,\r\n  transaction,\r\n  messageBeforeMention = 'Hello',\r\n  mentionUserID,\r\n  mentionName,\r\n  messageAfterMention = '',\r\n}: AddMessageWithMentionProps) {\r\n  const messageID = uuid();\r\n\r\n  assertViewerIsFromCordDocsApplication(viewer);\r\n\r\n  const messageContent: MessageContent = [\r\n    {\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [\r\n        {\r\n          text: messageBeforeMention + ' ',\r\n        },\r\n        {\r\n          type: MessageNodeType.MENTION,\r\n          user: {\r\n            id: mentionUserID,\r\n          },\r\n          children: [\r\n            {\r\n              text: '@' + mentionName,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          text: ' ' + messageAfterMention,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const loaders = await getNewLoaders(viewer);\r\n  await new MessageMutator(viewer, loaders).createMessage(\r\n    {\r\n      id: messageID,\r\n      thread,\r\n      content: messageContent,\r\n      url: null,\r\n    },\r\n    transaction,\r\n  );\r\n\r\n  const threadParticipantMutator = new ThreadParticipantMutator(\r\n    viewer,\r\n    loaders,\r\n  );\r\n\r\n  await MessageMentionEntity.create(\r\n    {\r\n      userID: mentionUserID,\r\n      messageID,\r\n    },\r\n    { transaction },\r\n  );\r\n\r\n  await Promise.all([\r\n    threadParticipantMutator.markThreadSeen({\r\n      threadID: thread.id,\r\n      setSubscribed: true,\r\n      transaction,\r\n    }),\r\n    threadParticipantMutator.subscribeUsersToThread(\r\n      thread.id,\r\n      [mentionUserID],\r\n      undefined,\r\n      transaction,\r\n    ),\r\n  ]);\r\n\r\n  // keep this separate from the above otherwise it wouldn't show the thread\r\n  // in the unread section\r\n  await threadParticipantMutator.markThreadNewlyActiveForOtherUsers(\r\n    thread.id,\r\n    messageID,\r\n    transaction,\r\n  );\r\n}\r\n\r\ntype CreateDummyUserAndViewerProps = {\r\n  platformApplicationID: UUID;\r\n  org: OrgEntity;\r\n  firstName: string;\r\n  transaction?: Transaction;\r\n  context: RequestContext;\r\n  profilePictureURL?: string;\r\n  userExternalID: string;\r\n};\r\n\r\nasync function createDummyUserAndViewerIfNotExist({\r\n  platformApplicationID,\r\n  org,\r\n  firstName,\r\n  context,\r\n  profilePictureURL,\r\n  userExternalID,\r\n}: CreateDummyUserAndViewerProps) {\r\n  try {\r\n    return await getSequelize().transaction(async (transaction) => {\r\n      // We use this to check if we have already made a dummy user for this org\r\n      // for the docs\r\n      let dummyUser: UserEntity | null;\r\n\r\n      dummyUser = await UserEntity.findOne({\r\n        where: {\r\n          platformApplicationID,\r\n          externalID: userExternalID,\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      if (!dummyUser) {\r\n        dummyUser = await createDummyPlatformUser({\r\n          applicationID: platformApplicationID,\r\n          orgID: org.id,\r\n          firstName,\r\n          externalID: userExternalID,\r\n          transaction,\r\n          profilePicture: profilePictureURL,\r\n        });\r\n      }\r\n\r\n      const dummyViewer = await Viewer.createLoggedInPlatformViewer({\r\n        user: dummyUser,\r\n        org,\r\n      });\r\n\r\n      return { viewer: dummyViewer, user: dummyUser };\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create or retrieve dummy users data on docs',\r\n      error,\r\n      { orgID: org.id, platformApplicationID },\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\ntype CreateThreadWithMessageProps = {\r\n  pageMutator: PageMutator;\r\n  threadMutator: ThreadMutator;\r\n  threadLoader: ThreadLoader;\r\n  context: RequestContext;\r\n  dummyViewer: Viewer;\r\n  location: DocsLivePageLocation;\r\n  threadURL: string;\r\n  threadExternalID: string;\r\n  threadName: string;\r\n  message?: string;\r\n  extraMessages?: [Viewer, string][];\r\n  reactions?: Array<string>;\r\n  includeDummyAttachment?: boolean;\r\n};\r\n\r\nasync function createEmptyThreadIfNotExist({\r\n  pageMutator,\r\n  threadMutator,\r\n  threadLoader,\r\n  context,\r\n  location,\r\n  threadURL,\r\n  threadExternalID,\r\n  threadName,\r\n}: Omit<\r\n  CreateThreadWithMessageProps,\r\n  'message' | 'reactions' | 'dummyViewer'\r\n>) {\r\n  try {\r\n    assertViewerIsFromCordDocsApplication(context.session.viewer);\r\n\r\n    await getSequelize().transaction(async (transaction) => {\r\n      const pageContext: PageContext = {\r\n        providerID: null,\r\n        data: { page: location },\r\n      };\r\n\r\n      const { page } = await pageMutator.getPageCreateIfNotExists(\r\n        pageContext,\r\n        transaction,\r\n      );\r\n\r\n      let threadEntity: ThreadEntity | null;\r\n\r\n      threadEntity = await threadLoader.loadByExternalIDStrictOrgCheck(\r\n        threadExternalID,\r\n        transaction,\r\n      );\r\n\r\n      if (!threadEntity) {\r\n        threadEntity = await threadMutator.createThreadOnPage(\r\n          uuid(),\r\n          threadURL,\r\n          page,\r\n          threadName,\r\n          transaction,\r\n          CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n          threadExternalID,\r\n        );\r\n      }\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create empty thread on docs',\r\n      error,\r\n      { location, threadURL },\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createThreadWithMessageIfNotExist({\r\n  pageMutator,\r\n  threadMutator,\r\n  threadLoader,\r\n  context,\r\n  dummyViewer,\r\n  location,\r\n  threadURL,\r\n  threadExternalID,\r\n  threadName,\r\n  message,\r\n  extraMessages = [],\r\n  reactions,\r\n  includeDummyAttachment = false,\r\n}: CreateThreadWithMessageProps) {\r\n  try {\r\n    assertViewerIsFromCordDocsApplication(context.session.viewer);\r\n\r\n    await getSequelize().transaction(async (transaction) => {\r\n      const pageContext: PageContext = {\r\n        providerID: null,\r\n        data: { page: location },\r\n      };\r\n\r\n      const { page } = await pageMutator.getPageCreateIfNotExists(\r\n        pageContext,\r\n        transaction,\r\n      );\r\n\r\n      let threadEntity: ThreadEntity | null;\r\n\r\n      threadEntity = await threadLoader.loadByExternalIDStrictOrgCheck(\r\n        threadExternalID,\r\n        transaction,\r\n      );\r\n\r\n      if (!threadEntity) {\r\n        threadEntity = await threadMutator.createThreadOnPage(\r\n          uuid(),\r\n          threadURL,\r\n          page,\r\n          threadName,\r\n          transaction,\r\n          CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n          threadExternalID,\r\n        );\r\n\r\n        const messageEntity = await addMessage({\r\n          thread: threadEntity,\r\n          viewer: dummyViewer,\r\n          transaction,\r\n          message,\r\n        });\r\n\r\n        let lastMessage = messageEntity;\r\n        for (const [viewer, additionalMessage] of extraMessages) {\r\n          lastMessage = await addMessage({\r\n            thread: threadEntity,\r\n            viewer,\r\n            transaction,\r\n            message: additionalMessage,\r\n            timestamp: new Date(lastMessage.timestamp.getTime() + 1000),\r\n          });\r\n        }\r\n\r\n        if (reactions) {\r\n          await Promise.all(\r\n            reactions.map(async (reaction) => {\r\n              await new MessageReactionMutator(dummyViewer, null).createOne(\r\n                messageEntity.id,\r\n                reaction,\r\n                undefined,\r\n                transaction,\r\n              );\r\n            }),\r\n          );\r\n        }\r\n\r\n        if (includeDummyAttachment) {\r\n          const fileID = uuid();\r\n          await uploadDummyAttachment(context, fileID);\r\n          await MessageAttachmentEntity.create(\r\n            {\r\n              messageID: messageEntity.id,\r\n              type: MessageAttachmentType.FILE,\r\n              data: { fileID },\r\n            },\r\n            { transaction },\r\n          );\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      const messagesCount = await MessageEntity.count({\r\n        where: {\r\n          threadID: threadEntity.id,\r\n        },\r\n      });\r\n\r\n      if (messagesCount < 1) {\r\n        let lastMessage = await addMessage({\r\n          thread: threadEntity,\r\n          viewer: dummyViewer,\r\n          transaction,\r\n          message,\r\n        });\r\n        for (const [viewer, additionalMessage] of extraMessages) {\r\n          lastMessage = await addMessage({\r\n            thread: threadEntity,\r\n            viewer,\r\n            transaction,\r\n            message: additionalMessage,\r\n            timestamp: new Date(lastMessage.timestamp.getTime() + 1000),\r\n          });\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create thread and dummy data on docs',\r\n      error,\r\n      { location, threadURL },\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function uploadDummyAttachment(context: RequestContext, fileID: UUID) {\r\n  const FILE_NAME = 'dummy_file.txt';\r\n  const MIME_TYPE = 'text/plain';\r\n\r\n  const mutator = new FileMutator(context.session.viewer, context.loaders);\r\n  const buffer = fs.readFileSync(\r\n    path.resolve(path.dirname(url.fileURLToPath(import.meta.url)), FILE_NAME),\r\n  );\r\n\r\n  const file = await mutator.createFileForUpload(\r\n    fileID,\r\n    FILE_NAME,\r\n    MIME_TYPE,\r\n    buffer.length,\r\n    'uploaded',\r\n  );\r\n\r\n  try {\r\n    await fetch(await file.getSignedUploadURL(context.loaders.s3BucketLoader), {\r\n      method: 'PUT',\r\n      body: buffer,\r\n      headers: {\r\n        'Content-Type': MIME_TYPE,\r\n      },\r\n    });\r\n  } catch (error: any) {\r\n    context.logger.logException(\r\n      'Could not upload docs dummy file in S3',\r\n      error,\r\n    );\r\n  }\r\n}\r\n\r\nfunction assertViewerIsFromCordDocsApplication(viewer: Viewer) {\r\n  const platformViewer = assertViewerHasPlatformIdentity(viewer);\r\n\r\n  if (\r\n    platformViewer.platformApplicationID !==\r\n    CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID\r\n  ) {\r\n    throw new Error('Viewer not part of the Cord Docs application');\r\n  }\r\n  return platformViewer;\r\n}\r\n\r\ntype AddThreadToPageWithDummyDataType = {\r\n  page: PageEntity;\r\n  viewer: Viewer;\r\n  transaction: Transaction;\r\n  threadURL: string;\r\n  threadName: string;\r\n  otherViewer: Viewer;\r\n  messages?: string[];\r\n};\r\n\r\nasync function addThreadToPageWithDummyDataIfNotExist({\r\n  page,\r\n  viewer,\r\n  transaction,\r\n  threadURL,\r\n  threadName,\r\n  otherViewer,\r\n  messages,\r\n}: AddThreadToPageWithDummyDataType) {\r\n  const { platformApplicationID, userID } =\r\n    assertViewerIsFromCordDocsApplication(viewer);\r\n\r\n  const loaders = await getNewLoaders(viewer);\r\n  const threadMutator = new ThreadMutator(viewer, loaders);\r\n\r\n  // so we can look for this thread in the future\r\n  const threadExternalID = `${threadURL}-${userID}`;\r\n\r\n  let threadEntity: ThreadEntity | null;\r\n\r\n  threadEntity = await loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n    threadExternalID,\r\n    transaction,\r\n  );\r\n\r\n  if (!threadEntity) {\r\n    threadEntity = await threadMutator.createThreadOnPage(\r\n      uuid(),\r\n      threadURL,\r\n      page,\r\n      threadName,\r\n      transaction,\r\n      platformApplicationID,\r\n      threadExternalID,\r\n    );\r\n    const firstMessage = await addMessage({\r\n      thread: threadEntity,\r\n      viewer,\r\n      transaction,\r\n      message: messages?.[0],\r\n    });\r\n    await addMessage({\r\n      thread: threadEntity,\r\n      viewer: otherViewer,\r\n      transaction,\r\n      message: messages?.[1] ?? 'Hey there!',\r\n      timestamp: new Date(firstMessage.timestamp.getTime() + 1000),\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  const messagesCount = await MessageEntity.count({\r\n    where: {\r\n      threadID: threadEntity.id,\r\n    },\r\n  });\r\n\r\n  if (messagesCount < 1) {\r\n    const firstMessage = await addMessage({\r\n      thread: threadEntity,\r\n      viewer,\r\n      transaction,\r\n    });\r\n    await addMessage({\r\n      thread: threadEntity,\r\n      viewer: otherViewer,\r\n      transaction,\r\n      message: 'Hey there!',\r\n      timestamp: new Date(firstMessage.timestamp.getTime() + 1000),\r\n    });\r\n  }\r\n}\r\n\r\ntype CreateAndPopulateThreadsProps = {\r\n  pageMutator: PageMutator;\r\n  context: RequestContext;\r\n  viewer: Viewer;\r\n  location: string;\r\n  dummyViewers: Viewer[];\r\n  threadURL: string;\r\n  threadName: string;\r\n  threadMessages?: string[][];\r\n};\r\n\r\nasync function createAndPopulateThreadsIfNotExist({\r\n  pageMutator,\r\n  context,\r\n  viewer,\r\n  location,\r\n  dummyViewers,\r\n  threadURL,\r\n  threadName,\r\n  threadMessages,\r\n}: CreateAndPopulateThreadsProps) {\r\n  try {\r\n    await getSequelize().transaction(async (transaction) => {\r\n      const pageContext: PageContext = {\r\n        providerID: null,\r\n        data: { page: location },\r\n      };\r\n\r\n      const { page } = await pageMutator.getPageCreateIfNotExists(\r\n        pageContext,\r\n        transaction,\r\n      );\r\n\r\n      const viewers = [viewer, ...dummyViewers];\r\n\r\n      await Promise.all(\r\n        // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n        viewers.map((viewer, index) =>\r\n          addThreadToPageWithDummyDataIfNotExist({\r\n            page,\r\n            viewer,\r\n            transaction,\r\n            threadURL,\r\n            threadName,\r\n            otherViewer:\r\n              index === viewers.length - 1 ? viewers[0] : viewers[index + 1], // using the other viewers in each thread\r\n            messages: threadMessages?.[index],\r\n          }),\r\n        ),\r\n      );\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create live thread list and dummy data on docs',\r\n      error,\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createThreadWithMentionIfNotExist({\r\n  pageMutator,\r\n  threadMutator,\r\n  threadLoader,\r\n  context,\r\n  location,\r\n  threadName,\r\n  threadURL,\r\n  viewer,\r\n  mentionedViewer,\r\n  threadExternalID,\r\n  messageBeforeMention,\r\n  messageAfterMention,\r\n}: Omit<CreateThreadWithMessageProps, 'dummyViewer' | 'message'> & {\r\n  viewer: Viewer;\r\n  mentionedViewer: Viewer;\r\n  messageBeforeMention?: string;\r\n  messageAfterMention?: string;\r\n}) {\r\n  try {\r\n    const { orgID, userID: mentionedUserID } =\r\n      assertViewerIsFromCordDocsApplication(mentionedViewer);\r\n\r\n    await getSequelize().transaction(async (transaction) => {\r\n      const pageContext: PageContext = {\r\n        providerID: null,\r\n        data: { page: location },\r\n      };\r\n\r\n      const { page } = await pageMutator.getPageCreateIfNotExists(\r\n        pageContext,\r\n        transaction,\r\n      );\r\n\r\n      let threadEntity: ThreadEntity | null;\r\n\r\n      threadEntity = await threadLoader.loadByExternalIDStrictOrgCheck(\r\n        threadExternalID,\r\n        transaction,\r\n      );\r\n\r\n      if (!threadEntity) {\r\n        threadEntity = await threadMutator.createThreadOnPage(\r\n          uuid(),\r\n          threadURL,\r\n          page,\r\n          threadName,\r\n          transaction,\r\n          CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n          threadExternalID,\r\n        );\r\n      }\r\n\r\n      const mentionedUser = await context.loaders.userLoader.loadUserInOrg(\r\n        mentionedUserID,\r\n        orgID,\r\n      );\r\n\r\n      if (!mentionedUser) {\r\n        throw new Error('Mentioned user not found');\r\n      }\r\n\r\n      const messagesCount = await MessageEntity.count({\r\n        where: {\r\n          threadID: threadEntity.id,\r\n        },\r\n      });\r\n\r\n      if (messagesCount < 1) {\r\n        await addMessageWithMention({\r\n          thread: threadEntity,\r\n          viewer,\r\n          transaction,\r\n          mentionUserID: mentionedUserID,\r\n          mentionName: userDisplayName(mentionedUser),\r\n          messageBeforeMention,\r\n          messageAfterMention,\r\n        });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create thread with viewer mention on docs',\r\n      error,\r\n      { threadURL },\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\ntype ViewerToVisitPage = {\r\n  pageMutator: PageMutator;\r\n  viewer: Viewer;\r\n  context: RequestContext;\r\n  location: DocsLivePageLocation;\r\n  transaction?: Transaction;\r\n};\r\n\r\nasync function viewerToVisitPageIfNotExist({\r\n  pageMutator,\r\n  viewer,\r\n  context,\r\n  location,\r\n}: ViewerToVisitPage) {\r\n  try {\r\n    assertViewerIsFromCordDocsApplication(viewer);\r\n    await getSequelize().transaction(async (transaction) => {\r\n      const pageContext: PageContext = {\r\n        providerID: null,\r\n        data: { page: location },\r\n      };\r\n\r\n      const { pageContextHash } = await pageMutator.getPageCreateIfNotExists(\r\n        pageContext,\r\n        transaction,\r\n      );\r\n      await markPageVisitedByViewerIfNotExist({\r\n        viewer,\r\n        pageContextHash,\r\n        transaction,\r\n      });\r\n    });\r\n  } catch (error) {\r\n    context.logger.logException(\r\n      'Could not create data for viewer to visit page on docs',\r\n      error,\r\n      { viewer: { ...viewer }, location },\r\n    );\r\n    throw error;\r\n  }\r\n}\r\n\r\ntype PageVisitedByViewer = {\r\n  viewer: Viewer;\r\n  pageContextHash: string;\r\n  transaction?: Transaction;\r\n};\r\n\r\nasync function markPageVisitedByViewerIfNotExist({\r\n  viewer,\r\n  pageContextHash,\r\n  transaction,\r\n}: PageVisitedByViewer) {\r\n  const { orgID, userID } = assertViewerIsFromCordDocsApplication(viewer);\r\n  const pageVisitor = await PageVisitorEntity.findOne({\r\n    where: {\r\n      userID,\r\n      orgID,\r\n      pageContextHash,\r\n    },\r\n  });\r\n  if (pageVisitor) {\r\n    return;\r\n  }\r\n  const pageVisitorMutator = new PageVisitorMutator(viewer);\r\n  await pageVisitorMutator.markPresentInPage(pageContextHash, transaction);\r\n}\r\n\r\nasync function addExternalNotificationIfNotExist({\r\n  pageMutator,\r\n  threadMutator,\r\n  threadLoader,\r\n  context,\r\n  recipient,\r\n  sender,\r\n}: {\r\n  pageMutator: PageMutator;\r\n  threadMutator: ThreadMutator;\r\n  threadLoader: ThreadLoader;\r\n  context: RequestContext;\r\n  recipient: Viewer;\r\n  sender: Viewer;\r\n}) {\r\n  const {\r\n    platformApplicationID,\r\n    userID: recipientID,\r\n    externalUserID: recipientExternalID,\r\n  } = assertViewerIsFromCordDocsApplication(recipient);\r\n  const { userID: senderID } = assertViewerIsFromCordDocsApplication(sender);\r\n  const threadExternalID = `notification-example-thread-${senderID}`;\r\n\r\n  await createThreadWithMessageIfNotExist({\r\n    pageMutator,\r\n    threadMutator,\r\n    threadLoader,\r\n    context,\r\n    dummyViewer: sender,\r\n    location: DOCS_LIVE_PAGE_LOCATIONS.liveNotificationList,\r\n    threadURL: DOCS_URLS.tutorials.integrationGuide,\r\n    threadExternalID,\r\n    threadName: 'Integration guide',\r\n    message: \"I love Cord's integration guide!\",\r\n  });\r\n\r\n  await Promise.all([\r\n    getSequelize().transaction(async (transaction) => {\r\n      const notif = await NotificationEntity.findOne({\r\n        where: {\r\n          recipientID,\r\n          senderID,\r\n          type: 'external',\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      if (notif) {\r\n        return;\r\n      }\r\n\r\n      await new NotificationMutator(\r\n        Viewer.createAnonymousViewer(),\r\n      ).createExternal(\r\n        {\r\n          recipientID,\r\n          senderID,\r\n          platformApplicationID,\r\n          externalTemplate:\r\n            '{{actor}} sent an example notification via the REST API',\r\n          externalURL: `https://${DOCS_SERVER_HOST}/rest-apis/notifications`,\r\n          externalID: `${LIVE_COMPONENT_ON_DOCS_EXTERNAL_NOTIFICATION_PREFIX}${recipientExternalID}`,\r\n          extraClassnames: 'external-notification',\r\n        },\r\n        transaction,\r\n      );\r\n    }),\r\n    getSequelize().transaction(async (transaction) => {\r\n      const notif = await NotificationEntity.findOne({\r\n        where: {\r\n          recipientID,\r\n          senderID,\r\n          type: 'reply',\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      if (notif) {\r\n        return;\r\n      }\r\n\r\n      const thread = await ThreadEntity.findOne({\r\n        where: { externalID: threadExternalID },\r\n        transaction,\r\n      });\r\n\r\n      if (!thread) {\r\n        throw new Error('Just created thread for notif use, where is it');\r\n      }\r\n\r\n      const message = await MessageEntity.findOne({\r\n        where: { threadID: thread.id },\r\n        transaction,\r\n      });\r\n\r\n      if (!message) {\r\n        throw new Error('Just creatd message for notif user, where is it');\r\n      }\r\n\r\n      await new NotificationMutator(sender).create({\r\n        recipientID,\r\n        type: 'reply',\r\n        messageID: message.id,\r\n        replyActions: ['create-thread'],\r\n        threadID: message.threadID,\r\n      });\r\n    }),\r\n  ]);\r\n}\r\n\r\ntype CreateDummyDataForDocsIfNotExist = {\r\n  sessionToken: string;\r\n};\r\n\r\nexport async function createDummyDataForDocsIfNotExist({\r\n  sessionToken,\r\n}: CreateDummyDataForDocsIfNotExist) {\r\n  const session = await decodeSessionFromJWT(sessionToken);\r\n\r\n  const { platformApplicationID, externalOrgID, orgID } =\r\n    assertViewerIsFromCordDocsApplication(session.viewer);\r\n\r\n  const [context, org] = await Promise.all([\r\n    contextWithSession(session, getSequelize(), null, null),\r\n    OrgEntity.findByPk(orgID),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new Error('org for docs user should exist by now');\r\n  }\r\n\r\n  const viewer = session.viewer;\r\n\r\n  const threadMutator = new ThreadMutator(viewer, context.loaders);\r\n  const threadLoader = context.loaders.threadLoader;\r\n  const pageMutator = new PageMutator(viewer);\r\n\r\n  const dummyUserNames = TEAM_PROFILES.slice(0, 2);\r\n\r\n  const [{ viewer: dummyViewerOne }, { viewer: dummyViewerTwo }] =\r\n    await Promise.all(\r\n      dummyUserNames.map(({ firstName, profilePictureURL }, index) =>\r\n        createDummyUserAndViewerIfNotExist({\r\n          platformApplicationID,\r\n          org,\r\n          firstName,\r\n          context,\r\n          profilePictureURL,\r\n          userExternalID: `${externalOrgID}:${index}`,\r\n        }),\r\n      ),\r\n    );\r\n\r\n  await Promise.all([\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveCss,\r\n      threadURL: DOCS_URLS.tutorials.getProductionReady.addYourBranding,\r\n      threadExternalID: `${LIVE_CSS_ON_DOCS_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on live css page',\r\n      message:\r\n        'Add your style \uD83C\uDFA8 to this interactive thread component that only you can see. You can reply to this message - give it a try! ',\r\n    }),\r\n    createEmptyThreadIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveThread,\r\n      threadURL: DOCS_URLS.components.thread,\r\n      threadExternalID: `${LIVE_COMPONENT_ON_DOCS_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on thread component page',\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.cssCustomization,\r\n      threadURL: DOCS_URLS.howTo.cssCustomization,\r\n      threadExternalID: `${CSS_CUSTOMIZATION_ON_DOCS_PREFIX}${externalOrgID}`,\r\n      threadName: 'InterCord Thread',\r\n      message: `This is a completely customised Cord Thread, to look like a messaging app!`,\r\n      extraMessages: [\r\n        [\r\n          dummyViewerOne,\r\n          'Feel free to play around with the code and this thread \uD83D\uDE01',\r\n        ],\r\n      ],\r\n    }),\r\n    viewerToVisitPageIfNotExist({\r\n      pageMutator,\r\n      viewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.cssCustomization,\r\n      context,\r\n    }),\r\n    createAndPopulateThreadsIfNotExist({\r\n      pageMutator,\r\n      context,\r\n      viewer,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveThreadList,\r\n      dummyViewers: [dummyViewerOne, dummyViewerTwo],\r\n      threadURL: DOCS_URLS.components.threadList,\r\n      threadName: 'Thread created on thread list component page',\r\n      threadMessages: [\r\n        ['Be sure to use the thread click handler'],\r\n        ['Best used when connected with the thread component'],\r\n        ['Use this component to render a list of threads'],\r\n      ],\r\n    }),\r\n    createAndPopulateThreadsIfNotExist({\r\n      pageMutator,\r\n      context,\r\n      viewer,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveThreadedComments,\r\n      dummyViewers: [dummyViewerOne],\r\n      threadURL: DOCS_URLS.components.threadedComments,\r\n      threadName: 'Thread created on threaded comments component page',\r\n      threadMessages: [['Try looking at my replies!']],\r\n    }),\r\n    createAndPopulateThreadsIfNotExist({\r\n      pageMutator,\r\n      context,\r\n      viewer,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveSidebar,\r\n      dummyViewers: [dummyViewerOne, dummyViewerTwo],\r\n      threadURL: DOCS_URLS.components.sidebar,\r\n      threadName: 'Thread created on sidebar component page',\r\n      threadMessages: [\r\n        ['Try creating a new thread', 'Or try resolving the thread.'],\r\n        [\r\n          'Click on me to reply to this thread message',\r\n          'There is already a reply! Why not add more',\r\n        ],\r\n        [\r\n          'This is the conversations tab where you will see all threads written on this page, you can navigate to the inbox from here as well.',\r\n          '\u2B50',\r\n        ],\r\n      ],\r\n    }),\r\n    createThreadWithMentionIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      viewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveInbox,\r\n      threadURL: DOCS_URLS.components.inbox,\r\n      threadName: 'Thread on the inbox component page',\r\n      mentionedViewer: viewer,\r\n      threadExternalID: `${LIVE_COMPONENT_INBOX_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      messageBeforeMention: 'Hello',\r\n      messageAfterMention: 'hover over me for more options.',\r\n    }),\r\n    createThreadWithMentionIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      viewer: dummyViewerTwo,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveInboxLauncher,\r\n      threadURL: DOCS_URLS.components.inboxLauncher,\r\n      threadName: 'Thread on the inbox launcher component page',\r\n      mentionedViewer: viewer,\r\n      threadExternalID: `${LIVE_COMPONENT_INBOX_LAUNCHER_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      messageBeforeMention: 'Hey',\r\n      messageAfterMention: 'click on me to reply.',\r\n    }),\r\n    createAndPopulateThreadsIfNotExist({\r\n      pageMutator,\r\n      context,\r\n      viewer,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveSidebarLauncher,\r\n      dummyViewers: [dummyViewerOne, dummyViewerTwo],\r\n      threadURL: DOCS_URLS.components.sidebarLauncher,\r\n      threadName: 'Thread created on sidebar launcher component page',\r\n    }),\r\n    createAndPopulateThreadsIfNotExist({\r\n      pageMutator,\r\n      context,\r\n      viewer,\r\n      location: DOCS_URLS.howTo.customThreadedComments,\r\n      dummyViewers: [dummyViewerOne],\r\n      threadURL: DOCS_URLS.howTo.customThreadedComments,\r\n      threadName: 'Threaded Comments demo',\r\n    }),\r\n    viewerToVisitPageIfNotExist({\r\n      pageMutator,\r\n      viewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.livePagePresence,\r\n      context,\r\n    }),\r\n    addExternalNotificationIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      recipient: session.viewer,\r\n      sender: dummyViewerOne,\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveComposer,\r\n      threadURL: DOCS_URLS.components.composer,\r\n      threadExternalID: `${LIVE_COMPONENT_ON_DOCS_COMPOSER_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on Composer component page',\r\n      message:\r\n        'The id of this thread is passed into the Composer component. Try responding by using the Composer below!',\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: viewer,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveMessage,\r\n      threadURL: DOCS_URLS.components.message,\r\n      threadExternalID: `${LIVE_COMPONENT_ON_DOCS_MESSAGE_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on Message component page',\r\n      message: `Hey, I'm a message component. Try editing me or deleting me!`,\r\n      reactions: ['\uD83D\uDC4D\uFE0F', '\u2B50', '\uD83D\uDCAF'],\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveReactions,\r\n      threadURL: DOCS_URLS.components.reactions,\r\n      threadExternalID: `${LIVE_COMPONENT_ON_DOCS_REACTIONS_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on Reactions component page',\r\n      message: `The Reactions component is hooked up to this message. Try adding and removing reactions with it!`,\r\n      reactions: ['\uD83D\uDC4D\uFE0F', '\u2B50', '\uD83D\uDCAF'],\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveMessageContent,\r\n      threadURL: DOCS_URLS.components.messageContent,\r\n      threadExternalID: `${LIVE_COMPONENT_ON_DOCS_MESSAGE_CONTENT_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on Message Content component page',\r\n      message: `I am the message content of a particular message. Try inspecting me!`,\r\n      includeDummyAttachment: true,\r\n    }),\r\n    // Create a user with no profile picture to show AvatarFallback\r\n    createDummyUserAndViewerIfNotExist({\r\n      platformApplicationID,\r\n      org,\r\n      firstName: 'John Doe',\r\n      context,\r\n      userExternalID: `${externalOrgID}:${LIVE_COMPONENT_ON_DOCS_NO_AVATAR_USER_ID}`,\r\n    }),\r\n    // Create conversation for Github demo\r\n    await createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveReplacementsTutorial,\r\n      threadURL: DOCS_URLS.howTo.replacements,\r\n      threadExternalID: `${LIVE_CUSTOMIZATION_ON_DOCS_REPLACEMENTS_THREAD_ID_PREFIX}${externalOrgID}`,\r\n      threadName: 'Thread on Replacements tutorial page',\r\n      message:\r\n        'Hey there! Have you tried out the new Replacements API in Cord yet?',\r\n      reactions: ['\uD83D\uDC4D\uFE0F', '\u2B50', '\uD83D\uDCAF'],\r\n      extraMessages: [\r\n        [dummyViewerTwo, \"Not yet! What's it all about?\"],\r\n        [\r\n          dummyViewerOne,\r\n          'You can swap out default components with your own custom ones for a personalized look and added features.',\r\n        ],\r\n        [\r\n          dummyViewerTwo,\r\n          \"I'll have to give it a try. Thanks for the heads up!\",\r\n        ],\r\n      ],\r\n    }),\r\n    // For the new beta thread examples\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveBetaV2Thread,\r\n      threadURL: DOCS_URLS.betaV2Components.thread,\r\n      threadExternalID: `${BETA_V2_DOCS_PREFIX}thread-example-${externalOrgID}`,\r\n      threadName: 'Beta Thread',\r\n      message: `This is a completely customised Cord Thread!`,\r\n      extraMessages: [\r\n        [\r\n          dummyViewerOne,\r\n          'You can make it look like a messenger app, just click the examples tab to see it \uD83D\uDE01',\r\n        ],\r\n      ],\r\n    }),\r\n    // For the new beta threads examples\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveBetaV2Threads,\r\n      threadURL: DOCS_URLS.betaV2Components.threads,\r\n      threadExternalID: `${BETA_V2_DOCS_PREFIX}threads-example-${externalOrgID}-1`,\r\n      threadName: 'Beta Threads',\r\n      message: `This is a completely customisable Cord Threads component, you can reply directly to this message, or start a new conversation \uD83D\uDE01`,\r\n      extraMessages: [\r\n        [dummyViewerOne, 'You can have multiple conversations in one place'],\r\n      ],\r\n    }),\r\n    createThreadWithMessageIfNotExist({\r\n      pageMutator,\r\n      threadMutator,\r\n      threadLoader,\r\n      context,\r\n      dummyViewer: dummyViewerOne,\r\n      location: DOCS_LIVE_PAGE_LOCATIONS.liveBetaV2Threads,\r\n      threadURL: DOCS_URLS.betaV2Components.threads,\r\n      threadExternalID: `${BETA_V2_DOCS_PREFIX}threads-example-${externalOrgID}-2`,\r\n      threadName: 'Beta Threads',\r\n      message: `Try resolving this thread to and check out the other examples!`,\r\n      extraMessages: [\r\n        [\r\n          dummyViewerTwo,\r\n          'Customise the look and feel of the component using our TabbedThreads component',\r\n        ],\r\n      ],\r\n    }),\r\n  ]);\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\n\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\n\r\n/**\r\n * This handler removes the user along with any data that could identify them\r\n * and associated data such as messages, attachments etc sent by the user.\r\n */\r\nasync function deleteUserDataHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  const { permanently_delete, ...rest } = validate.DeleteUserVariables(\r\n    req.body,\r\n  );\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (!platformApplicationID || !permanently_delete) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const externalID = req.params.userID;\r\n  validateExternalID(externalID, 'userID');\r\n\r\n  const userToBeDeleted = await UserEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!userToBeDeleted) {\r\n    throw new ApiCallerError('invalid_user_id', {\r\n      message: `Invalid user id: ${externalID}.`,\r\n    });\r\n  }\r\n\r\n  // We first wipe data from the s3 buckets which are message attachments/files\r\n  const userToBeDeletedUserID = userToBeDeleted.id;\r\n\r\n  const linkedUsers = await LinkedUsersEntity.findAll({\r\n    where: {\r\n      sourceUserID: userToBeDeletedUserID,\r\n    },\r\n  });\r\n\r\n  const linkedUserIDs = linkedUsers.map((user) => user.linkedUserID);\r\n\r\n  const orgMemberEntities = await OrgMembersEntity.findAll({\r\n    where: { userID: userToBeDeletedUserID },\r\n  });\r\n\r\n  const orgIDsUserIsMemberOf = orgMemberEntities.map(\r\n    (orgMember) => orgMember.orgID,\r\n  );\r\n\r\n  const failedDeletionFileIDs: string[] = [];\r\n\r\n  const allUsers = [userToBeDeletedUserID, ...linkedUserIDs];\r\n  const filesToBeDeleted = await FileEntity.findAll({\r\n    where: {\r\n      userID: allUsers,\r\n    },\r\n  });\r\n\r\n  const headers = {\r\n    method: 'DELETE',\r\n  };\r\n\r\n  await Promise.all(\r\n    filesToBeDeleted.map(async (file) => {\r\n      // We don't run this part in tests\r\n      if (!process.env.JEST_WORKER_ID) {\r\n        const deletionURL = await file.getDeleteURL();\r\n        const deleteResponse = await fetch(deletionURL, headers);\r\n\r\n        if (!deleteResponse.ok) {\r\n          failedDeletionFileIDs.push(file.id);\r\n        }\r\n      }\r\n\r\n      // destroy file regardless of if the delete response is ok\r\n      await file.destroy();\r\n    }),\r\n  );\r\n\r\n  await getSequelize().transaction(async (transaction) => {\r\n    // Deleting messages where the user or linked slack user is the author\r\n    // and the message belongs to one of the orgs the user is in\r\n    // We don't check within the slack user's org as a slack user can be linked\r\n    // to multiple platform users\r\n    const threadIDsFromDeletedMessages = await getSequelize().query<{\r\n      threadID: UUID;\r\n    }>(\r\n      `\r\n        DELETE FROM cord.messages\r\n        WHERE \"sourceID\" = ANY($1)\r\n        AND \"orgID\" = ANY($2)\r\n        RETURNING \"threadID\";\r\n        `,\r\n      {\r\n        bind: [allUsers, orgIDsUserIsMemberOf],\r\n        transaction,\r\n        type: QueryTypes.SELECT,\r\n      },\r\n    );\r\n\r\n    const threadIDs = new Set(\r\n      threadIDsFromDeletedMessages.map((data) => data.threadID),\r\n    );\r\n\r\n    // Delete any threads that no longer have any messages\r\n    await getSequelize().query(\r\n      `\r\n      DELETE FROM cord.threads t\r\n      WHERE t.id = ANY ($1)\r\n      AND NOT EXISTS(\r\n        SELECT 1 FROM cord.messages\r\n        WHERE \"threadID\" = t.id\r\n        );\r\n    `,\r\n      { bind: [[...threadIDs]], transaction },\r\n    );\r\n\r\n    await userToBeDeleted.destroy({ transaction });\r\n  });\r\n\r\n  anonymousLogger().info('User deleted', {\r\n    platformApplicationID,\r\n    externalID,\r\n    usersDeleted: userToBeDeletedUserID,\r\n  });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'User deleted.',\r\n    userID: externalID,\r\n    failedDeletionFileIDs,\r\n  });\r\n}\r\nexport default forwardHandlerExceptionsToNext(deleteUserDataHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nasync function createNotificationHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const {\r\n    actor_id: actorExternalIDsnake,\r\n    actorID: actorExternalIDcamel,\r\n    recipient_id: recipientExternalIDsnake,\r\n    recipientID: recipientExternalIDcamel,\r\n    template,\r\n    url,\r\n    metadata,\r\n    type: _type,\r\n    extraClassnames,\r\n    iconUrl,\r\n    ...rest\r\n  } = validate.CreateNotificationVariables(req.body);\r\n\r\n  // Check that all properties in CreateNotificationVariables are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (actorExternalIDsnake) {\r\n    deprecated(\r\n      'snake:CreateNotificationHandler:actor_id',\r\n      platformApplicationID,\r\n    );\r\n  }\r\n\r\n  if (recipientExternalIDsnake) {\r\n    deprecated(\r\n      'snake:CreateNotificationHandler:recipient_id',\r\n      platformApplicationID,\r\n    );\r\n  }\r\n\r\n  const actorExternalID = actorExternalIDcamel ?? actorExternalIDsnake;\r\n  const recipientExternalID =\r\n    recipientExternalIDcamel ?? recipientExternalIDsnake;\r\n\r\n  if (!recipientExternalID) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: 'Missing recipientID',\r\n    });\r\n  }\r\n\r\n  actorExternalID && validateExternalID(actorExternalID, 'actor');\r\n  validateExternalID(recipientExternalID, 'recipient');\r\n\r\n  const [sender, recipient] = await Promise.all([\r\n    actorExternalID\r\n      ? await UserEntity.findOne({\r\n          where: {\r\n            externalID: actorExternalID,\r\n            platformApplicationID,\r\n          },\r\n        })\r\n      : null,\r\n    UserEntity.findOne({\r\n      where: {\r\n        externalID: recipientExternalID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n  ]);\r\n\r\n  if (req.body.actor_id && !sender) {\r\n    throw new ApiCallerError('invalid_user_id', {\r\n      message: `Invalid recipient user id: ${recipientExternalID}.`,\r\n    });\r\n  }\r\n\r\n  if (!recipient) {\r\n    throw new ApiCallerError('invalid_user_id', {\r\n      message: `Invalid recipient user id: ${recipientExternalID}.`,\r\n    });\r\n  }\r\n\r\n  if (!sender && template.search('{{ ?actor ?}}') !== -1) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'Invalid template: must contain {{actor}} variable',\r\n    });\r\n  }\r\n\r\n  const mutator = new NotificationMutator(Viewer.createAnonymousViewer());\r\n  const notif = await mutator.createExternal({\r\n    platformApplicationID,\r\n    recipientID: recipient.id,\r\n    senderID: sender?.id,\r\n    externalTemplate: template,\r\n    iconUrl,\r\n    externalURL: url,\r\n    extraClassnames: extraClassnames,\r\n    metadata: metadata,\r\n  });\r\n\r\n  // TODO(notifications): hook into existing \"outbound\" notif infrastructure to\r\n  // send a Slack message and email.\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Notification created.',\r\n    notificationID: notif.externalID,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createNotificationHandler);\r\n", "import freeEmailDomains from 'free-email-domains';\r\nimport type { Transaction } from 'sequelize';\r\nimport { QueryTypes } from 'sequelize';\r\nimport {\r\n  CORD_CUSTOMER_ID,\r\n  CORD_SELF_SERVE_SLACK_CHANNEL_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { ADMIN_ORIGIN } from 'common/const/Urls.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport Env from 'server/src/config/Env.ts';\r\nimport { makeCustomerName } from 'server/src/console/utils.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\nimport type { ConsoleUserMutator } from 'server/src/entity/user/ConsoleUserMutator.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport {\r\n  extractFromGACookies,\r\n  sendEventToGoogleAnalytics,\r\n} from 'server/src/util/google-analytics.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { parseEmailAddress } from 'server/src/email/utils.ts';\r\nimport type { FlagsUser } from 'server/src/featureflags/index.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport {\r\n  FREE_APP_LIMIT,\r\n  FREE_SEATS_LIMIT,\r\n  PRO_APP_LIMIT,\r\n  PRO_SEATS_LIMIT,\r\n} from 'common/const/Billing.ts';\r\n\r\nexport async function createNewCustomer({\r\n  email,\r\n  context,\r\n  signupCoupon,\r\n  consoleMutator,\r\n  user,\r\n  parentTransaction,\r\n}: {\r\n  email: string;\r\n  context: RequestContext;\r\n  signupCoupon?: string | null;\r\n  consoleMutator: ConsoleUserMutator;\r\n  user: ConsoleUserEntity;\r\n  parentTransaction?: Transaction;\r\n}) {\r\n  await getSequelize().transaction(\r\n    { transaction: parentTransaction },\r\n    async (transaction) => {\r\n      // Creating self serve customer\r\n      const customer = await CustomerEntity.create(\r\n        {\r\n          name: makeCustomerName(email),\r\n          type: 'sample', // Can only create sample customers from the console\r\n          signupCoupon,\r\n        },\r\n        { transaction },\r\n      );\r\n\r\n      context.logger.info(`New customer created by: ${user.idForLogging}`);\r\n\r\n      const flagUser = flagsUserFromContext(context);\r\n      const billingEnabled = await getTypedFeatureFlagValue(\r\n        FeatureFlags.SHOW_CONSOLE_LANDING_PAGE,\r\n        flagUser,\r\n      );\r\n\r\n      if (!billingEnabled) {\r\n        await ApplicationEntity.create(\r\n          {\r\n            name: 'sample-app-1',\r\n            environment: 'sample',\r\n            customerID: customer.id,\r\n          },\r\n          { transaction },\r\n        );\r\n      }\r\n\r\n      await consoleMutator.grantCustomerAccess(user, customer.id, transaction);\r\n\r\n      const eventMutator = new EventMutator(context.session);\r\n      transaction.afterCommit(async () => {\r\n        await eventMutator.createEvent({\r\n          eventNumber: null,\r\n          pageLoadID: null,\r\n          clientTimestamp: new Date(Date.now()),\r\n          installationID: null,\r\n          type: 'new-customer-self-serve',\r\n          payload: {\r\n            email: user.email,\r\n          },\r\n          metadata: {},\r\n          logLevel: 'info',\r\n        });\r\n\r\n        await sendMessageToCord(\r\n          `\uD83C\uDF35 New self serve customer ${ADMIN_ORIGIN}/customers/${customer.id} created by ${user.idForLogging}`,\r\n          CORD_SELF_SERVE_SLACK_CHANNEL_ID,\r\n          'selfserve',\r\n        );\r\n      });\r\n    },\r\n  );\r\n\r\n  const gaData = extractFromGACookies(context.session.ga);\r\n\r\n  if (gaData && Env.CORD_TIER === 'prod') {\r\n    await sendEventToGoogleAnalytics(\r\n      'customer_created_self_serve',\r\n      gaData.gaClientID,\r\n      gaData.gaSessionID,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function findCustomerIDsWithSameDomainConsoleUsers(\r\n  userEmail: string,\r\n): Promise<string[] | null> {\r\n  const emailAddress = parseEmailAddress(userEmail);\r\n\r\n  const emailDomain = emailAddress.domain;\r\n\r\n  if (freeEmailDomains.includes(emailDomain)) {\r\n    return null;\r\n  }\r\n\r\n  const customerIDsWithSameDomainConsoleUsers = await getSequelize().query<{\r\n    customerID: string;\r\n  }>(\r\n    `\r\n  SELECT DISTINCT \"customerID\"\r\n    FROM cord.console_users\r\n    WHERE SUBSTRING(email from '@(.*)$') = $1\r\n    AND \"customerID\" IS NOT NULL;\r\n  `,\r\n    {\r\n      bind: [emailDomain],\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n\r\n  return customerIDsWithSameDomainConsoleUsers.map(\r\n    ({ customerID }) => customerID,\r\n  );\r\n}\r\n\r\nexport async function logCustomerActionLimit({\r\n  customerID,\r\n  action,\r\n}: {\r\n  customerID: string;\r\n  action: 'create_application' | 'add_member';\r\n}) {\r\n  const flagsUser: FlagsUser = {\r\n    userID: 'anonymous',\r\n    platformApplicationID: 'console',\r\n    version: null,\r\n    customerID,\r\n  };\r\n  const billing_enabled_in_console = await getTypedFeatureFlagValue(\r\n    FeatureFlags.BILLING_ENABLED_IN_CONSOLE,\r\n    flagsUser,\r\n  );\r\n  if (!billing_enabled_in_console) {\r\n    return;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n  // if they are on scale we'll have to customise this per user, so for now they won't\r\n  // have any restrictions\r\n  if (\r\n    !customer ||\r\n    customer.pricingTier === 'scale' ||\r\n    customer.id === CORD_CUSTOMER_ID\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const customerPricingTier = customer.pricingTier;\r\n  // we do not downgrade pricing tiers automatically, so we won't have to account for that\r\n  // and all restrictions will be based on customer's original/current plan.\r\n  if (action === 'create_application') {\r\n    const applicationsCount = await ApplicationEntity.count({\r\n      where: { customerID },\r\n    });\r\n\r\n    const appLimit =\r\n      customerPricingTier === 'free' ? FREE_APP_LIMIT : PRO_APP_LIMIT;\r\n    if (applicationsCount > appLimit) {\r\n      await sendMessageToCord(\r\n        `\uD83D\uDCC8 Customer ${customer.name} ${ADMIN_ORIGIN}/customers/${customer.id} - has passed the maximum allowed applications (${applicationsCount}/${appLimit}) on their pricing tier (${customerPricingTier}).`,\r\n        CORD_SELF_SERVE_SLACK_CHANNEL_ID,\r\n        'selfserve',\r\n      );\r\n    }\r\n  }\r\n  if (action === 'add_member') {\r\n    const consoleUsersCount = await ConsoleUserEntity.count({\r\n      where: { customerID },\r\n    });\r\n\r\n    const consoleUsersLimit =\r\n      customerPricingTier === 'free' ? FREE_SEATS_LIMIT : PRO_SEATS_LIMIT;\r\n    if (consoleUsersCount > consoleUsersLimit) {\r\n      await sendMessageToCord(\r\n        `\uD83D\uDCC8 Customer ${customer.name} ${ADMIN_ORIGIN}/customers/${customer.id} - has passed the maximum allowed members (${consoleUsersCount}/${consoleUsersLimit}) on their pricing tier (${customerPricingTier}).`,\r\n        CORD_SELF_SERVE_SLACK_CHANNEL_ID,\r\n        'selfserve',\r\n      );\r\n    }\r\n  }\r\n}\r\n", "import freeEmailDomains from 'free-email-domains';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { capitalizeFirstLetter } from 'common/util/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport type { ConsoleUserLoader } from 'server/src/entity/user/ConsoleUserLoader.ts';\r\n\r\nexport async function userHasAccessToApplication(\r\n  viewer: Viewer,\r\n  application: UUID,\r\n  loader: ConsoleUserLoader,\r\n) {\r\n  const userEmail = viewer.developerUserID;\r\n  if (!userEmail) {\r\n    return false;\r\n  }\r\n  const user = await loader.loadUser(userEmail);\r\n  if (!user) {\r\n    return false;\r\n  }\r\n  const edge = await ApplicationEntity.findOne({\r\n    where: { id: application, customerID: user.customerID },\r\n  });\r\n  return !!edge;\r\n}\r\n\r\nexport async function consoleUserToCustomerID(\r\n  viewer: Viewer,\r\n  loader: ConsoleUserLoader,\r\n) {\r\n  const userEmail = viewer.developerUserID;\r\n  if (!userEmail) {\r\n    return null;\r\n  }\r\n  const user = await loader.loadUser(userEmail);\r\n  if (!user?.customerID) {\r\n    return null;\r\n  }\r\n  return user.customerID;\r\n}\r\n\r\nexport function makeCustomerName(email: string) {\r\n  const regex = /^([^@]+)@([^@.]+)\\.(.+)$/;\r\n  const matches = email.match(regex);\r\n\r\n  if (!matches) {\r\n    // Odd email...\r\n    return email;\r\n  }\r\n\r\n  // I.e. name/domain/tld in a case like rolo@cord.com\r\n  const [_, beforeAt, betweenAtAndFirstDot, afterFirstDot] = matches;\r\n\r\n  if (freeEmailDomains.includes(`${betweenAtAndFirstDot}.${afterFirstDot}`)) {\r\n    return beforeAt;\r\n  }\r\n\r\n  return capitalizeFirstLetter(betweenAtAndFirstDot);\r\n}\r\n", "export const PRO_PRODUCT_ID = 'pro';\r\nexport const PRO_APP_LIMIT = 5;\r\nexport const FREE_APP_LIMIT = 1;\r\nexport const PRO_SEATS_LIMIT = 5;\r\nexport const FREE_SEATS_LIMIT = 2;\r\nexport const PRO_MAU_LIMIT = 25000;\r\nexport const FREE_MAU_LIMIT = 5000;\r\n\r\nexport interface Addon {\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport const ADDONS = [\r\n  {\r\n    name: 'custom_s3_bucket',\r\n    description: 'Custom S3 Bucket',\r\n  },\r\n  {\r\n    name: 'custom_segment_write_key',\r\n    description: 'Custom Segment Write Key',\r\n  },\r\n  {\r\n    name: 'customer_support',\r\n    description: 'Direct Customer Support via Community',\r\n  },\r\n];\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { emailSettingsToDbData } from 'server/src/public/routes/platform/applications/util.ts';\r\nimport { logCustomerActionLimit } from 'server/src/util/selfServe.ts';\r\n\r\nasync function CreateApplicationHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const {\r\n    name,\r\n    iconURL,\r\n    eventWebhookURL,\r\n    redirectURI,\r\n    emailSettings,\r\n    ...rest\r\n  } = validate.CreateApplicationVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const application = await ApplicationEntity.create({\r\n    name,\r\n    iconURL,\r\n    customerID,\r\n    eventWebhookURL,\r\n    customEmailTemplate: emailSettings\r\n      ? emailSettingsToDbData(emailSettings, name)\r\n      : undefined,\r\n    enableEmailNotifications: emailSettings?.enableEmailNotifications,\r\n    redirectURI,\r\n  });\r\n\r\n  await logCustomerActionLimit({\r\n    customerID,\r\n    action: 'create_application',\r\n  });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Project created',\r\n    applicationID: application.id,\r\n    projectID: application.id,\r\n    secret: application.sharedSecret,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(CreateApplicationHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport type { Sequelize, Transaction } from 'sequelize';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport {\r\n  getThreadLocation,\r\n  loadThread,\r\n} from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadParticipantEntity } from 'server/src/entity/thread_participant/ThreadParticipantEntity.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishEventToWebhook } from 'server/src/webhook/webhook.ts';\r\nimport type { PubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport {\r\n  removeAllTypingUsers,\r\n  setUserTyping,\r\n} from 'server/src/presence/typing.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { SlackMirroredSupportThreadEntity } from 'server/src/entity/slack_mirrored_support_thread/SlackMirroredSupportThreadEntity.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport {\r\n  MessageActionIconURLs,\r\n  MessageActionTranslationKeys,\r\n} from 'common/const/MessageActions.ts';\r\nimport { getActionMessageContent } from 'server/src/message/util/getActionMessageContent.ts';\r\nimport type { ServerThreadSeenUser, ServerUpdateThread } from '@cord-sdk/types';\r\nimport { addGroupIDIfOrgIDExists } from 'server/src/public/routes/platform/addGroupIDWhereOrgIDExists.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { locationEqual, metadataEqual } from 'common/types/index.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { createThreadActionNotifications } from 'server/src/entity/thread/update_thread_tasks/createThreadActionNotifications.ts';\r\n\r\nasync function injectResolvedMessage(\r\n  thread: ThreadEntity,\r\n  resolvedTimestamp: Date | null | undefined,\r\n  originalResolvedTimestamp: Date | null,\r\n  externalUserID: string | undefined,\r\n  platformApplicationID: string | undefined,\r\n  transaction: Transaction,\r\n): Promise<{ message: MessageEntity; viewer: Viewer } | null> {\r\n  if (resolvedTimestamp === undefined) {\r\n    // We aren't changing the resolved status.\r\n    return null;\r\n  }\r\n\r\n  if (\r\n    (resolvedTimestamp && originalResolvedTimestamp) ||\r\n    (!resolvedTimestamp && !originalResolvedTimestamp)\r\n  ) {\r\n    // We are only updating the resolvedTimestamp, not actually changing the\r\n    // resolved status.\r\n    return null;\r\n  }\r\n\r\n  if (externalUserID === undefined) {\r\n    // There isn't a user we've been instructed to post the update as.\r\n    return null;\r\n  }\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: {\r\n      externalID: externalUserID,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found', {\r\n      message: `Unknown user ${externalUserID}`,\r\n    });\r\n  }\r\n\r\n  const org = await OrgEntity.findByPk(thread.orgID);\r\n  if (!org) {\r\n    // (Should never happen!)\r\n    throw new Error(`Somehow cannot find org for thread ${thread.id}`);\r\n  }\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  });\r\n\r\n  const loaders = await getNewLoaders(viewer);\r\n\r\n  const actionType = resolvedTimestamp\r\n    ? 'thread_resolved'\r\n    : 'thread_unresolved';\r\n\r\n  const message = await new MessageMutator(viewer, loaders).createMessage(\r\n    {\r\n      id: uuid(),\r\n      thread,\r\n      content: getActionMessageContent(actionType, user),\r\n      url: null,\r\n      iconURL: MessageActionIconURLs[actionType],\r\n      translationKey: MessageActionTranslationKeys[actionType],\r\n      type: 'action_message',\r\n    },\r\n    transaction,\r\n  );\r\n\r\n  const threadParticipantMutator = new ThreadParticipantMutator(\r\n    viewer,\r\n    loaders,\r\n  );\r\n  await threadParticipantMutator.markThreadNewlyActiveForOtherUsers(\r\n    thread.id,\r\n    message.id,\r\n    transaction,\r\n  );\r\n\r\n  return { message, viewer };\r\n}\r\n\r\nasync function getOrgID(\r\n  platformApplicationID: string,\r\n  externalOrgID: string | undefined,\r\n) {\r\n  if (!externalOrgID) {\r\n    return undefined;\r\n  }\r\n  const org = await OrgEntity.findOne({\r\n    where: { platformApplicationID, externalID: externalOrgID },\r\n  });\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('organization_not_found');\r\n  }\r\n\r\n  return org.id;\r\n}\r\n\r\nasync function updateThreadHandler(req: Request, res: Response) {\r\n  const reqBodyWithGroupIDIfOrgIDExist = addGroupIDIfOrgIDExists(\r\n    req.body,\r\n    req.appID,\r\n  );\r\n\r\n  const vars = validate.UpdateThreadVariables(reqBodyWithGroupIDIfOrgIDExist);\r\n\r\n  await updateThread({\r\n    ...vars,\r\n    platformApplicationID: req.appID,\r\n    threadID: req.params.threadID,\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated thread ${req.params.threadID}`,\r\n  });\r\n}\r\n\r\nexport async function updateThread({\r\n  platformApplicationID,\r\n  threadID,\r\n  id: newExternalID,\r\n  groupID: externalOrgID,\r\n  name,\r\n  resolvedTimestamp: resolvedTimestampInput,\r\n  resolved: resolvedInput,\r\n  location: locationInput,\r\n  userID: externalUserID,\r\n  url,\r\n  metadata,\r\n  extraClassnames,\r\n  typing: typingUserIDs,\r\n  organizationID: _organizationID = externalOrgID,\r\n  seenByUsers: seenByUsersInput,\r\n  addSubscribers,\r\n  removeSubscribers,\r\n  ...rest\r\n}: ServerUpdateThread & {\r\n  threadID: string;\r\n  platformApplicationID: string | undefined;\r\n}) {\r\n  // Make sure we actually covered everything in ServerUpdateThread.\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const thread = await loadThread(platformApplicationID, threadID);\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  if (newExternalID) {\r\n    if (!isValidExternalID(newExternalID)) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `${newExternalID} is not a valid identifier: https://docs.cord.com/reference/identifiers`,\r\n      });\r\n    }\r\n\r\n    const dupeThread = await loadThread(platformApplicationID, newExternalID);\r\n    if (dupeThread) {\r\n      throw new ApiCallerError('thread_already_exists', {\r\n        message: `Cannot change ID to ${newExternalID} since a thread with that ID already exists`,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (addSubscribers && removeSubscribers) {\r\n    for (const subscriberToAdd of addSubscribers) {\r\n      for (const subscriberToRemove of removeSubscribers) {\r\n        if (subscriberToAdd === subscriberToRemove) {\r\n          throw new ApiCallerError('invalid_field', {\r\n            message: 'Adding and removing the same subscriber is invalid',\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const orgID = await getOrgID(platformApplicationID, externalOrgID);\r\n\r\n  // This variable follows the sequelize format:\r\n  // \"undefined\" -> \"do not change what is currently in the db\",\r\n  // \"null\" -> \"set to null\",\r\n  // some date -> \"set to this date\"\r\n  let resolvedTimestamp: Date | null | undefined = undefined;\r\n  if (resolvedTimestampInput !== undefined) {\r\n    resolvedTimestamp = resolvedTimestampInput;\r\n  } else if (resolvedInput !== undefined) {\r\n    resolvedTimestamp = resolvedInput ? new Date() : null;\r\n  }\r\n\r\n  const originalResolvedTimestamp = thread.resolvedTimestamp;\r\n  const originalPageContextHash = thread.pageContextHash;\r\n  const originalLocation = await getThreadLocation(thread);\r\n  const originalMetadata = thread.metadata;\r\n  const originalOrgID = thread.orgID;\r\n  const originalOrgViewer = Viewer.createOrgViewer(\r\n    thread.orgID,\r\n    platformApplicationID,\r\n  );\r\n  const originalOrgViewerLoaders = await getNewLoaders(originalOrgViewer);\r\n  const originalSubscribers = new Set(\r\n    await originalOrgViewerLoaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  );\r\n\r\n  // The orgID is in the page, so we need to change the pageContextHash not only\r\n  // if the location changes but also if the orgID changes.\r\n  let pageContextHash: string | undefined = undefined;\r\n  if (orgID || locationInput) {\r\n    const orgViewer = Viewer.createOrgViewer(orgID ?? thread.orgID);\r\n    const location = locationInput ?? originalLocation;\r\n    pageContextHash = await new PageMutator(orgViewer).createPageIfNotExists({\r\n      providerID: null,\r\n      data: location,\r\n    });\r\n  }\r\n\r\n  const sequelize = getSequelize();\r\n  const [updatedThread, _otherChangeOrgUpdates, injectedMessage] =\r\n    await sequelize.transaction(async (transaction) => {\r\n      return await Promise.all([\r\n        thread.update(\r\n          {\r\n            externalID: newExternalID,\r\n            orgID,\r\n            name,\r\n            resolvedTimestamp,\r\n            pageContextHash,\r\n            url,\r\n            metadata,\r\n            extraClassnames: extraClassnames ?? undefined,\r\n          },\r\n          { transaction },\r\n        ),\r\n        // Update some denormalized places -- within the same transaction since we\r\n        // may need to temporarily break foreign key constraints.\r\n        orgID\r\n          ? Promise.all([\r\n              MessageEntity.update(\r\n                { orgID },\r\n                { where: { threadID: thread.id }, transaction },\r\n              ),\r\n              ThreadParticipantEntity.update(\r\n                { orgID },\r\n                { where: { threadID: thread.id }, transaction },\r\n              ),\r\n              EmailOutboundNotificationEntity.update(\r\n                { threadOrgID: orgID },\r\n                { where: { threadID: thread.id }, transaction },\r\n              ),\r\n              SlackMirroredThreadEntity.update(\r\n                { threadOrgID: orgID },\r\n                { where: { threadID: thread.id }, transaction },\r\n              ),\r\n              SlackMirroredSupportThreadEntity.update(\r\n                { threadOrgID: orgID },\r\n                { where: { threadID: thread.id }, transaction },\r\n              ),\r\n            ])\r\n          : null,\r\n        injectResolvedMessage(\r\n          thread,\r\n          resolvedTimestamp,\r\n          originalResolvedTimestamp,\r\n          externalUserID,\r\n          platformApplicationID,\r\n          transaction,\r\n        ),\r\n      ]);\r\n    });\r\n\r\n  if (addSubscribers || removeSubscribers) {\r\n    await updateSubscribers(\r\n      sequelize,\r\n      addSubscribers,\r\n      removeSubscribers,\r\n      thread,\r\n    );\r\n  }\r\n\r\n  if (typingUserIDs) {\r\n    await updateTypingUsers(sequelize, typingUserIDs, thread);\r\n  }\r\n\r\n  if (seenByUsersInput) {\r\n    await updateSeenByUsers(sequelize, seenByUsersInput, thread);\r\n  }\r\n\r\n  const newSubscribers = new Set(\r\n    await originalOrgViewerLoaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  );\r\n\r\n  const removed = [...originalSubscribers].filter(\r\n    (s) => !newSubscribers.has(s),\r\n  );\r\n  const added = [...newSubscribers].filter((s) => !originalSubscribers.has(s));\r\n\r\n  const filterablePropertiesPayload: PubSubEvent<'thread-filterable-properties-updated'>['payload'] =\r\n    {\r\n      threadID: thread.id,\r\n      changes: {\r\n        ...(locationInput &&\r\n          !locationEqual(originalLocation, locationInput) && {\r\n            location: { old: originalLocation, new: locationInput },\r\n          }),\r\n        ...(!!originalResolvedTimestamp !== !!thread.resolvedTimestamp && {\r\n          resolved: {\r\n            old: !!originalResolvedTimestamp,\r\n            new: !!thread.resolvedTimestamp,\r\n          },\r\n        }),\r\n        ...(metadata &&\r\n          !metadataEqual(originalMetadata, thread.metadata) && {\r\n            metadata: { old: originalMetadata, new: thread.metadata },\r\n          }),\r\n        ...(originalOrgID !== thread.orgID && {\r\n          orgID: { old: originalOrgID, new: thread.orgID },\r\n        }),\r\n        ...((added.length > 0 || removed.length > 0) && {\r\n          subscribers: { added, removed },\r\n        }),\r\n      },\r\n    };\r\n\r\n  const filterablePropertiesUpdated =\r\n    Object.keys(filterablePropertiesPayload.changes).length > 0;\r\n\r\n  const pubSubEvents = [\r\n    publishPubSubEvent('annotations-on-page-updated', {\r\n      pageContextHash: thread.pageContextHash,\r\n      orgID: thread.orgID,\r\n    }),\r\n    pageContextHash\r\n      ? publishPubSubEvent('annotations-on-page-updated', {\r\n          pageContextHash: originalPageContextHash,\r\n          orgID: thread.orgID,\r\n        })\r\n      : null,\r\n    publishPubSubEvent('thread-properties-updated', {\r\n      threadID: thread.id,\r\n    }),\r\n    filterablePropertiesUpdated &&\r\n      publishPubSubEvent(\r\n        'thread-filterable-properties-updated',\r\n        { orgID: thread.orgID },\r\n        filterablePropertiesPayload,\r\n      ),\r\n  ];\r\n  if (originalOrgID !== thread.orgID) {\r\n    pubSubEvents.push(\r\n      publishPubSubEvent(\r\n        'thread-filterable-properties-updated',\r\n        { orgID: originalOrgID },\r\n        filterablePropertiesPayload,\r\n      ),\r\n    );\r\n  }\r\n  backgroundPromise(Promise.all(pubSubEvents));\r\n\r\n  if (injectedMessage) {\r\n    const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n    if (!app) {\r\n      // (Should never happen!)\r\n      throw new Error(`Somehow cannot find app ${platformApplicationID}`);\r\n    }\r\n\r\n    const { message, viewer } = injectedMessage;\r\n    const context = await contextWithSession(\r\n      { viewer },\r\n      getSequelize(),\r\n      null,\r\n      null,\r\n    );\r\n    backgroundPromise(\r\n      Promise.all([\r\n        publishPubSubEvent(\r\n          'thread-message-added',\r\n          { threadID: message.threadID },\r\n          { messageID: message.id },\r\n        ),\r\n        publishEventToWebhook(app, {\r\n          type: 'thread-message-added',\r\n          threadID: thread.id,\r\n          messageID: message.id,\r\n        }),\r\n        //TODO: fix this to not requre the viewer - thread action messages should\r\n        // not be tied to a message (in this case the resolved action message) and\r\n        // should just be passed through if it exists but created eitherway\r\n        createThreadActionNotifications({\r\n          context,\r\n          threadID: thread.id,\r\n          messageID: message.id,\r\n          threadActionType: updatedThread.resolvedTimestamp\r\n            ? 'resolve'\r\n            : 'unresolve',\r\n        }),\r\n      ]),\r\n    );\r\n  }\r\n}\r\n\r\nasync function updateSubscribers(\r\n  sequelize: Sequelize,\r\n  addSubscribers: string[] | undefined,\r\n  removeSubscribers: string[] | undefined,\r\n  thread: ThreadEntity,\r\n) {\r\n  await sequelize.transaction(async (transaction) => {\r\n    const orgViewer = Viewer.createOrgViewer(thread.orgID);\r\n    const loaders = await getNewLoaders(orgViewer);\r\n    const mutator = new ThreadParticipantMutator(orgViewer, loaders);\r\n    if (addSubscribers && addSubscribers.length > 0) {\r\n      const orgMembers = await getOrgMembersFromExternalUserIDs(\r\n        addSubscribers,\r\n        thread,\r\n        transaction,\r\n      );\r\n      await mutator.subscribeUsersToThread(\r\n        thread.id,\r\n        orgMembers.map((ome) => ome.userID),\r\n        undefined,\r\n        transaction,\r\n      );\r\n    }\r\n    if (removeSubscribers && removeSubscribers.length > 0) {\r\n      const orgMembers = await getOrgMembersFromExternalUserIDs(\r\n        removeSubscribers,\r\n        thread,\r\n        transaction,\r\n      );\r\n      await mutator.unsubscribeUsersFromThread(\r\n        thread.id,\r\n        orgMembers.map((ome) => ome.userID),\r\n        transaction,\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nasync function updateTypingUsers(\r\n  sequelize: Sequelize,\r\n  typingUserIDs: string[],\r\n  thread: ThreadEntity,\r\n) {\r\n  const orgViewer = Viewer.createOrgViewer(thread.orgID);\r\n  const logger = new Logger(orgViewer);\r\n\r\n  // We clear any typing indicators still active\r\n  if (typingUserIDs.length === 0) {\r\n    // Clear all typing users in a thread by removing the redis kay\r\n    await removeAllTypingUsers(thread.id);\r\n  } else {\r\n    await sequelize.transaction(async (transaction) => {\r\n      const orgMembers = await getOrgMembersFromExternalUserIDs(\r\n        typingUserIDs,\r\n        thread,\r\n        transaction,\r\n      );\r\n\r\n      await Promise.all(\r\n        orgMembers.map(({ userID }) =>\r\n          setUserTyping(logger, thread.id, userID, true),\r\n        ),\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nasync function updateSeenByUsers(\r\n  sequelize: Sequelize,\r\n  seenByUsersIDs: ServerThreadSeenUser[],\r\n  thread: ThreadEntity,\r\n) {\r\n  if (seenByUsersIDs.length === 0) {\r\n    return;\r\n  }\r\n\r\n  await sequelize.transaction(async (transaction) => {\r\n    const orgMembers = await getOrgMembersFromExternalUserIDs(\r\n      seenByUsersIDs.map((i) => i.userID),\r\n      thread,\r\n      transaction,\r\n    );\r\n\r\n    const users = await UserEntity.findAll({\r\n      where: { id: [...orgMembers.map((u) => u.userID)] },\r\n      transaction,\r\n    });\r\n\r\n    const org = await OrgEntity.findByPk(thread.orgID, { transaction });\r\n    if (!org) {\r\n      // (Should never happen!)\r\n      throw new Error(`Somehow cannot find org for thread ${thread.id}`);\r\n    }\r\n\r\n    const firstMessage = await MessageEntity.findOne({\r\n      where: { threadID: thread.id },\r\n      order: [['timestamp', 'ASC']],\r\n      transaction,\r\n    });\r\n    if (!firstMessage) {\r\n      throw new Error('Could not find first message in thread');\r\n    }\r\n\r\n    await Promise.all(\r\n      users.map(async (user) => {\r\n        const viewer = await Viewer.createLoggedInPlatformViewer({\r\n          user,\r\n          org,\r\n        });\r\n\r\n        const loaders = await getNewLoaders(viewer);\r\n        const threadParticipantMutator = new ThreadParticipantMutator(\r\n          viewer,\r\n          loaders,\r\n        );\r\n\r\n        const userData = seenByUsersIDs.find(\r\n          (i) => i.userID === user.externalID,\r\n        );\r\n\r\n        if (userData?.seen) {\r\n          await threadParticipantMutator.markThreadSeen({\r\n            threadID: thread.id,\r\n          });\r\n        } else {\r\n          await threadParticipantMutator.markThreadUnseenFromMessage({\r\n            threadID: thread.id,\r\n            messageID: firstMessage.id,\r\n            transaction,\r\n          });\r\n        }\r\n      }),\r\n    );\r\n  });\r\n}\r\n\r\nasync function getOrgMembersFromExternalUserIDs(\r\n  userIDs: string[],\r\n  thread: ThreadEntity,\r\n  transaction: Transaction,\r\n) {\r\n  const users = await UserEntity.findAll({\r\n    where: {\r\n      externalID: userIDs,\r\n      platformApplicationID: thread.platformApplicationID,\r\n    },\r\n    transaction,\r\n  });\r\n\r\n  if (users.length === 0) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  const internalUserIDs = new Set<string>(users.map((user) => user.id));\r\n\r\n  // Check that users exist in the org that the thread belongs to\r\n  return await OrgMembersEntity.findAll({\r\n    where: { userID: [...internalUserIDs], orgID: thread.orgID },\r\n    transaction,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateThreadHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { loadThread } from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nasync function deleteThreadHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const thread = await loadThread(platformApplicationID, req.params.threadID);\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  await thread.destroy();\r\n\r\n  backgroundPromise(\r\n    Promise.all([\r\n      publishPubSubEvent(\r\n        'thread-deleted',\r\n        { threadID: thread.id },\r\n        { threadID: thread.id },\r\n      ),\r\n      publishPubSubEvent(\r\n        'page-thread-deleted',\r\n        { orgID: thread.orgID },\r\n        { threadID: thread.id },\r\n      ),\r\n    ]),\r\n  );\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\uD83D\uDC80 You successfully deleted thread ${req.params.threadID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(deleteThreadHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { loadThread } from 'server/src/public/routes/platform/threads/GetThreadHandler.ts';\r\nimport { loadThreadMessage } from 'server/src/public/routes/platform/messages/util.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nasync function DeleteThreadMessageHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalThreadID = req.params.threadID;\r\n  const thread = await loadThread(platformApplicationID, externalThreadID);\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  const externalMessageID = req.params.messageID;\r\n  const message = await loadThreadMessage(thread.id, externalMessageID);\r\n\r\n  if (!message) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  await message.destroy();\r\n\r\n  backgroundPromise(\r\n    publishPubSubEvent(\r\n      'thread-message-removed',\r\n      { threadID: thread.id },\r\n      { messageID: message.id },\r\n    ),\r\n  );\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\uD83D\uDC80 You successfully deleted message ${req.params.messageID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(DeleteThreadMessageHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { CoreThreadData } from '@cord-sdk/types';\r\n\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport {\r\n  validateFilter,\r\n  validateLimit,\r\n  validatePaginationToken,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\nimport { getUsersTyping } from 'server/src/presence/typing.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\n\r\nconst DEFAULT_LIMIT = 1000;\r\nexport interface ListThreadsPaginationToken {\r\n  externalID: string;\r\n  nextCursorTimestamp: string;\r\n}\r\n\r\nfunction encodeToken(token: ListThreadsPaginationToken): string {\r\n  return btoa(JSON.stringify(token));\r\n}\r\n\r\nasync function listThreadsHandler(req: Request, res: Response) {\r\n  const results = await listThreads(req);\r\n  return res.status(200).json(results);\r\n}\r\n\r\nasync function loadTypingUsers(threadIDs: UUID[]) {\r\n  const typingUserByThread = await Promise.all(\r\n    threadIDs.map(\r\n      async (threadID) => [threadID, await getUsersTyping(threadID)] as const,\r\n    ),\r\n  );\r\n  const allUserObjects = await UserEntity.findAll({\r\n    where: { id: [...new Set(typingUserByThread.flatMap((tubt) => tubt[1]))] },\r\n  });\r\n  const usersByID = new Map(allUserObjects.map((u) => [u.id, u.externalID]));\r\n  return new Map(\r\n    typingUserByThread.map((tubt) => [\r\n      tubt[0],\r\n      tubt[1].map((id) => usersByID.get(id)).filter(isDefined),\r\n    ]),\r\n  );\r\n}\r\n\r\nexport async function listThreads(req: Request) {\r\n  const {\r\n    bindVariables,\r\n    countBindVariables,\r\n    locationFilter,\r\n    filters,\r\n    cursor,\r\n    resultsLimit,\r\n    limitQuery,\r\n  } = await parseThreadsRequest(req);\r\n\r\n  /*\r\nThis is a single query that fetches all of the data we return for the \r\n/v1/threads endpoint.  It does this instead of fetching all the ThreadEntities\r\nand then doing a query for Org, Page, Message, and ThreadParticipant each for each thread.\r\nThis enables us to gather all data in a single query.\r\n\r\nWe select all of the threads which belong to the `platformApplicationID`. That is then joined\r\nwith the `orgs` table to get the `organizationID` to which the thread belongs.  We similarly join\r\nwith the `pages` table to get `location` information.  We join on the `messages` table to get\r\n`count` and also to get the `lastUpdated` time for the thread. The messages table is a LEFT JOIN\r\nbecause it is possible that a thread exists without any messages in it. We then join with the\r\nmessages table again to find the external IDs of the people who replied to the thread. From the\r\nmessages table, we sort by timestamp then remove the first message by excluding index 1. This is\r\ndone because we don't want to include the author of the first message in the replying user IDs. \r\nA LEFT JOIN is used for the same reason. The last join is on `thread_participants` to get the \r\n`participants` and `subscribers` data.\r\nIt is again a LEFT JOIN for the same reason above.  The entire query is \r\nsorted by the `lastUpdated` time we computed so that users can see their most recent threads first.\r\n*/\r\n  const data = await getSequelize().query<\r\n    Omit<CoreThreadData, 'typing' | 'groupID'> & {\r\n      internalID: UUID;\r\n      nextCursorTimestamp: string;\r\n    }\r\n  >(\r\n    `\r\nSELECT\r\n    t.id as \"internalID\",\r\n    t.\"externalID\" as id,\r\n    o.\"externalID\" as \"organizationID\",\r\n    COALESCE(mc.count, 0)::INTEGER as total,\r\n    COALESCE(mc.userMessagesCount, 0)::INTEGER as \"userMessages\",\r\n    COALESCE(mc.actionMessagesCount, 0)::INTEGER as \"actionMessages\",\r\n    COALESCE(mc.deletedMessagesCount, 0)::INTEGER as \"deletedMessages\",\r\n    CASE WHEN t.\"resolvedTimestamp\" IS NULL THEN FALSE ELSE TRUE END as resolved,\r\n    t.\"resolvedTimestamp\",\r\n    TO_CHAR(COALESCE(mc.\"lastCreated\", t.\"createdTimestamp\"), 'YYYY-MM-DD HH24:MI:SS.US') as \"nextCursorTimestamp\",\r\n    COALESCE(tps.participants, ARRAY[]::json[]) as participants,\r\n    COALESCE(tps.subscribers, ARRAY[]::text[]) as subscribers,\r\n    COALESCE(mm.mentioned, ARRAY[]::text[]) AS mentioned,\r\n    COALESCE(rs.repliers, ARRAY[]::text[]) as repliers,\r\n    COALESCE(rs.\"actionMessageRepliers\", ARRAY[]::text[]) as \"actionMessageRepliers\",\r\n    t.name,\r\n    t.url,\r\n    p.\"contextData\" as location,\r\n    t.metadata\r\nFROM threads t\r\nINNER JOIN orgs o ON t.\"orgID\" = o.id\r\nINNER JOIN pages p ON p.\"contextHash\" = t.\"pageContextHash\" AND p.\"orgID\" = t.\"orgID\" ${locationFilter}\r\nLEFT JOIN (\r\n    SELECT \r\n        m.\"threadID\" as id, \r\n        COUNT (*), \r\n        SUM(CASE WHEN m.\"type\" = 'user_message' AND m.\"deletedTimestamp\" IS NULL THEN 1 ELSE 0 END) as userMessagesCount,\r\n        SUM(CASE WHEN m.\"type\" = 'action_message' AND m.\"deletedTimestamp\" IS NULL THEN 1 ELSE 0 END) as actionMessagesCount,\r\n        SUM(CASE WHEN m.\"deletedTimestamp\" IS NOT NULL THEN 1 ELSE 0 END) as deletedMessagesCount,\r\n        MAX(m.timestamp) as \"lastCreated\",\r\n        MIN(m.timestamp) as \"firstCreated\"\r\n    FROM messages m\r\n    WHERE m.\"platformApplicationID\" = $1\r\n    GROUP BY m.\"threadID\"\r\n) as mc ON mc.id = t.id\r\nLEFT JOIN (\r\n    SELECT\r\n        tp.\"threadID\" as id,\r\n        array_agg(json_build_object('lastSeenTimestamp', tp.\"lastSeenTimestamp\", 'userID', u.\"externalID\")) AS participants,\r\n        array_agg(DISTINCT u.\"externalID\") FILTER (WHERE tp.subscribed) AS subscribers\r\n        FROM thread_participants tp\r\n    INNER JOIN users u on tp.\"userID\" = u.id\r\n    INNER JOIN orgs o on tp.\"orgID\" = o.id\r\n    WHERE o.\"platformApplicationID\" = $1\r\n    GROUP BY tp.\"threadID\"\r\n) as tps ON tps.id = t.id\r\nLEFT JOIN (\r\n  SELECT\r\n    \"threadID\" as id,\r\n    array_agg(DISTINCT \"externalID\") FILTER (WHERE type = 'user_message') AS repliers,\r\n    array_agg(DISTINCT \"externalID\") FILTER (WHERE type = 'action_message') AS \"actionMessageRepliers\" \r\n  FROM (\r\n    SELECT\r\n      m.\"threadID\",\r\n      m.\"type\",\r\n      u.\"externalID\",\r\n      m.\"deletedTimestamp\",\r\n      ROW_NUMBER() OVER (PARTITION BY m.\"threadID\" ORDER BY m.\"timestamp\") AS sorted_message_idx\r\n    FROM messages m\r\n    INNER JOIN users u ON m.\"sourceID\" = u.id\r\n    WHERE m.\"platformApplicationID\" = $1\r\n  ) as sub\r\n  WHERE sorted_message_idx > 1\r\n  AND \"deletedTimestamp\" IS NULL\r\n  GROUP BY \"threadID\"\r\n) as rs ON rs.id = t.id\r\nLEFT JOIN (\r\n  SELECT\r\n    m.\"threadID\" AS id,\r\n    array_agg(DISTINCT u.\"externalID\") AS mentioned\r\n  FROM messages m\r\n    INNER JOIN message_mentions mm ON (m.id = mm.\"messageID\")\r\n    INNER JOIN users u ON (u.id = mm.\"userID\")\r\n  WHERE m.\"platformApplicationID\" = $1\r\n  GROUP BY m.\"threadID\"\r\n) as mm ON mm.id = t.id\r\nWHERE t.\"platformApplicationID\" = $1 \r\n${filters.join(' ')}\r\n${cursor}\r\nORDER BY COALESCE(mc.\"lastCreated\", t.\"createdTimestamp\") DESC, t.\"externalID\" ASC\r\n${limitQuery}\r\n`,\r\n    {\r\n      bind: bindVariables,\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n\r\n  const lastThread = data.length === 0 ? null : data[data.length - 1];\r\n  const returnToken =\r\n    data.length === resultsLimit && lastThread\r\n      ? encodeToken({\r\n          externalID: lastThread.id,\r\n          nextCursorTimestamp: lastThread.nextCursorTimestamp,\r\n        })\r\n      : null;\r\n\r\n  const typingUsersByThread = await loadTypingUsers(\r\n    data.map((t) => t.internalID),\r\n  );\r\n\r\n  const results: CoreThreadData[] = data.map(\r\n    ({ internalID, nextCursorTimestamp: _, ...rest }) => ({\r\n      ...rest,\r\n      groupID: rest.organizationID,\r\n      typing: typingUsersByThread.get(internalID) ?? [],\r\n    }),\r\n  );\r\n\r\n  const threadsTotal = await getSequelize().query<{ count: number }>(\r\n    `\r\n  SELECT COUNT(t.id)::integer FROM threads t\r\n  INNER JOIN orgs o ON t.\"orgID\" = o.id\r\n  INNER JOIN pages p ON p.\"contextHash\" = t.\"pageContextHash\" AND p.\"orgID\" = t.\"orgID\" ${locationFilter}\r\n  LEFT JOIN (\r\n    SELECT\r\n          m.\"threadID\" as id,\r\n          COUNT (*),\r\n          MAX(m.timestamp) as \"lastCreated\",\r\n          MIN(m.timestamp) as \"firstCreated\"\r\n      FROM messages m\r\n      GROUP BY m.\"threadID\"\r\n  ) as mc ON mc.id = t.id\r\n  WHERE t.\"platformApplicationID\" = $1\r\n  ${filters.join(' ')}\r\n  `,\r\n    {\r\n      bind: countBindVariables,\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n\r\n  const paginatedResults = {\r\n    threads: results,\r\n    pagination: {\r\n      token: returnToken,\r\n      total: threadsTotal[0].count,\r\n    },\r\n  };\r\n  return paginatedResults;\r\n}\r\n\r\nasync function parseThreadsRequest(req: Request) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const {\r\n    location,\r\n    metadata,\r\n    firstMessageTimestamp,\r\n    mostRecentMessageTimestamp,\r\n    groupID,\r\n    resolvedStatus,\r\n  } = validateFilter(req.query, {\r\n    location: true,\r\n    metadata: true,\r\n    firstMessageTimestamp: true,\r\n    mostRecentMessageTimestamp: true,\r\n    groupID: true,\r\n    authorID: false,\r\n    resolvedStatus: true,\r\n    viewer: false,\r\n  });\r\n  const { limit, token } = req.query;\r\n  const decodedToken =\r\n    token &&\r\n    validatePaginationToken({\r\n      token,\r\n      endpoint: 'threads',\r\n    });\r\n\r\n  const resultsLimit = validateLimit(limit, DEFAULT_LIMIT);\r\n  const bindVariables: (string | Date | number)[] = [platformApplicationID];\r\n  const filters = [];\r\n  let cursor = '';\r\n  let locationFilter = '';\r\n\r\n  if (groupID) {\r\n    const orgEntity = await OrgEntity.findOne({\r\n      where: { externalID: groupID, platformApplicationID },\r\n    });\r\n\r\n    if (!orgEntity) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n\r\n    bindVariables.push(orgEntity.id);\r\n    filters.push(`AND t.\"orgID\" = $${bindVariables.length}`);\r\n  }\r\n  if (location) {\r\n    bindVariables.push(JSON.stringify(location.value));\r\n    locationFilter = `AND p.\"contextData\" ${\r\n      location.partialMatch ? '@>' : '='\r\n    } $${bindVariables.length}::jsonb`;\r\n  }\r\n  if (metadata) {\r\n    bindVariables.push(JSON.stringify(metadata));\r\n    filters.push(`AND t.metadata @> $${bindVariables.length}::jsonb`);\r\n  }\r\n  if (firstMessageTimestamp) {\r\n    if (firstMessageTimestamp.from) {\r\n      bindVariables.push(firstMessageTimestamp.from);\r\n      filters.push(\r\n        `AND COALESCE(mc.\"firstCreated\", t.\"createdTimestamp\") >= $${bindVariables.length}::timestamp`,\r\n      );\r\n    }\r\n    if (firstMessageTimestamp.to) {\r\n      bindVariables.push(firstMessageTimestamp.to);\r\n      filters.push(\r\n        `AND COALESCE(mc.\"firstCreated\", t.\"createdTimestamp\") <= $${bindVariables.length}::timestamp`,\r\n      );\r\n    }\r\n  }\r\n  if (mostRecentMessageTimestamp) {\r\n    if (mostRecentMessageTimestamp.from) {\r\n      bindVariables.push(mostRecentMessageTimestamp.from);\r\n      filters.push(\r\n        `AND mc.\"lastCreated\" >= $${bindVariables.length}::timestamp`,\r\n      );\r\n    }\r\n    if (mostRecentMessageTimestamp.to) {\r\n      bindVariables.push(mostRecentMessageTimestamp.to);\r\n      filters.push(\r\n        `AND mc.\"lastCreated\" <= $${bindVariables.length}::timestamp`,\r\n      );\r\n    }\r\n  }\r\n  if (resolvedStatus) {\r\n    switch (resolvedStatus) {\r\n      case 'any': {\r\n        // Do Nothing as the default returns both resolved and unresolved\r\n        break;\r\n      }\r\n      case 'resolved': {\r\n        filters.push(`AND t.\"resolvedTimestamp\" IS NOT NULL`);\r\n        break;\r\n      }\r\n      case 'unresolved': {\r\n        filters.push(`AND t.\"resolvedTimestamp\" IS NULL`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // create bind for total count without pagination query\r\n  const countBindVariables = [...bindVariables];\r\n  bindVariables.push(resultsLimit);\r\n  const limitQuery = `LIMIT $${bindVariables.length}`;\r\n\r\n  if (decodedToken) {\r\n    bindVariables.push(\r\n      decodedToken.nextCursorTimestamp,\r\n      decodedToken.externalID,\r\n    );\r\n    cursor = `AND (\r\n      COALESCE(mc.\"lastCreated\", t.\"createdTimestamp\") < $${\r\n        bindVariables.length - 1\r\n      }::timestamp\r\n      OR\r\n      (\r\n        COALESCE(mc.\"lastCreated\", t.\"createdTimestamp\") = $${\r\n          bindVariables.length - 1\r\n        }::timestamp\r\n        AND t.\"externalID\" > $${bindVariables.length}\r\n      )\r\n    )`;\r\n  }\r\n\r\n  return {\r\n    bindVariables,\r\n    countBindVariables,\r\n    locationFilter,\r\n    filters,\r\n    cursor,\r\n    limitQuery,\r\n    resultsLimit,\r\n  };\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listThreadsHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { fetchAndBuildNotifications } from 'server/src/notifications/fetch.ts';\r\nimport { gqlNotificationToNotificationVariables } from 'server/src/notifications/convert.ts';\r\nimport { createViewerAndContext } from 'server/src/util/createViewerAndContext.ts';\r\nimport { validateFilter } from 'server/src/public/routes/platform/validateQuery.ts';\r\n\r\nasync function listNotificationsHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: { platformApplicationID, externalID: req.params.userID },\r\n  });\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  const { location, metadata, groupID } = validateFilter(req.query, {\r\n    location: true,\r\n    metadata: true,\r\n    firstMessageTimestamp: false,\r\n    mostRecentMessageTimestamp: false,\r\n    groupID: true,\r\n    authorID: false,\r\n    resolvedStatus: false,\r\n    viewer: false,\r\n  });\r\n\r\n  const context = await createViewerAndContext(\r\n    platformApplicationID,\r\n    user,\r\n    'api',\r\n  );\r\n\r\n  const { nodes: gqlNotifs } = await fetchAndBuildNotifications(context, {\r\n    ltCreatedTimestamp: undefined,\r\n    limit: undefined,\r\n    filter: {\r\n      metadata,\r\n      location,\r\n      groupID,\r\n    },\r\n  });\r\n\r\n  res\r\n    .status(200)\r\n    .json(\r\n      await Promise.all(\r\n        gqlNotifs.map((notif) =>\r\n          gqlNotificationToNotificationVariables(context.loaders, notif),\r\n        ),\r\n      ),\r\n    );\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listNotificationsHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport {\r\n  deletedCounter,\r\n  whereAggregatedNotificationEntity,\r\n} from 'server/src/public/mutations/notifications/utils.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nasync function deleteNotificationHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const notif = await NotificationEntity.findOne({\r\n    where: { platformApplicationID, externalID: req.params.notificationID },\r\n  });\r\n  if (!notif) {\r\n    throw new ApiCallerError('notification_not_found');\r\n  }\r\n\r\n  const affectedCount = await NotificationEntity.destroy({\r\n    where: whereAggregatedNotificationEntity(notif),\r\n  });\r\n\r\n  deletedCounter.inc({ appID: platformApplicationID }, affectedCount);\r\n\r\n  backgroundPromise(\r\n    publishPubSubEvent(\r\n      'notification-deleted',\r\n      { userID: notif.recipientID },\r\n      { notificationID: notif.id },\r\n    ),\r\n  );\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: `\uD83D\uDC80 You successfully deleted notification ${req.params.notificationID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(deleteNotificationHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { unique } from 'radash';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\nimport type {\r\n  FileAttachmentInput,\r\n  MessageContent,\r\n} from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport {\r\n  Viewer,\r\n  assertViewerHasPlatformApplicationID,\r\n} from 'server/src/auth/index.ts';\r\n\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport {\r\n  internalizeContent,\r\n  getValidExternalToInternalReactionUsers,\r\n  loadThreadMessage,\r\n} from 'server/src/public/routes/platform/messages/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { validateMessageContent } from 'server/src/message/util/validateMessageContent.ts';\r\nimport { executeUpdateMessageTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport type { ServerUpdateMessage } from '@cord-sdk/types';\r\nimport { MessageReactionEntity } from 'server/src/entity/message_reaction/MessageReactionEntity.ts';\r\nimport { getFileAttachmentEntities } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { AnnotationAttachmentInput } from 'server/src/schema/resolverTypes.ts';\r\nimport { validateAddAttachments } from 'server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { MessageReactionMutator } from 'server/src/entity/message_reaction/MessageReactionMutator.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { MessageLinkPreviewEntity } from 'server/src/entity/message_link_preview/MessageLinkPreviewEntity.ts';\r\n\r\nasync function UpdateThreadMessageHandler(req: Request, res: Response) {\r\n  const vars = validate.UpdateMessageVariables(req.body);\r\n\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const [thread, message] = await Promise.all([\r\n    ThreadEntity.findOne({\r\n      where: {\r\n        externalID: req.params.threadID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n    MessageEntity.findOne({\r\n      where: {\r\n        externalID: req.params.messageID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n  ]);\r\n\r\n  if (!thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  if (!message || message.threadID !== thread.id) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  const [sender, org] = await Promise.all([\r\n    UserEntity.findByPk(message.sourceID),\r\n    OrgEntity.findByPk(message.orgID),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('organization_not_found');\r\n  }\r\n\r\n  if (!sender) {\r\n    throw new ApiCallerError('user_not_found', {\r\n      message: `Message author not found`,\r\n    });\r\n  }\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({\r\n    user: sender,\r\n    org,\r\n  });\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  await updateThreadMessage({\r\n    ...vars,\r\n    context,\r\n    thread,\r\n    message,\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated message ${req.params.messageID}`,\r\n  });\r\n}\r\n\r\n// TODO: Do we need to handle MessageAttachmentType.SCREENSHOT?\r\nexport async function updateThreadMessage({\r\n  context,\r\n  thread,\r\n  message,\r\n  id: externalID,\r\n  content: rawContent,\r\n  createdTimestamp,\r\n  authorID: newExternalSourceID,\r\n  url,\r\n  deleted,\r\n  iconURL,\r\n  translationKey,\r\n  type,\r\n  metadata,\r\n  extraClassnames,\r\n  deletedTimestamp: deletedTimestampInput,\r\n  updatedTimestamp: updatedTimestampInput,\r\n  addReactions,\r\n  removeReactions,\r\n  addAttachments = [],\r\n  removeAttachments = [],\r\n  skipLinkPreviews: skipLinkPreviewsRaw,\r\n  ...rest\r\n}: ServerUpdateMessage & {\r\n  context: RequestContext;\r\n  thread: ThreadEntity;\r\n  message: MessageEntity;\r\n}) {\r\n  // Check that all properties in ServerUpdateMessage are destructured\r\n  const _: Record<string, never> = rest;\r\n  const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n    context.session.viewer,\r\n  );\r\n\r\n  if (externalID) {\r\n    if (!isValidExternalID(externalID)) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: `${externalID} is not a valid identifier: https://docs.cord.com/reference/identifiers`,\r\n      });\r\n    }\r\n    // NOT using context.loaders here so that we still error even if there's a\r\n    // message the viewer can't see that has the specified externalID.\r\n    const dupeMessage = await loadThreadMessage(\r\n      platformApplicationID,\r\n      externalID,\r\n    );\r\n    if (dupeMessage) {\r\n      throw new ApiCallerError('message_already_exists', {\r\n        message: `Cannot change ID to ${externalID} since a message with that ID already exists`,\r\n      });\r\n    }\r\n  }\r\n\r\n  const [org, sender] = await Promise.all([\r\n    context.loaders.orgLoader.loadOrg(thread.orgID),\r\n    context.loaders.userLoader.loadUser(message.sourceID),\r\n  ]);\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('organization_not_found');\r\n  }\r\n\r\n  if (!sender) {\r\n    throw new ApiCallerError('user_not_found', {\r\n      message: `Message author not found`,\r\n    });\r\n  }\r\n\r\n  let newAuthor: UserEntity | null = null;\r\n  if (newExternalSourceID && sender.externalID !== newExternalSourceID) {\r\n    newAuthor = await UserEntity.findOne({\r\n      where: {\r\n        externalID: newExternalSourceID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n    if (!newAuthor) {\r\n      throw new ApiCallerError('user_not_found', {\r\n        message: `Invalid message author id: ${newExternalSourceID}.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  let updatedTimestamp: Date | null | undefined = undefined;\r\n  if (updatedTimestampInput !== undefined) {\r\n    updatedTimestamp = updatedTimestampInput;\r\n  }\r\n\r\n  let content: MessageContent | undefined = undefined;\r\n  if (rawContent && !isEqual(rawContent, message.content)) {\r\n    try {\r\n      validateMessageContent(rawContent);\r\n      content = await internalizeContent(\r\n        rawContent,\r\n        platformApplicationID,\r\n        message.orgID,\r\n      );\r\n\r\n      if (updatedTimestampInput === undefined) {\r\n        updatedTimestamp = new Date();\r\n      }\r\n    } catch (e) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: 'content field is invalid: ' + (e as Error).message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const skipLinkPreviews: boolean =\r\n    skipLinkPreviewsRaw ?? message.skipLinkPreviews;\r\n\r\n  let deletedTimestamp: Date | null | undefined = undefined;\r\n  if (deletedTimestampInput !== undefined) {\r\n    deletedTimestamp = deletedTimestampInput;\r\n  } else if (deleted !== undefined) {\r\n    deletedTimestamp = deleted ? new Date() : null;\r\n  }\r\n\r\n  const reactionsToAdd = addReactions ?? [];\r\n  const reactionsToRemove = removeReactions ?? [];\r\n\r\n  for (const reactionToAdd of reactionsToAdd) {\r\n    for (const reactionToDelete of reactionsToRemove) {\r\n      if (\r\n        reactionToAdd.userID === reactionToDelete.userID &&\r\n        reactionToAdd.reaction === reactionToDelete.reaction\r\n      ) {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: 'Adding and removing the same reaction is invalid.',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const externalReactionUserIDs = unique([\r\n    ...reactionsToAdd.map((reaction) => reaction.userID),\r\n    ...reactionsToRemove.map((reaction) => reaction.userID),\r\n  ]);\r\n\r\n  const externalToInternalReactionUsers =\r\n    await getValidExternalToInternalReactionUsers(\r\n      context,\r\n      externalReactionUserIDs,\r\n      org,\r\n    );\r\n\r\n  let fileAttachmentInputs: FileAttachmentInput[] | null = null;\r\n  let annotationAttachmentInputs: AnnotationAttachmentInput[] | null = null;\r\n  if (addAttachments.length > 0 || removeAttachments.length > 0) {\r\n    for (const addAttachment of addAttachments) {\r\n      for (const removeAttachment of removeAttachments) {\r\n        if (\r\n          addAttachment.type === removeAttachment.type &&\r\n          addAttachment.id === removeAttachment.id\r\n        ) {\r\n          throw new ApiCallerError('invalid_field', {\r\n            message: 'Adding and removing the same attachment is invalid.',\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const fileIDsToRemove = new Set<string>(\r\n      removeAttachments\r\n        .filter((remove) => remove.type === 'file')\r\n        .map((remove) => remove.id),\r\n    );\r\n\r\n    const existingAttachments = getFileAttachmentEntities(\r\n      await context.loaders.messageAttachmentLoader.loadAttachmentsForMessage(\r\n        message.id,\r\n      ),\r\n    );\r\n\r\n    annotationAttachmentInputs = existingAttachments\r\n      .filter((a) => a.type === MessageAttachmentType.ANNOTATION)\r\n      .map((a) => {\r\n        const data = a.data as MessageAnnotationAttachmentData;\r\n        return {\r\n          id: a.id,\r\n          screenshotFileID: data.screenshotFileID,\r\n          blurredScreenshotFileID: data.blurredScreenshotFileID,\r\n          location: data.location,\r\n          customLocation: data.customLocation,\r\n          customHighlightedTextConfig: data.customHighlightedTextConfig,\r\n          customLabel: data.customLabel,\r\n          coordsRelativeToTarget: data.coordsRelativeToTarget,\r\n        };\r\n      });\r\n\r\n    fileAttachmentInputs = existingAttachments\r\n      .filter((a) => a.type === MessageAttachmentType.FILE)\r\n      .filter(\r\n        (a) =>\r\n          !fileIDsToRemove.has((a.data as MessageFileAttachmentData).fileID),\r\n      )\r\n      .map((a) => {\r\n        const data = a.data as MessageFileAttachmentData;\r\n        return {\r\n          id: a.id,\r\n          fileID: data.fileID,\r\n        };\r\n      });\r\n\r\n    const newFileAttachments = await validateAddAttachments(\r\n      addAttachments,\r\n      sender,\r\n    );\r\n\r\n    fileAttachmentInputs.push(\r\n      ...newFileAttachments.map((a) => ({ id: uuid(), fileID: a.id })),\r\n    );\r\n\r\n    const newlyAttachedInputs = new Set(\r\n      fileAttachmentInputs.map((a) => a.fileID),\r\n    );\r\n    if (newlyAttachedInputs.size !== fileAttachmentInputs.length) {\r\n      throw new ApiCallerError('invalid_field', {\r\n        message: 'Cannot attach an already-attached file',\r\n      });\r\n    }\r\n  }\r\n\r\n  const originalSubscribers = new Set(\r\n    await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  );\r\n\r\n  await getSequelize().transaction(async (transaction) => {\r\n    const viewerReactionMutator = new MessageReactionMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n    const viewerNotificationMutator = new NotificationMutator(\r\n      context.session.viewer,\r\n    );\r\n    const viewerThreadParticipantMutator = new ThreadParticipantMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n    await Promise.all([\r\n      ...reactionsToAdd.map(async (reactionToAdd) => {\r\n        const user = externalToInternalReactionUsers.get(reactionToAdd.userID);\r\n        if (!user) {\r\n          context.logger.logException(\r\n            'Reaction author to add a reaction not found',\r\n            undefined,\r\n            {\r\n              externalID: reactionToAdd.userID,\r\n            },\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        const reactionExists = await MessageReactionEntity.findOne({\r\n          where: {\r\n            userID: user.id,\r\n            messageID: message.id,\r\n            unicodeReaction: reactionToAdd.reaction,\r\n          },\r\n          transaction,\r\n        });\r\n\r\n        if (reactionExists) {\r\n          // If the reaction already exists, the only thing we might have to do\r\n          // is reset the timestamp. Don't do any of the other stuff like\r\n          // sending notifications since the reaction already exists.\r\n          if (reactionToAdd.timestamp !== undefined) {\r\n            reactionExists.timestamp = reactionToAdd.timestamp;\r\n            await reactionExists.save({ transaction });\r\n          }\r\n          return;\r\n        }\r\n\r\n        let reactionMutator: MessageReactionMutator;\r\n        let notificationMutator: NotificationMutator;\r\n        let threadParticipantMutator: ThreadParticipantMutator;\r\n\r\n        if (user.id === context.session.viewer.userID) {\r\n          reactionMutator = viewerReactionMutator;\r\n          notificationMutator = viewerNotificationMutator;\r\n          threadParticipantMutator = viewerThreadParticipantMutator;\r\n        } else {\r\n          const reactionViewer = await Viewer.createLoggedInPlatformViewer({\r\n            user,\r\n            org,\r\n          });\r\n          reactionMutator = new MessageReactionMutator(reactionViewer, null);\r\n          notificationMutator = new NotificationMutator(reactionViewer);\r\n          threadParticipantMutator = new ThreadParticipantMutator(\r\n            reactionViewer,\r\n            null,\r\n          );\r\n        }\r\n\r\n        const newReaction = await reactionMutator.createOne(\r\n          message.id,\r\n          reactionToAdd.reaction,\r\n          reactionToAdd.timestamp,\r\n          transaction,\r\n        );\r\n\r\n        await Promise.all([\r\n          message.sourceID !== user.id &&\r\n            notificationMutator.create(\r\n              {\r\n                recipientID: message.sourceID,\r\n                type: 'reaction',\r\n                reactionID: newReaction.id,\r\n                aggregationKey: message.id,\r\n                messageID: message.id,\r\n                threadID: message.threadID,\r\n              },\r\n              transaction,\r\n            ),\r\n          threadParticipantMutator.markThreadNewlyActiveForUser(\r\n            thread.id,\r\n            newReaction.id,\r\n            message.sourceID,\r\n            transaction,\r\n          ),\r\n        ]);\r\n      }),\r\n      ...reactionsToRemove.map(async (reactionToRemove) => {\r\n        const user = externalToInternalReactionUsers.get(\r\n          reactionToRemove.userID,\r\n        );\r\n        if (!user) {\r\n          context.logger.logException(\r\n            'Reaction author to remove a reaction not found',\r\n            undefined,\r\n            {\r\n              externalID: reactionToRemove.userID,\r\n            },\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (user.id === context.session.viewer.userID) {\r\n          await viewerReactionMutator.deleteUnicodeReaction(\r\n            message.id,\r\n            reactionToRemove.reaction,\r\n            transaction,\r\n          );\r\n        } else {\r\n          await MessageReactionEntity.destroy({\r\n            where: {\r\n              userID: user.id,\r\n              messageID: message.id,\r\n              unicodeReaction: reactionToRemove.reaction,\r\n            },\r\n            transaction,\r\n          });\r\n        }\r\n      }),\r\n    ]);\r\n\r\n    const updatedMessage = await message.update(\r\n      {\r\n        externalID,\r\n        content,\r\n        url,\r\n        sourceID: newAuthor?.id,\r\n        timestamp: createdTimestamp ?? undefined,\r\n        deletedTimestamp,\r\n        lastUpdatedTimestamp: updatedTimestamp,\r\n        type,\r\n        iconURL,\r\n        translationKey,\r\n        extraClassnames: extraClassnames ?? undefined,\r\n        metadata,\r\n        skipLinkPreviews,\r\n      },\r\n      { transaction },\r\n    );\r\n\r\n    const wasDeletedOrUndeleted = !isEqual(\r\n      message.deletedTimestamp,\r\n      updatedMessage.deletedTimestamp,\r\n    );\r\n\r\n    let contextForUpdateMessageTasks = context;\r\n    if (newAuthor && context.session.viewer.userID !== newAuthor.id) {\r\n      const newViewer = await Viewer.createLoggedInPlatformViewer({\r\n        user: newAuthor,\r\n        org,\r\n      });\r\n      contextForUpdateMessageTasks = await contextWithSession(\r\n        { viewer: newViewer },\r\n        context.sequelize,\r\n        null,\r\n        null,\r\n      );\r\n    }\r\n\r\n    const hidePreviewLinksIDs = removeAttachments\r\n      .filter((remove) => remove.type === 'link_preview')\r\n      .map((remove) => remove.id);\r\n\r\n    if (hidePreviewLinksIDs.length > 0) {\r\n      const linkPreviews = await MessageLinkPreviewEntity.findAll({\r\n        where: { id: hidePreviewLinksIDs, messageID: message.id },\r\n        transaction,\r\n      });\r\n\r\n      if (linkPreviews.length !== hidePreviewLinksIDs.length) {\r\n        throw new Error('Link previews were not loaded');\r\n      }\r\n\r\n      if (\r\n        message.sourceID !== contextForUpdateMessageTasks.session.viewer.userID\r\n      ) {\r\n        throw new Error('Only the message author can edit the link previews');\r\n      }\r\n\r\n      await MessageLinkPreviewEntity.update(\r\n        {\r\n          hidden: true,\r\n        },\r\n        {\r\n          where: {\r\n            id: hidePreviewLinksIDs,\r\n          },\r\n          transaction,\r\n        },\r\n      );\r\n    }\r\n\r\n    transaction.afterCommit(() =>\r\n      executeUpdateMessageTasks({\r\n        context: contextForUpdateMessageTasks,\r\n        message: updatedMessage,\r\n        thread,\r\n        wasDeletedOrUndeleted,\r\n        content,\r\n        authorUpdated: !!newAuthor,\r\n        annotationAttachments: annotationAttachmentInputs,\r\n        fileAttachments: fileAttachmentInputs,\r\n        originalSubscribers,\r\n      }),\r\n    );\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(UpdateThreadMessageHandler);\r\n", "import { isMessageNodeText } from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport { MessageNodeType } from '@cord-sdk/types';\r\nimport type { MessageContent } from '@cord-sdk/types';\r\n\r\nexport function appendMessageContent(\r\n  content: MessageContent | null,\r\n  appendedContent: string,\r\n): MessageContent | null {\r\n  if (\r\n    !content ||\r\n    content.length !== 1 ||\r\n    content[0].type !== MessageNodeType.MARKDOWN\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const markdownNode = content[0];\r\n\r\n  if (\r\n    markdownNode.children.length !== 1 ||\r\n    !isMessageNodeText(markdownNode.children[0])\r\n  ) {\r\n    // This should be enforced by validateMessageContent.\r\n    return null;\r\n  }\r\n\r\n  return [\r\n    {\r\n      type: markdownNode.type,\r\n      children: [{ text: markdownNode.children[0].text + appendedContent }],\r\n    },\r\n  ];\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { executeAppendMessageContentTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport { appendMessageContent } from 'common/util/appendMessageContent.ts';\r\n\r\nasync function AppendMessageHandler(req: Request, res: Response) {\r\n  const vars = validate.AppendMessageVariables(req.body);\r\n\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const [context, updatedMessage] = await getSequelize().transaction(\r\n    // Note that we don't bother to do most of the operations below through the\r\n    // transaction, just the read+write of the message, so that we append the\r\n    // content atomically. This endpoint is designed to be slammed by AI bots\r\n    // streaming data, so having it be lightweight is important, but also\r\n    // read-update races are likely to be more common than usual so we need to\r\n    // deal with them.\r\n    async (transaction) => {\r\n      const [thread, message] = await Promise.all([\r\n        ThreadEntity.findOne({\r\n          where: {\r\n            externalID: req.params.threadID,\r\n            platformApplicationID,\r\n          },\r\n        }),\r\n        MessageEntity.findOne({\r\n          where: {\r\n            externalID: req.params.messageID,\r\n            platformApplicationID,\r\n          },\r\n          transaction,\r\n        }),\r\n      ]);\r\n\r\n      if (!thread) {\r\n        throw new ApiCallerError('thread_not_found');\r\n      }\r\n\r\n      if (!message || message.threadID !== thread.id) {\r\n        throw new ApiCallerError('message_not_found');\r\n      }\r\n\r\n      const [sender, org] = await Promise.all([\r\n        UserEntity.findByPk(message.sourceID),\r\n        OrgEntity.findByPk(message.orgID),\r\n      ]);\r\n\r\n      if (!org) {\r\n        throw new ApiCallerError('organization_not_found');\r\n      }\r\n\r\n      if (!sender) {\r\n        throw new ApiCallerError('user_not_found', {\r\n          message: `Message author not found`,\r\n        });\r\n      }\r\n\r\n      const viewer = await Viewer.createLoggedInPlatformViewer({\r\n        user: sender,\r\n        org,\r\n      });\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow\r\n      const context = await contextWithSession(\r\n        { viewer },\r\n        getSequelize(),\r\n        null,\r\n        null,\r\n      );\r\n\r\n      const newContent = appendMessageContent(message.content, vars.text);\r\n      if (!newContent) {\r\n        throw new ApiCallerError('message_not_appendable');\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-shadow\r\n      const updatedMessage = await message.update(\r\n        { content: newContent },\r\n        { transaction },\r\n      );\r\n\r\n      return [context, updatedMessage];\r\n    },\r\n  );\r\n\r\n  await executeAppendMessageContentTasks({\r\n    context,\r\n    message: updatedMessage,\r\n    appendedContent: vars.text,\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated message ${req.params.messageID}`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(AppendMessageHandler);\r\n", "import { PAGE_PRESENCE_LOSS_TTL_SECONDS } from 'common/const/Timing.ts';\r\nimport type { Location, UUID } from 'common/types/index.ts';\r\nimport {\r\n  locationCompare,\r\n  locationEqual,\r\n  locationJson,\r\n  locationMatches,\r\n  toLocation,\r\n} from 'common/types/index.ts';\r\nimport setTimeoutAsync from 'common/util/setTimeoutAsync.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { getPredis, multiOperationSucceeded } from 'server/src/redis/index.ts';\r\n\r\n// This file allows us to change and query the presence location of a user.\r\n// When you set the presence of a user, it will be cleared after\r\n// PAGE_PRESENCE_LOSS_TTL_SECONDS unless you reset the timer by setting the\r\n// user's presence again.\r\n//\r\n// The underlying storage for user's current presence is Redis. For a user on\r\n// page X, we will store a key:value value pair:\r\n//    `makeKey(userID, orgID, region)`:contextJson\r\n// with a time-to-live expiration of PAGE_PRESENCE_LOSS_TTL_SECONDS. Because we\r\n// need to notify clients whenever a key expires, we also setTimeout to check\r\n// whether a key expired or whether its TTL got renewed.\r\n\r\nconst timeouts = new Map<string, NodeJS.Timeout>();\r\n\r\nexport function clearTimeoutsForTest() {\r\n  for (const timeout of timeouts.values()) {\r\n    clearTimeout(timeout);\r\n  }\r\n}\r\n\r\nfunction makeKey(\r\n  externalUserID: string,\r\n  orgID: UUID,\r\n  exclusivityRegion: Location,\r\n) {\r\n  return `presenceContext/${orgID}/${externalUserID}/${locationJson(\r\n    exclusivityRegion,\r\n  )}`;\r\n}\r\n\r\nfunction makeSequenceNumKey(externalUserID: string, orgID: UUID) {\r\n  return `presenceContextSeq/${orgID}/${externalUserID}`;\r\n}\r\n\r\nfunction userIdFromKey(key: string): string {\r\n  const elements = key.split('/', 4);\r\n  if (elements.length !== 4) {\r\n    throw new Error('Invalid key');\r\n  }\r\n  return elements[2];\r\n}\r\n\r\nasync function getPresenceValue(key: string): Promise<Location | null> {\r\n  const result = await getPredis().get(key);\r\n  if (!result) {\r\n    return null;\r\n  }\r\n  return toLocation(JSON.parse(result));\r\n}\r\n\r\nexport async function getUserPresence(\r\n  orgID: UUID,\r\n  externalUserID: string,\r\n): Promise<{ contexts: Location[]; sequenceNum: number }> {\r\n  const redis = getPredis();\r\n  const stream = redis.scanStream({\r\n    match: `presenceContext/${orgID}/${externalUserID}/*`,\r\n    count: 1000,\r\n  });\r\n  const data: Location[] = [];\r\n  stream.on('data', (resultKeys: string[]) => {\r\n    stream.pause();\r\n    void Promise.all(\r\n      resultKeys.map((key) =>\r\n        getPresenceValue(key).then((value) => {\r\n          if (value) {\r\n            data.push(value);\r\n          }\r\n        }),\r\n      ),\r\n    ).then(() => {\r\n      stream.resume();\r\n    });\r\n  });\r\n\r\n  // Sort and return the data once the stream ends\r\n  await new Promise<void>((resolve) => stream.on('end', resolve));\r\n  const sequenceNum = await getPredis().get(\r\n    makeSequenceNumKey(externalUserID, orgID),\r\n  );\r\n  data.sort(locationCompare);\r\n  return {\r\n    contexts: data,\r\n    sequenceNum: sequenceNum ? parseInt(sequenceNum, 10) : 0,\r\n  };\r\n}\r\n\r\n/**\r\n * Returns all user presence records for the given org.  A single user may be\r\n * present in multiple places.  If so, the returned data is sorted according to\r\n * `contextCompare`.\r\n */\r\nexport async function getAllUserPresence(\r\n  orgID: UUID,\r\n): Promise<Map<string, Location[]>> {\r\n  const redis = getPredis();\r\n  const stream = redis.scanStream({\r\n    match: `presenceContext/${orgID}/*`,\r\n    count: 1000,\r\n  });\r\n  const data = new Map<string, Location[]>();\r\n  stream.on('data', (resultKeys: string[]) => {\r\n    stream.pause();\r\n    void Promise.all(\r\n      resultKeys.map((key) =>\r\n        getPresenceValue(key).then((value) => {\r\n          if (value) {\r\n            const externalUserID = userIdFromKey(key);\r\n            data.set(externalUserID, [\r\n              ...(data.get(externalUserID) ?? []),\r\n              value,\r\n            ]);\r\n          }\r\n        }),\r\n      ),\r\n    ).then(() => {\r\n      stream.resume();\r\n    });\r\n  });\r\n\r\n  // Sort and return the data once the stream ends\r\n  await new Promise<void>((resolve) => stream.on('end', resolve));\r\n  for (const arr of data.values()) {\r\n    arr.sort(locationCompare);\r\n  }\r\n  return data;\r\n}\r\n\r\n// Make the user present on the given context\r\n// This function will store the context in redis under the key\r\n// `makeKey(userID, orgID, exclusivityRegion)` with a time-to-live\r\n// expiration of PAGE_PRESENCE_LOSS_TTL_SECONDS.\r\nexport async function setUserPresence(\r\n  logger: Logger,\r\n  externalUserID: string,\r\n  orgID: UUID,\r\n  context: Location,\r\n  exclusivityRegion: Location,\r\n) {\r\n  if (!locationMatches(context, exclusivityRegion)) {\r\n    throw new Error(\r\n      'Cannot set a user present in a non-matching exclusivity region',\r\n    );\r\n  }\r\n  const key = makeKey(externalUserID, orgID, exclusivityRegion);\r\n  const sequenceNumKey = makeSequenceNumKey(externalUserID, orgID);\r\n  clearPreviousTimeout(key);\r\n\r\n  const errsAndVals = await getPredis()\r\n    .multi()\r\n    .getset(key, locationJson(context)) // errsAndVals[0]\r\n    .expire(key, PAGE_PRESENCE_LOSS_TTL_SECONDS)\r\n    .incr(sequenceNumKey) // errsAndVals[2]\r\n    .expire(sequenceNumKey, PAGE_PRESENCE_LOSS_TTL_SECONDS)\r\n    .exec();\r\n\r\n  if (!multiOperationSucceeded(errsAndVals, 'Failed getset presence')) {\r\n    console.log('Had some errors');\r\n    return;\r\n  }\r\n\r\n  const prevContextRaw = errsAndVals[0][1];\r\n  const prevContext =\r\n    typeof prevContextRaw === 'string'\r\n      ? toLocation(JSON.parse(prevContextRaw))\r\n      : null;\r\n  const sequenceNum = errsAndVals[2][1] as number;\r\n\r\n  // Because we don't get notified when a key expires, let's set a timeout\r\n  // that should run soon (100ms) after the key would have expired. If the\r\n  // key's TTL was not renewed and expired, we will notify everyone.\r\n  const timeoutID = setTimeoutAsync(\r\n    () =>\r\n      notifyIfDeleted(externalUserID, orgID, context, exclusivityRegion).catch(\r\n        logger.exceptionLogger('Failed to notify clients of expired presence'),\r\n      ),\r\n    // do the check 100ms after Redis should have expired the presence\r\n    PAGE_PRESENCE_LOSS_TTL_SECONDS * 1000 + 100,\r\n  );\r\n  timeouts.set(key, timeoutID);\r\n\r\n  if (!locationEqual(prevContext, context)) {\r\n    // user is on a new page, let's notify everyone\r\n    await publishPubSubEvent(\r\n      'context-presence',\r\n      { orgID },\r\n      {\r\n        externalUserID,\r\n        ephemeral: {\r\n          ...(prevContext && { departed: prevContext }),\r\n          arrived: context,\r\n          sequenceNum,\r\n        },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n// Mark the user as not present on the pageContextHash\r\nexport async function removeUserPresence(\r\n  externalUserID: string,\r\n  orgID: UUID,\r\n  context: Location,\r\n  exclusivityRegion: Location,\r\n) {\r\n  const key = makeKey(externalUserID, orgID, exclusivityRegion);\r\n  const numOfDeletedKeys = await getPredis().compareAndDelete(\r\n    key,\r\n    locationJson(context),\r\n  );\r\n  if (numOfDeletedKeys === 1) {\r\n    clearPreviousTimeout(key);\r\n    const sequenceNum = await incrSequenceNum(externalUserID, orgID);\r\n    await publishPubSubEvent(\r\n      'context-presence',\r\n      { orgID },\r\n      {\r\n        externalUserID,\r\n        ephemeral: { departed: context, sequenceNum },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nfunction clearPreviousTimeout(key: string) {\r\n  const timeoutID = timeouts.get(key);\r\n  if (timeoutID !== undefined) {\r\n    clearTimeout(timeoutID);\r\n    timeouts.delete(key);\r\n  }\r\n}\r\n\r\nasync function notifyIfDeleted(\r\n  externalUserID: string,\r\n  orgID: UUID,\r\n  context: Location,\r\n  exclusivityRegion: Location,\r\n) {\r\n  const key = makeKey(externalUserID, orgID, exclusivityRegion);\r\n  const keyIsDeleted = (await getPredis().exists(key)) === 0;\r\n  if (keyIsDeleted) {\r\n    const sequenceNum = await incrSequenceNum(externalUserID, orgID);\r\n    await publishPubSubEvent(\r\n      'context-presence',\r\n      { orgID },\r\n      {\r\n        externalUserID,\r\n        ephemeral: { departed: context, sequenceNum },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nasync function incrSequenceNum(\r\n  externalUserID: string,\r\n  orgID: UUID,\r\n): Promise<number> {\r\n  const seqNumKey = makeSequenceNumKey(externalUserID, orgID);\r\n  const errsAndVals = await getPredis()\r\n    .multi()\r\n    .incr(seqNumKey)\r\n    .expire(seqNumKey, PAGE_PRESENCE_LOSS_TTL_SECONDS)\r\n    .exec();\r\n  if (\r\n    !multiOperationSucceeded(errsAndVals, 'Failed to increment sequence number')\r\n  ) {\r\n    throw new Error('Failed to increment sequence number');\r\n  }\r\n  return errsAndVals[0][1] as number;\r\n}\r\n", "import type { JsonObject } from 'common/types/index.ts';\r\nimport { isLocation } from 'common/types/index.ts';\r\nimport { assertViewerHasPlatformIdentity } from 'server/src/auth/index.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport { PageVisitorEntity } from 'server/src/entity/page_visitor/PageVisitorEntity.ts';\r\nimport { PageVisitorMutator } from 'server/src/entity/page_visitor/PageVisitorMutator.ts';\r\nimport {\r\n  setUserPresence,\r\n  removeUserPresence,\r\n} from 'server/src/presence/context.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\n\r\ntype SetPresentContextProps = {\r\n  userContext: JsonObject;\r\n  present: boolean;\r\n  durable: boolean;\r\n  exclusivityRegion: JsonObject | undefined | null;\r\n  context: RequestContext;\r\n};\r\n\r\n// Does all the work in setting a user's durable and ephemeral presence\r\nexport async function setUserPresentContext({\r\n  userContext,\r\n  present,\r\n  durable,\r\n  exclusivityRegion,\r\n  context,\r\n}: SetPresentContextProps) {\r\n  const { userID, orgID, externalUserID } = assertViewerHasPlatformIdentity(\r\n    context.session.viewer,\r\n  );\r\n  if (!exclusivityRegion) {\r\n    exclusivityRegion = userContext;\r\n  }\r\n  if (!isLocation(userContext)) {\r\n    throw new Error('Invalid context');\r\n  }\r\n  if (!present && durable) {\r\n    throw new Error('Cannot remove durable presence');\r\n  }\r\n  if (!isLocation(exclusivityRegion)) {\r\n    throw new Error('Invalid exclusivity region');\r\n  }\r\n\r\n  if (durable) {\r\n    const pageContextHash = await new PageMutator(\r\n      context.session.viewer,\r\n    ).createPageIfNotExists({\r\n      data: userContext,\r\n      providerID: null,\r\n    });\r\n    await new PageVisitorMutator(context.session.viewer).markPresentInPage(\r\n      pageContextHash,\r\n    );\r\n    const visit = await PageVisitorEntity.findOne({\r\n      where: {\r\n        orgID,\r\n        userID,\r\n        pageContextHash,\r\n      },\r\n    });\r\n    if (!visit) {\r\n      throw new Error('Internal error');\r\n    }\r\n    await publishPubSubEvent(\r\n      'context-presence',\r\n      { orgID },\r\n      {\r\n        externalUserID,\r\n        durable: {\r\n          context: userContext,\r\n          timestamp: visit.lastPresentTimestamp.getTime(),\r\n        },\r\n      },\r\n    );\r\n  } else {\r\n    if (present) {\r\n      await setUserPresence(\r\n        context.logger,\r\n        externalUserID,\r\n        orgID,\r\n        userContext,\r\n        exclusivityRegion,\r\n      );\r\n    } else {\r\n      await removeUserPresence(\r\n        externalUserID,\r\n        orgID,\r\n        userContext,\r\n        exclusivityRegion,\r\n      );\r\n    }\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { validateExternalID } from 'server/src/public/routes/platform/types.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport { contextWithSession } from 'server/src/RequestContext.ts';\r\nimport { setUserPresentContext } from 'server/src/presence/utils.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { addGroupIDIfNotExistUpdateUserPresenceHandler } from 'server/src/public/routes/platform/addGroupIDWhereOrgIDExists.ts';\r\n\r\nasync function updateUserPresenceHanlder(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.userID;\r\n\r\n  validateExternalID(externalID, 'userID');\r\n\r\n  await updateUserPresence(platformApplicationID, externalID, req.body);\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated user ${externalID} presence`,\r\n  });\r\n}\r\n\r\nasync function updateUserPresence(\r\n  platformApplicationID: UUID,\r\n  externalUserID: string,\r\n  data: any,\r\n) {\r\n  // This is in place until we remove organizationID\r\n  const reqBodyWithGroupID = addGroupIDIfNotExistUpdateUserPresenceHandler(\r\n    data,\r\n    platformApplicationID,\r\n  );\r\n\r\n  const {\r\n    absent,\r\n    durable,\r\n    location: userContext,\r\n    organizationID: _organizationID,\r\n    groupID: externalOrgID,\r\n    exclusiveWithin,\r\n    ...rest\r\n  } = validate.UpdateUserPresenceVariables(reqBodyWithGroupID);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  const [user, org] = await Promise.all([\r\n    UserEntity.findOne({\r\n      where: {\r\n        externalID: externalUserID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n    OrgEntity.findOne({\r\n      where: {\r\n        externalID: externalOrgID,\r\n        platformApplicationID,\r\n      },\r\n    }),\r\n  ]);\r\n\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('organization_not_found');\r\n  }\r\n\r\n  // Check to make sure the user is in the org as well\r\n  const orgMember = await OrgMembersEntity.findOne({\r\n    where: {\r\n      userID: user.id,\r\n      orgID: org.id,\r\n    },\r\n  });\r\n\r\n  if (!orgMember) {\r\n    throw new ApiCallerError('user_not_in_organization');\r\n  }\r\n\r\n  const viewer = await Viewer.createLoggedInPlatformViewer({\r\n    user,\r\n    org,\r\n  });\r\n\r\n  const context = await contextWithSession(\r\n    { viewer },\r\n    getSequelize(),\r\n    null,\r\n    null,\r\n  );\r\n\r\n  try {\r\n    await setUserPresentContext({\r\n      userContext,\r\n      present: !absent,\r\n      durable: Boolean(durable),\r\n      exclusivityRegion: exclusiveWithin,\r\n      context,\r\n    });\r\n  } catch (e: unknown) {\r\n    if (e instanceof Error) {\r\n      // throwing an API call error here for consistency\r\n      throw new ApiCallerError('invalid_request', { message: e.message });\r\n    }\r\n  }\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateUserPresenceHanlder);\r\n", "import type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport { ipToLocation } from 'docs/lib/geoip/geoip.ts';\r\nimport { CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID } from 'common/const/Ids.ts';\r\nimport Env from 'server/src/config/Env.ts';\r\n\r\n// Refer to https://auth0.com/docs/deploy-monitor/logs/log-event-type-codes\r\n// for more log type events\r\n// Remember to select the events you want in the webhook creation\r\n// https://manage.auth0.com/dashboard/eu/dev-e20axg57/log-streams\r\nconst AUTH0_EVENT_LOG: { [type: string]: string } = {\r\n  s: 'console-successful-login',\r\n  ss: 'console-successful-signups',\r\n  f: 'console-failed-login',\r\n  fs: 'console-failed-signup',\r\n};\r\n\r\ntype AUTH0_EVENT_LOG_TYPE = keyof typeof AUTH0_EVENT_LOG;\r\n\r\nexport default function Auth0LogsHandler(req: Request, res: Response) {\r\n  const viewer = Viewer.createAnonymousViewer();\r\n  const anonLogger = new Logger(viewer);\r\n  anonLogger.debug('Auth0LogsHandler', { payload: req.body });\r\n\r\n  try {\r\n    const auth = req.headers.authorization;\r\n    if (!auth) {\r\n      throw new Error('Authorization missing in headers');\r\n    }\r\n    const token = auth.split(' ')[1];\r\n\r\n    if (!token) {\r\n      throw new Error('Token missing');\r\n    }\r\n    jwt.verify(token, Env.AUTH0_WEBHOOK_SECRET);\r\n  } catch (e) {\r\n    res.sendStatus(401);\r\n    if (e instanceof Error) {\r\n      anonLogger.error('Auth0LogsHandler: ' + e.message, {\r\n        payload: req.headers.authorization,\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  res.sendStatus(200);\r\n  const logs = req.body.logs;\r\n  storeAuth0EventLogs(viewer, logs).catch((error) => {\r\n    if (error instanceof Error) {\r\n      anonLogger.error('Auth0LogsHandler: ' + error.message, {\r\n        payload: req.body,\r\n      });\r\n    } else {\r\n      anonLogger.error('Auth0LogsHandler', { payload: req.body });\r\n    }\r\n  });\r\n}\r\n\r\nasync function storeAuth0EventLogs(viewer: Viewer, logs: any[]) {\r\n  if (!Array.isArray(logs)) {\r\n    throw new Error('Logs should be array');\r\n  }\r\n\r\n  if (logs.length === 0) {\r\n    throw new Error('No logs');\r\n  }\r\n  const eventMutator = new EventMutator({ viewer });\r\n  const anonLogger = new Logger(viewer);\r\n  await Promise.all(\r\n    logs.map(async (log) => {\r\n      if (!('data' in log)) {\r\n        throw new Error('Data does not exist');\r\n      }\r\n\r\n      const dataLog = log.data;\r\n      if (!('type' in dataLog) || typeof dataLog['type'] !== 'string') {\r\n        throw new Error('Type does not exist');\r\n      }\r\n\r\n      const logType = dataLog['type'];\r\n      // Remember to select the events you want in the webhook creation\r\n      // https://manage.auth0.com/dashboard/eu/dev-e20axg57/log-streams\r\n      if (logType in AUTH0_EVENT_LOG) {\r\n        await eventMutator.createEvent({\r\n          eventNumber: null,\r\n          pageLoadID: null,\r\n          clientTimestamp: dataLog.date,\r\n          installationID: null,\r\n          type: AUTH0_EVENT_LOG[logType],\r\n          payload: {\r\n            email: dataLog.user_name,\r\n            description: dataLog.description,\r\n            connection: dataLog.connection,\r\n          },\r\n          metadata: { log: dataLog },\r\n          logLevel: 'info',\r\n        });\r\n\r\n        await sendAuth0EventToSlack({\r\n          type: logType as keyof typeof AUTH0_EVENT_LOG,\r\n          email: dataLog.user_name,\r\n          ip: dataLog.ip,\r\n          connection: dataLog?.connection ?? 'user name and password',\r\n          logger: anonLogger,\r\n        });\r\n      }\r\n    }),\r\n  );\r\n}\r\n\r\nasync function sendAuth0EventToSlack({\r\n  type,\r\n  email,\r\n  ip,\r\n  connection,\r\n  logger,\r\n}: {\r\n  type: AUTH0_EVENT_LOG_TYPE;\r\n  email: string;\r\n  ip: string;\r\n  connection: string;\r\n  logger: Logger;\r\n}) {\r\n  let location = ip;\r\n  try {\r\n    location = await ipToLocation(ip);\r\n  } catch (error) {\r\n    logger.logException('Auth0LogsHandler: Could not get geo location', {\r\n      payload: { ip, email, connection, type },\r\n    });\r\n  }\r\n  // This message should never be posted..\r\n  let message = `\uD83D\uDD25 Could not convert Auth0 log type: ${type} to slack message...`;\r\n  switch (type) {\r\n    case 's': // successful login\r\n      message = `\uD83E\uDED2 (${location}) user with email ${email} logged in to the console using ${connection}.`;\r\n      break;\r\n    case 'ss': //successful signup\r\n      message = `\uD83D\uDE80 (${location}) user with email ${email} signed up to the console using ${connection}.`;\r\n      break;\r\n    case 'f': // failed login\r\n      message = `\uD83C\uDFF4\u200D\u2620\uFE0F (${location}) user with email ${email} failed to log in to the console using ${connection}.`;\r\n      break;\r\n    case 'fs': // failed signup\r\n      message = `\u2620\uFE0F (${location}) user with email ${email} failed to sign up to the console using ${connection}.`;\r\n      break;\r\n  }\r\n  await sendMessageToCord(message, CORD_DEV_CONSOLE_LOGGING_SLACK_CHANNEL_ID);\r\n}\r\n", "import Env from 'server/src/config/Env.ts';\r\n\r\nexport async function ipToLocation(ip: string): Promise<string> {\r\n  if (ip === '80.249.216.101') {\r\n    return 'Cord Office';\r\n  }\r\n\r\n  if (!Env.IPSTACK_API_SECRET) {\r\n    return ip;\r\n  }\r\n\r\n  const resp = await fetch(\r\n    'https://api.ipstack.com/' + ip + '?access_key=' + Env.IPSTACK_API_SECRET,\r\n    {\r\n      method: 'GET',\r\n    },\r\n  );\r\n  const json = await resp.json();\r\n\r\n  if (\r\n    json &&\r\n    typeof json === 'object' &&\r\n    'country_code' in json &&\r\n    'city' in json &&\r\n    typeof json.country_code === 'string' &&\r\n    typeof json.city === 'string'\r\n  ) {\r\n    return json.city + ', ' + json.country_code;\r\n  }\r\n\r\n  return ip;\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { WhereOptions } from 'sequelize';\r\nimport { Op, Sequelize } from 'sequelize';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { getCoreMessageData } from 'server/src/public/routes/platform/messages/getCoreMessageData.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  validatePaginationToken,\r\n  validateFilter,\r\n  validateLimit,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\nimport { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\n\r\nconst DEFAULT_LIMIT = 1000;\r\n\r\nexport interface ListMessagesPaginationToken {\r\n  externalID: string;\r\n  createdAtWithMicros: string;\r\n}\r\n\r\nfunction encodeToken(token: ListMessagesPaginationToken): string {\r\n  return btoa(JSON.stringify(token));\r\n}\r\n\r\nasync function listMessagesHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const { location, metadata, authorID, groupID } = validateFilter(req.query, {\r\n    location: true,\r\n    metadata: true,\r\n    firstMessageTimestamp: false,\r\n    mostRecentMessageTimestamp: false,\r\n    groupID: true,\r\n    authorID: true,\r\n    resolvedStatus: false,\r\n    viewer: false,\r\n  });\r\n  const { token, limit } = req.query;\r\n  const decodedToken: ListMessagesPaginationToken | undefined =\r\n    validatePaginationToken({ token, endpoint: 'messages' });\r\n\r\n  const where: WhereOptions<MessageEntity> = {\r\n    platformApplicationID,\r\n  };\r\n  let whereIncludedThread: WhereOptions<ThreadEntity> = {};\r\n\r\n  if (metadata) {\r\n    where['metadata'] = metadata;\r\n  }\r\n\r\n  if (location) {\r\n    const pages = await PageEntity.findAll({\r\n      where: {\r\n        contextData: location.partialMatch\r\n          ? { [Op.contains]: location.value }\r\n          : { [Op.eq]: location.value },\r\n      },\r\n    });\r\n\r\n    whereIncludedThread = {\r\n      pageContextHash: pages.map((page) => page.contextHash),\r\n    };\r\n  }\r\n\r\n  if (groupID) {\r\n    const orgEntity = await OrgEntity.findOne({\r\n      where: { externalID: groupID, platformApplicationID },\r\n    });\r\n\r\n    if (!orgEntity) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n\r\n    where['orgID'] = orgEntity.id;\r\n  }\r\n\r\n  if (authorID) {\r\n    const user = await UserEntity.findOne({\r\n      where: {\r\n        externalID: authorID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n    if (!user) {\r\n      throw new ApiCallerError('user_not_found');\r\n    }\r\n    where['sourceID'] = user?.id;\r\n  }\r\n\r\n  const bind = [];\r\n\r\n  const whereWithPagination: WhereOptions<MessageEntity> = {\r\n    ...where,\r\n    ...(decodedToken && {\r\n      [Op.or]: [\r\n        Sequelize.literal(`timestamp > $1`),\r\n        {\r\n          [Op.and]: [\r\n            Sequelize.literal(`timestamp = $1`),\r\n            {\r\n              externalID: {\r\n                [Op.gt]: decodedToken.externalID,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    }),\r\n  };\r\n  if (decodedToken) {\r\n    bind.push(decodedToken?.createdAtWithMicros);\r\n  }\r\n\r\n  const resultsLimit = validateLimit(limit, DEFAULT_LIMIT);\r\n  const [untypedMessages, messagesCount] = await Promise.all([\r\n    MessageEntity.findAll({\r\n      where: whereWithPagination,\r\n      bind,\r\n      order: [\r\n        ['timestamp', 'ASC'],\r\n        ['externalID', 'ASC'],\r\n      ],\r\n      limit: resultsLimit,\r\n      include: [\r\n        {\r\n          model: ThreadEntity,\r\n          required: true,\r\n          as: 'thread',\r\n          where: whereIncludedThread,\r\n        },\r\n      ],\r\n    }),\r\n    MessageEntity.count({\r\n      where,\r\n      include: [\r\n        {\r\n          model: ThreadEntity,\r\n          required: true,\r\n          as: 'thread',\r\n          where: whereIncludedThread,\r\n          attributes: [],\r\n        },\r\n      ],\r\n    }),\r\n  ]);\r\n\r\n  const messages = untypedMessages as (MessageEntity & {\r\n    thread: ThreadEntity;\r\n  })[];\r\n\r\n  // Given that many messages will share the same Thread and many Threads\r\n  // will share the same Org, let's just create loaders once for each Org\r\n  // This will enable us to reuse loaders when loading message data which\r\n  // should help with performance\r\n  const perOrgLoadersMap = new Map<string, RequestContextLoaders>();\r\n  await Promise.all(\r\n    Array.from(new Set(messages.map((msg) => msg.thread.orgID))).map(\r\n      async (orgID) => {\r\n        const loaders = await getNewLoaders(\r\n          Viewer.createOrgViewer(orgID, platformApplicationID),\r\n        );\r\n        perOrgLoadersMap.set(orgID, loaders);\r\n      },\r\n    ),\r\n  );\r\n\r\n  const results = await Promise.all(\r\n    messages.map(async (msg) => {\r\n      return await getCoreMessageData(\r\n        perOrgLoadersMap.get(msg.thread.orgID)!,\r\n        msg,\r\n        msg.thread,\r\n      );\r\n    }),\r\n  );\r\n\r\n  const lastMessage =\r\n    messages.length === 0 ? null : messages[messages.length - 1];\r\n\r\n  const returnToken =\r\n    messages.length === resultsLimit && lastMessage\r\n      ? encodeToken({\r\n          externalID: lastMessage.externalID,\r\n          createdAtWithMicros: lastMessage.createdAtWithMicros,\r\n        })\r\n      : null;\r\n\r\n  const result = {\r\n    messages: results,\r\n    pagination: {\r\n      token: returnToken,\r\n      total: messagesCount,\r\n    },\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listMessagesHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport type { NotificationPreferences } from '@cord-sdk/types';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\nimport { NOTIFICATION_CHANNELS } from 'common/const/UserPreferenceKeys.ts';\r\nimport type { NotificationChannels } from 'common/types/index.ts';\r\nimport { defaultNotificationPreference } from 'common/util/notifications.ts';\r\n\r\nasync function listUserPreferencesHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: { platformApplicationID, externalID: req.params.userID },\r\n  });\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  const preference = await UserPreferenceEntity.findOne({\r\n    where: { userID: user.id, key: NOTIFICATION_CHANNELS },\r\n  });\r\n\r\n  const value = preference?.value as NotificationChannels;\r\n  const notificationPreferences: NotificationPreferences = preference?.value\r\n    ? {\r\n        sendViaEmail: !!value.email,\r\n        sendViaSlack: !!value.slack,\r\n      }\r\n    : {\r\n        sendViaSlack: defaultNotificationPreference.slack,\r\n        sendViaEmail: defaultNotificationPreference.email,\r\n      };\r\n  return res\r\n    .status(200)\r\n    .json({ [NOTIFICATION_CHANNELS]: notificationPreferences });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listUserPreferencesHandler);\r\n", "import type { Request, Response } from 'express';\r\n\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport type { NotificationChannels } from 'common/types/index.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { UserPreferenceMutator } from 'server/src/entity/user_preference/UserPreferenceMutator.ts';\r\nimport { NOTIFICATION_CHANNELS } from 'common/const/UserPreferenceKeys.ts';\r\nimport { createViewerAndContext } from 'server/src/util/createViewerAndContext.ts';\r\n\r\nasync function updateUserPreferencesHanlder(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.userID;\r\n\r\n  const { key, value, ...rest } = validate.UpdateUserPreferenceVariables(\r\n    req.body,\r\n  );\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  if (key !== NOTIFICATION_CHANNELS) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'The only valid key for now is \"notification_channels\".',\r\n    });\r\n  }\r\n\r\n  const user = await UserEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  const context = await createViewerAndContext(\r\n    platformApplicationID,\r\n    user,\r\n    'api',\r\n  );\r\n  const notificationChannels: Partial<NotificationChannels> = {\r\n    ...(value.sendViaEmail !== undefined && { email: value.sendViaEmail }),\r\n    ...(value.sendViaSlack !== undefined && { slack: value.sendViaSlack }),\r\n  };\r\n  await new UserPreferenceMutator(context.session.viewer).setPreferenceForUser(\r\n    user.id,\r\n    key,\r\n    notificationChannels,\r\n  );\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\u2705 You successfully updated user ${externalID} preferences`,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(updateUserPreferencesHanlder);\r\n", "import type { Request, Response } from 'express';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\n\r\nasync function applicationTokenHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n  if (!app) {\r\n    throw new ApiCallerError('project_not_found');\r\n  }\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    application_id: platformApplicationID,\r\n    application_name: app.name,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(applicationTokenHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { externalizeID } from 'common/util/externalIDs.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\r\n\r\nasync function createWebhookHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const {\r\n    url: eventWebhookURL,\r\n    events: eventWebhookSubscriptions,\r\n    ...rest\r\n  } = validate.CreateWebhookVariables(req.body);\r\n  // Check that all properties are destructured\r\n  const _: Record<string, never> = rest;\r\n\r\n  // Upsert since they may just be updating the existing set of events\r\n  await ApplicationWebhookEntity.upsert({\r\n    platformApplicationID,\r\n    eventWebhookURL,\r\n    eventWebhookSubscriptions,\r\n  });\r\n\r\n  const webhookEntity = await ApplicationWebhookEntity.findOne({\r\n    where: { platformApplicationID, eventWebhookURL },\r\n  });\r\n  if (!webhookEntity) {\r\n    // Something has gone wrong since we just created this entity\r\n    // This should not happen\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  const webhookID = externalizeID(webhookEntity.id);\r\n\r\n  // Explicitly pass a 201 here since that is what Zapier expects\r\n  return res.status(201).json({\r\n    success: true,\r\n    message: `Successfully created webhook with id: ${webhookID}`,\r\n    webhookID,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createWebhookHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { extractInternalID } from 'common/util/externalIDs.ts';\r\nimport { ApplicationWebhookEntity } from 'server/src/entity/application_webhook/ApplicationWebhookEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\n\r\nasync function deleteWebhookHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const webhookID = req.params.webhookID;\r\n  const id = extractInternalID(webhookID);\r\n  if (!id) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const webhookEntity = await ApplicationWebhookEntity.findByPk(id);\r\n  await webhookEntity?.destroy();\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: `\uD83D\uDC80 You have successfully deleted webhook: ${webhookID}`,\r\n    deleted: webhookID,\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(deleteWebhookHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { DemoUser } from 'server/src/public/routes/warm-demo-users/types.ts';\r\nimport * as HomepageDemoUser from 'server/src/public/routes/warm-demo-users/HomepageDemoUser.ts';\r\nimport { getClientAuthToken } from '@cord-sdk/server';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { WarmDemoUserEntity } from 'server/src/entity/demo/WarmDemoUserEntity.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\n// This file contains a handler to manage a pool of demo users, deliver them to\r\n// people looking for them, and refill the pool.  This can be used for any\r\n// use case we have for temporary demo users.\r\n\r\ntype DemoUserFactory = {\r\n  create: () => Promise<DemoUser>;\r\n  reheat: (req: Request, user: DemoUser, token: string) => Promise<unknown>;\r\n  numToKeep: number;\r\n  version: number;\r\n};\r\n\r\nconst DEMO_USER_TYPES = {\r\n  homepage: HomepageDemoUser,\r\n} as const satisfies Record<string, DemoUserFactory>;\r\n\r\ntype DemoUserType = keyof typeof DEMO_USER_TYPES;\r\n\r\nasync function findUser(type: DemoUserType) {\r\n  try {\r\n    // This query atomically finds and deletes one row from the warm_demo_users\r\n    // table, to ensure we don't vend the same warm user to multiple people who\r\n    // arrive.  The `FOR UPDATE` in the select tells Postgres to lock that row\r\n    // when it selects it so that nobody else can get it, and it will stay\r\n    // locked until the query finishes (at which point it will be deleted).  The\r\n    // `SKIP LOCKED` tells other queries to not consider locked rows and just\r\n    // try to return some unlocked row, so they won't block if multiples of this\r\n    // query run concurrently.\r\n\r\n    // See https://shekhargulati.com/2022/01/27/correctly-using-postgres-as-queue/\r\n    const result = await getSequelize().query(\r\n      `DELETE FROM warm_demo_users\r\n       WHERE id IN (\r\n         SELECT id FROM warm_demo_users WHERE \"demoGroup\" = $1 AND version = $2\r\n         FOR UPDATE SKIP LOCKED\r\n         LIMIT 1\r\n       )\r\n     RETURNING *`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [type, DEMO_USER_TYPES[type].version],\r\n        model: WarmDemoUserEntity,\r\n      },\r\n    );\r\n    if (result.length > 0) {\r\n      return result[0];\r\n    }\r\n  } catch (err) {\r\n    anonymousLogger().logException(\r\n      'Failed to execute demo user find query',\r\n      err,\r\n      {\r\n        type,\r\n      },\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction isValidType(type: any): type is DemoUserType {\r\n  return type && type in DEMO_USER_TYPES;\r\n}\r\n\r\nasync function refill(type: DemoUserType) {\r\n  const num = await WarmDemoUserEntity.count({\r\n    where: { demoGroup: type },\r\n  });\r\n  const typeInfo = DEMO_USER_TYPES[type];\r\n  const promises = [];\r\n  for (let i = num; i < typeInfo.numToKeep; i++) {\r\n    promises.push(\r\n      (async () => {\r\n        const newUser = await typeInfo.create();\r\n        await WarmDemoUserEntity.create({\r\n          platformApplicationID: newUser.appID,\r\n          userID: newUser.userID,\r\n          orgID: newUser.orgID,\r\n          demoGroup: type,\r\n          version: typeInfo.version,\r\n        });\r\n      })(),\r\n    );\r\n  }\r\n  return await Promise.all(promises);\r\n}\r\n\r\nasync function getDemoToken(req: Request, res: Response) {\r\n  const type = req.query.type;\r\n  if (!isValidType(type)) {\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  const typeInfo = DEMO_USER_TYPES[type];\r\n\r\n  const user = await findUser(type);\r\n\r\n  let demoUser: DemoUser;\r\n  if (user) {\r\n    demoUser = {\r\n      appID: user.platformApplicationID,\r\n      userID: user.userID,\r\n      orgID: user.orgID,\r\n    };\r\n  } else {\r\n    try {\r\n      demoUser = await typeInfo.create();\r\n    } catch (err) {\r\n      anonymousLogger().logException('Failed to create demo user', err, {\r\n        type,\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  const app = await ApplicationEntity.findByPk(demoUser.appID);\r\n  if (!app) {\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  const clientAuthToken = getClientAuthToken(demoUser.appID, app.sharedSecret, {\r\n    user_id: demoUser.userID,\r\n    organization_id: demoUser.orgID,\r\n  });\r\n\r\n  backgroundPromise(refill(type));\r\n  res.json(await typeInfo.reheat(req, demoUser, clientAuthToken));\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getDemoToken);\r\n", "import type { Request } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { CORD_HOMEPAGE_APPLICATION_ID } from 'common/const/Ids.ts';\r\nimport {\r\n  createPlatformUser,\r\n  findOrCreatePlatformOrganization,\r\n  updatePlatformOrganizationMembers,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport type { DemoUser } from 'server/src/public/routes/warm-demo-users/types.ts';\r\nimport { createThreadMessage } from 'server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type { MessageContent } from 'common/types/index.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { ipToLocation } from 'docs/lib/geoip/geoip.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishUserIdentityUpdate } from 'server/src/pubsub/index.ts';\r\n\r\nconst defaultMessage = [\r\n  {\r\n    type: 'p',\r\n    children: [\r\n      {\r\n        text: 'Oh, and comments! Like this. Go on, give it a try by replying \uD83D\uDC47',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst altMessage1 = [\r\n  {\r\n    type: 'p',\r\n    children: [\r\n      {\r\n        text: \"With Cord's SDK, you can add these features (and more) to your product in just a few lines of code\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'p',\r\n    children: [{ text: 'Seriously.' }],\r\n  },\r\n];\r\n\r\nconst altMessage2 = [\r\n  {\r\n    type: 'p',\r\n    children: [\r\n      {\r\n        text: 'Ya know, with features that make it easier for people to collaborate',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'p',\r\n    children: [{ text: 'Things like:' }],\r\n  },\r\n  {\r\n    type: 'bullet',\r\n    children: [{ type: 'p', children: [{ text: 'Comments' }] }],\r\n  },\r\n  {\r\n    type: 'bullet',\r\n    children: [{ type: 'p', children: [{ text: 'Live chat' }] }],\r\n  },\r\n  {\r\n    type: 'bullet',\r\n    children: [{ type: 'p', children: [{ text: 'Notifications' }] }],\r\n  },\r\n];\r\n\r\nconst MESSAGES: [string, MessageContent][] = [\r\n  ['default', defaultMessage as MessageContent],\r\n  ['alt1', altMessage1 as MessageContent],\r\n  ['alt2', altMessage2 as MessageContent],\r\n];\r\n\r\nexport async function create(): Promise<DemoUser> {\r\n  const baseValue = uuid();\r\n  const userID = baseValue + ':user';\r\n  const orgID = baseValue + ':org';\r\n  const threadID = baseValue + ':thread';\r\n\r\n  const user = await createPlatformUser(\r\n    null,\r\n    CORD_HOMEPAGE_APPLICATION_ID,\r\n    userID,\r\n    null,\r\n    'You',\r\n    null,\r\n    null,\r\n    'active',\r\n    null,\r\n    null,\r\n  );\r\n  const [[org], [all]] = await Promise.all([\r\n    findOrCreatePlatformOrganization(\r\n      CORD_HOMEPAGE_APPLICATION_ID,\r\n      orgID,\r\n      'Your Org',\r\n      'active',\r\n    ),\r\n    findOrCreatePlatformOrganization(\r\n      CORD_HOMEPAGE_APPLICATION_ID,\r\n      'all',\r\n      'all',\r\n      'active',\r\n    ),\r\n  ]);\r\n  await Promise.all([\r\n    // These users are created by scripts/homepage-create-users.sh and should\r\n    // always be present.\r\n    updatePlatformOrganizationMembers(org, [\r\n      userID,\r\n      'sam',\r\n      'nimrod',\r\n      'khadija',\r\n      'myhoa',\r\n      'tom',\r\n      'zora',\r\n    ]),\r\n    OrgMembersEntity.create({\r\n      userID: user.id,\r\n      orgID: all.id,\r\n    }),\r\n  ]);\r\n  await Promise.all(\r\n    MESSAGES.map(([id, message]) =>\r\n      createThreadMessage({\r\n        platformApplicationID: CORD_HOMEPAGE_APPLICATION_ID,\r\n        threadID: threadID + '-' + id,\r\n        internalMessageID: uuid(),\r\n        authorID: 'zora',\r\n        content: message,\r\n        addReactions: [\r\n          {\r\n            userID: 'tom',\r\n            reaction: '\uD83D\uDC4D',\r\n          },\r\n          {\r\n            userID: 'myhoa',\r\n            reaction: '\uD83D\uDC4D',\r\n          },\r\n          {\r\n            userID: 'tom',\r\n            reaction: '\u2764\uFE0F',\r\n          },\r\n          {\r\n            userID: 'myhoa',\r\n            reaction: '\u2764\uFE0F',\r\n          },\r\n          {\r\n            userID: 'khadija',\r\n            reaction: '\u2764\uFE0F',\r\n          },\r\n          {\r\n            userID: 'sam',\r\n            reaction: '\u2764\uFE0F',\r\n          },\r\n          {\r\n            userID: 'nimrod',\r\n            reaction: '\u2764\uFE0F',\r\n          },\r\n        ],\r\n        createThread: {\r\n          name: 'Hello',\r\n          url: 'https://v5.cord.com/',\r\n          organizationID: orgID,\r\n          groupID: orgID,\r\n          location: {\r\n            page: 'homepage',\r\n          },\r\n        },\r\n      }),\r\n    ),\r\n  );\r\n\r\n  await createThreadMessage({\r\n    platformApplicationID: CORD_HOMEPAGE_APPLICATION_ID,\r\n    threadID: threadID + '-other',\r\n    internalMessageID: uuid(),\r\n    authorID: 'myhoa',\r\n    content: [\r\n      {\r\n        type: MessageNodeType.PARAGRAPH,\r\n        children: [\r\n          { text: 'To see more of Cord, ' },\r\n          {\r\n            type: MessageNodeType.MENTION,\r\n            user: { id: userID },\r\n            children: [{ text: '@You' }],\r\n          },\r\n          { text: ' should check out our ' },\r\n          {\r\n            type: MessageNodeType.LINK,\r\n            url: 'https://v5.cord.com/demos',\r\n            children: [{ text: 'demos' }],\r\n          },\r\n          { text: '!' },\r\n        ],\r\n      },\r\n    ],\r\n    createThread: {\r\n      name: 'Demos',\r\n      url: 'https://v5.cord.com/demos',\r\n      organizationID: orgID,\r\n      groupID: orgID,\r\n      location: {\r\n        page: 'demos',\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    appID: CORD_HOMEPAGE_APPLICATION_ID,\r\n    userID,\r\n    orgID,\r\n  };\r\n}\r\n\r\nasync function lookupGeoipIntoMetadata(req: Request, demoUser: DemoUser) {\r\n  try {\r\n    const [geoip, user] = await Promise.all([\r\n      ipToLocation(req.ip),\r\n      UserEntity.findOne({\r\n        where: {\r\n          externalID: demoUser.userID,\r\n          platformApplicationID: demoUser.appID,\r\n        },\r\n      }),\r\n    ]);\r\n\r\n    if (user && geoip !== req.ip) {\r\n      await Promise.all([\r\n        user.update({ metadata: { geoip } }),\r\n        publishUserIdentityUpdate({\r\n          userID: user.id,\r\n          platformApplicationID: demoUser.appID,\r\n        }),\r\n      ]);\r\n    }\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      `HomepageDemoUser failed to geoip ${req.ip}`,\r\n      e,\r\n    );\r\n  }\r\n}\r\n\r\nexport async function reheat(\r\n  req: Request,\r\n  user: DemoUser,\r\n  token: string,\r\n): Promise<object> {\r\n  const baseValue = user.userID.substring(0, user.userID.indexOf(':'));\r\n\r\n  // Doing a GeoIP lookup requires calling an external API. We don't want to\r\n  // wait on that before showing demos on the homepage (want that to be as fast\r\n  // as possible!) so don't wait on it. The frontend can fill in a default value\r\n  // if it wins the race.\r\n  backgroundPromise(lookupGeoipIntoMetadata(req, user));\r\n\r\n  return {\r\n    token,\r\n    baseValue,\r\n  };\r\n}\r\n\r\nexport const numToKeep = 10;\r\nexport const version = 3;\r\n", "import * as jwt from 'jsonwebtoken';\r\nimport type { ClientAuthTokenData } from '@cord-sdk/types';\r\n\r\nexport type { ClientAuthTokenData };\r\n\r\nexport type CommonAuthTokenOptions = {\r\n  /**\r\n   * How long until the token expires.  If not set, defaults to 1 minute.\r\n   */\r\n  expires?: jwt.SignOptions['expiresIn'];\r\n};\r\n\r\nexport type GetClientAuthTokenOptions = CommonAuthTokenOptions;\r\n\r\nexport type GetServerAuthTokenOptions = CommonAuthTokenOptions;\r\n\r\nexport type GetApplicationManagementAuthTokenOptions = CommonAuthTokenOptions;\r\n\r\nexport function getClientAuthToken(\r\n  project_id: string,\r\n  project_secret: string,\r\n  payload: Omit<ClientAuthTokenData, 'app_id' | 'project_id'>,\r\n  options: GetClientAuthTokenOptions = {},\r\n): string {\r\n  if (!payload || !payload.user_id) {\r\n    // You can't get here in TS -- it's a TS type error -- but not everyone uses\r\n    // TS.\r\n    throw new Error(\r\n      'Missing user_id. ' +\r\n        'A token without a user_id can be misinterpreted as an administrative server auth token ' +\r\n        '(which should never be given to clients). ' +\r\n        'If you intended to generate a server auth token, call getServerAuthToken instead.',\r\n    );\r\n  }\r\n\r\n  return jwt.sign({ ...payload, project_id }, project_secret, {\r\n    algorithm: 'HS512',\r\n    expiresIn: options.expires ?? '1 min',\r\n  });\r\n}\r\n\r\nexport function getServerAuthToken(\r\n  project_id: string,\r\n  project_secret: string,\r\n  options: GetServerAuthTokenOptions = {},\r\n): string {\r\n  return jwt.sign({ app_id: project_id }, project_secret, {\r\n    algorithm: 'HS512',\r\n    expiresIn: options.expires ?? '1 min',\r\n  });\r\n}\r\n\r\nexport function getApplicationManagementAuthToken(\r\n  customer_id: string,\r\n  customer_secret: string,\r\n  options: GetApplicationManagementAuthTokenOptions = {},\r\n): string {\r\n  return jwt.sign({ customer_id }, customer_secret, {\r\n    algorithm: 'HS512',\r\n    expiresIn: options.expires ?? '1 min',\r\n  });\r\n}\r\n\r\nexport function getProjectManagementAuthToken(\r\n  customer_id: string,\r\n  customer_secret: string,\r\n): string {\r\n  return jwt.sign({ customer_id }, customer_secret, {\r\n    algorithm: 'HS512',\r\n    expiresIn: '1 min',\r\n  });\r\n}\r\n", "import { readFile, unlink } from 'fs/promises';\r\nimport type { Request, Response } from 'express';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { validateFileForUpload } from 'common/uploads/index.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { validate } from 'server/src/public/routes/platform/validatorFunction.ts';\r\nimport { assertValid } from 'server/src/public/routes/platform/files/util.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\n\r\nasync function createFileHandler(req: Request, res: Response) {\r\n  try {\r\n    const platformApplicationID = req.appID;\r\n\r\n    if (!platformApplicationID) {\r\n      throw new ApiCallerError('invalid_request');\r\n    }\r\n\r\n    const {\r\n      name: explicitName,\r\n      ownerID,\r\n      ...rest\r\n    } = validate.CreateFileVariables(req.body);\r\n\r\n    // Check that all properties in CreateFileVariables are destructured\r\n    const _: Record<string, never> = rest;\r\n\r\n    if (!req.file) {\r\n      throw new ApiCallerError('missing_field', {\r\n        message: 'Missing file contents',\r\n      });\r\n    }\r\n\r\n    const owner = await UserEntity.findOne({\r\n      where: {\r\n        externalID: ownerID,\r\n        platformApplicationID,\r\n      },\r\n    });\r\n\r\n    if (!owner) {\r\n      throw new ApiCallerError('invalid_user_id', {\r\n        message: 'Invalid owner ID',\r\n      });\r\n    }\r\n\r\n    const name = explicitName ?? req.file.originalname;\r\n\r\n    assertValid(\r\n      validateFileForUpload('attachment', {\r\n        name,\r\n        mimeType: req.file.mimetype,\r\n        size: req.file.size,\r\n      }),\r\n    );\r\n\r\n    const viewer = await Viewer.createLoggedInPlatformViewer({\r\n      user: owner,\r\n      org: null,\r\n    });\r\n    const loaders = await getNewLoaders(viewer);\r\n\r\n    const fileMutator = new FileMutator(viewer, loaders);\r\n\r\n    const file = await fileMutator.createFileForUpload(\r\n      uuid(),\r\n      name,\r\n      req.file.mimetype,\r\n      req.file.size,\r\n    );\r\n\r\n    const uploadURL = await file.getSignedUploadURL();\r\n\r\n    const response = await fetch(uploadURL, {\r\n      method: 'PUT',\r\n      body: await readFile(req.file.path),\r\n      headers: {\r\n        'Content-Type': file.mimeType,\r\n      },\r\n    });\r\n    if (response.status !== 200) {\r\n      anonymousLogger().error('Error uploading file to S3', {\r\n        uploadURL,\r\n        statusCode: response.status,\r\n        statusMessage: response.statusText,\r\n      });\r\n      res.sendStatus(500);\r\n      return;\r\n    }\r\n\r\n    await fileMutator.setFileUploadStatus(file.id, 'uploaded');\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: '\u2705 File created.',\r\n      fileID: file.id,\r\n    });\r\n  } finally {\r\n    if (req.file) {\r\n      backgroundPromise(unlink(req.file.path));\r\n    }\r\n  }\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(createFileHandler);\r\n", "import type { ValidationResult } from 'common/uploads/index.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport function assertValid(result: ValidationResult) {\r\n  // This should match the logic in common/uploads/index.ts, but it throws\r\n  // ApiCallerError\r\n  if (!result.name) {\r\n    throw new ApiCallerError('file_name_not_allowed', {\r\n      message: `Cannot upload file named ${result.input.name}`,\r\n    });\r\n  }\r\n  if (!result.size) {\r\n    throw new ApiCallerError('file_too_large');\r\n  }\r\n  if (!result.mimeType) {\r\n    throw new ApiCallerError('file_type_not_allowed', {\r\n      message: `Input ${result.input.mimeType} MIME type is not allowed`,\r\n    });\r\n  }\r\n}\r\n", "{\r\n  \"name\": \"@cord-sdk/cli\",\r\n  \"version\": \"1.4.0\",\r\n  \"description\": \"CLI tool for Cord\",\r\n  \"main\": \"index.js\",\r\n  \"homepage\": \"https://docs.cord.com/reference/cord-cli\",\r\n  \"bin\": {\r\n    \"cord\": \"dist/index.js\"\r\n  },\r\n  \"files\": [\r\n    \"dist/index.js\",\r\n    \"README.md\",\r\n    \"LICENSE\"\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/getcord/cli\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"npm run build-common -- --minify\",\r\n    \"dev\": \"tsc --watch --preserveWatchOutput & npm run build-common -- --watch\",\r\n    \"check\": \"tsc && eslint src\",\r\n    \"build-common\": \"esbuild src/index.ts --outdir=dist --bundle --sourcemap --platform=node\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"MIT\",\r\n  \"devDependencies\": {\r\n    \"@cord-sdk/types\": \"^1.34.0\",\r\n    \"@cspell/eslint-plugin\": \"^7.3.2\",\r\n    \"@types/cli-box\": \"^6.0.2\",\r\n    \"@types/inquirer\": \"^9.0.3\",\r\n    \"@types/jest\": \"^29.5.7\",\r\n    \"@types/jsonwebtoken\": \"^9.0.5\",\r\n    \"@types/markdown-it\": \"^13.0.4\",\r\n    \"@types/mime\": \"^3.0.2\",\r\n    \"@types/node\": \"^20.5.7\",\r\n    \"@types/shell-quote\": \"^1.7.5\",\r\n    \"@types/yargs\": \"^17.0.24\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^6.5.0\",\r\n    \"esbuild\": \"^0.19.2\",\r\n    \"eslint\": \"^8.48.0\",\r\n    \"eslint-config-prettier\": \"^9.0.0\",\r\n    \"eslint-import-resolver-typescript\": \"^3.6.0\",\r\n    \"eslint-plugin-import\": \"^2.28.1\",\r\n    \"eslint-plugin-no-relative-import-paths\": \"^1.5.2\",\r\n    \"eslint-plugin-prettier\": \"^5.0.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"ts-jest\": \"^29.1.1\",\r\n    \"typescript\": \"^5.2.2\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@cord-sdk/server\": \"^1.31.2\",\r\n    \"chalk\": \"^5.3.0\",\r\n    \"cli-box\": \"^6.0.10\",\r\n    \"formdata-node\": \"^5.0.1\",\r\n    \"inquirer\": \"^9.2.11\",\r\n    \"jsonwebtoken\": \"^9.0.2\",\r\n    \"markdown-it\": \"^13.0.2\",\r\n    \"mime\": \"^3.0.0\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"shell-quote\": \"^1.8.1\",\r\n    \"yargs\": \"^17.7.2\"\r\n  },\r\n  \"jest\": {\r\n    \"preset\": \"ts-jest\",\r\n    \"testEnvironment\": \"node\",\r\n    \"transform\": {\r\n      \"^.+\\\\.ts?$\": \"ts-jest\"\r\n    },\r\n    \"transformIgnorePatterns\": [\r\n      \"<rootDir>/node_modules/\"\r\n    ],\r\n    \"roots\": [\r\n      \"<rootDir>\"\r\n    ],\r\n    \"modulePaths\": [\r\n      \"<rootDir>\"\r\n    ]\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\n// eslint-disable-next-line no-restricted-imports\r\nimport cliPackageData from 'opensource/cli/package.json';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\n\r\nasync function CliVersionHandler(_: Request, res: Response) {\r\n  res.send({ version: cliPackageData.version });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(CliVersionHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport type { EntityMetadata } from 'common/types/index.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromApplication,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { PermissionRuleEntity } from 'server/src/entity/permission/PermisssionRuleEntity.ts';\r\nimport {\r\n  externalizeID,\r\n  extractInternalID,\r\n  isExternalizedID,\r\n} from 'common/util/externalIDs.ts';\r\n\r\ntype PermissionFilter = {\r\n  id?: string | string[];\r\n  metadata?: EntityMetadata;\r\n};\r\n\r\nfunction multify<T>(x: T | T[]): T[] {\r\n  if (Array.isArray(x)) {\r\n    return x;\r\n  } else {\r\n    return [x];\r\n  }\r\n}\r\n\r\nfunction filterToJsonpath(filter: PermissionFilter): string {\r\n  const result: string[] = [];\r\n\r\n  if (filter.id) {\r\n    result.push(\r\n      ...multify(filter.id).map((id) => `$.id == ${JSON.stringify(id)}`),\r\n    );\r\n  }\r\n\r\n  if (filter.metadata) {\r\n    result.push(\r\n      ...Object.entries(filter.metadata).map(\r\n        ([k, v]) => `$.metadata.${JSON.stringify(k)} == ${JSON.stringify(v)}`,\r\n      ),\r\n    );\r\n  }\r\n\r\n  if (result.length === 0) {\r\n    throw new ApiCallerError('missing_field', { message: 'Empty filter' });\r\n  }\r\n\r\n  return result.join(' && ');\r\n}\r\n\r\nasync function assertFeatureFlagEnabled(\r\n  req: Request,\r\n): Promise<ApplicationEntity> {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const app = await ApplicationEntity.findByPk(platformApplicationID);\r\n  if (!app) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const enablePerms = await getTypedFeatureFlagValue(\r\n    FeatureFlags.GRANULAR_PERMISSIONS,\r\n    flagsUserFromApplication(app),\r\n  );\r\n\r\n  if (!enablePerms) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      code: 418,\r\n      message:\r\n        \"Permissions aren't available yet, but we'd love to hear from you if you're this eager to try them out!\",\r\n    });\r\n  }\r\n\r\n  return app;\r\n}\r\n\r\nasync function createPlatformPermissionHandler(req: Request, res: Response) {\r\n  const app = await assertFeatureFlagEnabled(req);\r\n\r\n  const rule = await PermissionRuleEntity.create({\r\n    platformApplicationID: app.id,\r\n    userSelector: filterToJsonpath(req.body.userFilter),\r\n    resourceSelector: filterToJsonpath(req.body.resourceFilter),\r\n    permissions: multify(req.body.permission),\r\n  });\r\n\r\n  return res.status(201).json({\r\n    success: true,\r\n    message: `\u2705 ${externalizeID(rule.id)}`,\r\n  });\r\n}\r\n\r\nasync function deletePlatformPermissionHandler(req: Request, res: Response) {\r\n  const app = await assertFeatureFlagEnabled(req);\r\n\r\n  if (!isExternalizedID(req.params.ruleID)) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  await PermissionRuleEntity.destroy({\r\n    where: {\r\n      id: extractInternalID(req.params.ruleID)!,\r\n      platformApplicationID: app.id,\r\n    },\r\n  });\r\n\r\n  return res.status(200).json({\r\n    success: true,\r\n    message: '\uD83D\uDC80',\r\n  });\r\n}\r\n\r\nexport default {\r\n  create: forwardHandlerExceptionsToNext(createPlatformPermissionHandler),\r\n  delete: forwardHandlerExceptionsToNext(deletePlatformPermissionHandler),\r\n};\r\n", "import Stripe from 'stripe';\r\nimport type { Request, Response } from 'express';\r\nimport type { RequestWithRawBody } from 'server/src/middleware/encoding.ts';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { updateSubscriptionData } from 'server/src/util/stripe.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\n\r\nasync function StripeWebhookHandler(req: Request, res: Response) {\r\n  const sig = req.headers['stripe-signature'];\r\n  if (typeof sig !== 'string') {\r\n    return res.status(400).send('Unexpected value for signature header');\r\n  }\r\n\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);\r\n  const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET_KEY!;\r\n\r\n  let event;\r\n  try {\r\n    event = stripe.webhooks.constructEvent(\r\n      (req as RequestWithRawBody).rawBody,\r\n      sig,\r\n      endpointSecret,\r\n    );\r\n  } catch (e: any) {\r\n    anonymousLogger().logException(\r\n      'StripeWebhookHandler error constructing event',\r\n      e,\r\n    );\r\n    return res.status(400).send(`Webhook Error: ${e?.message}`);\r\n  }\r\n\r\n  if (!event) {\r\n    return res.status(400).send('Could not get event');\r\n  }\r\n\r\n  try {\r\n    switch (event.type) {\r\n      // The udpated event is sent by Stripe when some information about the subcription changes\r\n      // and the deleted event is sent when a subscription ends\r\n      case 'customer.subscription.created':\r\n      case 'customer.subscription.updated':\r\n      case 'customer.subscription.deleted':\r\n        await updateSubscriptionData(event.data.object, event.type);\r\n        break;\r\n      default:\r\n        return res.status(400).send(`Unhandled event type: ${event.type}`);\r\n    }\r\n  } catch (e: any) {\r\n    anonymousLogger().logException(\r\n      'StripeWebhookHandler error handling event',\r\n      e,\r\n      { webhookID: event.id },\r\n    );\r\n    return res.status(400).send(`Webhook Error: ${e?.message}`);\r\n  }\r\n\r\n  return res.json({ received: true });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(StripeWebhookHandler);\r\n", "import Stripe from 'stripe';\r\n\r\nimport type { PricingTier } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport { CORD_SELF_SERVE_SLACK_CHANNEL_ID } from 'common/const/Ids.ts';\r\nimport { ADMIN_ORIGIN } from 'common/const/Urls.ts';\r\n\r\nenum StripePricingTier {\r\n  PRO = 'pro',\r\n  SCALE = 'scale',\r\n}\r\n\r\nexport async function getStripeCustomerID(\r\n  customerID: string,\r\n): Promise<string | null> {\r\n  const customer = await CustomerEntity.findOne({ where: { id: customerID } });\r\n  if (!customer) {\r\n    throw new Error('could not load customer');\r\n  }\r\n  return customer.stripeCustomerID;\r\n}\r\n\r\nexport async function getOrCreateStripeCustomer({\r\n  stripe,\r\n  customerID,\r\n  email,\r\n  country,\r\n  postcode,\r\n}: {\r\n  stripe: Stripe;\r\n  customerID: string;\r\n  email: string;\r\n  country?: string;\r\n  postcode?: string;\r\n}): Promise<Stripe.Customer> {\r\n  const stripeCustomerID = await getStripeCustomerID(customerID);\r\n\r\n  if (stripeCustomerID) {\r\n    const stripeCustomer = await stripe.customers.retrieve(stripeCustomerID);\r\n    if (!stripeCustomer) {\r\n      throw new Error('could not load stripe customer');\r\n    } else if (stripeCustomer.deleted) {\r\n      throw new Error('stripe customer was deleted');\r\n    }\r\n    return stripeCustomer;\r\n  }\r\n\r\n  // We don't have an internal reference, but it might exist in Stripe\r\n  const stripeCustomers = await stripe.customers.search({\r\n    query: `metadata['customer_id']:'${customerID}'`,\r\n  });\r\n\r\n  if (stripeCustomers.data.length > 0) {\r\n    const stripeCustomer = stripeCustomers.data[0];\r\n    // Need to save it internally before we exit\r\n    await saveStripeCustomerID(customerID, stripeCustomer.id);\r\n    return stripeCustomer;\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n  if (!customer) {\r\n    throw new Error('could not load customer data');\r\n  }\r\n\r\n  // The Stripe customer doesn't exist yet\r\n  const newStripeCustomer = await stripe.customers.create({\r\n    name: customer.name,\r\n    email: email,\r\n    metadata: { customer_id: customerID, env: env.CORD_TIER },\r\n    address: { country, postal_code: postcode },\r\n  });\r\n\r\n  await saveStripeCustomerID(customerID, newStripeCustomer.id);\r\n  return newStripeCustomer;\r\n}\r\n\r\nasync function saveStripeCustomerID(internalID: string, stripeID: string) {\r\n  const [updated] = await CustomerEntity.update(\r\n    {\r\n      stripeCustomerID: stripeID,\r\n    },\r\n    { where: { id: internalID } },\r\n  );\r\n\r\n  if (updated === 0) {\r\n    throw new Error('could not update');\r\n  }\r\n}\r\n\r\nexport async function getNotInactiveStripeSubscriptions(\r\n  stripe: Stripe,\r\n  customer: Stripe.Customer,\r\n): Promise<Stripe.Subscription[]> {\r\n  const [activeSubscriptions, pastDueSubscriptions] = await Promise.all([\r\n    getStripeSubscriptionsWithState(stripe, customer, 'active'),\r\n    getStripeSubscriptionsWithState(stripe, customer, 'past_due'),\r\n  ]);\r\n\r\n  return [...activeSubscriptions, ...pastDueSubscriptions];\r\n}\r\n\r\nasync function getStripeSubscriptionsWithState(\r\n  stripe: Stripe,\r\n  customer: Stripe.Customer,\r\n  status: Stripe.SubscriptionListParams.Status,\r\n): Promise<Stripe.Subscription[]> {\r\n  const subscriptions: Stripe.ApiList<Stripe.Subscription> =\r\n    await stripe.subscriptions.list({\r\n      customer: customer.id,\r\n      status,\r\n    });\r\n  return subscriptions.data ?? [];\r\n}\r\n\r\nexport function isStripeProductID(value: string): value is StripePricingTier {\r\n  return Object.values(StripePricingTier).includes(value as StripePricingTier);\r\n}\r\n\r\nexport async function getStripePriceID(\r\n  stripe: Stripe,\r\n  productKey: StripePricingTier,\r\n): Promise<string> {\r\n  const prices = await stripe.prices.list({\r\n    lookup_keys: [productKey],\r\n    expand: ['data.product'],\r\n  });\r\n  if (prices.data.length < 1) {\r\n    throw new Error('prices list is empty');\r\n  }\r\n  return prices.data[0].id;\r\n}\r\n\r\nexport async function updateSubscriptionData(\r\n  subscription: Stripe.Subscription,\r\n  eventType: string,\r\n) {\r\n  if (subscription.metadata.env !== env.CORD_TIER) {\r\n    return;\r\n  }\r\n\r\n  const internalCustomer = await CustomerEntity.findOne({\r\n    where: { stripeCustomerID: subscription.customer },\r\n  });\r\n\r\n  if (!internalCustomer) {\r\n    throw new Error('unknown customer to update');\r\n  }\r\n\r\n  internalCustomer.pricingTier = await getBillingTierFromSubscription(\r\n    subscription,\r\n    internalCustomer,\r\n  );\r\n  internalCustomer.billingStatus = subscription.status;\r\n  internalCustomer.billingType = 'stripe';\r\n  internalCustomer.renewalDate = new Date(\r\n    subscription.current_period_end * 1000,\r\n  );\r\n  const savedInternalCustomer = await internalCustomer.save();\r\n\r\n  await Promise.all([\r\n    publishPubSubEvent(\r\n      'customer-subscription-updated',\r\n      {\r\n        customerID: internalCustomer.id,\r\n      },\r\n      { customerID: internalCustomer.id },\r\n    ),\r\n    sendSubscriptionUpdateToClack(eventType, savedInternalCustomer),\r\n  ]);\r\n}\r\n\r\nasync function getBillingTierFromSubscription(\r\n  subscription: Stripe.Subscription,\r\n  internalCustomer: CustomerEntity,\r\n): Promise<PricingTier> {\r\n  try {\r\n    // Don't downgrade tiers automatically, we will keep customers in\r\n    // their tier even if payment fails\r\n    if (internalCustomer && internalCustomer.pricingTier !== 'free') {\r\n      return internalCustomer.pricingTier;\r\n    }\r\n\r\n    const items = subscription.items.data;\r\n    // We only support subscriptions with 1 item for now.\r\n    // We might add addons in the future and this will change.\r\n    if (items.length !== 1) {\r\n      throw new Error('more than 1 item in subscription');\r\n    }\r\n    const product = items[0].plan.product;\r\n    const productID = typeof product === 'string' ? product : product?.id;\r\n\r\n    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);\r\n    const stripeProduct = await stripe.products.retrieve(productID!);\r\n    return getPricingPlanFromStripePricingTier(\r\n      stripeProduct.metadata['pricing_tier'],\r\n    );\r\n  } catch (e: any) {\r\n    anonymousLogger().logException('Problem getting billing tier', e, {\r\n      subscriptionID: subscription.id,\r\n    });\r\n    throw e;\r\n  }\r\n}\r\n\r\nfunction getPricingPlanFromStripePricingTier(\r\n  stripePricingTier: string,\r\n): PricingTier {\r\n  switch (stripePricingTier) {\r\n    case StripePricingTier.PRO:\r\n      return 'pro';\r\n    case StripePricingTier.SCALE:\r\n      return 'scale';\r\n  }\r\n\r\n  throw new Error(`unknown stripe pricing tier: \"${stripePricingTier}\"`);\r\n}\r\n\r\nasync function sendSubscriptionUpdateToClack(\r\n  eventType: string,\r\n  internalCustomer: CustomerEntity,\r\n) {\r\n  let message = null;\r\n\r\n  const customerAddress = `${ADMIN_ORIGIN}/customers/${internalCustomer.id}`;\r\n  const plan = internalCustomer.pricingTier;\r\n  const status = internalCustomer.billingStatus;\r\n\r\n  switch (eventType) {\r\n    case 'customer.subscription.created':\r\n      message = `\uD83D\uDCB0\u2795 New Stripe subscription (${plan}, ${status}) - ${internalCustomer.name} - ${customerAddress}`;\r\n      break;\r\n    case 'customer.subscription.updated':\r\n      message = `\uD83D\uDCB0\u270F\uFE0F Stripe subscription updated (${plan}, ${status}) - ${internalCustomer.name} - ${customerAddress}`;\r\n      break;\r\n    case 'customer.subscription.deleted':\r\n      message = `\uD83D\uDCB0\u2796 Stripe subscription cancelled (${plan}, ${status}) - ${internalCustomer.name} - ${customerAddress}`;\r\n      break;\r\n  }\r\n\r\n  if (message === null) {\r\n    return;\r\n  }\r\n\r\n  await sendMessageToCord(\r\n    message,\r\n    CORD_SELF_SERVE_SLACK_CHANNEL_ID,\r\n    'selfserve',\r\n  );\r\n}\r\n\r\nexport async function createSubscription({\r\n  stripe,\r\n  stripeCustomerID,\r\n  stripePriceID,\r\n}: {\r\n  stripe: Stripe;\r\n  stripeCustomerID: string;\r\n  stripePriceID: string;\r\n}): Promise<Stripe.Subscription> {\r\n  const subscription = await stripe.subscriptions.create({\r\n    customer: stripeCustomerID,\r\n    items: [\r\n      {\r\n        price: stripePriceID,\r\n      },\r\n    ],\r\n    automatic_tax: {\r\n      enabled: true,\r\n    },\r\n    collection_method: 'send_invoice',\r\n    days_until_due: 0,\r\n    metadata: { env: env.CORD_TIER },\r\n  });\r\n\r\n  return subscription;\r\n}\r\n\r\nexport async function finalizeInvoice(stripe: Stripe, invoiceID: string) {\r\n  await stripe.invoices.finalizeInvoice(invoiceID);\r\n}\r\n\r\nexport async function getSubscriptionData(\r\n  customer: CustomerEntity,\r\n): Promise<Stripe.Subscription | null> {\r\n  const stripeCustomerID = await getStripeCustomerID(customer.id);\r\n  if (!stripeCustomerID) {\r\n    return null;\r\n  }\r\n\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);\r\n  const [activeSubscriptions, pastDueSubscriptions] = await Promise.all([\r\n    stripe.subscriptions.list({\r\n      customer: stripeCustomerID,\r\n      status: 'active',\r\n    }),\r\n    stripe.subscriptions.list({\r\n      customer: stripeCustomerID,\r\n      status: 'past_due',\r\n    }),\r\n  ]);\r\n\r\n  if (activeSubscriptions.data.length + pastDueSubscriptions.data.length > 1) {\r\n    throw new Error(\r\n      `More than one subscription for the customer ${customer.id}`,\r\n    );\r\n  } else if (activeSubscriptions.data.length > 0) {\r\n    return activeSubscriptions.data[0];\r\n  } else if (pastDueSubscriptions.data.length > 0) {\r\n    return pastDueSubscriptions.data[0];\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getPlanName(pricingTier: PricingTier) {\r\n  switch (pricingTier) {\r\n    case 'free':\r\n      return 'Starter';\r\n    case 'pro':\r\n      return 'Pro';\r\n    case 'scale':\r\n      return 'Premium';\r\n  }\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport type {\r\n  ServerListGroupMember,\r\n  ServerListGroupMembers,\r\n} from '@cord-sdk/types';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { isValidExternalID } from 'common/util/externalIDs.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport {\r\n  validateLimit,\r\n  validatePaginationToken,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\n\r\nconst DEFAULT_LIMIT = 1000;\r\n\r\ninterface PaginationToken {\r\n  userID: string;\r\n  externalID: string;\r\n}\r\n\r\nfunction encodeToken(token: PaginationToken): string {\r\n  return btoa(JSON.stringify(token));\r\n}\r\n\r\nasync function listOrganizationMembersHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (!platformApplicationID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  const externalID = req.params.orgID;\r\n  if (!externalID) {\r\n    throw new ApiCallerError('group_not_found');\r\n  }\r\n\r\n  if (!isValidExternalID(externalID)) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n\r\n  const org = await OrgEntity.findOne({\r\n    where: {\r\n      externalID,\r\n      externalProvider: AuthProviderType.PLATFORM,\r\n      platformApplicationID,\r\n    },\r\n  });\r\n\r\n  if (!org) {\r\n    throw new ApiCallerError('group_not_found', { code: 404 });\r\n  }\r\n\r\n  const where: WhereOptions<OrgMembersEntity> = {\r\n    orgID: org.id,\r\n  };\r\n\r\n  const { token, limit } = req.query;\r\n\r\n  const decodedToken: PaginationToken | undefined = validatePaginationToken({\r\n    token,\r\n    endpoint: 'org-members',\r\n  });\r\n  const parsedLimit = validateLimit(limit, DEFAULT_LIMIT);\r\n\r\n  const whereWithPagination: WhereOptions<OrgMembersEntity> = {\r\n    ...where,\r\n    ...(decodedToken && { userID: { [Op.gt]: decodedToken.userID } }),\r\n  };\r\n\r\n  const [members, membersCount, membersRemainingCount] = await Promise.all([\r\n    OrgMembersEntity.findAll({\r\n      where: whereWithPagination,\r\n      order: [['userID', 'ASC']],\r\n      limit: parsedLimit,\r\n    }),\r\n    OrgMembersEntity.count({\r\n      where,\r\n    }),\r\n    OrgMembersEntity.count({\r\n      where: whereWithPagination,\r\n    }),\r\n  ]);\r\n\r\n  const remaining = Math.max(membersRemainingCount - members.length, 0);\r\n\r\n  const memberUserIDs = members.map((member) => member.userID);\r\n\r\n  const users = await UserEntity.findAll({\r\n    where: {\r\n      id: memberUserIDs,\r\n      platformApplicationID,\r\n    },\r\n    order: [['id', 'ASC']],\r\n  });\r\n\r\n  if (members.length > users.length) {\r\n    // This should never happen\r\n    throw new ApiCallerError('group_members_missing');\r\n  }\r\n\r\n  const lastMember = users.length === 0 ? null : users[users.length - 1];\r\n\r\n  const returnToken =\r\n    remaining > 0 && lastMember\r\n      ? encodeToken({\r\n          userID: lastMember.id,\r\n          // Adding the externalID is purely to get over the validating pagination token\r\n          externalID: lastMember.externalID,\r\n        })\r\n      : null;\r\n\r\n  const result: ServerListGroupMembers = {\r\n    users: users.map(\r\n      (user): ServerListGroupMember => ({\r\n        id: user.externalID,\r\n        email: user.email,\r\n        status: user.state,\r\n        name: user.name,\r\n        shortName: user.screenName,\r\n        profilePictureURL: user.profilePictureURL,\r\n        metadata: user.metadata,\r\n        createdTimestamp: user.createdTimestamp,\r\n      }),\r\n    ),\r\n    pagination: {\r\n      token: returnToken,\r\n      total: membersCount,\r\n    },\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(listOrganizationMembersHandler);\r\n", "import Ajv from 'ajv';\r\nimport addFormat from 'ajv-formats';\r\nimport type { Request, Response } from 'express';\r\nimport { QueryTypes } from 'sequelize';\r\nimport type { UUID } from '@cord-sdk/types/core.ts';\r\n\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { AuthProviderType } from 'server/src/auth/index.ts';\r\nimport { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';\r\n\r\n// We want to verify types on this input but do not want this to show in our\r\n// general type information, so we build an AJV validator here to validate\r\n// that the data is of the correct shape\r\ntype MigrationInput = {\r\n  sourceApplicationID: UUID;\r\n  sourceGroupID: string; // This is technically ID, but AJV will coerce it\r\n  destinationApplicationID: UUID;\r\n  destinationGroupID: string; // This is technically ID, but AJV will coerce it\r\n};\r\n\r\nconst MigrationAJVSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    sourceApplicationID: { type: 'string', format: 'uuid' },\r\n    sourceGroupID: { type: 'string' },\r\n    destinationApplicationID: { type: 'string', format: 'uuid' },\r\n    destinationGroupID: { type: 'string' },\r\n  },\r\n  required: [\r\n    'sourceApplicationID',\r\n    'sourceGroupID',\r\n    'destinationApplicationID',\r\n    'destinationGroupID',\r\n  ],\r\n  additionalProperties: false,\r\n};\r\n\r\nconst ajv = new Ajv.default({\r\n  verbose: true,\r\n  coerceTypes: true,\r\n});\r\naddFormat.default(ajv, ['uuid']);\r\n\r\nconst validateInputAgainstSchema = ajv.compile(MigrationAJVSchema);\r\n\r\nfunction validateMigrationInput(\r\n  input: unknown,\r\n): asserts input is MigrationInput {\r\n  if (!validateInputAgainstSchema(input)) {\r\n    throw new Error('Incorrect arguments to endpoint');\r\n  }\r\n}\r\n\r\nasync function ThoughtspotApplicationMigrationHandler(\r\n  req: Request,\r\n  res: Response,\r\n) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  // We only support calling this from Thoughtspot currently\r\n  if (customerID !== '43fdeae8-4b68-4e36-a58d-56085f8e2497') {\r\n    res.sendStatus(404).end();\r\n    return;\r\n  }\r\n  validateMigrationInput(req.body);\r\n\r\n  const {\r\n    sourceApplicationID,\r\n    sourceGroupID,\r\n    destinationApplicationID,\r\n    destinationGroupID,\r\n  } = req.body;\r\n\r\n  const [sourceApp, sourceOrg, destinationApp, destinationOrg] =\r\n    await Promise.all([\r\n      ApplicationEntity.findOne({\r\n        where: { id: sourceApplicationID, customerID },\r\n      }),\r\n      OrgEntity.findOne({\r\n        where: {\r\n          externalID: sourceGroupID,\r\n          platformApplicationID: sourceApplicationID,\r\n        },\r\n      }),\r\n      ApplicationEntity.findOne({\r\n        where: { id: destinationApplicationID, customerID },\r\n      }),\r\n      // Maybe allow findOrCreate or only create\r\n      OrgEntity.findOne({\r\n        where: {\r\n          externalID: destinationGroupID,\r\n          platformApplicationID: destinationApplicationID,\r\n        },\r\n      }),\r\n    ]);\r\n\r\n  if (!sourceApp) {\r\n    throw new ApiCallerError('project_not_found', {\r\n      message: `Unable to load project : ${sourceApplicationID}`,\r\n    });\r\n  }\r\n  if (!sourceOrg) {\r\n    throw new ApiCallerError('group_not_found', {\r\n      message: `Unable to load group : ${sourceGroupID}`,\r\n    });\r\n  }\r\n  if (!destinationApp) {\r\n    throw new ApiCallerError('project_not_found', {\r\n      message: `Unable to load project : ${destinationApplicationID}`,\r\n    });\r\n  }\r\n  if (destinationOrg) {\r\n    throw new ApiCallerError('group_already_exists', {\r\n      message: `Destination group (${destinationGroupID}) already exists`,\r\n    });\r\n  }\r\n  const possibleLinkedOrg = await LinkedOrgsEntity.findOne({\r\n    where: { sourceOrgID: sourceOrg.id },\r\n  });\r\n  if (possibleLinkedOrg) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: `This endpoint does not support migrating groups that are linked with Slack`,\r\n    });\r\n  }\r\n\r\n  // The easy case is we are just moving an org from one id to another in the\r\n  // same application.  In this case we just add a new external id to the\r\n  // existing org and everything just works\r\n  if (sourceApplicationID === destinationApplicationID) {\r\n    await sourceOrg.update({ externalID: destinationGroupID });\r\n  } else {\r\n    // here be dragons\r\n    let bindVariables: (string | number)[] = [sourceApplicationID];\r\n\r\n    const sequelize = getSequelize();\r\n    await sequelize.transaction(\r\n      // { deferrable: Sequelize.Deferrable.SET_DEFERRED, logging: console.log },\r\n      { deferrable: 'SET CONSTRAINTS ALL DEFERRED;' },\r\n      async (transaction) => {\r\n        const usersInMoreThanOneOrg = await sequelize.query<{\r\n          externalID: string;\r\n        }>(\r\n          `\r\nSELECT u.\"externalID\"\r\nFROM users u\r\nINNER JOIN org_members om ON u.id=om.\"userID\"\r\nWHERE \"platformApplicationID\" = $1\r\nGROUP BY u.id\r\nHAVING count(1) > 1`,\r\n          {\r\n            type: QueryTypes.SELECT,\r\n            bind: bindVariables,\r\n            transaction,\r\n          },\r\n        );\r\n        if (usersInMoreThanOneOrg.length) {\r\n          throw new ApiCallerError('invalid_request', {\r\n            message: `User(s) [${usersInMoreThanOneOrg\r\n              .map((u) => u.externalID)\r\n              .join(', ')}] exist in more than one group`,\r\n          });\r\n        }\r\n\r\n        // Create a destination org in the destination application\r\n        const newDestinationOrg = await OrgEntity.create(\r\n          {\r\n            state: 'active',\r\n            name: destinationGroupID,\r\n            externalID: destinationGroupID,\r\n            externalProvider: AuthProviderType.PLATFORM,\r\n            platformApplicationID: destinationApplicationID,\r\n          },\r\n          { transaction },\r\n        );\r\n\r\n        // Update the users to be in the new App ID\r\n        bindVariables = [destinationApplicationID, sourceApplicationID];\r\n        await sequelize.query(\r\n          `\r\nUPDATE users\r\nSET \"platformApplicationID\" = $1\r\nWHERE \"platformApplicationID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update Org Membership\r\n        bindVariables = [newDestinationOrg.id, sourceOrg.id];\r\n        await sequelize.query(\r\n          `\r\nUPDATE org_members\r\nSET \"orgID\" = $1\r\nWHERE \"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update pages table\r\n        await sequelize.query(\r\n          `\r\nUPDATE pages\r\nSET \"orgID\" = $1\r\nWHERE \"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update thread_participants\r\n        await sequelize.query(\r\n          `\r\nUPDATE thread_participants\r\nSET \"orgID\" = $1\r\nWHERE \"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update page_visitors\r\n        await sequelize.query(\r\n          `\r\nUPDATE page_visitors\r\nSET \"orgID\" = $1\r\nWHERE \"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update user_hidden_annotations\r\n        await sequelize.query(\r\n          `\r\nUPDATE user_hidden_annotations\r\nSET \"orgID\" = $1\r\nWHERE \"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update email_notifications\r\n        await sequelize.query(\r\n          `\r\nUPDATE email_notifications\r\nSET \"orgID\" = $1, \"threadOrgID\" = $1\r\nWHERE \"orgID\" = $2 AND \"threadOrgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update message_notifications\r\n        await sequelize.query(\r\n          `\r\nUPDATE message_notifications\r\nSET \"targetOrgID\" = $1, \"sharerOrgID\" = $1\r\nWHERE \"targetOrgID\" = $2 AND \"sharerOrgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update Threads table\r\n        bindVariables = [\r\n          newDestinationOrg.id,\r\n          destinationApplicationID,\r\n          sourceOrg.id,\r\n          sourceApplicationID,\r\n        ];\r\n        await sequelize.query(\r\n          `\r\nUPDATE threads\r\nSET \"orgID\" = $1, \"platformApplicationID\" = $2\r\nWHERE \"orgID\" = $3 AND \"platformApplicationID\" = $4`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update messages\r\n        await sequelize.query(\r\n          `\r\nUPDATE messages\r\nSET \"orgID\" = $1, \"platformApplicationID\" = $2\r\nWHERE \"orgID\" = $3 AND \"platformApplicationID\" = $4`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update files\r\n        bindVariables = [destinationApplicationID, newDestinationOrg.id];\r\n        await sequelize.query(\r\n          `\r\nUPDATE files f\r\nSET \"platformApplicationID\" = $1\r\nFROM messages m\r\nINNER JOIN message_attachments ma on m.id = ma.\"messageID\"\r\nWHERE f.id = (ma.data->>'fileID')::uuid AND m.\"orgID\" = $2 AND m.\"platformApplicationID\" = $1`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Update notifications\r\n        await sequelize.query(\r\n          `\r\nUPDATE notifications n\r\nSET \"platformApplicationID\" = $1\r\nFROM org_members om1, org_members om2\r\nWHERE n.\"recipientID\" = om1.\"userID\" AND n.\"senderID\" = om2.\"userID\"\r\nAND om1.\"orgID\" = om2.\"orgID\" AND om1.\"orgID\" = $2`,\r\n          {\r\n            bind: bindVariables,\r\n            type: QueryTypes.UPDATE,\r\n            transaction,\r\n          },\r\n        );\r\n\r\n        // Currently skipping linked_orgs and linked_users because Thoughtspot\r\n        // only has 4 (out of 738k) slack linked orgs\r\n        // We return an error above if they try this with a slack linked org\r\n        // so we can revisit this if needed\r\n        // linked_orgs\r\n        // linked_users\r\n\r\n        // Skipping all the slack tables as well for the same reasons\r\n        // slack_channels\r\n        // slack_messages\r\n        // slack_mirrored_threads\r\n        // slack_mirrored_support_threads\r\n      },\r\n    );\r\n  }\r\n  return res.json({\r\n    success: true,\r\n    message: `\u2705 migration successful`,\r\n  });\r\n}\r\nexport default forwardHandlerExceptionsToNext(\r\n  ThoughtspotApplicationMigrationHandler,\r\n);\r\n", "import type { Request, Response } from 'express';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { ConsoleUserEntity } from 'server/src/entity/user/ConsoleUserEntity.ts';\r\n\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\n/**\r\n * This handler is used by community.cord.com (https://github.com/getcord/community)\r\n * to associate a user in community with a Customer of Cord.  It is locked down\r\n * to only community's platform application id and works off the assumption that\r\n * the Auth0 id is shared between the two.\r\n */\r\nasync function CommunityGetUserHandler(req: Request, res: Response) {\r\n  const platformApplicationID = req.appID;\r\n  if (platformApplicationID !== '564ddd42-7d11-4ac0-b22c-3bb4e95a3ce2') {\r\n    return res.sendStatus(404).end();\r\n  }\r\n  const userID = req.params.userID;\r\n\r\n  const result: {\r\n    customerID?: string;\r\n    customerName?: string;\r\n    supportEnabled?: boolean;\r\n  } = {};\r\n  const consoleUser = await ConsoleUserEntity.findOne({\r\n    where: { auth0UserID: userID },\r\n  });\r\n  if (!consoleUser) {\r\n    return res.status(200).send({ result });\r\n  }\r\n\r\n  const customerID = consoleUser.customerID;\r\n  if (!customerID) {\r\n    return res.status(200).send(result);\r\n  }\r\n\r\n  const customer = await CustomerEntity.findByPk(customerID);\r\n  if (!customer) {\r\n    return res.status(200).send(result);\r\n  }\r\n\r\n  result.customerID = customer.id;\r\n  result.customerName = customer.name;\r\n  // Consider if this is the right decision point for who gets custom support in community\r\n  // We will probably also want an add-on for this at some point\r\n  // Support can be explicitly enabled or if they are in our premium ('scale') tier\r\n  result.supportEnabled =\r\n    customer.enableCustomerSupport ||\r\n    (customer.pricingTier === 'scale' && customer.billingStatus !== 'inactive');\r\n\r\n  return res.status(200).send(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(CommunityGetUserHandler);\r\n", "// @generated\r\n// to regenerate, run \"npm run codegen\"\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport type { DocumentNode, ExecutionResult } from 'graphql';\r\nimport { execute, subscribe } from 'graphql';\r\nimport type { Maybe } from 'common/types/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { graphQLSchema } from 'server/src/schema/resolvers.ts';\r\n\r\nasync function executeGraphQL<\r\n  TResult,\r\n  TVariables extends Maybe<{ [key: string]: any }>,\r\n>(\r\n  document: DocumentNode,\r\n  context: RequestContext,\r\n  variables?: TVariables,\r\n): Promise<TResult> {\r\n  return extractResult(\r\n    (await execute({\r\n      schema: graphQLSchema,\r\n      document,\r\n      contextValue: context,\r\n      variableValues: variables,\r\n    })) as ExecutionResult<TResult>,\r\n  );\r\n}\r\n\r\nasync function subscribeGraphQL<\r\n  TResult,\r\n  TVariables extends Maybe<{ [key: string]: any }>,\r\n>(\r\n  document: DocumentNode,\r\n  context: RequestContext,\r\n  variables?: TVariables,\r\n): Promise<AsyncIterableIterator<ExecutionResult<TResult>>> {\r\n  const result = (await subscribe({\r\n    schema: graphQLSchema,\r\n    document,\r\n    contextValue: context,\r\n    variableValues: variables,\r\n  })) as\r\n    | ExecutionResult<TResult>\r\n    | AsyncIterableIterator<ExecutionResult<TResult>>;\r\n  if (!(Symbol.asyncIterator in result)) {\r\n    // subscribe only returns an ExecutionResult on an error, so extractResult()\r\n    // will never return, but TS doesn't know that.\r\n    extractResult(result);\r\n    throw new Error('Unknown GraphQL error');\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function extractResult<TResult>(\r\n  result: ExecutionResult<TResult>,\r\n): TResult {\r\n  if (!result.data) {\r\n    if (result.errors?.[0]?.originalError) {\r\n      throw result.errors[0].originalError;\r\n    }\r\n    throw new Error(result.errors?.[0]?.message ?? 'Unknown GraphQL error');\r\n  }\r\n  return result.data;\r\n}\r\n\r\nimport type {\r\n  DateTime,\r\n  ElementIdentifierVersion,\r\n  SimpleValue,\r\n  JSON,\r\n  JSONObject,\r\n  Context,\r\n  Metadata,\r\n  SimpleTranslationParameters,\r\n  MessageContent,\r\n  UUID,\r\n  JsonObjectReducerData,\r\n  FileUploadStatus,\r\n  ViewerThreadFilter,\r\n  ThreadFilterInput,\r\n  SortBy,\r\n  SortDirection,\r\n  LocationFilter,\r\n  ThreadSortInput,\r\n  NotificationFilterInput,\r\n  UserFilterInput,\r\n  MarkThreadsSeenInput,\r\n  TargetType,\r\n  PresenceLiveQueryInput,\r\n  CustomerType,\r\n  CustomerImplementationStage,\r\n  PricingTier,\r\n  BillingType,\r\n  BillingStatus,\r\n  StripeSubscriptionRecurrence,\r\n  ApplicationTierType,\r\n  ApplicationEnvironment,\r\n  OrgMemberState,\r\n  UserType,\r\n  ThirdPartyConnectionType,\r\n  SlackStateLinkingType,\r\n  ImportedSlackMessageType,\r\n  MessageType,\r\n  PageContextInput,\r\n  OrganizationState,\r\n  LogEventInput,\r\n  LogLevelType,\r\n  FileAttachmentInput,\r\n  Point2DInput,\r\n  AnnotationAttachmentInput,\r\n  ScreenshotAttachmentInput,\r\n  DocumentLocationInput,\r\n  AdditionalTargetDataInput,\r\n  MonacoEditorInput,\r\n  ReactTreeInput,\r\n  KonvaCanvasInput,\r\n  MultimediaConfigInput,\r\n  HighlightedTextConfigInput,\r\n  LocationTextConfigInput,\r\n  ElementIdentifierInput,\r\n  TaskInput,\r\n  TaskTodoInput,\r\n  TaskDoneStatusUpdate,\r\n  TaskInputType,\r\n  CreateThreadMessageInput,\r\n  CreateMessageByExternalIDInput,\r\n  UpdateMessageByExternalIDInput,\r\n  CreateThreadInput,\r\n  ThreadOptionsInput,\r\n  ThreadByExternalID2Input,\r\n  FileUploadStatusEnumType,\r\n  LogoConfigInput,\r\n  NotificationReadStatus,\r\n  AdminGoRedirectInputType,\r\n  AdminCRTComingFrom,\r\n  AdminCRTDecision,\r\n  AdminCRTCommunicationStatus,\r\n  AdminCRTIssueType,\r\n  AdminCRTPriority,\r\n  AdminCRTNextAction,\r\n  SearchLocationOptions,\r\n  TimestampRange,\r\n  SearchSortByOptions,\r\n  SearchSortInput,\r\n  CustomNUXStepContentFragment,\r\n  FileFragment,\r\n  HighlightedTextConfigFragment,\r\n  InboxThreadFragment,\r\n  InboxThreadFragment2Fragment,\r\n  MessageAnnotationAttachmentFragment,\r\n  MessageFileAttachmentFragment,\r\n  MessageFragment,\r\n  MessageLinkPreviewFragment,\r\n  MessageReactionFragment,\r\n  MessageScreenshotAttachmentFragment,\r\n  NotificationsMessageFragment,\r\n  NotificationsNodeFragment,\r\n  OrganizationFragment,\r\n  PageVisitorFragment,\r\n  TaskFragment,\r\n  ThreadActivitySummaryFragment,\r\n  ThreadByExternalIDFragment,\r\n  ThreadFragment,\r\n  ThreadFragmentBaseFragment,\r\n  ThreadParticipantFragment,\r\n  UserFragment,\r\n  ViewerIdentityFragment,\r\n  AccessTokenQueryResult,\r\n  AccessTokenQueryVariables,\r\n  ActivityQueryResult,\r\n  ActivityQueryVariables,\r\n  AddThreadToSlackChannelMutationResult,\r\n  AddThreadToSlackChannelMutationVariables,\r\n  AnnotationsOnPageQueryResult,\r\n  AnnotationsOnPageQueryVariables,\r\n  AnnotationsOnPageSubscriptionResult,\r\n  AnnotationsOnPageSubscriptionVariables,\r\n  ApplicationSpecificationsQueryResult,\r\n  AutocompleteQueryResult,\r\n  AutocompleteQueryVariables,\r\n  BootstrapQueryResult,\r\n  BootstrapQueryVariables,\r\n  CanEditExternalTaskQueryResult,\r\n  CanEditExternalTaskQueryVariables,\r\n  ClearDeepLinkThreadIDMutationResult,\r\n  ConversationThreadsQueryResult,\r\n  ConversationThreadsQueryVariables,\r\n  CreateFileMutationResult,\r\n  CreateFileMutationVariables,\r\n  CreateMessageByExternalIDMutationResult,\r\n  CreateMessageByExternalIDMutationVariables,\r\n  CreateMessageReactionMutationResult,\r\n  CreateMessageReactionMutationVariables,\r\n  CreateThreadMutationResult,\r\n  CreateThreadMutationVariables,\r\n  CreateThreadMessageMutationResult,\r\n  CreateThreadMessageMutationVariables,\r\n  DeepLinkThreadIDQueryResult,\r\n  DeleteMessageReactionMutationResult,\r\n  DeleteMessageReactionMutationVariables,\r\n  DeleteNotificationMutationResult,\r\n  DeleteNotificationMutationVariables,\r\n  DisconnectThirdPartyMutationResult,\r\n  DisconnectThirdPartyMutationVariables,\r\n  FeatureFlagsQueryResult,\r\n  FeatureFlagsQueryVariables,\r\n  HideLinkPreviewMutationResult,\r\n  HideLinkPreviewMutationVariables,\r\n  InboxCountQueryResult,\r\n  InboxQueryResult,\r\n  InboxSubscriptionResult,\r\n  LoadMessagesToDeepLinkedMessageQueryResult,\r\n  LoadMessagesToDeepLinkedMessageQueryVariables,\r\n  LogDeprecationMutationResult,\r\n  LogDeprecationMutationVariables,\r\n  LogEventsMutationResult,\r\n  LogEventsMutationVariables,\r\n  MarkAllNotificationsAsReadMutationResult,\r\n  MarkAllNotificationsAsReadMutationVariables,\r\n  ClearNotificationsForMessageMutationResult,\r\n  ClearNotificationsForMessageMutationVariables,\r\n  MarkNotificationAsReadMutationResult,\r\n  MarkNotificationAsReadMutationVariables,\r\n  MarkNotificationAsUnreadMutationResult,\r\n  MarkNotificationAsUnreadMutationVariables,\r\n  MarkThreadSeenMutationResult,\r\n  MarkThreadSeenMutationVariables,\r\n  MarkThreadsSeenMutationResult,\r\n  MarkThreadsSeenMutationVariables,\r\n  MessageByExternalIDQueryResult,\r\n  MessageByExternalIDQueryVariables,\r\n  MessageByExternalIDWithThreadQueryResult,\r\n  MessageByExternalIDWithThreadQueryVariables,\r\n  MessageContentSearchQueryResult,\r\n  MessageContentSearchQueryVariables,\r\n  NotificationByExternalIDQueryResult,\r\n  NotificationByExternalIDQueryVariables,\r\n  NotificationSummaryQueryResult,\r\n  NotificationSummaryQueryVariables,\r\n  NotificationSummarySubscriptionResult,\r\n  NotificationSummarySubscriptionVariables,\r\n  NotificationsQueryResult,\r\n  NotificationsQueryVariables,\r\n  NotificationEventsSubscriptionResult,\r\n  NotificationEventsSubscriptionVariables,\r\n  OlderThreadMessagesQueryResult,\r\n  OlderThreadMessagesQueryVariables,\r\n  OrgMembersByExtIDPaginatedQueryResult,\r\n  OrgMembersByExtIDPaginatedQueryVariables,\r\n  OrgMembersUpdatedSubscriptionResult,\r\n  OrgMembersUpdatedSubscriptionVariables,\r\n  PingQueryResult,\r\n  PreferencesSubscriptionResult,\r\n  PresenceLiveQuerySubscriptionResult,\r\n  PresenceLiveQuerySubscriptionVariables,\r\n  RefreshFileUploadURLMutationResult,\r\n  RefreshFileUploadURLMutationVariables,\r\n  ResetUserHiddenAnnotationsMutationResult,\r\n  SendSampleWelcomeMessageMutationResult,\r\n  SendSampleWelcomeMessageMutationVariables,\r\n  SetAnnotationVisibleMutationResult,\r\n  SetAnnotationVisibleMutationVariables,\r\n  SetDeepLinkThreadIDMutationResult,\r\n  SetDeepLinkThreadIDMutationVariables,\r\n  SetFileUploadStatusMutationResult,\r\n  SetFileUploadStatusMutationVariables,\r\n  SetPreferenceMutationResult,\r\n  SetPreferenceMutationVariables,\r\n  SetPresentContextMutationResult,\r\n  SetPresentContextMutationVariables,\r\n  SetSubscribedByExternalIDMutationResult,\r\n  SetSubscribedByExternalIDMutationVariables,\r\n  SetSubscribedMutationResult,\r\n  SetSubscribedMutationVariables,\r\n  SetThreadMetadataMutationResult,\r\n  SetThreadMetadataMutationVariables,\r\n  SetThreadNameMutationResult,\r\n  SetThreadNameMutationVariables,\r\n  SetThreadResolvedMutationResult,\r\n  SetThreadResolvedMutationVariables,\r\n  SetTypingMutationResult,\r\n  SetTypingMutationVariables,\r\n  ShareThreadToEmailMutationResult,\r\n  ShareThreadToEmailMutationVariables,\r\n  SlackChannelsQueryResult,\r\n  SlackChannelsQueryVariables,\r\n  SlackConnectedLiveQuerySubscriptionResult,\r\n  SlackConnectedLiveQuerySubscriptionVariables,\r\n  ThirdPartyConnectionConfigurationQueryResult,\r\n  ThirdPartyConnectionConfigurationQueryVariables,\r\n  ThirdPartyConnectionsQueryResult,\r\n  ThirdPartyConnectionsQueryVariables,\r\n  Thread2QueryResult,\r\n  Thread2QueryVariables,\r\n  ThreadActivityQueryResult,\r\n  ThreadActivityQueryVariables,\r\n  ThreadActivitySummarySubscriptionResult,\r\n  ThreadActivitySummarySubscriptionVariables,\r\n  ThreadByExternalID2QueryResult,\r\n  ThreadByExternalID2QueryVariables,\r\n  ThreadEventsSubscriptionResult,\r\n  ThreadEventsSubscriptionVariables,\r\n  ThreadListEventsWithLocationSubscriptionResult,\r\n  ThreadListEventsWithLocationSubscriptionVariables,\r\n  ThreadListQueryResult,\r\n  ThreadListQueryVariables,\r\n  UnlinkOrgMutationResult,\r\n  UnlinkOrgMutationVariables,\r\n  UnreadMessageCountQueryResult,\r\n  UnreadMessageCountQueryVariables,\r\n  UpdateMessageByExternalIDMutationResult,\r\n  UpdateMessageByExternalIDMutationVariables,\r\n  UpdateMessageMutationResult,\r\n  UpdateMessageMutationVariables,\r\n  UpdateThreadByExternalIDMutationResult,\r\n  UpdateThreadByExternalIDMutationVariables,\r\n  UserLiveQuerySubscriptionResult,\r\n  UserLiveQuerySubscriptionVariables,\r\n  UsersByExternalIDQueryResult,\r\n  UsersByExternalIDQueryVariables,\r\n  UsersQueryResult,\r\n  UsersQueryVariables,\r\n  ViewerIdentityLiveQuerySubscriptionResult,\r\n  ViewerIdentityLiveQuerySubscriptionVariables,\r\n  ViewerIdentityQueryResult,\r\n  ViewerIdentityQueryVariables,\r\n} from 'common/graphql/types.ts';\r\nexport type {\r\n  DateTime,\r\n  ElementIdentifierVersion,\r\n  SimpleValue,\r\n  JSON,\r\n  JSONObject,\r\n  Context,\r\n  Metadata,\r\n  SimpleTranslationParameters,\r\n  MessageContent,\r\n  UUID,\r\n  JsonObjectReducerData,\r\n  FileUploadStatus,\r\n  ViewerThreadFilter,\r\n  ThreadFilterInput,\r\n  SortBy,\r\n  SortDirection,\r\n  LocationFilter,\r\n  ThreadSortInput,\r\n  NotificationFilterInput,\r\n  UserFilterInput,\r\n  MarkThreadsSeenInput,\r\n  TargetType,\r\n  PresenceLiveQueryInput,\r\n  CustomerType,\r\n  CustomerImplementationStage,\r\n  PricingTier,\r\n  BillingType,\r\n  BillingStatus,\r\n  StripeSubscriptionRecurrence,\r\n  ApplicationTierType,\r\n  ApplicationEnvironment,\r\n  OrgMemberState,\r\n  UserType,\r\n  ThirdPartyConnectionType,\r\n  SlackStateLinkingType,\r\n  ImportedSlackMessageType,\r\n  MessageType,\r\n  PageContextInput,\r\n  OrganizationState,\r\n  LogEventInput,\r\n  LogLevelType,\r\n  FileAttachmentInput,\r\n  Point2DInput,\r\n  AnnotationAttachmentInput,\r\n  ScreenshotAttachmentInput,\r\n  DocumentLocationInput,\r\n  AdditionalTargetDataInput,\r\n  MonacoEditorInput,\r\n  ReactTreeInput,\r\n  KonvaCanvasInput,\r\n  MultimediaConfigInput,\r\n  HighlightedTextConfigInput,\r\n  LocationTextConfigInput,\r\n  ElementIdentifierInput,\r\n  TaskInput,\r\n  TaskTodoInput,\r\n  TaskDoneStatusUpdate,\r\n  TaskInputType,\r\n  CreateThreadMessageInput,\r\n  CreateMessageByExternalIDInput,\r\n  UpdateMessageByExternalIDInput,\r\n  CreateThreadInput,\r\n  ThreadOptionsInput,\r\n  ThreadByExternalID2Input,\r\n  FileUploadStatusEnumType,\r\n  LogoConfigInput,\r\n  NotificationReadStatus,\r\n  AdminGoRedirectInputType,\r\n  AdminCRTComingFrom,\r\n  AdminCRTDecision,\r\n  AdminCRTCommunicationStatus,\r\n  AdminCRTIssueType,\r\n  AdminCRTPriority,\r\n  AdminCRTNextAction,\r\n  SearchLocationOptions,\r\n  TimestampRange,\r\n  SearchSortByOptions,\r\n  SearchSortInput,\r\n  CustomNUXStepContentFragment,\r\n  FileFragment,\r\n  HighlightedTextConfigFragment,\r\n  InboxThreadFragment,\r\n  InboxThreadFragment2Fragment,\r\n  MessageAnnotationAttachmentFragment,\r\n  MessageFileAttachmentFragment,\r\n  MessageFragment,\r\n  MessageLinkPreviewFragment,\r\n  MessageReactionFragment,\r\n  MessageScreenshotAttachmentFragment,\r\n  NotificationsMessageFragment,\r\n  NotificationsNodeFragment,\r\n  OrganizationFragment,\r\n  PageVisitorFragment,\r\n  TaskFragment,\r\n  ThreadActivitySummaryFragment,\r\n  ThreadByExternalIDFragment,\r\n  ThreadFragment,\r\n  ThreadFragmentBaseFragment,\r\n  ThreadParticipantFragment,\r\n  UserFragment,\r\n  ViewerIdentityFragment,\r\n  AccessTokenQueryResult,\r\n  AccessTokenQueryVariables,\r\n  ActivityQueryResult,\r\n  ActivityQueryVariables,\r\n  AddThreadToSlackChannelMutationResult,\r\n  AddThreadToSlackChannelMutationVariables,\r\n  AnnotationsOnPageQueryResult,\r\n  AnnotationsOnPageQueryVariables,\r\n  AnnotationsOnPageSubscriptionResult,\r\n  AnnotationsOnPageSubscriptionVariables,\r\n  ApplicationSpecificationsQueryResult,\r\n  AutocompleteQueryResult,\r\n  AutocompleteQueryVariables,\r\n  BootstrapQueryResult,\r\n  BootstrapQueryVariables,\r\n  CanEditExternalTaskQueryResult,\r\n  CanEditExternalTaskQueryVariables,\r\n  ClearDeepLinkThreadIDMutationResult,\r\n  ConversationThreadsQueryResult,\r\n  ConversationThreadsQueryVariables,\r\n  CreateFileMutationResult,\r\n  CreateFileMutationVariables,\r\n  CreateMessageByExternalIDMutationResult,\r\n  CreateMessageByExternalIDMutationVariables,\r\n  CreateMessageReactionMutationResult,\r\n  CreateMessageReactionMutationVariables,\r\n  CreateThreadMutationResult,\r\n  CreateThreadMutationVariables,\r\n  CreateThreadMessageMutationResult,\r\n  CreateThreadMessageMutationVariables,\r\n  DeepLinkThreadIDQueryResult,\r\n  DeleteMessageReactionMutationResult,\r\n  DeleteMessageReactionMutationVariables,\r\n  DeleteNotificationMutationResult,\r\n  DeleteNotificationMutationVariables,\r\n  DisconnectThirdPartyMutationResult,\r\n  DisconnectThirdPartyMutationVariables,\r\n  FeatureFlagsQueryResult,\r\n  FeatureFlagsQueryVariables,\r\n  HideLinkPreviewMutationResult,\r\n  HideLinkPreviewMutationVariables,\r\n  InboxCountQueryResult,\r\n  InboxQueryResult,\r\n  InboxSubscriptionResult,\r\n  LoadMessagesToDeepLinkedMessageQueryResult,\r\n  LoadMessagesToDeepLinkedMessageQueryVariables,\r\n  LogDeprecationMutationResult,\r\n  LogDeprecationMutationVariables,\r\n  LogEventsMutationResult,\r\n  LogEventsMutationVariables,\r\n  MarkAllNotificationsAsReadMutationResult,\r\n  MarkAllNotificationsAsReadMutationVariables,\r\n  ClearNotificationsForMessageMutationResult,\r\n  ClearNotificationsForMessageMutationVariables,\r\n  MarkNotificationAsReadMutationResult,\r\n  MarkNotificationAsReadMutationVariables,\r\n  MarkNotificationAsUnreadMutationResult,\r\n  MarkNotificationAsUnreadMutationVariables,\r\n  MarkThreadSeenMutationResult,\r\n  MarkThreadSeenMutationVariables,\r\n  MarkThreadsSeenMutationResult,\r\n  MarkThreadsSeenMutationVariables,\r\n  MessageByExternalIDQueryResult,\r\n  MessageByExternalIDQueryVariables,\r\n  MessageByExternalIDWithThreadQueryResult,\r\n  MessageByExternalIDWithThreadQueryVariables,\r\n  MessageContentSearchQueryResult,\r\n  MessageContentSearchQueryVariables,\r\n  NotificationByExternalIDQueryResult,\r\n  NotificationByExternalIDQueryVariables,\r\n  NotificationSummaryQueryResult,\r\n  NotificationSummaryQueryVariables,\r\n  NotificationSummarySubscriptionResult,\r\n  NotificationSummarySubscriptionVariables,\r\n  NotificationsQueryResult,\r\n  NotificationsQueryVariables,\r\n  NotificationEventsSubscriptionResult,\r\n  NotificationEventsSubscriptionVariables,\r\n  OlderThreadMessagesQueryResult,\r\n  OlderThreadMessagesQueryVariables,\r\n  OrgMembersByExtIDPaginatedQueryResult,\r\n  OrgMembersByExtIDPaginatedQueryVariables,\r\n  OrgMembersUpdatedSubscriptionResult,\r\n  OrgMembersUpdatedSubscriptionVariables,\r\n  PingQueryResult,\r\n  PreferencesSubscriptionResult,\r\n  PresenceLiveQuerySubscriptionResult,\r\n  PresenceLiveQuerySubscriptionVariables,\r\n  RefreshFileUploadURLMutationResult,\r\n  RefreshFileUploadURLMutationVariables,\r\n  ResetUserHiddenAnnotationsMutationResult,\r\n  SendSampleWelcomeMessageMutationResult,\r\n  SendSampleWelcomeMessageMutationVariables,\r\n  SetAnnotationVisibleMutationResult,\r\n  SetAnnotationVisibleMutationVariables,\r\n  SetDeepLinkThreadIDMutationResult,\r\n  SetDeepLinkThreadIDMutationVariables,\r\n  SetFileUploadStatusMutationResult,\r\n  SetFileUploadStatusMutationVariables,\r\n  SetPreferenceMutationResult,\r\n  SetPreferenceMutationVariables,\r\n  SetPresentContextMutationResult,\r\n  SetPresentContextMutationVariables,\r\n  SetSubscribedByExternalIDMutationResult,\r\n  SetSubscribedByExternalIDMutationVariables,\r\n  SetSubscribedMutationResult,\r\n  SetSubscribedMutationVariables,\r\n  SetThreadMetadataMutationResult,\r\n  SetThreadMetadataMutationVariables,\r\n  SetThreadNameMutationResult,\r\n  SetThreadNameMutationVariables,\r\n  SetThreadResolvedMutationResult,\r\n  SetThreadResolvedMutationVariables,\r\n  SetTypingMutationResult,\r\n  SetTypingMutationVariables,\r\n  ShareThreadToEmailMutationResult,\r\n  ShareThreadToEmailMutationVariables,\r\n  SlackChannelsQueryResult,\r\n  SlackChannelsQueryVariables,\r\n  SlackConnectedLiveQuerySubscriptionResult,\r\n  SlackConnectedLiveQuerySubscriptionVariables,\r\n  ThirdPartyConnectionConfigurationQueryResult,\r\n  ThirdPartyConnectionConfigurationQueryVariables,\r\n  ThirdPartyConnectionsQueryResult,\r\n  ThirdPartyConnectionsQueryVariables,\r\n  Thread2QueryResult,\r\n  Thread2QueryVariables,\r\n  ThreadActivityQueryResult,\r\n  ThreadActivityQueryVariables,\r\n  ThreadActivitySummarySubscriptionResult,\r\n  ThreadActivitySummarySubscriptionVariables,\r\n  ThreadByExternalID2QueryResult,\r\n  ThreadByExternalID2QueryVariables,\r\n  ThreadEventsSubscriptionResult,\r\n  ThreadEventsSubscriptionVariables,\r\n  ThreadListEventsWithLocationSubscriptionResult,\r\n  ThreadListEventsWithLocationSubscriptionVariables,\r\n  ThreadListQueryResult,\r\n  ThreadListQueryVariables,\r\n  UnlinkOrgMutationResult,\r\n  UnlinkOrgMutationVariables,\r\n  UnreadMessageCountQueryResult,\r\n  UnreadMessageCountQueryVariables,\r\n  UpdateMessageByExternalIDMutationResult,\r\n  UpdateMessageByExternalIDMutationVariables,\r\n  UpdateMessageMutationResult,\r\n  UpdateMessageMutationVariables,\r\n  UpdateThreadByExternalIDMutationResult,\r\n  UpdateThreadByExternalIDMutationVariables,\r\n  UserLiveQuerySubscriptionResult,\r\n  UserLiveQuerySubscriptionVariables,\r\n  UsersByExternalIDQueryResult,\r\n  UsersByExternalIDQueryVariables,\r\n  UsersQueryResult,\r\n  UsersQueryVariables,\r\n  ViewerIdentityLiveQuerySubscriptionResult,\r\n  ViewerIdentityLiveQuerySubscriptionVariables,\r\n  ViewerIdentityQueryResult,\r\n  ViewerIdentityQueryVariables,\r\n};\r\n\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as AccessTokenQuery } from 'external/src/graphql/AccessTokenQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ActivityQuery } from 'external/src/graphql/ActivityQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as AnnotationsOnPageQuery } from 'external/src/graphql/AnnotationsOnPageQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as AnnotationsOnPageSubscription } from 'external/src/graphql/AnnotationsOnPageSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ApplicationSpecificationsQuery } from 'external/src/graphql/ApplicationSpecificationsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as AutocompleteQuery } from 'external/src/graphql/AutocompleteQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as BootstrapQuery } from 'external/src/graphql/BootstrapQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as CanEditExternalTaskQuery } from 'external/src/graphql/CanEditExternalTaskQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ConversationThreadsQuery } from 'external/src/graphql/ConversationThreadsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as DeepLinkThreadIDQuery } from 'external/src/graphql/DeepLinkThreadIDQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as FeatureFlagsQuery } from 'external/src/graphql/FeatureFlagsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as InboxCountQuery } from 'external/src/graphql/InboxCountQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as InboxQuery } from 'external/src/graphql/InboxQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as InboxSubscription } from 'external/src/graphql/InboxSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as LoadMessagesToDeepLinkedMessageQuery } from 'external/src/graphql/LoadMessagesToDeepLinkedMessage.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as MessageByExternalIDQuery } from 'external/src/graphql/MessageByExternalIDQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as MessageByExternalIDWithThreadQuery } from 'external/src/graphql/MessageByExternalIDWithThread.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as MessageContentSearchQuery } from 'external/src/graphql/MessageContentSearchQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as NotificationByExternalIDQuery } from 'external/src/graphql/NotificationByExternalIDQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as NotificationSummaryQuery } from 'external/src/graphql/NotificationSummaryQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as NotificationSummarySubscription } from 'external/src/graphql/NotificationSummarySubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as NotificationsQuery } from 'external/src/graphql/NotificationsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as NotificationEventsSubscription } from 'external/src/graphql/NotificationsSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as OlderThreadMessagesQuery } from 'external/src/graphql/OlderThreadMessagesQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as OrgMembersByExtIDPaginatedQuery } from 'external/src/graphql/OrgMembersByExtIDPaginatedQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as OrgMembersUpdatedSubscription } from 'external/src/graphql/OrgMembersUpdatedSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as PingQuery } from 'external/src/graphql/PingQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as PreferencesSubscription } from 'external/src/graphql/PreferencesSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as PresenceLiveQuerySubscription } from 'external/src/graphql/PresenceLiveQuerySubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as SlackChannelsQuery } from 'external/src/graphql/SlackChannelsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as SlackConnectedLiveQuerySubscription } from 'external/src/graphql/SlackConnectedSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThirdPartyConnectionConfigurationQuery } from 'external/src/graphql/ThirdPartyConnectionConfigurationQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThirdPartyConnectionsQuery } from 'external/src/graphql/ThirdPartyConnectionsQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as Thread2Query } from 'external/src/graphql/Thread2Query.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadActivityQuery } from 'external/src/graphql/ThreadActivityQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadActivitySummarySubscription } from 'external/src/graphql/ThreadActivitySubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadByExternalID2Query } from 'external/src/graphql/ThreadByExternalID2Query.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadEventsSubscription } from 'external/src/graphql/ThreadEventsSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadListEventsWithLocationSubscription } from 'external/src/graphql/ThreadListEventsWithLocationSubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ThreadListQuery } from 'external/src/graphql/ThreadListQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as UnreadMessageCountQuery } from 'external/src/graphql/UnreadMessageCountQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as UserLiveQuerySubscription } from 'external/src/graphql/UserLiveQuerySubscription.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as UsersByExternalIDQuery } from 'external/src/graphql/UsersByExternalIDQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as UsersQuery } from 'external/src/graphql/UsersQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ViewerIdentityLiveQuerySubscription } from 'external/src/graphql/ViewerIdentityLiveQuery.graphql';\r\n// eslint-disable-next-line import/no-restricted-paths\r\nimport { default as ViewerIdentityQuery } from 'external/src/graphql/ViewerIdentityQuery.graphql';\r\n\r\nexport async function executeAccessTokenQuery(options: {\r\n  context: RequestContext;\r\n  variables: AccessTokenQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    AccessTokenQueryResult,\r\n    AccessTokenQueryVariables\r\n  >(AccessTokenQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeActivityQuery(options: {\r\n  context: RequestContext;\r\n  variables: ActivityQueryVariables;\r\n}) {\r\n  return await executeGraphQL<ActivityQueryResult, ActivityQueryVariables>(\r\n    ActivityQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeAnnotationsOnPageQuery(options: {\r\n  context: RequestContext;\r\n  variables: AnnotationsOnPageQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    AnnotationsOnPageQueryResult,\r\n    AnnotationsOnPageQueryVariables\r\n  >(AnnotationsOnPageQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeAnnotationsOnPageSubscription(options: {\r\n  context: RequestContext;\r\n  variables: AnnotationsOnPageSubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    AnnotationsOnPageSubscriptionResult,\r\n    AnnotationsOnPageSubscriptionVariables\r\n  >(AnnotationsOnPageSubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeApplicationSpecificationsQuery(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await executeGraphQL<\r\n    ApplicationSpecificationsQueryResult,\r\n    Record<string, never>\r\n  >(ApplicationSpecificationsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeAutocompleteQuery(options: {\r\n  context: RequestContext;\r\n  variables: AutocompleteQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    AutocompleteQueryResult,\r\n    AutocompleteQueryVariables\r\n  >(AutocompleteQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeBootstrapQuery(options: {\r\n  context: RequestContext;\r\n  variables: BootstrapQueryVariables;\r\n}) {\r\n  return await executeGraphQL<BootstrapQueryResult, BootstrapQueryVariables>(\r\n    BootstrapQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeCanEditExternalTaskQuery(options: {\r\n  context: RequestContext;\r\n  variables: CanEditExternalTaskQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    CanEditExternalTaskQueryResult,\r\n    CanEditExternalTaskQueryVariables\r\n  >(CanEditExternalTaskQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeConversationThreadsQuery(options: {\r\n  context: RequestContext;\r\n  variables: ConversationThreadsQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ConversationThreadsQueryResult,\r\n    ConversationThreadsQueryVariables\r\n  >(ConversationThreadsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeDeepLinkThreadIDQuery(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await executeGraphQL<\r\n    DeepLinkThreadIDQueryResult,\r\n    Record<string, never>\r\n  >(DeepLinkThreadIDQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeFeatureFlagsQuery(options: {\r\n  context: RequestContext;\r\n  variables: FeatureFlagsQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    FeatureFlagsQueryResult,\r\n    FeatureFlagsQueryVariables\r\n  >(FeatureFlagsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeInboxCountQuery(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await executeGraphQL<InboxCountQueryResult, Record<string, never>>(\r\n    InboxCountQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeInboxQuery(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await executeGraphQL<InboxQueryResult, Record<string, never>>(\r\n    InboxQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function subscribeInboxSubscription(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await subscribeGraphQL<InboxSubscriptionResult, Record<string, never>>(\r\n    InboxSubscription,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeLoadMessagesToDeepLinkedMessageQuery(options: {\r\n  context: RequestContext;\r\n  variables: LoadMessagesToDeepLinkedMessageQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    LoadMessagesToDeepLinkedMessageQueryResult,\r\n    LoadMessagesToDeepLinkedMessageQueryVariables\r\n  >(LoadMessagesToDeepLinkedMessageQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeMessageByExternalIDQuery(options: {\r\n  context: RequestContext;\r\n  variables: MessageByExternalIDQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    MessageByExternalIDQueryResult,\r\n    MessageByExternalIDQueryVariables\r\n  >(MessageByExternalIDQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeMessageByExternalIDWithThreadQuery(options: {\r\n  context: RequestContext;\r\n  variables: MessageByExternalIDWithThreadQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    MessageByExternalIDWithThreadQueryResult,\r\n    MessageByExternalIDWithThreadQueryVariables\r\n  >(MessageByExternalIDWithThreadQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeMessageContentSearchQuery(options: {\r\n  context: RequestContext;\r\n  variables: MessageContentSearchQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    MessageContentSearchQueryResult,\r\n    MessageContentSearchQueryVariables\r\n  >(MessageContentSearchQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeNotificationByExternalIDQuery(options: {\r\n  context: RequestContext;\r\n  variables: NotificationByExternalIDQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    NotificationByExternalIDQueryResult,\r\n    NotificationByExternalIDQueryVariables\r\n  >(NotificationByExternalIDQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeNotificationSummaryQuery(options: {\r\n  context: RequestContext;\r\n  variables: NotificationSummaryQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    NotificationSummaryQueryResult,\r\n    NotificationSummaryQueryVariables\r\n  >(NotificationSummaryQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeNotificationSummarySubscription(options: {\r\n  context: RequestContext;\r\n  variables: NotificationSummarySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    NotificationSummarySubscriptionResult,\r\n    NotificationSummarySubscriptionVariables\r\n  >(NotificationSummarySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeNotificationsQuery(options: {\r\n  context: RequestContext;\r\n  variables: NotificationsQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    NotificationsQueryResult,\r\n    NotificationsQueryVariables\r\n  >(NotificationsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeNotificationEventsSubscription(options: {\r\n  context: RequestContext;\r\n  variables: NotificationEventsSubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    NotificationEventsSubscriptionResult,\r\n    NotificationEventsSubscriptionVariables\r\n  >(NotificationEventsSubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeOlderThreadMessagesQuery(options: {\r\n  context: RequestContext;\r\n  variables: OlderThreadMessagesQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    OlderThreadMessagesQueryResult,\r\n    OlderThreadMessagesQueryVariables\r\n  >(OlderThreadMessagesQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeOrgMembersByExtIDPaginatedQuery(options: {\r\n  context: RequestContext;\r\n  variables: OrgMembersByExtIDPaginatedQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    OrgMembersByExtIDPaginatedQueryResult,\r\n    OrgMembersByExtIDPaginatedQueryVariables\r\n  >(OrgMembersByExtIDPaginatedQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeOrgMembersUpdatedSubscription(options: {\r\n  context: RequestContext;\r\n  variables: OrgMembersUpdatedSubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    OrgMembersUpdatedSubscriptionResult,\r\n    OrgMembersUpdatedSubscriptionVariables\r\n  >(OrgMembersUpdatedSubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executePingQuery(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await executeGraphQL<PingQueryResult, Record<string, never>>(\r\n    PingQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function subscribePreferencesSubscription(options: {\r\n  context: RequestContext;\r\n  variables?: Record<string, never>;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    PreferencesSubscriptionResult,\r\n    Record<string, never>\r\n  >(PreferencesSubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribePresenceLiveQuerySubscription(options: {\r\n  context: RequestContext;\r\n  variables: PresenceLiveQuerySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    PresenceLiveQuerySubscriptionResult,\r\n    PresenceLiveQuerySubscriptionVariables\r\n  >(PresenceLiveQuerySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeSlackChannelsQuery(options: {\r\n  context: RequestContext;\r\n  variables: SlackChannelsQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    SlackChannelsQueryResult,\r\n    SlackChannelsQueryVariables\r\n  >(SlackChannelsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeSlackConnectedLiveQuerySubscription(options: {\r\n  context: RequestContext;\r\n  variables: SlackConnectedLiveQuerySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    SlackConnectedLiveQuerySubscriptionResult,\r\n    SlackConnectedLiveQuerySubscriptionVariables\r\n  >(SlackConnectedLiveQuerySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeThirdPartyConnectionConfigurationQuery(options: {\r\n  context: RequestContext;\r\n  variables: ThirdPartyConnectionConfigurationQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ThirdPartyConnectionConfigurationQueryResult,\r\n    ThirdPartyConnectionConfigurationQueryVariables\r\n  >(ThirdPartyConnectionConfigurationQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeThirdPartyConnectionsQuery(options: {\r\n  context: RequestContext;\r\n  variables: ThirdPartyConnectionsQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ThirdPartyConnectionsQueryResult,\r\n    ThirdPartyConnectionsQueryVariables\r\n  >(ThirdPartyConnectionsQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeThread2Query(options: {\r\n  context: RequestContext;\r\n  variables: Thread2QueryVariables;\r\n}) {\r\n  return await executeGraphQL<Thread2QueryResult, Thread2QueryVariables>(\r\n    Thread2Query,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeThreadActivityQuery(options: {\r\n  context: RequestContext;\r\n  variables: ThreadActivityQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ThreadActivityQueryResult,\r\n    ThreadActivityQueryVariables\r\n  >(ThreadActivityQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeThreadActivitySummarySubscription(options: {\r\n  context: RequestContext;\r\n  variables: ThreadActivitySummarySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    ThreadActivitySummarySubscriptionResult,\r\n    ThreadActivitySummarySubscriptionVariables\r\n  >(ThreadActivitySummarySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeThreadByExternalID2Query(options: {\r\n  context: RequestContext;\r\n  variables: ThreadByExternalID2QueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ThreadByExternalID2QueryResult,\r\n    ThreadByExternalID2QueryVariables\r\n  >(ThreadByExternalID2Query, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeThreadEventsSubscription(options: {\r\n  context: RequestContext;\r\n  variables: ThreadEventsSubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    ThreadEventsSubscriptionResult,\r\n    ThreadEventsSubscriptionVariables\r\n  >(ThreadEventsSubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeThreadListEventsWithLocationSubscription(options: {\r\n  context: RequestContext;\r\n  variables: ThreadListEventsWithLocationSubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    ThreadListEventsWithLocationSubscriptionResult,\r\n    ThreadListEventsWithLocationSubscriptionVariables\r\n  >(\r\n    ThreadListEventsWithLocationSubscription,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeThreadListQuery(options: {\r\n  context: RequestContext;\r\n  variables: ThreadListQueryVariables;\r\n}) {\r\n  return await executeGraphQL<ThreadListQueryResult, ThreadListQueryVariables>(\r\n    ThreadListQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function executeUnreadMessageCountQuery(options: {\r\n  context: RequestContext;\r\n  variables: UnreadMessageCountQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    UnreadMessageCountQueryResult,\r\n    UnreadMessageCountQueryVariables\r\n  >(UnreadMessageCountQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function subscribeUserLiveQuerySubscription(options: {\r\n  context: RequestContext;\r\n  variables: UserLiveQuerySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    UserLiveQuerySubscriptionResult,\r\n    UserLiveQuerySubscriptionVariables\r\n  >(UserLiveQuerySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeUsersByExternalIDQuery(options: {\r\n  context: RequestContext;\r\n  variables: UsersByExternalIDQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    UsersByExternalIDQueryResult,\r\n    UsersByExternalIDQueryVariables\r\n  >(UsersByExternalIDQuery, options.context, options.variables);\r\n}\r\n\r\nexport async function executeUsersQuery(options: {\r\n  context: RequestContext;\r\n  variables: UsersQueryVariables;\r\n}) {\r\n  return await executeGraphQL<UsersQueryResult, UsersQueryVariables>(\r\n    UsersQuery,\r\n    options.context,\r\n    options.variables,\r\n  );\r\n}\r\n\r\nexport async function subscribeViewerIdentityLiveQuerySubscription(options: {\r\n  context: RequestContext;\r\n  variables: ViewerIdentityLiveQuerySubscriptionVariables;\r\n}) {\r\n  return await subscribeGraphQL<\r\n    ViewerIdentityLiveQuerySubscriptionResult,\r\n    ViewerIdentityLiveQuerySubscriptionVariables\r\n  >(ViewerIdentityLiveQuerySubscription, options.context, options.variables);\r\n}\r\n\r\nexport async function executeViewerIdentityQuery(options: {\r\n  context: RequestContext;\r\n  variables: ViewerIdentityQueryVariables;\r\n}) {\r\n  return await executeGraphQL<\r\n    ViewerIdentityQueryResult,\r\n    ViewerIdentityQueryVariables\r\n  >(ViewerIdentityQuery, options.context, options.variables);\r\n}\r\n", "import { GraphQLJSON, GraphQLJSONObject } from 'graphql-type-json';\r\nimport { makeExecutableSchema } from '@graphql-tools/schema';\r\nimport { threadByExternalID2QueryResolver } from 'server/src/public/queries/thread_by_external_id.ts';\r\nimport { GraphQLDateTime } from 'server/src/util/graphql-iso-date.js';\r\nimport GraphQLUUID from 'server/src/util/graphql-type-uuid.js';\r\nimport { shareThreadToEmailResolver } from 'server/src/public/mutations/share_thread_to_email.ts';\r\nimport { addThreadToSelectedSlackChannelResolver } from 'server/src/public/mutations/add_thread_to_slack_channel.ts';\r\nimport { createFileMutationResolver } from 'server/src/public/mutations/create_file.ts';\r\nimport { createMessageReactionResolver } from 'server/src/public/mutations/create_reaction.ts';\r\nimport { createThreadMessageResolver } from 'server/src/public/mutations/create_thread_message.ts';\r\nimport { deleteMessageReactionMutationResolver } from 'server/src/public/mutations/delete_reaction.ts';\r\nimport { disconnectThirdPartyMutationResolver } from 'server/src/public/mutations/disconnect_third_party.ts';\r\nimport { logEventsMutationResolver } from 'server/src/public/mutations/log_events.ts';\r\nimport { setFileUploadStatusMutationResolver } from 'server/src/public/mutations/set_file_upload_status.ts';\r\nimport { setPreferenceMutationResolver } from 'server/src/public/mutations/set_preference.ts';\r\nimport { setSubscribedMutationResolver } from 'server/src/public/mutations/set_subscribed.ts';\r\nimport { setTypingMutationResolver } from 'server/src/public/mutations/set_typing.ts';\r\nimport { updateMessageResolver } from 'server/src/public/mutations/update_message.ts';\r\nimport { featureFlagsQueryResolver } from 'server/src/public/queries/feature_flags.ts';\r\nimport { pingQueryResolver } from 'server/src/public/queries/ping.ts';\r\nimport { taskQueryResolver } from 'server/src/public/queries/task.ts';\r\nimport { threadQueryResolver } from 'server/src/public/queries/thread.ts';\r\nimport {\r\n  viewerQueryResolver,\r\n  viewerResolver,\r\n  viewerIdentityResolver,\r\n} from 'server/src/public/queries/viewer.ts';\r\nimport { inboxSubscriptionResolver } from 'server/src/public/subscriptions/inbox.ts';\r\nimport { preferencesLiveQuerySubscriptionResolver } from 'server/src/public/subscriptions/preferences.ts';\r\nimport {\r\n  threadEventsSubscriptionResolver,\r\n  threadEventTypeResolver,\r\n} from 'server/src/public/subscriptions/thread_events.ts';\r\nimport {\r\n  ElementIdentifierVersionScalarType,\r\n  JsonObjectReducerDataScalarType,\r\n  MessageContentScalarType,\r\n  SimpleValueScalarType,\r\n  ContextScalarType,\r\n  MetadataScalarType,\r\n  SimpleTranslationParametersScalarType,\r\n} from 'server/src/schema/common.ts';\r\nimport { fileResolver } from 'server/src/schema/file.ts';\r\nimport { inboxResolver } from 'server/src/schema/inbox.ts';\r\nimport { loadMessagesResultResolver } from 'server/src/schema/load_messages_result.ts';\r\nimport {\r\n  messageResolver,\r\n  messageSourceTypeResolver,\r\n} from 'server/src/schema/message.ts';\r\nimport { messageAnnotationAttachmentResolver } from 'server/src/schema/message_annotation_attachment.ts';\r\nimport { messageAttachmentTypeResolver } from 'server/src/schema/message_attachment.ts';\r\nimport { messageFileAttachmentResolver } from 'server/src/schema/message_file_attachment.ts';\r\nimport { messageReactionResolver } from 'server/src/schema/message_reaction.ts';\r\nimport { linkedOrgResolver, orgResolver } from 'server/src/schema/org.ts';\r\nimport { pageThreadAddedResolver } from 'server/src/schema/page_thread_added.ts';\r\nimport { pageVisitorResolver } from 'server/src/schema/page_visitor.ts';\r\nimport { pageVisitorUpdatedResolver } from 'server/src/schema/page_visitors_updated.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { taskResolver } from 'server/src/schema/task.ts';\r\nimport { taskThirdPartyReferenceResolver } from 'server/src/schema/task_third_party_reference.ts';\r\nimport { thirdPartyConnectionResolver } from 'server/src/schema/third_party_connection.ts';\r\nimport { threadResolver } from 'server/src/schema/thread.ts';\r\nimport { threadMessageAddedResolver } from 'server/src/schema/thread_message_added.ts';\r\nimport { threadMessageUpdatedResolver } from 'server/src/schema/thread_message_updated.ts';\r\nimport { threadMessageContentAppendedResolver } from 'server/src/schema/thread_message_content_appended.ts';\r\nimport { threadParticipantResolver } from 'server/src/schema/thread_participant.ts';\r\nimport { threadParticipantUpdatedIncrementalResolver } from 'server/src/schema/thread_participants_updated_incremental.ts';\r\nimport { threadTypingUsersUpdatedResolver } from 'server/src/schema/thread_typing_users_updated.ts';\r\nimport {\r\n  userResolver,\r\n  userWithOrgDetailsResolver,\r\n} from 'server/src/schema/user.ts';\r\nimport { refreshFileUploadURLMutationResolver } from 'server/src/public/mutations/refresh_file_upload_url.ts';\r\nimport { s3BucketVisibleResolver } from 'server/src/schema/s3_bucket.ts';\r\nimport { heimdallSwitchResolver } from 'server/src/schema/heimdall_switch.ts';\r\nimport { setDeepLinkThreadIDMutationResolver } from 'server/src/public/mutations/set_deep_link_thread_id.ts';\r\nimport { clearDeepLinkThreadIDMutationResolver } from 'server/src/public/mutations/clear_deep_link_thread_id.ts';\r\nimport { applicationQueryResolver } from 'server/src/public/queries/application.ts';\r\nimport { applicationResolver } from 'server/src/schema/application.ts';\r\nimport { setThreadResolvedResolver } from 'server/src/public/mutations/set_thread_resolved.ts';\r\nimport { pageThreadResolvedResolver } from 'server/src/schema/page_thread_resolved.ts';\r\nimport { pageThreadUnresolvedResolver } from 'server/src/schema/page_thread_unresolved.ts';\r\nimport { unlinkOrgsMutationResolver } from 'server/src/public/mutations/unlink_orgs.ts';\r\nimport { annotationsOnPageQueryResolver } from 'server/src/public/queries/annotations_on_page.ts';\r\nimport { setAnnotationVisibleMutationResolver } from 'server/src/public/mutations/set_annotation_visible.ts';\r\nimport { annotationsOnPageUpdatedSubscriptionResolver } from 'server/src/public/subscriptions/annotations_on_page_updated.ts';\r\nimport { resetUserHiddenAnnotationsResolver } from 'server/src/public/mutations/reset_user_hidden_annotations.ts';\r\nimport { setPresentContextMutationResolver } from 'server/src/public/mutations/set_present_context.ts';\r\nimport { usersByExternalIDQueryResolver } from 'server/src/public/queries/users_by_external_id.ts';\r\nimport { markThreadSeenMutation } from 'server/src/public/mutations/mark_thread_seen.ts';\r\nimport { viewerIdentityLiveQueryResolver } from 'server/src/public/subscriptions/viewer_identity.ts';\r\nimport { usersQueryResolver } from 'server/src/public/queries/users.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { shouldRateLimit } from 'server/src/util/rateLimiter.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\nimport { sendSampleWelcomeMessageResolver } from 'server/src/public/mutations/send_sample_welcome_message.ts';\r\nimport { consoleUserResolver } from 'server/src/schema/console_user.ts';\r\nimport { applicationDeploymentInfoResolver } from 'server/src/schema/application_deployment_info.ts';\r\nimport { adminChatUserResolver } from 'server/src/schema/admin_chat_user.ts';\r\nimport { organizationQueryResolver } from 'server/src/public/queries/organization.ts';\r\nimport {\r\n  notificationAttachmentResolver,\r\n  notificationHeaderNodeResolver,\r\n  notificationSenderResolver,\r\n  notificationsResolver,\r\n} from 'server/src/public/queries/notifications.ts';\r\nimport {\r\n  markAllNotificationsAsReadResolver,\r\n  markNotificationAsReadResolver,\r\n  markNotificationAsUnreadResolver,\r\n} from 'server/src/public/mutations/notifications/mark_notification_as_read.ts';\r\nimport { activityQueryResolver } from 'server/src/public/queries/activity.ts';\r\nimport { threadActivitySummarySubscriptionResolver } from 'server/src/public/subscriptions/thread_activity_summary.ts';\r\nimport { activityResolver } from 'server/src/schema/activity.ts';\r\nimport { threadMessageRemovedResolver } from 'server/src/schema/thread_message_removed.ts';\r\nimport { threadShareToSlackResolver } from 'server/src/schema/thread_share_to_slack.ts';\r\nimport { setThreadNameResolver } from 'server/src/public/mutations/set_thread_name.ts';\r\nimport { deleteNotificationResolver } from 'server/src/public/mutations/notifications/delete_notification.ts';\r\nimport {\r\n  notificationEventsSubscriptionResolver,\r\n  notificationEventTypeResolver,\r\n} from 'server/src/public/subscriptions/notification_events.ts';\r\nimport { notificationAddedResolver } from 'server/src/schema/notification_added.ts';\r\nimport { notificationReadStateUpdatedResolver } from 'server/src/schema/notification_read_state_updated.ts';\r\nimport { customerIssueResolver } from 'server/src/schema/customer_issue.ts';\r\nimport { customerIssueChangeResolver } from 'server/src/schema/customer_issue_change.ts';\r\nimport { notificationSummaryQueryResolver } from 'server/src/public/queries/notification_summary.ts';\r\nimport { notificationSummaryUpdatedSubscriptionResolver } from 'server/src/public/subscriptions/notification_summary_updated.ts';\r\nimport { notificationSummaryResolver } from 'server/src/schema/notification_summary.ts';\r\nimport { setThreadMetadataResolver } from 'server/src/public/mutations/set_thread_metadata.ts';\r\nimport { threadPropertiesUpdatedResolver } from 'server/src/schema/thread_properties_updated.ts';\r\nimport {\r\n  pageEventTypeResolver,\r\n  pageEventsWithLocationSubscriptionResolver,\r\n} from 'server/src/public/subscriptions/page_events_with_location.ts';\r\nimport { messageByExternalIDQueryResolver } from 'server/src/public/queries/message_by_external_id.ts';\r\nimport { logDeprecationMutationResolver } from 'server/src/public/mutations/log_deprecation.ts';\r\nimport { notificationDeletedResolver } from 'server/src/schema/notification_deleted.ts';\r\nimport { notificationByExternalIDResolver } from 'server/src/public/queries/notification_by_external_id.ts';\r\nimport { setSubscribedByExternalIDMutationResolver } from 'server/src/public/mutations/set_subscribed_by_external_id.ts';\r\nimport { updateThreadByExternalIDResolver } from 'server/src/public/mutations/update_thread_by_external_id.ts';\r\nimport { createMessageByExternalIDResolver } from 'server/src/public/mutations/create_message_by_external_id.ts';\r\nimport { updateMessageByExternalIDResolver } from 'server/src/public/mutations/update_message_by_external_id.ts';\r\nimport { userLiveQueryResolver } from 'server/src/public/subscriptions/user_live_query.ts';\r\nimport { markThreadUnseenFromExternalMessageIDResolver } from 'server/src/public/mutations/mark_thread_unseen_from_external_message_id.ts';\r\nimport { messageContentSearchResolver } from 'server/src/public/queries/message_content_search.ts';\r\nimport { threadsAtLocationQueryResolver } from 'server/src/public/queries/threads_at_location.ts';\r\nimport { messageScreenshotAttachmentResolver } from 'server/src/schema/message_screenshot_attachment.ts';\r\nimport { threadCreatedResolver } from 'server/src/schema/thread_created.ts';\r\nimport { hideLinkPreviewResolver } from 'server/src/public/mutations/hide_link_preview.ts';\r\nimport { createThreadResolver } from 'server/src/public/mutations/create_thread.ts';\r\nimport { pageThreadReplyAddedResolver } from 'server/src/schema/page_thread_reply_added.ts';\r\nimport { clearNotificationsForMessageMutation } from 'server/src/public/mutations/clear_notifications_for_message.ts';\r\nimport {\r\n  orgMemberEventTypeResolver,\r\n  orgMembersUpdatedSubscriptionResolver,\r\n} from 'server/src/public/subscriptions/org_members_updated.ts';\r\nimport { orgMemberAddedResolver } from 'server/src/schema/org_member_added.ts';\r\nimport { orgMemberRemovedResolver } from 'server/src/schema/org_member_removed.ts';\r\nimport { orgMembersByExtIDPaginatedResolver } from 'server/src/public/queries/org_members_by_ext_id_paginated.ts';\r\nimport { organizationByExternalIDQueryResolver } from 'server/src/public/queries/organization_by_external_id.ts';\r\nimport { SlackConnectedLiveQueryResolver } from 'server/src/public/subscriptions/slack_connected.ts';\r\nimport { threadSubscriberUpdatedResolver } from 'server/src/schema/thread_subscriber_updated.ts';\r\nimport { customerResolver } from 'server/src/schema/customer.ts';\r\nimport { presenceLiveQueryResolver } from 'server/src/public/subscriptions/presence_live_query.ts';\r\nimport { markThreadsSeenResolver } from 'server/src/public/mutations/mark_threads_seen.ts';\r\nimport { threadFilterablePropertiesMatchResolver } from 'server/src/schema/thread_filterable_properties_match.ts';\r\nimport { threadFilterablePropertiesUnmatchResolver } from 'server/src/schema/thread_filterable_properties_unmatch.ts';\r\nimport Schema from 'server/src/public/schema.graphql';\r\nimport { viewerIdentityQueryResolver } from 'server/src/public/queries/viewer_identity.ts';\r\nimport { threadDeletedResolver } from 'server/src/schema/thread_deleted.ts';\r\nimport { pageThreadDeletedResolver } from 'server/src/schema/page_thread_deleted.ts';\r\n\r\n// Resolvers, resolvers everywhere!\r\n// When you create a new Graphql object type OR new\r\n// query/mutation/subscription, then you will need to update this allResolvers\r\n// object. The typechecker should remind you to do this.\r\n//\r\n// Some fields such as `DocumentLocation: {}` (see below) are set to an empty\r\n// object. That just means that all fields of this object exist and no resolver\r\n// is needed for it.\r\n\r\n// In exceptional circumstances we can block a user from making any graphQL queries\r\n// by targeting them in the user_is_blocked flag in LaunchDarkly.  We would only\r\n// do this in an emergency, e.g. if one user is causing an excessive load on the\r\n// servers and we fear that the whole service may go down\r\nfunction checkIfUserIsBlocked<\r\n  T extends Resolvers['Query'] | Resolvers['Mutation'],\r\n>(query: T): T {\r\n  let key: keyof T;\r\n  for (key in query) {\r\n    const originalResolver = query[key];\r\n\r\n    query[key] = (async (parent: any, args: any, context: RequestContext) => {\r\n      // only rate limit logged in users\r\n      const [blocked, rateLimited] = await Promise.all([\r\n        getTypedFeatureFlagValue(\r\n          FeatureFlags.USER_IS_BLOCKED,\r\n          flagsUserFromContext(context),\r\n        ),\r\n        shouldRateLimit(context),\r\n      ]);\r\n\r\n      if (blocked === true) {\r\n        throw new Error(Errors.USER_IS_BLOCKED);\r\n      }\r\n      if (rateLimited) {\r\n        throw new Error(Errors.RATE_LIMITED);\r\n      }\r\n      return (originalResolver as any)(parent, args, context);\r\n    }) as any;\r\n  }\r\n\r\n  return query;\r\n}\r\n\r\nexport const allResolvers: Resolvers = {\r\n  // custom scalars\r\n  DateTime: GraphQLDateTime,\r\n  ElementIdentifierVersion: ElementIdentifierVersionScalarType,\r\n  SimpleValue: SimpleValueScalarType,\r\n  JSON: GraphQLJSON,\r\n  JSONObject: GraphQLJSONObject,\r\n  Context: ContextScalarType,\r\n  Metadata: MetadataScalarType,\r\n  MessageContent: MessageContentScalarType,\r\n  SimpleTranslationParameters: SimpleTranslationParametersScalarType,\r\n  UUID: GraphQLUUID,\r\n  JsonObjectReducerData: JsonObjectReducerDataScalarType,\r\n\r\n  Query: checkIfUserIsBlocked({\r\n    viewer: viewerQueryResolver,\r\n    organization: organizationQueryResolver,\r\n    organizationByExternalID: organizationByExternalIDQueryResolver,\r\n    messageByExternalID: messageByExternalIDQueryResolver,\r\n    task: taskQueryResolver,\r\n    users: usersQueryResolver,\r\n    usersByExternalID: usersByExternalIDQueryResolver,\r\n    ping: pingQueryResolver,\r\n    thread: threadQueryResolver,\r\n    threadByExternalID2: threadByExternalID2QueryResolver,\r\n    threadsAtLocation: threadsAtLocationQueryResolver,\r\n    application: applicationQueryResolver,\r\n    featureFlags: featureFlagsQueryResolver,\r\n    annotationsOnPage: annotationsOnPageQueryResolver,\r\n    notifications: notificationsResolver,\r\n    activity: activityQueryResolver,\r\n    notificationSummary: notificationSummaryQueryResolver,\r\n    notificationByExternalID: notificationByExternalIDResolver,\r\n    messageContentSearch: messageContentSearchResolver,\r\n    orgMembersByExternalIDPaginated: orgMembersByExtIDPaginatedResolver,\r\n    viewerIdentity: viewerIdentityQueryResolver,\r\n  }),\r\n  Mutation: checkIfUserIsBlocked({\r\n    logEvents: logEventsMutationResolver,\r\n    logDeprecation: logDeprecationMutationResolver,\r\n    createThreadMessage: createThreadMessageResolver,\r\n    createMessageByExternalID: createMessageByExternalIDResolver,\r\n    updateMessage: updateMessageResolver,\r\n    updateMessageByExternalID: updateMessageByExternalIDResolver,\r\n    updateThreadByExternalID: updateThreadByExternalIDResolver,\r\n    createFile: createFileMutationResolver,\r\n    refreshFileUploadURL: refreshFileUploadURLMutationResolver,\r\n    setTyping: setTypingMutationResolver,\r\n    setPresentContext: setPresentContextMutationResolver,\r\n    markThreadSeen: markThreadSeenMutation,\r\n    markThreadsSeen: markThreadsSeenResolver,\r\n    clearNotificationsForMessage: clearNotificationsForMessageMutation,\r\n    createMessageReaction: createMessageReactionResolver,\r\n    deleteMessageReaction: deleteMessageReactionMutationResolver,\r\n    addThreadToSlackChannel: addThreadToSelectedSlackChannelResolver,\r\n    setPreference: setPreferenceMutationResolver,\r\n    setFileUploadStatus: setFileUploadStatusMutationResolver,\r\n    setSubscribed: setSubscribedMutationResolver,\r\n    setSubscribedByExternalID: setSubscribedByExternalIDMutationResolver,\r\n    disconnectThirdParty: disconnectThirdPartyMutationResolver,\r\n    setDeepLinkThreadID: setDeepLinkThreadIDMutationResolver,\r\n    clearDeepLinkThreadID: clearDeepLinkThreadIDMutationResolver,\r\n    setThreadResolved: setThreadResolvedResolver,\r\n    unlinkOrgs: unlinkOrgsMutationResolver,\r\n    setAnnotationVisible: setAnnotationVisibleMutationResolver,\r\n    resetUserHiddenAnnotations: resetUserHiddenAnnotationsResolver,\r\n    shareThreadToEmail: shareThreadToEmailResolver,\r\n    sendSampleWelcomeMessage: sendSampleWelcomeMessageResolver,\r\n    markNotificationAsRead: markNotificationAsReadResolver,\r\n    markNotificationAsUnread: markNotificationAsUnreadResolver,\r\n    markAllNotificationsAsRead: markAllNotificationsAsReadResolver,\r\n    deleteNotification: deleteNotificationResolver,\r\n    setThreadName: setThreadNameResolver,\r\n    setThreadMetadata: setThreadMetadataResolver,\r\n    markThreadUnseenFromExternalMessageID:\r\n      markThreadUnseenFromExternalMessageIDResolver,\r\n    hideLinkPreview: hideLinkPreviewResolver,\r\n    createThread: createThreadResolver,\r\n  }),\r\n  Subscription: {\r\n    threadEvents: threadEventsSubscriptionResolver,\r\n    inbox: inboxSubscriptionResolver,\r\n    viewerIdentityLiveQuery: viewerIdentityLiveQueryResolver,\r\n    presenceLiveQuery: presenceLiveQueryResolver,\r\n    userLiveQuery: userLiveQueryResolver,\r\n    pageEventsWithLocation: pageEventsWithLocationSubscriptionResolver,\r\n    preferencesLiveQuery: preferencesLiveQuerySubscriptionResolver,\r\n    annotationsOnPageUpdated: annotationsOnPageUpdatedSubscriptionResolver,\r\n    threadActivitySummary: threadActivitySummarySubscriptionResolver,\r\n    notificationEvents: notificationEventsSubscriptionResolver,\r\n    notificationSummaryUpdated: notificationSummaryUpdatedSubscriptionResolver,\r\n    orgMembersByExternalIDUpdated: orgMembersUpdatedSubscriptionResolver,\r\n    slackConnectedLiveQuery: SlackConnectedLiveQueryResolver,\r\n  },\r\n  PaginationInfo: {},\r\n  AnnotationsOnPage: {},\r\n  Message: messageResolver,\r\n  MessageFileAttachment: messageFileAttachmentResolver,\r\n  File: fileResolver,\r\n  MessageAnnotationAttachment: messageAnnotationAttachmentResolver,\r\n  MessageScreenshotAttachment: messageScreenshotAttachmentResolver,\r\n  DocumentLocation: {},\r\n  LocationTextConfig: {},\r\n  HighlightedTextConfig: {},\r\n  MultimediaConfig: {},\r\n  ElementIdentifier: {},\r\n  AdditionalTargetData: {},\r\n  MonacoEditor: {},\r\n  ReactTree: {},\r\n  KonvaCanvas: {},\r\n  Point2D: {},\r\n  Thread: threadResolver,\r\n  MaybeThread: {},\r\n  LoadMessagesResult: loadMessagesResultResolver,\r\n  ThreadParticipant: threadParticipantResolver,\r\n  User: userResolver,\r\n  UserWithOrgDetails: userWithOrgDetailsResolver,\r\n  HeimdallSwitch: heimdallSwitchResolver,\r\n  PageContext: {},\r\n  PageVisitor: pageVisitorResolver,\r\n  S3BucketVisible: s3BucketVisibleResolver,\r\n  Application: applicationResolver,\r\n  Customer: customerResolver,\r\n  ConsoleUser: consoleUserResolver,\r\n  MessageReaction: messageReactionResolver,\r\n  Task: taskResolver,\r\n  Todo: {},\r\n  TaskThirdPartyReference: taskThirdPartyReferenceResolver,\r\n  Viewer: viewerResolver,\r\n  ViewerIdentity: viewerIdentityResolver,\r\n  PresenceLiveQueryData: {},\r\n  UserLiveQueryData: {},\r\n  Organization: orgResolver,\r\n  SlackChannelSchema: {},\r\n  Inbox: inboxResolver,\r\n  ThirdPartyConnection: thirdPartyConnectionResolver,\r\n  CreateFileResult: {},\r\n  SuccessResult: {},\r\n  FailureDetails: {},\r\n  IDResult: {},\r\n  ThreadCreated: threadCreatedResolver,\r\n  ThreadDeleted: threadDeletedResolver,\r\n  ThreadMessageAdded: threadMessageAddedResolver,\r\n  ThreadMessageUpdated: threadMessageUpdatedResolver,\r\n  ThreadMessageContentAppended: threadMessageContentAppendedResolver,\r\n  ThreadMessageRemoved: threadMessageRemovedResolver,\r\n  ThreadParticipantsUpdatedIncremental:\r\n    threadParticipantUpdatedIncrementalResolver,\r\n  ThreadTypingUsersUpdated: threadTypingUsersUpdatedResolver,\r\n  ThreadPropertiesUpdated: threadPropertiesUpdatedResolver,\r\n  EphemeralLocation: {},\r\n  DurableLocation: {},\r\n  UserLocation: {},\r\n  PageThreadAdded: pageThreadAddedResolver,\r\n  PageThreadDeleted: pageThreadDeletedResolver,\r\n  PageThreadReplyAdded: pageThreadReplyAddedResolver,\r\n  PageVisitorsUpdated: pageVisitorUpdatedResolver,\r\n  MessageAttachment: messageAttachmentTypeResolver,\r\n  MessageSource: messageSourceTypeResolver,\r\n  ThreadEvent: threadEventTypeResolver,\r\n  PageEvent: pageEventTypeResolver,\r\n  ApplicationEmailTemplate: {},\r\n  ApplicationColors: {},\r\n  ApplicationLinks: {},\r\n  ApplicationSupportBotInfo: {},\r\n  ApplicationDeploymentInfo: applicationDeploymentInfoResolver,\r\n  ComputedCustomLinks: {},\r\n  PublicApplication: {},\r\n  PageThreadResolved: pageThreadResolvedResolver,\r\n  PageThreadUnresolved: pageThreadUnresolvedResolver,\r\n  ThreadFilterablePropertiesMatch: threadFilterablePropertiesMatchResolver,\r\n  ThreadFilterablePropertiesUnmatch: threadFilterablePropertiesUnmatchResolver,\r\n  ReferencedUserData: {},\r\n  LinkedOrganization: linkedOrgResolver,\r\n  SlackMirroredThreadInfo: {},\r\n  FeatureFlag: {},\r\n  ApplicationNUX: {},\r\n  CustomNUXStepContent: {},\r\n  ThreadShareToSlack: threadShareToSlackResolver,\r\n  DeepLinkInfo: {},\r\n  AdminChatUser: adminChatUserResolver,\r\n  Notification: {},\r\n  NotificationAttachment: notificationAttachmentResolver,\r\n  NotificationMessageAttachment: {},\r\n  NotificationURLAttachment: {},\r\n  NotificationThreadAttachment: {},\r\n  NotificationSender: notificationSenderResolver,\r\n  NotificationPage: {},\r\n  NotificationHeaderTextNode: {},\r\n  NotificationHeaderUserNode: {},\r\n  NotificationHeaderNode: notificationHeaderNodeResolver,\r\n  NotificationEvent: notificationEventTypeResolver,\r\n  NotificationAdded: notificationAddedResolver,\r\n  NotificationReadStateUpdated: notificationReadStateUpdatedResolver,\r\n  NotificationDeleted: notificationDeletedResolver,\r\n  NotificationSummary: notificationSummaryResolver,\r\n  AdminGoRedirect: {},\r\n  Activity: activityResolver,\r\n  ThreadActivitySummary: {},\r\n  TestToken: {},\r\n  CustomerIssue: customerIssueResolver,\r\n  CustomerIssueChange: customerIssueChangeResolver,\r\n  CustomerIssueUpdate: {},\r\n  LogoConfigType: {},\r\n  PageThreadsResult: {},\r\n  MessageLinkPreview: {},\r\n  OrgMemberEvent: orgMemberEventTypeResolver,\r\n  OrgMemberAdded: orgMemberAddedResolver,\r\n  OrgMemberRemoved: orgMemberRemovedResolver,\r\n  OrgMembersResult: {},\r\n  SlackConnectedResult: {},\r\n  ThreadSubscriberUpdated: threadSubscriberUpdatedResolver,\r\n  Addon: {},\r\n  StripeSubscription: {},\r\n  ApplicationConsoleSetupInfo: {},\r\n};\r\n\r\n// adds index signature to objects. Numbers,strings, lists are unaffected\r\nexport type withIndexSignature<T> = T extends { [key: string]: unknown }\r\n  ? {\r\n      [Key in keyof T]: withIndexSignature<T[Key]>;\r\n    } & { [anyKey: string]: any }\r\n  : T;\r\n\r\n// apollo wants objects to have index signature, massage the type of\r\n// allResolvers to please apollo\r\nconst apolloResolvers: withIndexSignature<typeof allResolvers> = allResolvers;\r\n\r\nexport const graphQLSchema = makeExecutableSchema({\r\n  typeDefs: Schema,\r\n  resolvers: apolloResolvers,\r\n});\r\n", "import { v4 as uuid } from 'uuid';\r\nimport { Op } from 'sequelize';\r\n\r\nimport { serializableTransactionWithRetries } from 'server/src/entity/sequelize.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasPlatformApplicationID,\r\n} from 'server/src/auth/index.ts';\r\nimport {\r\n  isValidExternalID,\r\n  isExternalizedID,\r\n  extractInternalID,\r\n} from 'common/util/externalIDs.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\r\n\r\nexport const threadByExternalID2QueryResolver: Resolvers['Query']['threadByExternalID2'] =\r\n  async (_, { input: { externalThreadID } }, context) => {\r\n    if (\r\n      !isExternalizedID(externalThreadID) &&\r\n      !isValidExternalID(externalThreadID)\r\n    ) {\r\n      throw new Error('external threadID is not valid');\r\n    }\r\n    const { viewer } = context.session;\r\n\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(viewer);\r\n\r\n    // We use SERIALIZABLE here because this transaction falls directly in the\r\n    // area where READ_COMMITTED fails: we read one table, and then write to a\r\n    // different table based on what we read.  If this code runs at the same\r\n    // time as a different transaction inserts a row into the threads table,\r\n    // we might end up with one ID for the externalID in the threads table and\r\n    // a different one in the thread_ids table.\r\n    return await serializableTransactionWithRetries(async (transaction) => {\r\n      const thread =\r\n        await context.loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n          externalThreadID,\r\n          transaction,\r\n        );\r\n\r\n      if (thread) {\r\n        return { id: thread.id, thread };\r\n      } else {\r\n        // It's possible that the client is requested a threadID that DOES\r\n        // exist however not in viewer.org - in which case they will not be able\r\n        // to create it later, and we should error\r\n        const orgIDs = assertViewerHasOrgs(viewer);\r\n        const externalThreadIDUsedInDifferentOrg = await ThreadEntity.findOne({\r\n          where: {\r\n            externalID: externalThreadID,\r\n            platformApplicationID,\r\n            orgID: { [Op.notIn]: orgIDs },\r\n          },\r\n          transaction,\r\n        });\r\n\r\n        if (externalThreadIDUsedInDifferentOrg) {\r\n          // We have a database constraint that doesn't allow the same external thread ID to be used\r\n          // across a single platform application.\r\n          throw new ClientFacingError(\r\n            'Thread ID is already in use by another group in this application',\r\n          );\r\n        }\r\n      }\r\n\r\n      if (isExternalizedID(externalThreadID)) {\r\n        // This is an externalized ID, we know what the associated internal ID\r\n        // is without doing anything\r\n        return {\r\n          id: extractInternalID(externalThreadID)!,\r\n          thread: null,\r\n        };\r\n      }\r\n\r\n      const [threadID] = await PreallocatedThreadIDEntity.findOrCreate({\r\n        where: {\r\n          platformApplicationID,\r\n          externalID: externalThreadID,\r\n        },\r\n        defaults: {\r\n          id: uuid(),\r\n          platformApplicationID,\r\n          externalID: externalThreadID,\r\n        },\r\n        transaction,\r\n      });\r\n\r\n      return {\r\n        id: threadID.id,\r\n        thread: null,\r\n      };\r\n    });\r\n  };\r\n", "import mod from 'graphql-iso-date';\r\nexport const GraphQLDate = mod.GraphQLDate;\r\nexport const GraphQLTime = mod.GraphQLTime;\r\nexport const GraphQLDateTime = mod.GraphQLDateTime;\r\n", "import GraphQLUUID from 'graphql-type-uuid';\r\nexport default GraphQLUUID;\r\n", "import addrs from 'email-addresses';\r\nimport { FeatureFlag } from 'common/const/UserPreferenceKeys.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport { isInlineDisplayableImage } from '@cord-sdk/react/common/lib/uploads.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { injectDeeplinkQueryParamsV1 } from 'server/src/deep_link_threads/index.ts';\r\nimport { sendShareThreadToEmailEmail } from 'server/src/email/index.ts';\r\nimport type { CustomEmailTemplate } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { EmailOutboundNotificationEntity } from 'server/src/entity/email_notification/EmailOutboundNotificationEntity.ts';\r\nimport type {\r\n  MessageAnnotationAttachmentData,\r\n  MessageFileAttachmentData,\r\n  MessageScreenshotAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { getFileAttachmentEntities } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getFeatureFlagValue,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { generateOutboundNotificationLoggingURL } from 'server/src/notifications/outbound/logging.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getThreadDetails } from 'server/src/util/email.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { getTemplateIDForNotification } from 'server/src/email/util.ts';\r\n\r\nexport const shareThreadToEmailResolver: Resolvers['Mutation']['shareThreadToEmail'] =\r\n  sendErrors(async (_, args, originalContext) => {\r\n    const { threadID, email, screenshotID, byExternalID } = args;\r\n\r\n    // Just making sure the email address is a valid one\r\n    const parsedEmailAddress = addrs.parseOneAddress(email);\r\n    const validDomain =\r\n      parsedEmailAddress?.type === 'mailbox' &&\r\n      parsedEmailAddress.domain.includes('.');\r\n\r\n    if (!parsedEmailAddress || !validDomain) {\r\n      throw new ApiCallerError('invalid_email');\r\n    }\r\n\r\n    const thread = byExternalID\r\n      ? await originalContext.loaders.threadLoader.loadByExternalID(threadID)\r\n      : await originalContext.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      throw new ApiCallerError('thread_not_found');\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n    const { viewer } = context.session;\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n    const customerID = context.application?.customerID;\r\n\r\n    const [forceShareViaEmailEnabled, shareViaEmailEnabled] = await Promise.all(\r\n      [\r\n        context.loaders.userPreferenceLoader.loadPreferenceValueForViewer(\r\n          FeatureFlag.EMAIL_SHARING,\r\n        ),\r\n        getTypedFeatureFlagValue(FeatureFlags.EMAIL_SHARING, {\r\n          userID,\r\n          orgID,\r\n          platformApplicationID: viewer.platformApplicationID ?? 'extension',\r\n          version: context.clientVersion,\r\n          customerID,\r\n        }),\r\n      ],\r\n    );\r\n    if (shareViaEmailEnabled !== true && forceShareViaEmailEnabled !== true) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'Unable to share via email',\r\n      });\r\n    }\r\n\r\n    const [sender, [lastMessage]] = await Promise.all([\r\n      context.loaders.userLoader.loadUserInAnyViewerOrg(userID),\r\n      context.loaders.messageLoader.loadMessages({\r\n        threadID: thread.id,\r\n        ignoreDeleted: true,\r\n        range: -1,\r\n      }),\r\n    ]);\r\n\r\n    if (!sender || !thread || !lastMessage) {\r\n      context.logger.error(\r\n        'Failed to share email because a required entity failed to load',\r\n        {\r\n          userID,\r\n          fetched_user_id: sender?.id,\r\n          threadID: thread.id,\r\n          fetched_thread_id: thread?.id,\r\n          fetched_last_message: lastMessage.id,\r\n          email,\r\n        },\r\n      );\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'Unable to share via email',\r\n      });\r\n    }\r\n\r\n    let partnerDetails: CustomEmailTemplate | undefined = undefined;\r\n    if (sender.platformApplicationID) {\r\n      const application = await context.loaders.applicationLoader.load(\r\n        sender.platformApplicationID,\r\n      );\r\n\r\n      partnerDetails = application?.customEmailTemplate ?? undefined;\r\n    }\r\n    const featureFlagUser = flagsUserFromContext(context);\r\n    // NOTE: Instead of creating a new FeatureFlag, I am re-using\r\n    // QUERY_PARAM_DEEP_LINKS_IN_SHARE_TO_SLACK because if a vendor allowed us to\r\n    // inject deeplinking query parameters into their URLs when we share a thread\r\n    // to Slack, we can probably inject the query parameters into their URLs\r\n    // here too.\r\n    const injectDeeplinkQueryParams = await getFeatureFlagValue(\r\n      FeatureFlag.QUERY_PARAM_DEEP_LINKS_IN_SHARE_TO_SLACK,\r\n      featureFlagUser,\r\n    );\r\n\r\n    let notificationURL = lastMessage.url || thread.url;\r\n    if (injectDeeplinkQueryParams === true) {\r\n      notificationURL = injectDeeplinkQueryParamsV1(\r\n        context.logger,\r\n        notificationURL,\r\n        thread.id,\r\n        lastMessage.id,\r\n      );\r\n    }\r\n\r\n    // Check if the email is registered to an individual in the Application space\r\n    // We only consider the user to be found if there is one and only one user with\r\n    // that email and that organization.  Otherwise, we don't know which user to\r\n    // associate a reply with so we don't specify a particular user\r\n    let targetUserID: string | null = null;\r\n    const potentialEmailUsers =\r\n      await context.loaders.userLoader.loadUserForEmailInOrg(email, orgID);\r\n    if (potentialEmailUsers.length === 1) {\r\n      targetUserID = potentialEmailUsers[0].id;\r\n    }\r\n\r\n    // wrap in cord.to redirect\r\n    notificationURL = await generateOutboundNotificationLoggingURL({\r\n      messageID: lastMessage.id,\r\n      url: notificationURL,\r\n      targetOrgID: orgID,\r\n      targetUserID,\r\n      type: 'sharedToEmail',\r\n      platformApplicationID: viewer.platformApplicationID,\r\n      metadata: {\r\n        type: 'sharedToEmail',\r\n        targetEmail: email,\r\n      },\r\n      sharerUserID: userID,\r\n      sharerOrgID: orgID,\r\n    });\r\n\r\n    const messageAttachments =\r\n      await context.loaders.messageAttachmentLoader.loadAttachmentsForMessage(\r\n        lastMessage.id,\r\n      );\r\n    const files = await context.loaders.fileLoader.loadFiles(\r\n      getFileAttachmentEntities(messageAttachments)\r\n        .map((attachment) => {\r\n          switch (attachment.type) {\r\n            case MessageAttachmentType.FILE:\r\n              return (attachment.data as MessageFileAttachmentData).fileID;\r\n            case MessageAttachmentType.ANNOTATION: {\r\n              const data = attachment.data as MessageAnnotationAttachmentData;\r\n              return data.blurredScreenshotFileID ?? data.screenshotFileID;\r\n            }\r\n            case MessageAttachmentType.SCREENSHOT: {\r\n              const data = attachment.data as MessageScreenshotAttachmentData;\r\n              return data.blurredScreenshotFileID ?? data.screenshotFileID;\r\n            }\r\n\r\n            default:\r\n              return null;\r\n          }\r\n        })\r\n        .filter(isDefined),\r\n    );\r\n\r\n    const imageURLs = files\r\n      .filter((file) => isInlineDisplayableImage(file.mimeType))\r\n      .map((file) => file.getPermanentDownloadURL());\r\n    const nonImageAttachmentNames = files\r\n      .filter((file) => !isInlineDisplayableImage(file.mimeType))\r\n      .map((file) => file.name);\r\n\r\n    if (screenshotID && imageURLs.length === 0) {\r\n      // only include screenshot as extra context if there aren't other images\r\n      // for context\r\n      const screenshotFile =\r\n        await context.loaders.fileLoader.loadFile(screenshotID);\r\n      if (screenshotFile) {\r\n        imageURLs.push(screenshotFile.getPermanentDownloadURL());\r\n      } else {\r\n        context.logger.error(\r\n          'Failed to share email because a screenshotFile failed to load',\r\n          {\r\n            screenshotID,\r\n            userID,\r\n            threadID: thread.id,\r\n            last_message: lastMessage.id,\r\n            email,\r\n          },\r\n        );\r\n      }\r\n    }\r\n\r\n    const getThreadDetailsArgs = {\r\n      threadID: thread.id,\r\n      currentMessage: lastMessage,\r\n      userID,\r\n      sender,\r\n      currentMessageAttachments: imageURLs,\r\n      currentFileAttachments: nonImageAttachmentNames,\r\n      context,\r\n    };\r\n    const threadDetails = await getThreadDetails(getThreadDetailsArgs);\r\n\r\n    if (!threadDetails) {\r\n      context.logger.error(\r\n        'Failed to share email because building threadDetails failed',\r\n        {\r\n          threadID,\r\n          currentMessage: lastMessage.id,\r\n          userID,\r\n          sender: sender.id,\r\n          currentMessageAttachments: imageURLs,\r\n          currentFileAttachments: nonImageAttachmentNames,\r\n          email,\r\n        },\r\n      );\r\n      throw new ApiCallerError('thread_not_found');\r\n    }\r\n\r\n    let emailNotification = null;\r\n    if (targetUserID) {\r\n      emailNotification = await EmailOutboundNotificationEntity.create({\r\n        userID: targetUserID,\r\n        orgID: orgID,\r\n        threadID: thread.id,\r\n        email: email,\r\n        // Target user may not be in same org - could instead be part of Slack org\r\n        threadOrgID: thread.orgID,\r\n      });\r\n    }\r\n    const templateID = await getTemplateIDForNotification({\r\n      notificationActionType: 'share_to_email',\r\n      context,\r\n      featureFlagUser,\r\n    });\r\n\r\n    // TODO: should there be an unsubscribe URL?\r\n    const success = await sendShareThreadToEmailEmail(\r\n      context,\r\n      email,\r\n      thread.name,\r\n      notificationURL,\r\n      partnerDetails,\r\n      threadDetails,\r\n      emailNotification,\r\n      templateID,\r\n    );\r\n\r\n    return { success, failureDetails: null };\r\n  });\r\n", "import { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport type { SuccessResult } from 'server/src/schema/resolverTypes.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\n\r\nexport function sendErrors<Args extends unknown[]>(\r\n  func: (...args: Args) => SuccessResult | Promise<SuccessResult>,\r\n) {\r\n  return async (...args: Args) => {\r\n    try {\r\n      return await func(...args);\r\n    } catch (error) {\r\n      if (\r\n        error instanceof ApiCallerError ||\r\n        error instanceof ClientFacingError\r\n      ) {\r\n        return {\r\n          success: false,\r\n          failureDetails: {\r\n            code: error.name,\r\n            message: error.message,\r\n          },\r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n", "import {\r\n  addThreadToSelectedSlackChannel,\r\n  findSlackBotCredentials,\r\n} from 'server/src/slack/util.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { addCordBotToSlackChannels } from 'server/src/slack/api.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport const addThreadToSelectedSlackChannelResolver: Resolvers['Mutation']['addThreadToSlackChannel'] =\r\n  sendErrors(async (_, args, originalContext) => {\r\n    const { slackChannelID, threadID, installBot, byExternalID } = args;\r\n\r\n    const thread = byExternalID\r\n      ? await originalContext.loaders.threadLoader.loadByExternalID(threadID)\r\n      : await originalContext.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      throw new ApiCallerError('thread_not_found');\r\n    }\r\n\r\n    const org = await originalContext.loaders.orgLoader.loadOrg(thread.orgID);\r\n    if (!org) {\r\n      throw new ApiCallerError('group_not_found');\r\n    }\r\n    const slackOrg = await org.loadLinkedSlackOrg();\r\n\r\n    if (!slackOrg) {\r\n      throw new ApiCallerError('group_not_connected_to_slack');\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n    const { viewer } = context.session;\r\n    const userID = assertViewerHasUser(viewer);\r\n\r\n    const sharerUser =\r\n      await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n\r\n    if (!sharerUser) {\r\n      throw new ApiCallerError('user_not_found');\r\n    }\r\n\r\n    const authData = await findSlackBotCredentials(context);\r\n    if (!authData) {\r\n      throw new ApiCallerError('slack_credentials_not_found');\r\n    }\r\n\r\n    const slackChannel =\r\n      await context.loaders.slackChannelLoader.loadSlackChannel(slackChannelID);\r\n\r\n    if (!slackChannel) {\r\n      throw new ApiCallerError('slack_channel_not_found', {\r\n        message: `Cannot load slack channel ${slackChannelID}`,\r\n      });\r\n    }\r\n\r\n    // We have recently noticed that Slack's `member_left_channel` event is\r\n    // very unreliable: when removing the Cord bot from a channel, we don't\r\n    // get this event, even though we definitely should. This means that when\r\n    // we think our bot is present in a channel (because we got\r\n    // `member_joined_channel` in the past - and that event seems to work\r\n    // reliably), it might not be. In that case the message sharing would fail\r\n    // consistently, and we would never present the user with the UI to add\r\n    // the bot to the channel, because our information is that it already is\r\n    // in there.\r\n    // Workaround: when we think we have the bot in the channel already, send a\r\n    // request to the Slack API to join the channel before posting the\r\n    // message there. This *should* be a no-op. However, if our information\r\n    // is outdated, it means that we re-add the Cord bot to the channel when\r\n    // someone shares a message. Not ideal, because the UI we presented made\r\n    // it look like the channel already has the bot in it (so sharing doesn't\r\n    // come with the side effect of message scraping), but what can we do -\r\n    // it's a Slack bug.\r\n\r\n    if (slackChannel.added || installBot) {\r\n      await addCordBotToSlackChannels(context, authData.bot_access_token, [\r\n        slackChannelID,\r\n      ]);\r\n    } else {\r\n      return { success: false, failureDetails: null };\r\n    }\r\n\r\n    const success = await addThreadToSelectedSlackChannel(\r\n      context,\r\n      authData,\r\n      slackChannelID,\r\n      sharerUser,\r\n      thread.id,\r\n      'internal',\r\n    );\r\n\r\n    return { success, failureDetails: null };\r\n  });\r\n", "import { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { assertValid, validateFileForUpload } from 'common/uploads/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nexport const createFileMutationResolver: Resolvers['Mutation']['createFile'] =\r\n  async (_, args, originalContext) => {\r\n    const { id, name, mimeType, size, provider, application, threadOrgID } =\r\n      args;\r\n\r\n    if (provider !== undefined) {\r\n      deprecated('createFile: provider');\r\n    }\r\n    if (application !== undefined) {\r\n      deprecated('createFile: application');\r\n    }\r\n\r\n    assertValid(\r\n      validateFileForUpload('attachment', { name, mimeType, size: size ?? 0 }),\r\n    );\r\n\r\n    const context = await getRelevantContext(originalContext, threadOrgID);\r\n\r\n    const mutator = new FileMutator(context.session.viewer, context.loaders);\r\n    const file = await mutator.createFileForUpload(\r\n      id,\r\n      name,\r\n      mimeType,\r\n      size ?? 0,\r\n      undefined,\r\n    );\r\n\r\n    return {\r\n      uploadURL: size\r\n        ? await file.getSignedUploadURL(context.loaders.s3BucketLoader)\r\n        : null,\r\n      downloadURL: await file.getSignedDownloadURL(\r\n        context.loaders.s3BucketLoader,\r\n      ),\r\n    };\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { updateThreadMessage } from 'server/src/public/routes/platform/messages/UpdateThreadMessageHandler.ts';\r\nimport { assertViewerHasPlatformUser } from 'server/src/auth/index.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\n\r\nexport const createMessageReactionResolver: Resolvers['Mutation']['createMessageReaction'] =\r\n  sendErrors(async (_, args, context) => {\r\n    const { messageID, unicodeReaction } = args;\r\n\r\n    const message = await context.loaders.messageLoader.loadMessage(messageID);\r\n    if (!message) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const thread = await context.loaders.threadLoader.loadThread(\r\n      message.threadID,\r\n    );\r\n\r\n    if (!thread) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const { externalUserID } = assertViewerHasPlatformUser(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const relevantContext = await getRelevantContext(context, message.orgID);\r\n    await updateThreadMessage({\r\n      context: relevantContext,\r\n      thread,\r\n      message,\r\n      addReactions: [\r\n        {\r\n          reaction: unicodeReaction,\r\n          userID: externalUserID,\r\n        },\r\n      ],\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  });\r\n", "import { UniqueConstraintError } from 'sequelize';\r\n\r\nimport { toPageContext } from 'common/types/index.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport type { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport {\r\n  assertViewerHasOrg,\r\n  assertViewerHasPlatformUser,\r\n  assertViewerHasSingleOrgForWrite,\r\n} from 'server/src/auth/index.ts';\r\nimport { serializableTransactionWithRetries } from 'server/src/entity/sequelize.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { stripInboxCountPrefix } from 'common/page_context/util.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { executeNewMessageCreationTasks } from 'server/src/message/executeMessageTasks.ts';\r\nimport { MessageReactionMutator } from 'server/src/entity/message_reaction/MessageReactionMutator.ts';\r\nimport { internalizeContent } from 'server/src/public/routes/platform/messages/util.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport { validateMessageContent } from 'server/src/message/util/validateMessageContent.ts';\r\nimport { PreallocatedThreadIDEntity } from 'server/src/entity/preallocated_thread_id/PreallocatedThreadIDEntity.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport const createThreadMessageResolver: Resolvers['Mutation']['createThreadMessage'] =\r\n  async (_, args, originalContext) => {\r\n    const { viewer: originalViewer } = originalContext.session;\r\n    const {\r\n      content: internalContent,\r\n      externalContent,\r\n      messageID,\r\n      threadID,\r\n      url,\r\n      fileAttachments,\r\n      createNewThread,\r\n      newThreadMetadata,\r\n      newMessageMetadata,\r\n      annotationAttachments,\r\n      screenshotAttachment,\r\n      task,\r\n      pageName,\r\n      threadOptions,\r\n      externalMessageID,\r\n      addReactions,\r\n      iconURL,\r\n      translationKey,\r\n      extraClassnames,\r\n      createThread,\r\n    } = args.input;\r\n    const { userID, platformApplicationID } =\r\n      assertViewerHasPlatformUser(originalViewer);\r\n\r\n    if (createNewThread) {\r\n      // Check error here to make sure we throw a useful error message.\r\n      assertViewerHasSingleOrgForWrite(\r\n        originalViewer,\r\n        'Thread ID does not exist and could not be created because a group ID was not specified for the new thread',\r\n      );\r\n    }\r\n\r\n    if (args.input.type !== undefined) {\r\n      deprecated('graphql: createThreadMessage type', platformApplicationID);\r\n      if (args.input.type && args.input.type !== 'user_message') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: 'Only user_messages can be sent with the JS API',\r\n        });\r\n      }\r\n    }\r\n\r\n    const pageMutator = new PageMutator(originalViewer);\r\n\r\n    const application = await ApplicationEntity.findByPk(platformApplicationID);\r\n\r\n    // We cannot create threads without an application.\r\n    // We can create a reply without an application, but that can happen only from\r\n    // messages via Slack or email, not from here! Check the relevant event handlers for those\r\n    if (!application) {\r\n      throw new Error(\r\n        `Cannot access the create a new thread message resolver without having an application ID.`,\r\n      );\r\n    }\r\n\r\n    if (internalContent !== undefined) {\r\n      deprecated(\r\n        'create_thread_message: internalContent',\r\n        platformApplicationID,\r\n      );\r\n    }\r\n\r\n    // in its own fn to assist with type-checking\r\n    async function fetchPageAndExistingThread(): Promise<\r\n      [PageEntity, ThreadEntity | undefined]\r\n    > {\r\n      let page: PageEntity | null;\r\n      let existingThread: ThreadEntity | undefined;\r\n\r\n      if (createNewThread) {\r\n        const pageContext = toPageContext(args.input.pageContext);\r\n        const pageContextHash =\r\n          pageContext && (await pageMutator.createPageIfNotExists(pageContext));\r\n\r\n        // If this is a new thread, it must come with a pageContext, pageContextHash\r\n        // and url.  We can use pageContextHash to find the page.\r\n        if (!pageContext || !pageContextHash || !url) {\r\n          throw new Error(`Thread cannot be created in null page context`);\r\n        }\r\n        page =\r\n          await originalContext.loaders.pageLoader.getPageFromContextHash(\r\n            pageContextHash,\r\n          );\r\n      } else {\r\n        // If it's a reply to an existing thread, we might not have pageContextHash\r\n        // because this could be a reply from the inbox.  We can, however, use the\r\n        // threadID to find it, since the thread already exists.\r\n        existingThread =\r\n          (await originalContext.loaders.threadLoader.loadThread(threadID)) ??\r\n          undefined;\r\n\r\n        if (!existingThread) {\r\n          throw new Error('No thread found for reply');\r\n        }\r\n\r\n        page =\r\n          await originalContext.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(\r\n            threadID,\r\n          );\r\n      }\r\n\r\n      if (!page) {\r\n        throw new Error('No page found');\r\n      }\r\n\r\n      return [page, existingThread];\r\n    }\r\n\r\n    const [page, existingThread] = await fetchPageAndExistingThread();\r\n\r\n    const content = externalContent\r\n      ? await internalizeContent(\r\n          externalContent,\r\n          platformApplicationID,\r\n          existingThread?.orgID ?? assertViewerHasOrg(originalViewer),\r\n        )\r\n      : internalContent;\r\n    if (!content) {\r\n      throw new Error('No content');\r\n    }\r\n    validateMessageContent(content);\r\n\r\n    const initialMessageCount = existingThread\r\n      ? await originalContext.loaders.threadLoader.loadMessagesCountNoOrgCheck(\r\n          existingThread.id,\r\n        )\r\n      : 0;\r\n    const isFirstMessageOrNewThread =\r\n      createNewThread || initialMessageCount === 0;\r\n\r\n    let thread: ThreadEntity;\r\n    let message: MessageEntity;\r\n\r\n    // Now let's create the message, and the thread too if this is a new thread\r\n    try {\r\n      // We use SERIALIZABLE here because it's needed to ensure the threads and\r\n      // thread_ids tables remain consistent, see thread_by_external_id.ts\r\n      [message, thread] = await serializableTransactionWithRetries(\r\n        async (transaction): Promise<[MessageEntity, ThreadEntity]> => {\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          let thread: ThreadEntity | undefined = existingThread;\r\n          if (createNewThread) {\r\n            if (!url) {\r\n              // This should never happen because we checked this above and would have thrown.\r\n              // This check is here to \"remind\" TypeScript that `url` is a `string`\r\n              throw new Error(\r\n                'Logic error: should have thrown in fetchPageAndExistingThread',\r\n              );\r\n            }\r\n\r\n            const threadName =\r\n              createThread?.name ??\r\n              (pageName ? stripInboxCountPrefix(pageName) : url);\r\n\r\n            const threadIDEntity = await PreallocatedThreadIDEntity.findOne({\r\n              where: {\r\n                platformApplicationID,\r\n                id: threadID,\r\n              },\r\n              transaction,\r\n            });\r\n\r\n            thread = await new ThreadMutator(\r\n              originalViewer,\r\n              originalContext.loaders,\r\n            ).createThreadOnPage(\r\n              threadID,\r\n              createThread?.url ?? url,\r\n              page,\r\n              threadName,\r\n              transaction,\r\n              application.id,\r\n              threadIDEntity?.externalID ?? null,\r\n              newThreadMetadata ?? createThread?.metadata ?? {},\r\n              createThread?.extraClassnames,\r\n              createThread?.addSubscribers ??\r\n                threadOptions?.additionalSubscribersOnCreate,\r\n            );\r\n          }\r\n\r\n          if (!thread) {\r\n            throw new Error('Failed to find or create thread');\r\n          }\r\n\r\n          const messageMutator = new MessageMutator(\r\n            originalViewer,\r\n            originalContext.loaders,\r\n          );\r\n          const reactionMutator = new MessageReactionMutator(\r\n            originalViewer,\r\n            originalContext.loaders,\r\n          );\r\n          // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n          const message = await messageMutator.createMessage(\r\n            {\r\n              id: messageID,\r\n              externalID: externalMessageID ?? undefined,\r\n              thread,\r\n              content: content,\r\n              url: url ?? null,\r\n              iconURL: iconURL ?? undefined,\r\n              translationKey: translationKey ?? undefined,\r\n              extraClassnames: extraClassnames ?? undefined,\r\n              metadata: newMessageMetadata ?? {},\r\n            },\r\n            transaction,\r\n          );\r\n          await Promise.all(\r\n            (addReactions ?? []).map(async (reaction) => {\r\n              return await reactionMutator.createOne(\r\n                message.id,\r\n                reaction,\r\n                undefined,\r\n                transaction,\r\n              );\r\n            }),\r\n          );\r\n          return [message, thread];\r\n        },\r\n      );\r\n    } catch (e) {\r\n      // This is supposed to catch cases where the frontend retries a message\r\n      // send that it thinks failed, but which actually succeeded, and so we\r\n      // don't want to return an error on the retry. But there may be something\r\n      // weird going on in test which is also throwing this error and causing\r\n      // tests to very intermittently fail? Re-throwing in tests to try that\r\n      // hypothesis.\r\n      if (e instanceof UniqueConstraintError && !process.env.IS_TEST) {\r\n        return { success: true, failureDetails: null };\r\n      }\r\n      throw e;\r\n    }\r\n\r\n    const granularPermissionsEnabled = await getTypedFeatureFlagValue(\r\n      FeatureFlags.GRANULAR_PERMISSIONS,\r\n      flagsUserFromContext(originalContext),\r\n    );\r\n\r\n    // We previously would swap over the org ID in the context/viewer to that of\r\n    // the thread. With granular permissions, we can't do that, since the user\r\n    // might not be a member of that org. Most of our code deals with that just\r\n    // fine (taking the org from the thread), but we aren't necessarily ready to\r\n    // rely on that just yet, so put the removal of that logic behind the\r\n    // granular permissions feature flag.\r\n    let context;\r\n    if (granularPermissionsEnabled) {\r\n      context = originalContext;\r\n    } else {\r\n      context = await getRelevantContext(originalContext, thread.orgID);\r\n    }\r\n\r\n    const flagsUser = {\r\n      userID,\r\n      orgID: thread.orgID,\r\n      platformApplicationID: application?.id ?? 'extension',\r\n      version: context.clientVersion,\r\n      customerID: application?.customerID,\r\n    };\r\n\r\n    await executeNewMessageCreationTasks({\r\n      context,\r\n      flagsUser,\r\n      application,\r\n      page,\r\n      thread,\r\n      message,\r\n      fileAttachments,\r\n      annotationAttachments,\r\n      screenshotAttachment,\r\n      isFirstMessage: isFirstMessageOrNewThread,\r\n      task,\r\n      subscribeToThread: true,\r\n    });\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n", "import type { UrlWithParsedQuery } from 'url';\r\nimport { parse } from 'url';\r\n\r\nimport type { Location } from 'common/types/index.ts';\r\nimport type { CleanUrl } from 'common/page_context/index.ts';\r\nimport { CORD_ARGS_TO_REMOVE } from 'common/util/index.ts';\r\n\r\nexport type PageContextNameFunction = (\r\n  data: Location,\r\n  document?: Document,\r\n) => string;\r\n\r\nconst inboxCountPrefixRegex = /^(\\([0-9]+\\)) (.+)$/;\r\n\r\nexport function stripInboxCountPrefix(title: string) {\r\n  const trimmedTitle = title.trim();\r\n  const match = trimmedTitle.match(inboxCountPrefixRegex);\r\n  if (!match) {\r\n    return trimmedTitle;\r\n  }\r\n\r\n  if (match[2]) {\r\n    return match[2].trim();\r\n  }\r\n\r\n  return trimmedTitle;\r\n}\r\n\r\nfunction parsedURL(url: string) {\r\n  return parse(url, true);\r\n}\r\n\r\nexport function cleanupURL(url: string): CleanUrl {\r\n  const parsed = parsedURL(url);\r\n  return removeCordArgs(parsed);\r\n}\r\n\r\nfunction removeCordArgs(url: UrlWithParsedQuery): CleanUrl {\r\n  for (const arg of CORD_ARGS_TO_REMOVE) {\r\n    delete url.query[arg];\r\n  }\r\n  if (url.search) {\r\n    const params = new URLSearchParams(url.search);\r\n    for (const arg of CORD_ARGS_TO_REMOVE) {\r\n      params.delete(arg);\r\n    }\r\n    const newSearch = params.toString();\r\n    if (newSearch) {\r\n      url.search = '?' + newSearch;\r\n    } else {\r\n      url.search = '';\r\n    }\r\n  }\r\n  return { ...url, cleanedUp: true };\r\n}\r\n\r\nexport const contextDataToString = (data: any) =>\r\n  typeof data === 'object'\r\n    ? Object.entries(data)\r\n        .sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))\r\n        .map(([key, value]) => `${key}: ${value}`)\r\n        .join(', ')\r\n    : '';\r\n\r\nexport const DefaultPageContextNameFunction: PageContextNameFunction = (\r\n  data,\r\n  document,\r\n) => getDocumentTitle(document) || contextDataToString(data);\r\n\r\nexport function getDocumentTitle(document: Document | undefined) {\r\n  const metaElement =\r\n    document?.head?.querySelector(\"meta[property='cord:title']\") ||\r\n    document?.head?.querySelector(\"meta[name='cord:title']\");\r\n\r\n  return metaElement?.getAttribute('content') ?? document?.title;\r\n}\r\n", "import { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasPlatformUser } from 'server/src/auth/index.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { updateThreadMessage } from 'server/src/public/routes/platform/messages/UpdateThreadMessageHandler.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const deleteMessageReactionMutationResolver: Resolvers['Mutation']['deleteMessageReaction'] =\r\n  sendErrors(async (_, args, context) => {\r\n    const { messageID, reactionID } = args;\r\n    const [message, reaction] = await Promise.all([\r\n      context.loaders.messageLoader.loadMessage(messageID),\r\n      context.loaders.messageReactionLoader.loadReactionNoOrgCheck(reactionID),\r\n    ]);\r\n\r\n    if (!message || !reaction) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const thread = await context.loaders.threadLoader.loadThread(\r\n      message.threadID,\r\n    );\r\n\r\n    if (!thread) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const { externalUserID } = assertViewerHasPlatformUser(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const relevantContext = await getRelevantContext(context, message.orgID);\r\n    await updateThreadMessage({\r\n      context: relevantContext,\r\n      thread,\r\n      message,\r\n      removeReactions: [\r\n        {\r\n          reaction: reaction.unicodeReaction,\r\n          userID: externalUserID,\r\n        },\r\n      ],\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  });\r\n", "import { removeExternalConnection } from 'server/src/third_party_tasks/util.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nexport const disconnectThirdPartyMutationResolver: Resolvers['Mutation']['disconnectThirdParty'] =\r\n  async (_, args, context) => {\r\n    const { connectionType } = args;\r\n\r\n    const success = await removeExternalConnection(\r\n      context.session.viewer,\r\n      connectionType,\r\n    );\r\n\r\n    return {\r\n      success,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import { EventMutator } from 'server/src/entity/event/EventMutator.ts';\r\nimport { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nconst eventCountMetric = Counter({\r\n  name: 'ClientEvent',\r\n  help: 'Log events received from the client',\r\n  labelNames: ['type', 'appID'],\r\n});\r\n\r\nexport const logEventsMutationResolver: Resolvers['Mutation']['logEvents'] =\r\n  async (_, args, context) => {\r\n    const events = args.events;\r\n\r\n    events.forEach((event) => {\r\n      const level = event.logLevel;\r\n      if (level === 'debug') {\r\n        context.segmentLogger.partnerLog(\r\n          event.type,\r\n          { installationID: event.installationID, ...event.metadata },\r\n          event.payload,\r\n          event.customEventMetadata ?? undefined,\r\n        );\r\n      }\r\n\r\n      // Winston will automatically append any `message` in the `payload` to the\r\n      // main message, but the Sentry stuff we call by hand will not, so combine\r\n      // ourselves so that we don't just see things like \"react-error\" in #ops\r\n      // but actual useful messages.\r\n      let combinedMessage = event.type;\r\n      if ('message' in event.payload) {\r\n        combinedMessage += `: ${event.payload.message}`;\r\n      }\r\n      context.logger.log(\r\n        level,\r\n        combinedMessage,\r\n        {\r\n          pageLoadID: event.pageLoadID,\r\n          installationID: event.installationID,\r\n          eventNumber: event.eventNumber,\r\n          ...event.payload,\r\n          ...event.metadata,\r\n          version: context.clientVersion,\r\n          message: undefined,\r\n        },\r\n        {\r\n          // make sure Sentry won't aggregate too much into one issue, just\r\n          // because we log everything from this place in the code.\r\n          // See https://docs.sentry.io/platforms/javascript/usage/sdk-fingerprinting/#group-errors-with-greater-granularity\r\n          // In addition to the default attributes, we make `event.type` part of\r\n          // the fingerprint\r\n          sentryFingerPrint: ['{{ default }}', event.type],\r\n        },\r\n      );\r\n\r\n      eventCountMetric.inc({\r\n        type: event.type,\r\n        appID: context.session.viewer.platformApplicationID ?? 'null',\r\n      });\r\n    });\r\n\r\n    const promises = events.map((event) =>\r\n      new EventMutator(context.session).createEvent(\r\n        event,\r\n        context.clientVersion,\r\n        context.deployment,\r\n      ),\r\n    );\r\n    const created = await Promise.all(promises);\r\n    return events.length === created.filter((result) => !!result).length;\r\n  };\r\n", "import { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nexport const setFileUploadStatusMutationResolver: Resolvers['Mutation']['setFileUploadStatus'] =\r\n  async (_, args, originalContext) => {\r\n    const { id, status, threadOrgID } = args;\r\n\r\n    const context = await getRelevantContext(originalContext, threadOrgID);\r\n\r\n    const { viewer } = context.session;\r\n\r\n    const fileMutator = new FileMutator(viewer, context.loaders);\r\n\r\n    const file = await fileMutator.setFileUploadStatus(id, status);\r\n    if (!file) {\r\n      return { success: false, failureDetails: null };\r\n    }\r\n\r\n    const attachmentLoader = context.loaders.messageAttachmentLoader;\r\n    const attachment = await attachmentLoader.getAttachmentFromFileID(id);\r\n\r\n    if (attachment) {\r\n      const messageLoader = context.loaders.messageLoader;\r\n      const message = await messageLoader.loadMessage(attachment.messageID);\r\n      if (message) {\r\n        backgroundPromise(\r\n          publishPubSubEvent(\r\n            'thread-message-updated',\r\n            { threadID: message.threadID },\r\n            { messageID: message.id },\r\n          ),\r\n          context.logger,\r\n        );\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import { UserPreferenceMutator } from 'server/src/entity/user_preference/UserPreferenceMutator.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nconst MAX_VALUE_SIZE_BYTES = 1024;\r\n\r\nexport const setPreferenceMutationResolver: Resolvers['Mutation']['setPreference'] =\r\n  async (_, args, context) => {\r\n    const { key, value } = args;\r\n    if (JSON.stringify(value).length >= MAX_VALUE_SIZE_BYTES) {\r\n      throw new ApiCallerError('invalid_request', {\r\n        message: 'Value too large',\r\n      });\r\n    }\r\n\r\n    const mutator = new UserPreferenceMutator(context.session.viewer);\r\n    await mutator.setViewerPreference(key, value);\r\n\r\n    return null;\r\n  };\r\n", "import { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport const setSubscribedMutationResolver: Resolvers['Mutation']['setSubscribed'] =\r\n  async (_, args, originalContext) => {\r\n    const { threadID, subscribed } = args;\r\n\r\n    const thread =\r\n      await originalContext.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      throw new Error('Thread does not exist');\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n\r\n    const originalSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const threadParticipantMutator = new ThreadParticipantMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n\r\n    await threadParticipantMutator.setViewerSubscribed(thread, subscribed);\r\n\r\n    const newSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const removed = [...originalSubscribers].filter(\r\n      (s) => !newSubscribers.has(s),\r\n    );\r\n    const added = [...newSubscribers].filter(\r\n      (s) => !originalSubscribers.has(s),\r\n    );\r\n    if (removed.length > 0 || added.length > 0) {\r\n      backgroundPromise(\r\n        publishPubSubEvent(\r\n          'thread-filterable-properties-updated',\r\n          { orgID: thread.orgID },\r\n          { threadID, changes: { subscribers: { added, removed } } },\r\n        ),\r\n      );\r\n    }\r\n\r\n    return true;\r\n  };\r\n", "import { setUserTyping } from 'server/src/presence/typing.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const setTypingMutationResolver: Resolvers['Mutation']['setTyping'] =\r\n  async (_, args, context) => {\r\n    const { viewer } = context.session;\r\n    const userID = assertViewerHasUser(viewer);\r\n    const { typing, threadID } = args;\r\n\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      return false;\r\n    }\r\n\r\n    await setUserTyping(context.logger, threadID, userID, typing);\r\n    return true;\r\n  };\r\n", "import { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { ThreadEntity } from 'server/src/entity/thread/ThreadEntity.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { executeUpdateMessageTasks } from 'server/src/message/executeMessageTasks.ts';\r\n\r\nexport const updateMessageResolver: Resolvers['Mutation']['updateMessage'] =\r\n  async (_, args, originalContext) => {\r\n    const {\r\n      id,\r\n      content,\r\n      fileAttachments,\r\n      annotationAttachments,\r\n      deleted,\r\n      task,\r\n    } = args;\r\n\r\n    // NB loadMessage only allows a user to load messages from an org they are a\r\n    // member of, or from an org their current viewer org is Slack-linked to, so\r\n    // no need to assertViewerHasThread here\r\n    const message = await originalContext.loaders.messageLoader.loadMessage(id);\r\n    if (message === null) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    // Make sure that if a message is not a user message, it cannot be updated\r\n    if (message.type !== 'user_message') {\r\n      originalContext.logger.warn('Message cannot be updated', {\r\n        messageID: message.id,\r\n        messageType: message.type,\r\n      });\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    // Now that we've loaded the message, create a context that is suitable for\r\n    // editing it, which may be for a different org if we're editing this from\r\n    // the unified inbox\r\n    const context = await getRelevantContext(originalContext, message.orgID);\r\n    const viewer = context.session.viewer;\r\n\r\n    const thread = await ThreadEntity.findOne({\r\n      where: {\r\n        id: message.threadID,\r\n        platformApplicationID: viewer.platformApplicationID,\r\n      },\r\n    });\r\n\r\n    if (!thread) {\r\n      throw new ApiCallerError('thread_not_found', {\r\n        message: `Could not find thread for message ${id}`,\r\n      });\r\n    }\r\n\r\n    const originalSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const messageMutator = new MessageMutator(viewer, context.loaders);\r\n    const wasDeletedOrUndeleted = deleted !== undefined && deleted !== null;\r\n\r\n    if (wasDeletedOrUndeleted) {\r\n      await messageMutator.setDeleted(message, deleted);\r\n    } else if (content !== undefined && content !== null) {\r\n      await messageMutator.updateContent(context.logger, message, content);\r\n    }\r\n\r\n    // need to make sure we pass the updated content\r\n    let newContentMessage = message;\r\n    if (content !== undefined && content !== null) {\r\n      const updatedMessage =\r\n        await context.loaders.messageLoader.loadMessage(id);\r\n      if (updatedMessage === null) {\r\n        // this should never happen\r\n        context.logger.error(\r\n          'Failed to re-load message after updating content',\r\n          {\r\n            messageID: id,\r\n            userID: viewer.userID,\r\n            orgID: viewer.orgID,\r\n          },\r\n        );\r\n        return {\r\n          success: false,\r\n          failureDetails: null,\r\n        };\r\n      }\r\n\r\n      newContentMessage = updatedMessage;\r\n    }\r\n\r\n    await executeUpdateMessageTasks({\r\n      context,\r\n      message: newContentMessage,\r\n      thread,\r\n      task,\r\n      fileAttachments,\r\n      annotationAttachments,\r\n      wasDeletedOrUndeleted,\r\n      content,\r\n      originalSubscribers,\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import type { SimpleValue } from 'common/types/index.ts';\r\nimport {\r\n  flagsUserFromContext,\r\n  getFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const featureFlagsQueryResolver: Resolvers['Query']['featureFlags'] =\r\n  async (_, args, context) => {\r\n    const user = flagsUserFromContext(context);\r\n\r\n    const flagValues = await Promise.all(\r\n      args.keys.map((key) =>\r\n        getFeatureFlagValue(key, user).then((value) => ({ key, value })),\r\n      ),\r\n    );\r\n    return flagValues.filter(\r\n      (fv): fv is { key: string; value: SimpleValue } => fv.value !== null,\r\n    );\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pingQueryResolver: Resolvers['Query']['ping'] = () => 'pong';\r\n", "import { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const taskQueryResolver: Resolvers['Query']['task'] = async (\r\n  _,\r\n  args,\r\n  context,\r\n) => {\r\n  const { orgID } = assertViewerHasIdentity(context.session.viewer);\r\n  return await context.loaders.taskLoader.loadTask(args.id, orgID);\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadQueryResolver: Resolvers['Query']['thread'] = async (\r\n  _,\r\n  args,\r\n  context,\r\n) => {\r\n  const { threadID } = args;\r\n\r\n  const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n  if (!thread) {\r\n    throw new Error('threadID does not exist');\r\n  }\r\n\r\n  return thread;\r\n};\r\n", "import { sign } from 'jsonwebtoken';\r\n\r\nimport type { Session } from 'server/src/auth/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\n\r\nexport function encodeSessionToJWT(\r\n  session: Session,\r\n  expiresInSeconds: number,\r\n): string {\r\n  return sign(session, env.JWT_SIGNING_SECRET, { expiresIn: expiresInSeconds });\r\n}\r\n", "import {\r\n  assertViewerHasUser,\r\n  viewerHasIdentity,\r\n} from 'server/src/auth/index.ts';\r\nimport { encodeSessionToJWT } from 'server/src/auth/encodeSessionToJWT.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getDeepLinkThreadMessageID } from 'server/src/deep_link_threads/index.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport { CLIENT_VERSION_MAX_DAYS_OLD } from 'common/const/Timing.ts';\r\n\r\n// all its fields are dynamically resolved\r\nexport const viewerQueryResolver: Resolvers['Query']['viewer'] = () => ({});\r\n\r\nexport const viewerResolver: Resolvers['Viewer'] = {\r\n  accessToken: async (_, args, context) => {\r\n    // This path using groupID is deprecated now but incase we have people still\r\n    // on this. Kept this separate so we can just remove it later.\r\n    if (args.groupID !== undefined) {\r\n      deprecated(\r\n        'Viewer:AccessToken:groupID',\r\n        context.session.viewer.platformApplicationID,\r\n      );\r\n    }\r\n\r\n    // This token is used for reconnect, so it needs to be relatively\r\n    // long-lived. However, we force a full refresh after this long anyway, so\r\n    // we know we don't need it any more than this.\r\n    const expiresInSeconds = CLIENT_VERSION_MAX_DAYS_OLD * 24 * 60 * 60;\r\n\r\n    if (args.groupID) {\r\n      const viwerCanAccessOrg =\r\n        await context.loaders.orgMembersLoader.viewerCanAccessOrg(args.groupID);\r\n\r\n      if (!viwerCanAccessOrg) {\r\n        throw new Error('Viewer not part of org');\r\n      }\r\n\r\n      const org = await context.loaders.orgLoader.loadOrg(args.groupID);\r\n\r\n      if (!org) {\r\n        throw new Error('Group not found');\r\n      }\r\n\r\n      const viewer = context.session.viewer;\r\n      const viewerWithOrg = viewer.viewerInOtherOrg(\r\n        args.groupID,\r\n        org.externalID,\r\n      );\r\n\r\n      return encodeSessionToJWT(\r\n        { ...context.session, viewer: viewerWithOrg },\r\n        expiresInSeconds,\r\n      );\r\n    }\r\n\r\n    // Assume there is an orgID signed in the session already, including when\r\n    // we pass the variable _externalOrgID\r\n    return encodeSessionToJWT(context.session, expiresInSeconds);\r\n  },\r\n\r\n  user: async (_, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const user =\r\n      await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n    if (!user) {\r\n      throw new Error('Could not load user');\r\n    }\r\n    return user;\r\n  },\r\n\r\n  organization: async (_, _args, context) => {\r\n    const { orgID } = context.session.viewer;\r\n    if (!orgID) {\r\n      return null;\r\n    }\r\n\r\n    const org = await context.loaders.orgLoader.loadOrg(orgID);\r\n    if (!org) {\r\n      throw new Error('Could not load org');\r\n    }\r\n    return org;\r\n  },\r\n\r\n  inbox: async (_, _args, context) => {\r\n    assertViewerHasUser(context.session.viewer);\r\n    return {};\r\n  },\r\n\r\n  email: async (_, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    const user =\r\n      await context.loaders.userLoader.loadUserInAnyViewerOrg(userID);\r\n\r\n    if (user === null) {\r\n      context.logger.error('Failed to load profile from DB', {\r\n        userID,\r\n      });\r\n\r\n      return null;\r\n    }\r\n    return user.email;\r\n  },\r\n\r\n  isSlackConnected: async (_, _args, context) => {\r\n    if (!viewerHasIdentity(context.session.viewer)) {\r\n      return false;\r\n    }\r\n\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    const user = await context.loaders.userLoader.loadSlackUserForUserOrgScoped(\r\n      context,\r\n      userID,\r\n    );\r\n\r\n    return !!user;\r\n  },\r\n\r\n  thirdPartyConnection: (_, args) => args,\r\n\r\n  deepLinkInfo: async (_, _args, context) => {\r\n    if (!viewerHasIdentity(context.session.viewer)) {\r\n      return null;\r\n    }\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    return await getDeepLinkThreadMessageID(userID);\r\n  },\r\n};\r\n\r\nexport const viewerIdentityResolver: Resolvers['ViewerIdentity'] = {\r\n  user: viewerResolver.user,\r\n  organization: viewerResolver.organization,\r\n  email: viewerResolver.email,\r\n  isSlackConnected: viewerResolver.isSlackConnected,\r\n  organizations: async (_, _args, context) => {\r\n    assertViewerHasUser(context.session.viewer);\r\n    const result =\r\n      await context.loaders.orgMembersLoader.loadAllImmediateOrgsForUser();\r\n    return result;\r\n  },\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { withRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\n\r\nexport const inboxSubscriptionResolver: Resolvers['Subscription']['inbox'] = {\r\n  resolve: async (_, _args, context) => {\r\n    assertViewerHasUser(context.session.viewer);\r\n    return {};\r\n  },\r\n  subscribe: (_root, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    return withRestartEvent({\r\n      events: [['inbox-updated', { userID }]],\r\n      userID,\r\n      subscriptionName: 'inboxSubscriptionResolver',\r\n    })();\r\n  },\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { liveQuery } from 'server/src/public/subscriptions/util/live_query.ts';\r\nimport type { JsonObjectReducerData } from 'common/util/jsonObjectReducer.ts';\r\nimport { UserPreferenceEntity } from 'server/src/entity/user_preference/UserPreferenceEntity.ts';\r\n\r\nexport const preferencesLiveQuerySubscriptionResolver: Resolvers['Subscription']['preferencesLiveQuery'] =\r\n  {\r\n    resolve: (parent) => parent,\r\n\r\n    subscribe: (_root, _args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n      return liveQuery(\r\n        [['user-preference-updated', { userID }]],\r\n        async (): Promise<JsonObjectReducerData> => {\r\n          // This is on connection, send down all the preferences\r\n          const rows = await UserPreferenceEntity.findAll({\r\n            where: { userID },\r\n          });\r\n\r\n          return {\r\n            data: Object.fromEntries(\r\n              rows.map(({ key, value }) => [key, value]),\r\n            ),\r\n          };\r\n        },\r\n        async (event): Promise<JsonObjectReducerData> => {\r\n          // This is an update, so send just the diff\r\n          const key = event.payload.key;\r\n\r\n          const row = await UserPreferenceEntity.findOne({\r\n            where: {\r\n              userID,\r\n              key,\r\n            },\r\n          });\r\n\r\n          if (row) {\r\n            return {\r\n              update: { [row.key]: row.value },\r\n            };\r\n          } else {\r\n            return {\r\n              delete: [key],\r\n            };\r\n          }\r\n        },\r\n      );\r\n    },\r\n  };\r\n", "import { pubSubAsyncIterator } from 'server/src/pubsub/index.ts';\r\nimport {\r\n  ThreadMessageAddedTypeName,\r\n  ThreadMessageUpdatedTypeName,\r\n  ThreadMessageContentAppendedTypeName,\r\n  ThreadMessageRemovedTypeName,\r\n  ThreadTypingUsersUpdatedTypeName,\r\n  ThreadShareToSlackTypeName,\r\n  ThreadPropertiesUpdatedTypeName,\r\n  ThreadParticipantsUpdatedIncrementalTypeName,\r\n  ThreadCreatedTypeName,\r\n  ThreadSubscriberUpdatedTypeName,\r\n  ThreadDeletedTypeName,\r\n} from 'common/types/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadEventsSubscriptionResolver: Resolvers['Subscription']['threadEvents'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n    subscribe: (_root, { threadID }) =>\r\n      pubSubAsyncIterator(\r\n        // this must map to the ThreadEvents type definition in mapping.ts\r\n        ['thread-created', { threadID }],\r\n        ['thread-message-added', { threadID }],\r\n        ['thread-message-updated', { threadID }],\r\n        ['thread-message-content-appended', { threadID }],\r\n        ['thread-message-removed', { threadID }],\r\n        ['thread-participants-updated-incremental', { threadID }],\r\n        ['thread-typing-users-updated', { threadID }],\r\n        ['thread-properties-updated', { threadID }],\r\n        ['thread-share-to-slack', { threadID }],\r\n        ['thread-subscriber-updated', { threadID }],\r\n        ['thread-deleted', { threadID }],\r\n      ),\r\n  };\r\n\r\nexport const threadEventTypeResolver: Resolvers['ThreadEvent'] = {\r\n  __resolveType: (event) => {\r\n    switch (event.name) {\r\n      case 'thread-created':\r\n        return ThreadCreatedTypeName;\r\n      case 'thread-message-added':\r\n        return ThreadMessageAddedTypeName;\r\n      case 'thread-message-updated':\r\n        return ThreadMessageUpdatedTypeName;\r\n      case 'thread-message-content-appended':\r\n        return ThreadMessageContentAppendedTypeName;\r\n      case 'thread-message-removed':\r\n        return ThreadMessageRemovedTypeName;\r\n      case 'thread-participants-updated-incremental':\r\n        return ThreadParticipantsUpdatedIncrementalTypeName;\r\n      case 'thread-typing-users-updated':\r\n        return ThreadTypingUsersUpdatedTypeName;\r\n      case 'thread-share-to-slack':\r\n        return ThreadShareToSlackTypeName;\r\n      case 'thread-properties-updated':\r\n        return ThreadPropertiesUpdatedTypeName;\r\n      case 'thread-subscriber-updated':\r\n        return ThreadSubscriberUpdatedTypeName;\r\n      case 'thread-deleted':\r\n        return ThreadDeletedTypeName;\r\n    }\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const fileResolver: Resolvers['File'] = {\r\n  url: (file, _args, context) =>\r\n    file.getSignedDownloadURL(context.loaders.s3BucketLoader),\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const inboxResolver: Resolvers['Inbox'] = {\r\n  count: async (_, _args, context) =>\r\n    await context.loaders.threadParticipantLoader.loadInboxCount(),\r\n  threads: async (_, _args, context) => {\r\n    const threadIDs =\r\n      await context.loaders.threadParticipantLoader.loadNewlyActiveThreads();\r\n\r\n    return await context.loaders.threadLoader.loadThreads(threadIDs);\r\n  },\r\n  threadsArchive: async (_, _args, context) => {\r\n    const threadIDs =\r\n      await context.loaders.threadParticipantLoader.loadThreadsInArchive();\r\n    return await context.loaders.threadLoader.loadThreads(threadIDs);\r\n  },\r\n};\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport interface LoadMessagesResultData {\r\n  threadID: UUID;\r\n  messages: MessageEntity[];\r\n  ignoreDeleted: boolean;\r\n}\r\n\r\nexport const loadMessagesResultResolver: Resolvers['LoadMessagesResult'] = {\r\n  async olderMessagesCount({ threadID, messages }, _args, context) {\r\n    if (messages.length) {\r\n      return await context.loaders.threadLoader.loadMessagesCountBeforeNoOrgCheck(\r\n        threadID,\r\n        messages[0].id,\r\n      );\r\n    } else {\r\n      return 0;\r\n    }\r\n  },\r\n};\r\n", "import { getReferencedUserIDs } from 'common/util/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { getSlackMessageURL } from 'server/src/slack/util.ts';\r\n\r\nexport const messageResolver: Resolvers['Message'] = {\r\n  attachments: async (message, _, context) => {\r\n    if (message.isDeleted()) {\r\n      return [];\r\n    }\r\n\r\n    return await context.loaders.messageAttachmentLoader.loadAttachmentsForMessage(\r\n      message.id,\r\n    );\r\n  },\r\n  thread: async (message, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(\r\n      message.threadID,\r\n    );\r\n    if (!thread) {\r\n      throw new Error('Message refers to non-existent thread');\r\n    }\r\n    return thread;\r\n  },\r\n  content: (message) => (!message.isDeleted() ? message.content : null),\r\n  source: async (message, _, context) => {\r\n    // The author of the message might not exist in the viewer's org. This can\r\n    // happen when the message was written as a reply from Slack to a message\r\n    // shared from platform application such as Typeform\r\n    const user = await context.loaders.userLoader.loadUser(message.sourceID);\r\n\r\n    if (user === null) {\r\n      throw `Failed to find source for message id ${message.id} and sourceID ${message.sourceID}`;\r\n    }\r\n    return user;\r\n  },\r\n\r\n  reactions: (message, _, context) =>\r\n    !message.isDeleted()\r\n      ? context.loaders.messageReactionLoader.loadReactionsForMessageNoOrgCheck(\r\n          message.id,\r\n        )\r\n      : [],\r\n  seen: async (message, _, context) => {\r\n    const userID = context.session.viewer.userID;\r\n    if (!userID) {\r\n      return false;\r\n    }\r\n\r\n    if (message.sourceID === userID) {\r\n      return true;\r\n    }\r\n\r\n    const participant =\r\n      await context.loaders.threadParticipantLoader.loadForUserNoOrgCheck({\r\n        threadID: message.threadID,\r\n        userID,\r\n      });\r\n\r\n    if (!participant?.lastSeenTimestamp) {\r\n      return false;\r\n    }\r\n\r\n    return participant.lastSeenTimestamp >= message.timestamp;\r\n  },\r\n  importedFromSlackChannel: async (message, _, context) => {\r\n    if (message.isDeleted()) {\r\n      return null;\r\n    }\r\n    if (message.importedSlackChannelID === null) {\r\n      return null;\r\n    }\r\n\r\n    const slackChannel =\r\n      await context.loaders.slackChannelLoader.loadSlackChannel(\r\n        message.importedSlackChannelID,\r\n      );\r\n\r\n    if (slackChannel) {\r\n      return slackChannel.name;\r\n    } else {\r\n      return '';\r\n    }\r\n  },\r\n  referencedUserData: async (message, _, context) => {\r\n    if (message.isDeleted()) {\r\n      return [];\r\n    }\r\n    return await context.loaders.userLoader.loadReferencedUserData(\r\n      context,\r\n      getReferencedUserIDs(message.content),\r\n    );\r\n  },\r\n  task: async (message, _, context) =>\r\n    await context.loaders.taskLoader.loadTaskForMessageNoOrgCheck(message.id),\r\n\r\n  slackURL: async (message, _, context) => {\r\n    const {\r\n      importedSlackChannelID: channelID,\r\n      importedSlackMessageTS: ts,\r\n      importedSlackMessageThreadTS: threadTS, // Only replies/in thread messages, have thread_ts\r\n    } = message;\r\n\r\n    if (!channelID || !ts) {\r\n      return null;\r\n    }\r\n\r\n    if (channelID.startsWith('D')) {\r\n      // Checks if the channel is a direct message channel with a user.\r\n      // See: https://api.slack.com/types/im\r\n      // Currently, you can receive a direct message from the Cord App when you are mentioned\r\n\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      if (message.sourceID !== userID) {\r\n        // This slackURL link would only work for author of the message\r\n        // As this would be pointing to a direct message with cord app\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const org = await context.loaders.orgLoader.loadOrg(message.orgID);\r\n    if (!org || !org.domain) {\r\n      return null;\r\n    }\r\n\r\n    return getSlackMessageURL(org.domain, channelID, ts, threadTS);\r\n  },\r\n  isFromEmailReply: (message) => message.replyToEmailNotificationID !== null,\r\n  extraClassnames: (message) => message.extraClassnames,\r\n  metadata: (message) => message.metadata,\r\n  seenBy: async (message, _, context) => {\r\n    const seenByUserIDs =\r\n      await context.loaders.threadParticipantLoader.loadSeenByUsers(message);\r\n\r\n    return seenByUserIDs;\r\n  },\r\n};\r\n\r\nexport const messageSourceTypeResolver: Resolvers['MessageSource'] = {\r\n  // TODO: once we have other source types besides users there will probably\r\n  // need to be some way to distinguish between them\r\n  __resolveType: () => 'User',\r\n};\r\n", "import type { MessageAnnotationAttachmentData } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageAnnotationAttachmentResolver: Resolvers['MessageAnnotationAttachment'] =\r\n  {\r\n    screenshot: async (messageAttachment, _, context) => {\r\n      const { screenshotFileID } =\r\n        messageAttachment.data as MessageAnnotationAttachmentData;\r\n\r\n      if (!screenshotFileID) {\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        return await context.loaders.fileLoader.loadFile(screenshotFileID);\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    },\r\n    blurredScreenshot: async (messageAttachment, _, context) => {\r\n      const { blurredScreenshotFileID: screenshotFileID } =\r\n        messageAttachment.data as MessageAnnotationAttachmentData;\r\n\r\n      if (!screenshotFileID) {\r\n        return null;\r\n      }\r\n\r\n      try {\r\n        return await context.loaders.fileLoader.loadFile(screenshotFileID);\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    },\r\n    location: (messageAttachment) => {\r\n      if (\r\n        'location' in messageAttachment.data &&\r\n        messageAttachment.data.location\r\n      ) {\r\n        return {\r\n          ...messageAttachment.data.location,\r\n          iframeSelectors:\r\n            messageAttachment.data.location.iframeSelectors ?? [],\r\n        };\r\n      }\r\n      return undefined;\r\n    },\r\n    customLocation: (messageAttachment) => {\r\n      if ('customLocation' in messageAttachment.data) {\r\n        return messageAttachment.data.customLocation;\r\n      }\r\n      return undefined;\r\n    },\r\n    customHighlightedTextConfig: (messageAttachment) => {\r\n      if ('customHighlightedTextConfig' in messageAttachment.data) {\r\n        return messageAttachment.data.customHighlightedTextConfig;\r\n      }\r\n      return undefined;\r\n    },\r\n    customLabel: (messageAttachment) => {\r\n      if ('customLabel' in messageAttachment.data) {\r\n        return messageAttachment.data.customLabel;\r\n      }\r\n      return undefined;\r\n    },\r\n    coordsRelativeToTarget: (messageAttachment) => {\r\n      if ('coordsRelativeToTarget' in messageAttachment.data) {\r\n        return messageAttachment.data.coordsRelativeToTarget;\r\n      }\r\n      return undefined;\r\n    },\r\n    message: async (messageAttachment, _, context) => {\r\n      const message = await context.loaders.messageLoader.loadMessage(\r\n        messageAttachment.messageID,\r\n      );\r\n      if (!message) {\r\n        throw new Error('Attachment refers to non-existent message');\r\n      }\r\n      return message;\r\n    },\r\n  };\r\n", "import { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageAttachmentTypeResolver: Resolvers['MessageAttachment'] = {\r\n  __resolveType(attachment) {\r\n    if ('type' in attachment) {\r\n      switch (attachment.type) {\r\n        case MessageAttachmentType.FILE:\r\n          return 'MessageFileAttachment';\r\n        case MessageAttachmentType.ANNOTATION:\r\n          return 'MessageAnnotationAttachment';\r\n        case MessageAttachmentType.SCREENSHOT:\r\n          return 'MessageScreenshotAttachment';\r\n      }\r\n    }\r\n\r\n    if ('url' in attachment) {\r\n      return 'MessageLinkPreview';\r\n    }\r\n\r\n    throw new Error('Unexpected attachment type');\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageFileAttachmentResolver: Resolvers['MessageFileAttachment'] =\r\n  {\r\n    file: async (messageAttachment, _, context) => {\r\n      if (!('fileID' in messageAttachment.data)) {\r\n        return null;\r\n      }\r\n      const { fileID } = messageAttachment.data;\r\n      try {\r\n        return await context.loaders.fileLoader.loadFile(fileID);\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageReactionResolver: Resolvers['MessageReaction'] = {\r\n  user: async (messageReaction, _, context) => {\r\n    const user = await context.loaders.userLoader.loadUser(\r\n      messageReaction.userID,\r\n    );\r\n    if (!user) {\r\n      throw new Error(\r\n        `Failed to load userID: ${messageReaction.userID} for messageID: ${messageReaction.messageID}`,\r\n      );\r\n    }\r\n\r\n    return user;\r\n  },\r\n  unicodeReaction: (messageReaction, _, _context) =>\r\n    messageReaction.unicodeReaction,\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { MAX_NAME_FILTERED_AUTOCOMPLETE_ORG_USERS } from 'common/const/Api.ts';\r\nimport { deprecatedFunction } from 'server/src/logging/deprecate.ts';\r\n\r\nexport const orgResolver: Resolvers['Organization'] = {\r\n  usersWithOrgDetails: async (org, args, context) => {\r\n    // The nameQuery param is optional - if it's been passed, filter by name\r\n    // If not (for BC), don't\r\n    if (isDefined(args.nameQuery)) {\r\n      const filteredUsers =\r\n        await context.loaders.userLoader.loadNameFilteredUsersInOrg(\r\n          org.id,\r\n          args.nameQuery,\r\n          org.platformApplicationID,\r\n          MAX_NAME_FILTERED_AUTOCOMPLETE_ORG_USERS,\r\n          args.sortUsersBy,\r\n          args.sortUsersDirection,\r\n        );\r\n      return filteredUsers.map((user) => ({ user, org }));\r\n    } else {\r\n      // If name query is null, this is newer client code which intentionally\r\n      // wants to load users for non-mention list purposes to show an empty state.\r\n      // They show up to 4 faces, with preference for not the viewer, so send\r\n      // them up to 5.\r\n      const filteredUsers =\r\n        await context.loaders.userLoader.loadNameFilteredUsersInOrg(\r\n          org.id,\r\n          null,\r\n          org.platformApplicationID,\r\n          5,\r\n          args.sortUsersBy,\r\n          args.sortUsersDirection,\r\n        );\r\n      return filteredUsers.map((user) => ({ user, org }));\r\n    }\r\n  },\r\n  joinableSlackChannels: async (org, _args, originalContext) => {\r\n    const context = await getRelevantContext(originalContext, org.id);\r\n    const orgIDs = await context.loaders.linkedOrgsLoader.getOrgIDs();\r\n    return await context.loaders.slackChannelLoader.loadJoinableSlackChannels(\r\n      orgIDs,\r\n    );\r\n  },\r\n\r\n  joinedSlackChannels: async (org, _args, originalContext) => {\r\n    const context = await getRelevantContext(originalContext, org.id);\r\n    const orgIDs = await context.loaders.linkedOrgsLoader.getOrgIDs();\r\n    return await context.loaders.slackChannelLoader.loadJoinedSlackChannels(\r\n      orgIDs,\r\n    );\r\n  },\r\n  recentlyActiveThreads: async (org, _args, context) => {\r\n    const ids = await context.loaders.threadLoader.loadRecentlyActiveThreads(\r\n      org.id,\r\n    );\r\n    return await context.loaders.threadLoader.loadThreads(ids);\r\n  },\r\n  linkedOrganization: async (org) => await org.getLinkedOrg(),\r\n  imageURL: deprecatedFunction(() => null, 'graphql: org.imageURL'),\r\n};\r\n\r\nexport const linkedOrgResolver: Resolvers['LinkedOrganization'] = {\r\n  usersWithOrgDetails: (org, args, context) =>\r\n    orgResolver.usersWithOrgDetails(org, args, context),\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageThreadAddedResolver: Resolvers['PageThreadAdded'] = {\r\n  thread: async ({ payload: { threadID } }, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      throw new Error('Thread does not exist.');\r\n    }\r\n\r\n    return thread;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageVisitorResolver: Resolvers['PageVisitor'] = {\r\n  user: (pageVisitor, _, context) =>\r\n    context.loaders.userLoader.loadUserInAnyViewerOrg(pageVisitor.userID),\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageVisitorUpdatedResolver: Resolvers['PageVisitorsUpdated'] = {\r\n  visitors: () => [],\r\n};\r\n", "import { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nexport const taskResolver: Resolvers['Task'] = {\r\n  assignees: async (task, _, context) => {\r\n    const assignees =\r\n      await context.loaders.taskAssigneeLoader.loadTaskAssigneesForTaskNoOrgCheck(\r\n        task.id,\r\n      );\r\n    return await context.loaders.userLoader.loadUsersNoOrgCheck(\r\n      assignees.map((assignee) => assignee.userID),\r\n    );\r\n  },\r\n  todos: async (task, _, context) =>\r\n    await context.loaders.taskTodoLoader.loadTaskTodosNoOrgCheck(task.id),\r\n  doneStatusLastUpdatedBy: async (task, _, context) => {\r\n    return task.doneStatusLastUpdatedBy\r\n      ? await context.loaders.userLoader.loadUser(task.doneStatusLastUpdatedBy)\r\n      : null;\r\n  },\r\n  thirdPartyReference: (task, args) =>\r\n    TaskThirdPartyReference.findForTask(task.id, args.type),\r\n  thirdPartyReferences: (task) =>\r\n    TaskThirdPartyReference.findAllForTask(task.id),\r\n};\r\n", "import type {\r\n  JiraAuthData,\r\n  LinearAuthData,\r\n} from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { getExternalAuthData } from 'server/src/third_party_tasks/util.ts';\r\nimport { canUserEditTask } from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const taskThirdPartyReferenceResolver: Resolvers['TaskThirdPartyReference'] =\r\n  {\r\n    type: (reference) => reference.externalConnectionType,\r\n    canEdit: async (reference, _args, context) => {\r\n      const authData = await getExternalAuthData(\r\n        context.session.viewer,\r\n        reference.externalConnectionType,\r\n      );\r\n      if (!authData) {\r\n        // the viewer isn't even connected to the provider type of this external task\r\n        return false;\r\n      }\r\n\r\n      switch (reference.externalConnectionType) {\r\n        case 'jira': {\r\n          // check if the viewer's connection is for the same cloud instance\r\n          const externalTaskCloudID = reference.externalLocationID;\r\n          const { cloudID } = authData as JiraAuthData;\r\n          return cloudID === externalTaskCloudID;\r\n        }\r\n        case 'linear': {\r\n          const { accessToken } = authData as LinearAuthData;\r\n          const teamID = reference.externalLocationID;\r\n          return await canUserEditTask(\r\n            accessToken,\r\n            teamID!,\r\n            context.session.viewer,\r\n          );\r\n        }\r\n        default:\r\n          // TODO: add provider-specific checks\r\n          return true;\r\n      }\r\n    },\r\n  };\r\n", "import { encodeViewerForOAuthState } from 'server/src/auth/oauth.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { getLinearUserTeamInfo } from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport { fetchJiraProjects } from 'server/src/third_party_tasks/jira/actions.ts';\r\nimport { getTrelloWorkSpace } from 'server/src/third_party_tasks/trello/actions.ts';\r\nimport { fetchAsanaProjects } from 'server/src/third_party_tasks/asana/actions.ts';\r\nimport { fetchMondayBoards } from 'server/src/third_party_tasks/monday/actions.ts';\r\nimport type {\r\n  Resolvers,\r\n  ThirdPartyConnectionType,\r\n} from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type ThirdPartyConnectionArguments = {\r\n  type: ThirdPartyConnectionType;\r\n};\r\nexport const thirdPartyConnectionResolver: Resolvers['ThirdPartyConnection'] = {\r\n  connected: async ({ type }, _, context) => {\r\n    const { userID, orgID } = assertViewerHasIdentity(context.session.viewer);\r\n    const entity = await ThirdPartyConnectionEntity.findOne({\r\n      where: { userID, orgID, type },\r\n    });\r\n\r\n    return entity !== null;\r\n  },\r\n  oAuthStateToken: ({ type }, _, context) =>\r\n    encodeViewerForOAuthState(context.session.viewer, type),\r\n  configuration: async ({ type }, _, context) => {\r\n    switch (type) {\r\n      case 'jira': {\r\n        return await fetchJiraProjects(context.session.viewer);\r\n      }\r\n      case 'linear': {\r\n        return await getLinearUserTeamInfo(context.session.viewer);\r\n      }\r\n      case 'trello': {\r\n        return await getTrelloWorkSpace(context.session.viewer);\r\n      }\r\n      case 'asana': {\r\n        return await fetchAsanaProjects(context.session.viewer);\r\n      }\r\n      case 'monday':\r\n        return await fetchMondayBoards(context.session.viewer);\r\n      default: {\r\n        return [];\r\n      }\r\n    }\r\n  },\r\n};\r\n", "import { externalizeID } from 'common/util/externalIDs.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasUser,\r\n  AuthProviderType,\r\n} from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { getUsersTyping } from 'server/src/presence/typing.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport type { UserDetails } from 'server/src/util/redirectURI.ts';\r\nimport { generateSignedExternalRedirectURI } from 'server/src/util/redirectURI.ts';\r\n\r\nexport const threadResolver: Resolvers['Thread'] = {\r\n  messages: (thread, args, context) =>\r\n    context.loaders.messageLoader.loadMessages({\r\n      threadID: thread.id,\r\n      cursor: args.cursor ?? undefined,\r\n      range: args.range ?? undefined,\r\n      ignoreDeleted: args.ignoreDeleted ?? undefined,\r\n    }),\r\n  loadMessages: async (thread, args, context) => {\r\n    const messages = await threadResolver.messages(thread, args, context);\r\n    return {\r\n      threadID: thread.id,\r\n      messages,\r\n      ignoreDeleted: !!args.ignoreDeleted,\r\n    };\r\n  },\r\n  participants: async (thread, _args, context) =>\r\n    await context.loaders.threadParticipantLoader.loadForThreadIDNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  mentioned: async (thread, _args, context) =>\r\n    await context.loaders.messageMentionLoader.loadMentionedUsersForThread(\r\n      thread.id,\r\n    ),\r\n  typingUsers: async (thread, _args, context) => {\r\n    const userIDs = await getUsersTyping(thread.id);\r\n    return await context.loaders.userLoader.loadUsersNoOrgCheck(userIDs);\r\n  },\r\n  newMessagesCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadNewMessageCountNoOrgCheck(thread.id),\r\n  newReactionsCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadNewReactionsCountNoOrgCheck(thread.id),\r\n  firstUnseenMessageID: (thread, _args, context) => {\r\n    return context.loaders.threadLoader.getFirstUnseenMessageIDNoOrgCheck(\r\n      thread.id,\r\n    );\r\n  },\r\n  subscribed: (thread, _args, context) =>\r\n    context.loaders.threadParticipantLoader.loadSubscribedNoOrgCheck(thread.id),\r\n  messagesCountExcludingDeleted: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadMessagesCountExcludingDeletedNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  allMessagesCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadMessagesCountNoOrgCheck(thread.id),\r\n  userMessagesCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadUserMessagesCountNoOrgCheck(thread.id),\r\n  actionMessagesCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadActionMessagesCountNoOrgCheck(thread.id),\r\n  replyCount: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadReplyCount(thread.id),\r\n  initialMessagesInclDeleted: (thread, args, context) =>\r\n    context.loaders.threadLoader.loadInitialMessagesNoOrgCheck(\r\n      thread.id,\r\n      args.initialFetchCount,\r\n    ),\r\n  viewerIsThreadParticipant: (thread, _args, context) =>\r\n    context.loaders.threadParticipantLoader.isViewerThreadParticipantNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  resolved: (thread, _args, _context) => thread.resolvedTimestamp !== null,\r\n  sharedToSlack: (thread, _args, context) =>\r\n    context.loaders.threadLoader.loadSlackMirroredThreadInfoNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  loadNewestMessagesToTarget: async (thread, args, context) => {\r\n    const messages = await context.loaders.messageLoader.loadNewestUntilTarget({\r\n      threadID: thread.id,\r\n      targetMessage: args.targetMessage,\r\n    });\r\n    return {\r\n      threadID: thread.id,\r\n      messages,\r\n      ignoreDeleted: args.ignoreDeleted ?? true,\r\n    };\r\n  },\r\n  replyingUserIDs: async (thread, _args, context) =>\r\n    await context.loaders.threadLoader.loadReplyingUserIDsNoOrgCheck(thread.id),\r\n  actionMessageReplyingUserIDs: async (thread, _args, context) =>\r\n    await context.loaders.threadLoader.loadActionMessageReplyingUserIDsNoOrgCheck(\r\n      thread.id,\r\n    ),\r\n  externalOrgID: async (thread, _args, context) => {\r\n    const org = await context.loaders.orgLoader.loadOrg(thread.orgID);\r\n    return org!.externalID;\r\n  },\r\n  location: async (thread, _args, context) => {\r\n    const threadPageData =\r\n      await context.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(\r\n        thread.id,\r\n      );\r\n    if (!threadPageData) {\r\n      throw new Error('Unable to find thread location');\r\n    }\r\n    return threadPageData.contextData;\r\n  },\r\n  navigationURL: async (thread, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const userOrgIDs = assertViewerHasOrgs(context.session.viewer);\r\n    if (userOrgIDs.includes(thread.orgID)) {\r\n      return thread.url;\r\n    }\r\n\r\n    if (!context.session.viewer.platformApplicationID) {\r\n      return thread.url;\r\n    }\r\n\r\n    const [user, org, primaryPage] = await Promise.all([\r\n      UserEntity.findByPk(userID),\r\n      OrgEntity.findByPk(thread.orgID),\r\n      context.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(thread.id),\r\n    ]);\r\n\r\n    if (!user || !org || !primaryPage) {\r\n      throw new Error(\r\n        'Unable to resolve UserEntity, OrgEntity or Primary Page',\r\n      );\r\n    }\r\n\r\n    const details: UserDetails = {\r\n      userType: AuthProviderType.PLATFORM,\r\n      userID: user.externalID,\r\n      orgID: org.externalID ?? externalizeID(org.id),\r\n      groupID: org.externalID ?? externalizeID(org.id),\r\n      name: user.name,\r\n      email: user.email,\r\n      profilePictureURL: user.profilePictureURL,\r\n    };\r\n\r\n    const threadLocation = primaryPage.contextData;\r\n\r\n    return await generateSignedExternalRedirectURI(\r\n      context.session.viewer.platformApplicationID,\r\n      thread.url,\r\n      {\r\n        type: 'inbox',\r\n        url: thread.url,\r\n        location: threadLocation,\r\n        threadID: thread.externalID,\r\n        userDetails: details,\r\n      },\r\n    );\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadMessageAddedResolver: Resolvers['ThreadMessageAdded'] = {\r\n  message: async ({ payload: { messageID } }, _, context) => {\r\n    const message = await context.loaders.messageLoader.loadMessage(messageID);\r\n    if (!message) {\r\n      throw new Error('message does not exist');\r\n    }\r\n    return message;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadMessageUpdatedResolver: Resolvers['ThreadMessageUpdated'] = {\r\n  message: async ({ payload: { messageID } }, _, context) => {\r\n    const message = await context.loaders.messageLoader.loadMessage(messageID);\r\n    if (!message) {\r\n      throw new Error('message does not exist');\r\n    }\r\n    return message;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadMessageContentAppendedResolver: Resolvers['ThreadMessageContentAppended'] =\r\n  {\r\n    id: ({ payload: { messageID } }, _, _context) => messageID,\r\n    appendedContent: ({ payload: { appendedContent } }, _, _context) =>\r\n      appendedContent,\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadParticipantResolver: Resolvers['ThreadParticipant'] = {\r\n  user: (threadParticipant, _, context) =>\r\n    context.loaders.userLoader.loadUser(threadParticipant.userID),\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadParticipantUpdatedIncrementalResolver: Resolvers['ThreadParticipantsUpdatedIncremental'] =\r\n  {\r\n    participant: async (\r\n      { args: { threadID }, payload: { userID } },\r\n      _,\r\n      context,\r\n    ) => {\r\n      const participant =\r\n        await context.loaders.threadParticipantLoader.loadForUserNoOrgCheck({\r\n          threadID,\r\n          userID,\r\n        });\r\n\r\n      if (!participant) {\r\n        throw new Error('Unable to find requested thread participant');\r\n      }\r\n\r\n      return participant;\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadTypingUsersUpdatedResolver: Resolvers['ThreadTypingUsersUpdated'] =\r\n  {\r\n    users: async ({ payload: { users }, args }, _, context) => {\r\n      // We check to make sure the user has access to this thread\r\n      const thread = await context.loaders.threadLoader.loadThread(\r\n        args.threadID,\r\n      );\r\n\r\n      if (!thread) {\r\n        return [];\r\n      }\r\n\r\n      return await context.loaders.userLoader.loadUsersNoOrgCheck(users);\r\n    },\r\n  };\r\n", "import {\r\n  detailsForDisplay,\r\n  loadLinkedSlackUserOrgScoped,\r\n} from 'server/src/entity/user/util.ts';\r\nimport { deprecatedFunction } from 'server/src/logging/deprecate.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { findSlackUserEmailMatch } from 'server/src/util/findSlackUserEmailMatch.ts';\r\n\r\n// use Required so that userWithOrgDetailsResolver can reuse field\r\n// resolvers\r\nexport const userResolver: Required<Resolvers['User']> = {\r\n  id: (user) => user.id,\r\n  externalID: (user) => user.externalID,\r\n  metadata: (user) => user.metadata,\r\n  // In the case of platform users, names will come from the latest of a slack\r\n  // linking, user updated name or platform api updated name\r\n  displayName: async (user, _, context) =>\r\n    (await detailsForDisplay(user, context)).displayName,\r\n  fullName: async (user, _, context) =>\r\n    (await detailsForDisplay(user, context)).fullName,\r\n  name: (user) => user.name,\r\n  shortName: (user) => user.screenName,\r\n  // Like name, profilePictureURL will be the latest of a slack linking, user-\r\n  // uploaded picture, or api update\r\n  profilePictureURL: async (user, _, context) =>\r\n    (await detailsForDisplay(user, context)).profilePictureURL,\r\n  userType: deprecatedFunction(\r\n    async (user) => user.userType,\r\n    'graphql: user.userType',\r\n  ),\r\n};\r\n\r\nexport const userWithOrgDetailsResolver: Resolvers['UserWithOrgDetails'] = {\r\n  // Shared fields with User\r\n  id: ({ user }, args, context) => userResolver.id(user, args, context),\r\n  metadata: ({ user }, args, context) =>\r\n    userResolver.metadata(user, args, context),\r\n  externalID: ({ user }, args, context) =>\r\n    userResolver.externalID(user, args, context),\r\n  displayName: ({ user }, args, context) =>\r\n    userResolver.displayName(user, args, context),\r\n  fullName: ({ user }, args, context) =>\r\n    userResolver.fullName(user, args, context),\r\n  name: ({ user }, args, context) => userResolver.name(user, args, context),\r\n  shortName: ({ user }, args, context) =>\r\n    userResolver.shortName(user, args, context),\r\n  profilePictureURL: ({ user }, args, context) =>\r\n    userResolver.profilePictureURL(user, args, context),\r\n  userType: ({ user }, args, context) =>\r\n    userResolver.userType(user, args, context),\r\n\r\n  // This is org-scoped and only used for email-matching at the moment\r\n  linkedUserID: async ({ user, org }, _, context) => {\r\n    if (org.externalProvider !== 'platform') {\r\n      // only users from platform orgs can have a linked (Slack) user\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      await context.loaders.linkedUsersLoader.loadLinkedUserFromSourceOrgScoped(\r\n        user.id,\r\n        org.id,\r\n      )\r\n    )?.linkedUserID;\r\n  },\r\n  // Org-scoped because this is used in relation to notifications\r\n  canBeNotifiedOnSlack: async ({ user, org }, _, context) =>\r\n    !!(await loadLinkedSlackUserOrgScoped(user, context, org.id)),\r\n  slackUserWithMatchingEmail: async ({ user, org }, _, context) =>\r\n    (await findSlackUserEmailMatch(context, org, user))?.id,\r\n};\r\n", "import { assertValid, validateFileForUpload } from 'common/uploads/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\n\r\nexport const refreshFileUploadURLMutationResolver: Resolvers['Mutation']['refreshFileUploadURL'] =\r\n  async (_, args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    const { id, size } = args;\r\n\r\n    const file = await context.loaders.fileLoader.loadFile(id);\r\n    if (!file) {\r\n      throw new Error('File not found');\r\n    }\r\n\r\n    if (file.userID !== userID) {\r\n      throw new Error('File does not belong to viewer');\r\n    }\r\n\r\n    assertValid(\r\n      validateFileForUpload('attachment', {\r\n        name: file.name,\r\n        mimeType: file.mimeType,\r\n        size,\r\n      }),\r\n    );\r\n\r\n    // update the known file size\r\n    await file.update({ size });\r\n\r\n    return await file.getSignedUploadURL(context.loaders.s3BucketLoader);\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const s3BucketVisibleResolver: Resolvers['S3BucketVisible'] = {};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const heimdallSwitchResolver: Resolvers['HeimdallSwitch'] = {\r\n  isOn: (heimdallEntity, _args, _context) => {\r\n    return heimdallEntity.isOn();\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { setDeepLinkThreadMessageID } from 'server/src/deep_link_threads/index.ts';\r\n\r\nexport const setDeepLinkThreadIDMutationResolver: Resolvers['Mutation']['setDeepLinkThreadID'] =\r\n  async (_, args, context) => {\r\n    const { threadID } = args;\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    await setDeepLinkThreadMessageID({ userID, threadID });\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { clearDeepLinkThreadMessageID } from 'server/src/deep_link_threads/index.ts';\r\n\r\nexport const clearDeepLinkThreadIDMutationResolver: Resolvers['Mutation']['clearDeepLinkThreadID'] =\r\n  async (_, __, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    await clearDeepLinkThreadMessageID(userID);\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const applicationQueryResolver: Resolvers['Query']['application'] =\r\n  async (_, _args, context) => {\r\n    const { platformApplicationID, externalUserID, externalOrgID } =\r\n      context.session.viewer;\r\n\r\n    if (!platformApplicationID || !externalUserID) {\r\n      return null;\r\n    }\r\n\r\n    const application = await context.loaders.applicationLoader.load(\r\n      platformApplicationID,\r\n    );\r\n    if (!application) {\r\n      return null;\r\n    }\r\n\r\n    const fillInBlanks = (linkWithPlaceholders?: string | null) => {\r\n      if (!linkWithPlaceholders) {\r\n        return null;\r\n      }\r\n      return linkWithPlaceholders\r\n        .replace(/{{USER_ID}}/g, externalUserID)\r\n        .replace(/{{ORGANIZATION_ID}}/g, externalOrgID ?? '')\r\n        .replace(/{{ORGANISATION_ID}}/g, externalOrgID ?? '');\r\n    };\r\n\r\n    const links = {\r\n      learnMore: fillInBlanks(application.customLinks?.learnMore),\r\n      upgradePlan: fillInBlanks(application.customLinks?.upgradePlan),\r\n      leaveFeedback: fillInBlanks(application.customLinks?.leaveFeedback),\r\n    };\r\n\r\n    return {\r\n      id: application.id,\r\n      name: application.name,\r\n      customLinks: links,\r\n      segmentWriteKey: application.segmentWriteKey,\r\n      customNUX: application.customNUX,\r\n      iconURL: application.iconURL,\r\n      environment: application.environment,\r\n    };\r\n  };\r\n", "import * as jwt from 'jsonwebtoken';\r\nimport { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport { deprecatedFunction } from 'server/src/logging/deprecate.ts';\r\nimport type {\r\n  Resolvers,\r\n  ApplicationLinks,\r\n  ApplicationEmailTemplate,\r\n} from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const applicationResolver: Resolvers['Application'] = {\r\n  customLinks: (application, _args, _context) => {\r\n    return application.customLinks as ApplicationLinks;\r\n  },\r\n\r\n  customEmailTemplate: (application, _args, _context) => {\r\n    return application.customEmailTemplate as ApplicationEmailTemplate;\r\n  },\r\n\r\n  customS3Bucket: async (application, _args, context) => {\r\n    return await context.loaders.s3BucketLoader.loadForApplication(application);\r\n  },\r\n\r\n  supportBotInfo: async (application, _args, _context) => {\r\n    if (!application.supportBotID) {\r\n      return null;\r\n    }\r\n    const user = await UserEntity.findByPk(application.supportBotID);\r\n    return user\r\n      ? {\r\n          name: userDisplayName(user),\r\n          profilePictureURL: user.profilePictureURL,\r\n        }\r\n      : null;\r\n  },\r\n\r\n  deploymentInfo: async (application, _args, context) => {\r\n    if (!context.session.isAdmin) {\r\n      throw new Error('Admin only');\r\n    }\r\n    return application;\r\n  },\r\n\r\n  usageMetrics: (application, args, context) => {\r\n    if (!context.session.isAdmin) {\r\n      throw new Error('Admin only');\r\n    }\r\n\r\n    const { metrics, days } = args;\r\n\r\n    return context.loaders.applicationUsageMetricLoader.loadUsageMetrics(\r\n      application.id,\r\n      metrics,\r\n      days,\r\n    );\r\n  },\r\n\r\n  serverAccessToken: (application, _args, _context) => {\r\n    return jwt.sign({ app_id: application.id }, application.sharedSecret, {\r\n      algorithm: 'HS512',\r\n      expiresIn: '24 h',\r\n    });\r\n  },\r\n\r\n  customerAccessToken: async (application, _args, _context) => {\r\n    const customer = await CustomerEntity.findByPk(application.customerID);\r\n    if (!customer) {\r\n      throw new Error(`Customer not found`);\r\n    }\r\n\r\n    return jwt.sign({ customer_id: customer.id }, customer.sharedSecret, {\r\n      algorithm: 'HS512',\r\n      expiresIn: '24 h',\r\n    });\r\n  },\r\n\r\n  setupInfo: async (application, _args, context) => {\r\n    const [firstUser, firstOrg, isComponentInitialized] = await Promise.all([\r\n      context.loaders.applicationLoader.getFirstUserInApplication(\r\n        application.id,\r\n      ),\r\n      context.loaders.applicationLoader.getFirstOrgInApplication(\r\n        application.id,\r\n      ),\r\n      context.loaders.applicationLoader.isComponentInitializedForApplication(\r\n        application.id,\r\n      ),\r\n    ]);\r\n\r\n    return {\r\n      firstUser,\r\n      firstOrg,\r\n      isComponentInitialized,\r\n    };\r\n  },\r\n\r\n  defaultProvider: deprecatedFunction(\r\n    () => null,\r\n    'graphql: application.defaultProvider',\r\n  ),\r\n};\r\n", "import { v4 as uuid } from 'uuid';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport type { MessageActionsType } from 'common/const/MessageActions.ts';\r\nimport {\r\n  MessageActionIconURLs,\r\n  MessageActionTranslationKeys,\r\n} from 'common/const/MessageActions.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishEventToWebhook } from 'server/src/webhook/webhook.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { getActionMessageContent } from 'server/src/message/util/getActionMessageContent.ts';\r\nimport { createThreadActionNotifications } from 'server/src/entity/thread/update_thread_tasks/createThreadActionNotifications.ts';\r\n\r\nexport const setThreadResolvedResolver: Resolvers['Mutation']['setThreadResolved'] =\r\n  async (_, args, originalContext) => {\r\n    const { threadID, resolved } = args;\r\n\r\n    const thread =\r\n      await originalContext.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n    const { viewer } = context.session;\r\n    const { userID, orgID } = assertViewerHasIdentity(viewer);\r\n\r\n    const user = await originalContext.loaders.userLoader.loadUser(userID);\r\n    if (!user) {\r\n      throw new Error(\"The user doesn't exist?!?\");\r\n    }\r\n\r\n    // If the thread is already in the right state, do nothing\r\n    if ((thread.resolvedTimestamp !== null) === resolved) {\r\n      return { success: true, failureDetails: null };\r\n    }\r\n\r\n    const originalSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const actionType: MessageActionsType = resolved\r\n      ? 'thread_resolved'\r\n      : 'thread_unresolved';\r\n\r\n    try {\r\n      const messageMutator = new MessageMutator(viewer, context.loaders);\r\n\r\n      const threadMutator = new ThreadMutator(viewer, context.loaders);\r\n      let result = false;\r\n      const { success, message } = await getSequelize().transaction(\r\n        async (transaction) => {\r\n          const createdMessage = await messageMutator.createMessage(\r\n            {\r\n              id: uuid(),\r\n              thread,\r\n              content: getActionMessageContent(actionType, user),\r\n              url: null,\r\n              iconURL: MessageActionIconURLs[actionType],\r\n              translationKey: MessageActionTranslationKeys[actionType],\r\n              type: 'action_message',\r\n            },\r\n            transaction,\r\n          );\r\n\r\n          const updateThread = await threadMutator.setThreadResolved(\r\n            threadID,\r\n            resolved,\r\n            transaction,\r\n          );\r\n\r\n          const threadParticipantMutator = new ThreadParticipantMutator(\r\n            viewer,\r\n            context.loaders,\r\n          );\r\n\r\n          // if a user has resolved or reopened, we should subscribe them to\r\n          await threadParticipantMutator.setViewerSubscribed(\r\n            thread,\r\n            true,\r\n            transaction,\r\n          );\r\n\r\n          await threadParticipantMutator.markThreadSeen({\r\n            threadID,\r\n            setSubscribed: true,\r\n            transaction,\r\n          });\r\n\r\n          await threadParticipantMutator.markThreadNewlyActiveForOtherUsers(\r\n            threadID,\r\n            createdMessage.id,\r\n            transaction,\r\n          );\r\n\r\n          return {\r\n            success: updateThread && !!createdMessage,\r\n            message: createdMessage,\r\n          };\r\n        },\r\n      );\r\n\r\n      result = success;\r\n\r\n      if (result) {\r\n        const app = await ApplicationEntity.findByPk(\r\n          message.platformApplicationID,\r\n        );\r\n\r\n        if (!app) {\r\n          throw new Error('No application found when resolving thread');\r\n        }\r\n\r\n        backgroundPromise(\r\n          Promise.all([\r\n            publishPubSubEvent(\r\n              'thread-message-added',\r\n              { threadID: message.threadID },\r\n              { messageID: message.id },\r\n            ),\r\n\r\n            publishEventToWebhook(app, {\r\n              type: 'thread-message-added',\r\n              threadID: thread.id,\r\n              messageID: message.id,\r\n            }),\r\n          ]),\r\n          context.logger,\r\n        );\r\n      }\r\n\r\n      const page =\r\n        await context.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(\r\n          threadID,\r\n        );\r\n\r\n      if (!page) {\r\n        throw new Error(`Thread does not exist on a page.`);\r\n      }\r\n      const newSubscribers = new Set(\r\n        await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n          thread.id,\r\n        ),\r\n      );\r\n\r\n      const removed = [...originalSubscribers].filter(\r\n        (s) => !newSubscribers.has(s),\r\n      );\r\n      const added = [...newSubscribers].filter(\r\n        (s) => !originalSubscribers.has(s),\r\n      );\r\n      const pageContextHash = page.contextHash;\r\n\r\n      await Promise.all([\r\n        publishPubSubEvent(\r\n          'thread-filterable-properties-updated',\r\n          { orgID },\r\n          {\r\n            threadID,\r\n            changes: {\r\n              resolved: { old: !resolved, new: resolved },\r\n              ...((added.length > 0 || removed.length > 0) && {\r\n                subscribers: { added, removed },\r\n              }),\r\n            },\r\n          },\r\n        ),\r\n        publishPubSubEvent('thread-properties-updated', { threadID }),\r\n        publishPubSubEvent('annotations-on-page-updated', {\r\n          pageContextHash,\r\n          orgID,\r\n        }),\r\n        createThreadActionNotifications({\r\n          context,\r\n          threadID: thread.id,\r\n          messageID: message.id,\r\n          threadActionType:\r\n            actionType === 'thread_resolved' ? 'resolve' : 'unresolve',\r\n        }),\r\n      ]);\r\n\r\n      return { success: result, failureDetails: null };\r\n    } catch (e) {\r\n      context.logger.logException(\r\n        'Error while setting resolve thread status',\r\n        e,\r\n        {\r\n          userID,\r\n          threadID,\r\n          resolved,\r\n        },\r\n      );\r\n      return { success: false, failureDetails: null };\r\n    }\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageThreadResolvedResolver: Resolvers['PageThreadResolved'] = {\r\n  thread: async ({ payload: { threadID } }, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (thread === null) {\r\n      throw new Error(`Failed to load thread ID: ${threadID}`);\r\n    }\r\n\r\n    return thread;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageThreadUnresolvedResolver: Resolvers['PageThreadUnresolved'] = {\r\n  thread: async ({ payload: { threadID } }, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (thread === null) {\r\n      throw new Error(`Failed to load thread ID: ${threadID}`);\r\n    }\r\n\r\n    return thread;\r\n  },\r\n};\r\n", "import type { Transaction } from 'sequelize';\r\n\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { SlackMirroredThreadEntity } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadEntity.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { LinkedOrgsLoader } from 'server/src/entity/linked_orgs/LinkedOrgsLoader.ts';\r\n\r\nexport class SlackMirroredThreadMutator {\r\n  viewer: Viewer;\r\n\r\n  /**\r\n   * Mutator for SlackMirroredThread\r\n   * @param viewer SlackOrg Viewer\r\n   */\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async createOne(\r\n    threadID: UUID,\r\n    slackChannelID: string,\r\n    slackMessageTimestamp: string,\r\n    transaction?: Transaction,\r\n  ) {\r\n    const orgID = assertViewerHasOrg(this.viewer);\r\n\r\n    return await SlackMirroredThreadEntity.create(\r\n      {\r\n        threadID,\r\n        threadOrgID: orgID,\r\n        slackOrgID: orgID,\r\n        slackChannelID,\r\n        slackMessageTimestamp,\r\n      },\r\n      { transaction },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unlink a given Slack thread\r\n   *\r\n   * @param slackChannelID\r\n   * @param slackMessageTimestamp\r\n   * @returns an object with threadID and threadOrgID of the unlinked thread, or\r\n   * null if none was unlinked\r\n   */\r\n  async unlinkSlackThread(\r\n    slackChannelID: string,\r\n    slackMessageTimestamp: string,\r\n  ) {\r\n    const slackOrgID = assertViewerHasOrg(this.viewer);\r\n\r\n    const [rows] = (await getSequelize().query(\r\n      `DELETE FROM slack_mirrored_threads\r\n         WHERE \"slackOrgID\"=$1\r\n         AND \"slackChannelID\"=$2\r\n         AND \"slackMessageTimestamp\"=$3\r\n         RETURNING \"threadID\", \"threadOrgID\";`,\r\n      {\r\n        bind: [slackOrgID, slackChannelID, slackMessageTimestamp],\r\n      },\r\n    )) as [\r\n      Array<{\r\n        threadID: UUID;\r\n        threadOrgID: UUID;\r\n      }>,\r\n      unknown,\r\n    ];\r\n\r\n    return rows.length > 0 ? rows[0] : null;\r\n  }\r\n\r\n  async unlinkAllThreads(threadOrgID: UUID, slackOrgID: UUID) {\r\n    const orgIDs = await new LinkedOrgsLoader(this.viewer).getOrgIDs();\r\n    if ([threadOrgID, slackOrgID].every((id) => orgIDs.includes(id))) {\r\n      return await SlackMirroredThreadEntity.destroy({\r\n        where: {\r\n          threadOrgID,\r\n          slackOrgID,\r\n        },\r\n      });\r\n    }\r\n    return;\r\n  }\r\n}\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { LinkedOrgsMutator } from 'server/src/entity/linked_orgs/LinkedOrgsMutator.ts';\r\nimport { SlackMirroredThreadMutator } from 'server/src/entity/slack_mirrored_thread/SlackMirroredThreadMutator.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishUserIdentityUpdate } from 'server/src/pubsub/index.ts';\r\n\r\nexport const unlinkOrgsMutationResolver: Resolvers['Mutation']['unlinkOrgs'] =\r\n  async (_, __, context) => {\r\n    const { userID, orgID } = assertViewerHasIdentity(context.session.viewer);\r\n    const slackOrgToDisconnect =\r\n      await context.loaders.linkedOrgsLoader.getConnectedSlackOrgID(orgID);\r\n\r\n    if (!slackOrgToDisconnect) {\r\n      context.logger.warn('No linked org to unlink');\r\n      return { success: false, failureDetails: null };\r\n    }\r\n    // Remove any mirrored thread entities, so the threads can potentially be\r\n    // mirrored again with another Slack org in the future\r\n    const slackMirroredThreadMutator = new SlackMirroredThreadMutator(\r\n      context.session.viewer,\r\n    );\r\n    await slackMirroredThreadMutator.unlinkAllThreads(\r\n      orgID,\r\n      slackOrgToDisconnect,\r\n    );\r\n\r\n    const linkedOrgsMutator = new LinkedOrgsMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n    const orgUnlinked = await linkedOrgsMutator.unlinkOrgs();\r\n    if (orgUnlinked >= 1) {\r\n      backgroundPromise(\r\n        publishUserIdentityUpdate({\r\n          userID,\r\n          orgID,\r\n          platformApplicationID: context.session.viewer.platformApplicationID!,\r\n        }),\r\n      );\r\n    }\r\n    return { success: orgUnlinked >= 1, failureDetails: null };\r\n  };\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { toPageContext } from 'common/types/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getPageContextHash } from 'server/src/util/hash.ts';\r\nimport { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\n\r\nexport const annotationsOnPageQueryResolver: Resolvers['Query']['annotationsOnPage'] =\r\n  async (_, { pageContext, includeDeleted = false }, context) => {\r\n    const { orgID, userID } = assertViewerHasIdentity(context.session.viewer);\r\n    const [pageContextHash] = getPageContextHash(toPageContext(pageContext));\r\n    return await getAnnotationsOnPage(\r\n      context,\r\n      pageContextHash,\r\n      userID,\r\n      orgID,\r\n      includeDeleted ?? false,\r\n    );\r\n  };\r\n\r\nexport async function getAnnotationsOnPage(\r\n  context: RequestContext,\r\n  pageContextHash: UUID,\r\n  userID: UUID,\r\n  orgID: UUID,\r\n  includeDeleted: boolean,\r\n) {\r\n  const allAnnotationsOnPage =\r\n    await context.loaders.messageAttachmentLoader.loadAnnotationAttachmentsOnPage(\r\n      pageContextHash,\r\n      includeDeleted,\r\n    );\r\n\r\n  if (allAnnotationsOnPage.length === 0) {\r\n    return { allAnnotations: [], hiddenAnnotationIDs: [] };\r\n  }\r\n\r\n  const annotationsHiddenByUser = await UserHiddenAnnotationsEntity.findAll({\r\n    where: { userID, orgID, pageContextHash },\r\n  });\r\n  const hiddenAnnotationIDs = annotationsHiddenByUser.map(\r\n    (value) => value.annotationID,\r\n  );\r\n\r\n  return { allAnnotations: allAnnotationsOnPage, hiddenAnnotationIDs };\r\n}\r\n", "import {\r\n  assertViewerHasSingleOrgForWrite,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const setAnnotationVisibleMutationResolver: Resolvers['Mutation']['setAnnotationVisible'] =\r\n  async (_, { annotationID, visible }, context) => {\r\n    const orgID = assertViewerHasSingleOrgForWrite(\r\n      context.session.viewer,\r\n      'Must specify a group ID for threads to be created',\r\n    );\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    try {\r\n      const attachment =\r\n        await context.loaders.messageAttachmentLoader.loadAttachment(\r\n          annotationID,\r\n        );\r\n      if (!attachment) {\r\n        throw new Error('Cannot find attachment.');\r\n      }\r\n\r\n      const message = await context.loaders.messageLoader.loadMessage(\r\n        attachment.messageID,\r\n      );\r\n      if (!message) {\r\n        throw new Error('Cannot find message.');\r\n      }\r\n\r\n      const thread = await context.loaders.threadLoader.loadThread(\r\n        message.threadID,\r\n      );\r\n      if (!thread) {\r\n        throw new Error('Cannot find thread.');\r\n      }\r\n\r\n      const page =\r\n        await context.loaders.pageLoader.loadPrimaryPageForThreadNoOrgCheck(\r\n          thread.id,\r\n        );\r\n      if (!page) {\r\n        throw new Error('Cannot find page.');\r\n      }\r\n\r\n      const pageContextHash = page.contextHash;\r\n\r\n      if (visible) {\r\n        await UserHiddenAnnotationsEntity.destroy({\r\n          where: { annotationID },\r\n        });\r\n      } else {\r\n        await UserHiddenAnnotationsEntity.create({\r\n          userID,\r\n          orgID,\r\n          annotationID,\r\n          pageContextHash,\r\n        });\r\n      }\r\n      return { success: true, failureDetails: null };\r\n    } catch {\r\n      return { success: false, failureDetails: null };\r\n    }\r\n  };\r\n", "import { toPageContext } from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasIdentity,\r\n  assertViewerHasOrg,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { getAnnotationsOnPage } from 'server/src/public/queries/annotations_on_page.ts';\r\nimport { withRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport type { PubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getPageContextHash } from 'server/src/util/hash.ts';\r\n\r\nexport const annotationsOnPageUpdatedSubscriptionResolver: Resolvers['Subscription']['annotationsOnPageUpdated'] =\r\n  {\r\n    resolve: (\r\n      event: PubSubEvent<'annotations-on-page-updated'>,\r\n      args,\r\n      context,\r\n    ) => {\r\n      const { orgID, userID } = assertViewerHasIdentity(context.session.viewer);\r\n      return getAnnotationsOnPage(\r\n        context,\r\n        event.args.pageContextHash,\r\n        userID,\r\n        orgID,\r\n        args.includeDeleted ?? false,\r\n      );\r\n    },\r\n\r\n    subscribe: async (_root, args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const orgID = assertViewerHasOrg(context.session.viewer);\r\n      const [pageContextHash] = getPageContextHash(\r\n        toPageContext(args.pageContext),\r\n      );\r\n      return withRestartEvent({\r\n        events: [['annotations-on-page-updated', { orgID, pageContextHash }]],\r\n        userID,\r\n        subscriptionName: 'annotationsOnPageUpdatedSubscriptionResolver',\r\n      })();\r\n    },\r\n  };\r\n", "import { assertViewerHasIdentity } from 'server/src/auth/index.ts';\r\nimport { UserHiddenAnnotationsEntity } from 'server/src/entity/user_hidden_annotations/UserHiddenAnnotationsEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const resetUserHiddenAnnotationsResolver: Resolvers['Mutation']['resetUserHiddenAnnotations'] =\r\n  async (_, _args, context) => {\r\n    const { userID, orgID } = assertViewerHasIdentity(context.session.viewer);\r\n\r\n    try {\r\n      await UserHiddenAnnotationsEntity.destroy({\r\n        where: { userID, orgID },\r\n      });\r\n\r\n      return { success: true, failureDetails: null };\r\n    } catch {\r\n      return { success: false, failureDetails: null };\r\n    }\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { setUserPresentContext } from 'server/src/presence/utils.ts';\r\nimport { assertViewerHasSingleOrgForWrite } from 'server/src/auth/index.ts';\r\n\r\nexport const setPresentContextMutationResolver: Resolvers['Mutation']['setPresentContext'] =\r\n  async (_, args, context) => {\r\n    const { present, durable, context: userContext, exclusivityRegion } = args;\r\n\r\n    // Check error here to make sure we throw a useful error message.\r\n    assertViewerHasSingleOrgForWrite(\r\n      context.session.viewer,\r\n      'Must specify a group ID when setting presence to control who can see it',\r\n    );\r\n\r\n    await setUserPresentContext({\r\n      userContext,\r\n      present,\r\n      durable,\r\n      context,\r\n      exclusivityRegion,\r\n    });\r\n    return true;\r\n  };\r\n", "import { CORD_HOMEPAGE_APPLICATION_ID } from 'common/const/Ids.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasPlatformApplicationID,\r\n} from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const usersByExternalIDQueryResolver: Resolvers['Query']['usersByExternalID'] =\r\n  async (_, args, context) => {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n    const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n\r\n    // HACKY HACKY SHIT to make LiveCursors work for the v5 website without\r\n    // fixing some structural problems with the way we load users on the\r\n    // frontend that prevent us from using an org ID override. So just ignore\r\n    // orgs and let you load any user in this demo app. THIS IS NOT SAFE IN\r\n    // GENERAL since the function we're calling below does *no* org checks, we\r\n    // should be checking that the viewer shares an org with the target, but it\r\n    // doesn't matter for the demo app so I'm not bothering.\r\n    if (platformApplicationID === CORD_HOMEPAGE_APPLICATION_ID) {\r\n      const users = await Promise.all(\r\n        args.externalIDs.map((externalID) =>\r\n          context.loaders.userLoader.loadUserByExternalID(\r\n            platformApplicationID,\r\n            externalID,\r\n          ),\r\n        ),\r\n      );\r\n      return users.filter(isDefined);\r\n    }\r\n\r\n    return await context.loaders.userLoader.loadUsersByExternalIDsInOrg(\r\n      args.externalIDs,\r\n      orgIDs,\r\n    );\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\n\r\nexport const markThreadSeenMutation: Resolvers['Mutation']['markThreadSeen'] =\r\n  async (_, args, context) => {\r\n    const { threadID } = args;\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      return {\r\n        success: false,\r\n        failureDetails: null,\r\n      };\r\n    }\r\n\r\n    const { viewer } = context.session;\r\n\r\n    await new ThreadParticipantMutator(viewer, context.loaders).markThreadSeen({\r\n      threadID,\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "// Adapted from https://github.com/apollographql/graphql-subscriptions/blob/master/src/with-filter.ts\r\n\r\nimport { $$asyncIterator } from 'iterall';\r\nimport type { ResolverFn } from 'server/src/public/subscriptions/util/common.ts';\r\n\r\ninterface IterallAsyncIterator<T> extends AsyncIterator<T> {\r\n  [$$asyncIterator](): IterallAsyncIterator<T>;\r\n}\r\n\r\ntype ResolveFn<T> = (value: T) => void;\r\ntype RejectFn = (reason?: any) => void;\r\n\r\ntype MapKey = string | number | boolean | symbol;\r\n\r\n/**\r\n * Given a function that returns an async iterator, produces a function that\r\n * returns an async iterator that only will produce a result every throttleMs\r\n * milliseconds.  The first and last events are always delivered, as well as any\r\n * event that has payload.done.\r\n *\r\n * This should only be used with subscriptions where it's safe to drop some\r\n * events if a later event arrives.\r\n */\r\nexport function withThrottle<T>(\r\n  asyncIteratorFn: ResolverFn<T>,\r\n  throttleMs: number,\r\n  keyFunction: (t: T) => MapKey = () => '',\r\n): ResolverFn<T> {\r\n  return (\r\n    rootValue: T,\r\n    args: any,\r\n    context: any,\r\n    info: any,\r\n  ): IterallAsyncIterator<any> => {\r\n    const asyncIterator = asyncIteratorFn(rootValue, args, context, info);\r\n    // This is a relatively straightforward state machine except for the\r\n    // complication of delivering a cached value while we're waiting for another\r\n    // value from the source.\r\n    //\r\n    // For each key, the normal mode of operation has three states:\r\n    //\r\n    // State 1: timers.has(key) === false, storedResults.has(key) === false: We\r\n    // aren't currently throttling anything, so if an event comes in, deliver it\r\n    // and transition to state 2.\r\n    //\r\n    // State 2: timers.has(key) === true, storedResults.has(key) === false: We\r\n    // have started throttling but haven't suppressed any events.  If an event\r\n    // arrives, store it and transition to state 3.  If the timer expires,\r\n    // transition to state 1.\r\n    //\r\n    // State 3: timers.has(key) === true, storedResults.has(key) === true: We\r\n    // have started throttling and have suppressed at least one event.  If an\r\n    // event arrives, replace the stored event but otherwise do nothing.  If the\r\n    // timer expires, deliver the cached event and transition to state 1.\r\n    //\r\n    // The complication is that when we deliver a cached event from state 3, we\r\n    // will still be waiting for a new event to come from the source.  If that\r\n    // arrives before anyone asks for it, we don't have a downstream promise to\r\n    // resolve with it, so we need to stash it in storedPromises.\r\n    const timers = new Map<MapKey, NodeJS.Timeout>();\r\n    const storedResults = new Map<MapKey, IteratorResult<T>>();\r\n    const storedPromises: Promise<IteratorResult<T>>[] = [];\r\n    let nextResolve: ResolveFn<IteratorResult<T>> | undefined = undefined;\r\n    let nextReject: RejectFn | undefined = undefined;\r\n\r\n    function doResolve(result: IteratorResult<T>) {\r\n      if (nextResolve) {\r\n        const toCall = nextResolve;\r\n        nextResolve = undefined;\r\n        nextReject = undefined;\r\n        toCall(result);\r\n      } else {\r\n        storedPromises.push(Promise.resolve(result));\r\n      }\r\n    }\r\n\r\n    function doReject(reason?: any) {\r\n      if (nextReject) {\r\n        const toCall = nextReject;\r\n        nextResolve = undefined;\r\n        nextReject = undefined;\r\n        toCall(reason);\r\n      } else {\r\n        storedPromises.push(Promise.reject(reason));\r\n      }\r\n    }\r\n\r\n    return {\r\n      next() {\r\n        if (storedPromises.length > 0) {\r\n          // Handle the case where we received a value when nobody was waiting\r\n          // for it\r\n          return storedPromises.shift()!;\r\n        }\r\n        return new Promise<IteratorResult<T>>((resolve, reject) => {\r\n          nextResolve = resolve;\r\n          nextReject = reject;\r\n          const waitForIncomingPromise = () => {\r\n            asyncIterator\r\n              .next()\r\n              .then((payload) => {\r\n                if (payload.done === true) {\r\n                  // We always immediately deliver done payloads.  If we have a\r\n                  // stashed result, immediately deliver that first (no need to\r\n                  // throttle, we're never getting another update), then deliver\r\n                  // the done payload.\r\n                  for (const timer of timers.values()) {\r\n                    clearTimeout(timer);\r\n                  }\r\n                  timers.clear();\r\n                  for (const storedResult of storedResults.values()) {\r\n                    doResolve(storedResult);\r\n                  }\r\n                  storedResults.clear();\r\n                  doResolve(payload);\r\n                  return;\r\n                }\r\n                const key = keyFunction(payload.value);\r\n\r\n                if (!timers.has(key)) {\r\n                  const timerFn = () => {\r\n                    const storedResult = storedResults.get(key);\r\n                    if (storedResult) {\r\n                      storedResults.delete(key);\r\n                      timers.set(key, setTimeout(timerFn, throttleMs));\r\n                      doResolve(storedResult);\r\n                    } else {\r\n                      timers.delete(key);\r\n                    }\r\n                  };\r\n                  timers.set(key, setTimeout(timerFn, throttleMs));\r\n                  doResolve(payload);\r\n                  return;\r\n                }\r\n\r\n                storedResults.set(key, payload);\r\n                waitForIncomingPromise();\r\n              })\r\n              .catch((err) => {\r\n                doReject(err);\r\n                return;\r\n              });\r\n          };\r\n\r\n          waitForIncomingPromise();\r\n        });\r\n      },\r\n      return() {\r\n        return asyncIterator.return!();\r\n      },\r\n      throw(error) {\r\n        return asyncIterator.throw!(error);\r\n      },\r\n      [$$asyncIterator]() {\r\n        return this;\r\n      },\r\n    };\r\n  };\r\n}\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { liveQueryWithRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport { withThrottle } from 'server/src/public/subscriptions/util/with_throttle.ts';\r\n\r\nconst THROTTLE_MS = 1000;\r\n\r\nexport const viewerIdentityLiveQueryResolver: Resolvers['Subscription']['viewerIdentityLiveQuery'] =\r\n  {\r\n    resolve: (value) => value,\r\n    subscribe: async (_root, _args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const iterable = await liveQueryWithRestartEvent({\r\n        events: [['user-identity', { userID }]],\r\n        initialData: () => ({}),\r\n        eventData: (_event) => ({}),\r\n        userID,\r\n        subscriptionName: 'viewerIdentityLiveQueryResolver',\r\n      });\r\n      return withThrottle(\r\n        () => iterable[Symbol.asyncIterator](),\r\n        THROTTLE_MS,\r\n      )();\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const usersQueryResolver: Resolvers['Query']['users'] = async (\r\n  _,\r\n  args,\r\n  context,\r\n) => {\r\n  return await context.loaders.userLoader.loadUsersInViewerOrgs(args.ids);\r\n};\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  FeatureFlags,\r\n  flagsUserFromContext,\r\n  getTypedFeatureFlagValue,\r\n} from 'server/src/featureflags/index.ts';\r\nimport { getRedis } from 'server/src/redis/index.ts';\r\n\r\n/**\r\n * This is a single global rate-limit, since right now we only use it from\r\n * GraphQL. The logic works for anything though, so you can pull the `gql_`\r\n * prefix out of the key into an argument, maybe swap out the LD flags, and use\r\n * this rate-limit for other things too. See #8683's intermediate states for how\r\n * that might be done.\r\n */\r\nexport async function shouldRateLimit(\r\n  context: RequestContext,\r\n): Promise<boolean> {\r\n  const config = await getTypedFeatureFlagValue(\r\n    FeatureFlags.RATE_LIMITS,\r\n    flagsUserFromContext(context),\r\n  );\r\n\r\n  const key = `gql_${context.connectionID}`;\r\n  const count = await getRedis().incrAndExpire(key, config.seconds);\r\n  return count > config.maxCount;\r\n}\r\n", "import { v4 as uuid } from 'uuid';\r\nimport {\r\n  assertViewerHasPlatformIdentity,\r\n  Viewer,\r\n} from 'server/src/auth/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport { createPlatformUser } from 'server/src/public/routes/platform/util.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { OrgMembersEntity } from 'server/src/entity/org_members/OrgMembersEntity.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { MessageMutator } from 'server/src/entity/message/MessageMutator.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type { Location } from 'common/types/index.ts';\r\nimport { PageMutator } from 'server/src/entity/page/PageMutator.ts';\r\nimport { PageLoader } from 'server/src/entity/page/PageLoader.ts';\r\nimport type { PageEntity } from 'server/src/entity/page/PageEntity.ts';\r\nimport { PageVisitorMutator } from 'server/src/entity/page_visitor/PageVisitorMutator.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { CORD_AUTOMATED_TESTS_APPLICATION_ID } from 'common/const/Ids.ts';\r\nimport { getNewLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { publishNewThreadEvents } from 'server/src/entity/thread/new_thread_tasks/publishNewThreadEvents.ts';\r\n\r\nexport const sendSampleWelcomeMessageResolver: Resolvers['Mutation']['sendSampleWelcomeMessage'] =\r\n  async (_, args, context) => {\r\n    const { userID, orgID, platformApplicationID } =\r\n      assertViewerHasPlatformIdentity(context.session.viewer);\r\n\r\n    const [application, isFirstOrgMessage] = await Promise.all([\r\n      context.loaders.applicationLoader.load(platformApplicationID),\r\n      MessageEntity.findOne({ where: { orgID } }).then((msg) => msg === null),\r\n    ]);\r\n\r\n    if (\r\n      !application ||\r\n      (application.environment !== 'sampletoken' &&\r\n        application.id !== CORD_AUTOMATED_TESTS_APPLICATION_ID)\r\n    ) {\r\n      throw new Error('sendSampleWelcomeMessage: invalid application');\r\n    }\r\n\r\n    if (!isFirstOrgMessage) {\r\n      return { success: true, failureDetails: null };\r\n    }\r\n\r\n    const firstName = 'Albert from Cord (Example User)';\r\n    const dummyUser = await createPlatformUser(\r\n      context,\r\n      application.id,\r\n      uuid(), // ExternalID\r\n      null,\r\n      firstName, // Display name\r\n      undefined, // Screen name\r\n      `${APP_ORIGIN}/static/Albert-from-Cord.jpeg`,\r\n      'active',\r\n      {}, // metadata\r\n    );\r\n\r\n    await OrgMembersEntity.upsert({\r\n      userID: dummyUser.id,\r\n      orgID: orgID,\r\n    });\r\n\r\n    const senderViewer = Viewer.createLoggedInViewer(dummyUser.id, orgID);\r\n    const senderLoaders = await getNewLoaders(senderViewer);\r\n\r\n    const { page } = await createPageContext(\r\n      senderViewer,\r\n      args.messageLocation,\r\n    );\r\n\r\n    const thread = await getSequelize().transaction(\r\n      async (transaction) =>\r\n        await new ThreadMutator(senderViewer, senderLoaders).createThreadOnPage(\r\n          uuid(),\r\n          args.url,\r\n          page,\r\n          'Welcome to Cord!',\r\n          transaction,\r\n          application.id,\r\n          null,\r\n        ),\r\n    );\r\n\r\n    const threadParticipants = [senderViewer.userID!, userID];\r\n    const threadParticipantMutator = new ThreadParticipantMutator(\r\n      senderViewer,\r\n      senderLoaders,\r\n    );\r\n    await threadParticipantMutator.subscribeUsersToThread(\r\n      thread.id,\r\n      threadParticipants,\r\n    );\r\n\r\n    await new MessageMutator(senderViewer, senderLoaders).createMessage({\r\n      id: uuid(),\r\n      thread,\r\n      url: args.url,\r\n      content: [\r\n        {\r\n          type: MessageNodeType.PARAGRAPH,\r\n          children: [\r\n            { text: 'Hey, ' },\r\n            {\r\n              type: MessageNodeType.MENTION,\r\n              user: { id: userID },\r\n              children: [{ text: `@Sample User` }],\r\n            },\r\n            { text: '!' },\r\n          ],\r\n        },\r\n        {\r\n          type: MessageNodeType.PARAGRAPH,\r\n          children: [\r\n            {\r\n              text: 'Nice work! Your Cord demo is ready.',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    });\r\n\r\n    await publishNewThreadEvents(page.contextData, thread);\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n\r\nasync function createPageContext(viewer: Viewer, location: Location) {\r\n  const pageContext = {\r\n    providerID: null,\r\n    data: location,\r\n  };\r\n\r\n  const pageContextHash = await new PageMutator(viewer).createPageIfNotExists(\r\n    pageContext,\r\n  );\r\n  const page = (await new PageLoader(viewer).getPageFromContextHash(\r\n    pageContextHash,\r\n  )) as PageEntity;\r\n\r\n  await new PageVisitorMutator(viewer).markPresentInPage(pageContextHash);\r\n\r\n  return { page, pageContextHash };\r\n}\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const consoleUserResolver: Resolvers['ConsoleUser'] = {\r\n  customer: (consoleUser, _args, context) => {\r\n    const customerID = consoleUser.customerID;\r\n    if (!customerID) {\r\n      return null;\r\n    }\r\n    return context.loaders.customerLoader.load(customerID);\r\n  },\r\n};\r\n", "import { QueryTypes } from 'sequelize';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\ntype CountQueryRow = { count: string };\r\n\r\nexport const applicationDeploymentInfoResolver: Resolvers['ApplicationDeploymentInfo'] =\r\n  {\r\n    messages: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(*)\r\n          FROM messages m\r\n          INNER JOIN orgs o ON m.\"orgID\" = o.id\r\n          WHERE o.\"platformApplicationID\" = $1\r\n            AND m.timestamp > NOW() - '1 week'::interval`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    users: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(DISTINCT pv.\"userID\")\r\n          FROM page_visitors pv\r\n          INNER JOIN orgs o ON pv.\"orgID\" = o.id\r\n          WHERE o.\"platformApplicationID\" = $1\r\n            AND pv.\"lastPresentTimestamp\" > NOW() - '1 week'::interval`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    usersSyncedAllTime: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(id)\r\n          FROM users\r\n          WHERE \"platformApplicationID\" = $1`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    orgs: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(DISTINCT o.id)\r\n          FROM page_visitors pv\r\n          INNER JOIN orgs o ON pv.\"orgID\" = o.id\r\n          WHERE o.\"platformApplicationID\" = $1\r\n            AND pv.\"lastPresentTimestamp\" > NOW() - '1 week'::interval`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    orgsSyncedAllTime: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(id)\r\n          FROM orgs\r\n          WHERE \"platformApplicationID\" = $1`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    components: async (application) => {\r\n      const result = await getSequelize().query<{ component: string }>(\r\n        `SELECT DISTINCT component\r\n          FROM events e, jsonb_array_elements_text(e.payload->'components') as component\r\n          WHERE e.type = 'sdk-components-used'\r\n            AND e.\"platformApplicationID\" = $1\r\n            AND e.\"serverTimestamp\" > NOW() - '1 week'::interval`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return result.map((c) => c.component.toLowerCase()).sort();\r\n    },\r\n    componentsInitializedAllTime: async (application) => {\r\n      const result = await getSequelize().query<{ component: string }>(\r\n        `SELECT DISTINCT component\r\n          FROM events e, jsonb_array_elements_text(e.payload->'components') as component\r\n          WHERE e.type = 'sdk-components-used'\r\n            AND e.\"platformApplicationID\" = $1`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return result.map((c) => c.component.toLowerCase()).sort();\r\n    },\r\n    reactPackageVersion: async (application) => {\r\n      const results = await getSequelize().query<{\r\n        reactPackageVersion: string;\r\n      }>(\r\n        `SELECT DISTINCT payload->>'reactPackageVersion' as \"reactPackageVersion\"\r\n          FROM events e\r\n          WHERE e.type = 'sdk-init'\r\n            AND jsonb_typeof(payload->'reactPackageVersion') = 'string'\r\n            AND e.payload->>'appID' = $1\r\n            AND e.\"serverTimestamp\" > NOW() - '1 day'::interval\r\n         `,\r\n        {\r\n          bind: [application.id],\r\n          type: QueryTypes.SELECT,\r\n        },\r\n      );\r\n\r\n      return results.map((result) => result.reactPackageVersion);\r\n    },\r\n    customLocations: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(DISTINCT p.\"contextData\")\r\n          FROM page_visitors pv\r\n          INNER JOIN orgs o ON pv.\"orgID\" = o.id\r\n          INNER JOIN pages p ON pv.\"pageContextHash\" = p.\"contextHash\"\r\n            AND pv.\"orgID\" = p.\"orgID\"\r\n          WHERE o.\"platformApplicationID\" = $1\r\n            AND pv.\"lastPresentTimestamp\" > NOW() - '1 week'::interval\r\n            AND p.\"contextData\" - 'location' != '{}'`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    customLocationsAllTime: async (application) => {\r\n      const result = await getSequelize().query<CountQueryRow>(\r\n        `SELECT COUNT(DISTINCT p.\"contextData\")\r\n          FROM pages p\r\n          INNER JOIN orgs o ON p.\"orgID\" = o.id\r\n          AND p.\"orgID\" = o.id\r\n          WHERE o.\"platformApplicationID\" = $1`,\r\n        { bind: [application.id], type: QueryTypes.SELECT },\r\n      );\r\n\r\n      return parseInt(result[0].count, 10);\r\n    },\r\n    browsers: async (application) => {\r\n      return (\r\n        await getSequelize().query<{ key: string; count: string }>(\r\n          // SELECT DISTINCT ON selects a single row per user, so this gives the\r\n          // proportion by user, not by session or anything else.  If a user has\r\n          // multiple records, we use the most recent one, so a user that uses\r\n          // multiple browsers/OSes will get counted as just using one\r\n          `SELECT payload->>'browserName' AS key, COUNT(*) AS count\r\n          FROM (SELECT DISTINCT ON (\"userID\") payload\r\n              FROM cord.events e\r\n              WHERE e.type = 'sdk-client-info'\r\n                AND e.\"platformApplicationID\" = $1\r\n                AND e.\"serverTimestamp\" > NOW() - '1 week'::interval\r\n              ORDER BY \"userID\", \"serverTimestamp\" DESC) AS e\r\n          GROUP BY key\r\n          ORDER BY count`,\r\n          { bind: [application.id], type: QueryTypes.SELECT },\r\n        )\r\n      ).map(({ key, count }) => ({ key, count: parseInt(count, 10) }));\r\n    },\r\n    operatingSystems: async (application) => {\r\n      return (\r\n        await getSequelize().query<{ key: string; count: string }>(\r\n          // SELECT DISTINCT ON selects a single row per user, so this gives the\r\n          // proportion by user, not by session or anything else.  If a user has\r\n          // multiple records, we use the most recent one, so a user that uses\r\n          // multiple browsers/OSes will get counted as just using one\r\n          `SELECT payload->>'osName' AS key, COUNT(*) AS count\r\n          FROM (SELECT DISTINCT ON (\"userID\") payload\r\n              FROM cord.events e\r\n              WHERE e.type = 'sdk-client-info'\r\n                AND e.\"platformApplicationID\" = $1\r\n                AND e.\"serverTimestamp\" > NOW() - '1 week'::interval\r\n              ORDER BY \"userID\", \"serverTimestamp\" DESC) AS e\r\n          GROUP BY key\r\n          ORDER BY count`,\r\n          { bind: [application.id], type: QueryTypes.SELECT },\r\n        )\r\n      ).map(({ key, count }) => ({ key, count: parseInt(count, 10) }));\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const adminChatUserResolver: Resolvers['AdminChatUser'] = {\r\n  user: (user) => user,\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const organizationQueryResolver: Resolvers['Query']['organization'] =\r\n  async (_, args, context) => {\r\n    if (!(await context.loaders.orgMembersLoader.viewerCanAccessOrg(args.id))) {\r\n      throw new Error(`Viewer cannot access org ${args.id}`);\r\n    }\r\n    return await context.loaders.orgLoader.loadOrg(args.id);\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assert } from 'common/util/index.ts';\r\nimport { fetchAndBuildNotifications } from 'server/src/notifications/fetch.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\nimport { Errors } from 'common/const/Errors.ts';\r\n\r\nexport const notificationAttachmentResolver: Resolvers['NotificationAttachment'] =\r\n  {\r\n    __resolveType: (attachment) => {\r\n      if ('message' in attachment) {\r\n        return 'NotificationMessageAttachment';\r\n      } else if ('thread' in attachment) {\r\n        return 'NotificationThreadAttachment';\r\n      } else if ('url' in attachment) {\r\n        return 'NotificationURLAttachment';\r\n      } else {\r\n        throw new Error('Invalid attachment');\r\n      }\r\n    },\r\n  };\r\n\r\nexport const notificationSenderResolver: Resolvers['NotificationSender'] = {\r\n  __resolveType: () => 'User',\r\n};\r\n\r\nexport const notificationHeaderNodeResolver: Resolvers['NotificationHeaderNode'] =\r\n  {\r\n    __resolveType: (node) => {\r\n      if ('user' in node) {\r\n        return 'NotificationHeaderUserNode';\r\n      } else if ('text' in node) {\r\n        return 'NotificationHeaderTextNode';\r\n      } else {\r\n        throw new Error('Invalid notification header');\r\n      }\r\n    },\r\n  };\r\n\r\n// Deliberately not exported! Please treat cursors as opaque strings.\r\nconst CURSOR_V1 = 'v1';\r\nconst CURSOR_SEPARATOR = ':';\r\n\r\nexport const notificationsResolver: Resolvers['Query']['notifications'] =\r\n  async (_, args, context) => {\r\n    // TODO(notifications) this is the absolute dumbest possible implementation\r\n    // of pagination. It is pretty darn dumb (but also pretty darn simple) -- we\r\n    // will likely have to upgrade it at some point.\r\n    //\r\n    // We simply fetch `first` rows from the DB which are older than the\r\n    // timestamp encoded in `after` and turn that into a batch of Notification\r\n    // results.  The timestamp of the oldest one becomes the `after` cursor\r\n    // timestamp.\r\n    //\r\n    // The `after` cursor encodes a version; currently there is only one version, so we\r\n    // just use it as a consistency check, but this gives us an easy way to\r\n    // change cursor behaviour without worrying about backwards compatibility.\r\n    //\r\n    // This all has some notable shortcomings:\r\n    //  - We will return fewer than `first` results if any aggregation happens,\r\n    //  since we only ever fetch `first` rows from the DB. This could be solved\r\n    //  by going back to the DB to fetch more rows until we have `first` results\r\n    //  (or exhaust the DB).\r\n    //  - If DB rows which otherwise would be aggregated are across a pagination\r\n    //  boundary, we will not aggregate them. This is much harder to solve,\r\n    //  since the rows that we want to aggregate into this page of results can\r\n    //  be older than results that should be on the next page (which we then\r\n    //  need to skip somehow when the next page is requested).\r\n\r\n    // TODO(notifications): use a stronger type here. Maybe\r\n    // WhereOptions<NotificationEntity>, but this then complains about the type\r\n    // of the metadata field.\r\n    let ltCreatedTimestamp: Date | undefined = undefined;\r\n    if (args.after) {\r\n      const split = args.after.split(CURSOR_SEPARATOR);\r\n      assert(split.length === 2 && split[0] === CURSOR_V1, 'Invalid cursor');\r\n      ltCreatedTimestamp = new Date(parseInt(split[1]));\r\n    }\r\n\r\n    if (args.filter?.organizationID) {\r\n      const userCanAccess =\r\n        await context.loaders.orgMembersLoader.viewerCanAccessOrgExternalID(\r\n          args.filter?.organizationID,\r\n        );\r\n\r\n      if (!userCanAccess) {\r\n        throw new ClientFacingError(Errors.USER_NOT_IN_GROUP);\r\n      }\r\n    }\r\n\r\n    const { entities, nodes } = await fetchAndBuildNotifications(context, {\r\n      ltCreatedTimestamp,\r\n      filter: args.filter\r\n        ? {\r\n            metadata: args.filter.metadata ?? undefined,\r\n            location: args.filter.location\r\n              ? {\r\n                  value: args.filter.location,\r\n                  partialMatch: !!args.filter.partialMatch,\r\n                }\r\n              : undefined,\r\n            organizationID: args.filter.organizationID ?? undefined,\r\n          }\r\n        : undefined,\r\n      limit: args.first,\r\n    });\r\n\r\n    return {\r\n      nodes,\r\n      paginationInfo: {\r\n        // This is technically wrong when *exactly* as many notifs as exist are\r\n        // requested. It's slightly fiddly/annoying to fix so we'll just roll\r\n        // with it -- the client will need to deal with getting hasNextPage=true\r\n        // but the next page being empty. Which will lead to a slightly weird UX\r\n        // where a loading spinner comes up and results in no more notifs, but\r\n        // is not a huge deal right now.\r\n        hasNextPage: entities.length === args.first,\r\n        endCursor:\r\n          entities.length > 0\r\n            ? [\r\n                CURSOR_V1,\r\n                // Grab the timestamp, minus one millisecond -- even though we\r\n                // do a strict less-than when consuming this, we still need to\r\n                // subtract one: postgres stores microsecond resolution but JS\r\n                // only deals in milisecond resolution, and so the microseconds\r\n                // can get rounded *up* to the larger milisecond, which will\r\n                // cause us to return a duplicate row from the previous page.\r\n                // Subtracting the one means we will always be less. This could\r\n                // cause weirdness if two notification rows come in within the\r\n                // same milisecond and a pagination boundary falls between them,\r\n                // but that is such an edge case I'm not worried. Once JS\r\n                // properly supports microseconds and sequelize is updated, we\r\n                // should switch to that and remove the subtraction here. cf.\r\n                // https://github.com/sequelize/sequelize/issues/14295\r\n                entities[entities.length - 1].createdTimestamp.getTime() - 1,\r\n              ].join(CURSOR_SEPARATOR)\r\n            : '',\r\n      },\r\n    };\r\n  };\r\n", "import { LogLevel } from 'common/types/index.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasPlatformUser,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { incCounterWithAppID } from 'server/src/logging/prometheus.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { createNotificationsQueryExpressionsFromFilters } from 'server/src/notifications/fetch.ts';\r\nimport {\r\n  NotificationMutator,\r\n  markedCounter,\r\n} from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { logServerEvent } from 'server/src/entity/event/EventMutator.ts';\r\n\r\nexport const markNotificationAsReadResolver: Resolvers['Mutation']['markNotificationAsRead'] =\r\n  async (_, args, context) => {\r\n    const { userID, platformApplicationID } = assertViewerHasPlatformUser(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const notif = args.byExternalID\r\n      ? await NotificationEntity.findOne({\r\n          where: { externalID: args.notificationID, platformApplicationID },\r\n        })\r\n      : await NotificationEntity.findByPk(args.notificationID);\r\n\r\n    if (!notif || notif.recipientID !== userID) {\r\n      return {\r\n        success: false,\r\n        failureDetails: { code: '404', message: 'No such notification' },\r\n      };\r\n    }\r\n\r\n    const notificationMutator = new NotificationMutator(context.session.viewer);\r\n    const affectedCount = await notificationMutator.markAsRead(notif);\r\n\r\n    logServerEvent({\r\n      session: context.session,\r\n      type: 'notification-mark-as-read',\r\n      logLevel: LogLevel.DEBUG,\r\n      payload: { id: notif.id, type: notif.type, affected: affectedCount },\r\n    });\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n\r\nexport const markNotificationAsUnreadResolver: Resolvers['Mutation']['markNotificationAsUnread'] =\r\n  async (_, args, context) => {\r\n    const { userID, platformApplicationID } = assertViewerHasPlatformUser(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const notif = await NotificationEntity.findOne({\r\n      where: { externalID: args.notificationExternalID, platformApplicationID },\r\n    });\r\n\r\n    if (!notif || notif.recipientID !== userID) {\r\n      return {\r\n        success: false,\r\n        failureDetails: { code: '404', message: 'No such notification' },\r\n      };\r\n    }\r\n\r\n    const notificationMutator = new NotificationMutator(context.session.viewer);\r\n    const affectedCount = await notificationMutator.markAsUnread(notif);\r\n\r\n    logServerEvent({\r\n      session: context.session,\r\n      type: 'notification-mark-as-unread',\r\n      logLevel: LogLevel.DEBUG,\r\n      payload: { id: notif.id, type: notif.type, affected: affectedCount },\r\n    });\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n\r\nexport const markAllNotificationsAsReadResolver: Resolvers['Mutation']['markAllNotificationsAsRead'] =\r\n  async (_, args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const readStatus = 'unread';\r\n    const {\r\n      bindVariables: partialBind,\r\n      extraJoins,\r\n      extraCondition,\r\n    } = await createNotificationsQueryExpressionsFromFilters({\r\n      filter: {\r\n        metadata: args.filter?.metadata ?? undefined,\r\n        location: args.filter?.location\r\n          ? {\r\n              value: args.filter.location,\r\n              partialMatch: !!args.filter.partialMatch,\r\n            }\r\n          : undefined,\r\n        organizationID: args.filter?.organizationID ?? undefined,\r\n      },\r\n      platformApplicationID: context.session.viewer.platformApplicationID,\r\n      ltCreatedTimestamp: undefined,\r\n      limit: undefined,\r\n      viewer: context.session.viewer,\r\n    });\r\n    const bindVariables = [...partialBind, userID, readStatus];\r\n    const notificationFilter = `WHERE n.\"recipientID\" = $${\r\n      bindVariables.length - 1\r\n    } AND n.\"readStatus\" = $${bindVariables.length}`;\r\n\r\n    const [affectedRows, __]: [{ id: UUID }[], any] =\r\n      (await getSequelize().query(\r\n        `\r\n       UPDATE notifications notifs\r\n       SET \"readStatus\" = 'read'\r\n       FROM (\r\n        SELECT n.id as id from notifications n \r\n        ${extraJoins}\r\n        ${notificationFilter}\r\n        ${extraCondition}\r\n\r\n       ) as sub\r\n      WHERE notifs.id = sub.id\r\n       RETURNING notifs.\"id\";`,\r\n        {\r\n          bind: bindVariables,\r\n        },\r\n      )) as [any[], any];\r\n\r\n    backgroundPromise(\r\n      Promise.all(\r\n        affectedRows.map((row) =>\r\n          publishPubSubEvent(\r\n            'notification-read-state-updated',\r\n            { userID },\r\n            { notificationID: row.id },\r\n          ),\r\n        ),\r\n      ),\r\n      context.logger,\r\n    );\r\n\r\n    incCounterWithAppID(\r\n      context.session.viewer,\r\n      markedCounter,\r\n      {},\r\n      affectedRows.length,\r\n    );\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n", "import { toPageContext } from 'common/types/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const activityQueryResolver: Resolvers['Query']['activity'] = async (\r\n  _,\r\n  args,\r\n  _context,\r\n) => {\r\n  const pageContext = toPageContext(args.pageContext);\r\n\r\n  return {\r\n    location: pageContext?.data,\r\n    partialMatch: !!args.partialMatch,\r\n    metadata: args.metadata ?? undefined,\r\n    viewer: args.viewer ?? undefined,\r\n    resolved: args.resolved ?? undefined,\r\n  };\r\n};\r\n", "import { toPageContext } from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { withFilter } from 'server/src/public/subscriptions/util/with_filter.ts';\r\nimport { withThrottle } from 'server/src/public/subscriptions/util/with_throttle.ts';\r\nimport { withRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport { updateMightBeRelevant } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport type { ThreadCollectionFilter } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport type { PubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nconst ACTIVITY_THROTTLE_MS = 500;\r\n\r\nexport const threadActivitySummarySubscriptionResolver: Resolvers['Subscription']['threadActivitySummary'] =\r\n  {\r\n    subscribe: async (_root, args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n      const filter: ThreadCollectionFilter = {\r\n        location: toPageContext(args.pageContext)?.data,\r\n        partialMatch: args.partialMatch ?? undefined,\r\n        metadata: args.metadata ?? undefined,\r\n        viewer: args.viewer ?? undefined,\r\n        resolved: args.resolved ?? undefined,\r\n      };\r\n\r\n      return withThrottle(\r\n        withFilter(\r\n          withRestartEvent({\r\n            events: [\r\n              ...orgIDs.flatMap(\r\n                (orgID) =>\r\n                  [\r\n                    ['page-thread-added-with-location', { orgID }],\r\n                    ['thread-filterable-properties-updated', { orgID }],\r\n                  ] as const,\r\n              ),\r\n              ['inbox-updated', { userID }],\r\n            ],\r\n            userID,\r\n            subscriptionName: 'threadActivitySummarySubscriptionResolver',\r\n          }),\r\n          async ({ payload, name }) => {\r\n            if (!payload || !('threadID' in payload)) {\r\n              if (name !== 'inbox-updated') {\r\n                context.logger.error(\r\n                  `Unexpected empty payload for event ${name}`,\r\n                );\r\n              }\r\n              return true;\r\n            }\r\n            if (name === 'thread-filterable-properties-updated') {\r\n              return updateMightBeRelevant(\r\n                context.logger,\r\n                filter,\r\n                payload as PubSubEvent<'thread-filterable-properties-updated'>['payload'],\r\n                userID,\r\n              );\r\n            }\r\n\r\n            return await context.loaders.threadLoader.threadMatchesFilter(\r\n              payload.threadID,\r\n              filter,\r\n            );\r\n          },\r\n        ),\r\n        ACTIVITY_THROTTLE_MS,\r\n      )();\r\n    },\r\n\r\n    resolve: (_root, args, context) =>\r\n      context.loaders.threadLoader.loadThreadActivitySummary({\r\n        location: toPageContext(args.pageContext)?.data,\r\n        partialMatch: args.partialMatch ?? undefined,\r\n        metadata: args.metadata ?? undefined,\r\n        viewer: args.viewer ?? undefined,\r\n        resolved: args.resolved ?? undefined,\r\n      }),\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const activityResolver: Resolvers['Activity'] = {\r\n  threadSummary: (root, _args, context) =>\r\n    context.loaders.threadLoader.loadThreadActivitySummary(root),\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadMessageRemovedResolver: Resolvers['ThreadMessageRemoved'] = {\r\n  id: ({ payload: { messageID } }) => messageID,\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadShareToSlackResolver: Resolvers['ThreadShareToSlack'] = {\r\n  id: ({ args: { threadID } }) => threadID,\r\n  info: ({ payload: { info } }) => info,\r\n};\r\n", "import { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const setThreadNameResolver: Resolvers['Mutation']['setThreadName'] =\r\n  async (_, { threadID, name }, context) => {\r\n    try {\r\n      const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n      if (!thread) {\r\n        return { success: false, failureDetails: null };\r\n      }\r\n\r\n      if (thread.name === name) {\r\n        return { success: true, failureDetails: null };\r\n      }\r\n\r\n      const threadMutator = new ThreadMutator(\r\n        context.session.viewer,\r\n        context.loaders,\r\n      );\r\n      const success = await threadMutator.setThreadName(threadID, name);\r\n\r\n      if (success) {\r\n        await publishPubSubEvent('thread-properties-updated', { threadID });\r\n      }\r\n\r\n      return { success, failureDetails: null };\r\n    } catch {\r\n      return { success: false, failureDetails: null };\r\n    }\r\n  };\r\n", "import {\r\n  assertViewerHasPlatformApplicationID,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { incCounterWithAppID } from 'server/src/logging/prometheus.ts';\r\nimport {\r\n  deletedCounter,\r\n  whereAggregatedNotificationEntity,\r\n} from 'server/src/public/mutations/notifications/utils.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport const deleteNotificationResolver: Resolvers['Mutation']['deleteNotification'] =\r\n  async (_, args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const notif = args.byExternalID\r\n      ? await NotificationEntity.findOne({\r\n          where: { externalID: args.notificationID, platformApplicationID },\r\n        })\r\n      : await NotificationEntity.findByPk(args.notificationID);\r\n\r\n    if (!notif || notif.recipientID !== userID) {\r\n      return {\r\n        success: false,\r\n        failureDetails: { code: '404', message: 'No such notification' },\r\n      };\r\n    }\r\n\r\n    const affectedCount = await NotificationEntity.destroy({\r\n      where: whereAggregatedNotificationEntity(notif),\r\n    });\r\n\r\n    incCounterWithAppID(\r\n      context.session.viewer,\r\n      deletedCounter,\r\n      {},\r\n      affectedCount,\r\n    );\r\n\r\n    backgroundPromise(\r\n      publishPubSubEvent(\r\n        'notification-deleted',\r\n        { userID },\r\n        { notificationID: notif.id },\r\n      ),\r\n    );\r\n\r\n    return { success: true, failureDetails: null };\r\n  };\r\n", "import { pubSubAsyncIterator } from 'server/src/pubsub/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  NotificationAddedTypeName,\r\n  NotificationDeletedTypeName,\r\n  NotificationReadStateUpdatedTypeName,\r\n} from 'common/types/index.ts';\r\nimport { withFilter } from 'server/src/public/subscriptions/util/with_filter.ts';\r\n\r\nexport const notificationEventsSubscriptionResolver: Resolvers['Subscription']['notificationEvents'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n    subscribe: async (_root, args, context) => {\r\n      const { filter } = args;\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n      return withFilter(\r\n        () =>\r\n          pubSubAsyncIterator(\r\n            // this must map to the NotificationEvents type definition in mapping.ts\r\n            ['notification-added', { userID }],\r\n            ['notification-read-state-updated', { userID }],\r\n            ['notification-deleted', { userID }],\r\n          ),\r\n        async ({ name, payload }) => {\r\n          if (!payload) {\r\n            return false;\r\n          }\r\n\r\n          if (name !== 'notification-added') {\r\n            return true;\r\n          }\r\n\r\n          const matchesFilter =\r\n            await context.loaders.notificationLoader.notificationMatchesFilter(\r\n              payload.notificationID,\r\n              filter\r\n                ? {\r\n                    metadata: filter.metadata ?? undefined,\r\n                    location: filter.location\r\n                      ? {\r\n                          value: filter.location,\r\n                          partialMatch: !!filter.partialMatch,\r\n                        }\r\n                      : undefined,\r\n                    organizationID: filter.organizationID ?? undefined,\r\n                  }\r\n                : undefined,\r\n            );\r\n\r\n          if (!matchesFilter) {\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        },\r\n      )();\r\n    },\r\n  };\r\n\r\nexport const notificationEventTypeResolver: Resolvers['NotificationEvent'] = {\r\n  __resolveType: (event) => {\r\n    switch (event.name) {\r\n      case 'notification-added':\r\n        return NotificationAddedTypeName;\r\n      case 'notification-read-state-updated':\r\n        return NotificationReadStateUpdatedTypeName;\r\n      case 'notification-deleted':\r\n        return NotificationDeletedTypeName;\r\n    }\r\n  },\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { buildNotification } from 'server/src/notifications/fetch.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const notificationAddedResolver: Resolvers['NotificationAdded'] = {\r\n  notification: async ({ payload: { notificationID } }, _, context) => {\r\n    assertViewerHasUser(context.session.viewer);\r\n\r\n    const notificationEntity =\r\n      await NotificationEntity.findByPk(notificationID);\r\n\r\n    if (!notificationEntity) {\r\n      throw new Error(\r\n        `Notification not found despite receiving subscription event ${notificationID}`,\r\n      );\r\n    }\r\n\r\n    const notification = await buildNotification(context, [notificationEntity]);\r\n\r\n    if (!notification) {\r\n      throw new Error(`Something went wrong when preparing notification`);\r\n    }\r\n\r\n    return notification;\r\n  },\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { buildNotification } from 'server/src/notifications/fetch.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const notificationReadStateUpdatedResolver: Resolvers['NotificationReadStateUpdated'] =\r\n  {\r\n    notification: async ({ payload: { notificationID } }, _, context) => {\r\n      assertViewerHasUser(context.session.viewer);\r\n\r\n      const notificationEntity =\r\n        await NotificationEntity.findByPk(notificationID);\r\n\r\n      if (!notificationEntity) {\r\n        throw new Error(\r\n          `Notification not found despite receiving subscription event ${notificationID}`,\r\n        );\r\n      }\r\n\r\n      const notification = await buildNotification(context, [\r\n        notificationEntity,\r\n      ]);\r\n\r\n      if (!notification) {\r\n        throw new Error(\r\n          `Something went wrong when preparing notification for NotificationEntity ${notificationID}`,\r\n        );\r\n      }\r\n\r\n      return notification;\r\n    },\r\n  };\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { AdminCRTCustomerIssueChangeEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueChangeEntity.ts';\r\nimport { AdminCRTCustomerIssueSubscriptionEntity } from 'server/src/entity/admin_crt/AdminCRTCustomerIssueSubscriptionEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const customerIssueResolver: Resolvers['CustomerIssue'] = {\r\n  customer: async (customerIssue, _args, context) => {\r\n    const customer = await context.loaders.customerLoader.load(\r\n      customerIssue.customerID,\r\n    );\r\n    if (!customer) {\r\n      throw new Error('Customer missing');\r\n    }\r\n    return customer;\r\n  },\r\n  nextAction: (customerIssue) => {\r\n    const { decision, communicationStatus } = customerIssue;\r\n    if (communicationStatus === 'none') {\r\n      return 'ack_receipt';\r\n    }\r\n    if (decision === 'pending') {\r\n      return 'make_decision';\r\n    }\r\n    if (communicationStatus === 'request_acked') {\r\n      return 'send_decision';\r\n    }\r\n    if (decision === 'accepted') {\r\n      return 'do_work';\r\n    }\r\n    if (\r\n      (decision === 'done' || decision === 'rejected') &&\r\n      communicationStatus === 'decision_sent'\r\n    ) {\r\n      return 'wait_for_ack';\r\n    }\r\n    if (\r\n      (decision === 'done' || decision === 'rejected') &&\r\n      communicationStatus === 'decision_acked'\r\n    ) {\r\n      return 'done';\r\n    }\r\n    return 'unknown';\r\n  },\r\n  history: async (customerIssue) => {\r\n    return await AdminCRTCustomerIssueChangeEntity.findAll({\r\n      where: { issueID: customerIssue.id },\r\n      order: [['timestamp', 'ASC']],\r\n    });\r\n  },\r\n  assignee: async (customerIssue, _args, context) => {\r\n    return customerIssue.assignee\r\n      ? await context.loaders.userLoader.loadUser(customerIssue.assignee)\r\n      : null;\r\n  },\r\n  subscribed: async (customerIssue, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const issueID = customerIssue.id;\r\n\r\n    const subscription = await AdminCRTCustomerIssueSubscriptionEntity.findOne({\r\n      where: { issueID, userID },\r\n    });\r\n\r\n    return !!subscription;\r\n  },\r\n};\r\n", "import { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const customerIssueChangeResolver: Resolvers['CustomerIssueChange'] = {\r\n  user: async (change, _args, context) => {\r\n    const orgID = assertViewerHasOrg(context.session.viewer);\r\n    const user = await context.loaders.userLoader.loadUserInOrg(\r\n      change.userID,\r\n      orgID,\r\n    );\r\n    if (!user) {\r\n      throw new Error('Change log associated with nonexistent user?');\r\n    }\r\n    return user;\r\n  },\r\n  created: (change) => {\r\n    return Boolean(change.changeDetail.created);\r\n  },\r\n  updated: (change) => change.changeDetail.updated ?? [],\r\n};\r\n", "import type { NotificationFilterInput } from 'common/graphql/types.ts';\r\nimport type { Maybe, NotificationListFilter } from 'common/types/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport function notificationFilterInputToNotificationListFilter(\r\n  filter: Maybe<NotificationFilterInput>,\r\n): NotificationListFilter {\r\n  return {\r\n    metadata: filter?.metadata ?? undefined,\r\n    location: filter?.location\r\n      ? { value: filter.location, partialMatch: !!filter.partialMatch }\r\n      : undefined,\r\n    organizationID: filter?.organizationID ?? undefined,\r\n  };\r\n}\r\n\r\nexport const notificationSummaryQueryResolver: Resolvers['Query']['notificationSummary'] =\r\n  (_, args, _context) => ({\r\n    filter: notificationFilterInputToNotificationListFilter(args.filter),\r\n  });\r\n", "// Adapted from https://github.com/apollographql/graphql-subscriptions/blob/master/src/with-filter.ts\r\n\r\nimport { $$asyncIterator } from 'iterall';\r\nimport type {\r\n  ResolverFn,\r\n  TransformFn,\r\n} from 'server/src/public/subscriptions/util/common.ts';\r\n\r\ninterface IterallAsyncIterator<T> extends AsyncIterator<T> {\r\n  [$$asyncIterator](): IterallAsyncIterator<T>;\r\n}\r\n\r\n/**\r\n * Given a function that returns an async iterator, produces a function that\r\n * returns an async iterator where the results of the original iterator are\r\n * transformed according to the transformation function.\r\n */\r\nexport function withTransformation<T, U>(\r\n  asyncIteratorFn: ResolverFn<T>,\r\n  transformFn: TransformFn<T, U>,\r\n): ResolverFn<U> {\r\n  return (\r\n    rootValue: T,\r\n    args: any,\r\n    context: any,\r\n    info: any,\r\n  ): IterallAsyncIterator<any> => {\r\n    const asyncIterator = asyncIteratorFn(rootValue, args, context, info);\r\n\r\n    return {\r\n      next() {\r\n        return new Promise<IteratorResult<U>>((resolve, reject) => {\r\n          asyncIterator\r\n            .next()\r\n            .then((payload) => {\r\n              if (payload.done === true) {\r\n                resolve(payload);\r\n                return;\r\n              }\r\n              Promise.resolve(transformFn(payload.value, args, context, info))\r\n                .then((newResult) => resolve({ done: false, value: newResult }))\r\n                .catch((err) => reject(err));\r\n            })\r\n            .catch((err) => {\r\n              reject(err);\r\n              return;\r\n            });\r\n        });\r\n      },\r\n      return() {\r\n        return asyncIterator.return!();\r\n      },\r\n      throw(error) {\r\n        return asyncIterator.throw!(error);\r\n      },\r\n      [$$asyncIterator]() {\r\n        return this;\r\n      },\r\n    };\r\n  };\r\n}\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { pubSubAsyncIterator } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { withFilter } from 'server/src/public/subscriptions/util/with_filter.ts';\r\nimport { withTransformation } from 'server/src/public/subscriptions/util/with_transformation.ts';\r\nimport { notificationFilterInputToNotificationListFilter } from 'server/src/public/queries/notification_summary.ts';\r\n\r\nexport const notificationSummaryUpdatedSubscriptionResolver: Resolvers['Subscription']['notificationSummaryUpdated'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n\r\n    subscribe: (_root, args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n      return withFilter(\r\n        withTransformation(\r\n          () =>\r\n            pubSubAsyncIterator(\r\n              ['notification-added', { userID }],\r\n              ['notification-deleted', { userID }],\r\n              ['notification-read-state-updated', { userID }],\r\n            ),\r\n          ({ payload, name }) => ({\r\n            filter: notificationFilterInputToNotificationListFilter(\r\n              args.filter,\r\n            ),\r\n            payload,\r\n            name,\r\n          }),\r\n        ),\r\n        async ({ filter, name, payload }) => {\r\n          if (!payload) {\r\n            return false;\r\n          }\r\n\r\n          if (name !== 'notification-added') {\r\n            return true;\r\n          }\r\n\r\n          const matchesFilter =\r\n            await context.loaders.notificationLoader.notificationMatchesFilter(\r\n              payload.notificationID,\r\n              filter,\r\n            );\r\n\r\n          if (!matchesFilter) {\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        },\r\n      )();\r\n    },\r\n  };\r\n", "import { Errors } from 'common/const/Errors.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\n\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { ClientFacingError } from 'server/src/util/ClientFacingError.ts';\r\n\r\nexport const notificationSummaryResolver: Resolvers['NotificationSummary'] = {\r\n  unreadNotificationCount: async ({ filter }, _args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n    const filterGroupID = filter?.groupID ?? filter?.organizationID;\r\n    if (filterGroupID) {\r\n      const userCanAccess =\r\n        await context.loaders.orgMembersLoader.viewerCanAccessOrgExternalID(\r\n          filterGroupID,\r\n        );\r\n\r\n      if (!userCanAccess) {\r\n        throw new ClientFacingError(Errors.USER_NOT_IN_GROUP);\r\n      }\r\n    }\r\n    return await context.loaders.notificationLoader.loadUnreadNotificationCount(\r\n      userID,\r\n      {\r\n        metadata: filter?.metadata ?? undefined,\r\n        location: filter?.location ?? undefined,\r\n        organizationID: filter?.organizationID ?? undefined,\r\n      },\r\n    );\r\n  },\r\n};\r\n", "import { isEqual } from '@cord-sdk/react/common/lib/fast-deep-equal.ts';\r\nimport { ThreadMutator } from 'server/src/entity/thread/ThreadMutator.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { isValidMetadata } from 'common/types/index.ts';\r\n\r\nexport const setThreadMetadataResolver: Resolvers['Mutation']['setThreadMetadata'] =\r\n  async (_, { threadID, metadata }, context) => {\r\n    try {\r\n      const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n      if (!thread) {\r\n        return { success: false, failureDetails: null };\r\n      }\r\n\r\n      if (!isValidMetadata(metadata)) {\r\n        return {\r\n          success: false,\r\n          failureDetails: {\r\n            code: 'INVALID_METADATA',\r\n            message: 'Metadata must be a flat JSON object',\r\n          },\r\n        };\r\n      }\r\n\r\n      if (isEqual(thread.metadata, metadata)) {\r\n        return { success: true, failureDetails: null };\r\n      }\r\n\r\n      const threadMutator = new ThreadMutator(\r\n        context.session.viewer,\r\n        context.loaders,\r\n      );\r\n      const success = await threadMutator.setThreadMetadata(threadID, metadata);\r\n\r\n      if (success) {\r\n        await publishPubSubEvent('thread-properties-updated', { threadID });\r\n      }\r\n\r\n      return { success, failureDetails: null };\r\n    } catch (e: any) {\r\n      return {\r\n        success: false,\r\n        failureDetails: {\r\n          code: e?.code ?? '',\r\n          message: e?.message,\r\n        },\r\n      };\r\n    }\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadPropertiesUpdatedResolver: Resolvers['ThreadPropertiesUpdated'] =\r\n  {\r\n    thread: async ({ args: { threadID } }, _, context) => {\r\n      const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n      if (!thread) {\r\n        throw new Error('Thread does not exist');\r\n      }\r\n      return thread;\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  PageThreadAddedTypeName,\r\n  ThreadFilterablePropertiesMatchTypeName,\r\n  ThreadFilterablePropertiesUnmatchTypeName,\r\n  PageThreadDeletedTypename,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { withFilter } from 'server/src/public/subscriptions/util/with_filter.ts';\r\nimport { withRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport { withTransformation } from 'server/src/public/subscriptions/util/with_transformation.ts';\r\nimport { updateMightBeRelevant } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport type { ThreadCollectionFilter } from 'server/src/entity/thread/ThreadLoader.ts';\r\nimport type { PubSubEvent } from 'server/src/pubsub/index.ts';\r\n\r\nexport const pageEventsWithLocationSubscriptionResolver: Resolvers['Subscription']['pageEventsWithLocation'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n    subscribe: async (_root, args, context) => {\r\n      const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const filter: ThreadCollectionFilter = {\r\n        location: args.location ?? undefined,\r\n        partialMatch: args.partialMatch ?? undefined,\r\n        metadata: args.filter?.metadata ?? undefined,\r\n        viewer: args.filter?.viewer ?? undefined,\r\n        resolved: args.resolved ?? undefined,\r\n      };\r\n      return withFilter(\r\n        withTransformation(\r\n          withRestartEvent({\r\n            events: orgIDs.flatMap(\r\n              (orgID) =>\r\n                [\r\n                  ['page-thread-added-with-location', { orgID }],\r\n                  ['thread-filterable-properties-updated', { orgID }],\r\n                  ['page-thread-deleted', { orgID }],\r\n                ] as const,\r\n            ),\r\n            userID,\r\n            subscriptionName: 'pageEventsWithLocationSubscriptionResolver',\r\n          }),\r\n          async ({ payload, name }) => {\r\n            if (name !== 'thread-filterable-properties-updated') {\r\n              return { payload, name };\r\n            }\r\n\r\n            return {\r\n              payload,\r\n              name,\r\n              matchedFilters:\r\n                await context.loaders.threadLoader.threadMatchesFilter(\r\n                  payload.threadID,\r\n                  filter,\r\n                ),\r\n            };\r\n          },\r\n        ),\r\n        async ({ name, payload }) => {\r\n          if (!payload) {\r\n            return false;\r\n          }\r\n\r\n          if (name === 'thread-filterable-properties-updated') {\r\n            return updateMightBeRelevant(\r\n              context.logger,\r\n              filter,\r\n              payload as PubSubEvent<'thread-filterable-properties-updated'>['payload'],\r\n              userID,\r\n            );\r\n          }\r\n\r\n          if (name === 'page-thread-deleted') {\r\n            return true;\r\n          }\r\n\r\n          return await context.loaders.threadLoader.threadMatchesFilter(\r\n            payload.threadID,\r\n            filter,\r\n          );\r\n        },\r\n      )();\r\n    },\r\n  };\r\n\r\nexport const pageEventTypeResolver: Resolvers['PageEvent'] = {\r\n  __resolveType: (event) => {\r\n    switch (event.name) {\r\n      case 'page-thread-added-with-location':\r\n        return PageThreadAddedTypeName;\r\n      case 'page-thread-deleted':\r\n        return PageThreadDeletedTypename;\r\n      case 'thread-filterable-properties-updated':\r\n        // If you want to use this, make sure you transform the data to get\r\n        // this key. See example in page_events_with_location\r\n        if ('matchedFilters' in event && event['matchedFilters']) {\r\n          return ThreadFilterablePropertiesMatchTypeName;\r\n        } else {\r\n          return ThreadFilterablePropertiesUnmatchTypeName;\r\n        }\r\n    }\r\n  },\r\n};\r\n", "import { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageByExternalIDQueryResolver: Resolvers['Query']['messageByExternalID'] =\r\n  async (_, args, context) => {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n    const { id } = args;\r\n\r\n    const message = await context.loaders.messageLoader.loadMessageByExternalID(\r\n      id,\r\n      platformApplicationID,\r\n    );\r\n\r\n    if (message) {\r\n      await context.loaders.threadLoader.assertViewerHasThread(\r\n        message.threadID,\r\n      );\r\n    }\r\n\r\n    return message;\r\n  };\r\n", "import { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const logDeprecationMutationResolver: Resolvers['Mutation']['logDeprecation'] =\r\n  async (_, args, context) => {\r\n    const key = args.key;\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n    deprecated(`from-client:${key}`, platformApplicationID);\r\n    return true;\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const notificationDeletedResolver: Resolvers['NotificationDeleted'] = {\r\n  id: ({ payload: { notificationID } }) => notificationID,\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport { buildNotification } from 'server/src/notifications/fetch.ts';\r\nimport { whereAggregatedNotificationEntity } from 'server/src/public/mutations/notifications/utils.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const notificationByExternalIDResolver: Resolvers['Query']['notificationByExternalID'] =\r\n  async (_, args, context) => {\r\n    const userID = assertViewerHasUser(context.session.viewer);\r\n    const externalID = args.externalID;\r\n\r\n    const notifEntity = await NotificationEntity.findOne({\r\n      where: {\r\n        externalID,\r\n        recipientID: userID,\r\n      },\r\n    });\r\n\r\n    if (!notifEntity) {\r\n      return null;\r\n    }\r\n\r\n    // The ID they request might be part of an aggregation, so fetch all of the\r\n    // potential aggregates. In case the ID is an aggregate in the middle of\r\n    // that aggregation, make sure to force the external ID of the result to\r\n    // what was originally asked for, otherwise the result is very confusing.\r\n    const aggregateEntities = await NotificationEntity.findAll({\r\n      where: whereAggregatedNotificationEntity(notifEntity),\r\n    });\r\n    const gqlNotif = await buildNotification(context, aggregateEntities);\r\n    return gqlNotif ? { ...gqlNotif, externalID } : null;\r\n  };\r\n", "import { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nexport const setSubscribedByExternalIDMutationResolver: Resolvers['Mutation']['setSubscribedByExternalID'] =\r\n  sendErrors(async (_, args, originalContext) => {\r\n    const { externalID, subscribed } = args;\r\n\r\n    const thread =\r\n      await originalContext.loaders.threadLoader.loadByExternalID(externalID);\r\n\r\n    if (!thread) {\r\n      throw new ApiCallerError('thread_not_found');\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n\r\n    const originalSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const threadParticipantMutator = new ThreadParticipantMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n\r\n    const result = await threadParticipantMutator.setViewerSubscribed(\r\n      thread,\r\n      subscribed,\r\n    );\r\n\r\n    const newSubscribers = new Set(\r\n      await context.loaders.threadParticipantLoader.loadSubscriberIDsForThreadNoOrgCheck(\r\n        thread.id,\r\n      ),\r\n    );\r\n\r\n    const removed = [...originalSubscribers].filter(\r\n      (s) => !newSubscribers.has(s),\r\n    );\r\n    const added = [...newSubscribers].filter(\r\n      (s) => !originalSubscribers.has(s),\r\n    );\r\n    if (removed.length > 0 || added.length > 0) {\r\n      backgroundPromise(\r\n        publishPubSubEvent(\r\n          'thread-filterable-properties-updated',\r\n          { orgID: thread.orgID },\r\n          { threadID: thread.id, changes: { subscribers: { added, removed } } },\r\n        ),\r\n      );\r\n    }\r\n\r\n    return { success: result, failureDetails: null };\r\n  });\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { updateThread } from 'server/src/public/routes/platform/threads/UpdateThreadHandler.ts';\r\nimport { assertViewerHasPlatformUser } from 'server/src/auth/index.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport const updateThreadByExternalIDResolver: Resolvers['Mutation']['updateThreadByExternalID'] =\r\n  sendErrors(\r\n    async (\r\n      _,\r\n      {\r\n        externalThreadID,\r\n        url,\r\n        name,\r\n        metadata,\r\n        resolved,\r\n        extraClassnames,\r\n        typing,\r\n      },\r\n      context,\r\n    ) => {\r\n      const { platformApplicationID, externalUserID } =\r\n        assertViewerHasPlatformUser(context.session.viewer);\r\n\r\n      const thread =\r\n        await context.loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n          externalThreadID,\r\n        );\r\n      if (!thread) {\r\n        throw new ApiCallerError('thread_not_found');\r\n      }\r\n\r\n      await updateThread({\r\n        platformApplicationID,\r\n        threadID: externalThreadID,\r\n        name: name ?? undefined,\r\n        url: url ?? undefined,\r\n        metadata: metadata ?? undefined,\r\n        resolved: resolved ?? undefined,\r\n        userID: externalUserID,\r\n        extraClassnames,\r\n        typing: typing ? [externalUserID] : undefined,\r\n      });\r\n\r\n      return { success: true, failureDetails: null };\r\n    },\r\n  );\r\n", "import { v4 as uuid } from 'uuid';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasPlatformUser } from 'server/src/auth/index.ts';\r\nimport { createThreadMessage } from 'server/src/public/routes/platform/messages/CreateThreadMessageHandler.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nexport const createMessageByExternalIDResolver: Resolvers['Mutation']['createMessageByExternalID'] =\r\n  sendErrors(async (_, args, context) => {\r\n    const { platformApplicationID, externalUserID } =\r\n      assertViewerHasPlatformUser(context.session.viewer);\r\n\r\n    const { externalOrgID: viewerExternalOrgID } = context.session.viewer;\r\n\r\n    const thread =\r\n      await context.loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n        args.input.externalThreadID,\r\n      );\r\n    let threadOrg;\r\n    if (thread) {\r\n      threadOrg = await context.loaders.orgLoader.loadOrg(thread?.orgID);\r\n    }\r\n\r\n    const externalOrgID = threadOrg?.externalID ?? viewerExternalOrgID;\r\n\r\n    if (!externalOrgID) {\r\n      throw new ApiCallerError('group_not_found', {\r\n        message: 'Must specify a groupID if creating a new thread',\r\n      });\r\n    }\r\n\r\n    if (args.input.type !== undefined) {\r\n      deprecated(\r\n        'graphql: createMessageByExternalID type',\r\n        platformApplicationID,\r\n      );\r\n      if (args.input.type && args.input.type !== 'user_message') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: 'Only user_messages can be sent with the JS API',\r\n        });\r\n      }\r\n    }\r\n\r\n    if (!args.input.messageID) {\r\n      deprecated(\r\n        'graphql: createMessageByExternalID missing messageID',\r\n        platformApplicationID,\r\n      );\r\n    }\r\n\r\n    await createThreadMessage({\r\n      platformApplicationID,\r\n      threadID: args.input.externalThreadID,\r\n      id: args.input.externalMessageID ?? undefined,\r\n      internalMessageID: args.input.messageID ?? uuid(),\r\n      authorID: externalUserID,\r\n      content: args.input.content,\r\n      url: args.input.url ?? undefined,\r\n      addReactions: args.input.addReactions?.map((reaction) => ({\r\n        reaction,\r\n        timestamp: new Date(),\r\n        userID: externalUserID,\r\n      })),\r\n      addAttachments: args.input.addFileAttachments?.map((fileID) => ({\r\n        type: 'file',\r\n        id: fileID,\r\n      })),\r\n      iconURL: args.input.iconURL ?? undefined,\r\n      translationKey: args.input.translationKey ?? undefined,\r\n      extraClassnames: args.input.extraClassnames ?? '',\r\n      createThread: args.input.createThread\r\n        ? {\r\n            organizationID: externalOrgID,\r\n            groupID: externalOrgID,\r\n            location: args.input.createThread.location,\r\n            url: args.input.createThread.url,\r\n            name: args.input.createThread.name,\r\n            metadata: args.input.createThread.metadata ?? undefined,\r\n            extraClassnames:\r\n              args.input.createThread.extraClassnames ?? undefined,\r\n            addSubscribers: args.input.createThread.addSubscribers ?? undefined,\r\n          }\r\n        : undefined,\r\n      metadata: args.input.metadata ?? undefined,\r\n      subscribeToThread: args.input.subscribeToThread ?? undefined,\r\n      screenshotAttachment: args.input.screenshotAttachment,\r\n    });\r\n\r\n    return { success: true, failureDetails: null };\r\n  });\r\n", "import type {\r\n  Resolvers,\r\n  UpdateMessageByExternalIDInput,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasPlatformUser } from 'server/src/auth/index.ts';\r\nimport { updateThreadMessage } from 'server/src/public/routes/platform/messages/UpdateThreadMessageHandler.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\nimport type { RemoveAttachment } from '@cord-sdk/types';\r\nimport { deprecated } from 'server/src/logging/deprecate.ts';\r\n\r\nexport const updateMessageByExternalIDResolver: Resolvers['Mutation']['updateMessageByExternalID'] =\r\n  sendErrors(async (_, args, context) => {\r\n    const { platformApplicationID, userID, externalUserID } =\r\n      assertViewerHasPlatformUser(context.session.viewer);\r\n\r\n    const message = await context.loaders.messageLoader.loadMessageByExternalID(\r\n      args.input.externalMessageID,\r\n      platformApplicationID,\r\n    );\r\n\r\n    if (!message) {\r\n      throw new ApiCallerError('message_not_found');\r\n    }\r\n\r\n    const thread = args.input.externalThreadID\r\n      ? await context.loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n          args.input.externalThreadID,\r\n        )\r\n      : await context.loaders.threadLoader.loadThread(message.threadID);\r\n\r\n    if (!thread) {\r\n      throw new ApiCallerError('thread_not_found');\r\n    }\r\n\r\n    if (thread.id !== message.threadID) {\r\n      throw new ApiCallerError('message_not_found');\r\n    }\r\n\r\n    // Only the author of a message should be able to update their message from the\r\n    // client side - UNLESS the update is only to add/remove reactions\r\n    if (!isReactionsOnlyUpdate(args.input) && message.sourceID !== userID) {\r\n      throw new ApiCallerError('message_edit_forbidden');\r\n    }\r\n\r\n    if (args.input.type !== undefined) {\r\n      deprecated(\r\n        'graphql: updateMessageByExternalID type',\r\n        platformApplicationID,\r\n      );\r\n      if (args.input.type && args.input.type !== 'user_message') {\r\n        throw new ApiCallerError('invalid_field', {\r\n          message: 'Only user_messages can be sent with the JS API',\r\n        });\r\n      }\r\n    }\r\n\r\n    const removeAttachments: RemoveAttachment[] = [\r\n      ...(args.input.removeFileAttachments?.map((fileID) => ({\r\n        type: 'file' as RemoveAttachment['type'],\r\n        id: fileID,\r\n      })) ?? []),\r\n      ...(args.input.removePreviewLinks?.map((previewID) => ({\r\n        type: 'link_preview' as RemoveAttachment['type'],\r\n        id: previewID,\r\n      })) ?? []),\r\n    ];\r\n\r\n    await updateThreadMessage({\r\n      context,\r\n      thread,\r\n      message,\r\n      content: args.input.content ?? undefined,\r\n      url: args.input.url ?? undefined,\r\n      iconURL: args.input.iconURL ?? undefined,\r\n      translationKey: args.input.translationKey ?? undefined,\r\n      metadata: args.input.metadata ?? undefined,\r\n      extraClassnames: args.input.extraClassnames ?? undefined,\r\n      deleted: args.input.deleted ?? undefined,\r\n      addReactions: args.input.addReactions?.map((reaction) => ({\r\n        reaction,\r\n        userID: externalUserID,\r\n      })),\r\n      removeReactions: args.input.removeReactions?.map((reaction) => ({\r\n        reaction,\r\n        userID: externalUserID,\r\n      })),\r\n      addAttachments: args.input.addFileAttachments?.map((fileID) => ({\r\n        type: 'file',\r\n        id: fileID,\r\n      })),\r\n      removeAttachments,\r\n      skipLinkPreviews: args.input.skipLinkPreviews ?? undefined,\r\n    });\r\n\r\n    return { success: true, failureDetails: null };\r\n  });\r\n\r\nfunction isReactionsOnlyUpdate(input: UpdateMessageByExternalIDInput) {\r\n  // Normally, users can only edit their own messages from the client APIs.  One\r\n  // exception is if a user is adding/removing reactions.  In that case, they should\r\n  // only be allowed to make these changes, and not let any other updates slip\r\n  // through at the same time.\r\n  const allowedFields = [\r\n    'externalMessageID',\r\n    'externalThreadID',\r\n    'addReactions',\r\n    'removeReactions',\r\n  ];\r\n\r\n  for (const key in input) {\r\n    if (!allowedFields.includes(key)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport type {\r\n  Resolvers,\r\n  UserLiveQueryData,\r\n} from 'server/src/schema/resolverTypes.ts';\r\nimport { UserEntity } from 'server/src/entity/user/UserEntity.ts';\r\nimport { liveQueryWithRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport { withThrottle } from 'server/src/public/subscriptions/util/with_throttle.ts';\r\n\r\nconst THROTTLE_MS = 2000;\r\n\r\nexport const userLiveQueryResolver: Resolvers['Subscription']['userLiveQuery'] =\r\n  {\r\n    resolve: (data) => data,\r\n    subscribe: async (_root, args, context) => {\r\n      // Don't assert we have this, because we almost always do except for\r\n      // admin.cord.com, where we log in as Slack users and this is null. But in\r\n      // that case the user updates we're looking for are *also* Slack users,\r\n      // who *also* have a null platform app ID, so it's fine to pass through to\r\n      // the query.\r\n      const platformApplicationID =\r\n        context.session.viewer.platformApplicationID ?? null;\r\n\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n      const iterable = await liveQueryWithRestartEvent({\r\n        events: orgIDs.map((orgID) => ['org-user-identity', { orgID }]),\r\n        initialData: async (): Promise<UserLiveQueryData> => {\r\n          return {\r\n            users: args.since\r\n              ? // Find every active user that's been updated since the given\r\n                // timestamp\r\n                await context.sequelize.query<UserEntity>(\r\n                  `\r\n                  SELECT users.* FROM users, org_members\r\n                  WHERE users.\"updatedTimestamp\" >= $1\r\n                    AND users.state != 'deleted'\r\n                    AND users.id = org_members.\"userID\"\r\n                    AND users.\"platformApplicationID\" = $2\r\n                    AND org_members.\"orgID\" = ANY($3)\r\n                    LIMIT 1000;\r\n                `,\r\n                  {\r\n                    bind: [new Date(args.since), platformApplicationID, orgIDs],\r\n                    type: QueryTypes.SELECT,\r\n                    model: UserEntity,\r\n                  },\r\n                )\r\n              : [],\r\n            upto: new Date().getTime(),\r\n          };\r\n        },\r\n        eventData: async (event): Promise<UserLiveQueryData> => {\r\n          const user = await context.loaders.userLoader.loadUserInAnyViewerOrg(\r\n            event.payload.userID,\r\n          );\r\n          return {\r\n            users: user ? [user] : [],\r\n            upto: new Date().getTime(),\r\n          };\r\n        },\r\n        userID,\r\n        subscriptionName: 'userLiveQueryResolver',\r\n      });\r\n\r\n      return withThrottle(\r\n        () => iterable[Symbol.asyncIterator](),\r\n        THROTTLE_MS,\r\n        // If this is an update about a single user, throttle it, otherwise let\r\n        // it through (by returning a unique symbol) since we don't ever want to\r\n        // skip an empty or multi-user update\r\n        (data) => (data.users.length === 1 ? data.users[0].id : Symbol()),\r\n      )();\r\n    },\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport { getRelevantContext } from 'server/src/RequestContext.ts';\r\nimport { assertViewerHasPlatformIdentity } from 'server/src/auth/index.ts';\r\n\r\nexport const markThreadUnseenFromExternalMessageIDResolver: Resolvers['Mutation']['markThreadUnseenFromExternalMessageID'] =\r\n  async (_, args, originalContext) => {\r\n    // Mark as unseen from AND INCLUDING the specified message ID\r\n    // or mark the whole thread as seen if externalMessageID is undefined\r\n    const { externalThreadID, externalMessageID } = args;\r\n\r\n    const thread =\r\n      await originalContext.loaders.threadLoader.loadByExternalIDStrictOrgCheck(\r\n        externalThreadID,\r\n      );\r\n\r\n    if (!thread) {\r\n      return {\r\n        success: false,\r\n        failureDetails: { code: '404', message: 'Thread not found' },\r\n      };\r\n    }\r\n\r\n    const context = await getRelevantContext(originalContext, thread.orgID);\r\n    const { platformApplicationID } = assertViewerHasPlatformIdentity(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const threadParticipantMutator = new ThreadParticipantMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n\r\n    if (!externalMessageID) {\r\n      // Mark the whole thread as seen\r\n      await threadParticipantMutator.markThreadSeen({\r\n        threadID: thread.id,\r\n      });\r\n    } else {\r\n      // Mark as unseen from the specified message onwards\r\n      const message =\r\n        await context.loaders.messageLoader.loadMessageByExternalID(\r\n          externalMessageID,\r\n          platformApplicationID,\r\n        );\r\n\r\n      if (!message) {\r\n        return {\r\n          success: false,\r\n          failureDetails: { code: '400', message: 'Message not found' },\r\n        };\r\n      }\r\n\r\n      await threadParticipantMutator.markThreadUnseenFromMessage({\r\n        threadID: thread.id,\r\n        messageID: message.id,\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { Location } from 'common/types/index.ts';\r\nimport { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport type { SearchSortByOptions, SortDirection } from '@cord-sdk/types';\r\n\r\nexport const messageContentSearchResolver: Resolvers['Query']['messageContentSearch'] =\r\n  async (_, args, context) => {\r\n    const {\r\n      textToMatch: searchText,\r\n      authorExternalID,\r\n      orgExternalID,\r\n      locationOptions,\r\n      timestampRange,\r\n      metadata,\r\n      limit,\r\n      sortBy,\r\n      sortDirection,\r\n    } = args;\r\n\r\n    const appID = assertViewerHasPlatformApplicationID(context.session.viewer);\r\n\r\n    if (\r\n      !searchText &&\r\n      !authorExternalID &&\r\n      !orgExternalID &&\r\n      !locationOptions &&\r\n      !timestampRange &&\r\n      !metadata\r\n    ) {\r\n      return [];\r\n    }\r\n\r\n    const extraConditions = [];\r\n    const extraJoins = [];\r\n    const bindVariables: (string | string[] | Location | Date)[] = [appID];\r\n\r\n    let subquery = '';\r\n    const allOrgsForUser =\r\n      await context.loaders.orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    if (orgExternalID) {\r\n      const orgData = await context.loaders.orgLoader.loadPlatformOrg(\r\n        appID,\r\n        orgExternalID,\r\n      );\r\n\r\n      if (!orgData) {\r\n        context.logger.warn('Unable to find specified org external ID', {\r\n          orgExternalID,\r\n        });\r\n        // return early if no org match found\r\n        return [];\r\n      }\r\n\r\n      const isOrgMember = allOrgsForUser.includes(orgData.id);\r\n      if (!isOrgMember) {\r\n        context.logger.warn('User is not a member of org', {\r\n          orgExternalID,\r\n        });\r\n        // return early if user is not in org\r\n        return [];\r\n      } else {\r\n        bindVariables.push(orgData.id);\r\n        extraConditions.push(`m.\"orgID\" = $${bindVariables.length}`);\r\n      }\r\n    } else {\r\n      bindVariables.push(allOrgsForUser);\r\n      // if no orgExternalID search option specified - search across all the users' orgs\r\n      extraConditions.push(`m.\"orgID\" = ANY($${bindVariables.length})`);\r\n    }\r\n\r\n    if (authorExternalID) {\r\n      const internalUserID = (\r\n        await context.loaders.userLoader.loadUserByExternalID(\r\n          appID,\r\n          authorExternalID,\r\n        )\r\n      )?.id;\r\n\r\n      if (!internalUserID) {\r\n        context.logger.warn('Unable to find specified author external ID', {\r\n          authorExternalID,\r\n        });\r\n        // return early if no author match found\r\n        return [];\r\n      } else {\r\n        bindVariables.push(internalUserID);\r\n        extraConditions.push(`\"sourceID\" = $${bindVariables.length}`);\r\n      }\r\n    }\r\n    if (locationOptions) {\r\n      extraJoins.push(`INNER JOIN threads t\r\n      ON (t.id = m.\"threadID\")\r\n      INNER JOIN pages p\r\n      ON (p.\"orgID\" = t.\"orgID\" AND p.\"contextHash\" = t.\"pageContextHash\")`);\r\n      bindVariables.push(locationOptions.location);\r\n      extraConditions.push(\r\n        `p.\"contextData\" ${locationOptions.partialMatch ? '@>' : '='} $${\r\n          bindVariables.length\r\n        }::jsonb`,\r\n      );\r\n    }\r\n\r\n    if (metadata) {\r\n      bindVariables.push(metadata);\r\n      extraConditions.push(`m.metadata @> $${bindVariables.length}::jsonb`);\r\n    }\r\n\r\n    if (timestampRange) {\r\n      if (timestampRange.from && !isNaN(timestampRange.from.getTime())) {\r\n        bindVariables.push(timestampRange.from);\r\n        extraConditions.push(\r\n          `m.timestamp >= $${bindVariables.length}::timestamp`,\r\n        );\r\n      }\r\n      if (timestampRange.to && !isNaN(timestampRange.to.getTime())) {\r\n        bindVariables.push(timestampRange.to);\r\n        extraConditions.push(\r\n          `m.timestamp <= $${bindVariables.length}::timestamp`,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (searchText) {\r\n      bindVariables.push(searchText);\r\n      subquery = `WITH search AS (\r\n        SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' order by positions)) AS query\r\n        FROM unnest(to_tsvector('english', $${bindVariables.length}))\r\n    )`;\r\n      extraConditions.push(`\"contentTsVector\" @@ search.query`);\r\n    }\r\n\r\n    const extraCondition =\r\n      extraConditions.length > 0 ? `AND ${extraConditions.join(' AND ')}` : '';\r\n    const extraJoin = extraJoins.join(' ');\r\n    // Make sure the limit isn't above 1000 but if not provided default to 50\r\n    const limitCondition = `LIMIT ${\r\n      isDefined(limit) && limit >= 0 ? Math.min(limit, 1000) : 50\r\n    }`;\r\n\r\n    // For this query we'll create a CTE we can use to get the search results\r\n    // we first convert the search term to a lexeme using to_tsvector then\r\n    // create a regex  string from the individual tokens by\r\n    // appending :* to allow us to perform a prefix search\r\n    // and using the & operator to join the words to allow us to do a phrase search\r\n\r\n    // the @@ operator is then used to compare 'contentTsVector' data with an object\r\n    // generated by the to_tsquery function.\r\n    // NOTE: we limit the results from this query for now until we have a think on pagination\r\n\r\n    // eg: ('good bad') becomes good:* & bad:* which we can use directly\r\n    // with to_tsquery to get fuzzy matching.\r\n\r\n    // To make sure our search results are always relevant, we will always order by rank first\r\n    // and then do an outer ordering by timestamp or any other sortBy value.\r\n    // That way, we always have relevant search results which are potentially ordered if\r\n    // requested by the user, rather than returning correctly ordered messages but with least relevance.\r\n    const { orderCondition, additionalOrderCondition } =\r\n      getSearchSortingConditions({ sortBy, sortDirection, searchText });\r\n\r\n    // we will only order by relevance if there's a searchText provided, hence the 'maybe'\r\n    const queryToMaybeGetMostRelevantMessages = `SELECT m.*\r\n    ${searchText ? ', ts_rank(m.\"contentTsVector\", search.query) AS rank' : ''}\r\n    FROM messages m\r\n    ${extraJoin}\r\n    ${searchText ? ', search' : ''}\r\n    WHERE m.\"platformApplicationID\" = $1\r\n    AND m.\"deletedTimestamp\" IS NULL\r\n    ${extraCondition}\r\n    ${orderCondition}\r\n    ${limitCondition}`;\r\n\r\n    // Add the addition ordering on top of the messages from\r\n    // intial query to get messages sorted by most relevant\r\n    const messages = await context.sequelize.query<MessageEntity>(\r\n      `\r\n      ${subquery}\r\n      SELECT * FROM (\r\n        ${queryToMaybeGetMostRelevantMessages}\r\n      ) AS messages\r\n      ${additionalOrderCondition}\r\n    `,\r\n      {\r\n        bind: bindVariables,\r\n        type: QueryTypes.SELECT,\r\n        model: MessageEntity,\r\n      },\r\n    );\r\n\r\n    return messages;\r\n  };\r\n\r\n/*\r\n  Method to use in the message_content_search query to get the correct sql ORDER query\r\n\r\n  note:\r\n  We'll always be sorting the results by search ranking regardless of the sortBy\r\n  param passed down by the user - that way, we always have the most relevant\r\n  search results on top before adding our limit or timestamp/other sorting.\r\n  Unless, we there is no searchText which means there's no relevance so we'll\r\n  order by most recent messages first.\r\n\r\n  This function will take the sort parameters and return the correct \r\n  ORDER to use for the internal and extranal queries.\r\n\r\n  returns: \r\n  {\r\n    orderCondition - the internal query's order (where the messages alias is 'm')\r\n    additionalOrderCondition - external query's order\r\n  }\r\n*/\r\nfunction getSearchSortingConditions({\r\n  sortBy,\r\n  sortDirection,\r\n  searchText,\r\n}: {\r\n  sortBy?: SearchSortByOptions | null;\r\n  sortDirection?: SortDirection | null;\r\n  searchText?: string | null;\r\n}): {\r\n  orderCondition: string;\r\n  additionalOrderCondition: string;\r\n} {\r\n  const sortDirectionValue = sortDirection === 'ascending' ? 'ASC' : 'DESC';\r\n\r\n  // only sort once, by timestamp if there's no search term to provide relevance to.\r\n  const sortByValue = sortBy === 'created_timestamp' ? 'timestamp' : 'rank';\r\n  const additionalOrderCondition = searchText\r\n    ? `ORDER by ${sortByValue} ${sortDirectionValue}`\r\n    : '';\r\n\r\n  return {\r\n    orderCondition: searchText\r\n      ? `ORDER BY rank DESC`\r\n      : `ORDER BY m.timestamp ${sortDirectionValue}`,\r\n    additionalOrderCondition,\r\n  };\r\n}\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadsAtLocationQueryResolver: Resolvers['Query']['threadsAtLocation'] =\r\n  async (\r\n    _,\r\n    { location, filter, resolved, partialMatch, sort, limit, after },\r\n    context,\r\n  ) =>\r\n    await context.loaders.threadLoader.loadThreadsForPage({\r\n      filter: {\r\n        location: location ?? undefined,\r\n        partialMatch: partialMatch ?? undefined,\r\n        resolved: resolved ?? undefined,\r\n        metadata: filter?.metadata ?? undefined,\r\n        viewer: filter?.viewer ?? undefined,\r\n      },\r\n      sort,\r\n      limit,\r\n      after,\r\n    });\r\n", "import type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type { MessageScreenshotAttachmentData } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const messageScreenshotAttachmentResolver: Resolvers['MessageScreenshotAttachment'] =\r\n  {\r\n    screenshot: async (messageAttachment, _, context) =>\r\n      await loadScreenshotById(\r\n        context,\r\n        (messageAttachment.data as MessageScreenshotAttachmentData)\r\n          .screenshotFileID,\r\n      ),\r\n    blurredScreenshot: async (messageAttachment, _, context) =>\r\n      await loadScreenshotById(\r\n        context,\r\n        (messageAttachment.data as MessageScreenshotAttachmentData)\r\n          .blurredScreenshotFileID,\r\n      ),\r\n  };\r\n\r\nasync function loadScreenshotById(\r\n  context: RequestContext,\r\n  screenshotId: string | null | undefined,\r\n) {\r\n  if (!screenshotId) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    return await context.loaders.fileLoader.loadFile(screenshotId);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadCreatedResolver: Resolvers['ThreadCreated'] = {\r\n  thread: async ({ payload: { threadID } }, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n    if (!thread) {\r\n      throw new Error('Thread does not exist');\r\n    }\r\n    return thread;\r\n  },\r\n};\r\n", "import { MessageLinkPreviewMutator } from 'server/src/entity/message_link_preview/MessageLinkPreviewMutator.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const hideLinkPreviewResolver: Resolvers['Mutation']['hideLinkPreview'] =\r\n  async (_, args, context) => {\r\n    const { linkPreviewID } = args;\r\n\r\n    const messageLinkPreviewMutator = new MessageLinkPreviewMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    );\r\n    const result = await messageLinkPreviewMutator.hide(linkPreviewID);\r\n\r\n    return {\r\n      success: result,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import { createThread } from 'server/src/public/routes/platform/threads/CreateThreadHandler.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport { sendErrors } from 'server/src/public/mutations/util/sendErrors.ts';\r\nimport { serializableTransactionWithRetries } from 'server/src/entity/sequelize.ts';\r\nimport { publishNewThreadEvents } from 'server/src/entity/thread/new_thread_tasks/publishNewThreadEvents.ts';\r\n\r\nexport const createThreadResolver: Resolvers['Mutation']['createThread'] =\r\n  sendErrors(async (_, args, context) => {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n\r\n    // This is likely to be thrown when using an orgless user token, and\r\n    // no groupID has been specified in the thread js api createThread method.\r\n    if (!context.session.viewer.orgID) {\r\n      return {\r\n        success: false,\r\n        failureDetails: {\r\n          code: '400',\r\n          message: 'Must specify a groupID.',\r\n        },\r\n      };\r\n    }\r\n    // We use SERIALIZABLE here because it's needed to ensure the threads and\r\n    // thread_ids tables remain consistent, see thread_by_external_id.ts\r\n    await serializableTransactionWithRetries(async (transaction) => {\r\n      const { thread } = await createThread({\r\n        id: args.externalThreadID ?? undefined,\r\n        url: args.input.url,\r\n        location: args.input.location,\r\n        name: args.input.name,\r\n        metadata: args.input.metadata ?? undefined,\r\n        extraClassnames: args.input.extraClassnames,\r\n        transaction,\r\n        viewer: context.session.viewer,\r\n        platformApplicationID,\r\n        addSubscribers: args.input.addSubscribers ?? undefined,\r\n      });\r\n\r\n      await publishNewThreadEvents(args.input.location, thread, transaction);\r\n    });\r\n    return { success: true, failureDetails: null };\r\n  });\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageThreadReplyAddedResolver: Resolvers['PageThreadReplyAdded'] = {\r\n  thread: async ({ payload: { threadID } }, _, context) => {\r\n    const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n    if (!thread) {\r\n      throw new Error('Thread does not exist.');\r\n    }\r\n\r\n    return thread;\r\n  },\r\n\r\n  message: async ({ payload: { messageID } }, _, context) => {\r\n    const message = await context.loaders.messageLoader.loadMessage(messageID);\r\n\r\n    if (!message) {\r\n      throw new Error('Message does not exist.');\r\n    }\r\n\r\n    return message;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  assertViewerHasPlatformUser,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { NotificationEntity } from 'server/src/entity/notification/NotificationEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { NotificationMutator } from 'server/src/entity/notification/NotificationMutator.ts';\r\nimport { ApiCallerError } from 'server/src/public/routes/platform/util.ts';\r\n\r\nexport const clearNotificationsForMessageMutation: Resolvers['Mutation']['clearNotificationsForMessage'] =\r\n  async (_, args, context) => {\r\n    const { messageID, byExternalID } = args;\r\n\r\n    const internalMessageID = await getInternalMessageID(\r\n      messageID,\r\n      byExternalID ?? false,\r\n      context,\r\n    );\r\n\r\n    await markAttachedNotificationsAsSeen(internalMessageID, context);\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n\r\nasync function getInternalMessageID(\r\n  messageID: string,\r\n  byExternalID: boolean,\r\n  context: RequestContext,\r\n): Promise<string> {\r\n  if (!byExternalID) {\r\n    return messageID;\r\n  }\r\n\r\n  const { platformApplicationID } = assertViewerHasPlatformUser(\r\n    context.session.viewer,\r\n  );\r\n\r\n  const message = await context.loaders.messageLoader.loadMessageByExternalID(\r\n    messageID,\r\n    platformApplicationID,\r\n  );\r\n\r\n  if (!message) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  return message.id;\r\n}\r\n\r\nasync function markAttachedNotificationsAsSeen(\r\n  messageID: string,\r\n  context: RequestContext,\r\n): Promise<void> {\r\n  const { viewer } = context.session;\r\n\r\n  const userID = assertViewerHasUser(viewer);\r\n\r\n  const notifs = await NotificationEntity.findAll({\r\n    where: {\r\n      messageID,\r\n      recipientID: userID,\r\n      readStatus: 'unread',\r\n    },\r\n  });\r\n\r\n  const notificationMutator = new NotificationMutator(viewer);\r\n\r\n  await Promise.all(\r\n    notifs.map((notif) => notificationMutator.markAsRead(notif)),\r\n  );\r\n}\r\n", "import {\r\n  assertViewerHasPlatformApplicationID,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport {\r\n  OrgMemberAddedTypeName,\r\n  OrgMemberRemovedTypeName,\r\n} from 'common/types/index.ts';\r\nimport { withRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\n\r\nexport const orgMembersUpdatedSubscriptionResolver: Resolvers['Subscription']['orgMembersByExternalIDUpdated'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n    subscribe: async (_root, { externalOrgID }, context) => {\r\n      const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n        context.session.viewer,\r\n      );\r\n\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n      const org = await context.loaders.orgLoader.loadPlatformOrg(\r\n        platformApplicationID,\r\n        externalOrgID,\r\n      );\r\n\r\n      if (!org) {\r\n        throw new Error('Org not found');\r\n      }\r\n\r\n      return withRestartEvent({\r\n        // this must map to the OrgMemberEvent type definition in mapping.ts\r\n        events: [\r\n          ['org-member-added', { orgID: org.id }],\r\n          ['org-member-removed', { orgID: org.id }],\r\n        ],\r\n        userID,\r\n        subscriptionName: 'orgMembersUpdatedSubscriptionResolver',\r\n      })();\r\n    },\r\n  };\r\n\r\nexport const orgMemberEventTypeResolver: Resolvers['OrgMemberEvent'] = {\r\n  __resolveType: (event) => {\r\n    switch (event.name) {\r\n      case 'org-member-added':\r\n        return OrgMemberAddedTypeName;\r\n      case 'org-member-removed':\r\n        return OrgMemberRemovedTypeName;\r\n    }\r\n  },\r\n};\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const orgMemberAddedResolver: Resolvers['OrgMemberAdded'] = {\r\n  user: async ({ payload: { userID } }, _, context) => {\r\n    assertViewerHasUser(context.session.viewer);\r\n\r\n    const user = await context.loaders.userLoader.loadUser(userID);\r\n\r\n    if (!user) {\r\n      throw new Error(`User ${userID} not found`);\r\n    }\r\n\r\n    return user;\r\n  },\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const orgMemberRemovedResolver: Resolvers['OrgMemberRemoved'] = {\r\n  externalUserID: async ({ payload: { userID } }, _, context) => {\r\n    const user = await context.loaders.userLoader.loadUser(userID);\r\n\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    return user.externalID;\r\n  },\r\n};\r\n", "import { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const orgMembersByExtIDPaginatedResolver: Resolvers['Query']['orgMembersByExternalIDPaginated'] =\r\n  async (_, { externalOrgID, after, limit }, context) => {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n\r\n    const viewersOrgs =\r\n      await context.loaders.orgMembersLoader.loadAllImmediateOrgIDsForUser();\r\n\r\n    const org = await context.loaders.orgLoader.loadPlatformOrg(\r\n      platformApplicationID,\r\n      externalOrgID,\r\n    );\r\n\r\n    if (!org) {\r\n      context.logger.error(`Org not found for ${externalOrgID}`);\r\n      return { users: [], hasMore: false, token: undefined };\r\n    }\r\n\r\n    if (!viewersOrgs.includes(org.id)) {\r\n      context.logger.error(`Viewer cannot access org`);\r\n      return { users: [], hasMore: false, token: undefined };\r\n    }\r\n\r\n    return await context.loaders.userLoader.loadAllUsersInOrgPaginatedByUserID(\r\n      org.id,\r\n      after ?? undefined,\r\n      limit ?? undefined,\r\n    );\r\n  };\r\n", "import { assertViewerHasPlatformApplicationID } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const organizationByExternalIDQueryResolver: Resolvers['Query']['organizationByExternalID'] =\r\n  async (_, args, context) => {\r\n    const platformApplicationID = assertViewerHasPlatformApplicationID(\r\n      context.session.viewer,\r\n    );\r\n    const platformOrg = await context.loaders.orgLoader.loadPlatformOrg(\r\n      platformApplicationID,\r\n      args.id,\r\n    );\r\n    if (!platformOrg) {\r\n      throw new Error(\"Couldn't find platform org\");\r\n    }\r\n\r\n    if (\r\n      !(await context.loaders.orgMembersLoader.viewerCanAccessOrg(\r\n        platformOrg.id,\r\n      ))\r\n    ) {\r\n      throw new Error(`Viewer cannot access org ${args.id}`);\r\n    }\r\n\r\n    return platformOrg;\r\n  };\r\n", "import { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { LinkedUsersEntity } from 'server/src/entity/linked_users/LinkedUsersEntity.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport { liveQueryWithRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\n\r\nexport const SlackConnectedLiveQueryResolver: Resolvers['Subscription']['slackConnectedLiveQuery'] =\r\n  {\r\n    resolve: (value) => value,\r\n    subscribe: async (_root, args, context) => {\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      const orgID = args.orgID;\r\n      return await liveQueryWithRestartEvent({\r\n        events: [\r\n          ['org-member-removed', { orgID }],\r\n          ['org-member-added', { orgID }],\r\n          ['org-user-identity', { orgID }],\r\n        ],\r\n        initialData: async () => {\r\n          return await isSlackConnected(context, userID, orgID);\r\n        },\r\n        eventData: async (_event) => {\r\n          return await isSlackConnected(context, userID, orgID);\r\n        },\r\n        subscriptionName: 'SlackConnectedLiveQueryResolver',\r\n        userID,\r\n      });\r\n    },\r\n  };\r\n\r\nasync function isSlackConnected(\r\n  context: RequestContext,\r\n  userID: string,\r\n  orgID: string,\r\n) {\r\n  const org = await context.loaders.orgLoader.loadOrg(orgID);\r\n  const response = {\r\n    isOrgConnected: false,\r\n    isUserConnected: false,\r\n  };\r\n\r\n  if (!org) {\r\n    return response;\r\n  }\r\n\r\n  const linkedOrg = await org.getLinkedOrg();\r\n\r\n  if (!linkedOrg) {\r\n    return response;\r\n  }\r\n\r\n  response.isOrgConnected = true;\r\n\r\n  // Check if the user is linked\r\n  const linkedUser = await LinkedUsersEntity.findOne({\r\n    where: {\r\n      sourceOrgID: org.id,\r\n      linkedOrgID: linkedOrg.id,\r\n      sourceUserID: userID,\r\n    },\r\n  });\r\n  response.isUserConnected = Boolean(linkedUser);\r\n\r\n  return response;\r\n}\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadSubscriberUpdatedResolver: Resolvers['ThreadSubscriberUpdated'] =\r\n  {\r\n    subscriber: async (\r\n      { args: { threadID }, payload: { userID } },\r\n      _,\r\n      context,\r\n    ) => {\r\n      const participant =\r\n        await context.loaders.threadParticipantLoader.loadForUserNoOrgCheck({\r\n          threadID,\r\n          userID,\r\n        });\r\n\r\n      if (!participant) {\r\n        throw new Error('Unable to find requested thread participant');\r\n      }\r\n\r\n      return participant;\r\n    },\r\n  };\r\n", "import type { CustomerEntity } from 'server/src/entity/customer/CustomerEntity.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\nimport { getSubscriptionData } from 'server/src/util/stripe.ts';\r\n\r\nexport const customerResolver: Resolvers['Customer'] = {\r\n  billingStatus: (customer, _args, _context) => {\r\n    return getGraphQLBillingStatusFromCustomer(customer.billingStatus);\r\n  },\r\n  addons: (customer: CustomerEntity, _args, _context) => {\r\n    const { addons } = customer;\r\n    return Object.keys(addons).map((addon) => {\r\n      const value = addons[addon];\r\n      if (typeof value !== 'boolean') {\r\n        throw new Error(\r\n          'only boolean values for addons are supported at the moment',\r\n        );\r\n      }\r\n      return { key: addon, value: value };\r\n    });\r\n  },\r\n  stripeSubscription: async (customer: CustomerEntity, _args, _context) => {\r\n    const subscription = await getSubscriptionData(customer);\r\n    if (!subscription) {\r\n      return;\r\n    }\r\n\r\n    const amount =\r\n      subscription.items.data\r\n        .map((item) => item.price.unit_amount)\r\n        .reduce((a, b) => (a ?? 0) + (b ?? 0), 0) ?? 0;\r\n\r\n    return {\r\n      id: subscription.id,\r\n      status: subscription.status,\r\n      url: subscription.livemode\r\n        ? `https://dashboard.stripe.com/subscriptions/${subscription.id}`\r\n        : `https://dashboard.stripe.com/test/subscriptions/${subscription.id}`,\r\n      startDate: new Date(subscription.start_date * 1000),\r\n      currentPeriodStart: new Date(subscription.current_period_start * 1000),\r\n      currentPeriodEnd: new Date(subscription.current_period_end * 1000),\r\n      amount,\r\n      recurrence:\r\n        (subscription.current_period_end - subscription.current_period_start) /\r\n          (24 * 60 * 60) <=\r\n        31\r\n          ? 'monthly'\r\n          : 'yearly',\r\n    };\r\n  },\r\n};\r\n\r\nexport function getGraphQLBillingStatusFromCustomer(billingStatus: string) {\r\n  switch (billingStatus) {\r\n    case 'active':\r\n      return 'active';\r\n    case 'past_due':\r\n      return 'unpaid';\r\n    case 'inactive':\r\n    case 'canceled':\r\n    case 'incomplete':\r\n    case 'incomplete_expired':\r\n    case 'paused':\r\n    case 'trialing':\r\n    case 'unpaid':\r\n      return 'inactive';\r\n  }\r\n\r\n  throw new Error(`unknown billing status: ${billingStatus}`);\r\n}\r\n", "import type { UUID } from '@cord-sdk/types';\r\nimport type { Location } from 'common/types/index.ts';\r\nimport {\r\n  isLocation,\r\n  locationEqual,\r\n  locationMatches,\r\n} from 'common/types/index.ts';\r\nimport {\r\n  assertViewerHasOrgs,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport {\r\n  getAllUserPresence,\r\n  getUserPresence,\r\n} from 'server/src/presence/context.ts';\r\nimport { NO_VALUE } from 'server/src/public/subscriptions/util/live_query.ts';\r\nimport { liveQueryWithRestartEvent } from 'server/src/public/subscriptions/util/restart_subscription.ts';\r\nimport type {\r\n  PresenceLiveQueryData,\r\n  Resolvers,\r\n} from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport type UserLocation = {\r\n  externalUserID: UUID;\r\n  ephemeral?: {\r\n    contexts: Location[] | null;\r\n  };\r\n  durable?: {\r\n    context: Location;\r\n    timestamp: number;\r\n  };\r\n};\r\n\r\nexport const presenceLiveQueryResolver: Resolvers['Subscription']['presenceLiveQuery'] =\r\n  {\r\n    resolve: (payload) => payload,\r\n    subscribe: async (\r\n      _root,\r\n      args,\r\n      context,\r\n    ): Promise<AsyncIterable<PresenceLiveQueryData>> => {\r\n      const orgIDs = assertViewerHasOrgs(context.session.viewer);\r\n      const userID = assertViewerHasUser(context.session.viewer);\r\n      if (!isLocation(args.input.matcher)) {\r\n        throw new Error('Invalid matcher');\r\n      }\r\n      const matcher = args.input.matcher;\r\n      const exactMatch = args.input.exactMatch;\r\n      const matches = exactMatch\r\n        ? (c: Location) => locationEqual(c, matcher)\r\n        : (c: Location) => locationMatches(c, matcher);\r\n      const includeDurable = !args.input.excludeDurable;\r\n\r\n      // We cache the existing lists by org/user pair, so that we don't have to\r\n      // refetch when an update comes in for one org/user pair\r\n      const ephemeralCache = new Map<string, Location[]>();\r\n\r\n      return await liveQueryWithRestartEvent({\r\n        events: orgIDs.map((orgID) => ['context-presence', { orgID }]),\r\n        initialData: async (): Promise<PresenceLiveQueryData> => {\r\n          const durablePromise = includeDurable\r\n            ? context.loaders.pageVisitorLoader.latestForContext(\r\n                matcher,\r\n                exactMatch,\r\n              )\r\n            : Promise.resolve(new Map());\r\n          const [ephemerals, durable] = await Promise.all([\r\n            Promise.all(orgIDs.map(getAllUserPresence)),\r\n            durablePromise,\r\n          ]);\r\n          ephemeralCache.clear();\r\n          for (let i = 0; i < orgIDs.length; i++) {\r\n            for (const ephUserID of ephemerals[i].keys()) {\r\n              const values = (ephemerals[i].get(ephUserID) ?? []).filter(\r\n                matches,\r\n              );\r\n              if (values.length > 0) {\r\n                ephemeralCache.set(`${orgIDs[i]}/${ephUserID}`, values);\r\n              }\r\n            }\r\n          }\r\n          const result = [];\r\n          for (const externalUserID of new Set([\r\n            ...ephemerals.flatMap((ephemeral) => [...ephemeral.keys()]),\r\n            ...durable.keys(),\r\n          ])) {\r\n            const eph = ephemerals\r\n              .flatMap((ephemeral) => ephemeral.get(externalUserID) ?? [])\r\n              .filter(matches);\r\n            result.push({\r\n              externalUserID,\r\n              ephemeral: eph.length > 0 ? { contexts: eph } : undefined,\r\n              durable: durable.get(externalUserID),\r\n            });\r\n          }\r\n          return {\r\n            data: result.filter((r) => r.durable || r.ephemeral),\r\n            complete: true,\r\n          };\r\n        },\r\n        eventData: async ({ args: eventArgs, payload }) => {\r\n          if ('durable' in payload) {\r\n            if (!includeDurable || !matches(payload.durable.context)) {\r\n              return NO_VALUE;\r\n            }\r\n            return { data: [payload], complete: false };\r\n          }\r\n          if (\r\n            !(\r\n              (payload.ephemeral.arrived &&\r\n                matches(payload.ephemeral.arrived)) ||\r\n              (payload.ephemeral.departed &&\r\n                matches(payload.ephemeral.departed))\r\n            )\r\n          ) {\r\n            return NO_VALUE;\r\n          }\r\n          const rawData = await getUserPresence(\r\n            eventArgs.orgID,\r\n            payload.externalUserID,\r\n          );\r\n          const newValues = rawData.contexts.filter(matches);\r\n          if (newValues.length === 0) {\r\n            ephemeralCache.delete(\r\n              `${eventArgs.orgID}/${payload.externalUserID}`,\r\n            );\r\n          } else {\r\n            ephemeralCache.set(\r\n              `${eventArgs.orgID}/${payload.externalUserID}`,\r\n              newValues,\r\n            );\r\n          }\r\n          const allLocations = orgIDs.flatMap(\r\n            (orgID) =>\r\n              ephemeralCache.get(`${orgID}/${payload.externalUserID}`) ?? [],\r\n          );\r\n          return {\r\n            data: [\r\n              {\r\n                externalUserID: payload.externalUserID,\r\n                ephemeral: {\r\n                  contexts: allLocations.length > 0 ? allLocations : null,\r\n                },\r\n              },\r\n            ],\r\n            complete: false,\r\n          };\r\n        },\r\n        userID,\r\n        subscriptionName: 'presenceLiveQueryResolver',\r\n      });\r\n    },\r\n  };\r\n", "import { ThreadParticipantMutator } from 'server/src/entity/thread_participant/ThreadParticipantMutator.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const markThreadsSeenResolver: Resolvers['Mutation']['markThreadsSeen'] =\r\n  async (_, args, context) => {\r\n    await new ThreadParticipantMutator(\r\n      context.session.viewer,\r\n      context.loaders,\r\n    ).markAllThreadsSeen(args.input);\r\n\r\n    return {\r\n      success: true,\r\n      failureDetails: null,\r\n    };\r\n  };\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadFilterablePropertiesMatchResolver: Resolvers['ThreadFilterablePropertiesMatch'] =\r\n  {\r\n    thread: async ({ payload: { threadID } }, _, context) => {\r\n      const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n      if (thread === null) {\r\n        throw new Error(`Failed to load thread ID: ${threadID}`);\r\n      }\r\n\r\n      return thread;\r\n    },\r\n  };\r\n", "import { deprecatedFunction } from 'server/src/logging/deprecate.ts';\r\nimport type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadFilterablePropertiesUnmatchResolver: Resolvers['ThreadFilterablePropertiesUnmatch'] =\r\n  {\r\n    id: ({ payload: { threadID } }) => threadID,\r\n    thread: deprecatedFunction(\r\n      async ({ payload: { threadID } }, _, context) => {\r\n        const thread = await context.loaders.threadLoader.loadThread(threadID);\r\n\r\n        if (thread === null) {\r\n          throw new Error(`Failed to load thread ID: ${threadID}`);\r\n        }\r\n\r\n        return thread;\r\n      },\r\n      'graphql: ThreadFilterablePropertiesUnmatch.thread',\r\n    ),\r\n  };\r\n", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifierVersion\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SimpleValue\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Context\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SimpleTranslationParameters\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"},\"directives\":[]},{\"kind\":\"ScalarTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"JsonObjectReducerData\"},\"directives\":[]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Message\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAttachment\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageSource\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ReferencedUserData\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ImportedSlackMessageType\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ReferencedUserData\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageAttachment\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"file\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"File\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadStatus\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FileUploadStatus\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"FileUploadStatus\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploaded\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploading\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"failed\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"cancelled\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Point2D\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SortBy\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"first_message_timestamp\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"most_recent_message_timestamp\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ascending\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"descending\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LocationFilter\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSortInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortBy\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortBy\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortDirection\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organizationID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UserFilterInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MarkThreadsSeenInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LocationFilter\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DocumentLocation\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Point2D\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationsOnPage\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allAnnotations\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hiddenAnnotationIDs\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"DocumentLocation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LocationTextConfig\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifier\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MultimediaConfig\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdditionalTargetData\"}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TargetType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdditionalTargetData\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TargetType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MonacoEditor\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ReactTree\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"KonvaCanvas\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MonacoEditor\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ReactTree\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"prefixCls\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"KonvaCanvas\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LocationTextConfig\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MultimediaConfig\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifier\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifierVersion\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messages\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"cursor\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"range\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ignoreDeleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"loadMessages\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"cursor\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"range\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ignoreDeleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LoadMessagesResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participants\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typingUsers\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessagesCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newReactionsCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUnseenMessageID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messagesCountExcludingDeleted\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allMessagesCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userMessagesCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessagesCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialMessagesInclDeleted\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialFetchCount\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIsThreadParticipant\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"navigationURL\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedTimestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedToSlack\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SlackMirroredThreadInfo\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"loadNewestMessagesToTarget\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetMessage\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ignoreDeleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LoadMessagesResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyingUserIDs\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessageReplyingUserIDs\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MaybeThread\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SlackMirroredThreadInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LoadMessagesResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messages\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"olderMessagesCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastSeenTimestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"User\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userType\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UserWithOrgDetails\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userType\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linkedUserID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"canBeNotifiedOnSlack\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackUserWithMatchingEmail\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"matcher\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"excludeDurable\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"exactMatch\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryData\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserLocation\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"complete\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UserLiveQueryData\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"upto\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadsResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threads\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Application\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedSecret\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"serverAccessToken\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customerAccessToken\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLinks\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationLinks\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customEmailTemplate\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationEmailTemplate\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"enableEmailNotifications\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customS3Bucket\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"S3BucketVisible\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"segmentWriteKey\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customNUX\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationNUX\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationTierType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"environment\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationEnvironment\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"defaultProvider\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"supportSlackChannelID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"supportBotInfo\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationSupportBotInfo\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"redirectURI\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customerID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deploymentInfo\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationDeploymentInfo\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usageMetrics\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metrics\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"days\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"eventWebhookURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"eventWebhookSubscriptions\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setupInfo\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationConsoleSetupInfo\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationDeploymentInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messages\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersSyncedAllTime\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgs\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgsSyncedAllTime\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocations\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocationsAllTime\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactPackageVersion\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"components\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"componentsInitializedAllTime\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"browsers\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"operatingSystems\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationConsoleSetupInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUser\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstOrg\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isComponentInitialized\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomerType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"verified\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sample\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomerImplementationStage\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"launched\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"implementing\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"proof_of_concept\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inactive\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PricingTier\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"free\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pro\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"scale\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"BillingType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"stripe\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"manual\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"BillingStatus\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"active\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unpaid\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inactive\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Addon\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"StripeSubscriptionRecurrence\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monthly\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yearly\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"StripeSubscription\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"status\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentPeriodStart\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentPeriodEnd\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"recurrence\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"StripeSubscriptionRecurrence\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Customer\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedSecret\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomerType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"enableCustomS3Bucket\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"enableCustomSegmentWriteKey\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"implementationStage\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomerImplementationStage\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"launchDate\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackChannel\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"signupCoupon\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pricingTier\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PricingTier\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"billingStatus\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BillingStatus\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"billingType\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BillingType\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"stripeCustomerID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addons\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Addon\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"renewalDate\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"planDescription\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"stripeSubscription\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"StripeSubscription\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ConsoleUser\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"picture\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customerID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customer\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Customer\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pendingCustomerID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationTierType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"free\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"starter\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"premium\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationEnvironment\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"production\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"staging\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sample\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sampletoken\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"demo\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageContext\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"providerID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageVisitor\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastPresentTimestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberState\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inactive\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"active\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deleted\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UserType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"person\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"bot\"},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageSource\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Task\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignees\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Todo\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusLastUpdatedBy\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReference\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnectionType\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskThirdPartyReference\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReferences\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskThirdPartyReference\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Todo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TaskThirdPartyReference\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnectionType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"previewData\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"canEdit\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"imported\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnectionType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"asana\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"jira\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linear\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"trello\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monday\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SlackStateLinkingType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"link_org\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ImportedSlackMessageType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reply\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"supportBotReply\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"action_message\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user_message\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"providerID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentity\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organization\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isSlackConnected\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organizations\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Viewer\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"accessToken\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"groupID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organization\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inbox\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Inbox\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyConnection\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnectionType\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnection\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isSlackConnected\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deepLinkInfo\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DeepLinkInfo\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"domain\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"imageURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersWithOrgDetails\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nameQuery\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortUsersBy\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortUsersDirection\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserWithOrgDetails\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrganizationState\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"joinableSlackChannels\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SlackChannelSchema\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"joinedSlackChannels\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SlackChannelSchema\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"recentlyActiveThreads\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linkedOrganization\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LinkedOrganization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LinkedOrganization\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersWithOrgDetails\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nameQuery\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortUsersBy\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortUsersDirection\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserWithOrgDetails\"}}}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrganizationState\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inactive\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"active\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SlackChannelSchema\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Inbox\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"count\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threads\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadsArchive\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnection\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"connected\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"oAuthStateToken\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"configuration\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"HeimdallSwitch\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isOn\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"FeatureFlag\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SimpleValue\"}}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LogEventInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageLoadID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"installationID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"eventNumber\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"clientTimestamp\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"payload\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"logLevel\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LogLevelType\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customEventMetadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LogLevelType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"error\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"warn\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"info\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"debug\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"FileAttachmentInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fileID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Point2DInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationAttachmentInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotFileID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshotFileID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DocumentLocationInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Point2DInput\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ScreenshotAttachmentInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotFileID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshotFileID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"DocumentLocationInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LocationTextConfigInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifierInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MultimediaConfigInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdditionalTargetDataInput\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdditionalTargetDataInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TargetType\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MonacoEditorInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ReactTreeInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"KonvaCanvasInput\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MonacoEditorInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ReactTreeInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"prefixCls\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"KonvaCanvasInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MultimediaConfigInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LocationTextConfigInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifierInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ElementIdentifierVersion\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TaskInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assigneeIDs\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskTodoInput\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusUpdate\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskDoneStatusUpdate\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskInputType\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TaskTodoInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TaskDoneStatusUpdate\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"update\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"remove\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"none\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TaskInputType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"cord\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"asana\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"jira\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linear\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"trello\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monday\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadMessageInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageName\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createNewThread\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessageMetadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":{\"kind\":\"StringValue\",\"value\":\"Only used when createNewThread is true. To update metadata on an existing\\nthread, use the setThreadMetadata mutation.\",\"block\":true},\"name\":{\"kind\":\"Name\",\"value\":\"newThreadMetadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalContent\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fileAttachments\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FileAttachmentInput\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"annotationAttachments\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationAttachmentInput\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotAttachment\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ScreenshotAttachmentInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadOptions\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadOptionsInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalMessageID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageType\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addReactions\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createThread\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CreateMessageByExternalIDInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalMessageID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageType\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addReactions\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createThread\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addFileAttachments\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotAttachment\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ScreenshotAttachmentInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribeToThread\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UpdateMessageByExternalIDInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalMessageID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageType\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addReactions\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"removeReactions\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addFileAttachments\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"removeFileAttachments\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"removePreviewLinks\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addSubscribers\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadOptionsInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalSubscribersOnCreate\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Input\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CreateFileResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"downloadURL\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"IDResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":{\"kind\":\"StringValue\",\"value\":\"The details of what kind of failure occurred during the operation.\",\"block\":true},\"name\":{\"kind\":\"Name\",\"value\":\"FailureDetails\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":{\"kind\":\"StringValue\",\"value\":\"A code indicating the class of failure encountered.  For each operation,\\nthere should be an enumerated list of possible failure codes that can occur\\nhere.\",\"block\":true},\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":{\"kind\":\"StringValue\",\"value\":\"A message with additional information about the failure.  This should be\\nsafe to display to the user, though it may not be ideal.\",\"block\":true},\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"success\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":{\"kind\":\"StringValue\",\"value\":\"If success is false, this field may contain additional details about what\\nkind of failure occurred.  If success is true, this field should always be\\nnull.\",\"block\":true},\"name\":{\"kind\":\"Name\",\"value\":\"failureDetails\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FailureDetails\"}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"FileUploadStatusEnumType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploaded\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploading\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"failed\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"cancelled\"},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadEvent\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadCreated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageAdded\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageContentAppended\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageRemoved\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantsUpdatedIncremental\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadTypingUsersUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadShareToSlack\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadPropertiesUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSubscriberUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadDeleted\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadCreated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadDeleted\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageAdded\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageContentAppended\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"appendedContent\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadPropertiesUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadMessageRemoved\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantsUpdatedIncremental\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participant\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSubscriberUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscriber\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadTypingUsersUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadShareToSlack\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"info\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SlackMirroredThreadInfo\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"EphemeralLocation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"contexts\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"DurableLocation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"UserLocation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalUserID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ephemeral\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"EphemeralLocation\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"durable\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DurableLocation\"}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageEvent\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadAdded\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadDeleted\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadReplyAdded\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageVisitorsUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadResolved\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadUnresolved\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterablePropertiesMatch\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterablePropertiesUnmatch\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadAdded\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadDeleted\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterablePropertiesMatch\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterablePropertiesUnmatch\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadReplyAdded\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageVisitorsUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"visitors\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageVisitor\"}}}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadResolved\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadUnresolved\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"S3BucketVisible\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"region\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LogoConfigType\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"height\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"width\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"LogoConfigInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"height\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"width\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationEmailTemplate\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partnerName\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"imageURL\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sender\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"logoConfig\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LogoConfigType\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationLinks\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"learnMore\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"upgradePlan\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"leaveFeedback\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationColors\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"launcherOpen\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"launcherClose\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actions\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"presence\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"avatarTint\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"underlay\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationSupportBotInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PublicApplication\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLinks\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ComputedCustomLinks\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customNUX\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationNUX\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"environment\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationEnvironment\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ComputedCustomLinks\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"learnMore\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"upgradePlan\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"leaveFeedback\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomNUXStepContent\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"imageURL\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ApplicationNUX\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialOpen\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomNUXStepContent\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"welcome\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomNUXStepContent\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"DeepLinkInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminChatUser\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationEvent\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationAdded\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationReadStateUpdated\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationDeleted\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationAdded\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notification\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationReadStateUpdated\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notification\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationDeleted\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"senders\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSender\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconUrl\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"header\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderNode\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"headerTranslationKey\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"headerSimpleTranslationParams\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SimpleTranslationParameters\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachment\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationAttachment\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"readStatus\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationReadStatus\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationReadStatus\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unread\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"read\"},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationAttachment\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationURLAttachment\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationMessageAttachment\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationThreadAttachment\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationURLAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationMessageAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationThreadAttachment\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSender\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationPage\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"paginationInfo\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PaginationInfo\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderTextNode\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"bold\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderUserNode\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderNode\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderTextNode\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderUserNode\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSummary\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadNotificationCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"PaginationInfo\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endCursor\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasNextPage\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminGoRedirect\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"redirectCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminGoRedirectInputType\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Activity\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadSummary\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummary\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummary\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"totalThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadSubscribedThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"emptyThreadCount\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TestToken\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTComingFrom\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"us\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"them\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTDecision\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"accepted\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"rejected\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pending\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTCommunicationStatus\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"none\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"request_acked\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"decision_sent\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"decision_acked\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTIssueType\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"request\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"bug\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onboarding_step\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTPriority\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blocker\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"high\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"low\"},\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTNextAction\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unknown\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ack_receipt\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"make_decision\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"send_decision\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"do_work\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"wait_for_ack\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomerIssue\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customer\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Customer\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"body\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"comingFrom\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTComingFrom\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"decision\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTDecision\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"communicationStatus\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTCommunicationStatus\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nextAction\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTNextAction\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastTouch\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTIssueType\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"priority\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AdminCRTPriority\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externallyVisible\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignee\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"history\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomerIssueChange\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomerIssueUpdate\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"oldValue\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newValue\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"CustomerIssueChange\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"created\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"updated\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CustomerIssueUpdate\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SearchLocationOptions\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"TimestampRange\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"from\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"to\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DateTime\"}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"EnumTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SearchSortByOptions\"},\"directives\":[],\"values\":[{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"created_timestamp\"},\"directives\":[]},{\"kind\":\"EnumValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"relevance\"},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SearchSortInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortBy\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SearchSortByOptions\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortDirection\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"}}},\"defaultValue\":undefined,\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"img\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"UnionTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberEvent\"},\"directives\":[],\"types\":[{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberAdded\"}},{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberRemoved\"}}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberAdded\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberRemoved\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalUserID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"OrgMembersResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"SlackConnectedResult\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isOrgConnected\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isUserConnected\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Viewer\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIdentity\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentity\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organization\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organizationByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ids\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ping\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadByExternalID2\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Input\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MaybeThread\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadsAtLocation\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sort\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSortInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageThreadsResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"application\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PublicApplication\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"featureFlags\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"keys\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FeatureFlag\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"annotationsOnPage\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"includeDeleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationsOnPage\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notifications\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationPage\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"activity\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Activity\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationSummary\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSummary\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageContentSearch\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"authorExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"locationOptions\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SearchLocationOptions\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestampRange\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TimestampRange\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortBy\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SearchSortByOptions\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sortDirection\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SortDirection\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}}}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgMembersByExternalIDPaginated\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMembersResult\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Mutation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"logEvents\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"events\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LogEventInput\"}}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"logDeprecation\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createThreadMessage\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadMessageInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createMessageByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateMessageByExternalIDInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"updateMessage\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageContent\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fileAttachments\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FileAttachmentInput\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"annotationAttachments\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationAttachmentInput\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"updateMessageByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateMessageByExternalIDInput\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"updateThreadByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typing\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createFile\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"provider\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"application\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateFileResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"refreshFileUploadURL\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setTyping\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typing\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setPresentContext\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"present\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"durable\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"exclusivityRegion\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSONObject\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markThreadSeen\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markThreadUnseenFromExternalMessageID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalMessageID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markThreadsSeen\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MarkThreadsSeenInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"clearNotificationsForMessage\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"byExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createMessageReaction\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deleteMessageReaction\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactionID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"addThreadToSlackChannel\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackChannelID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"installBot\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"byExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setPreference\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setFileUploadStatus\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"status\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FileUploadStatusEnumType\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setSubscribed\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setSubscribedByExternalID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"disconnectThirdParty\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"connectionType\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThirdPartyConnectionType\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setDeepLinkThreadID\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"clearDeepLinkThreadID\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setAnnotationVisible\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"annotationID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"visible\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resetUserHiddenAnnotations\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setThreadResolved\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unlinkOrgs\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shareThreadToEmail\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshotID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"byExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sendSampleWelcomeMessage\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageLocation\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markNotificationAsRead\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"byExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markNotificationAsUnread\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationExternalID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"markAllNotificationsAsRead\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deleteNotification\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"byExternalID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setThreadName\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"setThreadMetadata\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hideLinkPreview\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linkPreviewID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"createThread\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalThreadID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateThreadInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SuccessResult\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Subscription\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadEvents\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadEvent\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"inbox\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Inbox\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"presenceLiveQuery\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryData\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userLiveQuery\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"since\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserLiveQueryData\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageEventsWithLocation\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageEvent\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"preferencesLiveQuery\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JsonObjectReducerData\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIdentityLiveQuery\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentity\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"annotationsOnPageUpdated\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"includeDeleted\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"AnnotationsOnPage\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadActivitySummary\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummary\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationEvents\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationEvent\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationSummaryUpdated\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSummary\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgMembersByExternalIDUpdated\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMemberEvent\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackConnectedLiveQuery\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}},\"defaultValue\":undefined,\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SlackConnectedResult\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":31824}};\nexport default documentNode;", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\n// all its fields are dynamically resolved\r\nexport const viewerIdentityQueryResolver: Resolvers['Query']['viewerIdentity'] =\r\n  () => ({});\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const threadDeletedResolver: Resolvers['ThreadDeleted'] = {\r\n  id: ({ args: { threadID } }) => threadID,\r\n};\r\n", "import type { Resolvers } from 'server/src/schema/resolverTypes.ts';\r\n\r\nexport const pageThreadDeletedResolver: Resolvers['PageThreadDeleted'] = {\r\n  id: ({ payload: { threadID } }) => threadID,\r\n};\r\n", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadStatus\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"file\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"img\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignees\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusLastUpdatedBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReferences\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"previewData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastSeenTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newReactionsCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typingUsers\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messagesCountExcludingDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIsThreadParticipant\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"navigationURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedToSlack\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participants\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUnseenMessageID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessageReplyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialMessagesInclDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageByExternalIDWithThread\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageByExternalID\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":4252}};\nexport const MessageByExternalIDWithThread = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageByExternalIDWithThread\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messageByExternalID\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSummary\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationSummary\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadNotificationCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}],\"loc\":{\"start\":0,\"end\":138}};\nexport const NotificationSummary = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationSummary\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notificationSummary\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadNotificationCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadStatus\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"file\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"img\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignees\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusLastUpdatedBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReferences\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"previewData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastSeenTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newReactionsCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typingUsers\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messagesCountExcludingDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIsThreadParticipant\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"navigationURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedToSlack\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participants\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUnseenMessageID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessageReplyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialMessagesInclDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationsMessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}},{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationsNodeFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Notification\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"senders\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"header\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderTextNode\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"bold\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationHeaderUserNode\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"headerTranslationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"headerSimpleTranslationParams\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachment\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationURLAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationMessageAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationsMessageFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationThreadAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconUrl\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"readStatus\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"Notifications\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notifications\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationsNodeFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"paginationInfo\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endCursor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasNextPage\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":5196}};\nexport const Notifications = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"Notifications\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"notifications\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"first\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodes\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"NotificationsNodeFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"paginationInfo\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endCursor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasNextPage\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMembersByExtIDPaginatedQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgMembersByExternalIDPaginated\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":386}};\nexport const OrgMembersByExtIDPaginatedQuery = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"OrgMembersByExtIDPaginatedQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgMembersByExternalIDPaginated\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"subscription\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQuerySubscription\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"presenceLiveQuery\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalUserID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ephemeral\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"contexts\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"durable\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"complete\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}],\"loc\":{\"start\":0,\"end\":337}};\nexport const PresenceLiveQuerySubscription = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"subscription\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQuerySubscription\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PresenceLiveQueryInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"presenceLiveQuery\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalUserID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"ephemeral\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"contexts\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"durable\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"complete\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummaryFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummary\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"totalThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unreadSubscribedThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"emptyThreadCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivityQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"activity\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadSummary\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummaryFragment\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":643}};\nexport const ThreadActivityQuery = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivityQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PageContextInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Metadata\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"}},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerThreadFilter\"}}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"activity\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"pageContext\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"viewer\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadSummary\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadActivitySummaryFragment\"},\"directives\":[]}]}}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadStatus\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"file\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"img\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignees\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusLastUpdatedBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReferences\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"previewData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastSeenTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newReactionsCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typingUsers\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messagesCountExcludingDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIsThreadParticipant\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"navigationURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedToSlack\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participants\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUnseenMessageID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessageReplyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalIDFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialMessagesInclDeleted\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"initialFetchCount\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"initialFetchCount\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Query\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Input\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"initialFetchCount\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadByExternalID2\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalIDFragment\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":4352}};\nexport const ThreadByExternalID2Query = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Query\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalID2Input\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"initialFetchCount\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadByExternalID2\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thread\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadByExternalIDFragment\"},\"directives\":[]}]}}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"File\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mimeType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"uploadStatus\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"size\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"file\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfig\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endElementSelector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"startNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"endNodeOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedText\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToDisplay\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selector\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iframeSelectors\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"onChart\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"selectedCharOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatch\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"textToMatchOffset\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"nodeIndex\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"xVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"yVsPointer\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"elementIdentifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"identifier\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"version\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"highlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"multimediaConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"currentTime\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"additionalTargetData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"targetType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoEditor\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"monacoID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lineNumber\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactTree\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"treeID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"konvaCanvas\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLocation\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customHighlightedTextConfig\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"HighlightedTextConfigFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"customLabel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"coordsRelativeToTarget\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"x\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"screenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"blurredScreenshot\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FileFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"img\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"title\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Task\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"todos\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"done\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"assignees\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"doneStatusLastUpdatedBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"thirdPartyReferences\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"previewData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"unicodeReaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Message\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"source\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"attachments\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFileAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageAnnotationAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachment\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageScreenshotAttachmentFragment\"},\"directives\":[]}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreview\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageLinkPreviewFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seen\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"reactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageReactionFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"referencedUserData\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"timestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"deletedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastUpdatedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedFromSlackChannel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"task\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"TaskFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"importedSlackMessageType\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isFromEmailReply\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"iconURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"translationKey\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"seenBy\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"skipLinkPreviews\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipant\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"lastSeenTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"orgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalOrgID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"newReactionsCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"subscribed\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"typingUsers\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"mentioned\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"allMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"messagesCountExcludingDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"userMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessagesCount\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIsThreadParticipant\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"url\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"navigationURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"resolvedTimestamp\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"sharedToSlack\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"channel\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"slackURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"participants\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadParticipantFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"firstUnseenMessageID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"replyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"actionMessageReplyingUserIDs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"extraClassnames\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Thread\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragmentBase\"},\"directives\":[]},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"initialMessagesInclDeleted\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"MessageFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadList\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSortInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadsAtLocation\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threads\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}],\"loc\":{\"start\":0,\"end\":4525}};\nexport const ThreadList = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadList\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Context\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFilterInput\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadSortInput\"}}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threadsAtLocation\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"location\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filter\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"resolved\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"partialMatch\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"sort\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"limit\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"after\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"threads\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ThreadFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"hasMore\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"UsersByExternalIDQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersByExternalID\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":261}};\nexport const UsersByExternalIDQuery = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"UsersByExternalIDQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"usersByExternalID\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"externalIDs\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"UsersQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":211}};\nexport const UsersQuery = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"UsersQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UUID\"}}}}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"ids\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]};\nexport default documentNode;", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"OrganizationFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Organization\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"linkedOrganization\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"displayName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"fullName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"shortName\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"profilePictureURL\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"metadata\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentity\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organization\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"OrganizationFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isSlackConnected\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organizations\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIdentity\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityFragment\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":589}};\nexport const ViewerIdentityQuery = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityQuery\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"defaultValue\":undefined,\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"viewerIdentity\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"_externalOrgID\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityFragment\"},\"directives\":[]}]}}]}},{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentityFragment\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ViewerIdentity\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"UserFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organization\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"OrganizationFragment\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"isSlackConnected\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined},{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"organizations\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"externalID\"},\"arguments\":[],\"directives\":[],\"selectionSet\":undefined}]}}]}}]};\nexport default documentNode;", "import type { UserFragment } from 'common/graphql/types.ts';\r\nimport type { ClientUserData } from '@cord-sdk/types';\r\n\r\nexport function userToUserData(internalUser: UserFragment): ClientUserData {\r\n  return {\r\n    id: internalUser.externalID,\r\n    name: internalUser.name,\r\n    shortName: internalUser.shortName,\r\n    displayName: internalUser.displayName,\r\n    secondaryDisplayName: internalUser.fullName,\r\n    profilePictureURL: internalUser.profilePictureURL,\r\n    metadata: internalUser.metadata,\r\n  };\r\n}\r\n\r\nexport function usersToUserData(\r\n  internalUsers: UserFragment[],\r\n): ClientUserData[] {\r\n  return internalUsers.map((u) => userToUserData(u));\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeViewerIdentityQuery } from 'server/src/schema/operations.ts';\r\nimport type { ViewerUserData } from '@cord-sdk/types';\r\nimport { userToUserData } from 'common/util/convertToExternal/user.ts';\r\nimport { NOTIFICATION_CHANNELS } from 'common/const/UserPreferenceKeys.ts';\r\nimport { defaultNotificationPreference } from 'common/util/notifications.ts';\r\nimport type { NotificationChannels } from 'common/types/index.ts';\r\n\r\nasync function getClientViewerHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n  const userID = assertViewerHasUser(context.session.viewer);\r\n\r\n  const user = await context.loaders.userLoader.loadUser(userID);\r\n\r\n  if (!user) {\r\n    throw new ApiCallerError('user_not_found', { code: 404 });\r\n  }\r\n\r\n  const [data, loadedPreferences] = await Promise.all([\r\n    executeViewerIdentityQuery({\r\n      context,\r\n      variables: {\r\n        _externalOrgID: undefined,\r\n      },\r\n    }),\r\n    context.loaders.userPreferenceLoader.loadPreferenceValueForViewer<NotificationChannels>(\r\n      NOTIFICATION_CHANNELS,\r\n    ),\r\n  ]);\r\n\r\n  const identity = data.viewerIdentity;\r\n  const preferences = {\r\n    ...defaultNotificationPreference,\r\n    ...loadedPreferences,\r\n  };\r\n\r\n  const result: ViewerUserData = {\r\n    ...userToUserData(identity.user),\r\n    organizationID: identity.organization?.externalID ?? null,\r\n    groupID: identity.organization?.externalID ?? null,\r\n    notificationPreferences: {\r\n      sendViaEmail: preferences.email,\r\n      sendViaSlack: preferences.slack,\r\n    },\r\n    isSlackConnected: identity.isSlackConnected,\r\n    organizationIsSlackConnected: Boolean(\r\n      identity.organization?.linkedOrganization,\r\n    ),\r\n    groupIsSlackConnected: Boolean(identity.organization?.linkedOrganization),\r\n    groups: identity.organizations.map((org) => org.externalID),\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientViewerHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeUsersByExternalIDQuery } from 'server/src/schema/operations.ts';\r\nimport type { ClientUserData } from '@cord-sdk/types';\r\nimport { userToUserData } from 'common/util/convertToExternal/user.ts';\r\n\r\nasync function getClientUserHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const data = await executeUsersByExternalIDQuery({\r\n    context,\r\n    variables: {\r\n      externalIDs: [req.params.userID],\r\n    },\r\n  });\r\n\r\n  if (data.usersByExternalID.length !== 1) {\r\n    throw new ApiCallerError('user_not_found');\r\n  }\r\n\r\n  const result: ClientUserData = userToUserData(data.usersByExternalID[0]);\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientUserHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport type { UserFragment } from 'server/src/schema/operations.ts';\r\nimport { executeUsersByExternalIDQuery } from 'server/src/schema/operations.ts';\r\nimport type { ClientUserData } from '@cord-sdk/types';\r\nimport { userToUserData } from 'common/util/convertToExternal/user.ts';\r\n\r\nfunction parseUserList(req: Request): string[] {\r\n  if (typeof req.query.users !== 'string') {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  let users;\r\n  try {\r\n    users = JSON.parse(req.query.users);\r\n  } catch (e) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  if (\r\n    !Array.isArray(users) ||\r\n    users.some((u) => typeof u !== 'string' && typeof u !== 'number')\r\n  ) {\r\n    throw new ApiCallerError('invalid_request');\r\n  }\r\n  return users.map((u) => u.toString());\r\n}\r\n\r\nasync function getClientUsersHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const users = parseUserList(req);\r\n\r\n  const data = await executeUsersByExternalIDQuery({\r\n    context,\r\n    variables: {\r\n      externalIDs: users,\r\n    },\r\n  });\r\n\r\n  const fetched = new Map<string, UserFragment>();\r\n  data.usersByExternalID.forEach((u) => fetched.set(u.externalID, u));\r\n\r\n  const result: Record<string, ClientUserData | null> = {};\r\n  for (const user of users) {\r\n    result[user] = fetched.has(user)\r\n      ? userToUserData(fetched.get(user)!)\r\n      : null;\r\n  }\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientUsersHandler);\r\n", "import * as base64 from 'js-base64';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport type {\r\n  UUID,\r\n  NonNullableKeys,\r\n  MessageContent,\r\n} from 'common/types/index.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport {\r\n  externalizeID,\r\n  extractInternalID,\r\n  isExternalizedID,\r\n} from 'common/util/externalIDs.ts';\r\nimport { convertStructuredMessageToText } from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type {\r\n  MessageReactionFragment,\r\n  MessageFragment,\r\n  UserFragment,\r\n  MessageFileAttachmentFragment,\r\n  MessageAnnotationAttachmentFragment,\r\n  MessageScreenshotAttachmentFragment,\r\n  MessageLinkPreviewFragment,\r\n  ThreadFragment,\r\n} from 'common/graphql/types.ts';\r\nimport type {\r\n  ClientMessageData,\r\n  ThreadSummary,\r\n  Reaction,\r\n  MessageAttachment,\r\n  CoreThreadData,\r\n} from '@cord-sdk/types';\r\n\r\nexport type UserByInternalIdFn = (id: UUID) => UserFragment | undefined;\r\n\r\nfunction convertMessageReactionsToMessageDataReactions(\r\n  messageReactions: MessageReactionFragment[],\r\n): Reaction[] {\r\n  return messageReactions.map((reaction) => {\r\n    return {\r\n      reaction: reaction.unicodeReaction,\r\n      userID: reaction.user.externalID,\r\n      timestamp: new Date(reaction.timestamp),\r\n    };\r\n  });\r\n}\r\n\r\nexport function getMessageData({\r\n  message,\r\n  thread,\r\n  userByInternalID,\r\n}: {\r\n  message: MessageFragment;\r\n  thread: Pick<ThreadFragment, 'externalID' | 'externalOrgID' | 'name'>;\r\n  userByInternalID: UserByInternalIdFn;\r\n}): ClientMessageData {\r\n  const attachments: MessageAttachment[] = message.attachments\r\n    .filter(\r\n      (\r\n        a,\r\n      ): a is\r\n        | NonNullableKeys<MessageFileAttachmentFragment, 'file'>\r\n        | NonNullableKeys<MessageAnnotationAttachmentFragment, 'screenshot'>\r\n        | NonNullableKeys<MessageScreenshotAttachmentFragment, 'screenshot'>\r\n        | MessageLinkPreviewFragment => {\r\n        if (a.__typename === 'MessageFileAttachment') {\r\n          return isDefined(a.file);\r\n        } else if (a.__typename === 'MessageAnnotationAttachment') {\r\n          return true;\r\n        } else if (a.__typename === 'MessageScreenshotAttachment') {\r\n          return isDefined(a.screenshot);\r\n        } else if (a.__typename === 'MessageLinkPreview') {\r\n          return true;\r\n        } else {\r\n          console.error('Unexpected MessageAttachment type');\r\n          return false;\r\n        }\r\n      },\r\n    )\r\n    .map((a) => {\r\n      if (a.__typename === 'MessageFileAttachment') {\r\n        return {\r\n          id: a.file.id,\r\n          type: 'file',\r\n          name: a.file.name,\r\n          url: a.file.url,\r\n          mimeType: a.file.mimeType,\r\n          size: a.file.size,\r\n          uploadStatus: a.file.uploadStatus,\r\n        };\r\n      } else if (a.__typename === 'MessageAnnotationAttachment') {\r\n        return {\r\n          type: 'annotation',\r\n          textContent:\r\n            a.location?.highlightedTextConfig?.textToDisplay ??\r\n            a.customHighlightedTextConfig?.textToDisplay ??\r\n            null,\r\n          locationData: a.location\r\n            ? base64.encode(JSON.stringify(a.location))\r\n            : null,\r\n          customData: a.customLocation\r\n            ? {\r\n                location: a.customLocation,\r\n                coordsRelativeToTarget: a.coordsRelativeToTarget!, // always set when custom locations used\r\n                label: a.customLabel,\r\n              }\r\n            : null,\r\n          screenshot: a.screenshot\r\n            ? {\r\n                id: a.id,\r\n                name: thread.name ?? 'annotation',\r\n                url: a.screenshot.url,\r\n                mimeType: a.screenshot.mimeType,\r\n                size: a.screenshot.size,\r\n                uploadStatus: a.screenshot.uploadStatus,\r\n              }\r\n            : null,\r\n        };\r\n      } else if (a.__typename === 'MessageScreenshotAttachment') {\r\n        return {\r\n          type: 'screenshot',\r\n          screenshot: {\r\n            id: a.id,\r\n            name: thread.name ?? 'screenshotConfig-generated-screenshot',\r\n            url: a.screenshot.url,\r\n            mimeType: a.screenshot.mimeType,\r\n            size: a.screenshot.size,\r\n            uploadStatus: a.screenshot.uploadStatus,\r\n          },\r\n        };\r\n      } else if (a.__typename === 'MessageLinkPreview') {\r\n        return {\r\n          type: 'link_preview',\r\n          id: a.id,\r\n          url: a.url,\r\n          imageURL: a.img,\r\n          title: a.title,\r\n          description: a.description,\r\n        };\r\n      } else {\r\n        // This can never happen because of the previous .filter\r\n        return {} as MessageAttachment;\r\n      }\r\n    });\r\n\r\n  return {\r\n    id: message.externalID ?? externalizeID(message.id),\r\n    organizationID: thread.externalOrgID,\r\n    groupID: thread.externalOrgID,\r\n    threadID: thread.externalID,\r\n    authorID: message.source.externalID,\r\n    url: message.url,\r\n    content: message.content\r\n      ? externalizeMessageContent(message.content, userByInternalID)\r\n      : [],\r\n    plaintext: message.content\r\n      ? convertStructuredMessageToText(message.content)\r\n      : '',\r\n    type: message.type,\r\n    iconURL: message.iconURL,\r\n    translationKey: message.translationKey,\r\n    metadata: message.metadata,\r\n    createdTimestamp: new Date(message.timestamp),\r\n    updatedTimestamp: message.lastUpdatedTimestamp\r\n      ? new Date(message.lastUpdatedTimestamp)\r\n      : null,\r\n    deletedTimestamp: message.deletedTimestamp\r\n      ? new Date(message.deletedTimestamp)\r\n      : null,\r\n    // TODO: is `seen` properly live updating? I don't think it is. Too much\r\n    // memoization?\r\n    seen: message.seen,\r\n    seenBy: message.seenBy.map((user) => user.externalID),\r\n    extraClassnames: message.extraClassnames,\r\n    attachments,\r\n    reactions: convertMessageReactionsToMessageDataReactions(message.reactions),\r\n    skipLinkPreviews: message.skipLinkPreviews,\r\n  };\r\n}\r\n\r\nexport function externalizeMessageContent(\r\n  content: MessageContent,\r\n  userByInternalID: (id: UUID) => UserFragment | undefined,\r\n): MessageContent {\r\n  return content.map((node) => {\r\n    if (node.type === MessageNodeType.MENTION) {\r\n      const user = userByInternalID(node.user.id);\r\n      // If this user isn't available (it's from another application, it's\r\n      // been deleted, etc), we don't want to explode, so just put in an\r\n      // externalized ID for it.\r\n      const id = user?.externalID\r\n        ? user.externalID\r\n        : externalizeID(node.user.id);\r\n      return {\r\n        ...node,\r\n        user: { id },\r\n      };\r\n    } else if ('children' in node) {\r\n      return {\r\n        ...node,\r\n        children: externalizeMessageContent(node.children, userByInternalID),\r\n      };\r\n    }\r\n    return node;\r\n  });\r\n}\r\n\r\n/**\r\n * Convert a message from external IDs to internal IDs.\r\n *\r\n * WARNING: This is not reliable and should only be used for things like\r\n * optimistic rendering where if it's wrong it's only wrong for a short while.\r\n * If you need to do this in a fully-correct way, you need to send the content\r\n * to the backend and use the functions in\r\n * server/src/public/routes/platform/messages/util.ts.\r\n */\r\nexport function internalizeMessageContent_ONLY_BEST_EFFORT(\r\n  content: MessageContent,\r\n  userByExternalID: (id: UUID) => UserFragment | undefined,\r\n): MessageContent {\r\n  return content.map((node) => {\r\n    if (node.type === MessageNodeType.MENTION) {\r\n      const user = userByExternalID(node.user.id);\r\n      let id: string;\r\n      if (user) {\r\n        id = user.id;\r\n      } else if (!user && isExternalizedID(node.user.id)) {\r\n        // In some circumstances, we may send through a node that has an\r\n        // externalized ID (cord:abcd1234-internal-uuid-bcde) instead of the\r\n        // proper external ID, if we needed to fill it out and the user's\r\n        // external ID wasn't available in the browser, so handle that case\r\n        id = extractInternalID(node.user.id)!;\r\n      } else {\r\n        // If this user isn't available (eg, it hasn't been loaded) we don't\r\n        // want to explode, so just leave it alone.\r\n        //\r\n        // (THIS IS WHY IT'S BEST EFFORT.)\r\n        id = node.user.id;\r\n      }\r\n      return {\r\n        ...node,\r\n        user: { id },\r\n      };\r\n    } else if ('children' in node) {\r\n      return {\r\n        ...node,\r\n        children: internalizeMessageContent_ONLY_BEST_EFFORT(\r\n          node.children,\r\n          userByExternalID,\r\n        ),\r\n      };\r\n    }\r\n    return node;\r\n  });\r\n}\r\n\r\nexport function getThreadSummary(\r\n  thread: Omit<\r\n    ThreadFragment,\r\n    'initialMessagesInclDeleted' | 'resolvedTimestamp'\r\n  > & {\r\n    messages: MessageFragment[];\r\n    resolvedTimestamp: Date | string | null;\r\n  },\r\n  userByInternalID: (id: UUID) => UserFragment | undefined,\r\n): ThreadSummary {\r\n  const firstMessage = thread.messages[0];\r\n  const lastMessage = thread.messages[thread.messages.length - 1];\r\n\r\n  const coreThreadData = getThreadData(thread, userByInternalID);\r\n\r\n  return {\r\n    ...coreThreadData,\r\n    unread: thread.newMessagesCount,\r\n    viewerIsThreadParticipant: thread.viewerIsThreadParticipant,\r\n    firstMessage: firstMessage\r\n      ? getMessageData({\r\n          message: firstMessage,\r\n          thread,\r\n          userByInternalID,\r\n        })\r\n      : null,\r\n    lastMessage: lastMessage\r\n      ? getMessageData({\r\n          message: lastMessage,\r\n          thread,\r\n          userByInternalID,\r\n        })\r\n      : null,\r\n  };\r\n}\r\n\r\nexport function getThreadData(\r\n  thread: Omit<\r\n    ThreadFragment,\r\n    'initialMessagesInclDeleted' | 'resolvedTimestamp'\r\n  > & {\r\n    resolvedTimestamp: Date | string | null;\r\n  },\r\n  userByInternalID: (id: UUID) => UserFragment | undefined,\r\n): CoreThreadData {\r\n  const externalThreadID = thread.externalID ?? externalizeID(thread.id);\r\n  const subscribers = thread.participants\r\n    .filter((p) => p.subscribed && p.user?.externalID)\r\n    .map((p) => p.user!.externalID);\r\n\r\n  return {\r\n    id: externalThreadID,\r\n    organizationID: thread.externalOrgID,\r\n    groupID: thread.externalOrgID,\r\n    total: thread.messagesCountExcludingDeleted,\r\n    userMessages: thread.userMessagesCount,\r\n    actionMessages: thread.actionMessagesCount,\r\n    deletedMessages:\r\n      thread.allMessagesCount - thread.messagesCountExcludingDeleted,\r\n    resolved: thread.resolved,\r\n    resolvedTimestamp: thread.resolvedTimestamp\r\n      ? new Date(thread.resolvedTimestamp)\r\n      : null,\r\n    participants: thread.participants.map((participant) => {\r\n      return {\r\n        lastSeenTimestamp: participant.lastSeenTimestamp\r\n          ? new Date(participant.lastSeenTimestamp)\r\n          : null,\r\n        userID: participant.user ? participant.user.externalID : null,\r\n        displayName: participant.user ? participant.user.displayName : null,\r\n      };\r\n    }),\r\n    mentioned: thread.mentioned.map((mention) => mention.externalID),\r\n    subscribers: subscribers,\r\n    repliers: thread.replyingUserIDs.map(\r\n      (u) => userByInternalID(u)?.externalID ?? '',\r\n    ),\r\n    actionMessageRepliers: thread.actionMessageReplyingUserIDs.map(\r\n      (u) => userByInternalID(u)?.externalID ?? '',\r\n    ),\r\n    typing: thread.typingUsers.map((user) => user.externalID),\r\n    name: thread.name ?? '',\r\n    url: thread.url,\r\n    location: thread.location,\r\n    metadata: thread.metadata,\r\n    extraClassnames: thread.extraClassnames,\r\n  };\r\n}\r\n", "import type { UUID } from '@cord-sdk/types';\r\nimport { getMentionedUserIDs } from 'common/util/index.ts';\r\nimport type { RequestContext } from 'server/src/RequestContext.ts';\r\nimport type {\r\n  ThreadFragment,\r\n  UserFragment,\r\n} from 'server/src/schema/operations.ts';\r\nimport { executeUsersQuery } from 'server/src/schema/operations.ts';\r\n\r\nexport function collectNeededUserIDs(thread: ThreadFragment): UUID[] {\r\n  const users = new Set<UUID>();\r\n  thread.replyingUserIDs.forEach((u) => users.add(u));\r\n  thread.actionMessageReplyingUserIDs.forEach((u) => users.add(u));\r\n  thread.initialMessagesInclDeleted.forEach((m) =>\r\n    getMentionedUserIDs(m.content ?? []).forEach((u) => users.add(u)),\r\n  );\r\n  return [...users];\r\n}\r\n\r\nexport async function getUserByInternalIdFunction(\r\n  context: RequestContext,\r\n  userIDs: UUID[],\r\n): Promise<(id: UUID) => UserFragment | undefined> {\r\n  const userGraphQL = await executeUsersQuery({\r\n    context,\r\n    variables: {\r\n      ids: userIDs,\r\n    },\r\n  });\r\n\r\n  const users = new Map<UUID, UserFragment>();\r\n  userGraphQL.users.forEach((u) => users.set(u.id, u));\r\n  return (id: UUID) => users.get(id);\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport type { ClientThreadData } from '@cord-sdk/types';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeThreadByExternalID2Query } from 'server/src/schema/operations.ts';\r\nimport {\r\n  getMessageData,\r\n  getThreadSummary,\r\n} from 'common/util/convertToExternal/thread.ts';\r\nimport {\r\n  collectNeededUserIDs,\r\n  getUserByInternalIdFunction,\r\n} from 'server/src/public/routes/platform/client/util.ts';\r\n\r\n// fetchMore is a function, which we can't return, and summary is deprecated and\r\n// we can safely omit it for this interface\r\ntype RestClientThreadData = Omit<ClientThreadData, 'summary' | 'fetchMore'>;\r\n\r\nasync function getClientThreadHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const initialFetchCount = req.query.initialFetchCount\r\n    ? Number.parseInt(req.query.initialFetchCount as string)\r\n    : undefined;\r\n  if (isNaN(initialFetchCount ?? 0)) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `initialFetchCount must be a number.`,\r\n    });\r\n  }\r\n\r\n  const threadGraphQL = await executeThreadByExternalID2Query({\r\n    context,\r\n    variables: {\r\n      _externalOrgID: undefined,\r\n      input: {\r\n        externalThreadID: req.params.threadID,\r\n      },\r\n      initialFetchCount,\r\n    },\r\n  });\r\n\r\n  if (!threadGraphQL.threadByExternalID2.thread) {\r\n    throw new ApiCallerError('thread_not_found');\r\n  }\r\n\r\n  const thread = threadGraphQL.threadByExternalID2.thread;\r\n\r\n  const userByInternalID = await getUserByInternalIdFunction(\r\n    context,\r\n    collectNeededUserIDs(thread),\r\n  );\r\n\r\n  const messages = thread.initialMessagesInclDeleted.map((message) =>\r\n    getMessageData({ message, thread, userByInternalID }),\r\n  );\r\n  const allMessagesFetched = messages.length === thread.allMessagesCount;\r\n  if (!allMessagesFetched) {\r\n    // By default, our GraphQL queries always return the first message of the\r\n    // thread, along with the last N messages (for whatever N we have loaded).\r\n    // This is useful for our own UI, but is a bit awkward as an API -- the\r\n    // calling code has to know that there can be a \"gap\" between messages[0]\r\n    // and messages[1]. So let's not do that, remove messages[0] to eliminate\r\n    // that gap (unless we have the entire rest of the thread in which case\r\n    // there is no gap).\r\n    messages.shift();\r\n  }\r\n\r\n  const result: RestClientThreadData = {\r\n    thread: getThreadSummary(\r\n      { ...thread, messages: thread.initialMessagesInclDeleted },\r\n      userByInternalID,\r\n    ),\r\n    messages,\r\n    loading: false,\r\n    hasMore: !allMessagesFetched,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientThreadHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport type { ClientMessageData } from '@cord-sdk/types';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeMessageByExternalIDWithThreadQuery } from 'server/src/schema/operations.ts';\r\nimport { getMessageData } from 'common/util/convertToExternal/thread.ts';\r\nimport { getMentionedUserIDs } from 'common/util/index.ts';\r\nimport { getUserByInternalIdFunction } from 'server/src/public/routes/platform/client/util.ts';\r\n\r\nasync function getClientMessageHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const data = await executeMessageByExternalIDWithThreadQuery({\r\n    context,\r\n    variables: {\r\n      _externalOrgID: undefined,\r\n      id: req.params.messageID,\r\n    },\r\n  });\r\n\r\n  if (!data.messageByExternalID) {\r\n    throw new ApiCallerError('message_not_found');\r\n  }\r\n\r\n  const message = data.messageByExternalID;\r\n  const userByInternalID = await getUserByInternalIdFunction(\r\n    context,\r\n    getMentionedUserIDs(message.content ?? []),\r\n  );\r\n\r\n  const result: ClientMessageData = getMessageData({\r\n    message,\r\n    thread: message.thread,\r\n    userByInternalID,\r\n  });\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientMessageHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeThreadActivityQuery } from 'server/src/schema/operations.ts';\r\nimport type { ThreadActivitySummary } from '@cord-sdk/types';\r\nimport { validateFilter } from 'server/src/public/routes/platform/validateQuery.ts';\r\n\r\nasync function getClientThreadCountsHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const { location, metadata, resolvedStatus, groupID, viewer } =\r\n    validateFilter(req.query, {\r\n      location: true,\r\n      metadata: true,\r\n      resolvedStatus: true,\r\n      groupID: true,\r\n      viewer: true,\r\n      firstMessageTimestamp: false,\r\n      mostRecentMessageTimestamp: false,\r\n      authorID: false,\r\n    });\r\n\r\n  const data = await executeThreadActivityQuery({\r\n    context,\r\n    variables: {\r\n      _externalOrgID: groupID,\r\n      pageContext: location\r\n        ? { data: location.value, providerID: null }\r\n        : undefined,\r\n      partialMatch: location?.partialMatch,\r\n      viewer,\r\n      metadata,\r\n      resolved:\r\n        resolvedStatus === 'resolved'\r\n          ? true\r\n          : resolvedStatus === 'unresolved'\r\n          ? false\r\n          : undefined,\r\n    },\r\n  });\r\n\r\n  const activity = data.activity.threadSummary;\r\n\r\n  const result: ThreadActivitySummary = {\r\n    total: activity.totalThreadCount,\r\n    unread: activity.unreadThreadCount,\r\n    new: activity.newThreadCount,\r\n    unreadSubscribed: activity.unreadSubscribedThreadCount,\r\n    resolved: activity.resolvedThreadCount,\r\n    empty: activity.emptyThreadCount,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientThreadCountsHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { unique } from 'radash';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  executeThreadActivityQuery,\r\n  executeThreadListQuery,\r\n} from 'server/src/schema/operations.ts';\r\nimport type { ThreadsData } from '@cord-sdk/types';\r\nimport {\r\n  validateFilter,\r\n  validateInitialFetchCount,\r\n  validateSort,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\nimport { getThreadSummary } from 'common/util/convertToExternal/thread.ts';\r\nimport {\r\n  collectNeededUserIDs,\r\n  getUserByInternalIdFunction,\r\n} from 'server/src/public/routes/platform/client/util.ts';\r\n\r\n// fetchMore is a function, which we can't return\r\ntype RestThreadsData = Omit<ThreadsData, 'fetchMore'>;\r\n\r\nasync function getClientThreadsHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const { location, metadata, resolvedStatus, groupID, viewer } =\r\n    validateFilter(req.query, {\r\n      location: true,\r\n      metadata: true,\r\n      resolvedStatus: true,\r\n      groupID: true,\r\n      viewer: true,\r\n      firstMessageTimestamp: false,\r\n      mostRecentMessageTimestamp: false,\r\n      authorID: false,\r\n    });\r\n\r\n  const sort = validateSort(req.query);\r\n  const limit = validateInitialFetchCount(req.query);\r\n\r\n  const [threadsGraphQL, countsGraphQL] = await Promise.all([\r\n    executeThreadListQuery({\r\n      context,\r\n      variables: {\r\n        _externalOrgID: groupID,\r\n        location: location?.value,\r\n        partialMatch: location?.partialMatch,\r\n        filter: { metadata, viewer },\r\n        resolved:\r\n          resolvedStatus === 'resolved'\r\n            ? true\r\n            : resolvedStatus === 'unresolved'\r\n            ? false\r\n            : undefined,\r\n        sort,\r\n        limit,\r\n        after: undefined,\r\n      },\r\n    }),\r\n    executeThreadActivityQuery({\r\n      context,\r\n      variables: {\r\n        _externalOrgID: groupID,\r\n        pageContext: location\r\n          ? { data: location.value, providerID: null }\r\n          : undefined,\r\n        partialMatch: location?.partialMatch,\r\n        viewer,\r\n        metadata,\r\n        resolved:\r\n          resolvedStatus === 'resolved'\r\n            ? true\r\n            : resolvedStatus === 'unresolved'\r\n            ? false\r\n            : undefined,\r\n      },\r\n    }),\r\n  ]);\r\n\r\n  const userIDs = unique(\r\n    threadsGraphQL.threadsAtLocation.threads.flatMap((t) =>\r\n      collectNeededUserIDs(t),\r\n    ),\r\n  );\r\n  const userByInternalID = await getUserByInternalIdFunction(context, userIDs);\r\n\r\n  const activity = countsGraphQL.activity.threadSummary;\r\n\r\n  const result: RestThreadsData = {\r\n    threads: threadsGraphQL.threadsAtLocation.threads.map((t) =>\r\n      getThreadSummary(\r\n        { ...t, messages: t.initialMessagesInclDeleted },\r\n        userByInternalID,\r\n      ),\r\n    ),\r\n    counts: {\r\n      total: activity.totalThreadCount,\r\n      unread: activity.unreadThreadCount,\r\n      new: activity.newThreadCount,\r\n      unreadSubscribed: activity.unreadSubscribedThreadCount,\r\n      resolved: activity.resolvedThreadCount,\r\n      empty: activity.emptyThreadCount,\r\n    },\r\n    loading: false,\r\n    hasMore: threadsGraphQL.threadsAtLocation.hasMore,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientThreadsHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport { unique } from 'radash';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeNotificationsQuery } from 'server/src/schema/operations.ts';\r\nimport type { ClientNotificationData } from '@cord-sdk/types';\r\nimport { validateFilter } from 'server/src/public/routes/platform/validateQuery.ts';\r\nimport { DEFAULT_NOTIFICATION_INITIAL_PAGE_SIZE } from 'common/const/Api.ts';\r\nimport { getMentionedUserIDs } from 'common/util/index.ts';\r\nimport { getUserByInternalIdFunction } from 'server/src/public/routes/platform/client/util.ts';\r\nimport { gqlNotificationFragmentToNotificationVariables } from 'common/util/convertToExternal/notification.ts';\r\n\r\n// fetchMore is a function, which we can't return\r\ntype RestNotificationData = Omit<ClientNotificationData, 'fetchMore'>;\r\n\r\nasync function getClientNotificationsHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const { location, metadata, groupID } = validateFilter(req.query, {\r\n    location: true,\r\n    metadata: true,\r\n    groupID: true,\r\n    resolvedStatus: false,\r\n    viewer: false,\r\n    firstMessageTimestamp: false,\r\n    mostRecentMessageTimestamp: false,\r\n    authorID: false,\r\n  });\r\n\r\n  const data = await executeNotificationsQuery({\r\n    context,\r\n    variables: {\r\n      first: DEFAULT_NOTIFICATION_INITIAL_PAGE_SIZE,\r\n      after: undefined,\r\n      filter: {\r\n        location: location?.value,\r\n        partialMatch: location?.partialMatch,\r\n        metadata,\r\n        organizationID: groupID,\r\n      },\r\n    },\r\n  });\r\n\r\n  const userIDs = unique(\r\n    data.notifications.nodes.flatMap((n) =>\r\n      n.attachment && 'message' in n.attachment\r\n        ? getMentionedUserIDs(n.attachment.message.content ?? [])\r\n        : [],\r\n    ),\r\n  );\r\n  const userByInternalID = await getUserByInternalIdFunction(context, userIDs);\r\n\r\n  const result: RestNotificationData = {\r\n    notifications: data.notifications.nodes.map((n) =>\r\n      gqlNotificationFragmentToNotificationVariables(n, userByInternalID),\r\n    ),\r\n    loading: false,\r\n    hasMore: data.notifications.paginationInfo.hasNextPage,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientNotificationsHandler);\r\n", "import type {\r\n  CoreNotificationData,\r\n  TranslationParameters,\r\n} from '@cord-sdk/types';\r\nimport type { NotificationsNodeFragment } from 'common/graphql/types.ts';\r\nimport type { UserByInternalIdFn } from 'common/util/convertToExternal/thread.ts';\r\nimport {\r\n  getMessageData,\r\n  getThreadData,\r\n} from 'common/util/convertToExternal/thread.ts';\r\nimport { userToUserData } from 'common/util/convertToExternal/user.ts';\r\n\r\nfunction gqlNotificationFragmentHeaderToNotificationVariables(\r\n  gqlHeader: NotificationsNodeFragment['header'][number],\r\n): CoreNotificationData['header'][number] {\r\n  if ('user' in gqlHeader) {\r\n    return {\r\n      type: 'user',\r\n      userID: gqlHeader.user.externalID,\r\n      user: userToUserData(gqlHeader.user),\r\n    };\r\n  } else if ('text' in gqlHeader) {\r\n    return { type: 'text', text: gqlHeader.text, bold: gqlHeader.bold };\r\n  } else {\r\n    const _: never = gqlHeader;\r\n    return { type: 'text', text: '', bold: false };\r\n  }\r\n}\r\n\r\nfunction gqlNotificationFragmentAttachmentToNotificationVariables(\r\n  gqlAttachment: NotificationsNodeFragment['attachment'],\r\n  userByInternalID: UserByInternalIdFn,\r\n): CoreNotificationData['attachment'] {\r\n  if (!gqlAttachment) {\r\n    return null;\r\n  } else if ('message' in gqlAttachment) {\r\n    return {\r\n      type: 'message',\r\n      messageID: gqlAttachment.message.externalID,\r\n      threadID: gqlAttachment.message.thread.externalID,\r\n      message: getMessageData({\r\n        message: gqlAttachment.message,\r\n        thread: gqlAttachment.message.thread,\r\n        userByInternalID,\r\n      }),\r\n    };\r\n  } else if ('url' in gqlAttachment) {\r\n    return {\r\n      type: 'url',\r\n      url: gqlAttachment.url,\r\n    };\r\n  } else if ('thread' in gqlAttachment) {\r\n    return {\r\n      type: 'thread',\r\n      thread: getThreadData(gqlAttachment.thread, userByInternalID),\r\n    };\r\n  } else {\r\n    const _: never = gqlAttachment;\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function convertGqlNotificationHeaderTranslation(\r\n  gqlNotif: NotificationsNodeFragment,\r\n): CoreNotificationData['headerTranslation'] {\r\n  if (!gqlNotif.headerTranslationKey) {\r\n    return null;\r\n  }\r\n  if (!gqlNotif.headerSimpleTranslationParams) {\r\n    throw new Error('Got notification with translation key but no parameters');\r\n  }\r\n  const parameters: TranslationParameters = {\r\n    ...gqlNotif.headerSimpleTranslationParams,\r\n    senders: gqlNotif.senders.map(userToUserData),\r\n  };\r\n  return {\r\n    key: gqlNotif.headerTranslationKey,\r\n    parameters,\r\n  };\r\n}\r\n\r\nexport function gqlNotificationFragmentToNotificationVariables(\r\n  gqlNotif: NotificationsNodeFragment,\r\n  userByInternalID: UserByInternalIdFn,\r\n): CoreNotificationData {\r\n  return {\r\n    id: gqlNotif.externalID,\r\n    senderUserIDs: gqlNotif.senders.map((u) => u.externalID),\r\n    iconUrl: gqlNotif.iconUrl ?? null,\r\n    header: gqlNotif.header.map(\r\n      gqlNotificationFragmentHeaderToNotificationVariables,\r\n    ),\r\n    headerTranslation: convertGqlNotificationHeaderTranslation(gqlNotif),\r\n    attachment: gqlNotificationFragmentAttachmentToNotificationVariables(\r\n      gqlNotif.attachment,\r\n      userByInternalID,\r\n    ),\r\n    readStatus: gqlNotif.readStatus,\r\n    timestamp:\r\n      typeof gqlNotif.timestamp === 'string'\r\n        ? new Date(gqlNotif.timestamp)\r\n        : gqlNotif.timestamp,\r\n    extraClassnames: gqlNotif.extraClassnames,\r\n    metadata: gqlNotif.metadata,\r\n  };\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeNotificationSummaryQuery } from 'server/src/schema/operations.ts';\r\nimport type { NotificationSummary } from '@cord-sdk/types';\r\nimport { validateFilter } from 'server/src/public/routes/platform/validateQuery.ts';\r\n\r\nasync function getClientNotificationCountsHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const { location, metadata, groupID } = validateFilter(req.query, {\r\n    location: true,\r\n    metadata: true,\r\n    groupID: true,\r\n    resolvedStatus: false,\r\n    viewer: false,\r\n    firstMessageTimestamp: false,\r\n    mostRecentMessageTimestamp: false,\r\n    authorID: false,\r\n  });\r\n\r\n  const data = await executeNotificationSummaryQuery({\r\n    context,\r\n    variables: {\r\n      filter: {\r\n        location: location?.value,\r\n        partialMatch: location?.partialMatch,\r\n        metadata,\r\n        organizationID: groupID,\r\n      },\r\n    },\r\n  });\r\n\r\n  const result: NotificationSummary = {\r\n    unread: data.notificationSummary.unreadNotificationCount,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(\r\n  getClientNotificationCountsHandler,\r\n);\r\n", "import type { Request, Response } from 'express';\r\nimport { forwardHandlerExceptionsToNext } from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport { executeOrgMembersByExtIDPaginatedQuery } from 'server/src/schema/operations.ts';\r\nimport type { GroupMembersData } from '@cord-sdk/types';\r\nimport { DEFAULT_GROUP_MEMBERS_INITIAL_PAGE_SIZE } from 'common/const/Api.ts';\r\nimport { usersToUserData } from 'common/util/convertToExternal/user.ts';\r\n\r\n// fetchMore is a function, which we can't return\r\ntype RestGroupMembersData = Omit<GroupMembersData, 'fetchMore'>;\r\n\r\nasync function getClientGroupMembersHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const data = await executeOrgMembersByExtIDPaginatedQuery({\r\n    context,\r\n    variables: {\r\n      externalOrgID: req.params.groupID,\r\n      limit: DEFAULT_GROUP_MEMBERS_INITIAL_PAGE_SIZE,\r\n      after: undefined,\r\n    },\r\n  });\r\n\r\n  const result: RestGroupMembersData = {\r\n    groupMembers: usersToUserData(data.orgMembersByExternalIDPaginated.users),\r\n    loading: false,\r\n    hasMore: data.orgMembersByExternalIDPaginated.hasMore,\r\n  };\r\n\r\n  return res.status(200).json(result);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientGroupMembersHandler);\r\n", "import type {\r\n  PartialUserLocationData,\r\n  UserLocationData,\r\n} from '@cord-sdk/types';\r\nimport type { PresenceLiveQuerySubscriptionResult } from 'common/graphql/types.ts';\r\nimport { isLocation, toLocation } from 'common/types/index.ts';\r\n\r\nexport function toUserLocationData(\r\n  u: PresenceLiveQuerySubscriptionResult['presenceLiveQuery']['data'][number],\r\n): PartialUserLocationData {\r\n  const result: PartialUserLocationData = {\r\n    id: u.externalUserID,\r\n  };\r\n  if (u.ephemeral) {\r\n    result.ephemeral = {\r\n      locations: u.ephemeral.contexts?.filter(isLocation) ?? null,\r\n    };\r\n  }\r\n  if (u.durable) {\r\n    result.durable = {\r\n      location: toLocation(u.durable.context)!,\r\n      timestamp: new Date(u.durable.timestamp),\r\n    };\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function fillUserLocationData(\r\n  d: PartialUserLocationData,\r\n): UserLocationData {\r\n  return { ...d, ephemeral: { locations: d?.ephemeral?.locations ?? [] } };\r\n}\r\n", "import type { Request, Response } from 'express';\r\nimport {\r\n  ApiCallerError,\r\n  forwardHandlerExceptionsToNext,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { assertRequestHasContext } from 'server/src/RequestContext.ts';\r\nimport {\r\n  extractResult,\r\n  subscribePresenceLiveQuerySubscription,\r\n} from 'server/src/schema/operations.ts';\r\nimport type { UserLocationData } from '@cord-sdk/types';\r\nimport {\r\n  fillUserLocationData,\r\n  toUserLocationData,\r\n} from 'common/util/convertToExternal/presence.ts';\r\nimport {\r\n  validateBooleanValue,\r\n  validateLocationValue,\r\n} from 'server/src/public/routes/platform/validateQuery.ts';\r\n\r\nasync function getClientPresenceHandler(req: Request, res: Response) {\r\n  const context = assertRequestHasContext(req);\r\n\r\n  const excludeDurable = validateBooleanValue(\r\n    req.query,\r\n    'exclude_durable',\r\n    false,\r\n  );\r\n  const exactMatch = !validateBooleanValue(req.query, 'partial_match', false);\r\n  const matcher = validateLocationValue(req.query, 'location');\r\n  if (!matcher) {\r\n    throw new ApiCallerError('invalid_request', {\r\n      message: '\"location\" parameter is required',\r\n    });\r\n  }\r\n\r\n  const subscription = await subscribePresenceLiveQuerySubscription({\r\n    context,\r\n    variables: {\r\n      input: { matcher, excludeDurable, exactMatch },\r\n      _externalOrgID: undefined,\r\n    },\r\n  });\r\n\r\n  // The body of this loop will never run more than once, but putting it into a\r\n  // loop means the loop will call the correct methods on the AsyncIterator to\r\n  // close it out when we return\r\n  for await (const item of subscription) {\r\n    const data = extractResult(item);\r\n    // The first result should always be complete, this is weird\r\n    if (!data.presenceLiveQuery.complete) {\r\n      throw new Error('Unknown error');\r\n    }\r\n    const result: UserLocationData[] = data.presenceLiveQuery.data.map(\r\n      (update) => fillUserLocationData(toUserLocationData(update)),\r\n    );\r\n\r\n    return res.status(200).json(result);\r\n  }\r\n\r\n  // No updates at all?  Just return nothing, I guess\r\n  return res.status(200).json([]);\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(getClientPresenceHandler);\r\n", "import type { Request, Response } from 'express';\r\nimport Pg from 'pg';\r\nimport { to as copyTo } from 'pg-copy-streams';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport type { DatabaseConfig } from 'server/src/util/readReplicaDatabase.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { getReadReplicaDbConfigFromEnv } from 'server/src/util/readReplicaDatabase.ts';\r\n\r\nasync function GetDbDumpHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n\r\n  res.statusCode = 200;\r\n  res.setHeader('Content-type', 'text/plain');\r\n\r\n  try {\r\n    await streamPartialDump(\r\n      res,\r\n      getReadReplicaDbConfigFromEnv(env),\r\n      customerID,\r\n    );\r\n  } catch (err) {\r\n    res.write(`\\n\\n-- ${err}\\n`);\r\n  }\r\n  res.end();\r\n}\r\n\r\n// *****************************************************************************\r\n// The code below here is copied from server/src/admin/databaseDump/index.ts and\r\n// then unceremoniously hacked up to produce a version that dumps data we care\r\n// about by customer.  If you want a principled and maintainable database dump,\r\n// go look over there.\r\n// *****************************************************************************\r\n\r\nconst { escapeIdentifier } = Pg.Client.prototype;\r\n\r\nconst tableHandling: Record<\r\n  string,\r\n  ((alias: string, customerID: string) => string) | 'ignore' | undefined\r\n> = {\r\n  console_users: (alias, customerID) =>\r\n    `${alias}.\"customerID\" = '${customerID}' OR ${alias}.\"pendingCustomerID\" = '${customerID}'`,\r\n  users: (alias, customerID) =>\r\n    `${alias}.\"platformApplicationID\" IS NOT NULL\r\n      OR (\r\n        ${alias}.\"platformApplicationID\" IS NULL\r\n        AND (\r\n          -- Include Slack users that have sent a message\r\n          ${alias}.id IN (\r\n            SELECT \"sourceID\" FROM messages m\r\n              INNER JOIN applications a ON m.\"platformApplicationID\" = a.id\r\n            WHERE a.\"customerID\" = '${customerID}')\r\n          -- ...and Slack users that a platform user has linked to\r\n          OR ${alias}.id IN (\r\n            SELECT \"linkedUserID\" FROM linked_users lu\r\n              INNER JOIN users u ON lu.\"sourceUserID\" = u.id\r\n              INNER JOIN applications a ON u.\"platformApplicationID\" = a.id\r\n            WHERE a.\"customerID\" = '${customerID}')\r\n          -- ...and Slack users that have notifications\r\n          OR ${alias}.id IN (\r\n            SELECT \"recipientID\" FROM notifications n\r\n              INNER JOIN applications a ON n.\"platformApplicationID\" = a.id\r\n            WHERE a.\"customerID\" = '${customerID}')))`,\r\n  orgs: (alias, customerID) => `${alias}.\"platformApplicationID\" IS NOT NULL\r\n    OR (\r\n      ${alias}.\"platformApplicationID\" IS NULL\r\n      AND ${alias}.id IN (\r\n        SELECT \"linkedOrgID\" FROM linked_orgs lo\r\n          INNER JOIN orgs o ON lo.\"sourceOrgID\" = o.id\r\n          INNER JOIN applications a ON o.\"platformApplicationID\" = a.id\r\n        WHERE a.\"customerID\" = '${customerID}'))`,\r\n  linked_users: (alias, customerID) => `${alias}.\"sourceUserID\" IN (\r\n      SELECT u.id FROM users u\r\n        INNER JOIN applications a ON u.\"platformApplicationID\" = a.id\r\n      WHERE a.\"customerID\" = '${customerID}')`,\r\n  linked_orgs: (alias, customerID) => `${alias}.\"sourceOrgID\" IN (\r\n      SELECT o.id FROM orgs o\r\n        INNER JOIN applications a ON o.\"platformApplicationID\" = a.id\r\n      WHERE a.\"customerID\" = '${customerID}')`,\r\n\r\n  // Contains customer secrets for their s3_buckets, don't include\r\n  s3_buckets: 'ignore',\r\n\r\n  // Big tables that we don't need.\r\n  events: 'ignore',\r\n  application_usage_metrics: 'ignore',\r\n  sessions: 'ignore',\r\n\r\n  // Tables that are irrelevant for customers\r\n  deploys: 'ignore',\r\n  org_org_members: 'ignore',\r\n  permission_rules: 'ignore',\r\n  admin_go_redirects: 'ignore',\r\n  admin_crt_customer_issues: 'ignore',\r\n  admin_crt_customer_issue_changes: 'ignore',\r\n  admin_crt_customer_issue_subscriptions: 'ignore',\r\n  warm_demo_users: 'ignore',\r\n  external_assets: 'ignore',\r\n  image_variants: 'ignore',\r\n  slack_channels: 'ignore',\r\n\r\n  // The existing email notifications can't possibly be responded to, they'll be\r\n  // responding to us, not them, so don't export them\r\n  email_notifications: 'ignore',\r\n};\r\n\r\nconst firstTables = [\r\n  'customers',\r\n  'applications',\r\n  'users',\r\n  'orgs',\r\n  'threads',\r\n  'messages',\r\n  'tasks',\r\n  'task_todos',\r\n];\r\n\r\nconst ignoredColumns = ['supportBotID', 'supportOrgID'];\r\n\r\nasync function streamPartialDump(\r\n  output: NodeJS.WritableStream,\r\n  dbconfig: DatabaseConfig,\r\n  customerID: string,\r\n) {\r\n  // Connect to the database\r\n  const pg = new Pg.Client(dbconfig);\r\n  await pg.connect();\r\n\r\n  try {\r\n    // Make sure all commands see the contents of both the `cord` and the `public`\r\n    // schema\r\n    await pg.query('SET search_path=cord,public;');\r\n\r\n    // Start a read-only transaction. The specific type of transaction is one\r\n    // suited for long-running backup operations, like this one.\r\n    // From `https://www.postgresql.org/docs/12/sql-set-transaction.html`:\r\n    // > The DEFERRABLE transaction property has no effect unless the transaction\r\n    // > is also SERIALIZABLE and READ ONLY. When all three of these properties\r\n    // > are selected for a transaction, the transaction may block when first\r\n    // > acquiring its snapshot, after which it is able to run without the normal\r\n    // > overhead of a SERIALIZABLE transaction and without any risk of\r\n    // > contributing to or being canceled by a serialization failure. This mode\r\n    // > is well suited for long-running reports or backups.\r\n    //\r\n    // If we are configured to hit a read-only Aurora replica, it will not let us\r\n    // use SERIALIZABLE transactions. Being connected to a read-only endpoint, we\r\n    // don't need to worry about serialization failures, so a REPEATABLE READ\r\n    // transaction is fine.\r\n    await pg\r\n      .query(\r\n        'BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE;',\r\n      )\r\n      .catch((error) => {\r\n        if (\r\n          error.toString() ===\r\n          'error: cannot use serializable mode in a hot standby'\r\n        ) {\r\n          return pg.query(\r\n            'BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ READ ONLY;',\r\n          );\r\n        } else {\r\n          return Promise.reject(error);\r\n        }\r\n      });\r\n\r\n    output.write('BEGIN;\\n\\n');\r\n    await streamPartialDumpImpl(output, pg, customerID);\r\n    output.write('\\n\\nCOMMIT;\\n');\r\n  } finally {\r\n    pg.end().catch(\r\n      anonymousLogger().exceptionLogger('pg.end() threw exception'),\r\n    );\r\n  }\r\n}\r\n\r\nasync function streamPartialDumpImpl(\r\n  output: NodeJS.WritableStream,\r\n  pg: Pg.Client,\r\n  customerID: string,\r\n) {\r\n  // Get a list of tables in the cord schema. The `tables` map will contain\r\n  // values with fields `oid` (numerical identifier of the table), `name`,\r\n  // `columns` (list of column name strings). We also put an empty list of\r\n  // foreign keys in those objects (`fkeys`), which we will populate in the next\r\n  // step. And we copy over the `additionalConstraint` if there is one defined\r\n  // for this table at the top of this file.\r\n  const tables = new Map<number, Table>();\r\n  for (const row of (\r\n    await pg.query(`\r\n      WITH \"attributes\" AS (\r\n          SELECT\r\n              attrelid,\r\n              jsonb_agg(attname::text ORDER BY attnum) AS attributes\r\n          FROM pg_catalog.pg_attribute\r\n          WHERE attnum >= 1\r\n          AND NOT attisdropped\r\n          AND attgenerated != 's'\r\n          GROUP BY attrelid\r\n      )\r\n      SELECT\r\n          cls.oid::int4 AS oid,\r\n          cls.relname AS name,\r\n          COALESCE(attributes.attributes, '[]'::jsonb) AS columns\r\n      FROM pg_catalog.pg_class cls\r\n      LEFT OUTER JOIN attributes ON cls.oid = attributes.attrelid\r\n      WHERE relnamespace='cord'::regnamespace AND relkind='r';`)\r\n  ).rows) {\r\n    tables.set(row.oid, {\r\n      ...row,\r\n      fkeys: [],\r\n      handling: tableHandling[row.name] ?? null,\r\n    });\r\n  }\r\n\r\n  // Get all foreign keys. For each declared foreign key relationship, we add\r\n  // one `ForeignKey` object to the `Table.fkeys` array, which contains the\r\n  // referenced table, the names of the columns containing the foreign key\r\n  // fields in this table, the corresponding column names in the referenced\r\n  // table, and also the comparison\r\n  // operator (typically `=`).\r\n  for (const row of (\r\n    await pg.query(`\r\n      SELECT\r\n        constraints.conrelid AS \"tableOid\",\r\n        constraints.confrelid AS \"referencedTableOid\",\r\n        ARRAY_AGG(jsonb_build_object(\r\n          'column', fatt.attname::text,\r\n          'nullable', NOT fatt.attnotnull\r\n        )) AS fkey,\r\n        ARRAY_AGG(ratt.attname::text) AS rkey\r\n      FROM\r\n        (SELECT\r\n            conrelid,\r\n            confrelid,\r\n            UNNEST(conkey) AS conkey,\r\n            UNNEST(confkey) AS confkey\r\n          FROM pg_catalog.pg_constraint\r\n          WHERE contype='f'\r\n        ) AS constraints\r\n        INNER JOIN pg_catalog.pg_attribute fatt\r\n          ON fatt.attnum=conkey AND fatt.attrelid=conrelid\r\n        INNER JOIN pg_catalog.pg_attribute ratt\r\n          ON ratt.attnum=confkey AND ratt.attrelid=confrelid\r\n        GROUP BY 1, 2;`)\r\n  ).rows) {\r\n    const table = tables.get(row.tableOid);\r\n    const referencedTable = tables.get(row.referencedTableOid);\r\n    if (table && referencedTable) {\r\n      const keys = (\r\n        row.fkey as Array<{\r\n          column: string;\r\n          nullable: boolean;\r\n        }>\r\n      )\r\n        .map(({ column, nullable }, idx) => ({\r\n          column,\r\n          nullable,\r\n          referencedColumn: row.rkey[idx] as string,\r\n          operator: '=',\r\n        }))\r\n        .filter(({ column }) => !ignoredColumns.includes(column));\r\n      if (keys.length) {\r\n        const nullable =\r\n          keys.some(({ nullable: keyIsNullable }) => keyIsNullable) &&\r\n          // HACK: the notifications table has complex checks that this script\r\n          // doesn't understand to know what rows to pull. However, those checks\r\n          // more-or-less have the property that if an fkey column is non-null,\r\n          // it needs to remain non-null, so we can just treat all of the notif\r\n          // table's fkeys as non-nullable.\r\n          table.name !== 'notifications';\r\n\r\n        table.fkeys.push({\r\n          referencedTable,\r\n          nullable,\r\n          keys,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const sortedTables = [...tables.values()];\r\n  sortedTables.sort((a, b) => {\r\n    const aIndex = firstTables.indexOf(a.name);\r\n    const bIndex = firstTables.indexOf(b.name);\r\n    if (aIndex === bIndex) {\r\n      return 0;\r\n    }\r\n    if (aIndex === -1 && bIndex !== -1) {\r\n      return 1;\r\n    }\r\n    if (aIndex !== -1 && bIndex === -1) {\r\n      return -1;\r\n    }\r\n    return aIndex - bIndex;\r\n  });\r\n\r\n  // Now copy the table data!\r\n  for (const table of sortedTables) {\r\n    await dumpTable(output, pg, table, customerID);\r\n  }\r\n\r\n  // We don't need the database anymore. Close the transaction.\r\n  await pg.query('ROLLBACK');\r\n\r\n  // When foreign key columns are nullable, we don't restrict the rows of a\r\n  // table to those that reference rows that are also copied. Instead we now set\r\n  // those columns to NULL for rows that reference foreign rows we did not copy.\r\n  for (const table of tables.values()) {\r\n    if (table.handling === 'ignore') {\r\n      continue;\r\n    }\r\n    for (const fkey of table.fkeys) {\r\n      if (fkey.nullable) {\r\n        output.write(\r\n          `\\\\echo Fixing dangling foreign keys in ${table.name} (${fkey.keys\r\n            .map(({ column }) => column)\r\n            .join(', ')})\\n`,\r\n        );\r\n        output.write(`UPDATE ${escapeIdentifier(table.name)} AS _t SET `);\r\n        output.write(\r\n          fkey.keys\r\n            .filter(({ nullable }) => nullable)\r\n            .map(({ column }) => `${escapeIdentifier(column)}=NULL`)\r\n            .join(', '),\r\n        );\r\n        output.write(` WHERE NOT (${foreignKeyNullCheck('_t', fkey.keys)})`);\r\n        output.write(\r\n          ` AND (${fkey.keys\r\n            .map(({ column }) => `_t.${escapeIdentifier(column)}`)\r\n            .join(', ')}) NOT IN (SELECT ${fkey.keys\r\n            .map(({ referencedColumn }) => escapeIdentifier(referencedColumn))\r\n            .join(', ')} FROM ${escapeIdentifier(\r\n            fkey.referencedTable.name,\r\n          )});\\n`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // Our work is done.\r\n}\r\n\r\ntype Table = {\r\n  oid: number;\r\n  name: string;\r\n  columns: string[];\r\n  fkeys: ForeignKey[];\r\n  handling: ((alias: string, customerID: string) => string) | 'ignore' | null;\r\n};\r\ntype ForeignKey = {\r\n  referencedTable: Table;\r\n  keys: ForeignKeyColumn[];\r\n  nullable: boolean;\r\n};\r\ntype ForeignKeyColumn = {\r\n  column: string;\r\n  nullable: boolean;\r\n  referencedColumn: string;\r\n  operator: string;\r\n};\r\n\r\nlet serial = 1337;\r\nasync function dumpTable(\r\n  output: NodeJS.WritableStream,\r\n  pg: Pg.Client,\r\n  table: Table,\r\n  customerID: string,\r\n) {\r\n  const alias = `t_${serial++}`;\r\n  const foreignKeys = resolveForeignKeys(table, customerID, alias, []);\r\n  if (!foreignKeys) {\r\n    return;\r\n  }\r\n  const start = performance.now();\r\n  const { joins, where } = foreignKeys;\r\n\r\n  const query = `SELECT\r\n     ${table.columns.map((n) => `${alias}.${escapeIdentifier(n)}`).join(', ')}\r\n     FROM ${escapeIdentifier(table.name)} ${alias}\r\n     ${joins.join('\\n')}\r\n     ${where ? 'WHERE ' : ''}${where}`;\r\n\r\n  output.write(\r\n    `\\\\echo Loading data into table ${table.name}...\r\n-- ${query.replace(/\\n/g, '\\n-- ')};\r\n     \\n\\nCOPY ${escapeIdentifier(table.name)} (${table.columns\r\n       .map(escapeIdentifier)\r\n       .join(', ')}) FROM stdin;\\n`,\r\n  );\r\n\r\n  await dumpData(pg, query, output);\r\n\r\n  output.write('\\\\.\\n\\n');\r\n  output.write(\r\n    `-- Elapsed time for ${table.name}: ${Math.round(\r\n      performance.now() - start,\r\n    )}ms\\n\\n\\n`,\r\n  );\r\n}\r\n\r\nfunction resolveForeignKeys(\r\n  table: Table,\r\n  customerID: string,\r\n  alias: string,\r\n  visitedTables: Table[],\r\n): { joins: string[]; where: string } | undefined {\r\n  if (table.handling === 'ignore') {\r\n    return undefined;\r\n  }\r\n\r\n  if (table.name === 'customers') {\r\n    const where = `${alias}.id = '${customerID}'`;\r\n    return { joins: [], where };\r\n  }\r\n\r\n  // notifications foreign keys to half a dozen tables, but we can make it way\r\n  // more efficient by just checking if it's part of the proper application\r\n  if (table.name === 'notifications') {\r\n    const referencedAlias = `j_${serial++}`;\r\n    return {\r\n      joins: [\r\n        `LEFT OUTER JOIN applications ${referencedAlias}\r\n    ON (${alias}.\"platformApplicationID\" = ${referencedAlias}.id)`,\r\n      ],\r\n      where: `${referencedAlias}.\"customerID\" = '${customerID}'`,\r\n    };\r\n  }\r\n\r\n  if (visitedTables.includes(table)) {\r\n    anonymousLogger().warn(\r\n      `Foreign keys self-join: ${visitedTables\r\n        .map((t) => t.name)\r\n        .join(', ')} => ${table.name}`,\r\n    );\r\n    return { where: '', joins: [] };\r\n  }\r\n  visitedTables = [...visitedTables, table];\r\n\r\n  const where: string[] = [];\r\n  const joins: string[] = [];\r\n\r\n  if (table.handling) {\r\n    where.push(`(${table.handling(alias, customerID)})`);\r\n  }\r\n\r\n  for (const { referencedTable, keys } of table.fkeys) {\r\n    if (\r\n      referencedTable.name === 'customers' &&\r\n      keys.length === 1 &&\r\n      keys[0].referencedColumn === 'id'\r\n    ) {\r\n      // If the foreign key references `customers.id`, we don't have to do the\r\n      // join at all, we can check the foreign key itself.\r\n      if (keys[0].nullable) {\r\n        where.push(\r\n          `(\r\n            ${alias}.${escapeIdentifier(keys[0].column)} IS NULL OR\r\n            ${alias}.${escapeIdentifier(keys[0].column)} = '${customerID}')`,\r\n        );\r\n      } else {\r\n        where.push(\r\n          `${alias}.${escapeIdentifier(keys[0].column)} = '${customerID}'`,\r\n        );\r\n      }\r\n    } else if (referencedTable.handling !== 'ignore') {\r\n      const referencedAlias = `j_${serial++}`;\r\n      const foreignKeys = resolveForeignKeys(\r\n        referencedTable,\r\n        customerID,\r\n        referencedAlias,\r\n        visitedTables,\r\n      );\r\n      if (!foreignKeys) {\r\n        return undefined;\r\n      }\r\n      const { where: fwhere, joins: fjoins } = foreignKeys;\r\n      if (fwhere) {\r\n        joins.push(`LEFT OUTER JOIN ${escapeIdentifier(\r\n          referencedTable.name,\r\n        )} ${referencedAlias}\r\n    ON (${keys\r\n      .map(\r\n        ({ column, referencedColumn, operator }) =>\r\n          `${alias}.${escapeIdentifier(\r\n            column,\r\n          )} ${operator} ${referencedAlias}.${escapeIdentifier(\r\n            referencedColumn,\r\n          )}`,\r\n      )\r\n      .join(' AND ')})`);\r\n        joins.push(...fjoins);\r\n\r\n        if (keys.some((k) => k.nullable)) {\r\n          where.push(`(${foreignKeyNullCheck(alias, keys)} OR (${fwhere}))`);\r\n        } else {\r\n          where.push(fwhere);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { where: where.join(' AND '), joins };\r\n}\r\n\r\nfunction foreignKeyNullCheck(alias: string, keys: ForeignKeyColumn[]) {\r\n  return keys.length === 0\r\n    ? 'FALSE'\r\n    : keys.length === 1\r\n    ? `${alias}.${escapeIdentifier(keys[0].column)} IS NULL`\r\n    : 'num_nulls(' +\r\n      keys\r\n        .map(({ column }) => `${alias}.${escapeIdentifier(column)}`)\r\n        .join(', ') +\r\n      ') > 0';\r\n}\r\n\r\nfunction dumpData(pg: Pg.Client, query: string, output: NodeJS.WritableStream) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const stream = pg.query(copyTo(`COPY (${query}) TO STDOUT;`));\r\n    //stream.pipe(output);\r\n    stream.on('end', resolve);\r\n    stream.on('error', reject);\r\n    stream.on('data', (chunk) => output.write(chunk));\r\n  });\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(GetDbDumpHandler);\r\n", "import {\r\n  CopyObjectCommand,\r\n  ListObjectsV2Command,\r\n  S3Client,\r\n} from '@aws-sdk/client-s3';\r\nimport type { Request, Response } from 'express';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport {\r\n  forwardHandlerExceptionsToNext,\r\n  ApiCallerError,\r\n} from 'server/src/public/routes/platform/util.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type {\r\n  S3BucketConfig,\r\n  S3BucketConfigWithCredentials,\r\n} from 'server/src/files/upload.ts';\r\nimport type { UUID } from '@cord-sdk/types';\r\nimport { S3BucketEntity } from 'server/src/entity/s3_bucket/S3BucketEntity.ts';\r\n\r\nconst DEFAULT_LIMIT = 10;\r\nconst MAX_LIMIT = 1000;\r\n\r\nasync function CopyFilesHandler(req: Request, res: Response) {\r\n  const customerID = req.customerID;\r\n  if (!customerID) {\r\n    throw new ApiCallerError('invalid_access_token');\r\n  }\r\n  const region = req.query['region'];\r\n  if (typeof region !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'The region field must be a string',\r\n    });\r\n  }\r\n  const bucket = req.query['bucket'];\r\n  if (typeof bucket !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'The bucket field must be a string',\r\n    });\r\n  }\r\n\r\n  const limitString = req.query['limit'];\r\n  if (limitString && typeof limitString !== 'string') {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: 'Invalid copy limit',\r\n    });\r\n  }\r\n  const limit = limitString ? parseInt(limitString, 10) : DEFAULT_LIMIT;\r\n  if (limit <= 0 || MAX_LIMIT < limit) {\r\n    throw new ApiCallerError('invalid_field', {\r\n      message: `The limit must be between 1 and ${MAX_LIMIT}`,\r\n    });\r\n  }\r\n\r\n  const applications = await ApplicationEntity.findAll({\r\n    where: { customerID },\r\n  });\r\n\r\n  const destClient = new S3Client({\r\n    region,\r\n    endpoint: env.S3_ENDPOINT.replace('<REGION>', region),\r\n  });\r\n\r\n  const [files, s3Contents] = await Promise.all([\r\n    FileEntity.findAll({\r\n      where: {\r\n        platformApplicationID: applications.map((a) => a.id),\r\n        uploadStatus: 'uploaded',\r\n      },\r\n    }),\r\n    getAllFilesFromBucket(destClient, bucket),\r\n  ]);\r\n\r\n  const filesToCopy = files.filter((f) => !s3Contents.has(f.id));\r\n  const credentialsCache = new Map<UUID, S3BucketConfigWithCredentials>();\r\n\r\n  let copied = 0;\r\n\r\n  // Try one copy first, in case we don't have permissions right\r\n  await doCopy(filesToCopy[copied], bucket, credentialsCache);\r\n  copied++;\r\n\r\n  // That succeeded, so now do all the others in parallel\r\n  const promises = [];\r\n  for (; copied < limit && copied < filesToCopy.length; copied++) {\r\n    promises.push(doCopy(filesToCopy[copied], bucket, credentialsCache));\r\n  }\r\n  await Promise.all(promises);\r\n\r\n  return res.status(200).json({\r\n    copied,\r\n  });\r\n}\r\n\r\nasync function doCopy(\r\n  fileToCopy: FileEntity,\r\n  bucket: string,\r\n  credentialsCache: Map<UUID, S3BucketConfigWithCredentials>,\r\n) {\r\n  const config = await getConfigForCopy(fileToCopy, credentialsCache);\r\n\r\n  const srcClient = new S3Client({\r\n    endpoint: env.S3_ENDPOINT.replace('<REGION>', config.region),\r\n    ...(config.accessKeyID &&\r\n      config.accessKeySecret && {\r\n        credentials: {\r\n          accessKeyId: config.accessKeyID,\r\n          secretAccessKey: config.accessKeySecret,\r\n        },\r\n      }),\r\n  });\r\n  const command = new CopyObjectCommand({\r\n    CopySource: `${config.bucket}/${fileToCopy.id}`,\r\n    Bucket: bucket,\r\n    Key: fileToCopy.id,\r\n  });\r\n  await srcClient.send(command);\r\n}\r\n\r\nasync function getConfigForCopy(\r\n  file: FileEntity,\r\n  credentialsCache: Map<UUID, S3BucketConfigWithCredentials>,\r\n): Promise<S3BucketConfig> {\r\n  if (!file.s3Bucket) {\r\n    return {\r\n      bucket: env.S3_BUCKET,\r\n      region: env.S3_REGION,\r\n    };\r\n  }\r\n  let credentials: S3BucketConfigWithCredentials;\r\n  if (credentialsCache.has(file.s3Bucket)) {\r\n    credentials = credentialsCache.get(file.s3Bucket)!;\r\n  } else {\r\n    const s3Bucket = await S3BucketEntity.findByPk(file.s3Bucket);\r\n    if (!s3Bucket) {\r\n      throw new Error('Could not find S3 bucket config');\r\n    }\r\n    credentials = s3Bucket.getS3BucketConfig_DO_NOT_EXPOSE_TO_CLIENT();\r\n    credentialsCache.set(file.s3Bucket, credentials);\r\n  }\r\n  return credentials;\r\n}\r\n\r\nasync function getAllFilesFromBucket(client: S3Client, bucket: string) {\r\n  const command = new ListObjectsV2Command({\r\n    Bucket: bucket,\r\n  });\r\n\r\n  const files = new Set<string>();\r\n\r\n  let more = true;\r\n  while (more) {\r\n    const response = await client.send(command);\r\n    (response.Contents ?? []).forEach((c) => files.add(c.Key ?? ''));\r\n    if (response.IsTruncated) {\r\n      command.input.ContinuationToken = response.NextContinuationToken;\r\n    } else {\r\n      more = false;\r\n    }\r\n  }\r\n  return files;\r\n}\r\n\r\nexport default forwardHandlerExceptionsToNext(CopyFilesHandler);\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { MessageAttachmentType } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasUser } from 'server/src/auth/index.ts';\r\nimport type {\r\n  MessageAttachmentData,\r\n  MessageFileAttachmentData,\r\n  MessageAnnotationAttachmentData,\r\n  MessageScreenshotAttachmentData,\r\n} from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport type { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\nimport type { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { TaskThirdPartyReference } from 'server/src/entity/task_third_party_reference/TaskThirdPartyReferenceEntity.ts';\r\nimport { addJiraTaskAttachments } from 'server/src/third_party_tasks/jira/actions.ts';\r\nimport { addAsanaTaskAttachments } from 'server/src/third_party_tasks/asana/actions.ts';\r\nimport type { TaskEntity } from 'server/src/entity/task/TaskEntity.ts';\r\nimport { addLinearTaskAttachments } from 'server/src/third_party_tasks/linear/actions.ts';\r\nimport { FileMutator } from 'server/src/entity/file/FileMutator.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { isDefined } from 'common/util/index.ts';\r\nimport { addMondayTaskAttachments } from 'server/src/third_party_tasks/monday/actions.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { CordError } from 'server/src/util/CordError.ts';\r\n\r\nexport class MessageAttachmentMutator {\r\n  logger: Logger;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n  }\r\n\r\n  async setMessageAttachments(\r\n    message: MessageEntity,\r\n    attachments: Array<{\r\n      id: UUID;\r\n      type: MessageAttachmentType;\r\n      data: MessageAttachmentData;\r\n    }>,\r\n  ) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n\r\n    if (message.sourceID !== userID) {\r\n      throw new Error('You can only attach files to your own message.');\r\n    }\r\n\r\n    const oldAttachments = await MessageAttachmentEntity.findAll({\r\n      where: { messageID: message.id },\r\n    });\r\n\r\n    const oldAttachmentIDs = new Set(\r\n      oldAttachments.map((attachment) => attachment.id),\r\n    );\r\n\r\n    const newAttachmentIDs = new Set(\r\n      attachments.map((attachment) => attachment.id),\r\n    );\r\n\r\n    const attachmentsToCreate = attachments.filter(\r\n      (attachment) => !oldAttachmentIDs.has(attachment.id),\r\n    );\r\n\r\n    const attachmentIDsToDelete = oldAttachments\r\n      .filter((oldAttachment) => !newAttachmentIDs.has(oldAttachment.id))\r\n      .map((attachment) => {\r\n        return {\r\n          attachmentID: attachment.id,\r\n          // TODO(flooey): We used to delete files when their associated\r\n          // attachments were deleted, but that makes our public APIs for\r\n          // writing attachments annoying to use, because they look like you can\r\n          // use the same file multiple times and it mostly works, but if you\r\n          // delete an attachment the file isn't valid anymore and any other\r\n          // uses of it break.  Instead, just leave the files there, and we can\r\n          // garbage collect them later.\r\n          fileIDs:\r\n            attachment.type === MessageAttachmentType.FILE\r\n              ? []\r\n              : attachment.getFileIDs(),\r\n        };\r\n      });\r\n    const deleted = await Promise.all(\r\n      attachmentIDsToDelete.map((attachmentId) =>\r\n        this.deleteAttachment(attachmentId, message),\r\n      ),\r\n    );\r\n    const deletedAttachmentsCount = deleted.filter(\r\n      (result) => result === true,\r\n    ).length;\r\n\r\n    const fileIDs = attachmentsToCreate\r\n      .map((attachment) => {\r\n        switch (attachment.type) {\r\n          case MessageAttachmentType.FILE:\r\n            return (attachment.data as MessageFileAttachmentData).fileID;\r\n          case MessageAttachmentType.ANNOTATION:\r\n            return (attachment.data as MessageAnnotationAttachmentData)\r\n              .screenshotFileID;\r\n          case MessageAttachmentType.SCREENSHOT:\r\n            return (attachment.data as MessageScreenshotAttachmentData)\r\n              .screenshotFileID;\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      })\r\n      .filter(isDefined);\r\n\r\n    let files: FileEntity[] = [];\r\n    if (fileIDs.length > 0) {\r\n      files = await this.loaders.fileLoader.loadFiles(fileIDs);\r\n\r\n      if (files.length !== fileIDs.length) {\r\n        // this is lazy catch-all error in case not all user-provided file IDs are\r\n        // visible to them (bad scenario).\r\n        throw new CordError('Not all attached files were loaded.', {\r\n          files: JSON.stringify(files),\r\n          fileIDs,\r\n        });\r\n      }\r\n\r\n      for (const file of files) {\r\n        if (file.userID !== userID) {\r\n          throw new Error('You can only attach your own files to a message.');\r\n        }\r\n      }\r\n    }\r\n\r\n    // at this point we've confirmed that all file attachments are visible and correct\r\n    const createdAttachments = await Promise.all([\r\n      ...attachmentsToCreate.map((attachment) =>\r\n        MessageAttachmentEntity.create({\r\n          messageID: message.id,\r\n          id: attachment.id,\r\n          type: attachment.type,\r\n          data: attachment.data,\r\n        }),\r\n      ),\r\n    ]);\r\n\r\n    await this.attachFilesToExternalTasksFromMessage(message, files);\r\n\r\n    return [deletedAttachmentsCount, createdAttachments, files] as const;\r\n  }\r\n\r\n  private async deleteAttachment(\r\n    { attachmentID, fileIDs }: { attachmentID: UUID; fileIDs: UUID[] },\r\n    message: MessageEntity,\r\n  ) {\r\n    const deleted = await MessageAttachmentEntity.destroy({\r\n      where: {\r\n        messageID: message.id,\r\n        id: attachmentID,\r\n      },\r\n    });\r\n\r\n    if (fileIDs.length > 0) {\r\n      const mutator = new FileMutator(this.viewer, this.loaders);\r\n      await Promise.all(fileIDs.map((f) => mutator.deleteFile(f)));\r\n    }\r\n\r\n    return deleted === 1;\r\n  }\r\n\r\n  private async attachFilesToExternalTasksFromMessage(\r\n    message: MessageEntity,\r\n    files: FileEntity[],\r\n  ) {\r\n    if (files.length === 0) {\r\n      return;\r\n    }\r\n    const task = await this.loaders.taskLoader.loadTaskForMessageNoOrgCheck(\r\n      message.id,\r\n    );\r\n    if (!task) {\r\n      return;\r\n    }\r\n    return await this.attachFilesToExternalTasks(task, files);\r\n  }\r\n\r\n  public async attachFilesToExternalTasks(\r\n    task: TaskEntity,\r\n    files: FileEntity[],\r\n  ) {\r\n    if (files.length === 0) {\r\n      return;\r\n    }\r\n    const externalReferences = await TaskThirdPartyReference.findAllForTask(\r\n      task.id,\r\n    );\r\n\r\n    return await Promise.all(\r\n      externalReferences.map((externalReference) => {\r\n        switch (externalReference.externalConnectionType) {\r\n          case 'jira':\r\n            return addJiraTaskAttachments(\r\n              this.viewer,\r\n              externalReference.externalID,\r\n              files,\r\n            );\r\n          case 'asana':\r\n            return addAsanaTaskAttachments(\r\n              this.viewer,\r\n              externalReference.externalID,\r\n              files,\r\n            );\r\n          case 'linear':\r\n            return addLinearTaskAttachments(\r\n              this.viewer,\r\n              externalReference.externalID,\r\n              files,\r\n            );\r\n          case 'monday':\r\n            return addMondayTaskAttachments(\r\n              this.viewer,\r\n              externalReference.externalID,\r\n              files,\r\n            );\r\n          default:\r\n            this.logger.info(\r\n              `attaching files to ${externalReference.externalConnectionType} tasks is not supported yet`,\r\n            );\r\n            return null;\r\n        }\r\n      }),\r\n    );\r\n  }\r\n}\r\n", "import { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport {\r\n  assertViewerHasPlatformUser,\r\n  assertViewerHasUser,\r\n} from 'server/src/auth/index.ts';\r\nimport { MAX_FILE_UPLOADING_TIME_SECONDS } from 'common/const/Timing.ts';\r\nimport { MessageAttachmentLoader } from 'server/src/entity/message_attachment/MessageAttachmentLoader.ts';\r\nimport { TaskLoader } from 'server/src/entity/task/TaskLoader.ts';\r\nimport type { FileUploadStatus } from 'server/src/schema/resolverTypes.ts';\r\nimport { FileLoader } from 'server/src/entity/file/FileLoader.ts';\r\nimport { S3BucketLoader } from 'server/src/entity/s3_bucket/S3BucketLoader.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nimport { MessageAttachmentMutator } from 'server/src/entity/message_attachment/MessageAttachmentMutator.ts';\r\nimport type { RequestContextLoaders } from 'server/src/RequestContextLoaders.ts';\r\nimport { MessageAttachmentEntity } from 'server/src/entity/message_attachment/MessageAttachmentEntity.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\nimport { publishPubSubEvent } from 'server/src/pubsub/index.ts';\r\nimport { MessageEntity } from 'server/src/entity/message/MessageEntity.ts';\r\n\r\nexport class FileMutator {\r\n  logger: Logger;\r\n\r\n  constructor(\r\n    private viewer: Viewer,\r\n    private loaders: RequestContextLoaders,\r\n  ) {\r\n    this.logger = new Logger(viewer);\r\n  }\r\n\r\n  async createFileForUpload(\r\n    id: UUID,\r\n    name: string,\r\n    mimeType: string,\r\n    size: number,\r\n    uploadStatus?: FileUploadStatus,\r\n  ): Promise<FileEntity> {\r\n    const { userID, platformApplicationID } = assertViewerHasPlatformUser(\r\n      this.viewer,\r\n    );\r\n    const application = await this.loaders.applicationLoader.load(\r\n      platformApplicationID,\r\n    );\r\n\r\n    // ignoreDuplicates is only supported for bulkCreate\r\n    const file = (\r\n      await FileEntity.bulkCreate(\r\n        [\r\n          {\r\n            id,\r\n            name,\r\n            mimeType,\r\n            size,\r\n            userID,\r\n            platformApplicationID,\r\n            uploadStatus: uploadStatus || 'uploading',\r\n            s3Bucket: application?.customS3Bucket,\r\n          },\r\n        ],\r\n        {\r\n          // in case the request is retried - no need to error\r\n          ignoreDuplicates: true,\r\n        },\r\n      )\r\n    )[0];\r\n\r\n    // If the `uploadStatus` is still `UPLOADING` in\r\n    // `MAX_FILE_UPLOADING_TIME_SECONDS`, then set the file's `uploadStatus`\r\n    // to `CANCELLED`.\r\n    setTimeout(() => {\r\n      backgroundPromise(\r\n        (async () => {\r\n          try {\r\n            const [updated] = await FileEntity.update(\r\n              { uploadStatus: 'cancelled' },\r\n              {\r\n                where: {\r\n                  id,\r\n                  userID,\r\n                  uploadStatus: 'uploading',\r\n                },\r\n              },\r\n            );\r\n            if (updated > 0) {\r\n              // If we actually cancelled the file upload, try to find the message\r\n              // it's attached to so we can inform any subscribers that the status\r\n              // changed.\r\n              const attachment = await MessageAttachmentEntity.findOne({\r\n                where: { data: { fileID: id } },\r\n              });\r\n              if (!attachment) {\r\n                return;\r\n              }\r\n              const message = await MessageEntity.findOne({\r\n                where: { id: attachment.messageID },\r\n              });\r\n              if (!message) {\r\n                return;\r\n              }\r\n              backgroundPromise(\r\n                publishPubSubEvent(\r\n                  'thread-message-updated',\r\n                  { threadID: message.threadID },\r\n                  { messageID: message.id },\r\n                ),\r\n                this.logger,\r\n              );\r\n            }\r\n          } catch (e) {\r\n            this.logger.logException('File upload auto-cancel failed', e);\r\n          }\r\n        })(),\r\n      );\r\n    }, MAX_FILE_UPLOADING_TIME_SECONDS * 1000);\r\n    return file;\r\n  }\r\n\r\n  async setFileUploadStatus(\r\n    id: UUID,\r\n    uploadStatus: FileUploadStatus,\r\n    size?: number | null,\r\n  ) {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const [count, updatedEntities] = await FileEntity.update(\r\n      size ? { uploadStatus, size } : { uploadStatus },\r\n      { where: { id, userID }, returning: true },\r\n    );\r\n\r\n    const file = count > 0 ? updatedEntities[0] : null;\r\n    if (file && uploadStatus === 'uploaded') {\r\n      const task = await this.getTaskFromFile(file);\r\n      if (task) {\r\n        await new MessageAttachmentMutator(\r\n          this.viewer,\r\n          this.loaders,\r\n        ).attachFilesToExternalTasks(task, [file]);\r\n      }\r\n    }\r\n\r\n    return file;\r\n  }\r\n\r\n  private async getTaskFromFile(file: FileEntity) {\r\n    const attachment = await new MessageAttachmentLoader(\r\n      this.viewer,\r\n    ).getAttachmentFromFileID(file.id);\r\n    if (!attachment) {\r\n      return null;\r\n    }\r\n\r\n    const message = await this.loaders.messageLoader.loadMessage(\r\n      attachment.messageID,\r\n    );\r\n    if (!message) {\r\n      return null;\r\n    }\r\n\r\n    return await new TaskLoader(this.viewer).loadTaskForMessageNoOrgCheck(\r\n      message.id,\r\n    );\r\n  }\r\n\r\n  async deleteFile(id: UUID): Promise<boolean> {\r\n    const userID = assertViewerHasUser(this.viewer);\r\n    const file = await new FileLoader(this.viewer).loadFile(id);\r\n    const bucketLoader = new S3BucketLoader(this.viewer);\r\n    const deletionURL = await file!.getDeleteURL(bucketLoader);\r\n    const headers = {\r\n      method: 'DELETE',\r\n    };\r\n\r\n    const deleteResponse = await fetch(deletionURL, headers);\r\n\r\n    if (!deleteResponse.ok) {\r\n      this.logger.error(\r\n        `Attachment deletion failed with status ${deleteResponse.status}`,\r\n        { id },\r\n      );\r\n      // TODO: Mark deletion to happen later.\r\n      return false;\r\n    }\r\n    this.logger.info(\r\n      'Deletion request has returned, and there is no longer a file in S3.',\r\n      { id },\r\n    );\r\n    const deletedRows = await FileEntity.destroy({\r\n      where: {\r\n        id,\r\n        userID,\r\n      },\r\n    });\r\n\r\n    return deletedRows === 1;\r\n  }\r\n}\r\n", "import { toHTML } from 'slack-markdown';\r\nimport { JSDOM } from 'jsdom';\r\n\r\nimport {\r\n  createFormattedMessageTextNode,\r\n  createMentionNode,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport type { MessageSlackMentionNode } from 'common/util/paste.ts';\r\nimport {\r\n  cleanPastedNodes,\r\n  deserializeElementToMessageContent,\r\n} from 'common/util/paste.ts';\r\nimport type { MessageContent, MessageNode } from '@cord-sdk/types';\r\nimport { userDisplayName } from 'server/src/entity/user/util.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\n\r\nexport function structuredMessageFromSlackMessage(\r\n  msg: any,\r\n  viewer: Viewer,\r\n): Promise<MessageContent> {\r\n  const { text } = msg;\r\n  if (typeof text === 'string') {\r\n    return structuredMessageFromSlackMrkdwn(text, viewer);\r\n  } else {\r\n    return Promise.resolve([]);\r\n  }\r\n}\r\n\r\ntype SlackMessageNode = MessageNode | MessageSlackMentionNode;\r\ntype SlackMessageContent = SlackMessageNode[];\r\n\r\nasync function replaceSlackMentionsWithUserMentions(\r\n  viewer: Viewer,\r\n  messageContent: SlackMessageContent,\r\n): Promise<MessageContent> {\r\n  const userLoader = new UserLoader(viewer, () => null);\r\n\r\n  const replaceInNode = async (node: SlackMessageNode) => {\r\n    if (node.type === 'slack_mention') {\r\n      const user = await userLoader.loadUserForSlackUserWithinViewerOrg(\r\n        node.slackUserID,\r\n      );\r\n\r\n      if (user) {\r\n        return createMentionNode(user.id, userDisplayName(user));\r\n      } else {\r\n        return createFormattedMessageTextNode({\r\n          text: 'unknown user',\r\n          italic: true,\r\n        }); // this could happen if a user from a Slack connect org is @ mentioned\r\n      }\r\n    }\r\n\r\n    if ('children' in node) {\r\n      const children = node.children;\r\n      const newChildren = await Promise.all(\r\n        children.map((childNode) => replaceInNode(childNode)),\r\n      );\r\n\r\n      node.children = newChildren;\r\n    }\r\n\r\n    return node;\r\n  };\r\n\r\n  const messageChildNodes = await Promise.all(\r\n    messageContent.map((childNode) => replaceInNode(childNode)),\r\n  );\r\n\r\n  return messageChildNodes;\r\n}\r\n\r\nasync function structuredMessageFromSlackMrkdwn(\r\n  mrkdwn: string,\r\n  viewer: Viewer,\r\n): Promise<MessageContent> {\r\n  // Decoding the html entities slack sends us\r\n  // Only replacing the ones outlined here https://api.slack.com/reference/surfaces/formatting#escaping\r\n  const decodedMrkdwn = mrkdwn\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&amp;/g, '&');\r\n\r\n  const html = toHTML(decodedMrkdwn);\r\n\r\n  const dom = new JSDOM(html);\r\n\r\n  const slackMessageContent: SlackMessageContent =\r\n    deserializeElementToMessageContent(dom.window.document.body, false);\r\n\r\n  const messageWithReplacedMentions =\r\n    await replaceSlackMentionsWithUserMentions(viewer, slackMessageContent);\r\n\r\n  const cleanNodes = cleanPastedNodes(messageWithReplacedMentions);\r\n\r\n  return cleanNodes;\r\n}\r\n\r\nexport function escapeForSlack(text: string) {\r\n  // Slack wants text with precisely these three characters escaped:\r\n  // https://api.slack.com/reference/surfaces/formatting#escaping\r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;');\r\n}\r\n", "import { Text } from 'slate';\r\nimport { jsx } from 'slate-hyperscript';\r\n\r\nimport {\r\n  isMessageNodeType,\r\n  createLinkNode,\r\n} from '@cord-sdk/react/common/lib/messageNode.ts';\r\nimport type { MessageContent, MessageParagraphNode } from '@cord-sdk/types';\r\nimport { replaceAll } from 'common/util/index.ts';\r\nimport type { MessageNode } from 'common/types/index.ts';\r\nimport { MessageNodeType } from 'common/types/index.ts';\r\nimport { trimStart } from '@cord-sdk/react/common/lib/trim.ts';\r\n\r\nconst RICH_CONTENT_TAGS = ['BLOCKQUOTE', 'PRE', 'LI'];\r\n\r\nexport type MessageSlackMentionNode = {\r\n  type: 'slack_mention';\r\n  slackUserID: string;\r\n};\r\n\r\nfunction createSlackMentionNode(slackUserID: string) {\r\n  return {\r\n    type: 'slack_mention',\r\n    slackUserID,\r\n    children: [{ text: slackUserID }],\r\n  };\r\n}\r\n\r\nfunction createElement<\r\n  NodeType extends MessageNodeType,\r\n  NodeAttributes extends MessageNode<NodeType> = MessageNode<NodeType>,\r\n>(\r\n  type: NodeType,\r\n  children: any[],\r\n  nodeAttributes?: Omit<NodeAttributes, 'type' | 'children'>,\r\n) {\r\n  return jsx('element', { type, ...nodeAttributes }, children);\r\n}\r\n\r\nfunction isPLike(elementType: string) {\r\n  return elementType === 'P';\r\n}\r\n\r\nfunction isSlackMention(element: HTMLElement) {\r\n  return (\r\n    element.nodeName === 'SPAN' &&\r\n    element.classList.contains('s-mention') &&\r\n    element.classList.contains('s-user')\r\n  );\r\n}\r\n\r\n// NOTE(flooey): The operation of this works, but it's not compatible with\r\n// TypeScript at all.  This function can return a not-actually-valid message\r\n// content with bare text at the top level and other structural issues, and it\r\n// needs to go through cleanPastedNodes() before it's usable as a message body.\r\n// But we don't do that here because it also can return MessageSlackMentionNodes\r\n// (see above), which aren't part of our message format, but the Slack importing\r\n// machinery will remove them and replace them with normal mentions (see\r\n// server/src/slack/message.ts) before calling cleanPastedNodes().\r\n//\r\n// Ideally, this would all be cleaned up so it does all the transformations at\r\n// once, but here we are.\r\n\r\n// Recursively deserialize HTML\r\nexport function deserializeElementToMessageContent(\r\n  element: HTMLElement,\r\n  excludeRichContent: boolean,\r\n): any {\r\n  return deserializeElement(element, excludeRichContent, [], null);\r\n}\r\n\r\n// We can't use Node constants here because this is shared with server-side\r\n// handling of Slack messages, so create our own constants for them.\r\nconst ELEMENT_NODE = 1; // From Node.ELEMENT_NODE\r\nconst TEXT_NODE = 3; // From Node.TEXT_NODE\r\n\r\nfunction deserializeElement(\r\n  element: HTMLElement,\r\n  excludeRichContent: boolean,\r\n  parentTypes: string[],\r\n  listType: 'UL' | 'OL' | null,\r\n) {\r\n  const { nodeType, nodeName } = element;\r\n\r\n  if (nodeType !== ELEMENT_NODE) {\r\n    return nodeType === TEXT_NODE ? element.textContent : null;\r\n  }\r\n  parentTypes.push(nodeName);\r\n\r\n  if (nodeName === 'OL' || nodeName === 'UL') {\r\n    listType = nodeName;\r\n  }\r\n\r\n  // Deserialize children recursively first\r\n  const childNodes = Array.from(element.childNodes);\r\n\r\n  const children: any[] = childNodes\r\n    .map((childNode) =>\r\n      deserializeElement(\r\n        childNode as HTMLElement,\r\n        excludeRichContent,\r\n        parentTypes,\r\n        listType,\r\n      ),\r\n    )\r\n    .flat();\r\n\r\n  parentTypes.pop();\r\n\r\n  if (isSlackMention(element)) {\r\n    return createSlackMentionNode(\r\n      trimStart((element.textContent ?? '').trim(), '@'),\r\n    );\r\n  }\r\n\r\n  const isParagraphElement =\r\n    isPLike(nodeName) ||\r\n    (excludeRichContent && RICH_CONTENT_TAGS.includes(nodeName));\r\n  const inParagraphAlready = parentTypes.some(\r\n    (x) =>\r\n      isPLike(x) ||\r\n      parentTypes.includes('LI') ||\r\n      (excludeRichContent && RICH_CONTENT_TAGS.includes(x)),\r\n  );\r\n\r\n  if (isParagraphElement) {\r\n    if (!inParagraphAlready) {\r\n      return createElement(MessageNodeType.PARAGRAPH, children);\r\n    } else {\r\n      return children;\r\n    }\r\n  }\r\n\r\n  // Return child\r\n  switch (nodeName) {\r\n    case 'BODY':\r\n      return jsx('fragment', {}, children);\r\n    case 'BLOCKQUOTE':\r\n      return createElement(MessageNodeType.QUOTE, children);\r\n    case 'PRE':\r\n      return createElement(MessageNodeType.CODE, children);\r\n    case 'LI':\r\n      if (listType === 'OL') {\r\n        return createElement(\r\n          MessageNodeType.NUMBER_BULLET,\r\n          [createElement(MessageNodeType.PARAGRAPH, children)],\r\n          {\r\n            bulletNumber: 0, // This will get fixed up by withBullets\r\n            indent:\r\n              parentTypes.filter((p) => p === 'OL' || p === 'UL').length - 1,\r\n          },\r\n        );\r\n      } else {\r\n        return createElement(\r\n          MessageNodeType.BULLET,\r\n          [createElement(MessageNodeType.PARAGRAPH, children)],\r\n          {\r\n            indent:\r\n              parentTypes.filter((p) => p === 'OL' || p === 'UL').length - 1,\r\n          },\r\n        );\r\n      }\r\n    case 'A':\r\n      return !element.getAttribute('href')?.startsWith('http')\r\n        ? children\r\n        : createLinkNode(\r\n            element.getAttribute('href') ?? '',\r\n            element.textContent!,\r\n          );\r\n    case 'BR':\r\n      return { text: '\\n' };\r\n    case 'UL':\r\n    case 'OL':\r\n      return children;\r\n    // We ignore B as google docs treat B as non-bold\r\n    case 'STRONG':\r\n      return { text: element.textContent, bold: true };\r\n    case 'EM':\r\n    case 'I':\r\n      return { text: element.textContent, italic: true };\r\n    case 'U':\r\n      return { text: element.textContent, underline: true };\r\n    default:\r\n      return children;\r\n  }\r\n}\r\n\r\nexport function cleanPastedNodes(nodes: MessageContent, reduceNewlines = true) {\r\n  const mergedNodes = mergeInlineNodesIntoParagraphs(nodes);\r\n  const cleanNodes = [];\r\n  for (const node of mergedNodes) {\r\n    cleanNodes.push(...cleanTopLevelNode(node, reduceNewlines));\r\n  }\r\n  return cleanNodes;\r\n}\r\n\r\nfunction mergeInlineNodesIntoParagraphs(nodes: MessageContent) {\r\n  const mergedNodes = [];\r\n  let nodesToMerge = [];\r\n  for (const node of nodes) {\r\n    const inlineNode =\r\n      !node.type ||\r\n      node.type === MessageNodeType.LINK ||\r\n      node.type === MessageNodeType.MENTION;\r\n    if (inlineNode) {\r\n      nodesToMerge.push(node);\r\n    } else {\r\n      if (nodesToMerge.length) {\r\n        mergedNodes.push({\r\n          type: MessageNodeType.PARAGRAPH,\r\n          children: nodesToMerge,\r\n        });\r\n        nodesToMerge = [];\r\n      }\r\n      mergedNodes.push(node);\r\n    }\r\n  }\r\n  if (nodesToMerge.length) {\r\n    mergedNodes.push({\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: nodesToMerge,\r\n    });\r\n  }\r\n  return mergedNodes;\r\n}\r\n\r\nfunction cleanTopLevelNode(node: any, reduceNewlines: boolean) {\r\n  // Split paragraphs by newline character, stripping out empty newlines\r\n  if (isMessageNodeType(node, MessageNodeType.PARAGRAPH)) {\r\n    const { children } = node;\r\n    const paragraphNode: MessageParagraphNode = {\r\n      type: MessageNodeType.PARAGRAPH,\r\n      children: [],\r\n    };\r\n    const nodes = [paragraphNode];\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    const addToParagraph = (node: any) => {\r\n      nodes[nodes.length - 1].children.push(node);\r\n    };\r\n\r\n    for (const child of children) {\r\n      if (!Text.isText(child)) {\r\n        addToParagraph(child);\r\n        continue;\r\n      }\r\n      const { text, ...otherProps } = child;\r\n      if (text.includes('\\n')) {\r\n        let startChar = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n          const nextChar = text[i + 1];\r\n          if (nextChar === '\\n' || !nextChar) {\r\n            const slice = text.slice(startChar, i + 1);\r\n            if (slice) {\r\n              if (!reduceNewlines || !isEmptyOrNewline(slice)) {\r\n                paragraphNode.children.push({\r\n                  text: slice,\r\n                  ...otherProps,\r\n                });\r\n              }\r\n              startChar = i + 1;\r\n              nodes.push({\r\n                type: MessageNodeType.PARAGRAPH,\r\n                children: [],\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } else if (!isNewlines(child.text)) {\r\n        addToParagraph({ text: child.text, ...otherProps });\r\n      }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow -- Disabling for pre-existing problems. Please do not copy this comment, and consider fixing this one!\r\n    const nodesToAdd = nodes.filter((node) => node.children.length);\r\n    return nodesToAdd.length ? nodesToAdd : [];\r\n  } else {\r\n    const isBullet =\r\n      isMessageNodeType(node, MessageNodeType.BULLET) ||\r\n      isMessageNodeType(node, MessageNodeType.NUMBER_BULLET);\r\n    if (isBullet) {\r\n      // Disallow newlines in bullets\r\n      // Note that bullet children are converted into paragraphs in withBullets function\r\n      for (const child of node.children) {\r\n        if ('text' in child) {\r\n          child.text = replaceAll(child.text, '\\n', '');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return [node];\r\n}\r\n\r\nfunction isEmptyOrNewline(text: string) {\r\n  return text.split('').every((char) => char === ' ' || char === '\\n');\r\n}\r\n\r\nfunction isNewlines(text: string) {\r\n  return text.split('').every((char) => char === '\\n');\r\n}\r\n", "import * as url from 'url';\r\nimport * as Slack from '@slack/web-api';\r\nimport type { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport * as cookie from 'cookie';\r\n\r\nimport env from 'server/src/config/Env.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { encodeSessionToJWT } from 'server/src/auth/encodeSessionToJWT.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport { ADMIN_SERVER_HOST, APP_ORIGIN } from 'common/const/Urls.ts';\r\nimport { getAuthorizationHeaderWithToken } from 'common/auth/index.ts';\r\nimport {\r\n  CORD_SLACK_TEAM_ID,\r\n  SLACK_ADMIN_LOGIN_APP_CLIENT_ID,\r\n  SLACK_ADMIN_LOGIN_APP_ID,\r\n} from 'common/const/Ids.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { UserLoader } from 'server/src/entity/user/UserLoader.ts';\r\n\r\nconst slackClient = new Slack.WebClient();\r\n\r\nexport const SLACK_LOGIN_ROUTE = 'login/slack';\r\n\r\n// there's a weird kink in the Slack openid flow, where redirect URLs with ports in them\r\n// trigger a generic error page, so unfortunately when initiating the login from localhost\r\n// we have to set the redirect URL to admin.cord.com, which then redirects to the actual\r\n// localhost URL based on the `host` field found in the state object\r\nexport const ADMIN_LOGIN_SLACK_REDIRECT_URL = url.format({\r\n  protocol: 'https',\r\n  host: env.SLACK_ADMIN_LOGIN_REDIRECT_HOST || ADMIN_SERVER_HOST,\r\n  pathname: SLACK_LOGIN_ROUTE,\r\n});\r\n\r\nconst ADMIN_SESSION_EXPIRATION_SECONDS = 60 * 60 * 24; // valid for 24 hours\r\n\r\nexport default async function SlackLoginHandler(req: Request, res: Response) {\r\n  const { code, state } = req.query;\r\n  if (typeof state !== 'string' || typeof code !== 'string') {\r\n    return res.redirect(APP_ORIGIN);\r\n  }\r\n\r\n  let finalDestination: string | undefined = undefined;\r\n\r\n  try {\r\n    const { host, redirect_to } = jwt.verify(\r\n      state,\r\n      env.OAUTH_STATE_SIGNING_SECRET,\r\n      {\r\n        algorithms: ['HS512'],\r\n      },\r\n    ) as { host: string; redirect_to?: string };\r\n\r\n    if (host !== ADMIN_SERVER_HOST) {\r\n      return res.redirect(\r\n        url.format({\r\n          protocol: 'https',\r\n          host,\r\n          pathname: SLACK_LOGIN_ROUTE,\r\n          query: { code, state },\r\n        }),\r\n      );\r\n    }\r\n    finalDestination = redirect_to;\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'SlackLoginHandler',\r\n      e,\r\n      undefined,\r\n      undefined,\r\n      'warn',\r\n    );\r\n    return res.redirect(APP_ORIGIN);\r\n  }\r\n\r\n  const cookieNonce = cookie.parse(req.header('Cookie') || '')[\r\n    'admin_nonce'\r\n  ] as string | undefined;\r\n  if (!cookieNonce) {\r\n    anonymousLogger().warn('SlackLoginHandler', {\r\n      message: 'missing admin_nonce cookie',\r\n    });\r\n\r\n    return res.redirect(APP_ORIGIN);\r\n  }\r\n\r\n  try {\r\n    const response = await slackClient.openid.connect.token({\r\n      code,\r\n      client_id: SLACK_ADMIN_LOGIN_APP_CLIENT_ID,\r\n      client_secret: env.SLACK_ADMIN_CLIENT_SECRET,\r\n      redirect_uri: ADMIN_LOGIN_SLACK_REDIRECT_URL,\r\n    });\r\n\r\n    if (!response.ok || !response.id_token) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: 'slack oauth failed',\r\n        ...response,\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    const userInfo = jwt.decode(response.id_token) as { [key: string]: string };\r\n    const {\r\n      'https://slack.com/user_id': user_id,\r\n      'https://slack.com/team_id': team_id,\r\n      nonce,\r\n    } = userInfo;\r\n\r\n    if (nonce !== cookieNonce) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: 'wrong nonce',\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    if (team_id !== CORD_SLACK_TEAM_ID) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: `logged in with wrong slack team ${team_id}`,\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    const org = await new OrgLoader(Viewer.createServiceViewer()).loadSlackOrg(\r\n      team_id,\r\n      SLACK_ADMIN_LOGIN_APP_ID,\r\n    );\r\n\r\n    if (!org) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: `org not found for team ${team_id}`,\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    const user = await new UserLoader(\r\n      Viewer.createOrgViewer(org.id),\r\n      () => null,\r\n    ).loadUserForSlackUserWithinViewerOrg(user_id);\r\n\r\n    if (!user) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: `user not found for user ${user_id} in org ${org.id}`,\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    if (!user?.admin) {\r\n      anonymousLogger().warn('SlackLoginHandler', {\r\n        message: `user ${user_id} not found or not admin`,\r\n      });\r\n\r\n      return res.redirect(APP_ORIGIN);\r\n    }\r\n\r\n    const token = encodeSessionToJWT(\r\n      {\r\n        viewer: Viewer.createLoggedInViewer(user.id, org.id),\r\n      },\r\n      ADMIN_SESSION_EXPIRATION_SECONDS,\r\n    );\r\n\r\n    return res\r\n      .cookie('admin_nonce', '', {\r\n        maxAge: 0,\r\n        httpOnly: true,\r\n        secure: true,\r\n        sameSite: 'lax',\r\n      })\r\n      .cookie('token', getAuthorizationHeaderWithToken(token), {\r\n        httpOnly: true, // prevent the cookie from being readable on the client-side\r\n        secure: true, // only on https\r\n        sameSite: 'lax', // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite#lax\r\n        maxAge: 1000 * ADMIN_SESSION_EXPIRATION_SECONDS,\r\n      })\r\n      .redirect(finalDestination ?? '/');\r\n  } catch (e) {\r\n    anonymousLogger().logException(\r\n      'SlackLoginHandler',\r\n      e,\r\n      undefined,\r\n      undefined,\r\n      'warn',\r\n    );\r\n    return res.redirect(APP_ORIGIN);\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertViewerHasOrg } from 'server/src/auth/index.ts';\r\nimport { SlackMessageEntity } from 'server/src/entity/slack_message/SlackMessageEntity.ts';\r\n\r\nexport class SlackMessageMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async unlinkSlackMessage(\r\n    slackChannelID: string,\r\n    slackMessageTimestamp: string,\r\n  ) {\r\n    const slackOrgID = assertViewerHasOrg(this.viewer);\r\n\r\n    await SlackMessageEntity.destroy({\r\n      where: { slackChannelID, slackMessageTimestamp, slackOrgID },\r\n    });\r\n  }\r\n}\r\n", "import sharp from 'sharp';\r\n\r\nimport {\r\n  getPublicBucketDownloadURL,\r\n  publicS3Bucket,\r\n} from 'server/src/files/upload.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { ImageVariantLoader } from 'server/src/entity/image_variant/ImageVariantLoader.ts';\r\nimport { ImageVariantMutator } from 'server/src/entity/image_variant/ImageVariantMutator.ts';\r\nimport { ExternalAssetMutator } from 'server/src/entity/extrernal_asset/ExternalAssetMutator.ts';\r\nimport {\r\n  downloadURL,\r\n  sha384,\r\n  uploadImageToS3,\r\n} from 'server/src/image_processing/util.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nexport interface BadgedImageOptions {\r\n  size?: number;\r\n}\r\n\r\nexport async function getBadgedImageURL(\r\n  sourceURL: string,\r\n  badgeURL: string,\r\n  options: BadgedImageOptions = {},\r\n  maxAgeSeconds: number = 48 * 3600, // 48 hours\r\n) {\r\n  // The largest we display the avatar is 56px, so to look good on retina\r\n  // screens, we should render to 112x112 pixels.\r\n  const size = options.size || 112;\r\n\r\n  const variantPrefix = `badge_${size}_br:`;\r\n\r\n  const serviceViewer = Viewer.createServiceViewer();\r\n  const logger = new Logger(serviceViewer);\r\n  const imageVariantLoader = new ImageVariantLoader(serviceViewer);\r\n\r\n  // Check if this variant has been produced already.\r\n  const savedVariant = await imageVariantLoader.getTwoImageCompositionVariant(\r\n    sourceURL,\r\n    badgeURL,\r\n    variantPrefix,\r\n  );\r\n\r\n  if (\r\n    savedVariant &&\r\n    savedVariant.sourceAgeSeconds < maxAgeSeconds &&\r\n    savedVariant.overlayAgeSeconds < maxAgeSeconds\r\n  ) {\r\n    // We have produced this image before, and the downloads of the images we\r\n    // used was not older than `maxAgeSeconds`, so we can just return the\r\n    // previously produced image.\r\n    return getPublicBucketDownloadURL(savedVariant.filename);\r\n  }\r\n\r\n  // Download the images\r\n  const [sourceDownload, badgeDownload] = await Promise.all([\r\n    downloadURL(sourceURL),\r\n    downloadURL(badgeURL),\r\n  ]);\r\n\r\n  // Calculate the Sha384 hashes of the images we have just downloaded\r\n  const sourceSha384 = sha384(sourceDownload);\r\n  const badgeSha384 = sha384(badgeDownload);\r\n\r\n  // And update the external_assets table to save the information that at this\r\n  // time, the given URLs reolve to those content hashes.\r\n  const externalAssetMutator = new ExternalAssetMutator(serviceViewer);\r\n  await Promise.all([\r\n    externalAssetMutator\r\n      .update(sourceURL, sourceSha384)\r\n      .catch(logger.exceptionLogger('update source image asset')),\r\n    externalAssetMutator\r\n      .update(badgeURL, badgeSha384)\r\n      .catch(logger.exceptionLogger('update badge image asset')),\r\n  ]);\r\n\r\n  // Now check again: if we produced this image variant before, and the images\r\n  // we downloaded now are still the same as when we produced the variant, we\r\n  // can just return that image.\r\n  if (\r\n    savedVariant &&\r\n    savedVariant.sourceSha384 === sourceSha384 &&\r\n    savedVariant.overlaySha384 === badgeSha384\r\n  ) {\r\n    return getPublicBucketDownloadURL(savedVariant.filename);\r\n  }\r\n\r\n  // Now that we have downloaded source image and badge image, let's produce the\r\n  // image variant!\r\n  const sourceImage = sharp(sourceDownload)\r\n    .pipelineColourspace('rgb16')\r\n    .resize(size, size, { fit: 'cover' })\r\n    .rotate();\r\n\r\n  const badgeImage = sharp(badgeDownload).pipelineColourspace('rgb16');\r\n  const metadata = await badgeImage.metadata();\r\n  const badgeInputAspectRatio =\r\n    metadata.width && metadata.height ? metadata.width / metadata.height : 1;\r\n  const scaledBadgeWidth = Math.round(size * 0.4 * badgeInputAspectRatio);\r\n  const scaledBadgeHeight = Math.round((size * 0.4) / badgeInputAspectRatio);\r\n  const scaledBadge = badgeImage.resize(scaledBadgeWidth, scaledBadgeHeight);\r\n  const outputImageBuffer = await sourceImage\r\n    .composite([\r\n      {\r\n        input: await scaledBadge.png().toBuffer(),\r\n        gravity: 'southeast',\r\n      },\r\n    ])\r\n    .jpeg({ quality: 90 })\r\n    .toBuffer();\r\n\r\n  // Construct a filename for this image. We use this to save this image in S3.\r\n  // We use the Sha384 hash of the output image as filename, so that if we\r\n  // produce the exact same image multiple times, we just overwrite the same\r\n  // file in S3.\r\n  const outputSha384 = sha384(outputImageBuffer);\r\n  const outputFilename = `${outputSha384}.jpg`;\r\n\r\n  // Upload to S3\r\n  await uploadImageToS3(\r\n    outputFilename,\r\n    outputImageBuffer,\r\n    'image/jpeg',\r\n    publicS3Bucket,\r\n  );\r\n\r\n  // Save this image variant in the database.\r\n  const variant = `${variantPrefix}${badgeSha384}`;\r\n  const imageVariantMutator = new ImageVariantMutator(serviceViewer);\r\n  await imageVariantMutator\r\n    .saveImageVariant(sourceSha384, variant, outputFilename)\r\n    .catch(logger.exceptionLogger('update image_variants table'));\r\n\r\n  return getPublicBucketDownloadURL(outputFilename);\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertServiceViewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\ninterface TwoImageVariantInformation {\r\n  filename: string;\r\n  sourceSha384: string;\r\n  sourceAgeSeconds: number;\r\n  overlaySha384: string;\r\n  overlayAgeSeconds: number;\r\n}\r\n\r\ninterface SingleImageVariantInformation {\r\n  filename: string;\r\n  sourceSha384: string;\r\n  sourceAgeSeconds: number;\r\n}\r\n\r\nexport class ImageVariantLoader {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async getTwoImageCompositionVariant(\r\n    sourceURL: string,\r\n    overlayURL: string,\r\n    variantPrefix: string,\r\n  ) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    const rows = await getSequelize().query<TwoImageVariantInformation>(\r\n      `SELECT\r\n         iv.filename,\r\n         iv.\"sourceSha384\",\r\n         EXTRACT(EPOCH FROM NOW()-src.\"downloadTimestamp\") AS \"sourceAgeSeconds\",\r\n         overlay.\"sha384\" AS \"overlaySha384\",\r\n         EXTRACT(EPOCH FROM NOW()-overlay.\"downloadTimestamp\") AS \"overlayAgeSeconds\"\r\n       FROM image_variants iv\r\n       INNER JOIN external_assets src ON iv.\"sourceSha384\"=src.\"sha384\"\r\n       INNER JOIN external_assets overlay\r\n         ON iv.\"variant\"=($1::text || overlay.\"sha384\")\r\n       WHERE src.url=$2 AND overlay.url=$3;`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [variantPrefix, sourceURL, overlayURL],\r\n      },\r\n    );\r\n\r\n    if (rows.length > 0) {\r\n      return rows[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async getSingleImageVariant(sourceURL: string, variant: string) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    const rows = await getSequelize().query<SingleImageVariantInformation>(\r\n      `SELECT\r\n         iv.filename,\r\n         iv.\"sourceSha384\",\r\n         EXTRACT(EPOCH FROM NOW()-src.\"downloadTimestamp\") AS \"sourceAgeSeconds\"\r\n       FROM image_variants iv\r\n       INNER JOIN external_assets src ON iv.\"sourceSha384\"=src.\"sha384\"\r\n       WHERE iv.variant=$1\r\n       AND src.url=$2;`,\r\n      {\r\n        type: QueryTypes.SELECT,\r\n        bind: [variant, sourceURL],\r\n      },\r\n    );\r\n\r\n    if (rows.length > 0) {\r\n      return rows[0];\r\n    }\r\n    return null;\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertServiceViewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport class ImageVariantMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async saveImageVariant(\r\n    sourceSha384: string,\r\n    variant: string,\r\n    outputFilename: string,\r\n  ) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    await getSequelize().query(\r\n      `INSERT INTO image_variants (\"sourceSha384\", \"variant\", \"filename\")\r\n       VALUES ($1,$2,$3)\r\n       ON CONFLICT (\"sourceSha384\", \"variant\")\r\n       DO UPDATE SET \"filename\"=EXCLUDED.\"filename\", \"timestamp\"=DEFAULT;`,\r\n      { bind: [sourceSha384, variant, outputFilename] },\r\n    );\r\n  }\r\n}\r\n", "import type { Viewer } from 'server/src/auth/index.ts';\r\nimport { assertServiceViewer } from 'server/src/auth/index.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\n\r\nexport class ExternalAssetMutator {\r\n  viewer: Viewer;\r\n\r\n  constructor(viewer: Viewer) {\r\n    this.viewer = viewer;\r\n  }\r\n\r\n  async update(url: string, sha384: string) {\r\n    assertServiceViewer(this.viewer);\r\n\r\n    await getSequelize().query(\r\n      `INSERT INTO external_assets (\"url\", \"sha384\") VALUES ($1,$2)\r\n       ON CONFLICT (\"url\") DO UPDATE\r\n       SET \"sha384\"=EXCLUDED.\"sha384\", \"downloadTimestamp\"=DEFAULT;`,\r\n      { bind: [url, sha384] },\r\n    );\r\n  }\r\n}\r\n", "import * as crypto from 'crypto';\r\n\r\nimport type { S3BucketConfig } from 'server/src/files/upload.ts';\r\nimport { getSignedUploadURL } from 'server/src/files/upload.ts';\r\nimport { safeFetch } from 'server/src/util/safeFetch.ts';\r\n\r\nexport function downloadURL(url: string) {\r\n  return safeFetch(url)\r\n    .then((response) => response.blob())\r\n    .then((blob) => (blob as any).arrayBuffer() as Promise<ArrayBuffer>)\r\n    .then((arrayBuffer) => Buffer.from(arrayBuffer));\r\n}\r\n\r\nexport const sha384 = (buffer: Buffer) =>\r\n  crypto.createHash('sha384').update(buffer).digest('hex');\r\n\r\nexport async function uploadImageToS3(\r\n  outputFilename: string,\r\n  outputImageBuffer: Buffer,\r\n  outputMimeType: string,\r\n  publicS3Bucket: S3BucketConfig,\r\n) {\r\n  const uploadResponse = await fetch(\r\n    getSignedUploadURL(\r\n      outputFilename,\r\n      outputImageBuffer.byteLength,\r\n      outputMimeType,\r\n      publicS3Bucket,\r\n    ),\r\n    {\r\n      method: 'PUT',\r\n      body: outputImageBuffer,\r\n      headers: {\r\n        'Content-Length': `${outputImageBuffer.byteLength}`,\r\n        'Content-Type': outputMimeType,\r\n      },\r\n    },\r\n  );\r\n  if (uploadResponse.status !== 200) {\r\n    throw new Error(`S3 upload failed: ${uploadResponse.statusText}`);\r\n  }\r\n}\r\n", "import sharp from 'sharp';\r\n\r\nimport {\r\n  getPublicBucketDownloadURL,\r\n  publicS3Bucket,\r\n} from 'server/src/files/upload.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { ImageVariantLoader } from 'server/src/entity/image_variant/ImageVariantLoader.ts';\r\nimport { ImageVariantMutator } from 'server/src/entity/image_variant/ImageVariantMutator.ts';\r\nimport { ExternalAssetMutator } from 'server/src/entity/extrernal_asset/ExternalAssetMutator.ts';\r\nimport {\r\n  downloadURL,\r\n  sha384,\r\n  uploadImageToS3,\r\n} from 'server/src/image_processing/util.ts';\r\nimport { Logger } from 'server/src/logging/Logger.ts';\r\nexport interface ProcessedImageOptions {\r\n  size?: number;\r\n}\r\n\r\nexport async function getResizedImageURL(\r\n  sourceURL: string,\r\n  options: ProcessedImageOptions = {},\r\n  maxAgeSeconds: number = 48 * 3600,\r\n) {\r\n  // Slack avatars are displayed as 36x36 pixels, so to look good on retina\r\n  // screens, we should render to 72x72 pixels.\r\n  const size = options.size || 72;\r\n\r\n  const variant = `source_resized_${size}`;\r\n\r\n  const serviceViewer = Viewer.createServiceViewer();\r\n  const logger = new Logger(serviceViewer);\r\n  const imageVariantLoader = new ImageVariantLoader(serviceViewer);\r\n\r\n  // Check if this variant has been produced already.\r\n  const savedVariant = await imageVariantLoader.getSingleImageVariant(\r\n    sourceURL,\r\n    variant,\r\n  );\r\n\r\n  if (savedVariant && savedVariant.sourceAgeSeconds < maxAgeSeconds) {\r\n    // We have produced this image before, and the downloads of the image we\r\n    // used was not older than `maxAgeSeconds`, so we can just return the\r\n    // previously produced image.\r\n    return getPublicBucketDownloadURL(savedVariant.filename);\r\n  }\r\n\r\n  // Download the source image\r\n  const sourceDownload = await downloadURL(sourceURL);\r\n\r\n  // Calculate the Sha384 hash of the image we have just downloaded\r\n  const sourceSha384 = sha384(sourceDownload);\r\n\r\n  // And update the external_assets table to save the information that at this\r\n  // time, the given URL resolves to the content hash.\r\n  const externalAssetMutator = new ExternalAssetMutator(serviceViewer);\r\n  await externalAssetMutator\r\n    .update(sourceURL, sourceSha384)\r\n    .catch(logger.exceptionLogger('update source image asset'));\r\n\r\n  // Now check again: if we produced this image variant before, and the image\r\n  // we downloaded now are still the same as when we produced the variant, we\r\n  // can just return that image.\r\n  if (savedVariant && savedVariant.sourceSha384 === sourceSha384) {\r\n    return getPublicBucketDownloadURL(savedVariant.filename);\r\n  }\r\n\r\n  // Now that we have downloaded source image, let's produce the\r\n  // image variant!\r\n  const outputImageBuffer = await sharp(sourceDownload)\r\n    .pipelineColourspace('rgb16')\r\n    .resize(size, size, { fit: 'cover' })\r\n    .rotate()\r\n    .jpeg({ quality: 90 })\r\n    .toBuffer();\r\n\r\n  // Construct a filename for this image. We use this to save this image in S3.\r\n  // We use the Sha384 hash of the output image as filename, so that if we\r\n  // produce the exact same image multiple times, we just overwrite the same\r\n  // file in S3.\r\n  const outputSha384 = sha384(outputImageBuffer);\r\n  const outputFilename = `${outputSha384}.jpg`;\r\n\r\n  // Upload to S3\r\n  await uploadImageToS3(\r\n    outputFilename,\r\n    outputImageBuffer,\r\n    'image/jpeg',\r\n    publicS3Bucket,\r\n  );\r\n\r\n  // Save this image variant in the database.\r\n  const imageVariantMutator = new ImageVariantMutator(serviceViewer);\r\n  await imageVariantMutator\r\n    .saveImageVariant(sourceSha384, variant, outputFilename)\r\n    .catch(logger.exceptionLogger('update image_variants table'));\r\n\r\n  return getPublicBucketDownloadURL(outputFilename);\r\n}\r\n", "//import type { ExampleJobData } from 'server/src/asyncTier/jobs.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { FileEntity } from 'server/src/entity/file/FileEntity.ts';\r\nimport { MAX_FILE_UPLOADING_TIME_SECONDS } from 'common/const/Timing.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'databaseTidyUp',\r\n  databaseTidyUpJob,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'every15Minutes',\r\n  cron: '0,15,30,45 * * * *',\r\n  data: {},\r\n});\r\n\r\nasync function databaseTidyUpJob() {\r\n  // `files` table: set `uploadStatus` to CANCELLED for files older than\r\n  // MAX_FILE_UPLOADING_TIME_SECONDS and status UPLOADING.\r\n  await getSequelize().query(\r\n    `UPDATE \"${FileEntity.tableName}\"\r\n     SET \"uploadStatus\" = $1\r\n     WHERE \"uploadStatus\" = $2\r\n     AND \"timestamp\" < NOW() - $3::INTERVAL;`,\r\n    {\r\n      bind: [\r\n        'cancelled',\r\n        'uploading',\r\n        `${MAX_FILE_UPLOADING_TIME_SECONDS} seconds`,\r\n      ],\r\n    },\r\n  );\r\n}\r\n", "import { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nexport default new AsyncTierJobDefinition('example', exampleJob);\r\n\r\ntype ExampleJobData = {\r\n  message: string;\r\n};\r\n\r\nasync function exampleJob(data: ExampleJobData, logger: Logger) {\r\n  const { message } = data;\r\n\r\n  logger.info(`ExampleJob: ${message}`);\r\n}\r\n", "import {\r\n  GenerateCredentialReportCommand,\r\n  IAMClient,\r\n} from '@aws-sdk/client-iam';\r\nimport { AWS_REGION } from 'ops/aws/src/radical-stack/Config.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'awsGenerateCredentialsReport',\r\n  generateAWSCredentialsReports,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'daily',\r\n  cron: '0 9  * * 1-5', // \u201CEveryday at 09:00, excluding Sat/Sun\u201D\r\n  data: {},\r\n});\r\n\r\n/**\r\n * Kicks off the process that generates a credentials report,\r\n * which will be analysed by checkAWSCredentials job.\r\n */\r\nasync function generateAWSCredentialsReports() {\r\n  await new IAMClient({ region: AWS_REGION }).send(\r\n    new GenerateCredentialReportCommand({}),\r\n  );\r\n}\r\n", "import { parse } from 'url';\r\nimport { Readable } from 'stream';\r\nimport {\r\n  S3Client,\r\n  PutObjectCommand,\r\n  GetObjectCommand,\r\n} from '@aws-sdk/client-s3';\r\nimport sharp from 'sharp';\r\nimport env from 'server/src/config/Env.ts';\r\nimport type { UUID } from 'common/types/index.ts';\r\nimport {\r\n  MIN_RESIZED_PROFILE_PICTURE_DIMENSION,\r\n  RESIZE_PROFILE_PICTURE_THRESHOLD,\r\n} from 'common/uploads/index.ts';\r\nimport {\r\n  getPublicBucketDownloadURL,\r\n  getPublicBucketKey,\r\n} from 'server/src/files/upload.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { UserMutator } from 'server/src/entity/user/UserMutator.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport sleep from 'common/util/sleep.ts';\r\n\r\nconst streamToBuffer = (stream: Readable) =>\r\n  new Promise<Buffer>((resolve, reject) => {\r\n    const chunks: Buffer[] = [];\r\n    stream.on('data', (chunk) => chunks.push(chunk));\r\n    stream.once('error', reject);\r\n    stream.once('end', () => resolve(Buffer.concat(chunks)));\r\n  });\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'resizeProfilePicture',\r\n  resizeProfilePicture,\r\n);\r\n\r\nexport type ResizeProfilePicture = {\r\n  profilePictureURL: UUID;\r\n  userID: UUID;\r\n  orgID: UUID;\r\n  pictureType: 'apiUpload' | 'userSettingsUpload';\r\n};\r\nexport const RESIZE_PROFILE_PICTURE_JOB = 'resizeProfilePicture';\r\n\r\n// job run when a user uploads a profile picture which needs resizing\r\nasync function resizeProfilePicture(\r\n  data: ResizeProfilePicture,\r\n  logger: Logger,\r\n) {\r\n  const { profilePictureURL, userID, orgID } = data;\r\n\r\n  const parsedURL = parse(profilePictureURL);\r\n\r\n  // URLs should be in the format https://cdn.cord.com/ca9bb95e-3f5f-495e-bbf0-b8f752b6dbcd\r\n  if (parsedURL.host !== env.PUBLIC_UPLOADS_HOST || !parsedURL.path) {\r\n    logger.error(\r\n      `Bad profile picture url submitted for resizing: ${profilePictureURL}`,\r\n    );\r\n    return;\r\n  }\r\n\r\n  const fileID =\r\n    env.S3_USE_PATH_BASED_URLS === 'true'\r\n      ? // Remove slash before and after bucket name\r\n        parsedURL.path.substring(2 + env.S3_PUBLIC_BUCKET.length)\r\n      : // Just remove leading slash\r\n        parsedURL.path.substring(1);\r\n\r\n  const s3Client = new S3Client({\r\n    region: env.S3_REGION,\r\n    endpoint: env.S3_ENDPOINT.replace('<REGION>', env.S3_REGION),\r\n  });\r\n\r\n  // get the image that was just uploaded\r\n  const { originalImageBuffer, size } = await getUserUploadedImage(\r\n    fileID,\r\n    s3Client,\r\n    logger,\r\n  );\r\n\r\n  // image is already small, skip resizing\r\n  if (size < RESIZE_PROFILE_PICTURE_THRESHOLD) {\r\n    logger.info(\r\n      `Skipping resize of ${profilePictureURL}: size is ${Math.round(\r\n        size / 1024,\r\n      )} KB`,\r\n    );\r\n    return;\r\n  }\r\n\r\n  // resize and compress the image\r\n  const resizedImgBuffer = await sharp(originalImageBuffer)\r\n    .resize({\r\n      width: MIN_RESIZED_PROFILE_PICTURE_DIMENSION,\r\n      // Scale image proportionally\r\n      fit: 'outside',\r\n    })\r\n    .jpeg({ quality: 90 })\r\n    .toBuffer();\r\n\r\n  // upload the new image the a new file ID (leaving original image unchanged)\r\n  const resizedImageFileName = `${fileID}_resized_${MIN_RESIZED_PROFILE_PICTURE_DIMENSION}`;\r\n\r\n  const putObjectCommand = new PutObjectCommand({\r\n    Body: resizedImgBuffer,\r\n    Bucket: env.S3_PUBLIC_BUCKET,\r\n    Key: getPublicBucketKey(resizedImageFileName),\r\n    ContentType: 'image/jpeg',\r\n  });\r\n\r\n  await s3Client.send(putObjectCommand);\r\n\r\n  // update the profiles table to point to the resized image\r\n  await new UserMutator(\r\n    Viewer.createLoggedInViewer(userID, orgID),\r\n    null,\r\n  ).updateProfilePictureURL(getPublicBucketDownloadURL(resizedImageFileName));\r\n}\r\n\r\nconst getUserUploadedImage = async (\r\n  fileID: UUID,\r\n  s3: S3Client,\r\n  logger: Logger,\r\n) => {\r\n  let originalImageBuffer: Buffer | undefined;\r\n  let size: number | undefined;\r\n\r\n  // try for up to 60s, in case the upload on the client is slow\r\n  for (let i = 0; i < 6; i++) {\r\n    // wait a few seconds for the file to upload on the client\r\n    await sleep(10 * 1000);\r\n    try {\r\n      const getObjectCommand = new GetObjectCommand({\r\n        Bucket: env.S3_PUBLIC_BUCKET,\r\n        Key: getPublicBucketKey(fileID),\r\n      });\r\n\r\n      const { ContentLength, Body } = await s3.send(getObjectCommand);\r\n\r\n      if (Body instanceof Readable) {\r\n        originalImageBuffer = await streamToBuffer(Body);\r\n      } else if (Body instanceof Blob) {\r\n        originalImageBuffer = Buffer.from(await Body.arrayBuffer());\r\n      } else {\r\n        throw new Error(\r\n          `Body returned from s3 is not of of type Readable or Blob, ${typeof Body}`,\r\n        );\r\n      }\r\n\r\n      size = ContentLength;\r\n\r\n      break;\r\n    } catch (e: any) {\r\n      if (e.name.includes('NoSuchKey')) {\r\n        // file not been uploaded yet - wait and try again\r\n      } else {\r\n        // unexpected error\r\n        logger.error(\r\n          `Unexpected error when resizing profile picture ${fileID}`,\r\n        );\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!originalImageBuffer || !size) {\r\n    throw new Error(`Cant find file ${fileID} in public uploads bucket`);\r\n  }\r\n\r\n  return { originalImageBuffer, size };\r\n};\r\n", "export function processResponseMessage(responseMessage: string) {\r\n  try {\r\n    // Attempt to parse the text as a JSON object\r\n    return JSON.parse(responseMessage);\r\n  } catch (err) {\r\n    // Parsing response message as JSON failed, this must be a plain-text response.\r\n    return responseMessage;\r\n  }\r\n}\r\n", "import { Counter } from 'server/src/logging/prometheus.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { processResponseMessage } from 'server/src/webhook/util.ts';\r\nimport submitAsync from 'server/src/asyncTier/submitAsync.ts';\r\nimport { ApplicationEntity } from 'server/src/entity/application/ApplicationEntity.ts';\r\nimport { authenticationHeader } from 'server/src/webhook/webhook.ts';\r\nimport type { WebhookTypes } from '@cord-sdk/types';\r\nimport { safeFetch } from 'server/src/util/safeFetch.ts';\r\n\r\nexport default new AsyncTierJobDefinition('notifyWebhook', notifyWebhook);\r\n\r\nexport type NotifyWebhook = {\r\n  retryCount: number;\r\n  eventType: WebhookTypes;\r\n  appID: string;\r\n  url: string;\r\n  timestamp: string;\r\n  signature: string;\r\n  payload: string;\r\n  event: any;\r\n};\r\n\r\nexport const NOTIFY_WEBHOOK_JOB = 'notifyWebhook';\r\n\r\nconst counter = Counter({\r\n  name: 'eventsWebhook',\r\n  help: 'Webhook events sent',\r\n  labelNames: ['appID', 'type', 'success'],\r\n});\r\n\r\n// job to send request for webhook notifications\r\nasync function notifyWebhook(data: NotifyWebhook, logger: Logger) {\r\n  const { eventType, appID, url } = data;\r\n  let { timestamp, signature, payload } = data;\r\n\r\n  //Check if we have the event in the payload, and thus can generate\r\n  // the signature/timestamp as needed for this notification.\r\n  if (data.event) {\r\n    const app = await ApplicationEntity.findOne({\r\n      where: { id: appID },\r\n    });\r\n\r\n    if (app !== null) {\r\n      [payload, timestamp, signature] = authenticationHeader(\r\n        eventType,\r\n        app,\r\n        data.event,\r\n      );\r\n    }\r\n  }\r\n\r\n  logger.debug('Sending webhook event', {\r\n    appID: appID,\r\n    url,\r\n    eventType,\r\n    payload,\r\n  });\r\n\r\n  try {\r\n    const res = await safeFetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Cord-Timestamp': timestamp,\r\n        'X-Cord-Signature': signature,\r\n      },\r\n      body: payload,\r\n    });\r\n    if (res.ok) {\r\n      counter.inc({ appID: appID, type: eventType, success: 'true' });\r\n    } else {\r\n      const responseMessage = await res.text();\r\n      logger.warn('Unsuccessful HTTP request when sending webhook', {\r\n        appID: appID,\r\n        url,\r\n        eventType,\r\n        payload,\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        responseMessage: processResponseMessage(responseMessage),\r\n      });\r\n      counter.inc({ appID: appID, type: eventType, success: 'false' });\r\n      retry(data);\r\n    }\r\n  } catch (e) {\r\n    logger.logException(\r\n      `Error making webhook call to ${url} for application: ${appID}`,\r\n      e,\r\n      undefined,\r\n      undefined,\r\n      'warn',\r\n    );\r\n    counter.inc({ appID: appID, type: eventType, success: 'false' });\r\n    retry(data);\r\n  }\r\n}\r\n\r\nconst RETRY_MAX_COUNT = 5;\r\nconst NUM_SECONDS_WAIT = 5;\r\n\r\nfunction retry(workItemData: NotifyWebhook) {\r\n  if (workItemData.retryCount < RETRY_MAX_COUNT) {\r\n    workItemData.retryCount++;\r\n    void submitAsync('notifyWebhook', workItemData, {\r\n      startAfter:\r\n        NUM_SECONDS_WAIT * workItemData.retryCount * workItemData.retryCount,\r\n    });\r\n  }\r\n}\r\n", "import { Errors } from 'common/const/Errors.ts';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { JiraAuthData } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport { ThirdPartyConnectionEntity } from 'server/src/entity/third_party_connection/ThirdPartyConnectionEntity.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { fetchAccessToken } from 'server/src/third_party_tasks/jira/api.ts';\r\nimport { removeExternalConnection } from 'server/src/third_party_tasks/util.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'rotateJiraRefreshTokens',\r\n  rotateAllJiraRefreshTokens,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'weekly',\r\n  cron: '0 6 * * 3', // 6am every Wednesday https://crontab.guru/#0_6_*_*_3\r\n  data: {},\r\n});\r\n\r\n// Jira is moving to rotating refresh tokens. That means that a refreshToken we\r\n// receive from Jira will be valid (ie. allowed to be exchanged for an\r\n// accessToken) only for 30 days. Also, when a refreshToken is exchanged for an\r\n// accessToken, Jira will also send us a new refreshToken and the old one\r\n// becomes invalid. The purpose of this job is to periodically fetch JIRA\r\n// accessToken and thus rotate the refreshTokens we store.\r\n//\r\n// https://community.developer.atlassian.com/t/4-aug-2021-action-required-deprecating-persistent-refresh-tokens/50348\r\nasync function rotateAllJiraRefreshTokens(\r\n  _: EmptyJsonObject,\r\n  jobLogger: Logger,\r\n) {\r\n  const jiraConnections = await ThirdPartyConnectionEntity.findAll({\r\n    where: {\r\n      type: 'jira',\r\n    },\r\n  });\r\n  jobLogger.debug(`Found ${jiraConnections.length} jira connections`);\r\n  await Promise.all(\r\n    jiraConnections.map(async (jiraConnection) => {\r\n      const viewer = Viewer.createLoggedInViewer(\r\n        jiraConnection.userID,\r\n        jiraConnection.orgID,\r\n      );\r\n      const externalData = jiraConnection.externalAuthData as JiraAuthData;\r\n      const logger = jobLogger.childLogger(viewer, externalData);\r\n      try {\r\n        logger.debug('Going to rotate JIRA refreshToken');\r\n        await fetchAccessToken(\r\n          viewer,\r\n          externalData.refreshToken,\r\n          externalData.cloudID,\r\n        );\r\n        logger.debug('Successfully rotated refreshToken');\r\n      } catch (e: unknown) {\r\n        const deleteConnection =\r\n          getErrorMessage(e) === Errors.EXTERNAL_API_FORBIDDEN_RESPONSE;\r\n        logger.logException('Failed to rotate JIRA refreshToken', e);\r\n        if (deleteConnection) {\r\n          await removeExternalConnection(viewer, 'jira');\r\n        }\r\n      } finally {\r\n        logger.debug('Done rotating JIRA refreshToken');\r\n      }\r\n    }),\r\n  );\r\n}\r\n\r\nfunction getErrorMessage(e: unknown): string | undefined {\r\n  if (\r\n    typeof e === 'object' &&\r\n    e !== null &&\r\n    'message' in e &&\r\n    typeof (e as any).message === 'string'\r\n  ) {\r\n    return (e as any).message;\r\n  }\r\n  return undefined;\r\n}\r\n", "import * as Slack from '@slack/web-api';\r\nimport bluebird from 'bluebird';\r\nimport { fetchSlackChannelList } from 'server/src/slack/api.ts';\r\nimport type { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport { OrgLoader } from 'server/src/entity/org/OrgLoader.ts';\r\nimport { SlackChannelMutator } from 'server/src/entity/slack_channel/SlackChannelMutator.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'syncSlackChannelsList',\r\n  syncSlackChannelsList,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'daily',\r\n  cron: '0 10 * * *',\r\n  data: {},\r\n});\r\n\r\nasync function syncSlackChannelsList(_: EmptyJsonObject, logger: Logger) {\r\n  logger.info('Starting Slack channel list sync for all active orgs');\r\n\r\n  const orgLoader = new OrgLoader(Viewer.createAnonymousViewer());\r\n  const orgs = await orgLoader.loadAllActiveSlackOrgs();\r\n\r\n  await bluebird.Promise.map(\r\n    orgs,\r\n    (org) => fetchAndSaveSlackChannels(org, logger),\r\n    {\r\n      concurrency: 10,\r\n    },\r\n  );\r\n}\r\n\r\nasync function fetchAndSaveSlackChannels(org: OrgEntity, jobLogger: Logger) {\r\n  const viewer = Viewer.createOrgViewer(org.id);\r\n  const logger = jobLogger.childLogger(viewer, {\r\n    id: org.id,\r\n    externalId: org.externalID,\r\n    appId: org.platformApplicationID,\r\n    name: org.name,\r\n  });\r\n  logger.debug(\"Fetching an org's Slack channels\");\r\n\r\n  const slackBotCredentials = await org.getSlackBotCredentials();\r\n  if (!slackBotCredentials) {\r\n    logger.warn('fetchAndSaveSlackChannels: no SlackBotCredentials');\r\n    return;\r\n  }\r\n  const { bot_access_token } = slackBotCredentials;\r\n\r\n  try {\r\n    const channelList = await fetchSlackChannelList(\r\n      new Slack.WebClient(bot_access_token),\r\n    );\r\n\r\n    // save Slack channels in database\r\n    await new SlackChannelMutator(viewer).createMany(channelList);\r\n  } catch (error: any) {\r\n    if (error?.data?.error === 'account_inactive') {\r\n      // the company has removed Cord from Slack. What to do with such\r\n      // companies is still up for discussion, but we don't need to log an\r\n      // error just because a company stopped using Cord.\r\n      logger.warn(\r\n        'Failed to scrape list of Slack channels because company removed Cord from Slack',\r\n        error,\r\n      );\r\n\r\n      await org.update({ externalAuthData: null });\r\n    } else {\r\n      logger.logException('Error scraping list of Slack channels', error);\r\n    }\r\n  }\r\n}\r\n", "import type { UUID } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { Viewer } from 'server/src/auth/index.ts';\r\nimport { OrgEntity } from 'server/src/entity/org/OrgEntity.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { fetchSlackUsersList } from 'server/src/slack/api.ts';\r\nimport {\r\n  allowImportUser,\r\n  updateOrCreateSlackUserProfile,\r\n} from 'server/src/slack/util.ts';\r\n\r\nconst MAX_SLACK_USERS_PER_BATCH = 100;\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'syncSlackGreyUsers',\r\n  syncSlackGreyUsers,\r\n);\r\n\r\ntype SyncSlackGreyUsers = { orgID: UUID };\r\n\r\nasync function syncSlackGreyUsers(data: SyncSlackGreyUsers, logger: Logger) {\r\n  logger.info('Starting Slack org grey users sync');\r\n  const { orgID } = data;\r\n\r\n  try {\r\n    const org = await OrgEntity.findByPk(orgID);\r\n\r\n    // this should never throw...\r\n    if (!org) {\r\n      throw new Error('Org does not exist');\r\n    }\r\n\r\n    const viewer = Viewer.createOrgViewer(org.id);\r\n    logger = logger.childLogger(viewer, {\r\n      id: org.id,\r\n      externalId: org.externalID,\r\n      appId: org.platformApplicationID,\r\n      name: org.name,\r\n    });\r\n\r\n    const slackBotCredentials = await org.getSlackBotCredentials();\r\n    if (!slackBotCredentials) {\r\n      logger.warn('syncSlackGreyUsers: no SlackBotCredentials');\r\n      return;\r\n    }\r\n    const { bot_access_token } = slackBotCredentials;\r\n\r\n    const membersToAdd = (await fetchSlackUsersList(bot_access_token))\r\n      // filter out Slack bots\r\n      // and any users sent to us by Slack who are not part of the Slack org\r\n      .filter(allowImportUser)\r\n      .filter((member) => member.team_id === org.externalID)\r\n      // Sync the nondeleted users first, since they're more likely useful\r\n      .sort((a, b) => Number(a.deleted) - Number(b.deleted));\r\n\r\n    for (\r\n      let offset = 0;\r\n      offset < membersToAdd.length;\r\n      offset += MAX_SLACK_USERS_PER_BATCH\r\n    ) {\r\n      // create grey profiles for other team members if necessary\r\n      // and update any changed details of existing slack/cord users\r\n      await Promise.all(\r\n        membersToAdd.slice(offset, offset + MAX_SLACK_USERS_PER_BATCH).map(\r\n          // account is inactive and we don't know their access token\r\n          (member) => updateOrCreateSlackUserProfile(org, member),\r\n        ),\r\n      );\r\n    }\r\n  } catch (error: unknown) {\r\n    logger.logException('Error updating Slack grey users', error, {\r\n      orgID,\r\n    });\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\n\r\nimport {\r\n  CORD_AUTOMATED_TESTS_APPLICATION_ID,\r\n  CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n} from 'common/const/Ids.ts';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'wipeTemporaryTokensData',\r\n  wipeTemporaryTokensData,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'daily',\r\n  cron: '0 0 * * *',\r\n  data: {},\r\n});\r\n\r\nconst MAX_ORGS_PER_ITERATION = 100;\r\n\r\n/**\r\n * This job clears out 'sampletoken' and 'demo' applications which have been\r\n * inactive for more than 24h (demo) or 1w (sampletoken), as well as orgs in the\r\n * docs live components app and automated tests app.  We used to have a separate\r\n * job to clear out messages in 'sample' (self-serve) apps too but we decided to\r\n * stop doing that (PR 7518).\r\n */\r\nasync function wipeTemporaryTokensData(_: EmptyJsonObject, logger: Logger) {\r\n  for (let iteration = 1; await jobIteration(logger, iteration); ++iteration) {\r\n    // Empty, work all done in loop condition.\r\n  }\r\n}\r\n\r\nasync function jobIteration(\r\n  logger: Logger,\r\n  iteration: number,\r\n): Promise<boolean> {\r\n  const sequelize = getSequelize();\r\n  logger.info(`Starting iteration #${iteration}`);\r\n\r\n  return await sequelize.transaction(async (transaction) => {\r\n    const query = (sql: string, bind?: any[]) =>\r\n      sequelize.query(sql, { bind, transaction, type: QueryTypes.RAW });\r\n\r\n    await query(\r\n      `CREATE TEMPORARY TABLE inactive_org_ids (\r\n        id uuid NOT NULL\r\n      ) ON COMMIT DROP;`,\r\n    );\r\n\r\n    await query(\r\n      `INSERT INTO inactive_org_ids (id)\r\n      -- Docs live component orgs\r\n      SELECT o.id\r\n        FROM cord.orgs o\r\n        LEFT OUTER JOIN cord.page_visitors pv ON pv.\"orgID\"=o.id\r\n        WHERE o.\"platformApplicationID\"=$1\r\n        AND NOW() - o.\"createdTimestamp\" > '24 hours'\r\n        GROUP BY o.id\r\n        HAVING COALESCE(NOW() - MAX(pv.\"lastPresentTimestamp\") > '24 hours', true)\r\n      -- Demo token apps (canvas app etc on docs.cord.com and cord.com homepage)\r\n        UNION SELECT o.id\r\n          FROM cord.orgs o\r\n          INNER JOIN cord.applications a ON a.id=o.\"platformApplicationID\"\r\n          LEFT OUTER JOIN cord.page_visitors pv ON pv.\"orgID\"=o.id\r\n          WHERE a.environment='demo'\r\n          AND NOW() - o.\"createdTimestamp\" > '24 hours'\r\n          GROUP BY o.id\r\n          HAVING COALESCE(NOW() - MAX(pv.\"lastPresentTimestamp\") > '24 hours', true)  \r\n      -- Sample token apps (integration guide/opensource demo app repos)\r\n      UNION SELECT o.id\r\n        FROM cord.orgs o\r\n        INNER JOIN cord.applications a ON a.id=o.\"platformApplicationID\"\r\n        LEFT OUTER JOIN cord.page_visitors pv ON pv.\"orgID\"=o.id\r\n        WHERE a.environment='sampletoken'\r\n        AND NOW() - o.\"createdTimestamp\" > '1 week'\r\n        GROUP BY o.id\r\n        HAVING COALESCE(NOW() - MAX(pv.\"lastPresentTimestamp\") > '1 week', true)\r\n      -- Automated test app orgs\r\n      UNION SELECT o.id\r\n        FROM cord.orgs o\r\n        WHERE o.\"platformApplicationID\" = $2\r\n        AND NOW() - o.\"createdTimestamp\" > '1 hour'\r\n      -- The following limit applies to the whole of this query\r\n      LIMIT $3;`,\r\n      [\r\n        CORD_DOCS_SAMPLE_TOKEN_APPLICATION_ID,\r\n        CORD_AUTOMATED_TESTS_APPLICATION_ID,\r\n        MAX_ORGS_PER_ITERATION,\r\n      ],\r\n    );\r\n\r\n    const [{ orgCount }] = await sequelize.query<{ orgCount: number }>(\r\n      `SELECT COUNT(*) AS \"orgCount\" FROM inactive_org_ids;`,\r\n      { type: QueryTypes.SELECT, transaction },\r\n    );\r\n\r\n    if (orgCount === 0) {\r\n      logger.info(`No orgs found to delete in iteration #${iteration}`, {\r\n        orgCount,\r\n        iteration,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    logger.info(`Identified ${orgCount} orgs to delete`, {\r\n      orgCount,\r\n      iteration,\r\n    });\r\n\r\n    // Determine application ids to be removed\r\n    await query(\r\n      `CREATE TEMPORARY TABLE inactive_app_ids (\r\n        id uuid NOT NULL\r\n      ) ON COMMIT DROP;`,\r\n    );\r\n\r\n    await query(`\r\n      INSERT INTO inactive_app_ids (id)\r\n      -- sampletoken apps\r\n      SELECT a.id\r\n        FROM cord.applications a\r\n        LEFT OUTER JOIN orgs o ON o.\"platformApplicationID\"=a.id\r\n        LEFT OUTER JOIN inactive_org_ids ON o.id=inactive_org_ids.id\r\n        WHERE a.environment='sampletoken'\r\n        AND a.\"createdTimestamp\" < NOW() - '1 week'::interval\r\n        GROUP BY a.id\r\n        HAVING COUNT(o)=COUNT(inactive_org_ids)\r\n      -- demo apps\r\n      UNION SELECT a.id\r\n        FROM cord.applications a\r\n        LEFT OUTER JOIN orgs o ON o.\"platformApplicationID\"=a.id\r\n        LEFT OUTER JOIN inactive_org_ids ON o.id=inactive_org_ids.id\r\n        WHERE a.environment='demo'\r\n        AND a.\"createdTimestamp\" < NOW() - '24 hours'::interval\r\n        GROUP BY a.id\r\n        HAVING COUNT(o)=COUNT(inactive_org_ids);\r\n        `);\r\n\r\n    // Determine the users to be removed\r\n    await query(\r\n      `CREATE TEMPORARY TABLE inactive_user_ids ON COMMIT DROP AS\r\n      -- users that are members only in inactive orgs\r\n      SELECT m.\"userID\" AS id\r\n        FROM org_members m LEFT OUTER JOIN inactive_org_ids ON m.\"orgID\"=inactive_org_ids.id\r\n        GROUP BY m.\"userID\"\r\n        HAVING COUNT(m)=COUNT(inactive_org_ids)\r\n      -- users of an application to-be-removed who is not a member of any org (we need to\r\n      -- delete those in order to delete the apps, and these are not caught by the\r\n      -- previous branch)\r\n      UNION SELECT u.id\r\n        FROM users u\r\n        INNER JOIN inactive_app_ids ON u.\"platformApplicationID\"=inactive_app_ids.id\r\n        WHERE NOT EXISTS (\r\n          SELECT 1 FROM cord.org_members om WHERE om.\"userID\"=u.id\r\n        );`,\r\n    );\r\n\r\n    // Delete inactive users, orgs, and related entities\r\n    await query(\r\n      `DELETE FROM cord.message_notifications\r\n        USING inactive_org_ids, cord.org_members\r\n        WHERE \"targetUserID\"=org_members.\"userID\" AND org_members.\"orgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.linked_orgs\r\n        USING inactive_org_ids\r\n        WHERE \"sourceOrgID\"=inactive_org_ids.id\r\n        OR \"linkedOrgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.linked_users\r\n        USING inactive_org_ids\r\n        WHERE \"sourceOrgID\"=inactive_org_ids.id\r\n        OR \"linkedOrgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.org_members\r\n        USING inactive_org_ids\r\n        WHERE \"orgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.messages\r\n        USING inactive_org_ids\r\n        WHERE \"orgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.threads\r\n        USING inactive_org_ids\r\n        WHERE \"orgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.pages\r\n        USING inactive_org_ids\r\n        WHERE \"orgID\"=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.users\r\n        USING inactive_user_ids\r\n        WHERE cord.users.id=inactive_user_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.orgs\r\n        USING inactive_org_ids\r\n        WHERE orgs.id=inactive_org_ids.id;`,\r\n    );\r\n\r\n    await query(\r\n      `DELETE FROM cord.applications\r\n        USING inactive_app_ids\r\n        WHERE applications.id=inactive_app_ids.id;`,\r\n    );\r\n\r\n    const needAnotherIteration = orgCount >= MAX_ORGS_PER_ITERATION;\r\n    logger.info(`Completed iteration #${iteration}`, {\r\n      iteration,\r\n      orgCount,\r\n      needAnotherIteration,\r\n    });\r\n    return needAnotherIteration;\r\n  });\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\nimport { UNACCEPTABLY_LONG_QUEUE_LENGTH } from 'server/src/asyncTier/jobs/asyncWorkerHealthHeartbeatProd.ts';\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'asyncWorkerHealthHeartbeatStaging',\r\n  asyncWorkerHealthHeartbeatStaging,\r\n).schedule({\r\n  tier: 'staging',\r\n  name: 'everyFiveMinutes',\r\n  cron: '*/5 * * * *', // At every 5th minute https://crontab.guru/#*/5_*_*_*_*\r\n  data: {},\r\n});\r\n\r\n/**\r\n * Job that checks the number of outstanding jobs the staging async worker needs\r\n * to process, and sends a heartbeat to Better Uptime if everything's ok.  If the\r\n * queue looks too long, indicating a problem, it does not ping Better Uptime\r\n * which will result in a missed heartbeat and an incident escalation.\r\n */\r\nasync function asyncWorkerHealthHeartbeatStaging(\r\n  _: EmptyJsonObject,\r\n  logger: Logger,\r\n) {\r\n  logger.info('Running asyncWorkerHealthHeartbeatStaging');\r\n\r\n  const [{ count: jobCount }]: Array<{\r\n    count: number;\r\n  }> = await getSequelize().query(\r\n    `SELECT count(*) FROM pgboss_staging.job WHERE state = 'created';`,\r\n    {\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n\r\n  logger.info(`${jobCount} jobs currently in the staging queue`);\r\n\r\n  if (jobCount < UNACCEPTABLY_LONG_QUEUE_LENGTH) {\r\n    try {\r\n      // https://uptime.betterstack.com/team/53072/heartbeats/149296\r\n      void fetch(\r\n        'https://uptime.betterstack.com/api/v1/heartbeat/GxRoHJQNRfoC26kNmjZAvrEm',\r\n      );\r\n    } catch (e) {\r\n      logger.logException('Error sending staging async heartbeat', e);\r\n    }\r\n  } else {\r\n    logger.logException('Async queue size too big - not sending heartbeat', {\r\n      jobCount,\r\n      tier: 'staging',\r\n    });\r\n  }\r\n}\r\n", "import { QueryTypes } from 'sequelize';\r\nimport type { EmptyJsonObject } from 'common/types/index.ts';\r\nimport { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport { getSequelize } from 'server/src/entity/sequelize.ts';\r\nimport type { Logger } from 'server/src/logging/Logger.ts';\r\n\r\n// Arbitrarily chosen as the max queue size limit before we sound the alarm.  Chosen\r\n// based on a vague sense of what would be 'too much' and so would indicate that the\r\n// async worker has stopped processing jobs for some reason.\r\nexport const UNACCEPTABLY_LONG_QUEUE_LENGTH = 200;\r\n\r\nexport default new AsyncTierJobDefinition(\r\n  'asyncWorkerHealthHeartbeatProd',\r\n  asyncWorkerHealthHeartbeatProd,\r\n).schedule({\r\n  tier: 'prod',\r\n  name: 'everyFiveMinutes',\r\n  cron: '*/5 * * * *', // At every 5th minute https://crontab.guru/#*/5_*_*_*_*\r\n  data: {},\r\n});\r\n\r\n/**\r\n * Job that checks the number of outstanding jobs the prod async worker needs\r\n * to process, and sends a heartbeat to Better Uptime if everything's ok.  If the\r\n * queue looks too long, indicating a problem, it does not ping Better Uptime\r\n * which will result in a missed heartbeat and an incident escalation.\r\n */\r\nasync function asyncWorkerHealthHeartbeatProd(\r\n  _: EmptyJsonObject,\r\n  logger: Logger,\r\n) {\r\n  logger.info('Running asyncWorkerHealthHeartbeatProd');\r\n\r\n  const [{ count: jobCount }]: Array<{\r\n    count: number;\r\n  }> = await getSequelize().query(\r\n    `SELECT count(*) FROM pgboss_prod.job WHERE state = 'created';`,\r\n    {\r\n      type: QueryTypes.SELECT,\r\n    },\r\n  );\r\n\r\n  logger.info(`${jobCount} jobs currently in the prod queue`);\r\n\r\n  if (jobCount < UNACCEPTABLY_LONG_QUEUE_LENGTH) {\r\n    try {\r\n      // https://uptime.betterstack.com/team/53072/heartbeats/149302\r\n      void fetch(\r\n        'https://uptime.betterstack.com/api/v1/heartbeat/4QK52h4vc1RADyCX5CDeW9ZT',\r\n      );\r\n    } catch (e) {\r\n      logger.logException('Error sending prod async heartbeat', e);\r\n    }\r\n  } else {\r\n    logger.logException('Async queue size too big - not sending heartbeat', {\r\n      jobCount,\r\n      tier: 'prod',\r\n    });\r\n  }\r\n}\r\n", "import type { AsyncTierJobDefinition } from 'server/src/asyncTier/jobDefinition.ts';\r\nimport applicationUsageMetricsJob from 'server/src/asyncTier/jobs/applicationUsageMetrics.ts';\r\nimport { default as asyncWorkerHealthCheck } from 'server/src/asyncTier/jobs/asyncWorkerHealthCheck.ts';\r\nimport checkAWSCredentials from 'server/src/asyncTier/jobs/checkAWSCredentials.ts';\r\nimport databaseTidyUpJob from 'server/src/asyncTier/jobs/databaseTidyUp.ts';\r\nimport exampleJob from 'server/src/asyncTier/jobs/example.ts';\r\nimport generateAWSCredentialsReport from 'server/src/asyncTier/jobs/generateAWSCredentials.ts';\r\nimport resizeProfilePicture from 'server/src/asyncTier/jobs/resizeProfilePicture.ts';\r\nimport notifyWebhook from 'server/src/asyncTier/jobs/notifyWebhook.ts';\r\nimport rotateAllJiraRefreshTokens from 'server/src/asyncTier/jobs/jiraRefreshTokenRotate.ts';\r\nimport sendEmailNotification from 'server/src/asyncTier/jobs/sendEmailNotificationWithDelay.ts';\r\nimport sendSlackNotificationWithDelay from 'server/src/asyncTier/jobs/sendSlackNotificationWithDelay.ts';\r\nimport syncSlackChannelsList from 'server/src/asyncTier/jobs/syncSlackChannelsList.ts';\r\nimport syncSlackGreyUsers from 'server/src/asyncTier/jobs/syncSlackGreyUsers.ts';\r\nimport wipeTemporaryTokensData from 'server/src/asyncTier/jobs/wipeTemporaryTokensData.ts';\r\nimport generateLinkPreviews from 'server/src/asyncTier/jobs/generateLinkPreviews.ts';\r\nimport asyncWorkerHealthHeartbeatStaging from 'server/src/asyncTier/jobs/asyncWorkerHealthHeartbeatStaging.ts';\r\nimport asyncWorkerHealthHeartbeatProd from 'server/src/asyncTier/jobs/asyncWorkerHealthHeartbeatProd.ts';\r\n\r\n// List of async job definitions. Add yours here!\r\nexport const asyncJobList = [\r\n  applicationUsageMetricsJob,\r\n  asyncWorkerHealthCheck,\r\n  asyncWorkerHealthHeartbeatStaging,\r\n  asyncWorkerHealthHeartbeatProd,\r\n  checkAWSCredentials,\r\n  databaseTidyUpJob,\r\n  exampleJob,\r\n  generateAWSCredentialsReport,\r\n  generateLinkPreviews,\r\n  resizeProfilePicture,\r\n  rotateAllJiraRefreshTokens,\r\n  sendEmailNotification,\r\n  sendSlackNotificationWithDelay,\r\n  syncSlackChannelsList,\r\n  syncSlackGreyUsers,\r\n  wipeTemporaryTokensData,\r\n  notifyWebhook,\r\n] as const satisfies readonly AsyncTierJobDefinition<string, any>[];\r\n\r\nexport type AsyncJobDataTypes = {\r\n  [Obj in (typeof asyncJobList)[number] as Obj['name']]: Parameters<\r\n    Obj['func']\r\n  >[0];\r\n};\r\n", "import { initBoss } from 'server/src/asyncTier/pgboss.ts';\r\n\r\nimport { initSequelize } from 'server/src/entity/sequelize.ts';\r\nimport { initializeLinkSigningCredentials } from 'server/src/files/upload.ts';\r\nimport { initFeatureFlags } from 'server/src/featureflags/index.ts';\r\nimport { anonymousLogger } from 'server/src/logging/Logger.ts';\r\nimport { initRedis } from 'server/src/redis/index.ts';\r\nimport { subscribeToPubSubEvent, initPubSub } from 'server/src/pubsub/index.ts';\r\nimport env from 'server/src/config/Env.ts';\r\nimport { asyncJobList } from 'server/src/asyncTier/jobs.ts';\r\nimport { sendMessageToCord } from 'server/src/slack/util.ts';\r\nimport { backgroundPromise } from 'server/src/util/backgroundPromise.ts';\r\n\r\nasync function main() {\r\n  const boss = await initBoss();\r\n\r\n  // make sure sequelize is happy\r\n  await initSequelize('async');\r\n\r\n  initRedis();\r\n\r\n  // Wait for PubSub to initialize\r\n  await initPubSub();\r\n\r\n  await initializeLinkSigningCredentials();\r\n\r\n  await initFeatureFlags().catch(\r\n    anonymousLogger().exceptionLogger('initFeatureFlags failed'),\r\n  );\r\n\r\n  // print basic logging information\r\n  anonymousLogger().logLoggerInfo();\r\n\r\n  const existingSchedulesByName = new Map(\r\n    (await boss.getSchedules()).map((schedule) => [schedule.name, schedule]),\r\n  );\r\n\r\n  // Register all jobs and their schedules with pgboss. (Any schedules declared\r\n  // in the job definitions are installed in pgboss and removed from\r\n  // `existingSchedulesByName` in the process.)\r\n  for (const job of asyncJobList) {\r\n    await job.register(boss, env.CORD_TIER, existingSchedulesByName);\r\n  }\r\n\r\n  // Any remaining entries in existingSchedulesByName are schedules that none of\r\n  // the async jobs have declared now. They must be from older versions of the\r\n  // async worker. Hence, we remove all of those now.\r\n  for (const abandonedSchedule of existingSchedulesByName.keys()) {\r\n    await boss.unschedule(abandonedSchedule);\r\n  }\r\n\r\n  await subscribeToPubSubEvent(\r\n    'pub-sub-health-check',\r\n    null,\r\n    handlePubSubHealthCheckEvent,\r\n  );\r\n\r\n  anonymousLogger().info('Registered all async jobs - ready to do work');\r\n}\r\n\r\nfunction handleFailedHealthCheck() {\r\n  const { CORD_OPS_SLACK_CHANNEL_ID } = env;\r\n\r\n  if (CORD_OPS_SLACK_CHANNEL_ID) {\r\n    backgroundPromise(\r\n      sendMessageToCord(\r\n        '\u274C PgBoss pubSub health check failed',\r\n        CORD_OPS_SLACK_CHANNEL_ID,\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nconst HEALTH_CHECK_TIMEOUT = 5 * 60000; // 5 minutes\r\nlet lastTimeout: NodeJS.Timeout | undefined = undefined;\r\n\r\nfunction handlePubSubHealthCheckEvent() {\r\n  if (lastTimeout) {\r\n    clearTimeout(lastTimeout);\r\n  }\r\n  lastTimeout = setTimeout(handleFailedHealthCheck, HEALTH_CHECK_TIMEOUT);\r\n}\r\n\r\nmain().catch((err) => {\r\n  console.error(err);\r\n  process.exit(1);\r\n});\r\n"],
  "mappings": "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",
  "names": ["defaultValue", "Table", "Column", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "version", "FeatureFlags", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "FeatureFlags", "version", "Model", "Column", "DataTypes", "Table", "Counter", "Gauge", "counter", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Counter", "error", "Sequelize", "resolve", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "jsonStableStringify", "url", "isEmpty", "url", "version", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "crypto", "dayjs", "dayjs", "credentials", "path", "key", "crypto", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "crypto", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "PrimaryKey", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "DataTypes", "Sequelize", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "DataLoader", "Op", "DataLoader", "cache", "DataLoader", "Op", "DataLoader", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Sentry", "uuid", "Counter", "Gauge", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Column", "Table", "Model", "DataTypes", "Sequelize", "Model", "Column", "DataTypes", "Sequelize", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Table", "Column", "PrimaryKey", "Model", "DataTypes", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "DataTypes", "Column", "Model", "PrimaryKey", "Table", "Model", "PrimaryKey", "Column", "DataTypes", "Table", "Table", "Column", "Model", "DataTypes", "Model", "Column", "DataTypes", "Table", "Gauge", "Sequelize", "client", "crypto", "jsonStableStringify", "DataLoader", "Op", "unique", "DataLoader", "unique", "Op", "input", "Counter", "jsonStableStringify", "FeatureFlags", "orgID", "userID", "QueryTypes", "QueryTypes", "Sequelize", "Sequelize", "boss", "tier", "url", "uuid", "jwt", "Op", "Buffer", "unique", "slackClient", "unique", "uuid", "DataLoader", "QueryTypes", "DataLoader", "QueryTypes", "DataLoader", "unique", "QueryTypes", "Op", "DataLoader", "unique", "cache", "DataLoader", "unique", "Op", "jsonStableStringify", "cache", "DataLoader", "unique", "QueryTypes", "makeKey", "QueryTypes", "Op", "DataLoader", "DataLoader", "QueryTypes", "Op", "Op", "QueryTypes", "DataLoader", "DataLoader", "Op", "QueryTypes", "DataLoader", "DataLoader", "DataLoader", "cache", "DataLoader", "DataLoader", "DataLoader", "DataLoader", "DataLoader", "tasks", "QueryTypes", "DataLoader", "DataLoader", "QueryTypes", "Op", "QueryTypes", "Sequelize", "DataLoader", "unique", "DataLoader", "Sequelize", "Op", "QueryTypes", "unique", "FeatureFlags", "QueryTypes", "QueryTypes", "Op", "DataLoader", "unique", "DataLoader", "unique", "Op", "Op", "Op", "Op", "Op", "Op", "version", "tier", "Op", "DataLoader", "DataLoader", "QueryTypes", "QueryTypes", "QueryTypes", "QueryTypes", "unique", "unique", "getHeader", "headerText", "Op", "uuid", "verify", "Op", "Sequelize", "Sequelize", "url", "Op", "required", "optional", "verify", "tx", "Op", "uuid", "Counter", "QueryTypes", "QueryTypes", "DataLoader", "Op", "DataLoader", "Op", "QueryTypes", "FeatureFlags", "QueryTypes", "QueryTypes", "QueryTypes", "cache", "FeatureFlags", "sequelize", "uuid", "segments", "Sequelize", "counter", "Counter", "Sequelize", "jsonStableStringify", "jsonStableStringify", "url", "FeatureFlags", "application", "credentials", "url", "transition", "baseURL", "QueryTypes", "FormData", "uuid", "uuid", "isUUID", "validate", "Sequelize", "Op", "QueryTypes", "unique", "QueryTypes", "unique", "userID", "Op", "Sequelize", "url", "uuid", "isUUID", "isUUID", "isUUID", "isUUID", "isUUID", "address", "url", "url", "init", "createHmac", "jsonStableStringify", "Op", "QueryTypes", "Op", "QueryTypes", "Counter", "unique", "unique", "jsonStableStringify", "createHmac", "url", "url", "resolve", "isUUID", "verify", "isUUID", "isUUID", "verify", "url", "cookie", "Slack", "Op", "QueryTypes", "crypto", "sign", "verify", "sign", "verify", "error", "slackClient", "user", "org", "Op", "QueryTypes", "logLevel", "code", "type", "WebClient", "https", "resolve", "counter", "Counter", "slackClient", "WebClient", "counter", "Counter", "tier", "completeOAuthFlow", "completeOAuthFlow", "userInfo", "createIssue", "getIssue", "url", "completeOAuthFlow", "url", "teamID", "completeOAuthFlow", "resolve", "completeOAuthFlow", "credentials", "createIssue", "url", "userInfo", "externalReference", "getIssue", "isUUID", "isJWT", "sign", "verify", "decode", "Sequelize", "counter", "Counter", "isUUID", "isJWT", "decode", "verify", "Sequelize", "sign", "resolve", "result", "QueryTypes", "add", "remove", "QueryTypes", "Op", "Op", "add", "remove", "Op", "Sequelize", "dayjs", "Calendar", "dayjs", "Calendar", "Sequelize", "Op", "uuid", "unique", "Ajv", "ajv", "Ajv", "Op", "Op", "uuid", "FormData", "unique", "completeOAuthFlow", "userInfo", "getUserInfo", "apiRequest", "unique", "FormData", "createWebhook", "url", "encode", "encode", "html", "credentials", "externalReference", "url", "uuid", "createWebhook", "Op", "Op", "uuid", "counter", "Counter", "url", "URL", "url", "URL", "FeatureFlags", "encode", "textNodeToHtml", "encode", "html", "tier", "FeatureFlags", "headerText", "uuid", "unique", "unique", "url", "url", "FeatureFlags", "uuid", "url", "createThread", "unique", "resolve", "cookie", "verify", "decode", "isUUID", "decode", "crypto", "decode", "verify", "Counter", "isUUID", "FeatureFlags", "jwt", "url", "url", "url", "uuid", "uuid", "jwt", "uuid", "uuid", "Sequelize", "Sequelize", "URL", "uuid", "uuid", "orgMembersCount", "cookie", "nanoid", "orgID", "nanoid", "jwt", "jwt", "uuid", "uuid", "userInfo", "completeOAuthFlow", "jwt", "uuid", "url", "uuid", "uuid", "viewer", "uuid", "QueryTypes", "QueryTypes", "url", "freeEmailDomains", "QueryTypes", "FeatureFlags", "uuid", "uuid", "url", "sequelize", "QueryTypes", "DEFAULT_LIMIT", "encodeToken", "loadTypingUsers", "QueryTypes", "unique", "uuid", "url", "unique", "remove", "uuid", "context", "updatedMessage", "timeouts", "makeKey", "redis", "resolve", "clearPreviousTimeout", "timeouts", "jwt", "Op", "Sequelize", "DEFAULT_LIMIT", "encodeToken", "Op", "Sequelize", "QueryTypes", "uuid", "uuid", "jwt", "getClientAuthToken", "QueryTypes", "getClientAuthToken", "uuid", "assertValid", "assertValid", "uuid", "package_default", "package_default", "FeatureFlags", "Stripe", "Stripe", "Op", "DEFAULT_LIMIT", "encodeToken", "Op", "Ajv", "addFormat", "QueryTypes", "ajv", "Ajv", "addFormat", "sequelize", "QueryTypes", "GraphQLJSON", "uuid", "Op", "Op", "uuid", "addrs", "addrs", "FeatureFlags", "parse", "url", "createThread", "page", "existingThread", "thread", "message", "FeatureFlags", "Counter", "sign", "sign", "jwt", "uuid", "uuid", "updateThread", "resolve", "FeatureFlags", "uuid", "uuid", "QueryTypes", "QueryTypes", "$$asyncIterator", "resolve", "url", "uuid", "uuid", "QueryTypes", "THROTTLE_MS", "QueryTypes", "QueryTypes", "QueryTypes", "schema_default", "FeatureFlags", "GraphQLJSON", "schema_default", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "documentNode", "base64", "unique", "unique", "unique", "convertGqlNotificationHeaderTranslation", "unique", "Pg", "Pg", "where", "resolve", "DEFAULT_LIMIT", "MAX_LIMIT", "credentials", "client", "Counter", "uuid", "completeOAuthFlow", "userInfo", "getUserInfo", "getAccessToken", "handleResponseJSON", "FormData", "credentials", "getAccessToken", "additionalTextForTask", "url", "userInfo", "getUserInfo", "QueryTypes", "node", "html", "url", "Slack", "jwt", "cookie", "QueryTypes", "QueryTypes", "url", "sha384", "crypto", "url", "publicS3Bucket", "sharp", "sharp", "Counter", "url", "uuid", "Op", "application", "uuid", "IAMClient", "IAMClient", "parse", "S3Client", "sharp", "resolve", "parse", "S3Client", "sharp", "counter", "Counter", "url", "getErrorMessage", "Slack", "QueryTypes", "sequelize", "QueryTypes", "QueryTypes", "QueryTypes", "QueryTypes", "QueryTypes", "boss"]
}
