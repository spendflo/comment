interface DiagnosticPlatformData {
    name?: string;
    osArch?: string;
    osName?: string;
    osVersion?: string;
    /**
     * Platform specific identifiers.
     * For instance `nodeVersion`
     */
    [key: string]: string | undefined;
}
interface DiagnosticSdkData {
    name?: string;
    wrapperName?: string;
    wrapperVersion?: string;
}
interface DiagnosticConfigData {
    customBaseURI: boolean;
    customStreamURI: boolean;
    customEventsURI: boolean;
    eventsCapacity: number;
    connectTimeoutMillis: number;
    socketTimeoutMillis: number;
    eventsFlushIntervalMillis: number;
    pollingIntervalMillis: number;
    reconnectTimeMillis: number;
    streamingDisabled: boolean;
    usingRelayDaemon: boolean;
    offline: boolean;
    allAttributesPrivate: boolean;
    contextKeysCapacity: number;
    contextKeysFlushIntervalMillis: number;
    usingProxy: boolean;
    usingProxyAuthenticator: boolean;
    diagnosticRecordingIntervalMillis: number;
    dataStoreType: string;
}
interface DiagnosticId {
    diagnosticId: string;
    sdkKeySuffix: string;
}
export interface DiagnosticInitEvent {
    kind: 'diagnostic-init';
    id: DiagnosticId;
    creationDate: number;
    sdk: DiagnosticSdkData;
    configuration: DiagnosticConfigData;
    platform: DiagnosticPlatformData;
}
interface StreamInitData {
    timestamp: number;
    failed: boolean;
    durationMillis: number;
}
export interface DiagnosticStatsEvent {
    kind: 'diagnostic';
    id: DiagnosticId;
    creationDate: number;
    dataSinceDate: number;
    droppedEvents: number;
    deduplicatedUsers: number;
    eventsInLastBatch: number;
    streamInits: StreamInitData[];
}
export {};
//# sourceMappingURL=DiagnosticsManager.d.ts.map