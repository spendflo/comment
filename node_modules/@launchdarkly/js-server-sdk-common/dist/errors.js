"use strict";
// These classes are of trivial complexity. If they become
// more complex, then they could be independent files.
/* eslint-disable max-classes-per-file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHttpRecoverable = exports.LDClientError = exports.LDUnexpectedResponseError = exports.LDStreamingError = exports.LDPollingError = void 0;
class LDPollingError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyPollingError';
    }
}
exports.LDPollingError = LDPollingError;
class LDStreamingError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = 'LaunchDarklyStreamingError';
    }
}
exports.LDStreamingError = LDStreamingError;
class LDUnexpectedResponseError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyUnexpectedResponseError';
    }
}
exports.LDUnexpectedResponseError = LDUnexpectedResponseError;
class LDClientError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LaunchDarklyClientError';
    }
}
exports.LDClientError = LDClientError;
function isHttpRecoverable(status) {
    if (status >= 400 && status < 500) {
        return status === 400 || status === 408 || status === 429;
    }
    return true;
}
exports.isHttpRecoverable = isHttpRecoverable;
//# sourceMappingURL=errors.js.map