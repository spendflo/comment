export declare type PromiseState = 'pending' | 'fulfilled' | 'rejected';
export declare type Executor<Value> = ConstructorParameters<typeof Promise<Value>>[0];
export declare type ResolveFunction<Value> = Parameters<Executor<Value>>[0];
export declare type RejectFunction<Reason> = Parameters<Executor<Reason>>[1];
export declare type DeferredPromiseExecutor<Input = never, Output = Input> = {
    (resolve?: ResolveFunction<Input>, reject?: RejectFunction<any>): void;
    resolve: ResolveFunction<Input>;
    reject: RejectFunction<any>;
    result?: Output;
    state: PromiseState;
    rejectionReason?: unknown;
};
export declare function createDeferredExecutor<Input = never, Output = Input>(): DeferredPromiseExecutor<Input, Output>;
