import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  EC2ClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../EC2Client";
import {
  DescribeScheduledInstanceAvailabilityRequest,
  DescribeScheduledInstanceAvailabilityResult,
} from "../models/models_4";
export { __MetadataBearer, $Command };
export interface DescribeScheduledInstanceAvailabilityCommandInput
  extends DescribeScheduledInstanceAvailabilityRequest {}
export interface DescribeScheduledInstanceAvailabilityCommandOutput
  extends DescribeScheduledInstanceAvailabilityResult,
    __MetadataBearer {}
export declare class DescribeScheduledInstanceAvailabilityCommand extends $Command<
  DescribeScheduledInstanceAvailabilityCommandInput,
  DescribeScheduledInstanceAvailabilityCommandOutput,
  EC2ClientResolvedConfig
> {
  readonly input: DescribeScheduledInstanceAvailabilityCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: DescribeScheduledInstanceAvailabilityCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: EC2ClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<
    DescribeScheduledInstanceAvailabilityCommandInput,
    DescribeScheduledInstanceAvailabilityCommandOutput
  >;
  private serialize;
  private deserialize;
}
