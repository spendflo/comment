import { ElasticLoadBalancingV2ServiceException as __BaseException } from "./ElasticLoadBalancingV2ServiceException";
export const AuthenticateCognitoActionConditionalBehaviorEnum = {
    ALLOW: "allow",
    AUTHENTICATE: "authenticate",
    DENY: "deny",
};
export const AuthenticateOidcActionConditionalBehaviorEnum = {
    ALLOW: "allow",
    AUTHENTICATE: "authenticate",
    DENY: "deny",
};
export const RedirectActionStatusCodeEnum = {
    HTTP_301: "HTTP_301",
    HTTP_302: "HTTP_302",
};
export const ActionTypeEnum = {
    AUTHENTICATE_COGNITO: "authenticate-cognito",
    AUTHENTICATE_OIDC: "authenticate-oidc",
    FIXED_RESPONSE: "fixed-response",
    FORWARD: "forward",
    REDIRECT: "redirect",
};
export class CertificateNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "CertificateNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "CertificateNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ListenerNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ListenerNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ListenerNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ListenerNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyCertificatesException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyCertificatesException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyCertificatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyCertificatesException.prototype);
        this.Message = opts.Message;
    }
}
export class DuplicateTagKeysException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateTagKeysException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateTagKeysException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateTagKeysException.prototype);
        this.Message = opts.Message;
    }
}
export class LoadBalancerNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "LoadBalancerNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LoadBalancerNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LoadBalancerNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class RuleNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "RuleNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RuleNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RuleNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TargetGroupNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "TargetGroupNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetGroupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetGroupNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
    }
}
export class AllocationIdNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "AllocationIdNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AllocationIdNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AllocationIdNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ALPNPolicyNotSupportedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ALPNPolicyNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ALPNPolicyNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ALPNPolicyNotSupportedException.prototype);
        this.Message = opts.Message;
    }
}
export class AvailabilityZoneNotSupportedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AvailabilityZoneNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AvailabilityZoneNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AvailabilityZoneNotSupportedException.prototype);
        this.Message = opts.Message;
    }
}
export const ProtocolEnum = {
    GENEVE: "GENEVE",
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    TCP: "TCP",
    TCP_UDP: "TCP_UDP",
    TLS: "TLS",
    UDP: "UDP",
};
export class DuplicateListenerException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateListenerException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateListenerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateListenerException.prototype);
        this.Message = opts.Message;
    }
}
export class IncompatibleProtocolsException extends __BaseException {
    constructor(opts) {
        super({
            name: "IncompatibleProtocolsException",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleProtocolsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleProtocolsException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidConfigurationRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidConfigurationRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidConfigurationRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConfigurationRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidLoadBalancerActionException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidLoadBalancerActionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLoadBalancerActionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLoadBalancerActionException.prototype);
        this.Message = opts.Message;
    }
}
export class SSLPolicyNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "SSLPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SSLPolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SSLPolicyNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TargetGroupAssociationLimitException extends __BaseException {
    constructor(opts) {
        super({
            name: "TargetGroupAssociationLimitException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetGroupAssociationLimitException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetGroupAssociationLimitException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyActionsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyActionsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyActionsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyActionsException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyListenersException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyListenersException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyListenersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyListenersException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRegistrationsForTargetIdException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRegistrationsForTargetIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRegistrationsForTargetIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRegistrationsForTargetIdException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTargetsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTargetsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTargetsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTargetsException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyUniqueTargetGroupsPerLoadBalancerException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyUniqueTargetGroupsPerLoadBalancerException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyUniqueTargetGroupsPerLoadBalancerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyUniqueTargetGroupsPerLoadBalancerException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedProtocolException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedProtocolException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedProtocolException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedProtocolException.prototype);
        this.Message = opts.Message;
    }
}
export const IpAddressType = {
    DUALSTACK: "dualstack",
    IPV4: "ipv4",
};
export const LoadBalancerSchemeEnum = {
    INTERNAL: "internal",
    INTERNET_FACING: "internet-facing",
};
export const LoadBalancerTypeEnum = {
    APPLICATION: "application",
    GATEWAY: "gateway",
    NETWORK: "network",
};
export const LoadBalancerStateEnum = {
    ACTIVE: "active",
    ACTIVE_IMPAIRED: "active_impaired",
    FAILED: "failed",
    PROVISIONING: "provisioning",
};
export class DuplicateLoadBalancerNameException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateLoadBalancerNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateLoadBalancerNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateLoadBalancerNameException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidSchemeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSchemeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSchemeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchemeException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidSecurityGroupException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSecurityGroupException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSecurityGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSecurityGroupException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidSubnetException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSubnetException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSubnetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSubnetException.prototype);
        this.Message = opts.Message;
    }
}
export class OperationNotPermittedException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationNotPermittedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotPermittedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotPermittedException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class SubnetNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "SubnetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SubnetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubnetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyLoadBalancersException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyLoadBalancersException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyLoadBalancersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyLoadBalancersException.prototype);
        this.Message = opts.Message;
    }
}
export class PriorityInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "PriorityInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "PriorityInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PriorityInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRulesException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRulesException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRulesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRulesException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTargetGroupsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTargetGroupsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTargetGroupsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTargetGroupsException.prototype);
        this.Message = opts.Message;
    }
}
export const TargetGroupIpAddressTypeEnum = {
    IPV4: "ipv4",
    IPV6: "ipv6",
};
export const TargetTypeEnum = {
    ALB: "alb",
    INSTANCE: "instance",
    IP: "ip",
    LAMBDA: "lambda",
};
export class DuplicateTargetGroupNameException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateTargetGroupNameException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateTargetGroupNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateTargetGroupNameException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidTargetException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTargetException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTargetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetException.prototype);
        this.Message = opts.Message;
    }
}
export const TargetHealthReasonEnum = {
    DEREGISTRATION_IN_PROGRESS: "Target.DeregistrationInProgress",
    FAILED_HEALTH_CHECKS: "Target.FailedHealthChecks",
    HEALTH_CHECK_DISABLED: "Target.HealthCheckDisabled",
    INITIAL_HEALTH_CHECKING: "Elb.InitialHealthChecking",
    INTERNAL_ERROR: "Elb.InternalError",
    INVALID_STATE: "Target.InvalidState",
    IP_UNUSABLE: "Target.IpUnusable",
    NOT_IN_USE: "Target.NotInUse",
    NOT_REGISTERED: "Target.NotRegistered",
    REGISTRATION_IN_PROGRESS: "Elb.RegistrationInProgress",
    RESPONSE_CODE_MISMATCH: "Target.ResponseCodeMismatch",
    TIMEOUT: "Target.Timeout",
};
export const TargetHealthStateEnum = {
    DRAINING: "draining",
    HEALTHY: "healthy",
    INITIAL: "initial",
    UNAVAILABLE: "unavailable",
    UNHEALTHY: "unhealthy",
    UNUSED: "unused",
};
export class HealthUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "HealthUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "HealthUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, HealthUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
