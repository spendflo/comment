import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { ElasticLoadBalancingV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ElasticLoadBalancingV2Client";
import { SetSubnetsInput, SetSubnetsOutput } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link SetSubnetsCommand}.
 */
export interface SetSubnetsCommandInput extends SetSubnetsInput {
}
/**
 * @public
 *
 * The output of {@link SetSubnetsCommand}.
 */
export interface SetSubnetsCommandOutput extends SetSubnetsOutput, __MetadataBearer {
}
/**
 * @public
 * <p>Enables the Availability Zones for the specified public subnets for the specified
 *       Application Load Balancer or Network Load Balancer. The specified subnets replace the
 *       previously enabled subnets.</p>
 *          <p>When you specify subnets for a Network Load Balancer, you must include all subnets that
 *       were enabled previously, with their existing configurations, plus any additional
 *       subnets.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ElasticLoadBalancingV2Client, SetSubnetsCommand } from "@aws-sdk/client-elastic-load-balancing-v2"; // ES Modules import
 * // const { ElasticLoadBalancingV2Client, SetSubnetsCommand } = require("@aws-sdk/client-elastic-load-balancing-v2"); // CommonJS import
 * const client = new ElasticLoadBalancingV2Client(config);
 * const input = { // SetSubnetsInput
 *   LoadBalancerArn: "STRING_VALUE", // required
 *   Subnets: [ // Subnets
 *     "STRING_VALUE",
 *   ],
 *   SubnetMappings: [ // SubnetMappings
 *     { // SubnetMapping
 *       SubnetId: "STRING_VALUE",
 *       AllocationId: "STRING_VALUE",
 *       PrivateIPv4Address: "STRING_VALUE",
 *       IPv6Address: "STRING_VALUE",
 *     },
 *   ],
 *   IpAddressType: "ipv4" || "dualstack",
 * };
 * const command = new SetSubnetsCommand(input);
 * const response = await client.send(command);
 * // { // SetSubnetsOutput
 * //   AvailabilityZones: [ // AvailabilityZones
 * //     { // AvailabilityZone
 * //       ZoneName: "STRING_VALUE",
 * //       SubnetId: "STRING_VALUE",
 * //       OutpostId: "STRING_VALUE",
 * //       LoadBalancerAddresses: [ // LoadBalancerAddresses
 * //         { // LoadBalancerAddress
 * //           IpAddress: "STRING_VALUE",
 * //           AllocationId: "STRING_VALUE",
 * //           PrivateIPv4Address: "STRING_VALUE",
 * //           IPv6Address: "STRING_VALUE",
 * //         },
 * //       ],
 * //     },
 * //   ],
 * //   IpAddressType: "ipv4" || "dualstack",
 * // };
 *
 * ```
 *
 * @param SetSubnetsCommandInput - {@link SetSubnetsCommandInput}
 * @returns {@link SetSubnetsCommandOutput}
 * @see {@link SetSubnetsCommandInput} for command's `input` shape.
 * @see {@link SetSubnetsCommandOutput} for command's `response` shape.
 * @see {@link ElasticLoadBalancingV2ClientResolvedConfig | config} for ElasticLoadBalancingV2Client's `config` shape.
 *
 * @throws {@link AllocationIdNotFoundException} (client fault)
 *  <p>The specified allocation ID does not exist.</p>
 *
 * @throws {@link AvailabilityZoneNotSupportedException} (client fault)
 *  <p>The specified Availability Zone is not supported.</p>
 *
 * @throws {@link InvalidConfigurationRequestException} (client fault)
 *  <p>The requested configuration is not valid.</p>
 *
 * @throws {@link InvalidSubnetException} (client fault)
 *  <p>The specified subnet is out of available addresses.</p>
 *
 * @throws {@link LoadBalancerNotFoundException} (client fault)
 *  <p>The specified load balancer does not exist.</p>
 *
 * @throws {@link SubnetNotFoundException} (client fault)
 *  <p>The specified subnet does not exist.</p>
 *
 * @throws {@link ElasticLoadBalancingV2ServiceException}
 * <p>Base exception class for all service exceptions from ElasticLoadBalancingV2 service.</p>
 *
 * @example To enable Availability Zones for a load balancer
 * ```javascript
 * // This example enables the Availability Zones for the specified subnets for the specified load balancer.
 * const input = {
 *   "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
 *   "Subnets": [
 *     "subnet-8360a9e7",
 *     "subnet-b7d581c0"
 *   ]
 * };
 * const command = new SetSubnetsCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "AvailabilityZones": [
 *     {
 *       "SubnetId": "subnet-8360a9e7",
 *       "ZoneName": "us-west-2a"
 *     },
 *     {
 *       "SubnetId": "subnet-b7d581c0",
 *       "ZoneName": "us-west-2b"
 *     }
 *   ]
 * }
 * *\/
 * // example id: elbv2-set-subnets-1
 * ```
 *
 */
export declare class SetSubnetsCommand extends $Command<SetSubnetsCommandInput, SetSubnetsCommandOutput, ElasticLoadBalancingV2ClientResolvedConfig> {
    readonly input: SetSubnetsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: SetSubnetsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSubnetsCommandInput, SetSubnetsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
